{"version":3,"sources":["index.browser.js","bursts/getLevelEntryForBurst.js","bursts/getEffectsForBurst.js","buffs/getEffectId.js","buffs/constants.js","buffs/effect-metadata.js","buffs/getMetadataForProc.js","buffs/isAttackingProcId.js","bursts/getExtraAttackDamageFramesEntry.js","buffs/getMetadataForPassive.js","buffs/getNameForProc.js","buffs/getNameForPassive.js","buffs/isProcEffect.js","buffs/isPassiveEffect.js","datamine-types.js","buffs/combineEffectsAndDamageFrames.js","buffs/getEffectName.js","buffs/parsers/buff-types.js","buffs/parsers/_helpers.js","buffs/parsers/proc-effect-mapping.js","buffs/parsers/convertProcEffectToBuffs.js","buffs/parsers/passive-effect-mapping.js","buffs/parsers/convertPassiveEffectToBuffs.js","buffs/parsers/buff-metadata.js","buffs/parsers/getMetadataForBuff.js","extra-skills/getEffectsForExtraSkill.js","items/getEffectsForItem.js","items/getItemImageUrl.js","leader-skills/getEffectsForLeaderSkill.js","units/getUnitImageFileNames.js","units/getUnitImageUrl.js","sp-enhancements/getEffectsForSpEnhancement.js","sp-enhancements/getSpCategoryName.js","sp-enhancements/_constants.js","sp-enhancements/spIndexToCode.js","sp-enhancements/spCodeToIndex.js","sp-enhancements/getSpEntryId.js","sp-enhancements/getSpEntryWithId.js","sp-enhancements/getAllDependenciesForSpEntry.js","sp-enhancements/getAllEntriesThatDependOnSpEntry.js","version.js"],"names":["bfmtUtilities","exports","getLevelEntryForBurst","burst","level","burstEffectsByLevel","Array","isArray","levels","levelIndex","isNaN","length","getEffectsForBurst","levelEntry","effects","getEffectId","effect","resultId","KNOWN_PROC_ID","KNOWN_PASSIVE_ID","constants","Object","freeze","__proto__","ProcBuffType","PASSIVE_METADATA","PROC_METADATA","getMetadataForProc","id","metadata","hasOwnProperty","call","isAttackingProcId","metadataEntry","Type","Attack","getExtraAttackDamageFramesEntry","damageFrames","effectDelay","inputFrames","relevantFrames","filter","frame","procId","BurstHeal","unifiedFrames","reduce","acc","frameEntry","index","keepFirstFrame","numFrames","damageDistribution","frameTimes","frameIndex","push","damage","time","resultDamageFramesEntry","hits","sort","a","b","forEach","getMetadataForPassive","getNameForProc","Name","getNameForPassive","isProcEffect","isPassiveEffect","Ailment","ArenaCondition","MoveType","TargetArea","TargetAreaShorthand","TargetType","SpPassiveType","SphereTypeName","SphereTypeId","SpCategoryName","SpCategoryId","UnitAnimationKey","UnitElement","UnitGender","UnitGettingType","UnitKind","UnitType","ItemType","MimicUnitIds","MimicMonsterGroupMapping","Mimic","BatMimic","DragonMimic","MetalMimic","datamineTypes","combineEffectsAndDamageFrames","combinedEntries","map","i","correspondingFrameEntry","delay","frames","targetArea","Random","targetType","getEffectName","resultName","effectId","passive","proc","BuffStackType","BuffSource","BuffConditionElement","UnitStat","IconId","BuffId","createSourceEntryFromContext","context","source","sourceId","createSourcesFromContext","resultArray","previousSources","slice","unshift","processExtraSkillConditions","conditions","aggregate","units","Set","items","sphereTypes","unknowns","condition","add","item","unit","type_id","condition_id","result","entries","entry","size","from","getPassiveTargetData","isLeaderSkillEffect","LeaderSkill","sp_type","EnhancePassive","isPartyEffect","Party","Self","Aoe","Single","getProcTargetData","parseNumberOrDefault","value","defaultValue","createUnknownParamsValue","params","startIndex","hasValue","buffSourceIsBurstType","BraveBurst","SuperBraveBurst","UltimateBraveBurst","BondedBraveBurst","BondedSuperBraveBurst","DualBraveBurst","includes","mapping","getProcEffectToBuffMapping","reload","Map","setMapping","ELEMENT_MAPPING","All","Fire","Water","Earth","Thunder","Light","Dark","AILMENT_MAPPING","Poison","Weak","Sick","Injury","Curse","Paralysis","AttackReduction","DefenseReduction","RecoveryReduction","retrieveCommonInfoForEffects","injectionContext","targetData","sources","splitEffectParams","split","createUnknownParamsEntry","unknownParams","originalId","assign","UNKNOWN_PROC_BUFF_PARAMS","createTurnDurationEntry","buffs","duration","TURN_DURATION_MODIFICATION","createUnknownParamsEntryFromExtraParams","extraParams","isTurnDurationBuff","turnDuration","getAttackInformationFromContext","distribution","parseProcWithSingleNumericalParameterAndTurnDuration","effectValueKey","effectTurnDurationKey","parseParamValue","rawValue","buffId","rawTurnDuration","results","set","flatAtk","filteredValue","key","healLow","healHigh","recX","recY","keys","rec","hasAnyHealValues","flatFill","percentFill","rawFlatFill","rawPercentFill","element","atk","def","crit","coreStatProperties","rawElement","Unknown","effectElement","statType","effectKey","find","k","startsWith","concat","prop","hasAnyStats","some","statKey","buffEntry","targetElements","bc","hc","dropRateProperties","hasAnyRates","recoveredHpPercent","rawRecoveredHp","flatHpBoost","percentHpBoost","rawFlatBoost","rawPercentBoost","STAT_TYPE_MAPPING","statReductionEntries","statType1","value1","procChance1","statType2","value2","procChance2","rawStatType","rawProcChance","chance","stat","buffKey","hasAnyValues","curedAilments","splitParams","knownParams","p","param","values","ailment","inflictedAilments","numParams","ailmentValue","ailmentType","reviveToHp","rawReviveToHp","rawHits","mitigation","rawMitigation","mitigationKey","e","AILMENTS_ORDER","resistances","poison","weak","sick","injury","curse","paralysis","rawDuration","ailmentKeysInEffect","correspondingKey","fillLow","fillHigh","rawFillLow","rawFillHigh","rawChance","hasAnyFillValues","whenAttacked","coreStatPropertyMapping","effectToCoreStatMapping","attack","defense","recovery","hp","stats","convertedStat","rawConvertedStat","hitIncreasePerHit","extraHitDamage","defaultConversionFunction","UNKNOWN_PROC_EFFECT_ID","convertProcEffectToBuffs","TypeError","conversionFunction","reloadMapping","get","getPassiveEffectToBuffMapping","X","OmniParadigm","TYPE_MAPPING","Lord","Anima","Breaker","Guardian","Oracle","Rex","STATS_ORDER","conditionInfo","UNKNOWN_PASSIVE_BUFF_PARAMS","parsePassiveWithSingleNumericalParameter","typedEffect","parsePassiveWithNumericalValueRangeAndChance","effectKeyLow","effectKeyHigh","effectKeyChance","buffKeyLow","buffKeyHigh","defaultEffectChance","generateBaseConditions","valueLow","valueHigh","rawLowValue","rawHighValue","elements","element1","element2","elementValue","createBaseStatObject","unitType","targetUnitType","elem","requireHpAbove","hpThreshold","rawRequireHpAboveFlag","rawHpThreshold","hpGreaterThanOrEqualTo","hpLessThanOrEqualTo","DROP_TYPES_ORDER","dropRates","zel","karma","dropType","onEnemyDefeat","damageReduction","rawReduction","rawHealLow","rawHealHigh","onBattleWin","UNKNOWN_PASSIVE_EFFECT_ID","convertPassiveEffectToBuffs","BUFF_METADATA","name","stackType","icons","UNKNOWN","turnDurationModification","Passive","buff","TURN_DURATION_DOWN","TURN_DURATION_UP","BUFF_HPDOWN","BUFF_HPUP","BUFF_ATKDOWN","BUFF_ATKUP","BUFF_DEFDOWN","BUFF_DEFUP","BUFF_RECDOWN","BUFF_RECUP","BUFF_CRTRATEDOWN","BUFF_CRTRATEUP","createIconGetterForStat","polarity","iconKey","toUpperCase","poisonResist","BUFF_POISONBLK","weakResist","BUFF_WEAKBLK","sickResist","BUFF_SICKBLK","injuryResist","BUFF_INJURYBLK","curseResist","BUFF_CURSEBLK","BUFF_PARALYSISBLK","fireMitigation","BUFF_FIREDMGDOWN","waterMitigation","BUFF_WATERDMGDOWN","earthMitigation","BUFF_EARTHDMGDOWN","thunderMitigation","BUFF_THUNDERDMGDOWN","lightMitigation","BUFF_LIGHTDMGDOWN","darkMitigation","BUFF_DARKDMGDOWN","BUFF_ELEMENTDMGDOWN","BUFF_DAMAGECUT","bbGauge","BUFF_BBREC","hcEfficacy","BUFF_HCREC","BUFF_HPTHRESHATKDOWN","BUFF_HPTHRESHATKUP","BUFF_HPTHRESHDEFDOWN","BUFF_HPTHRESHDEFUP","BUFF_HPTHRESHRECDOWN","BUFF_HPTHRESHRECUP","BUFF_HPTHRESHCRTRATEDOWN","BUFF_HPTHRESHCRTRATEUP","bcDropRate","BUFF_BCDOWN","BUFF_BCDROP","hcDropRate","BUFF_HCDOWN","BUFF_HCDROP","itemDropRate","BUFF_ITEMDOWN","BUFF_ITEMDROP","zelDropRate","BUFF_ZELDOWN","BUFF_ZELDROP","karmaDropRate","BUFF_KARMADOWN","BUFF_KARMADROP","hpRecovery","BUFF_HPREC","BUFF_HPABS","poisonInflict","BUFF_ADDPOISON","weakInflict","BUFF_ADDWEAK","sickInflict","BUFF_ADDSICK","injuryInflict","BUFF_ADDINJURY","curseInflict","BUFF_ADDCURSE","BUFF_ADDPARA","atkDownInflict","BUFF_ADDATKDOWN","defDownInflict","BUFF_ADDDEFDOWN","recDownInflict","BUFF_ADDRECDOWN","BUFF_ADDAILMENT","ConditionalTimed","BUFF_BEENATK_HPREC","BUFF_DAMAGEBB","damageReflect","BUFF_COUNTERDAMAGE","targetingModification","BUFF_REPENEATT","BUFF_GETENEATT","ATK_ST","ATK_AOE","Burst","Active","hasElement","koResistance","Singleton","BUFF_KOBLK","atkDownResist","BUFF_ATKDOWNBLK","defDownResist","BUFF_DEFDOWNBLK","recDownResist","BUFF_RECDOWNBLK","BUFF_AILMENTBLK","DEBUFF_POISON","DEBUFF_WEAK","DEBUFF_SICK","DEBUFF_INJURY","DEBUFF_CURSE","DEBUFF_PARALYSIS","DEBUFF_AILMENT","ATK_RT","ATK_ST_HPREC","ATK_AOE_HPREC","defenseIgnore","BUFF_IGNOREDEF","sparkDamage","BUFF_SPARKUP","BUFF_CONVERTATKDOWN","BUFF_CONVERTATKUP","BUFF_CONVERTDEFDOWN","BUFF_CONVERTDEFUP","BUFF_CONVERTRECDOWN","BUFF_CONVERTRECUP","hitCountModification","BUFF_HITUP","ATK_ST_PROPORTIONAL","ATK_AOE_PROPORTIONAL","getMetadataForBuff","index$1","index$2","parsers","getEffectsForExtraSkill","skill","index$3","getEffectsForItem","target_area","target_type","fullProcEffect","getItemImageUrl","baseContentUrl","fileName","index$4","getEffectsForLeaderSkill","index$5","getUnitImageFileNames","suffix","fileNameSuffix","spritesheet","battleAvatar","guideAvatar","fullIllustration","getUnitImageUrl","index$6","getEffectsForSpEnhancement","effectWrappers","effectWrapper","spType","originalEffect","unwrappedEffect","getSpCategoryName","categoryId","numericalCategoryId","Spark","Drops","Special","CHARACTER_CODE_FOR_UPPERCASE_A","charCodeAt","CHARACTER_CODE_FOR_LOWERCASE_A","CHARACTER_CODE_FOR_NUMBER_0","spIndexToCode","correspondingCharacterCode","Number","isInteger","String","fromCharCode","spCodeToIndex","code","characterCodeOffset","getSpEntryId","getSpEntryWithId","spId","getAllDependenciesForSpEntry","allEntries","addedEntries","dependencies","dependency","dependencyId","dependencyEntry","s","has","subDependencies","getAllEntriesThatDependOnSpEntry","dependents","entryId","dependent","subDependents","index$7","version","bursts","extraSkills","leaderSkills","spEnhancements"],"mappings":"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","file":"index.browser.js","sourcesContent":["var bfmtUtilities = (function (exports) {\n    'use strict';\n\n    /**\n     * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get level entry from.\n     * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n     * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n     */\n    function getLevelEntryForBurst(burst, level) {\n        const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n        let levelIndex;\n        if (level !== null && !isNaN(level)) {\n            // 1-indexed\n            levelIndex = (+level - 1);\n        }\n        else {\n            // default to last entry in burst\n            levelIndex = burstEffectsByLevel.length - 1;\n        }\n        return burstEffectsByLevel[levelIndex];\n    }\n\n    /**\n     * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get effects from.\n     * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n     * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n     */\n    function getEffectsForBurst(burst, level) {\n        const levelEntry = getLevelEntryForBurst(burst, level);\n        return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n    }\n\n    /**\n     * @description Get the proc/passive ID of a given object.\n     * @param effect Object to get the effect ID from.\n     * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectId(effect) {\n        let resultId = '';\n        if (effect) {\n            resultId = effect['proc id'] || effect['unknown proc id'] ||\n                effect['passive id'] || effect['unknown passive id'] || '';\n        }\n        return resultId;\n    }\n\n    var KNOWN_PROC_ID;\n    (function (KNOWN_PROC_ID) {\n        KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n        KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    })(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\n    var KNOWN_PASSIVE_ID;\n    (function (KNOWN_PASSIVE_ID) {\n        KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n        KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    })(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n\n    var constants = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get KNOWN_PROC_ID () { return KNOWN_PROC_ID; },\n        get KNOWN_PASSIVE_ID () { return KNOWN_PASSIVE_ID; }\n    });\n\n    var ProcBuffType;\n    (function (ProcBuffType) {\n        ProcBuffType[\"Attack\"] = \"Attack\";\n    })(ProcBuffType || (ProcBuffType = {}));\n    /* eslint-disable */\n    /**\n     * @ignore\n     */\n    const PASSIVE_METADATA = Object.freeze({\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Parameter Boost\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Elemental Parameter Boost\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Type-Based Parameter Boost\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"Status Negation\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Damage Reduction\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Gradual BB Gauge Boost\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"HC Efficacy\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"HP-Conditional Parameter Boost\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"HP-Conditional Drop Rate Boost\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"BC Fill on Enemy Defeat\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Damage Reduction (Chance)\"\n        },\n        \"15\": {\n            \"ID\": \"15\",\n            \"Name\": \"Heal on Enemy Defeat\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Heal on Battle Victory\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"HP Absorption\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Drop Rate Boost\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"Status Infliction\"\n        },\n        \"21\": {\n            \"ID\": \"21\",\n            \"Name\": \"Parameter Boost for First X Turns\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"BC Fill on Battle Victory\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Heal when Attacked (Chance)\"\n        },\n        \"25\": {\n            \"ID\": \"25\",\n            \"Name\": \"BC Fill when Hit (Chance)\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Damage Counter (Chance)\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Increased Target Chance\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Decreased Target Chance\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Defense Ignore (Chance)\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"BB Conditional Parameter Boost\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"BC Efficacy\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Heal over Time\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"Critical Damage Boost\"\n        },\n        \"35\": {\n            \"ID\": \"35\",\n            \"Name\": \"BC Fill when Normal Attacking\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Extra Action\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Hit Count Boost\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Parameter Conversion\"\n        },\n        \"41\": {\n            \"ID\": \"41\",\n            \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"Gender Parameter Boost\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Damage Reduction to 1\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Flat Parameter Boost\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"Critical Damage Negation\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"BC Fill on Spark\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"BC Cost Reduction\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"BB Gauge Consumption Reduction\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Elemental Damage Boost\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Conditional Effect based on HP Threshold\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Damage Reduction when Guarding\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BC Fill when Attacked when Guarding\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BC Fill on Guard\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Elemental Damage Reduction for first X Turns\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"BB Atk Boost\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"BC Fill on Critical\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Add buff to Brave Burst\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"OD Gauge Fill Rate Boost\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"Status Counter\"\n        },\n        \"72\": {\n            \"ID\": \"72\",\n            \"Name\": \"Turn End Effects Activate at Turn Start\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\"\n        },\n        \"74\": {\n            \"ID\": \"74\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Spark Vulnerability\"\n        },\n        \"77\": {\n            \"ID\": \"77\",\n            \"Name\": \"Spark Damage Reduction\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Conditional Effect after Damage Received Threshold\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"BC Fill after Damage Received Threshold\"\n        },\n        \"80\": {\n            \"ID\": \"80\",\n            \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n        },\n        \"81\": {\n            \"ID\": \"81\",\n            \"Name\": \"BC Fill after Damage Dealt Threshold\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"Conditional Effect after BC Received Threshold\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"Conditional Effect after HC Received Threshold\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"BC Fill after HC Received Threshold\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"Conditional Effect after Spark Threshold\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Conditional Effect on Guard\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Conditional Effect on Critical\"\n        },\n        \"90\": {\n            \"ID\": \"90\",\n            \"Name\": \"Status Infliction on Critical\"\n        },\n        \"91\": {\n            \"ID\": \"91\",\n            \"Name\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Negate Defense Ignore\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Added Elements\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Normal Attacks Hit All Foes\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Player EXP Boost\"\n        },\n        \"99\": {\n            \"ID\": \"99\",\n            \"Name\": \"\"\n        },\n        \"100\": {\n            \"ID\": \"100\",\n            \"Name\": \"Spark Critical\"\n        },\n        \"101\": {\n            \"ID\": \"101\",\n            \"Name\": \"Heal on Spark\"\n        },\n        \"102\": {\n            \"ID\": \"102\",\n            \"Name\": \"Added Elements\"\n        },\n        \"103\": {\n            \"ID\": \"103\",\n            \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n        },\n        \"104\": {\n            \"ID\": \"104\",\n            \"Name\": \"Spark Boost when HP Passes Threshold\"\n        },\n        \"105\": {\n            \"ID\": \"105\",\n            \"Name\": \"Turn-Based Parameter Boost\"\n        },\n        \"106\": {\n            \"ID\": \"106\",\n            \"Name\": \"Conditional Effect after Activating Overdrive\"\n        },\n        \"107\": {\n            \"ID\": \"107\",\n            \"Name\": \"Add Effect to Leader Skill\"\n        },\n        \"109\": {\n            \"ID\": \"109\",\n            \"Name\": \"BB Gauge Reduction (Chance)\"\n        },\n        \"110\": {\n            \"ID\": \"110\",\n            \"Name\": \"BC Efficacy Reduction (Chance)\"\n        },\n        \"111\": {\n            \"ID\": \"111\",\n            \"Name\": \"Increase Brave Burst Activation Rate\"\n        },\n        \"112\": {\n            \"ID\": \"112\",\n            \"Name\": \"ABP/CBP Boost\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Conditional Effect after HP Threshold\"\n        },\n        \"114\": {\n            \"ID\": \"114\",\n            \"Name\": \"Inflict Buff when Attacked\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n        },\n        \"128\": {\n            \"ID\": \"128\",\n            \"Name\": \"Damage Reduction from Normal Attacks\"\n        },\n        \"143\": {\n            \"ID\": \"143\",\n            \"Name\": \"Break Atk Parameter Limit\"\n        },\n        \"10008\": {\n            \"ID\": \"10008\",\n            \"Name\": \"Damage Reduction from Specific Sources\"\n        },\n        \"11004\": {\n            \"ID\": \"11004\",\n            \"Name\": \"Elemental Spark Damage Boost\"\n        },\n        \"11005\": {\n            \"ID\": \"11005\",\n            \"Name\": \"Elemental Critical Damage Boost\"\n        },\n        \"11006\": {\n            \"ID\": \"11006\",\n            \"Name\": \"Summoner EXP Boost\"\n        },\n        \"11009\": {\n            \"ID\": \"11009\",\n            \"Name\": \"Effect Duration Boost\"\n        },\n        \"66,1\": {\n            \"ID\": \"66,1\",\n            \"Name\": \"\"\n        }\n    });\n    /**\n     * @ignore\n     */\n    const PROC_METADATA = Object.freeze({\n        \"0\": {\n            \"ID\": \"0\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Regular Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Burst Heal\",\n            \"Type\": \"\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Heal over Time\",\n            \"Type\": \"\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"BB Gauge Refill\",\n            \"Type\": \"\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"Drop Rate\",\n            \"Type\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Parameter Reduction\",\n            \"Type\": \"\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"Status Cleanse\",\n            \"Type\": \"\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"Status Infliction\",\n            \"Type\": \"\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"Revive (Guaranteed)\",\n            \"Type\": \"\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"Random Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Lifesteal Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"Status Negation\",\n            \"Type\": \"\"\n        },\n        \"18\": {\n            \"ID\": \"18\",\n            \"Name\": \"Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Gradual BB Gauge Boost\",\n            \"Type\": \"\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"BC Fill on Hit\",\n            \"Type\": \"\"\n        },\n        \"22\": {\n            \"ID\": \"22\",\n            \"Name\": \"Defense Ignore\",\n            \"Type\": \"\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Hit Count Boost\",\n            \"Type\": \"\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Fixed Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Multi-Element Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"Add Elements\",\n            \"Type\": \"\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Instant BB Gauge Fill\",\n            \"Type\": \"\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"Element Shift\",\n            \"Type\": \"\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Buff Removal (Chance)\",\n            \"Type\": \"\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"BB Gauge Reduction (Chance)\",\n            \"Type\": \"\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Leader Skill Lock (Chance)\",\n            \"Type\": \"\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Summon Unit\",\n            \"Type\": \"\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"Status Cure\",\n            \"Type\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Status Infliction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Instant OD Fill\",\n            \"Type\": \"\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Damage over Time (Additional Damage)\",\n            \"Type\": \"\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"BB Atk Boost\",\n            \"Type\": \"\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Non-Lethal Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"HP Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"Piercing Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"Retire\",\n            \"Type\": \"\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Damage Counter\",\n            \"Type\": \"\"\n        },\n        \"51\": {\n            \"ID\": \"51\",\n            \"Name\": \"Parameter Reduction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"BC Efficacy\",\n            \"Type\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Status Counter\",\n            \"Type\": \"\"\n        },\n        \"54\": {\n            \"ID\": \"54\",\n            \"Name\": \"Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Elemental Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"56\": {\n            \"ID\": \"56\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"57\": {\n            \"ID\": \"57\",\n            \"Name\": \"BC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Spark Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BB Atk Reduction\",\n            \"Type\": \"\"\n        },\n        \"60\": {\n            \"ID\": \"60\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BB-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Barrier\",\n            \"Type\": \"\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Selective Buff Wipe\",\n            \"Type\": \"\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"Consecutive Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\",\n            \"Type\": \"\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Revive (Chance)\",\n            \"Type\": \"\"\n        },\n        \"67\": {\n            \"ID\": \"67\",\n            \"Name\": \"BC Fill on Spark\",\n            \"Type\": \"\"\n        },\n        \"68\": {\n            \"ID\": \"68\",\n            \"Name\": \"Damage Reduction when Guarding\",\n            \"Type\": \"\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"BC Fill on Guard\",\n            \"Type\": \"\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"BB Gauge Fill Rate Debuff\",\n            \"Type\": \"\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\",\n            \"Type\": \"\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Element Squad-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"76\": {\n            \"ID\": \"76\",\n            \"Name\": \"Extra Action\",\n            \"Type\": \"\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Self Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"Player EXP Boost\",\n            \"Type\": \"\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"83\": {\n            \"ID\": \"83\",\n            \"Name\": \"Spark Critical\",\n            \"Type\": \"\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"OD Gauge Fill Rate\",\n            \"Type\": \"\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"Heal when Attacked\",\n            \"Type\": \"\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"HP Absorption\",\n            \"Type\": \"\"\n        },\n        \"87\": {\n            \"ID\": \"87\",\n            \"Name\": \"Heal on Spark\",\n            \"Type\": \"\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Self Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Self Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Self Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"94\": {\n            \"ID\": \"94\",\n            \"Name\": \"Normal Attacks Hit All Foes\",\n            \"Type\": \"\"\n        },\n        \"95\": {\n            \"ID\": \"95\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n            \"Type\": \"\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Element Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Gradual OD Fill\",\n            \"Type\": \"\"\n        },\n        \"119\": {\n            \"ID\": \"119\",\n            \"Name\": \"Gradual BC Drain\",\n            \"Type\": \"\"\n        },\n        \"123\": {\n            \"ID\": \"123\",\n            \"Name\": \"OD Gauge Reduction\",\n            \"Type\": \"\"\n        },\n        \"126\": {\n            \"ID\": \"126\",\n            \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n            \"Type\": \"\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Lock On\",\n            \"Type\": \"\"\n        },\n        \"130\": {\n            \"ID\": \"130\",\n            \"Name\": \"Parameter Reduction Counter\",\n            \"Type\": \"\"\n        },\n        \"131\": {\n            \"ID\": \"131\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"132\": {\n            \"ID\": \"132\",\n            \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"901\": {\n            \"ID\": \"901\",\n            \"Name\": \"Raid Heal (on Map)\",\n            \"Type\": \"\"\n        },\n        \"902\": {\n            \"ID\": \"902\",\n            \"Name\": \"Raid Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"903\": {\n            \"ID\": \"903\",\n            \"Name\": \"Raid Boss Reveal\",\n            \"Type\": \"\"\n        },\n        \"905\": {\n            \"ID\": \"905\",\n            \"Name\": \"Raid Teleport\",\n            \"Type\": \"\"\n        },\n        \"906\": {\n            \"ID\": \"906\",\n            \"Name\": \"Raid Flee\",\n            \"Type\": \"\"\n        },\n        \"907\": {\n            \"ID\": \"907\",\n            \"Name\": \"Raid Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"908\": {\n            \"ID\": \"908\",\n            \"Name\": \"Raid Item Drop Rate Boost\",\n            \"Type\": \"\"\n        },\n        \"10000\": {\n            \"ID\": \"10000\",\n            \"Name\": \"Taunt\",\n            \"Type\": \"\"\n        },\n        \"10001\": {\n            \"ID\": \"10001\",\n            \"Name\": \"Stealth\",\n            \"Type\": \"\"\n        },\n        \"10002\": {\n            \"ID\": \"10002\",\n            \"Name\": \"Shield (old)\",\n            \"Type\": \"\"\n        },\n        \"10003\": {\n            \"ID\": \"10003\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"10004\": {\n            \"ID\": \"10004\",\n            \"Name\": \"Damage Immunity\",\n            \"Type\": \"\"\n        },\n        \"10005\": {\n            \"ID\": \"10005\",\n            \"Name\": \"Turn Skip (short duration)\",\n            \"Type\": \"\"\n        },\n        \"10006\": {\n            \"ID\": \"10006\",\n            \"Name\": \"Turn Skip (long duration)\",\n            \"Type\": \"\"\n        },\n        \"10007\": {\n            \"ID\": \"10007\",\n            \"Name\": \"Evasion\",\n            \"Type\": \"\"\n        },\n        \"10009\": {\n            \"ID\": \"10009\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"10012\": {\n            \"ID\": \"10012\",\n            \"Name\": \"OD Drain\",\n            \"Type\": \"\"\n        },\n        \"10015\": {\n            \"ID\": \"10015\",\n            \"Name\": \"Elemental Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"10016\": {\n            \"ID\": \"10016\",\n            \"Name\": \"Element Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"10017\": {\n            \"ID\": \"10017\",\n            \"Name\": \"Elemental Shield\",\n            \"Type\": \"\"\n        },\n        \"10018\": {\n            \"ID\": \"10018\",\n            \"Name\": \"Max HP Reduction\",\n            \"Type\": \"\"\n        },\n        \"10019\": {\n            \"ID\": \"10019\",\n            \"Name\": \"Effect Purge\",\n            \"Type\": \"\"\n        },\n        \"10020\": {\n            \"ID\": \"10020\",\n            \"Name\": \"Piercing Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"10021\": {\n            \"ID\": \"10021\",\n            \"Name\": \"Active Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10022\": {\n            \"ID\": \"10022\",\n            \"Name\": \"Passive Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10023\": {\n            \"ID\": \"10023\",\n            \"Name\": \"HC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"10025\": {\n            \"ID\": \"10025\",\n            \"Name\": \"KO Resistance Negation\",\n            \"Type\": \"\"\n        },\n        \"10026\": {\n            \"ID\": \"10026\",\n            \"Name\": \"Doom\",\n            \"Type\": \"\"\n        },\n        \"11000\": {\n            \"ID\": \"11000\",\n            \"Name\": \"Negative HP-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"11001\": {\n            \"ID\": \"11001\",\n            \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n            \"Type\": \"\"\n        },\n        \"11002\": {\n            \"ID\": \"11002\",\n            \"Name\": \"HP Limit Break, Convert to HP\",\n            \"Type\": \"\"\n        },\n        \"11003\": {\n            \"ID\": \"11003\",\n            \"Name\": \"Effect Negation\",\n            \"Type\": \"\"\n        },\n        \"70001\": {\n            \"ID\": \"70001\",\n            \"Name\": \"Mana Bubble Shield\",\n            \"Type\": \"\"\n        },\n        \"70002\": {\n            \"ID\": \"70002\",\n            \"Name\": \"Recast\",\n            \"Type\": \"\"\n        },\n        \"2-5\": {\n            \"ID\": \"2-5\",\n            \"Name\": \"Burst Heal and DEF/REC Boost\",\n            \"Type\": \"\"\n        }\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given proc ID.\n     * @param id Proc ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForProc(id, metadata = PROC_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Determine if a given proc ID's type is an attack.\n     * @param id Proc ID to check.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n     */\n    function isAttackingProcId(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n    }\n\n    /**\n     * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n     * @param damageFrames Damage frames that each have their own proc ID.\n     * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Damage frames entry whose frames are based on the input damage frames.\n     */\n    function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n        // relevant frames are all effects for healing or attacking\n        const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n        const relevantFrames = inputFrames.filter(frame => {\n            const procId = getEffectId(frame);\n            return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n        });\n        const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n            const keepFirstFrame = index === 0;\n            const numFrames = frameEntry['frame times'].length;\n            const damageDistribution = frameEntry['hit dmg% distribution'];\n            const frameTimes = frameEntry['frame times'];\n            for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n                acc.push({\n                    damage: damageDistribution[frameIndex],\n                    time: frameTimes[frameIndex],\n                });\n            }\n            return acc;\n        }, []);\n        const resultDamageFramesEntry = {\n            'effect delay time(ms)/frame': effectDelay,\n            'frame times': [],\n            'hit dmg% distribution': [],\n            'hit dmg% distribution (total)': 0,\n            hits: 0,\n        };\n        unifiedFrames.sort((a, b) => a.time - b.time)\n            .forEach(({ time, damage }) => {\n            resultDamageFramesEntry['frame times'].push(time);\n            resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n            resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n        });\n        resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n        return resultDamageFramesEntry;\n    }\n\n    var index = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLevelEntryForBurst: getLevelEntryForBurst,\n        getEffectsForBurst: getEffectsForBurst,\n        getExtraAttackDamageFramesEntry: getExtraAttackDamageFramesEntry\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given passive ID.\n     * @param id Passive ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Get the associated name for a given proc ID.\n     * @param id Proc ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Name of the proc ID if it exists, empty string otherwise.\n     */\n    function getNameForProc(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Get the associated name for a given passive ID.\n     * @param id Passive ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Name of the passive ID if it exists, empty string otherwise.\n     */\n    function getNameForPassive(id, metadata) {\n        const metadataEntry = getMetadataForPassive(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Determine if a given effect object is a proc effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a proc effect based on its properties.\n     */\n    function isProcEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n    }\n\n    /**\n     * @description Determine if a given effect object is a passive effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a passive effect based on its properties.\n     */\n    function isPassiveEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n    }\n\n    var Ailment;\n    (function (Ailment) {\n        Ailment[\"Poison\"] = \"poison\";\n        Ailment[\"Weak\"] = \"weak\";\n        Ailment[\"Sick\"] = \"sick\";\n        Ailment[\"Injury\"] = \"injury\";\n        Ailment[\"Curse\"] = \"curse\";\n        Ailment[\"Paralysis\"] = \"paralysis\";\n        Ailment[\"AttackReduction\"] = \"atk down\";\n        Ailment[\"DefenseReduction\"] = \"def down\";\n        Ailment[\"RecoveryReduction\"] = \"rec down\";\n        Ailment[\"Unknown\"] = \"unknown\";\n    })(Ailment || (Ailment = {}));\n    var ArenaCondition;\n    (function (ArenaCondition) {\n        ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n        ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n        ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n        ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n        ArenaCondition[\"hp_min\"] = \"hp_min\";\n        ArenaCondition[\"hp_max\"] = \"hp_max\";\n        ArenaCondition[\"atk_max\"] = \"atk_max\";\n        ArenaCondition[\"random\"] = \"random\";\n    })(ArenaCondition || (ArenaCondition = {}));\n    var MoveType;\n    (function (MoveType) {\n        MoveType[\"Moving\"] = \"1\";\n        MoveType[\"Teleporting\"] = \"2\";\n        MoveType[\"NonMoving\"] = \"3\";\n    })(MoveType || (MoveType = {}));\n    var TargetArea;\n    (function (TargetArea) {\n        TargetArea[\"Aoe\"] = \"aoe\";\n        TargetArea[\"Single\"] = \"single\";\n        TargetArea[\"Random\"] = \"random\";\n    })(TargetArea || (TargetArea = {}));\n    var TargetAreaShorthand;\n    (function (TargetAreaShorthand) {\n        TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n        TargetAreaShorthand[\"Single\"] = \"ST\";\n        TargetAreaShorthand[\"Random\"] = \"RT\";\n    })(TargetAreaShorthand || (TargetAreaShorthand = {}));\n    var TargetType;\n    (function (TargetType) {\n        TargetType[\"Self\"] = \"self\";\n        TargetType[\"Party\"] = \"party\";\n        TargetType[\"Enemy\"] = \"enemy\";\n    })(TargetType || (TargetType = {}));\n    var SpPassiveType;\n    (function (SpPassiveType) {\n        SpPassiveType[\"AddPassive\"] = \"passive\";\n        SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n        SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n        SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n        SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n    })(SpPassiveType || (SpPassiveType = {}));\n    var SphereTypeName;\n    (function (SphereTypeName) {\n        SphereTypeName[\"None\"] = \"None\";\n        SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n        SphereTypeName[\"Critical\"] = \"Critical\";\n        SphereTypeName[\"Drop\"] = \"Drop\";\n        SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n        SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n        SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n        SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n        SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n        SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n        SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n        SphereTypeName[\"Spark\"] = \"Spark\";\n        SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n        SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n        SphereTypeName[\"Special\"] = \"Special\";\n    })(SphereTypeName || (SphereTypeName = {}));\n    var SphereTypeId;\n    (function (SphereTypeId) {\n        SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n        SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n        SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n        SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n        SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n        SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n        SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n        SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n        SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n        SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n        SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n        SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n        SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n        SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n        SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n    })(SphereTypeId || (SphereTypeId = {}));\n    var SpCategoryName;\n    (function (SpCategoryName) {\n        SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n        SpCategoryName[\"Spark\"] = \"Spark\";\n        SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n        SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n        SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n        SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n        SpCategoryName[\"Drops\"] = \"Drops\";\n        SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n        SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n        SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n        SpCategoryName[\"Special\"] = \"Special\";\n        SpCategoryName[\"Unknown\"] = \"Unknown\";\n    })(SpCategoryName || (SpCategoryName = {}));\n    var SpCategoryId;\n    (function (SpCategoryId) {\n        SpCategoryId[\"Parameter Boost\"] = \"1\";\n        SpCategoryId[\"Spark\"] = \"2\";\n        SpCategoryId[\"Critical Hits\"] = \"3\";\n        SpCategoryId[\"Attack Boost\"] = \"4\";\n        SpCategoryId[\"BB Gauge\"] = \"5\";\n        SpCategoryId[\"HP Recovery\"] = \"6\";\n        SpCategoryId[\"Drops\"] = \"7\";\n        SpCategoryId[\"Ailment Resistance\"] = \"8\";\n        SpCategoryId[\"Ailment Infliction\"] = \"9\";\n        SpCategoryId[\"Damage Reduction\"] = \"10\";\n        SpCategoryId[\"Special\"] = \"11\";\n    })(SpCategoryId || (SpCategoryId = {}));\n    var UnitAnimationKey;\n    (function (UnitAnimationKey) {\n        UnitAnimationKey[\"Attack\"] = \"attack\";\n        UnitAnimationKey[\"Idle\"] = \"idle\";\n        UnitAnimationKey[\"Move\"] = \"move\";\n    })(UnitAnimationKey || (UnitAnimationKey = {}));\n    var UnitElement;\n    (function (UnitElement) {\n        UnitElement[\"Fire\"] = \"fire\";\n        UnitElement[\"Water\"] = \"water\";\n        UnitElement[\"Earth\"] = \"earth\";\n        UnitElement[\"Thunder\"] = \"thunder\";\n        UnitElement[\"Light\"] = \"light\";\n        UnitElement[\"Dark\"] = \"dark\";\n    })(UnitElement || (UnitElement = {}));\n    var UnitGender;\n    (function (UnitGender) {\n        UnitGender[\"Male\"] = \"male\";\n        UnitGender[\"Female\"] = \"female\";\n        UnitGender[\"Other\"] = \"other\";\n    })(UnitGender || (UnitGender = {}));\n    var UnitGettingType;\n    (function (UnitGettingType) {\n        UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n        UnitGettingType[\"Farmable\"] = \"farmable\";\n        UnitGettingType[\"RareSummon\"] = \"rare summon\";\n        UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n    })(UnitGettingType || (UnitGettingType = {}));\n    var UnitKind;\n    (function (UnitKind) {\n        UnitKind[\"Normal\"] = \"normal\";\n        UnitKind[\"Evolution\"] = \"evo\";\n        UnitKind[\"Enhancing\"] = \"enhancing\";\n        UnitKind[\"Sale\"] = \"sale\";\n    })(UnitKind || (UnitKind = {}));\n    var UnitType;\n    (function (UnitType) {\n        UnitType[\"Lord\"] = \"lord\";\n        UnitType[\"Anima\"] = \"anima\";\n        UnitType[\"Breaker\"] = \"breaker\";\n        UnitType[\"Guardian\"] = \"guardian\";\n        UnitType[\"Oracle\"] = \"oracle\";\n        UnitType[\"Rex\"] = \"rex\";\n    })(UnitType || (UnitType = {}));\n    var ItemType;\n    (function (ItemType) {\n        ItemType[\"Consumable\"] = \"consumable\";\n        ItemType[\"Material\"] = \"material\";\n        ItemType[\"Sphere\"] = \"sphere\";\n        ItemType[\"EvolutionMaterial\"] = \"evomat\";\n        ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n        ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n    })(ItemType || (ItemType = {}));\n    var MimicUnitIds;\n    (function (MimicUnitIds) {\n        MimicUnitIds[\"Mimic\"] = \"60142\";\n        MimicUnitIds[\"BatMimic\"] = \"60143\";\n        MimicUnitIds[\"DragonMimic\"] = \"60144\";\n        MimicUnitIds[\"MetalMimic\"] = \"60224\";\n    })(MimicUnitIds || (MimicUnitIds = {}));\n    /**\n     * @description Known values for the monster groups used in {@link IMimicInfo}.\n     */\n    const MimicMonsterGroupMapping = {\n        '1000': MimicUnitIds.Mimic,\n        '1100': MimicUnitIds.BatMimic,\n        '1101': MimicUnitIds.BatMimic,\n        '1200': MimicUnitIds.DragonMimic,\n        '1300': MimicUnitIds.MetalMimic,\n    };\n\n    var datamineTypes = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get Ailment () { return Ailment; },\n        get ArenaCondition () { return ArenaCondition; },\n        get MoveType () { return MoveType; },\n        get TargetArea () { return TargetArea; },\n        get TargetAreaShorthand () { return TargetAreaShorthand; },\n        get TargetType () { return TargetType; },\n        get SpPassiveType () { return SpPassiveType; },\n        get SphereTypeName () { return SphereTypeName; },\n        get SphereTypeId () { return SphereTypeId; },\n        get SpCategoryName () { return SpCategoryName; },\n        get SpCategoryId () { return SpCategoryId; },\n        get UnitAnimationKey () { return UnitAnimationKey; },\n        get UnitElement () { return UnitElement; },\n        get UnitGender () { return UnitGender; },\n        get UnitGettingType () { return UnitGettingType; },\n        get UnitKind () { return UnitKind; },\n        get UnitType () { return UnitType; },\n        get ItemType () { return ItemType; },\n        get MimicUnitIds () { return MimicUnitIds; },\n        MimicMonsterGroupMapping: MimicMonsterGroupMapping\n    });\n\n    /**\n     * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n     * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n     * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n     * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n     */\n    function combineEffectsAndDamageFrames(effects, damageFrames) {\n        let combinedEntries = [];\n        if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n            combinedEntries = effects.map((effect, i) => {\n                const correspondingFrameEntry = damageFrames[i];\n                return {\n                    delay: effect['effect delay time(ms)/frame'],\n                    effect,\n                    frames: correspondingFrameEntry,\n                    id: `${effect['proc id'] || effect['unknown proc id']}`,\n                    targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                    targetType: effect['target type'],\n                };\n            });\n        }\n        return combinedEntries;\n    }\n\n    /**\n     * @description Get the name of a given object.\n     * @param effect Object to get the name from.\n     * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n     * @returns Name of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectName(effect, metadata = {}) {\n        let resultName = '';\n        const effectId = getEffectId(effect);\n        if (isPassiveEffect(effect)) {\n            resultName = getNameForPassive(effectId, metadata && metadata.passive);\n        }\n        else if (isProcEffect(effect)) {\n            resultName = getNameForProc(effectId, metadata && metadata.proc);\n        }\n        return resultName;\n    }\n\n    /**\n     * @description Provides info at a glance regarding a buff's source and how it stacks.\n     */\n    var BuffStackType;\n    (function (BuffStackType) {\n        /**\n         * @description The buff is activated via some skill and lasts for a number of turns.\n         * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n         * from different levels. Two possible levels of sources are:\n         * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n         * 2. Ultimate Brave Burst or Dual Brave Burst\n         */\n        BuffStackType[\"Active\"] = \"active\";\n        /**\n         * @description The buff is always active provided that the source is not nullified.\n         * Most passive buffs can stack with themselves.\n         */\n        BuffStackType[\"Passive\"] = \"passive\";\n        /**\n         * @description The buff is applied for a number of turns once a certain condition is met.\n         * Buffs of the same type are not able to stack.\n         */\n        BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n        /**\n         * @description Only one instance of the buff can be active at a time and can last indefinitely.\n         * A couple examples of this are Barrier and Max HP Boost.\n         */\n        BuffStackType[\"Singleton\"] = \"singleton\";\n        /**\n         * @description The buff's effects immediately apply to the target(s). This differs from singleton\n         * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n         * in the HP bar filling by the sum of those burst heals).\n         */\n        BuffStackType[\"Burst\"] = \"burst\";\n        /**\n         * @description A specific subset of `Burst` type buffs that deal damage to the target.\n         */\n        BuffStackType[\"Attack\"] = \"attack\";\n        /**\n         * @description Only for buffs that cannot be processed by the library yet.\n         */\n        BuffStackType[\"Unknown\"] = \"unknown\";\n    })(BuffStackType || (BuffStackType = {}));\n    var BuffSource;\n    (function (BuffSource) {\n        BuffSource[\"BraveBurst\"] = \"bb\";\n        BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n        BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n        BuffSource[\"DualBraveBurst\"] = \"dbb\";\n        BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n        BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n        BuffSource[\"SpEnhancement\"] = \"sp\";\n        BuffSource[\"Item\"] = \"item\";\n        BuffSource[\"LeaderSkill\"] = \"ls\";\n        BuffSource[\"ExtraSkill\"] = \"es\";\n        /**\n         * @description Buffs that result of having a number of OE+ units in the squad.\n         */\n        BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n        /**\n         * @description Buffs based on a units type. See {@link UnitType}.\n         */\n        BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n        /**\n         * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n         * as well as ambient turn reductions present in some late-game quests.\n         */\n        BuffSource[\"Quest\"] = \"quest\";\n    })(BuffSource || (BuffSource = {}));\n    /**\n     * @description Extra element values that can be used in addition to {@link UnitElement}.\n     */\n    var BuffConditionElement;\n    (function (BuffConditionElement) {\n        BuffConditionElement[\"Unknown\"] = \"unknown\";\n        BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n        BuffConditionElement[\"All\"] = \"all\";\n    })(BuffConditionElement || (BuffConditionElement = {}));\n    /**\n     * @description Stats on a unit that a buff can affect.\n     */\n    var UnitStat;\n    (function (UnitStat) {\n        UnitStat[\"hp\"] = \"hp\";\n        UnitStat[\"atk\"] = \"atk\";\n        UnitStat[\"def\"] = \"def\";\n        UnitStat[\"rec\"] = \"rec\";\n        UnitStat[\"crit\"] = \"crit\";\n        UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n        UnitStat[\"bbGauge\"] = \"bbGauge\";\n        UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n        UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n        UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n        UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n        UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n        UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n        UnitStat[\"poisonResist\"] = \"poisonResist\";\n        UnitStat[\"weakResist\"] = \"weakResist\";\n        UnitStat[\"sickResist\"] = \"sickResist\";\n        UnitStat[\"injuryResist\"] = \"injuryResist\";\n        UnitStat[\"curseResist\"] = \"curseResist\";\n        UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n        UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n        UnitStat[\"weakInflict\"] = \"weakInflict\";\n        UnitStat[\"sickInflict\"] = \"sickInflict\";\n        UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n        UnitStat[\"curseInflict\"] = \"curseInflict\";\n        UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n        UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n        UnitStat[\"defDownResist\"] = \"defDownResist\";\n        UnitStat[\"recDownResist\"] = \"recDownResist\";\n        UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n        UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n        UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n        UnitStat[\"mitigation\"] = \"mitigation\";\n        UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n        UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n        UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n        UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n        UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n        UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n        UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n        UnitStat[\"koResistance\"] = \"koResistance\";\n        UnitStat[\"revive\"] = \"revive\";\n        UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n        UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n        UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n        UnitStat[\"damageReflect\"] = \"damageReflect\";\n        UnitStat[\"targetingModification\"] = \"targetingModification\";\n    })(UnitStat || (UnitStat = {}));\n    var IconId;\n    (function (IconId) {\n        IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n        IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n        IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n        IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n        IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n        IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n        IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n        IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n        IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n        IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n        IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n        IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n        IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n        IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n        IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n        IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n        IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n        IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n        IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n        IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n        IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n        IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n        IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n        IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n        IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n        IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n        IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n        IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n        IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n        IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n        IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n        IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n        IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n        IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n        IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n        IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n        IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n        IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n        IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n        IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n        IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n        IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n        IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n        IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n        IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n        IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n        IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n        IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n        IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n        IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n        IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n        IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n        IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n        IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n        IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n        IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n        IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n        IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n        IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n        IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n        IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n        IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n        IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n        IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n        IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n        IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n        IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n        IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n        IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n        IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n        IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n        IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n        IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n        IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n        IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n        IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n        IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n        IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n        IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n        IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n        IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n        IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n        IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n        IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n        IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n        IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n        IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n        IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n        IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n        IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n        IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n        IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n        IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n        IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n        IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n        IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n        IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n        IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n        IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n        IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n        IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n        IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n        IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n        IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n        IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n        IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n        IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n        IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n        IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n        IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n        IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n        IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n        IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n        IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n        IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n        IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n        IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n        IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n        IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n        IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n        IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n        IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n        IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n        IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n        IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n        IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n        IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n        IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n        IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n        IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n        IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n        IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n        IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n        IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n        IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n        IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n        IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n        IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n        IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n        IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n        IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n        IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n        IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n        IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n        IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n        IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n        IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n        IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n        IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n        IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n        IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n        IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n        IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n        IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n        IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n        IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n        IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n        IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n        IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n        IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n        IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n        IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n        IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n        IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n        IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n        IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n        IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n        IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n        IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n        IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n        IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n        IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n        IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n        IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n        IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n        IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n        IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n        IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n        IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n        IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n        IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n        IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n        IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n        IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n        IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n        IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n        IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n        IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n        IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n        IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n        IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n        IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n        IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n        IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n        IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n        IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n        IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n        IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n        IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n        IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n        IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n        IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n        IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n        IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n        IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n        IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n        IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n        IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n        IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n        IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n        IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n        IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n        IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n        IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n        IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n        IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n        IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n        IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n        IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n        IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n        IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n        IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n        IconId[\"ATK_ST\"] = \"ATK_ST\";\n        IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n        IconId[\"ATK_RT\"] = \"ATK_RT\";\n        IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n        IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n        IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n    })(IconId || (IconId = {}));\n    /**\n     * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n     * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n     * source of a given buff.\n     */\n    var BuffId;\n    (function (BuffId) {\n        BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n        BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n        BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n        BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n        BuffId[\"passive:1:def\"] = \"passive:1:def\";\n        BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n        BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n        BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n        BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n        BuffId[\"passive:2:def\"] = \"passive:2:def\";\n        BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n        BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n        BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n        BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n        BuffId[\"passive:3:def\"] = \"passive:3:def\";\n        BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n        BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n        BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n        BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n        BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n        BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n        BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n        BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n        BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n        BuffId[\"passive:5:water\"] = \"passive:5:water\";\n        BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n        BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n        BuffId[\"passive:5:light\"] = \"passive:5:light\";\n        BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n        BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n        BuffId[\"passive:8\"] = \"passive:8\";\n        BuffId[\"passive:9\"] = \"passive:9\";\n        BuffId[\"passive:10\"] = \"passive:10\";\n        BuffId[\"passive:11:atk\"] = \"passive:11:atk\";\n        BuffId[\"passive:11:def\"] = \"passive:11:def\";\n        BuffId[\"passive:11:rec\"] = \"passive:11:rec\";\n        BuffId[\"passive:11:crit\"] = \"passive:11:crit\";\n        BuffId[\"passive:12:bc\"] = \"passive:12:bc\";\n        BuffId[\"passive:12:hc\"] = \"passive:12:hc\";\n        BuffId[\"passive:12:item\"] = \"passive:12:item\";\n        BuffId[\"passive:12:zel\"] = \"passive:12:zel\";\n        BuffId[\"passive:12:karma\"] = \"passive:12:karma\";\n        BuffId[\"passive:13\"] = \"passive:13\";\n        BuffId[\"passive:14\"] = \"passive:14\";\n        BuffId[\"passive:15\"] = \"passive:15\";\n        BuffId[\"passive:16\"] = \"passive:16\";\n        BuffId[\"passive:17\"] = \"passive:17\";\n        BuffId[\"passive:19:bc\"] = \"passive:19:bc\";\n        BuffId[\"passive:19:hc\"] = \"passive:19:hc\";\n        BuffId[\"passive:19:item\"] = \"passive:19:item\";\n        BuffId[\"passive:19:zel\"] = \"passive:19:zel\";\n        BuffId[\"passive:19:karma\"] = \"passive:19:karma\";\n        BuffId[\"passive:20:poison\"] = \"passive:20:poison\";\n        BuffId[\"passive:20:weak\"] = \"passive:20:weak\";\n        BuffId[\"passive:20:sick\"] = \"passive:20:sick\";\n        BuffId[\"passive:20:injury\"] = \"passive:20:injury\";\n        BuffId[\"passive:20:curse\"] = \"passive:20:curse\";\n        BuffId[\"passive:20:paralysis\"] = \"passive:20:paralysis\";\n        BuffId[\"passive:20:atk down\"] = \"passive:20:atk down\";\n        BuffId[\"passive:20:def down\"] = \"passive:20:def down\";\n        BuffId[\"passive:20:rec down\"] = \"passive:20:rec down\";\n        BuffId[\"passive:20:unknown\"] = \"passive:20:unknown\";\n        BuffId[\"passive:21:atk\"] = \"passive:21:atk\";\n        BuffId[\"passive:21:def\"] = \"passive:21:def\";\n        BuffId[\"passive:21:rec\"] = \"passive:21:rec\";\n        BuffId[\"passive:21:crit\"] = \"passive:21:crit\";\n        BuffId[\"passive:23\"] = \"passive:23\";\n        BuffId[\"passive:24\"] = \"passive:24\";\n        BuffId[\"passive:25\"] = \"passive:25\";\n        BuffId[\"passive:26\"] = \"passive:26\";\n        BuffId[\"passive:27\"] = \"passive:27\";\n        BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n        BuffId[\"proc:1\"] = \"proc:1\";\n        BuffId[\"proc:2\"] = \"proc:2\";\n        BuffId[\"proc:3\"] = \"proc:3\";\n        BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n        BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n        BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n        BuffId[\"proc:5:def\"] = \"proc:5:def\";\n        BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n        BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n        BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n        BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n        BuffId[\"proc:6:item\"] = \"proc:6:item\";\n        BuffId[\"proc:7\"] = \"proc:7\";\n        BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n        BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n        BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n        BuffId[\"proc:9:def\"] = \"proc:9:def\";\n        BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n        BuffId[\"proc:9:unknown\"] = \"proc:9:unknown\";\n        BuffId[\"proc:10:poison\"] = \"proc:10:poison\";\n        BuffId[\"proc:10:weak\"] = \"proc:10:weak\";\n        BuffId[\"proc:10:sick\"] = \"proc:10:sick\";\n        BuffId[\"proc:10:injury\"] = \"proc:10:injury\";\n        BuffId[\"proc:10:curse\"] = \"proc:10:curse\";\n        BuffId[\"proc:10:paralysis\"] = \"proc:10:paralysis\";\n        BuffId[\"proc:10:atk down\"] = \"proc:10:atk down\";\n        BuffId[\"proc:10:def down\"] = \"proc:10:def down\";\n        BuffId[\"proc:10:rec down\"] = \"proc:10:rec down\";\n        BuffId[\"proc:10:unknown\"] = \"proc:10:unknown\";\n        BuffId[\"proc:11:poison\"] = \"proc:11:poison\";\n        BuffId[\"proc:11:weak\"] = \"proc:11:weak\";\n        BuffId[\"proc:11:sick\"] = \"proc:11:sick\";\n        BuffId[\"proc:11:injury\"] = \"proc:11:injury\";\n        BuffId[\"proc:11:curse\"] = \"proc:11:curse\";\n        BuffId[\"proc:11:paralysis\"] = \"proc:11:paralysis\";\n        BuffId[\"proc:11:atk down\"] = \"proc:11:atk down\";\n        BuffId[\"proc:11:def down\"] = \"proc:11:def down\";\n        BuffId[\"proc:11:rec down\"] = \"proc:11:rec down\";\n        BuffId[\"proc:11:unknown\"] = \"proc:11:unknown\";\n        BuffId[\"proc:12\"] = \"proc:12\";\n        BuffId[\"proc:13\"] = \"proc:13\";\n        BuffId[\"proc:14\"] = \"proc:14\";\n        BuffId[\"proc:16:fire\"] = \"proc:16:fire\";\n        BuffId[\"proc:16:water\"] = \"proc:16:water\";\n        BuffId[\"proc:16:earth\"] = \"proc:16:earth\";\n        BuffId[\"proc:16:thunder\"] = \"proc:16:thunder\";\n        BuffId[\"proc:16:light\"] = \"proc:16:light\";\n        BuffId[\"proc:16:dark\"] = \"proc:16:dark\";\n        BuffId[\"proc:16:all\"] = \"proc:16:all\";\n        BuffId[\"proc:16:unknown\"] = \"proc:16:unknown\";\n        BuffId[\"proc:17:poison\"] = \"proc:17:poison\";\n        BuffId[\"proc:17:weak\"] = \"proc:17:weak\";\n        BuffId[\"proc:17:sick\"] = \"proc:17:sick\";\n        BuffId[\"proc:17:injury\"] = \"proc:17:injury\";\n        BuffId[\"proc:17:curse\"] = \"proc:17:curse\";\n        BuffId[\"proc:17:paralysis\"] = \"proc:17:paralysis\";\n        BuffId[\"proc:18\"] = \"proc:18\";\n        BuffId[\"proc:19\"] = \"proc:19\";\n        BuffId[\"proc:20\"] = \"proc:20\";\n        BuffId[\"proc:22\"] = \"proc:22\";\n        BuffId[\"proc:23\"] = \"proc:23\";\n        BuffId[\"proc:24:atk\"] = \"proc:24:atk\";\n        BuffId[\"proc:24:def\"] = \"proc:24:def\";\n        BuffId[\"proc:24:rec\"] = \"proc:24:rec\";\n        BuffId[\"proc:26\"] = \"proc:26\";\n        BuffId[\"proc:27\"] = \"proc:27\";\n    })(BuffId || (BuffId = {}));\n\n    /**\n     * @description Helper function for creating an entry to be used in the `sources`\n     * property of {@link IBuff}.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourceEntryFromContext(context) {\n        return `${context.source}-${context.sourceId}`;\n    }\n    /**\n     * @description Helper function for creating an entries array to be used in the `sources`\n     * property of {@link IBuff}. It handles setting the order of the sources.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourcesFromContext(context) {\n        const resultArray = Array.isArray(context.previousSources)\n            ? context.previousSources.slice()\n            : [];\n        // Ensure that the current source is at the beginning of the array\n        resultArray.unshift(createSourceEntryFromContext(context));\n        return resultArray;\n    }\n    /**\n     * @description Given the conditions in an extra skill effect, normalize them into\n     * a simpler object containing the IDs of each condition type.\n     * @param effect Extra skill effect to process conditions from.\n     * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n     */\n    function processExtraSkillConditions(effect) {\n        const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n        const aggregate = {\n            units: new Set(),\n            items: new Set(),\n            sphereTypes: new Set(),\n            unknowns: new Set(),\n        };\n        conditions.forEach((condition, index) => {\n            if ('sphere category required (raw)' in condition) {\n                aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n            }\n            else if ('item required' in condition) {\n                condition['item required'].forEach((item) => {\n                    aggregate.items.add(item);\n                });\n            }\n            else if ('unit required' in condition) {\n                condition['unit required'].forEach((unit) => {\n                    aggregate.units.add(`${unit.id}`);\n                });\n            }\n            else {\n                aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n            }\n        });\n        // filter out properties that have no entries\n        const result = Object.entries(aggregate)\n            .filter((entry) => entry[1].size > 0)\n            .reduce((acc, entry) => {\n            acc[entry[0]] = Array.from(entry[1]);\n            return acc;\n        }, {});\n        return result;\n    }\n    /**\n     * @description Extract the target type and target area of a given passive effect.\n     * @param effect Passive effect to extract target data from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns The target data for the given effect and context. There are only two possible values:\n     * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n     */\n    function getPassiveTargetData(effect, context) {\n        const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n            (effect.sp_type === SpPassiveType.EnhancePassive);\n        const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n        return {\n            targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n            targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n        };\n    }\n    /**\n     * @description Extract the target type and target area of a given proc effect.\n     * @param effect Proc effect to extract target data from.\n     * @returns The target data for the given effect and context.\n     */\n    function getProcTargetData(effect) {\n        return {\n            targetArea: effect['target area'],\n            targetType: effect['target type'],\n        };\n    }\n    /**\n     * @description Try to parse the given value into a number or return a value if it is not a number.\n     * @param value Value to parse into a number.\n     * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n     * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n     */\n    function parseNumberOrDefault(value, defaultValue = 0) {\n        return (value !== null && !isNaN(value)) ? +value : defaultValue;\n    }\n    /**\n     * @description Create an object denoting values that cannot be processed yet. To be used\n     * in the `value` property of `IBuff` as needed.\n     * @param params Array of values that cannot be processed yet.\n     * @param startIndex The first index before which we know how to process an effect's values.\n     * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n     */\n    function createUnknownParamsValue(params = [], startIndex = 0) {\n        let hasValue = false;\n        const result = params\n            .reduce((acc, value, index) => {\n            if (value && value !== '0') {\n                acc[`param_${startIndex + index}`] = value;\n                hasValue = true;\n            }\n            return acc;\n        }, {});\n        return hasValue ? result : (void 0);\n    }\n    /**\n     * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n     * @param source Source value to check.\n     * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n     * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n     * bonded super brave burst, or bonded dual brave burst.\n     */\n    function buffSourceIsBurstType(source) {\n        return !!source && [\n            BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n            BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n        ].includes(source);\n    }\n\n    let mapping;\n    /**\n     * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of proc IDs to functions.\n     */\n    function getProcEffectToBuffMapping(reload) {\n        if (!mapping || reload) {\n            mapping = new Map();\n            setMapping(mapping);\n        }\n        return mapping;\n    }\n    /**\n     * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping(map) {\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const effectDelay = effect['effect delay time(ms)/frame'];\n            return { targetData, sources, effectDelay };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n            effectDelay,\n            sources, value: unknownParams }, targetData));\n        const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n            sources, value: {\n                buffs,\n                duration: duration,\n            } }, targetData));\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        /**\n         * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n         * checked if all other known values in the effect are 0.\n         * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n         * @param turnDuration Parsed turn duration value to check.\n         * @param injectionContext Object whose main use is for injecting methods in testing.\n         * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n         */\n        const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n            let result = turnDuration !== 0;\n            if (result) {\n                result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n            }\n            return result;\n        };\n        /**\n         * @description Helper function to get attack information common across most attacks from the conversion context.\n         * @param context Given context that may contain attack information like damage frames.\n         * @returns Extracted attack information from the context (with defaults where applicable).\n         */\n        const getAttackInformationFromContext = (context) => {\n            const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n            const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n            return {\n                hits,\n                distribution,\n            };\n        };\n        const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                value = parseParamValue(rawValue);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect[effectValueKey]);\n                turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [buffId],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [Object.assign({ id: 'proc:1', originalId: '1', sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '1',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'healerRec%': 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                let recX, recY;\n                let extraParams;\n                [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n                params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['heal low'];\n                params.healHigh = effect['heal high'];\n                params['healerRec%'] = effect['rec added% (from healer)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const results = [Object.assign({ id: 'proc:2', originalId: '2', sources,\n                    effectDelay, value: params }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '2',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'targetRec%': 0,\n                turnDuration: '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let rec;\n                let extraParams;\n                [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['gradual heal low'];\n                params.healHigh = effect['gradual heal high'];\n                params['targetRec%'] = effect['rec added% (from target)'];\n                params.turnDuration = effect['gradual heal turns (8)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n            const results = [];\n            if (hasAnyHealValues) {\n                results.push(Object.assign({ id: 'proc:3', originalId: '3', sources,\n                    effectDelay, duration: params.turnDuration, value: {\n                        healLow: params.healLow,\n                        healHigh: params.healHigh,\n                        'targetRec%': params['targetRec%'],\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId: '3',\n                    sources,\n                    buffs: ['proc:3'],\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '3',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill);\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('bb bc fill' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill']);\n                }\n                if ('bb bc fill%' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n                }\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:flat', originalId: '4', sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:percent', originalId: '4', sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '4',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                element: BuffConditionElement.All,\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        params[statType] = parseNumberOrDefault(effect[effectKey]);\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId: '5', sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData);\n                        if (params.element !== BuffConditionElement.All) {\n                            buffEntry.conditions = {\n                                targetElements: [params.element],\n                            };\n                        }\n                        results.push(buffEntry);\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId: '5',\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '5',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('6', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                turnDuration: '0',\n            };\n            const dropRateProperties = ['bc', 'hc', 'item'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.bc = effect['bc drop rate% buff (10)'];\n                params.hc = effect['hc drop rate% buff (9)'];\n                params.item = effect['item drop rate% buff (11)'];\n                params.turnDuration = effect['drop buff rate turns'];\n            }\n            dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n            const results = [];\n            if (hasAnyRates) {\n                dropRateProperties.forEach((key) => {\n                    const value = params[key];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:6:${key}`, originalId: '6', sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId: '6',\n                    sources,\n                    buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '6',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('7', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHpPercent = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:7', originalId: '7', sources,\n                    effectDelay, value: recoveredHpPercent }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '7',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatHpBoost = 0;\n            let percentHpBoost = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n                flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n                percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('max hp increase' in effect) {\n                    flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n                }\n                if ('max hp% increase' in effect) {\n                    percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n                }\n            }\n            const results = [];\n            if (flatHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:flat', originalId: '8', sources,\n                    effectDelay, value: flatHpBoost }, targetData));\n            }\n            if (percentHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:percent', originalId: '8', sources,\n                    effectDelay, value: percentHpBoost }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '8',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const STAT_TYPE_MAPPING = {\n                0: 'atk',\n                1: 'def',\n                2: 'rec',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const params = {\n                element: BuffConditionElement.All,\n                statReductionEntries: [],\n                turnDuration: 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n                [\n                    [statType1, value1, procChance1],\n                    [statType2, value2, procChance2],\n                ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                    const statType = parseNumberOrDefault(rawStatType) - 1;\n                    const value = parseNumberOrDefault(rawValue);\n                    const chance = parseNumberOrDefault(rawProcChance);\n                    if (statType === 3) { // all stats\n                        params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                            stat,\n                            value,\n                            chance,\n                        })));\n                    }\n                    else {\n                        params.statReductionEntries.push({\n                            stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                            value,\n                            chance,\n                        });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                ['buff #1', 'buff #2'].forEach((buffKey) => {\n                    const entry = effect[buffKey];\n                    if (entry) {\n                        const chance = parseNumberOrDefault(entry['proc chance%']);\n                        const keys = Object.keys(entry);\n                        coreStatProperties.forEach((statType) => {\n                            const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                            if (effectKey) {\n                                params.statReductionEntries.push({\n                                    stat: statType,\n                                    value: parseNumberOrDefault(entry[effectKey]),\n                                    chance,\n                                });\n                            }\n                        });\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            let hasAnyValues = false;\n            params.statReductionEntries.forEach(({ stat, value, chance }) => {\n                if (value !== 0 || chance !== 0) {\n                    hasAnyValues = true;\n                    const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId: '9', sources,\n                        effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n            if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId: '9',\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '9',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 8);\n                const extraParams = splitParams.slice(8);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    if (`remove ${ailment}` in effect) { // mainly for items\n                        curedAilments.push(ailment);\n                    }\n                });\n                if ('remove all status ailments' in effect) {\n                    curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:${ailment}`, originalId: '10', sources,\n                effectDelay, value: true }, targetData)));\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '10',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                let params = splitEffectParams(effect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:${ailment}`, originalId: '11', sources,\n                effectDelay, value: chance }, targetData)));\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '11',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let reviveToHp = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n                reviveToHp = parseNumberOrDefault(rawReviveToHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:12', originalId: '12', sources,\n                    effectDelay, value: reviveToHp }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '12',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hits = 0;\n            const { distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawHits;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n                hits = parseNumberOrDefault(rawHits);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                hits = parseNumberOrDefault(effect.hits);\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [{\n                    id: 'proc:13',\n                    originalId: '13',\n                    sources,\n                    effectDelay,\n                    value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }),\n                    targetType: targetData.targetType,\n                    targetArea: TargetArea.Random,\n                }];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '13',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n                'drainLow%': '0',\n                'drainHigh%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n                params['drainLow%'] = effect['hp drain% low'];\n                params['drainHigh%'] = effect['hp drain% high'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [Object.assign({ id: 'proc:14', originalId: '14', sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '14',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let mitigation = 0;\n            let element;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                mitigation = parseNumberOrDefault(rawMitigation);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n                element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n                if (mitigationKey) {\n                    mitigation = parseNumberOrDefault(effect[mitigationKey]);\n                }\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (mitigation !== 0) {\n                results.push(Object.assign({ id: `proc:16:${element}`, originalId: '16', sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId: '16',\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '16',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        resistances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:17:${ailment}`, originalId: '17', sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId: '17',\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:17:${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '17',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('18', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'dmg% reduction',\n                effectTurnDurationKey: 'dmg% reduction turns (36)',\n                buffId: 'proc:18',\n                originalId: '18',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'increase bb gauge gradual',\n                effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'proc:19',\n                originalId: '19',\n            });\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let fillLow = 0;\n            let fillHigh = 0;\n            let chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFillLow, rawFillHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(effect['bc fill when attacked low']);\n                fillHigh = parseNumberOrDefault(effect['bc fill when attacked high']);\n                chance = parseNumberOrDefault(effect['bc fill when attacked%']);\n                turnDuration = parseNumberOrDefault(effect['bc fill when attacked turns (38)']);\n            }\n            const hasAnyFillValues = fillLow !== 0 || fillHigh !== 0;\n            const results = [];\n            if (hasAnyFillValues) {\n                results.push(Object.assign({ id: 'proc:20', originalId: '20', sources,\n                    effectDelay, duration: turnDuration, conditions: {\n                        whenAttacked: true,\n                    }, value: {\n                        fillLow,\n                        fillHigh,\n                        chance,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId: '20',\n                    sources,\n                    buffs: ['proc:20'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '20',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('22', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'defense% ignore',\n                effectTurnDurationKey: 'defense% ignore turns (39)',\n                buffId: 'proc:22',\n                originalId: '22',\n            });\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                value = parseNumberOrDefault(params[0]);\n                turnDuration = parseNumberOrDefault(params[6]);\n                const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'proc:23', originalId: '23', sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId: '23',\n                    sources,\n                    buffs: ['proc:23'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '23',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let turnDuration = 0;\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawConvertedStat, rawTurnDuration;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                const rawConvertedStat = effect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        stats[statType] = parseNumberOrDefault(effect[effectKey]);\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['% converted turns']);\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:24:${stat}`, originalId: '24', sources,\n                        effectDelay, duration: turnDuration, value: {\n                            convertedStat,\n                            value,\n                        } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId: '24',\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:24:${statKey}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '24',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n                turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'proc:26', originalId: '26', sources,\n                    effectDelay, duration: turnDuration, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId: '26',\n                    sources,\n                    buffs: ['proc:26'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '26',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'hpDamageLow%': '0',\n                'hpDamageHigh%': '0',\n                'hpDamageChance%': '0',\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else {\n                params['hpDamageLow%'] = effect['hp% damage low'];\n                params['hpDamageHigh%'] = effect['hp% damage high'];\n                params['hpDamageChance%'] = effect['hp% damage chance%'];\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [Object.assign({ id: 'proc:27', originalId: '27', sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '27',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given proc effect.\n     */\n    function defaultConversionFunction(effect, context) {\n        const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n                originalId: id,\n                effectDelay: effect['effect delay time(ms)/frame'],\n                targetType: effect['target type'],\n                targetArea: effect['target area'],\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given proc effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Proc effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given proc effect object.\n     */\n    function convertProcEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isProcEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction(effect, context);\n    }\n\n    let mapping$1;\n    /**\n     * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of passive IDs to functions.\n     */\n    function getPassiveEffectToBuffMapping(reload) {\n        if (!mapping$1 || reload) {\n            mapping$1 = new Map();\n            setMapping$1(mapping$1);\n        }\n        return mapping$1;\n    }\n    /**\n     * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$1(map) {\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n            X: BuffConditionElement.OmniParadigm,\n        };\n        const TYPE_MAPPING = {\n            1: UnitType.Lord,\n            2: UnitType.Anima,\n            3: UnitType.Breaker,\n            4: UnitType.Guardian,\n            5: UnitType.Oracle,\n            6: UnitType.Rex,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n        const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n            const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            return { conditionInfo, targetData, sources };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n            sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let value = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect[effectKey]);\n            }\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        };\n        const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let valueLow, valueHigh, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                valueLow = parseParamValue(rawLowValue);\n                valueHigh = parseParamValue(rawHighValue);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n                valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n                chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n            }\n            const results = [Object.assign({ id: buffId, originalId,\n                    sources, value: {\n                        [buffKeyLow]: valueLow,\n                        [buffKeyHigh]: valueHigh,\n                        chance,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:1:${stat}`, originalId: '1', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '1',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                elements: [],\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let element1, element2;\n                [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                [element1, element2].forEach((elementValue) => {\n                    if (elementValue && elementValue !== '0') {\n                        stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                stats.elements = typedEffect['elements buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId: '2', sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n            if (stats.elements.length > 0) {\n                stats.elements.forEach((element) => {\n                    STATS_ORDER.forEach((stat) => {\n                        const value = parseNumberOrDefault(stats[stat]);\n                        if (value !== 0) {\n                            results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                        }\n                    });\n                });\n            }\n            else {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                    }\n                });\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '2',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                unitType: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let unitType;\n                [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                if (unitType && unitType !== '0') {\n                    stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.unitType = typedEffect['unit type buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetUnitType = stats.unitType || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:3:${stat}`, originalId: '3', sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '3',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:4:${ailment}`, originalId: '4', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '4',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let element;\n            let mitigation = '0';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n                if (element !== BuffConditionElement.Unknown) {\n                    mitigation = typedEffect[`${element} resist%`];\n                }\n            }\n            const value = parseNumberOrDefault(mitigation);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:5:${element}`, originalId: '5', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '5',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'dmg% mitigation',\n                buffId: 'passive:8',\n                originalId: '8',\n            });\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bc fill per turn',\n                buffId: 'passive:9',\n                originalId: '9',\n            });\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'hc effectiveness%',\n                buffId: 'passive:10',\n                originalId: '10',\n            });\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let requireHpAbove = false;\n            let hpThreshold = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireHpAboveFlag;\n                let rawHpThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawHpThreshold, rawRequireHpAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                requireHpAbove = rawRequireHpAboveFlag === '1';\n                hpThreshold = parseNumberOrDefault(rawHpThreshold);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                if ('hp above % buff requirement' in typedEffect) {\n                    hpThreshold = parseNumberOrDefault(typedEffect['hp above % buff requirement']);\n                    requireHpAbove = true;\n                }\n                else {\n                    hpThreshold = parseNumberOrDefault(typedEffect['hp below % buff requirement']);\n                    requireHpAbove = false;\n                }\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:11:${stat}`, originalId: '11', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    // disabling no-non-null-assertion rule because `conditions` property is defined above\n                    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                    if (requireHpAbove) {\n                        entry.conditions.hpGreaterThanOrEqualTo = hpThreshold;\n                    }\n                    else {\n                        entry.conditions.hpLessThanOrEqualTo = hpThreshold;\n                    }\n                    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n                    results.push(entry);\n                }\n            });\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '11',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let requireHpAbove = false;\n            let hpThreshold = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireHpAboveFlag;\n                let rawHpThreshold;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawHpThreshold, rawRequireHpAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                requireHpAbove = rawRequireHpAboveFlag === '1';\n                hpThreshold = parseNumberOrDefault(rawHpThreshold);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n                if ('hp above % buff requirement' in typedEffect) {\n                    hpThreshold = parseNumberOrDefault(typedEffect['hp above % buff requirement']);\n                    requireHpAbove = true;\n                }\n                else {\n                    hpThreshold = parseNumberOrDefault(typedEffect['hp below % buff requirement']);\n                    requireHpAbove = false;\n                }\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    const entry = Object.assign({ id: `passive:12:${dropType}`, originalId: '12', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    // disabling no-non-null-assertion rule because `conditions` property is defined above\n                    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                    if (requireHpAbove) {\n                        entry.conditions.hpGreaterThanOrEqualTo = hpThreshold;\n                    }\n                    else {\n                        entry.conditions.hpLessThanOrEqualTo = hpThreshold;\n                    }\n                    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n                    results.push(entry);\n                }\n            });\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '12',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '13',\n                effectKeyLow: 'bc fill on enemy defeat low',\n                effectKeyHigh: 'bc fill on enemy defeat high',\n                effectKeyChance: 'bc fill on enemy defeat%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                buffId: 'passive:13',\n            });\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageReduction, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                damageReduction = parseNumberOrDefault(rawReduction);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n                chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n            }\n            const results = [Object.assign({ id: 'passive:14', originalId: '14', sources, value: {\n                        value: damageReduction,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '14',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('15', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '15',\n                effectKeyLow: 'hp% recover on enemy defeat low',\n                effectKeyHigh: 'hp% recover on enemy defeat high',\n                effectKeyChance: 'hp% recover on enemy defeat chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                defaultEffectChance: 100,\n                buffId: 'passive:15',\n            });\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n                healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n            }\n            const results = [Object.assign({ id: 'passive:16', originalId: '16', sources, value: {\n                        healLow,\n                        healHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '16',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '17',\n                effectKeyLow: 'hp drain% low',\n                effectKeyHigh: 'hp drain% high',\n                effectKeyChance: 'hp drain chance%',\n                buffKeyLow: 'drainHealLow',\n                buffKeyHigh: 'drainHealHigh',\n                buffId: 'passive:17',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:19:${dropType}`, originalId: '19', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '19',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                let params = splitEffectParams(typedEffect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(typedEffect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `passive:20:${ailment}`, originalId: '20', sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '20',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('21', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let rawDuration, extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['first x turns atk% (1)'];\n                stats.def = typedEffect['first x turns def% (3)'];\n                stats.rec = typedEffect['first x turns rec% (5)'];\n                stats.crit = typedEffect['first x turns crit% (7)'];\n                turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:21:${stat}`, originalId: '21', sources,\n                        value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    results.push(entry);\n                }\n            });\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '21',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let fillLow, fillHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n                fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n            }\n            const results = [Object.assign({ id: 'passive:23', originalId: '23', sources, value: {\n                        fillLow,\n                        fillHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '23',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '24',\n                effectKeyLow: 'dmg% to hp when attacked low',\n                effectKeyHigh: 'dmg% to hp when attacked high',\n                effectKeyChance: 'dmg% to hp when attacked chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:24',\n            });\n        });\n        map.set('25', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '25',\n                effectKeyLow: 'bc fill when attacked low',\n                effectKeyHigh: 'bc fill when attacked high',\n                effectKeyChance: 'bc fill when attacked%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:25',\n            });\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '26',\n                effectKeyLow: 'dmg% reflect low',\n                effectKeyHigh: 'dmg% reflect high',\n                effectKeyChance: 'dmg% reflect chance%',\n                buffKeyLow: 'damageReflectLow',\n                buffKeyHigh: 'damageReflectHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:26',\n            });\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'target% chance',\n                buffId: 'passive:27',\n                originalId: '27',\n            });\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given passive effect.\n     */\n    function defaultConversionFunction$1(effect, context) {\n        const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given passive effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Passive effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertPassiveEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isPassiveEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$1(effect, context);\n    }\n\n    const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'UNKNOWN_PASSIVE_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            name: 'Unknown Passive Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n            name: 'Unknown Passive Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'TURN_DURATION_MODIFICATION': {\n            id: BuffId.TURN_DURATION_MODIFICATION,\n            name: 'Passive Turn Duration Modification',\n            stat: UnitStat.turnDurationModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [\n                (buff && buff.value &&\n                    buff.value.duration &&\n                    buff.value.duration < 0) ?\n                    IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n            ],\n        }, 'passive:1:hp': {\n            id: BuffId['passive:1:hp'],\n            name: 'Passive HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:1:atk': {\n            id: BuffId['passive:1:atk'],\n            name: 'Passive Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:1:def': {\n            id: BuffId['passive:1:def'],\n            name: 'Passive Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:1:rec': {\n            id: BuffId['passive:1:rec'],\n            name: 'Passive Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:1:crit': {\n            id: BuffId['passive:1:crit'],\n            name: 'Passive Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        } }, (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:2:hp': {\n                id: BuffId['passive:2:hp'],\n                name: 'Passive Elemental HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:2:atk': {\n                id: BuffId['passive:2:atk'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:2:def': {\n                id: BuffId['passive:2:def'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:2:rec': {\n                id: BuffId['passive:2:rec'],\n                name: 'Passive Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:2:crit': {\n                id: BuffId['passive:2:crit'],\n                name: 'Passive Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let unitType = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        unitType = buff.conditions.targetUnitType || '';\n                    }\n                }\n                if (typeof unitType !== 'string' || !unitType) {\n                    unitType = 'unknown';\n                }\n                let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n                if (!unitType || !(iconKey in IconId)) {\n                    iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:3:hp': {\n                id: BuffId['passive:3:hp'],\n                name: 'Passive Type-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:3:atk': {\n                id: BuffId['passive:3:atk'],\n                name: 'Passive Type-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:3:def': {\n                id: BuffId['passive:3:def'],\n                name: 'Passive Type-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:3:rec': {\n                id: BuffId['passive:3:rec'],\n                name: 'Passive Type-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:3:crit': {\n                id: BuffId['passive:3:crit'],\n                name: 'Passive Type-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:4:poison': {\n            id: BuffId['passive:4:poison'],\n            name: 'Passive Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:4:weak': {\n            id: BuffId['passive:4:weak'],\n            name: 'Passive Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:4:sick': {\n            id: BuffId['passive:4:sick'],\n            name: 'Passive Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:4:injury': {\n            id: BuffId['passive:4:injury'],\n            name: 'Passive Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:4:curse': {\n            id: BuffId['passive:4:curse'],\n            name: 'Passive Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:4:paralysis': {\n            id: BuffId['passive:4:paralysis'],\n            name: 'Passive Paralysis Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:5:fire': {\n            id: BuffId['passive:5:fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:5:water': {\n            id: BuffId['passive:5:water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:5:earth': {\n            id: BuffId['passive:5:earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:5:thunder': {\n            id: BuffId['passive:5:thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:5:light': {\n            id: BuffId['passive:5:light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:5:dark': {\n            id: BuffId['passive:5:dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:5:unknown': {\n            id: BuffId['passive:5:unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:8': {\n            id: BuffId['passive:8'],\n            name: 'Passive Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:9': {\n            id: BuffId['passive:9'],\n            name: 'Passive Gradual BB Gauge Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:10': {\n            id: BuffId['passive:10'],\n            name: 'Passive HC Efficacy',\n            stat: UnitStat.hcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HCREC],\n        }, 'passive:11:atk': {\n            id: BuffId['passive:11:atk'],\n            name: 'Passive HP-Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n        }, 'passive:11:def': {\n            id: BuffId['passive:11:def'],\n            name: 'Passive HP-Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n        }, 'passive:11:rec': {\n            id: BuffId['passive:11:rec'],\n            name: 'Passive HP-Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n        }, 'passive:11:crit': {\n            id: BuffId['passive:11:crit'],\n            name: 'Passive HP-Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n        }, 'passive:12:bc': {\n            id: BuffId['passive:12:bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'passive:12:hc': {\n            id: BuffId['passive:12:hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'passive:12:item': {\n            id: BuffId['passive:12:item'],\n            name: 'Passive Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'passive:12:zel': {\n            id: BuffId['passive:12:zel'],\n            name: 'Passive Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n        }, 'passive:12:karma': {\n            id: BuffId['passive:12:karma'],\n            name: 'Passive Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n        }, 'passive:13': {\n            id: BuffId['passive:13'],\n            name: 'Passive BB Gauge Fill on Enemy Defeat',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:14': {\n            id: BuffId['passive:14'],\n            name: 'Passive Damage Reduction (Chance)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:15': {\n            id: BuffId['passive:15'],\n            name: 'Passive Heal on Enemy Defeat',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:16': {\n            id: BuffId['passive:16'],\n            name: 'Passive Heal on Battle Win',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:17': {\n            id: BuffId['passive:17'],\n            name: 'HP Absorption',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPABS],\n        }, 'passive:19:bc': {\n            id: BuffId['passive:19:bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'passive:19:hc': {\n            id: BuffId['passive:19:hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'passive:19:item': {\n            id: BuffId['passive:19:item'],\n            name: 'Passive Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'passive:19:zel': {\n            id: BuffId['passive:19:zel'],\n            name: 'Passive Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n        }, 'passive:19:karma': {\n            id: BuffId['passive:19:karma'],\n            name: 'Passive Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n        }, 'passive:20:poison': {\n            id: BuffId['passive:20:poison'],\n            name: 'Passive Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'passive:20:weak': {\n            id: BuffId['passive:20:weak'],\n            name: 'Passive Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'passive:20:sick': {\n            id: BuffId['passive:20:sick'],\n            name: 'Passive Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'passive:20:injury': {\n            id: BuffId['passive:20:injury'],\n            name: 'Passive Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'passive:20:curse': {\n            id: BuffId['passive:20:curse'],\n            name: 'Passive Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'passive:20:paralysis': {\n            id: BuffId['passive:20:paralysis'],\n            name: 'Passive Paralysis Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'passive:20:atk down': {\n            id: BuffId['passive:20:atk down'],\n            name: 'Passive Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'passive:20:def down': {\n            id: BuffId['passive:20:def down'],\n            name: 'Passive Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'passive:20:rec down': {\n            id: BuffId['passive:20:rec down'],\n            name: 'Passive Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'passive:20:unknown': {\n            id: BuffId['passive:20:unknown'],\n            name: 'Passive Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'passive:21:atk': {\n            id: BuffId['passive:21:atk'],\n            name: 'Attack Boost for X Turns',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:21:def': {\n            id: BuffId['passive:21:def'],\n            name: 'Defense Boost for X Turns',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:21:rec': {\n            id: BuffId['passive:21:rec'],\n            name: 'Recovery Boost for X Turns',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:21:crit': {\n            id: BuffId['passive:21:crit'],\n            name: 'Critical Hit Rate Boost for X Turns',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:23': {\n            id: BuffId['passive:23'],\n            name: 'Passive BC Fill on Battle Win',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:24': {\n            id: BuffId['passive:24'],\n            name: 'Passive Heal when Attacked',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'passive:25': {\n            id: BuffId['passive:25'],\n            name: 'Passive BC Fill when Attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:26': {\n            id: BuffId['passive:26'],\n            name: 'Passive Damage Counter',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'passive:27': {\n            id: BuffId['passive:27'],\n            name: 'Passive Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n        }, 'UNKNOWN_PROC_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            name: 'Unknown Proc Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n            name: 'Unknown Proc Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'proc:1': {\n            id: BuffId['proc:1'],\n            name: 'Regular Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:2': {\n            id: BuffId['proc:2'],\n            name: 'Burst Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:3': {\n            id: BuffId['proc:3'],\n            name: 'Active Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:4:flat': {\n            id: BuffId['proc:4:flat'],\n            name: 'Burst BB Gauge Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:4:percent': {\n            id: BuffId['proc:4:percent'],\n            name: 'Burst BB Gauge Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:5:atk': {\n                id: BuffId['proc:5:atk'],\n                name: 'Active Regular/Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:5:def': {\n                id: BuffId['proc:5:def'],\n                name: 'Active Regular/Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:5:rec': {\n                id: BuffId['proc:5:rec'],\n                name: 'Active Regular/Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:5:crit': {\n                id: BuffId['proc:5:crit'],\n                name: 'Active Regular/Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'proc:6:bc': {\n            id: BuffId['proc:6:bc'],\n            name: 'Active Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'proc:6:hc': {\n            id: BuffId['proc:6:hc'],\n            name: 'Active Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'proc:6:item': {\n            id: BuffId['proc:6:item'],\n            name: 'Active Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'proc:7': {\n            id: BuffId['proc:7'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:8:flat': {\n            id: BuffId['proc:8:flat'],\n            name: 'Max HP Boost (Flat Amount)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        }, 'proc:8:percent': {\n            id: BuffId['proc:8:percent'],\n            name: 'Max HP Boost (Percentage)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'DOWN'; // default to down since these are reduction buffs\n                if (buff) {\n                    if (buff.value && buff.value > 0) {\n                        polarity = 'UP';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:9:atk': {\n                id: BuffId['proc:9:atk'],\n                name: 'Active Regular/Elemental Attack Reduction',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:9:def': {\n                id: BuffId['proc:9:def'],\n                name: 'Active Regular/Elemental Defense Reduction',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:9:rec': {\n                id: BuffId['proc:9:rec'],\n                name: 'Active Regular/Elemental Recovery Reduction',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:9:unknown': {\n                id: BuffId['proc:9:unknown'],\n                name: 'Active Regular/Elemental Unknown Stat Reduction',\n                stackType: BuffStackType.Active,\n                icons: () => [IconId.UNKNOWN],\n            },\n        };\n    })()), { 'proc:10:poison': {\n            id: BuffId['proc:10:poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:10:weak': {\n            id: BuffId['proc:10:weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:10:sick': {\n            id: BuffId['proc:10:sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:10:injury': {\n            id: BuffId['proc:10:injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:10:curse': {\n            id: BuffId['proc:10:curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:10:paralysis': {\n            id: BuffId['proc:10:paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:10:atk down': {\n            id: BuffId['proc:10:atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWNBLK],\n        }, 'proc:10:def down': {\n            id: BuffId['proc:10:def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWNBLK],\n        }, 'proc:10:rec down': {\n            id: BuffId['proc:10:rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWNBLK],\n        }, 'proc:10:unknown': {\n            id: BuffId['proc:10:unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:11:poison': {\n            id: BuffId['proc:11:poison'],\n            name: 'Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_POISON],\n        }, 'proc:11:weak': {\n            id: BuffId['proc:11:weak'],\n            name: 'Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_WEAK],\n        }, 'proc:11:sick': {\n            id: BuffId['proc:11:sick'],\n            name: 'Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_SICK],\n        }, 'proc:11:injury': {\n            id: BuffId['proc:11:injury'],\n            name: 'Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_INJURY],\n        }, 'proc:11:curse': {\n            id: BuffId['proc:11:curse'],\n            name: 'Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_CURSE],\n        }, 'proc:11:paralysis': {\n            id: BuffId['proc:11:paralysis'],\n            name: 'Paralysis Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_PARALYSIS],\n        }, 'proc:11:atk down': {\n            id: BuffId['proc:11:atk down'],\n            name: 'Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWN],\n        }, 'proc:11:def down': {\n            id: BuffId['proc:11:def down'],\n            name: 'Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWN],\n        }, 'proc:11:rec down': {\n            id: BuffId['proc:11:rec down'],\n            name: 'Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWN],\n        }, 'proc:11:unknown': {\n            id: BuffId['proc:11:unknown'],\n            name: 'Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.DEBUFF_AILMENT],\n        }, 'proc:12': {\n            id: BuffId['proc:12'],\n            name: 'Instant Revive (Guaranteed)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:13': {\n            id: BuffId['proc:13'],\n            name: 'Random Target Damage',\n            stackType: BuffStackType.Attack,\n            icons: () => [IconId.ATK_RT],\n        }, 'proc:14': {\n            id: BuffId['proc:14'],\n            name: 'Lifesteal Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n        }, 'proc:16:fire': {\n            id: BuffId['proc:16:fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:16:water': {\n            id: BuffId['proc:16:water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:16:earth': {\n            id: BuffId['proc:16:earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:16:thunder': {\n            id: BuffId['proc:16:thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:16:light': {\n            id: BuffId['proc:16:light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:16:dark': {\n            id: BuffId['proc:16:dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:16:all': {\n            id: BuffId['proc:16:all'],\n            name: 'Active Elemental Damage Reduction (All Elements)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:16:unknown': {\n            id: BuffId['proc:16:unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:17:poison': {\n            id: BuffId['proc:17:poison'],\n            name: 'Active Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:17:weak': {\n            id: BuffId['proc:17:weak'],\n            name: 'Active Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:17:sick': {\n            id: BuffId['proc:17:sick'],\n            name: 'Active Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:17:injury': {\n            id: BuffId['proc:17:injury'],\n            name: 'Active Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:17:curse': {\n            id: BuffId['proc:17:curse'],\n            name: 'Active Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:17:paralysis': {\n            id: BuffId['proc:17:paralysis'],\n            name: 'Active Paralysis Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:18': {\n            id: BuffId['proc:18'],\n            name: 'Active Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'proc:19': {\n            id: BuffId['proc:19'],\n            name: 'Active Gradual BB Gauge Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:20': {\n            id: BuffId['proc:20'],\n            name: 'Active BC Fill when attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'proc:22': {\n            id: BuffId['proc:22'],\n            name: 'Active Defense Ignore',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'proc:23': {\n            id: BuffId['proc:23'],\n            name: 'Active Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SPARKUP],\n        }, 'proc:24:atk': {\n            id: BuffId['proc:24:atk'],\n            name: 'Active Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'proc:24:def': {\n            id: BuffId['proc:24:def'],\n            name: 'Active Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'proc:24:rec': {\n            id: BuffId['proc:24:rec'],\n            name: 'Active Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'proc:26': {\n            id: BuffId['proc:26'],\n            name: 'Active Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'proc:27': {\n            id: BuffId['proc:27'],\n            name: 'Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        } }));\n\n    /**\n     * @description Get the associated metadata entry for a given buff ID.\n     * @param id Buff ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n     * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    var index$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        convertProcEffectToBuffs: convertProcEffectToBuffs,\n        convertPassiveEffectToBuffs: convertPassiveEffectToBuffs,\n        get BuffSource () { return BuffSource; },\n        get BuffStackType () { return BuffStackType; },\n        BUFF_METADATA: BUFF_METADATA,\n        getMetadataForBuff: getMetadataForBuff\n    });\n\n    var index$2 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        constants: constants,\n        parsers: index$1,\n        getMetadataForProc: getMetadataForProc,\n        getMetadataForPassive: getMetadataForPassive,\n        isAttackingProcId: isAttackingProcId,\n        getNameForProc: getNameForProc,\n        getNameForPassive: getNameForPassive,\n        isProcEffect: isProcEffect,\n        isPassiveEffect: isPassiveEffect,\n        combineEffectsAndDamageFrames: combineEffectsAndDamageFrames,\n        getEffectId: getEffectId,\n        getEffectName: getEffectName,\n        get ProcBuffType () { return ProcBuffType; },\n        PASSIVE_METADATA: PASSIVE_METADATA,\n        PROC_METADATA: PROC_METADATA\n    });\n\n    /**\n     * @description Get the effects of a given extra skill.\n     * @param skill Extra skill to get the effects of.\n     * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForExtraSkill(skill) {\n        return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n    }\n\n    var index$3 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForExtraSkill: getEffectsForExtraSkill\n    });\n\n    /**\n     * @description Get the effects of a given item.\n     * @param item Item to get the effects of, if any are present,\n     * @returns Effects of the given item if they exist, an empty array otherwise.\n     */\n    function getEffectsForItem(item) {\n        let result = [];\n        if (item && item.effect) {\n            if (Array.isArray(item.effect)) {\n                result = item.effect;\n            }\n            else if (Array.isArray(item.effect.effect)) {\n                const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n                result = effect.map(e => {\n                    // apply target data to each effect\n                    const fullProcEffect = Object.assign({}, e);\n                    fullProcEffect['target area'] = targetArea;\n                    fullProcEffect['target type'] = targetType;\n                    return fullProcEffect;\n                });\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given item thumbnail filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents the thumbnail image for a given item.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getItemImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/item/${fileName || ''}`;\n    }\n\n    var index$4 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForItem: getEffectsForItem,\n        getItemImageUrl: getItemImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given leader skill.\n     * @param skill Leader skill to get the effects of.\n     * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForLeaderSkill(skill) {\n        return skill && Array.isArray(skill.effects) ? skill.effects : [];\n    }\n\n    var index$5 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForLeaderSkill: getEffectsForLeaderSkill\n    });\n\n    /**\n     * @description Generate the file names for each of the image type for a given unit ID.\n     * @param id Unit ID to use to generate the file names.\n     * @param suffix Optional parameter that's useful for things like alternate art.\n     * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n     */\n    function getUnitImageFileNames(id, suffix = '') {\n        const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n        return {\n            spritesheet: `unit_anime_${fileNameSuffix}`,\n            battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n            guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n            fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n        };\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given unit filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents an image for a given unit.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getUnitImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n    }\n\n    var index$6 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getUnitImageFileNames: getUnitImageFileNames,\n        getUnitImageUrl: getUnitImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given SP Enhancement Entry.\n     * @param entry SP Enhancement Entry to get the effects of.\n     * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n     */\n    function getEffectsForSpEnhancement(entry) {\n        const result = [];\n        if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n            const effectWrappers = entry.skill.effects;\n            effectWrappers.forEach(effectWrapper => {\n                Object.keys(effectWrapper).forEach(spType => {\n                    const originalEffect = effectWrapper[spType];\n                    const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                    result.push(unwrappedEffect);\n                });\n            });\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the associated category name with a given category ID.\n     * @param categoryId Category ID to get the name of.\n     * @returns Name of the given category ID or the string 'Unknown'.\n     */\n    function getSpCategoryName(categoryId) {\n        let result;\n        const numericalCategoryId = +categoryId;\n        switch (numericalCategoryId) {\n            case 1:\n                result = SpCategoryName['Parameter Boost'];\n                break;\n            case 2:\n                result = SpCategoryName.Spark;\n                break;\n            case 3:\n                result = SpCategoryName['Critical Hits'];\n                break;\n            case 4:\n                result = SpCategoryName['Attack Boost'];\n                break;\n            case 5:\n                result = SpCategoryName['BB Gauge'];\n                break;\n            case 6:\n                result = SpCategoryName['HP Recovery'];\n                break;\n            case 7:\n                result = SpCategoryName.Drops;\n                break;\n            case 8:\n                result = SpCategoryName['Ailment Resistance'];\n                break;\n            case 9:\n                result = SpCategoryName['Ailment Infliction'];\n                break;\n            case 10:\n                result = SpCategoryName['Damage Reduction'];\n                break;\n            case 11:\n                result = SpCategoryName.Special;\n                break;\n            default:\n                result = SpCategoryName.Unknown;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n\n    /**\n     * @description Get the corresponding character code for a given index.\n     * It expects an index between 0 and 61 inclusive; will return an empty string if\n     * the given value is outside of the range.\n     * @param index Index of an SP entry in a given skills array.\n     * @returns Corresponding single alphanumeric character to the given index\n     * or an empty string if the index is invalid.\n     */\n    function spIndexToCode(index) {\n        let result = '';\n        let correspondingCharacterCode = -1;\n        if (Number.isInteger(index)) {\n            if (index >= 0 && index <= 25) { // A-Z\n                correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (index >= 26 && index <= 51) { // a-z\n                correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n            }\n            else if (index >= 52 && index <= 61) { // 0-9\n                correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n            }\n        }\n        if (correspondingCharacterCode !== -1) {\n            result = String.fromCharCode(correspondingCharacterCode);\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the corresponding index for a given character code.\n     * It expects an alphanumeric character and will return -1 otherwise.\n     * @param code Character code an SP entry in a given skills array.\n     * @returns Corresponding index to the given character or -1 if the\n     * character is invalid.\n     */\n    function spCodeToIndex(code) {\n        let result = -1;\n        let characterCodeOffset = -1;\n        if (!!code && typeof code === 'string' && code.length === 1) {\n            if (code >= 'A' && code <= 'Z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (code >= 'a' && code <= 'z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n            }\n            else if (code >= '0' && code <= '9') {\n                characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n            }\n        }\n        if (characterCodeOffset !== -1) {\n            result = code.charCodeAt(0) - characterCodeOffset;\n        }\n        return result;\n    }\n\n    /**\n     * @description Extract the ID of a string in the format of `number@actualId`. If there\n     * is no value after the @ character or if no @ character is present, the original ID is returned.\n     * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n     * @param id Original SP Enhancement Entry ID.\n     * @returns The ID of a string in the format of `number@actualId`, or the original input if\n     * there is no @ character or no value after the @ character.\n     */\n    function getSpEntryId(id) {\n        return (typeof id === 'string' && id.split('@')[1]) || id;\n    }\n\n    /**\n     * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n     * @param id SP Enhancement entry ID.\n     * @param entries Collection of SP Enhancement entries to search in.\n     * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n     */\n    function getSpEntryWithId(id, entries) {\n        const spId = getSpEntryId(id);\n        return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n     * @param entry SP Entry to get dependencies for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n     */\n    function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependencies = [];\n        if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n            const dependencyId = getSpEntryId(entry.dependency);\n            const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n            if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n                addedEntries.add(dependencyEntry);\n                const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n                dependencies = [dependencyEntry].concat(subDependencies);\n            }\n        }\n        return dependencies;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n     * @param entry SP Entry to get dependents for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n     */\n    function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependents = [];\n        if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n            const entryId = entry.id;\n            dependents = allEntries\n                .filter(s => {\n                return s.dependency &&\n                    s.dependency.includes(entryId) &&\n                    !addedEntries.has(s);\n            });\n            dependents.forEach(dependent => {\n                addedEntries.add(dependent);\n                const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n                dependents = dependents.concat(subDependents);\n            });\n        }\n        return dependents;\n    }\n\n    var index$7 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForSpEnhancement: getEffectsForSpEnhancement,\n        getSpCategoryName: getSpCategoryName,\n        spIndexToCode: spIndexToCode,\n        spCodeToIndex: spCodeToIndex,\n        getSpEntryId: getSpEntryId,\n        getSpEntryWithId: getSpEntryWithId,\n        getAllDependenciesForSpEntry: getAllDependenciesForSpEntry,\n        getAllEntriesThatDependOnSpEntry: getAllEntriesThatDependOnSpEntry\n    });\n\n    /* NOTE: this file is automatically generated; do not edit this file */\n    var version = '0.7.0';\n\n    exports.buffs = index$2;\n    exports.bursts = index;\n    exports.datamineTypes = datamineTypes;\n    exports.extraSkills = index$3;\n    exports.items = index$4;\n    exports.leaderSkills = index$5;\n    exports.spEnhancements = index$7;\n    exports.units = index$6;\n    exports.version = version;\n\n    return exports;\n\n}({}));\n\n","/**\n * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get level entry from.\n * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n */\nexport default function getLevelEntryForBurst(burst, level) {\n    const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n    let levelIndex;\n    if (level !== null && !isNaN(level)) {\n        // 1-indexed\n        levelIndex = (+level - 1);\n    }\n    else {\n        // default to last entry in burst\n        levelIndex = burstEffectsByLevel.length - 1;\n    }\n    return burstEffectsByLevel[levelIndex];\n}\n","import getLevelEntryForBurst from './getLevelEntryForBurst';\n/**\n * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get effects from.\n * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n */\nexport default function getEffectsForBurst(burst, level) {\n    const levelEntry = getLevelEntryForBurst(burst, level);\n    return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n}\n","/**\n * @description Get the proc/passive ID of a given object.\n * @param effect Object to get the effect ID from.\n * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectId(effect) {\n    let resultId = '';\n    if (effect) {\n        resultId = effect['proc id'] || effect['unknown proc id'] ||\n            effect['passive id'] || effect['unknown passive id'] || '';\n    }\n    return resultId;\n}\n","export var KNOWN_PROC_ID;\n(function (KNOWN_PROC_ID) {\n    KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n    KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n})(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\nexport var KNOWN_PASSIVE_ID;\n(function (KNOWN_PASSIVE_ID) {\n    KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n    KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n})(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n","export var ProcBuffType;\n(function (ProcBuffType) {\n    ProcBuffType[\"Attack\"] = \"Attack\";\n})(ProcBuffType || (ProcBuffType = {}));\n/* eslint-disable */\n/**\n * @ignore\n */\nexport const PASSIVE_METADATA = Object.freeze({\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Parameter Boost\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Elemental Parameter Boost\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Type-Based Parameter Boost\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"Status Negation\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Damage Reduction\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Gradual BB Gauge Boost\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"HC Efficacy\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"HP-Conditional Parameter Boost\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"HP-Conditional Drop Rate Boost\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"BC Fill on Enemy Defeat\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Damage Reduction (Chance)\"\n    },\n    \"15\": {\n        \"ID\": \"15\",\n        \"Name\": \"Heal on Enemy Defeat\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Heal on Battle Victory\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"HP Absorption\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Drop Rate Boost\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"Status Infliction\"\n    },\n    \"21\": {\n        \"ID\": \"21\",\n        \"Name\": \"Parameter Boost for First X Turns\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"BC Fill on Battle Victory\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Heal when Attacked (Chance)\"\n    },\n    \"25\": {\n        \"ID\": \"25\",\n        \"Name\": \"BC Fill when Hit (Chance)\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Damage Counter (Chance)\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Increased Target Chance\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Decreased Target Chance\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Defense Ignore (Chance)\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"BB Conditional Parameter Boost\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"BC Efficacy\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Heal over Time\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"Critical Damage Boost\"\n    },\n    \"35\": {\n        \"ID\": \"35\",\n        \"Name\": \"BC Fill when Normal Attacking\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Extra Action\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Hit Count Boost\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Parameter Conversion\"\n    },\n    \"41\": {\n        \"ID\": \"41\",\n        \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"Gender Parameter Boost\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Damage Reduction to 1\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Flat Parameter Boost\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"Critical Damage Negation\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"BC Fill on Spark\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"BC Cost Reduction\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"BB Gauge Consumption Reduction\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Elemental Damage Boost\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Conditional Effect based on HP Threshold\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Damage Reduction when Guarding\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BC Fill when Attacked when Guarding\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BC Fill on Guard\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Elemental Damage Reduction for first X Turns\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"BB Atk Boost\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"BC Fill on Critical\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Add buff to Brave Burst\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"OD Gauge Fill Rate Boost\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"Status Counter\"\n    },\n    \"72\": {\n        \"ID\": \"72\",\n        \"Name\": \"Turn End Effects Activate at Turn Start\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\"\n    },\n    \"74\": {\n        \"ID\": \"74\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Spark Vulnerability\"\n    },\n    \"77\": {\n        \"ID\": \"77\",\n        \"Name\": \"Spark Damage Reduction\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Conditional Effect after Damage Received Threshold\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"BC Fill after Damage Received Threshold\"\n    },\n    \"80\": {\n        \"ID\": \"80\",\n        \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n    },\n    \"81\": {\n        \"ID\": \"81\",\n        \"Name\": \"BC Fill after Damage Dealt Threshold\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"Conditional Effect after BC Received Threshold\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"Conditional Effect after HC Received Threshold\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"BC Fill after HC Received Threshold\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"Conditional Effect after Spark Threshold\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Conditional Effect on Guard\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Conditional Effect on Critical\"\n    },\n    \"90\": {\n        \"ID\": \"90\",\n        \"Name\": \"Status Infliction on Critical\"\n    },\n    \"91\": {\n        \"ID\": \"91\",\n        \"Name\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Negate Defense Ignore\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Added Elements\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Normal Attacks Hit All Foes\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Player EXP Boost\"\n    },\n    \"99\": {\n        \"ID\": \"99\",\n        \"Name\": \"\"\n    },\n    \"100\": {\n        \"ID\": \"100\",\n        \"Name\": \"Spark Critical\"\n    },\n    \"101\": {\n        \"ID\": \"101\",\n        \"Name\": \"Heal on Spark\"\n    },\n    \"102\": {\n        \"ID\": \"102\",\n        \"Name\": \"Added Elements\"\n    },\n    \"103\": {\n        \"ID\": \"103\",\n        \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n    },\n    \"104\": {\n        \"ID\": \"104\",\n        \"Name\": \"Spark Boost when HP Passes Threshold\"\n    },\n    \"105\": {\n        \"ID\": \"105\",\n        \"Name\": \"Turn-Based Parameter Boost\"\n    },\n    \"106\": {\n        \"ID\": \"106\",\n        \"Name\": \"Conditional Effect after Activating Overdrive\"\n    },\n    \"107\": {\n        \"ID\": \"107\",\n        \"Name\": \"Add Effect to Leader Skill\"\n    },\n    \"109\": {\n        \"ID\": \"109\",\n        \"Name\": \"BB Gauge Reduction (Chance)\"\n    },\n    \"110\": {\n        \"ID\": \"110\",\n        \"Name\": \"BC Efficacy Reduction (Chance)\"\n    },\n    \"111\": {\n        \"ID\": \"111\",\n        \"Name\": \"Increase Brave Burst Activation Rate\"\n    },\n    \"112\": {\n        \"ID\": \"112\",\n        \"Name\": \"ABP/CBP Boost\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Conditional Effect after HP Threshold\"\n    },\n    \"114\": {\n        \"ID\": \"114\",\n        \"Name\": \"Inflict Buff when Attacked\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n    },\n    \"128\": {\n        \"ID\": \"128\",\n        \"Name\": \"Damage Reduction from Normal Attacks\"\n    },\n    \"143\": {\n        \"ID\": \"143\",\n        \"Name\": \"Break Atk Parameter Limit\"\n    },\n    \"10008\": {\n        \"ID\": \"10008\",\n        \"Name\": \"Damage Reduction from Specific Sources\"\n    },\n    \"11004\": {\n        \"ID\": \"11004\",\n        \"Name\": \"Elemental Spark Damage Boost\"\n    },\n    \"11005\": {\n        \"ID\": \"11005\",\n        \"Name\": \"Elemental Critical Damage Boost\"\n    },\n    \"11006\": {\n        \"ID\": \"11006\",\n        \"Name\": \"Summoner EXP Boost\"\n    },\n    \"11009\": {\n        \"ID\": \"11009\",\n        \"Name\": \"Effect Duration Boost\"\n    },\n    \"66,1\": {\n        \"ID\": \"66,1\",\n        \"Name\": \"\"\n    }\n});\n/**\n * @ignore\n */\nexport const PROC_METADATA = Object.freeze({\n    \"0\": {\n        \"ID\": \"0\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Regular Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Burst Heal\",\n        \"Type\": \"\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Heal over Time\",\n        \"Type\": \"\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"BB Gauge Refill\",\n        \"Type\": \"\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"Drop Rate\",\n        \"Type\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Parameter Reduction\",\n        \"Type\": \"\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"Status Cleanse\",\n        \"Type\": \"\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"Status Infliction\",\n        \"Type\": \"\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"Revive (Guaranteed)\",\n        \"Type\": \"\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"Random Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Lifesteal Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"Status Negation\",\n        \"Type\": \"\"\n    },\n    \"18\": {\n        \"ID\": \"18\",\n        \"Name\": \"Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Gradual BB Gauge Boost\",\n        \"Type\": \"\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"BC Fill on Hit\",\n        \"Type\": \"\"\n    },\n    \"22\": {\n        \"ID\": \"22\",\n        \"Name\": \"Defense Ignore\",\n        \"Type\": \"\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Hit Count Boost\",\n        \"Type\": \"\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Fixed Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Multi-Element Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"Add Elements\",\n        \"Type\": \"\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Instant BB Gauge Fill\",\n        \"Type\": \"\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"Element Shift\",\n        \"Type\": \"\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Buff Removal (Chance)\",\n        \"Type\": \"\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"BB Gauge Reduction (Chance)\",\n        \"Type\": \"\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Leader Skill Lock (Chance)\",\n        \"Type\": \"\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Summon Unit\",\n        \"Type\": \"\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"Status Cure\",\n        \"Type\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Status Infliction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Instant OD Fill\",\n        \"Type\": \"\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Damage over Time (Additional Damage)\",\n        \"Type\": \"\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"BB Atk Boost\",\n        \"Type\": \"\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Non-Lethal Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"HP Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"Piercing Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"Retire\",\n        \"Type\": \"\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Damage Counter\",\n        \"Type\": \"\"\n    },\n    \"51\": {\n        \"ID\": \"51\",\n        \"Name\": \"Parameter Reduction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"BC Efficacy\",\n        \"Type\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Status Counter\",\n        \"Type\": \"\"\n    },\n    \"54\": {\n        \"ID\": \"54\",\n        \"Name\": \"Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Elemental Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"56\": {\n        \"ID\": \"56\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"57\": {\n        \"ID\": \"57\",\n        \"Name\": \"BC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Spark Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BB Atk Reduction\",\n        \"Type\": \"\"\n    },\n    \"60\": {\n        \"ID\": \"60\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BB-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Barrier\",\n        \"Type\": \"\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Selective Buff Wipe\",\n        \"Type\": \"\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"Consecutive Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\",\n        \"Type\": \"\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Revive (Chance)\",\n        \"Type\": \"\"\n    },\n    \"67\": {\n        \"ID\": \"67\",\n        \"Name\": \"BC Fill on Spark\",\n        \"Type\": \"\"\n    },\n    \"68\": {\n        \"ID\": \"68\",\n        \"Name\": \"Damage Reduction when Guarding\",\n        \"Type\": \"\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"BC Fill on Guard\",\n        \"Type\": \"\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"BB Gauge Fill Rate Debuff\",\n        \"Type\": \"\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\",\n        \"Type\": \"\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Element Squad-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"76\": {\n        \"ID\": \"76\",\n        \"Name\": \"Extra Action\",\n        \"Type\": \"\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Self Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"Player EXP Boost\",\n        \"Type\": \"\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"83\": {\n        \"ID\": \"83\",\n        \"Name\": \"Spark Critical\",\n        \"Type\": \"\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"OD Gauge Fill Rate\",\n        \"Type\": \"\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"Heal when Attacked\",\n        \"Type\": \"\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"HP Absorption\",\n        \"Type\": \"\"\n    },\n    \"87\": {\n        \"ID\": \"87\",\n        \"Name\": \"Heal on Spark\",\n        \"Type\": \"\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Self Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Self Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Self Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"94\": {\n        \"ID\": \"94\",\n        \"Name\": \"Normal Attacks Hit All Foes\",\n        \"Type\": \"\"\n    },\n    \"95\": {\n        \"ID\": \"95\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n        \"Type\": \"\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Element Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Gradual OD Fill\",\n        \"Type\": \"\"\n    },\n    \"119\": {\n        \"ID\": \"119\",\n        \"Name\": \"Gradual BC Drain\",\n        \"Type\": \"\"\n    },\n    \"123\": {\n        \"ID\": \"123\",\n        \"Name\": \"OD Gauge Reduction\",\n        \"Type\": \"\"\n    },\n    \"126\": {\n        \"ID\": \"126\",\n        \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n        \"Type\": \"\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Lock On\",\n        \"Type\": \"\"\n    },\n    \"130\": {\n        \"ID\": \"130\",\n        \"Name\": \"Parameter Reduction Counter\",\n        \"Type\": \"\"\n    },\n    \"131\": {\n        \"ID\": \"131\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"132\": {\n        \"ID\": \"132\",\n        \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"901\": {\n        \"ID\": \"901\",\n        \"Name\": \"Raid Heal (on Map)\",\n        \"Type\": \"\"\n    },\n    \"902\": {\n        \"ID\": \"902\",\n        \"Name\": \"Raid Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"903\": {\n        \"ID\": \"903\",\n        \"Name\": \"Raid Boss Reveal\",\n        \"Type\": \"\"\n    },\n    \"905\": {\n        \"ID\": \"905\",\n        \"Name\": \"Raid Teleport\",\n        \"Type\": \"\"\n    },\n    \"906\": {\n        \"ID\": \"906\",\n        \"Name\": \"Raid Flee\",\n        \"Type\": \"\"\n    },\n    \"907\": {\n        \"ID\": \"907\",\n        \"Name\": \"Raid Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"908\": {\n        \"ID\": \"908\",\n        \"Name\": \"Raid Item Drop Rate Boost\",\n        \"Type\": \"\"\n    },\n    \"10000\": {\n        \"ID\": \"10000\",\n        \"Name\": \"Taunt\",\n        \"Type\": \"\"\n    },\n    \"10001\": {\n        \"ID\": \"10001\",\n        \"Name\": \"Stealth\",\n        \"Type\": \"\"\n    },\n    \"10002\": {\n        \"ID\": \"10002\",\n        \"Name\": \"Shield (old)\",\n        \"Type\": \"\"\n    },\n    \"10003\": {\n        \"ID\": \"10003\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"10004\": {\n        \"ID\": \"10004\",\n        \"Name\": \"Damage Immunity\",\n        \"Type\": \"\"\n    },\n    \"10005\": {\n        \"ID\": \"10005\",\n        \"Name\": \"Turn Skip (short duration)\",\n        \"Type\": \"\"\n    },\n    \"10006\": {\n        \"ID\": \"10006\",\n        \"Name\": \"Turn Skip (long duration)\",\n        \"Type\": \"\"\n    },\n    \"10007\": {\n        \"ID\": \"10007\",\n        \"Name\": \"Evasion\",\n        \"Type\": \"\"\n    },\n    \"10009\": {\n        \"ID\": \"10009\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"10012\": {\n        \"ID\": \"10012\",\n        \"Name\": \"OD Drain\",\n        \"Type\": \"\"\n    },\n    \"10015\": {\n        \"ID\": \"10015\",\n        \"Name\": \"Elemental Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"10016\": {\n        \"ID\": \"10016\",\n        \"Name\": \"Element Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"10017\": {\n        \"ID\": \"10017\",\n        \"Name\": \"Elemental Shield\",\n        \"Type\": \"\"\n    },\n    \"10018\": {\n        \"ID\": \"10018\",\n        \"Name\": \"Max HP Reduction\",\n        \"Type\": \"\"\n    },\n    \"10019\": {\n        \"ID\": \"10019\",\n        \"Name\": \"Effect Purge\",\n        \"Type\": \"\"\n    },\n    \"10020\": {\n        \"ID\": \"10020\",\n        \"Name\": \"Piercing Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"10021\": {\n        \"ID\": \"10021\",\n        \"Name\": \"Active Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10022\": {\n        \"ID\": \"10022\",\n        \"Name\": \"Passive Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10023\": {\n        \"ID\": \"10023\",\n        \"Name\": \"HC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"10025\": {\n        \"ID\": \"10025\",\n        \"Name\": \"KO Resistance Negation\",\n        \"Type\": \"\"\n    },\n    \"10026\": {\n        \"ID\": \"10026\",\n        \"Name\": \"Doom\",\n        \"Type\": \"\"\n    },\n    \"11000\": {\n        \"ID\": \"11000\",\n        \"Name\": \"Negative HP-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"11001\": {\n        \"ID\": \"11001\",\n        \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n        \"Type\": \"\"\n    },\n    \"11002\": {\n        \"ID\": \"11002\",\n        \"Name\": \"HP Limit Break, Convert to HP\",\n        \"Type\": \"\"\n    },\n    \"11003\": {\n        \"ID\": \"11003\",\n        \"Name\": \"Effect Negation\",\n        \"Type\": \"\"\n    },\n    \"70001\": {\n        \"ID\": \"70001\",\n        \"Name\": \"Mana Bubble Shield\",\n        \"Type\": \"\"\n    },\n    \"70002\": {\n        \"ID\": \"70002\",\n        \"Name\": \"Recast\",\n        \"Type\": \"\"\n    },\n    \"2-5\": {\n        \"ID\": \"2-5\",\n        \"Name\": \"Burst Heal and DEF/REC Boost\",\n        \"Type\": \"\"\n    }\n});\n","import { PROC_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given proc ID.\n * @param id Proc ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForProc(id, metadata = PROC_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\nimport { ProcBuffType } from './effect-metadata';\n/**\n * @description Determine if a given proc ID's type is an attack.\n * @param id Proc ID to check.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n */\nexport default function isAttackingProcId(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n}\n","import getEffectId from '../buffs/getEffectId';\nimport { KNOWN_PROC_ID } from '../buffs/constants';\nimport isAttackingProcId from '../buffs/isAttackingProcId';\n/**\n * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n * @param damageFrames Damage frames that each have their own proc ID.\n * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Damage frames entry whose frames are based on the input damage frames.\n */\nexport default function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n    // relevant frames are all effects for healing or attacking\n    const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n    const relevantFrames = inputFrames.filter(frame => {\n        const procId = getEffectId(frame);\n        return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n    });\n    const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n        const keepFirstFrame = index === 0;\n        const numFrames = frameEntry['frame times'].length;\n        const damageDistribution = frameEntry['hit dmg% distribution'];\n        const frameTimes = frameEntry['frame times'];\n        for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n            acc.push({\n                damage: damageDistribution[frameIndex],\n                time: frameTimes[frameIndex],\n            });\n        }\n        return acc;\n    }, []);\n    const resultDamageFramesEntry = {\n        'effect delay time(ms)/frame': effectDelay,\n        'frame times': [],\n        'hit dmg% distribution': [],\n        'hit dmg% distribution (total)': 0,\n        hits: 0,\n    };\n    unifiedFrames.sort((a, b) => a.time - b.time)\n        .forEach(({ time, damage }) => {\n        resultDamageFramesEntry['frame times'].push(time);\n        resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n        resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n    });\n    resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n    return resultDamageFramesEntry;\n}\n","import { PASSIVE_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given passive ID.\n * @param id Passive ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\n/**\n * @description Get the associated name for a given proc ID.\n * @param id Proc ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Name of the proc ID if it exists, empty string otherwise.\n */\nexport default function getNameForProc(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","import getMetadataForPassive from './getMetadataForPassive';\n/**\n * @description Get the associated name for a given passive ID.\n * @param id Passive ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Name of the passive ID if it exists, empty string otherwise.\n */\nexport default function getNameForPassive(id, metadata) {\n    const metadataEntry = getMetadataForPassive(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","/**\n * @description Determine if a given effect object is a proc effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a proc effect based on its properties.\n */\nexport default function isProcEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n}\n","/**\n * @description Determine if a given effect object is a passive effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a passive effect based on its properties.\n */\nexport default function isPassiveEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n}\n","export var Ailment;\n(function (Ailment) {\n    Ailment[\"Poison\"] = \"poison\";\n    Ailment[\"Weak\"] = \"weak\";\n    Ailment[\"Sick\"] = \"sick\";\n    Ailment[\"Injury\"] = \"injury\";\n    Ailment[\"Curse\"] = \"curse\";\n    Ailment[\"Paralysis\"] = \"paralysis\";\n    Ailment[\"AttackReduction\"] = \"atk down\";\n    Ailment[\"DefenseReduction\"] = \"def down\";\n    Ailment[\"RecoveryReduction\"] = \"rec down\";\n    Ailment[\"Unknown\"] = \"unknown\";\n})(Ailment || (Ailment = {}));\nexport var ArenaCondition;\n(function (ArenaCondition) {\n    ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n    ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n    ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n    ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n    ArenaCondition[\"hp_min\"] = \"hp_min\";\n    ArenaCondition[\"hp_max\"] = \"hp_max\";\n    ArenaCondition[\"atk_max\"] = \"atk_max\";\n    ArenaCondition[\"random\"] = \"random\";\n})(ArenaCondition || (ArenaCondition = {}));\nexport var MoveType;\n(function (MoveType) {\n    MoveType[\"Moving\"] = \"1\";\n    MoveType[\"Teleporting\"] = \"2\";\n    MoveType[\"NonMoving\"] = \"3\";\n})(MoveType || (MoveType = {}));\nexport var TargetArea;\n(function (TargetArea) {\n    TargetArea[\"Aoe\"] = \"aoe\";\n    TargetArea[\"Single\"] = \"single\";\n    TargetArea[\"Random\"] = \"random\";\n})(TargetArea || (TargetArea = {}));\nexport var TargetAreaShorthand;\n(function (TargetAreaShorthand) {\n    TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n    TargetAreaShorthand[\"Single\"] = \"ST\";\n    TargetAreaShorthand[\"Random\"] = \"RT\";\n})(TargetAreaShorthand || (TargetAreaShorthand = {}));\nexport var TargetType;\n(function (TargetType) {\n    TargetType[\"Self\"] = \"self\";\n    TargetType[\"Party\"] = \"party\";\n    TargetType[\"Enemy\"] = \"enemy\";\n})(TargetType || (TargetType = {}));\nexport var SpPassiveType;\n(function (SpPassiveType) {\n    SpPassiveType[\"AddPassive\"] = \"passive\";\n    SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n    SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n    SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n    SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n})(SpPassiveType || (SpPassiveType = {}));\nexport var SphereTypeName;\n(function (SphereTypeName) {\n    SphereTypeName[\"None\"] = \"None\";\n    SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n    SphereTypeName[\"Critical\"] = \"Critical\";\n    SphereTypeName[\"Drop\"] = \"Drop\";\n    SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n    SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n    SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n    SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n    SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n    SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n    SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n    SphereTypeName[\"Spark\"] = \"Spark\";\n    SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n    SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n    SphereTypeName[\"Special\"] = \"Special\";\n})(SphereTypeName || (SphereTypeName = {}));\nexport var SphereTypeId;\n(function (SphereTypeId) {\n    SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n    SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n    SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n    SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n    SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n    SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n    SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n    SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n    SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n    SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n    SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n    SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n    SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n    SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n    SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n})(SphereTypeId || (SphereTypeId = {}));\nexport var SpCategoryName;\n(function (SpCategoryName) {\n    SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n    SpCategoryName[\"Spark\"] = \"Spark\";\n    SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n    SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n    SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n    SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n    SpCategoryName[\"Drops\"] = \"Drops\";\n    SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n    SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n    SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n    SpCategoryName[\"Special\"] = \"Special\";\n    SpCategoryName[\"Unknown\"] = \"Unknown\";\n})(SpCategoryName || (SpCategoryName = {}));\nexport var SpCategoryId;\n(function (SpCategoryId) {\n    SpCategoryId[\"Parameter Boost\"] = \"1\";\n    SpCategoryId[\"Spark\"] = \"2\";\n    SpCategoryId[\"Critical Hits\"] = \"3\";\n    SpCategoryId[\"Attack Boost\"] = \"4\";\n    SpCategoryId[\"BB Gauge\"] = \"5\";\n    SpCategoryId[\"HP Recovery\"] = \"6\";\n    SpCategoryId[\"Drops\"] = \"7\";\n    SpCategoryId[\"Ailment Resistance\"] = \"8\";\n    SpCategoryId[\"Ailment Infliction\"] = \"9\";\n    SpCategoryId[\"Damage Reduction\"] = \"10\";\n    SpCategoryId[\"Special\"] = \"11\";\n})(SpCategoryId || (SpCategoryId = {}));\nexport var UnitAnimationKey;\n(function (UnitAnimationKey) {\n    UnitAnimationKey[\"Attack\"] = \"attack\";\n    UnitAnimationKey[\"Idle\"] = \"idle\";\n    UnitAnimationKey[\"Move\"] = \"move\";\n})(UnitAnimationKey || (UnitAnimationKey = {}));\nexport var UnitElement;\n(function (UnitElement) {\n    UnitElement[\"Fire\"] = \"fire\";\n    UnitElement[\"Water\"] = \"water\";\n    UnitElement[\"Earth\"] = \"earth\";\n    UnitElement[\"Thunder\"] = \"thunder\";\n    UnitElement[\"Light\"] = \"light\";\n    UnitElement[\"Dark\"] = \"dark\";\n})(UnitElement || (UnitElement = {}));\nexport var UnitGender;\n(function (UnitGender) {\n    UnitGender[\"Male\"] = \"male\";\n    UnitGender[\"Female\"] = \"female\";\n    UnitGender[\"Other\"] = \"other\";\n})(UnitGender || (UnitGender = {}));\nexport var UnitGettingType;\n(function (UnitGettingType) {\n    UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n    UnitGettingType[\"Farmable\"] = \"farmable\";\n    UnitGettingType[\"RareSummon\"] = \"rare summon\";\n    UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n})(UnitGettingType || (UnitGettingType = {}));\nexport var UnitKind;\n(function (UnitKind) {\n    UnitKind[\"Normal\"] = \"normal\";\n    UnitKind[\"Evolution\"] = \"evo\";\n    UnitKind[\"Enhancing\"] = \"enhancing\";\n    UnitKind[\"Sale\"] = \"sale\";\n})(UnitKind || (UnitKind = {}));\nexport var UnitType;\n(function (UnitType) {\n    UnitType[\"Lord\"] = \"lord\";\n    UnitType[\"Anima\"] = \"anima\";\n    UnitType[\"Breaker\"] = \"breaker\";\n    UnitType[\"Guardian\"] = \"guardian\";\n    UnitType[\"Oracle\"] = \"oracle\";\n    UnitType[\"Rex\"] = \"rex\";\n})(UnitType || (UnitType = {}));\nexport var ItemType;\n(function (ItemType) {\n    ItemType[\"Consumable\"] = \"consumable\";\n    ItemType[\"Material\"] = \"material\";\n    ItemType[\"Sphere\"] = \"sphere\";\n    ItemType[\"EvolutionMaterial\"] = \"evomat\";\n    ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n    ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n})(ItemType || (ItemType = {}));\nexport var MimicUnitIds;\n(function (MimicUnitIds) {\n    MimicUnitIds[\"Mimic\"] = \"60142\";\n    MimicUnitIds[\"BatMimic\"] = \"60143\";\n    MimicUnitIds[\"DragonMimic\"] = \"60144\";\n    MimicUnitIds[\"MetalMimic\"] = \"60224\";\n})(MimicUnitIds || (MimicUnitIds = {}));\n/**\n * @description Known values for the monster groups used in {@link IMimicInfo}.\n */\nexport const MimicMonsterGroupMapping = {\n    '1000': MimicUnitIds.Mimic,\n    '1100': MimicUnitIds.BatMimic,\n    '1101': MimicUnitIds.BatMimic,\n    '1200': MimicUnitIds.DragonMimic,\n    '1300': MimicUnitIds.MetalMimic,\n};\n","import { TargetArea, } from '../datamine-types';\n/**\n * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n */\nexport default function combineEffectsAndDamageFrames(effects, damageFrames) {\n    let combinedEntries = [];\n    if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n        combinedEntries = effects.map((effect, i) => {\n            const correspondingFrameEntry = damageFrames[i];\n            return {\n                delay: effect['effect delay time(ms)/frame'],\n                effect,\n                frames: correspondingFrameEntry,\n                id: `${effect['proc id'] || effect['unknown proc id']}`,\n                targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                targetType: effect['target type'],\n            };\n        });\n    }\n    return combinedEntries;\n}\n","import getEffectId from './getEffectId';\nimport isPassiveEffect from './isPassiveEffect';\nimport getNameForPassive from './getNameForPassive';\nimport isProcEffect from './isProcEffect';\nimport getNameForProc from './getNameForProc';\n/**\n * @description Get the name of a given object.\n * @param effect Object to get the name from.\n * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n * @returns Name of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectName(effect, metadata = {}) {\n    let resultName = '';\n    const effectId = getEffectId(effect);\n    if (isPassiveEffect(effect)) {\n        resultName = getNameForPassive(effectId, metadata && metadata.passive);\n    }\n    else if (isProcEffect(effect)) {\n        resultName = getNameForProc(effectId, metadata && metadata.proc);\n    }\n    return resultName;\n}\n","/**\n * @description Provides info at a glance regarding a buff's source and how it stacks.\n */\nexport var BuffStackType;\n(function (BuffStackType) {\n    /**\n     * @description The buff is activated via some skill and lasts for a number of turns.\n     * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n     * from different levels. Two possible levels of sources are:\n     * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n     * 2. Ultimate Brave Burst or Dual Brave Burst\n     */\n    BuffStackType[\"Active\"] = \"active\";\n    /**\n     * @description The buff is always active provided that the source is not nullified.\n     * Most passive buffs can stack with themselves.\n     */\n    BuffStackType[\"Passive\"] = \"passive\";\n    /**\n     * @description The buff is applied for a number of turns once a certain condition is met.\n     * Buffs of the same type are not able to stack.\n     */\n    BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n    /**\n     * @description Only one instance of the buff can be active at a time and can last indefinitely.\n     * A couple examples of this are Barrier and Max HP Boost.\n     */\n    BuffStackType[\"Singleton\"] = \"singleton\";\n    /**\n     * @description The buff's effects immediately apply to the target(s). This differs from singleton\n     * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n     * in the HP bar filling by the sum of those burst heals).\n     */\n    BuffStackType[\"Burst\"] = \"burst\";\n    /**\n     * @description A specific subset of `Burst` type buffs that deal damage to the target.\n     */\n    BuffStackType[\"Attack\"] = \"attack\";\n    /**\n     * @description Only for buffs that cannot be processed by the library yet.\n     */\n    BuffStackType[\"Unknown\"] = \"unknown\";\n})(BuffStackType || (BuffStackType = {}));\nexport var BuffSource;\n(function (BuffSource) {\n    BuffSource[\"BraveBurst\"] = \"bb\";\n    BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n    BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n    BuffSource[\"DualBraveBurst\"] = \"dbb\";\n    BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n    BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n    BuffSource[\"SpEnhancement\"] = \"sp\";\n    BuffSource[\"Item\"] = \"item\";\n    BuffSource[\"LeaderSkill\"] = \"ls\";\n    BuffSource[\"ExtraSkill\"] = \"es\";\n    /**\n     * @description Buffs that result of having a number of OE+ units in the squad.\n     */\n    BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n    /**\n     * @description Buffs based on a units type. See {@link UnitType}.\n     */\n    BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n    /**\n     * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n     * as well as ambient turn reductions present in some late-game quests.\n     */\n    BuffSource[\"Quest\"] = \"quest\";\n})(BuffSource || (BuffSource = {}));\n/**\n * @description Extra element values that can be used in addition to {@link UnitElement}.\n */\nexport var BuffConditionElement;\n(function (BuffConditionElement) {\n    BuffConditionElement[\"Unknown\"] = \"unknown\";\n    BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n    BuffConditionElement[\"All\"] = \"all\";\n})(BuffConditionElement || (BuffConditionElement = {}));\n/**\n * @description Stats on a unit that a buff can affect.\n */\nexport var UnitStat;\n(function (UnitStat) {\n    UnitStat[\"hp\"] = \"hp\";\n    UnitStat[\"atk\"] = \"atk\";\n    UnitStat[\"def\"] = \"def\";\n    UnitStat[\"rec\"] = \"rec\";\n    UnitStat[\"crit\"] = \"crit\";\n    UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n    UnitStat[\"bbGauge\"] = \"bbGauge\";\n    UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n    UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n    UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n    UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n    UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n    UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n    UnitStat[\"poisonResist\"] = \"poisonResist\";\n    UnitStat[\"weakResist\"] = \"weakResist\";\n    UnitStat[\"sickResist\"] = \"sickResist\";\n    UnitStat[\"injuryResist\"] = \"injuryResist\";\n    UnitStat[\"curseResist\"] = \"curseResist\";\n    UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n    UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n    UnitStat[\"weakInflict\"] = \"weakInflict\";\n    UnitStat[\"sickInflict\"] = \"sickInflict\";\n    UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n    UnitStat[\"curseInflict\"] = \"curseInflict\";\n    UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n    UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n    UnitStat[\"defDownResist\"] = \"defDownResist\";\n    UnitStat[\"recDownResist\"] = \"recDownResist\";\n    UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n    UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n    UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n    UnitStat[\"mitigation\"] = \"mitigation\";\n    UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n    UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n    UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n    UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n    UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n    UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n    UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n    UnitStat[\"koResistance\"] = \"koResistance\";\n    UnitStat[\"revive\"] = \"revive\";\n    UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n    UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n    UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n    UnitStat[\"damageReflect\"] = \"damageReflect\";\n    UnitStat[\"targetingModification\"] = \"targetingModification\";\n})(UnitStat || (UnitStat = {}));\nexport var IconId;\n(function (IconId) {\n    IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n    IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n    IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n    IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n    IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n    IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n    IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n    IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n    IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n    IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n    IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n    IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n    IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n    IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n    IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n    IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n    IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n    IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n    IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n    IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n    IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n    IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n    IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n    IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n    IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n    IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n    IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n    IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n    IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n    IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n    IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n    IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n    IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n    IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n    IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n    IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n    IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n    IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n    IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n    IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n    IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n    IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n    IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n    IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n    IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n    IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n    IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n    IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n    IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n    IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n    IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n    IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n    IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n    IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n    IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n    IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n    IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n    IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n    IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n    IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n    IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n    IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n    IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n    IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n    IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n    IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n    IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n    IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n    IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n    IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n    IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n    IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n    IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n    IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n    IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n    IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n    IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n    IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n    IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n    IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n    IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n    IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n    IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n    IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n    IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n    IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n    IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n    IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n    IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n    IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n    IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n    IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n    IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n    IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n    IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n    IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n    IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n    IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n    IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n    IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n    IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n    IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n    IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n    IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n    IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n    IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n    IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n    IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n    IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n    IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n    IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n    IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n    IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n    IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n    IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n    IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n    IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n    IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n    IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n    IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n    IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n    IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n    IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n    IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n    IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n    IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n    IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n    IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n    IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n    IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n    IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n    IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n    IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n    IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n    IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n    IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n    IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n    IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n    IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n    IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n    IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n    IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n    IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n    IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n    IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n    IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n    IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n    IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n    IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n    IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n    IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n    IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n    IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n    IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n    IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n    IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n    IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n    IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n    IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n    IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n    IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n    IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n    IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n    IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n    IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n    IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n    IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n    IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n    IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n    IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n    IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n    IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n    IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n    IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n    IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n    IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n    IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n    IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n    IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n    IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n    IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n    IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n    IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n    IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n    IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n    IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n    IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n    IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n    IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n    IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n    IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n    IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n    IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n    IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n    IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n    IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n    IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n    IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n    IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n    IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n    IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n    IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n    IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n    IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n    IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n    IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n    IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n    IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n    IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n    IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n    IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n    IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n    IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n    IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n    IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n    IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n    IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n    IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n    IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n    IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n    IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n    IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n    IconId[\"ATK_ST\"] = \"ATK_ST\";\n    IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n    IconId[\"ATK_RT\"] = \"ATK_RT\";\n    IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n    IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n    IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n})(IconId || (IconId = {}));\n/**\n * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n * source of a given buff.\n */\nexport var BuffId;\n(function (BuffId) {\n    BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n    BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n    BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n    BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n    BuffId[\"passive:1:def\"] = \"passive:1:def\";\n    BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n    BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n    BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n    BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n    BuffId[\"passive:2:def\"] = \"passive:2:def\";\n    BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n    BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n    BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n    BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n    BuffId[\"passive:3:def\"] = \"passive:3:def\";\n    BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n    BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n    BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n    BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n    BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n    BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n    BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n    BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n    BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n    BuffId[\"passive:5:water\"] = \"passive:5:water\";\n    BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n    BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n    BuffId[\"passive:5:light\"] = \"passive:5:light\";\n    BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n    BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n    BuffId[\"passive:8\"] = \"passive:8\";\n    BuffId[\"passive:9\"] = \"passive:9\";\n    BuffId[\"passive:10\"] = \"passive:10\";\n    BuffId[\"passive:11:atk\"] = \"passive:11:atk\";\n    BuffId[\"passive:11:def\"] = \"passive:11:def\";\n    BuffId[\"passive:11:rec\"] = \"passive:11:rec\";\n    BuffId[\"passive:11:crit\"] = \"passive:11:crit\";\n    BuffId[\"passive:12:bc\"] = \"passive:12:bc\";\n    BuffId[\"passive:12:hc\"] = \"passive:12:hc\";\n    BuffId[\"passive:12:item\"] = \"passive:12:item\";\n    BuffId[\"passive:12:zel\"] = \"passive:12:zel\";\n    BuffId[\"passive:12:karma\"] = \"passive:12:karma\";\n    BuffId[\"passive:13\"] = \"passive:13\";\n    BuffId[\"passive:14\"] = \"passive:14\";\n    BuffId[\"passive:15\"] = \"passive:15\";\n    BuffId[\"passive:16\"] = \"passive:16\";\n    BuffId[\"passive:17\"] = \"passive:17\";\n    BuffId[\"passive:19:bc\"] = \"passive:19:bc\";\n    BuffId[\"passive:19:hc\"] = \"passive:19:hc\";\n    BuffId[\"passive:19:item\"] = \"passive:19:item\";\n    BuffId[\"passive:19:zel\"] = \"passive:19:zel\";\n    BuffId[\"passive:19:karma\"] = \"passive:19:karma\";\n    BuffId[\"passive:20:poison\"] = \"passive:20:poison\";\n    BuffId[\"passive:20:weak\"] = \"passive:20:weak\";\n    BuffId[\"passive:20:sick\"] = \"passive:20:sick\";\n    BuffId[\"passive:20:injury\"] = \"passive:20:injury\";\n    BuffId[\"passive:20:curse\"] = \"passive:20:curse\";\n    BuffId[\"passive:20:paralysis\"] = \"passive:20:paralysis\";\n    BuffId[\"passive:20:atk down\"] = \"passive:20:atk down\";\n    BuffId[\"passive:20:def down\"] = \"passive:20:def down\";\n    BuffId[\"passive:20:rec down\"] = \"passive:20:rec down\";\n    BuffId[\"passive:20:unknown\"] = \"passive:20:unknown\";\n    BuffId[\"passive:21:atk\"] = \"passive:21:atk\";\n    BuffId[\"passive:21:def\"] = \"passive:21:def\";\n    BuffId[\"passive:21:rec\"] = \"passive:21:rec\";\n    BuffId[\"passive:21:crit\"] = \"passive:21:crit\";\n    BuffId[\"passive:23\"] = \"passive:23\";\n    BuffId[\"passive:24\"] = \"passive:24\";\n    BuffId[\"passive:25\"] = \"passive:25\";\n    BuffId[\"passive:26\"] = \"passive:26\";\n    BuffId[\"passive:27\"] = \"passive:27\";\n    BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n    BuffId[\"proc:1\"] = \"proc:1\";\n    BuffId[\"proc:2\"] = \"proc:2\";\n    BuffId[\"proc:3\"] = \"proc:3\";\n    BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n    BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n    BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n    BuffId[\"proc:5:def\"] = \"proc:5:def\";\n    BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n    BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n    BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n    BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n    BuffId[\"proc:6:item\"] = \"proc:6:item\";\n    BuffId[\"proc:7\"] = \"proc:7\";\n    BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n    BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n    BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n    BuffId[\"proc:9:def\"] = \"proc:9:def\";\n    BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n    BuffId[\"proc:9:unknown\"] = \"proc:9:unknown\";\n    BuffId[\"proc:10:poison\"] = \"proc:10:poison\";\n    BuffId[\"proc:10:weak\"] = \"proc:10:weak\";\n    BuffId[\"proc:10:sick\"] = \"proc:10:sick\";\n    BuffId[\"proc:10:injury\"] = \"proc:10:injury\";\n    BuffId[\"proc:10:curse\"] = \"proc:10:curse\";\n    BuffId[\"proc:10:paralysis\"] = \"proc:10:paralysis\";\n    BuffId[\"proc:10:atk down\"] = \"proc:10:atk down\";\n    BuffId[\"proc:10:def down\"] = \"proc:10:def down\";\n    BuffId[\"proc:10:rec down\"] = \"proc:10:rec down\";\n    BuffId[\"proc:10:unknown\"] = \"proc:10:unknown\";\n    BuffId[\"proc:11:poison\"] = \"proc:11:poison\";\n    BuffId[\"proc:11:weak\"] = \"proc:11:weak\";\n    BuffId[\"proc:11:sick\"] = \"proc:11:sick\";\n    BuffId[\"proc:11:injury\"] = \"proc:11:injury\";\n    BuffId[\"proc:11:curse\"] = \"proc:11:curse\";\n    BuffId[\"proc:11:paralysis\"] = \"proc:11:paralysis\";\n    BuffId[\"proc:11:atk down\"] = \"proc:11:atk down\";\n    BuffId[\"proc:11:def down\"] = \"proc:11:def down\";\n    BuffId[\"proc:11:rec down\"] = \"proc:11:rec down\";\n    BuffId[\"proc:11:unknown\"] = \"proc:11:unknown\";\n    BuffId[\"proc:12\"] = \"proc:12\";\n    BuffId[\"proc:13\"] = \"proc:13\";\n    BuffId[\"proc:14\"] = \"proc:14\";\n    BuffId[\"proc:16:fire\"] = \"proc:16:fire\";\n    BuffId[\"proc:16:water\"] = \"proc:16:water\";\n    BuffId[\"proc:16:earth\"] = \"proc:16:earth\";\n    BuffId[\"proc:16:thunder\"] = \"proc:16:thunder\";\n    BuffId[\"proc:16:light\"] = \"proc:16:light\";\n    BuffId[\"proc:16:dark\"] = \"proc:16:dark\";\n    BuffId[\"proc:16:all\"] = \"proc:16:all\";\n    BuffId[\"proc:16:unknown\"] = \"proc:16:unknown\";\n    BuffId[\"proc:17:poison\"] = \"proc:17:poison\";\n    BuffId[\"proc:17:weak\"] = \"proc:17:weak\";\n    BuffId[\"proc:17:sick\"] = \"proc:17:sick\";\n    BuffId[\"proc:17:injury\"] = \"proc:17:injury\";\n    BuffId[\"proc:17:curse\"] = \"proc:17:curse\";\n    BuffId[\"proc:17:paralysis\"] = \"proc:17:paralysis\";\n    BuffId[\"proc:18\"] = \"proc:18\";\n    BuffId[\"proc:19\"] = \"proc:19\";\n    BuffId[\"proc:20\"] = \"proc:20\";\n    BuffId[\"proc:22\"] = \"proc:22\";\n    BuffId[\"proc:23\"] = \"proc:23\";\n    BuffId[\"proc:24:atk\"] = \"proc:24:atk\";\n    BuffId[\"proc:24:def\"] = \"proc:24:def\";\n    BuffId[\"proc:24:rec\"] = \"proc:24:rec\";\n    BuffId[\"proc:26\"] = \"proc:26\";\n    BuffId[\"proc:27\"] = \"proc:27\";\n})(BuffId || (BuffId = {}));\n","import { BuffSource, } from './buff-types';\nimport { SpPassiveType, TargetType, TargetArea, } from '../../datamine-types';\n/**\n * @description Helper function for creating an entry to be used in the `sources`\n * property of {@link IBuff}.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourceEntryFromContext(context) {\n    return `${context.source}-${context.sourceId}`;\n}\n/**\n * @description Helper function for creating an entries array to be used in the `sources`\n * property of {@link IBuff}. It handles setting the order of the sources.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourcesFromContext(context) {\n    const resultArray = Array.isArray(context.previousSources)\n        ? context.previousSources.slice()\n        : [];\n    // Ensure that the current source is at the beginning of the array\n    resultArray.unshift(createSourceEntryFromContext(context));\n    return resultArray;\n}\n/**\n * @description Given the conditions in an extra skill effect, normalize them into\n * a simpler object containing the IDs of each condition type.\n * @param effect Extra skill effect to process conditions from.\n * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n */\nexport function processExtraSkillConditions(effect) {\n    const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n    const aggregate = {\n        units: new Set(),\n        items: new Set(),\n        sphereTypes: new Set(),\n        unknowns: new Set(),\n    };\n    conditions.forEach((condition, index) => {\n        if ('sphere category required (raw)' in condition) {\n            aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n        }\n        else if ('item required' in condition) {\n            condition['item required'].forEach((item) => {\n                aggregate.items.add(item);\n            });\n        }\n        else if ('unit required' in condition) {\n            condition['unit required'].forEach((unit) => {\n                aggregate.units.add(`${unit.id}`);\n            });\n        }\n        else {\n            aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n        }\n    });\n    // filter out properties that have no entries\n    const result = Object.entries(aggregate)\n        .filter((entry) => entry[1].size > 0)\n        .reduce((acc, entry) => {\n        acc[entry[0]] = Array.from(entry[1]);\n        return acc;\n    }, {});\n    return result;\n}\n/**\n * @description Extract the target type and target area of a given passive effect.\n * @param effect Passive effect to extract target data from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns The target data for the given effect and context. There are only two possible values:\n * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n */\nexport function getPassiveTargetData(effect, context) {\n    const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n        (effect.sp_type === SpPassiveType.EnhancePassive);\n    const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n    return {\n        targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n        targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n    };\n}\n/**\n * @description Extract the target type and target area of a given proc effect.\n * @param effect Proc effect to extract target data from.\n * @returns The target data for the given effect and context.\n */\nexport function getProcTargetData(effect) {\n    return {\n        targetArea: effect['target area'],\n        targetType: effect['target type'],\n    };\n}\n/**\n * @description Try to parse the given value into a number or return a value if it is not a number.\n * @param value Value to parse into a number.\n * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n */\nexport function parseNumberOrDefault(value, defaultValue = 0) {\n    return (value !== null && !isNaN(value)) ? +value : defaultValue;\n}\n/**\n * @description Create an object denoting values that cannot be processed yet. To be used\n * in the `value` property of `IBuff` as needed.\n * @param params Array of values that cannot be processed yet.\n * @param startIndex The first index before which we know how to process an effect's values.\n * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n */\nexport function createUnknownParamsValue(params = [], startIndex = 0) {\n    let hasValue = false;\n    const result = params\n        .reduce((acc, value, index) => {\n        if (value && value !== '0') {\n            acc[`param_${startIndex + index}`] = value;\n            hasValue = true;\n        }\n        return acc;\n    }, {});\n    return hasValue ? result : (void 0);\n}\n/**\n * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n * @param source Source value to check.\n * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n * bonded super brave burst, or bonded dual brave burst.\n */\nexport function buffSourceIsBurstType(source) {\n    return !!source && [\n        BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n        BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n    ].includes(source);\n}\n","import { UnitElement, Ailment, TargetArea } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { getProcTargetData, createSourcesFromContext, parseNumberOrDefault, createUnknownParamsValue, buffSourceIsBurstType } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of proc IDs to functions.\n */\nexport function getProcEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const effectDelay = effect['effect delay time(ms)/frame'];\n        return { targetData, sources, effectDelay };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n        effectDelay,\n        sources, value: unknownParams }, targetData));\n    const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n        sources, value: {\n            buffs,\n            duration: duration,\n        } }, targetData));\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    /**\n     * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n     * checked if all other known values in the effect are 0.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @param turnDuration Parsed turn duration value to check.\n     * @param injectionContext Object whose main use is for injecting methods in testing.\n     * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n     */\n    const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n        let result = turnDuration !== 0;\n        if (result) {\n            result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n        }\n        return result;\n    };\n    /**\n     * @description Helper function to get attack information common across most attacks from the conversion context.\n     * @param context Given context that may contain attack information like damage frames.\n     * @returns Extracted attack information from the context (with defaults where applicable).\n     */\n    const getAttackInformationFromContext = (context) => {\n        const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n        const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n        return {\n            hits,\n            distribution,\n        };\n    };\n    const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            value = parseParamValue(rawValue);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect[effectValueKey]);\n            turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [buffId],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [Object.assign({ id: 'proc:1', originalId: '1', sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '1',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'healerRec%': 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            let recX, recY;\n            let extraParams;\n            [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n            params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['heal low'];\n            params.healHigh = effect['heal high'];\n            params['healerRec%'] = effect['rec added% (from healer)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const results = [Object.assign({ id: 'proc:2', originalId: '2', sources,\n                effectDelay, value: params }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '2',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'targetRec%': 0,\n            turnDuration: '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let rec;\n            let extraParams;\n            [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['gradual heal low'];\n            params.healHigh = effect['gradual heal high'];\n            params['targetRec%'] = effect['rec added% (from target)'];\n            params.turnDuration = effect['gradual heal turns (8)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n        const results = [];\n        if (hasAnyHealValues) {\n            results.push(Object.assign({ id: 'proc:3', originalId: '3', sources,\n                effectDelay, duration: params.turnDuration, value: {\n                    healLow: params.healLow,\n                    healHigh: params.healHigh,\n                    'targetRec%': params['targetRec%'],\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId: '3',\n                sources,\n                buffs: ['proc:3'],\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '3',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill);\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('bb bc fill' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill']);\n            }\n            if ('bb bc fill%' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n            }\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:flat', originalId: '4', sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:percent', originalId: '4', sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '4',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            element: BuffConditionElement.All,\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    params[statType] = parseNumberOrDefault(effect[effectKey]);\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId: '5', sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId: '5',\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '5',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('6', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            turnDuration: '0',\n        };\n        const dropRateProperties = ['bc', 'hc', 'item'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.bc = effect['bc drop rate% buff (10)'];\n            params.hc = effect['hc drop rate% buff (9)'];\n            params.item = effect['item drop rate% buff (11)'];\n            params.turnDuration = effect['drop buff rate turns'];\n        }\n        dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n        const results = [];\n        if (hasAnyRates) {\n            dropRateProperties.forEach((key) => {\n                const value = params[key];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:6:${key}`, originalId: '6', sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId: '6',\n                sources,\n                buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '6',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('7', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHpPercent = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:7', originalId: '7', sources,\n                effectDelay, value: recoveredHpPercent }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '7',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatHpBoost = 0;\n        let percentHpBoost = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n            flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n            percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('max hp increase' in effect) {\n                flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n            }\n            if ('max hp% increase' in effect) {\n                percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n            }\n        }\n        const results = [];\n        if (flatHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:flat', originalId: '8', sources,\n                effectDelay, value: flatHpBoost }, targetData));\n        }\n        if (percentHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:percent', originalId: '8', sources,\n                effectDelay, value: percentHpBoost }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '8',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const STAT_TYPE_MAPPING = {\n            0: 'atk',\n            1: 'def',\n            2: 'rec',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const params = {\n            element: BuffConditionElement.All,\n            statReductionEntries: [],\n            turnDuration: 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n            [\n                [statType1, value1, procChance1],\n                [statType2, value2, procChance2],\n            ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                const statType = parseNumberOrDefault(rawStatType) - 1;\n                const value = parseNumberOrDefault(rawValue);\n                const chance = parseNumberOrDefault(rawProcChance);\n                if (statType === 3) { // all stats\n                    params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                        stat,\n                        value,\n                        chance,\n                    })));\n                }\n                else {\n                    params.statReductionEntries.push({\n                        stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                        value,\n                        chance,\n                    });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            ['buff #1', 'buff #2'].forEach((buffKey) => {\n                const entry = effect[buffKey];\n                if (entry) {\n                    const chance = parseNumberOrDefault(entry['proc chance%']);\n                    const keys = Object.keys(entry);\n                    coreStatProperties.forEach((statType) => {\n                        const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                        if (effectKey) {\n                            params.statReductionEntries.push({\n                                stat: statType,\n                                value: parseNumberOrDefault(entry[effectKey]),\n                                chance,\n                            });\n                        }\n                    });\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        let hasAnyValues = false;\n        params.statReductionEntries.forEach(({ stat, value, chance }) => {\n            if (value !== 0 || chance !== 0) {\n                hasAnyValues = true;\n                const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId: '9', sources,\n                    effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                if (params.element !== BuffConditionElement.All) {\n                    buffEntry.conditions = {\n                        targetElements: [params.element],\n                    };\n                }\n                results.push(buffEntry);\n            }\n        });\n        if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId: '9',\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '9',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 8);\n            const extraParams = splitParams.slice(8);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                if (`remove ${ailment}` in effect) { // mainly for items\n                    curedAilments.push(ailment);\n                }\n            });\n            if ('remove all status ailments' in effect) {\n                curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:${ailment}`, originalId: '10', sources,\n            effectDelay, value: true }, targetData)));\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '10',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            let params = splitEffectParams(effect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:${ailment}`, originalId: '11', sources,\n            effectDelay, value: chance }, targetData)));\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '11',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let reviveToHp = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n            reviveToHp = parseNumberOrDefault(rawReviveToHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:12', originalId: '12', sources,\n                effectDelay, value: reviveToHp }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '12',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hits = 0;\n        const { distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawHits;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n            hits = parseNumberOrDefault(rawHits);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            hits = parseNumberOrDefault(effect.hits);\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [{\n                id: 'proc:13',\n                originalId: '13',\n                sources,\n                effectDelay,\n                value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }),\n                targetType: targetData.targetType,\n                targetArea: TargetArea.Random,\n            }];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '13',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n            'drainLow%': '0',\n            'drainHigh%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n            params['drainLow%'] = effect['hp drain% low'];\n            params['drainHigh%'] = effect['hp drain% high'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [Object.assign({ id: 'proc:14', originalId: '14', sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '14',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let mitigation = 0;\n        let element;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            mitigation = parseNumberOrDefault(rawMitigation);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n            element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n            if (mitigationKey) {\n                mitigation = parseNumberOrDefault(effect[mitigationKey]);\n            }\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (mitigation !== 0) {\n            results.push(Object.assign({ id: `proc:16:${element}`, originalId: '16', sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId: '16',\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '16',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    resistances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:17:${ailment}`, originalId: '17', sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId: '17',\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:17:${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '17',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('18', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'dmg% reduction',\n            effectTurnDurationKey: 'dmg% reduction turns (36)',\n            buffId: 'proc:18',\n            originalId: '18',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'increase bb gauge gradual',\n            effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'proc:19',\n            originalId: '19',\n        });\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let fillLow = 0;\n        let fillHigh = 0;\n        let chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFillLow, rawFillHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(effect['bc fill when attacked low']);\n            fillHigh = parseNumberOrDefault(effect['bc fill when attacked high']);\n            chance = parseNumberOrDefault(effect['bc fill when attacked%']);\n            turnDuration = parseNumberOrDefault(effect['bc fill when attacked turns (38)']);\n        }\n        const hasAnyFillValues = fillLow !== 0 || fillHigh !== 0;\n        const results = [];\n        if (hasAnyFillValues) {\n            results.push(Object.assign({ id: 'proc:20', originalId: '20', sources,\n                effectDelay, duration: turnDuration, conditions: {\n                    whenAttacked: true,\n                }, value: {\n                    fillLow,\n                    fillHigh,\n                    chance,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId: '20',\n                sources,\n                buffs: ['proc:20'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '20',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('22', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'defense% ignore',\n            effectTurnDurationKey: 'defense% ignore turns (39)',\n            buffId: 'proc:22',\n            originalId: '22',\n        });\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            value = parseNumberOrDefault(params[0]);\n            turnDuration = parseNumberOrDefault(params[6]);\n            const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'proc:23', originalId: '23', sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId: '23',\n                sources,\n                buffs: ['proc:23'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '23',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let turnDuration = 0;\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawConvertedStat, rawTurnDuration;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            const rawConvertedStat = effect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    stats[statType] = parseNumberOrDefault(effect[effectKey]);\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['% converted turns']);\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:24:${stat}`, originalId: '24', sources,\n                    effectDelay, duration: turnDuration, value: {\n                        convertedStat,\n                        value,\n                    } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId: '24',\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:24:${statKey}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '24',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n            turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'proc:26', originalId: '26', sources,\n                effectDelay, duration: turnDuration, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId: '26',\n                sources,\n                buffs: ['proc:26'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '26',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'hpDamageLow%': '0',\n            'hpDamageHigh%': '0',\n            'hpDamageChance%': '0',\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else {\n            params['hpDamageLow%'] = effect['hp% damage low'];\n            params['hpDamageHigh%'] = effect['hp% damage high'];\n            params['hpDamageChance%'] = effect['hp% damage chance%'];\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [Object.assign({ id: 'proc:27', originalId: '27', sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '27',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport { getProcEffectToBuffMapping } from './proc-effect-mapping';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PROC_ID } from '../constants';\nimport isProcEffect from '../isProcEffect';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given proc effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            originalId: id,\n            effectDelay: effect['effect delay time(ms)/frame'],\n            targetType: effect['target type'],\n            targetArea: effect['target area'],\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given proc effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Proc effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given proc effect object.\n */\nexport default function convertProcEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isProcEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { UnitElement, UnitType, Ailment } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { createSourcesFromContext, processExtraSkillConditions, getPassiveTargetData, createUnknownParamsValue, parseNumberOrDefault } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of passive IDs to functions.\n */\nexport function getPassiveEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n        X: BuffConditionElement.OmniParadigm,\n    };\n    const TYPE_MAPPING = {\n        1: UnitType.Lord,\n        2: UnitType.Anima,\n        3: UnitType.Breaker,\n        4: UnitType.Guardian,\n        5: UnitType.Oracle,\n        6: UnitType.Rex,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n    const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n        const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        return { conditionInfo, targetData, sources };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n        sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let value = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect[effectKey]);\n        }\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    };\n    const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let valueLow, valueHigh, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            valueLow = parseParamValue(rawLowValue);\n            valueHigh = parseParamValue(rawHighValue);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n            valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n            chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n        }\n        const results = [Object.assign({ id: buffId, originalId,\n                sources, value: {\n                    [buffKeyLow]: valueLow,\n                    [buffKeyHigh]: valueHigh,\n                    chance,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:1:${stat}`, originalId: '1', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '1',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            elements: [],\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let element1, element2;\n            [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            [element1, element2].forEach((elementValue) => {\n                if (elementValue && elementValue !== '0') {\n                    stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            stats.elements = typedEffect['elements buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId: '2', sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n        if (stats.elements.length > 0) {\n            stats.elements.forEach((element) => {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                    }\n                });\n            });\n        }\n        else {\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                }\n            });\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '2',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            unitType: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let unitType;\n            [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            if (unitType && unitType !== '0') {\n                stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.unitType = typedEffect['unit type buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetUnitType = stats.unitType || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:3:${stat}`, originalId: '3', sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '3',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:4:${ailment}`, originalId: '4', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '4',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let element;\n        let mitigation = '0';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n            if (element !== BuffConditionElement.Unknown) {\n                mitigation = typedEffect[`${element} resist%`];\n            }\n        }\n        const value = parseNumberOrDefault(mitigation);\n        if (value !== 0) {\n            results.push(Object.assign({ id: `passive:5:${element}`, originalId: '5', sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '5',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'dmg% mitigation',\n            buffId: 'passive:8',\n            originalId: '8',\n        });\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bc fill per turn',\n            buffId: 'passive:9',\n            originalId: '9',\n        });\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'hc effectiveness%',\n            buffId: 'passive:10',\n            originalId: '10',\n        });\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let requireHpAbove = false;\n        let hpThreshold = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireHpAboveFlag;\n            let rawHpThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawHpThreshold, rawRequireHpAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            requireHpAbove = rawRequireHpAboveFlag === '1';\n            hpThreshold = parseNumberOrDefault(rawHpThreshold);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            if ('hp above % buff requirement' in typedEffect) {\n                hpThreshold = parseNumberOrDefault(typedEffect['hp above % buff requirement']);\n                requireHpAbove = true;\n            }\n            else {\n                hpThreshold = parseNumberOrDefault(typedEffect['hp below % buff requirement']);\n                requireHpAbove = false;\n            }\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:11:${stat}`, originalId: '11', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData);\n                // disabling no-non-null-assertion rule because `conditions` property is defined above\n                /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                if (requireHpAbove) {\n                    entry.conditions.hpGreaterThanOrEqualTo = hpThreshold;\n                }\n                else {\n                    entry.conditions.hpLessThanOrEqualTo = hpThreshold;\n                }\n                /* eslint-enable @typescript-eslint/no-non-null-assertion */\n                results.push(entry);\n            }\n        });\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '11',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let requireHpAbove = false;\n        let hpThreshold = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireHpAboveFlag;\n            let rawHpThreshold;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawHpThreshold, rawRequireHpAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            requireHpAbove = rawRequireHpAboveFlag === '1';\n            hpThreshold = parseNumberOrDefault(rawHpThreshold);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n            if ('hp above % buff requirement' in typedEffect) {\n                hpThreshold = parseNumberOrDefault(typedEffect['hp above % buff requirement']);\n                requireHpAbove = true;\n            }\n            else {\n                hpThreshold = parseNumberOrDefault(typedEffect['hp below % buff requirement']);\n                requireHpAbove = false;\n            }\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                const entry = Object.assign({ id: `passive:12:${dropType}`, originalId: '12', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData);\n                // disabling no-non-null-assertion rule because `conditions` property is defined above\n                /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                if (requireHpAbove) {\n                    entry.conditions.hpGreaterThanOrEqualTo = hpThreshold;\n                }\n                else {\n                    entry.conditions.hpLessThanOrEqualTo = hpThreshold;\n                }\n                /* eslint-enable @typescript-eslint/no-non-null-assertion */\n                results.push(entry);\n            }\n        });\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '12',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '13',\n            effectKeyLow: 'bc fill on enemy defeat low',\n            effectKeyHigh: 'bc fill on enemy defeat high',\n            effectKeyChance: 'bc fill on enemy defeat%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            buffId: 'passive:13',\n        });\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageReduction, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            damageReduction = parseNumberOrDefault(rawReduction);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n            chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n        }\n        const results = [Object.assign({ id: 'passive:14', originalId: '14', sources, value: {\n                    value: damageReduction,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '14',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('15', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '15',\n            effectKeyLow: 'hp% recover on enemy defeat low',\n            effectKeyHigh: 'hp% recover on enemy defeat high',\n            effectKeyChance: 'hp% recover on enemy defeat chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            defaultEffectChance: 100,\n            buffId: 'passive:15',\n        });\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n            healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n        }\n        const results = [Object.assign({ id: 'passive:16', originalId: '16', sources, value: {\n                    healLow,\n                    healHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '16',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '17',\n            effectKeyLow: 'hp drain% low',\n            effectKeyHigh: 'hp drain% high',\n            effectKeyChance: 'hp drain chance%',\n            buffKeyLow: 'drainHealLow',\n            buffKeyHigh: 'drainHealHigh',\n            buffId: 'passive:17',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:19:${dropType}`, originalId: '19', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '19',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            let params = splitEffectParams(typedEffect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(typedEffect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `passive:20:${ailment}`, originalId: '20', sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData)));\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '20',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('21', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let rawDuration, extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['first x turns atk% (1)'];\n            stats.def = typedEffect['first x turns def% (3)'];\n            stats.rec = typedEffect['first x turns rec% (5)'];\n            stats.crit = typedEffect['first x turns crit% (7)'];\n            turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:21:${stat}`, originalId: '21', sources,\n                    value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                results.push(entry);\n            }\n        });\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '21',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let fillLow, fillHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n            fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n        }\n        const results = [Object.assign({ id: 'passive:23', originalId: '23', sources, value: {\n                    fillLow,\n                    fillHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '23',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '24',\n            effectKeyLow: 'dmg% to hp when attacked low',\n            effectKeyHigh: 'dmg% to hp when attacked high',\n            effectKeyChance: 'dmg% to hp when attacked chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:24',\n        });\n    });\n    map.set('25', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '25',\n            effectKeyLow: 'bc fill when attacked low',\n            effectKeyHigh: 'bc fill when attacked high',\n            effectKeyChance: 'bc fill when attacked%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:25',\n        });\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '26',\n            effectKeyLow: 'dmg% reflect low',\n            effectKeyHigh: 'dmg% reflect high',\n            effectKeyChance: 'dmg% reflect chance%',\n            buffKeyLow: 'damageReflectLow',\n            buffKeyHigh: 'damageReflectHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:26',\n        });\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'target% chance',\n            buffId: 'passive:27',\n            originalId: '27',\n        });\n    });\n}\n","import { BuffId } from './buff-types';\nimport isPassiveEffect from '../isPassiveEffect';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PASSIVE_ID } from '../constants';\nimport { getPassiveEffectToBuffMapping } from './passive-effect-mapping';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given passive effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given passive effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Passive effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertPassiveEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isPassiveEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId, UnitStat, BuffStackType, IconId, } from './buff-types';\nimport { TargetArea } from '../../datamine-types';\nexport const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'UNKNOWN_PASSIVE_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n        name: 'Unknown Passive Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n        name: 'Unknown Passive Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'TURN_DURATION_MODIFICATION': {\n        id: BuffId.TURN_DURATION_MODIFICATION,\n        name: 'Passive Turn Duration Modification',\n        stat: UnitStat.turnDurationModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [\n            (buff && buff.value &&\n                buff.value.duration &&\n                buff.value.duration < 0) ?\n                IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n        ],\n    }, 'passive:1:hp': {\n        id: BuffId['passive:1:hp'],\n        name: 'Passive HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:1:atk': {\n        id: BuffId['passive:1:atk'],\n        name: 'Passive Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:1:def': {\n        id: BuffId['passive:1:def'],\n        name: 'Passive Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:1:rec': {\n        id: BuffId['passive:1:rec'],\n        name: 'Passive Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:1:crit': {\n        id: BuffId['passive:1:crit'],\n        name: 'Passive Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    } }, (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:2:hp': {\n            id: BuffId['passive:2:hp'],\n            name: 'Passive Elemental HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:2:atk': {\n            id: BuffId['passive:2:atk'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:2:def': {\n            id: BuffId['passive:2:def'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:2:rec': {\n            id: BuffId['passive:2:rec'],\n            name: 'Passive Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:2:crit': {\n            id: BuffId['passive:2:crit'],\n            name: 'Passive Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let unitType = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    unitType = buff.conditions.targetUnitType || '';\n                }\n            }\n            if (typeof unitType !== 'string' || !unitType) {\n                unitType = 'unknown';\n            }\n            let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n            if (!unitType || !(iconKey in IconId)) {\n                iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:3:hp': {\n            id: BuffId['passive:3:hp'],\n            name: 'Passive Type-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:3:atk': {\n            id: BuffId['passive:3:atk'],\n            name: 'Passive Type-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:3:def': {\n            id: BuffId['passive:3:def'],\n            name: 'Passive Type-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:3:rec': {\n            id: BuffId['passive:3:rec'],\n            name: 'Passive Type-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:3:crit': {\n            id: BuffId['passive:3:crit'],\n            name: 'Passive Type-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:4:poison': {\n        id: BuffId['passive:4:poison'],\n        name: 'Passive Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:4:weak': {\n        id: BuffId['passive:4:weak'],\n        name: 'Passive Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:4:sick': {\n        id: BuffId['passive:4:sick'],\n        name: 'Passive Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:4:injury': {\n        id: BuffId['passive:4:injury'],\n        name: 'Passive Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:4:curse': {\n        id: BuffId['passive:4:curse'],\n        name: 'Passive Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:4:paralysis': {\n        id: BuffId['passive:4:paralysis'],\n        name: 'Passive Paralysis Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:5:fire': {\n        id: BuffId['passive:5:fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:5:water': {\n        id: BuffId['passive:5:water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:5:earth': {\n        id: BuffId['passive:5:earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:5:thunder': {\n        id: BuffId['passive:5:thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:5:light': {\n        id: BuffId['passive:5:light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:5:dark': {\n        id: BuffId['passive:5:dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:5:unknown': {\n        id: BuffId['passive:5:unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:8': {\n        id: BuffId['passive:8'],\n        name: 'Passive Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:9': {\n        id: BuffId['passive:9'],\n        name: 'Passive Gradual BB Gauge Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:10': {\n        id: BuffId['passive:10'],\n        name: 'Passive HC Efficacy',\n        stat: UnitStat.hcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HCREC],\n    }, 'passive:11:atk': {\n        id: BuffId['passive:11:atk'],\n        name: 'Passive HP-Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n    }, 'passive:11:def': {\n        id: BuffId['passive:11:def'],\n        name: 'Passive HP-Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n    }, 'passive:11:rec': {\n        id: BuffId['passive:11:rec'],\n        name: 'Passive HP-Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n    }, 'passive:11:crit': {\n        id: BuffId['passive:11:crit'],\n        name: 'Passive HP-Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n    }, 'passive:12:bc': {\n        id: BuffId['passive:12:bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'passive:12:hc': {\n        id: BuffId['passive:12:hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'passive:12:item': {\n        id: BuffId['passive:12:item'],\n        name: 'Passive Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'passive:12:zel': {\n        id: BuffId['passive:12:zel'],\n        name: 'Passive Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n    }, 'passive:12:karma': {\n        id: BuffId['passive:12:karma'],\n        name: 'Passive Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n    }, 'passive:13': {\n        id: BuffId['passive:13'],\n        name: 'Passive BB Gauge Fill on Enemy Defeat',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:14': {\n        id: BuffId['passive:14'],\n        name: 'Passive Damage Reduction (Chance)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:15': {\n        id: BuffId['passive:15'],\n        name: 'Passive Heal on Enemy Defeat',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:16': {\n        id: BuffId['passive:16'],\n        name: 'Passive Heal on Battle Win',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:17': {\n        id: BuffId['passive:17'],\n        name: 'HP Absorption',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPABS],\n    }, 'passive:19:bc': {\n        id: BuffId['passive:19:bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'passive:19:hc': {\n        id: BuffId['passive:19:hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'passive:19:item': {\n        id: BuffId['passive:19:item'],\n        name: 'Passive Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'passive:19:zel': {\n        id: BuffId['passive:19:zel'],\n        name: 'Passive Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n    }, 'passive:19:karma': {\n        id: BuffId['passive:19:karma'],\n        name: 'Passive Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n    }, 'passive:20:poison': {\n        id: BuffId['passive:20:poison'],\n        name: 'Passive Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'passive:20:weak': {\n        id: BuffId['passive:20:weak'],\n        name: 'Passive Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'passive:20:sick': {\n        id: BuffId['passive:20:sick'],\n        name: 'Passive Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'passive:20:injury': {\n        id: BuffId['passive:20:injury'],\n        name: 'Passive Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'passive:20:curse': {\n        id: BuffId['passive:20:curse'],\n        name: 'Passive Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'passive:20:paralysis': {\n        id: BuffId['passive:20:paralysis'],\n        name: 'Passive Paralysis Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'passive:20:atk down': {\n        id: BuffId['passive:20:atk down'],\n        name: 'Passive Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'passive:20:def down': {\n        id: BuffId['passive:20:def down'],\n        name: 'Passive Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'passive:20:rec down': {\n        id: BuffId['passive:20:rec down'],\n        name: 'Passive Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'passive:20:unknown': {\n        id: BuffId['passive:20:unknown'],\n        name: 'Passive Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'passive:21:atk': {\n        id: BuffId['passive:21:atk'],\n        name: 'Attack Boost for X Turns',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:21:def': {\n        id: BuffId['passive:21:def'],\n        name: 'Defense Boost for X Turns',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:21:rec': {\n        id: BuffId['passive:21:rec'],\n        name: 'Recovery Boost for X Turns',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:21:crit': {\n        id: BuffId['passive:21:crit'],\n        name: 'Critical Hit Rate Boost for X Turns',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:23': {\n        id: BuffId['passive:23'],\n        name: 'Passive BC Fill on Battle Win',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:24': {\n        id: BuffId['passive:24'],\n        name: 'Passive Heal when Attacked',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'passive:25': {\n        id: BuffId['passive:25'],\n        name: 'Passive BC Fill when Attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:26': {\n        id: BuffId['passive:26'],\n        name: 'Passive Damage Counter',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'passive:27': {\n        id: BuffId['passive:27'],\n        name: 'Passive Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n    }, 'UNKNOWN_PROC_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n        name: 'Unknown Proc Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n        name: 'Unknown Proc Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'proc:1': {\n        id: BuffId['proc:1'],\n        name: 'Regular Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:2': {\n        id: BuffId['proc:2'],\n        name: 'Burst Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:3': {\n        id: BuffId['proc:3'],\n        name: 'Active Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:4:flat': {\n        id: BuffId['proc:4:flat'],\n        name: 'Burst BB Gauge Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:4:percent': {\n        id: BuffId['proc:4:percent'],\n        name: 'Burst BB Gauge Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:5:atk': {\n            id: BuffId['proc:5:atk'],\n            name: 'Active Regular/Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:5:def': {\n            id: BuffId['proc:5:def'],\n            name: 'Active Regular/Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:5:rec': {\n            id: BuffId['proc:5:rec'],\n            name: 'Active Regular/Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:5:crit': {\n            id: BuffId['proc:5:crit'],\n            name: 'Active Regular/Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'proc:6:bc': {\n        id: BuffId['proc:6:bc'],\n        name: 'Active Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'proc:6:hc': {\n        id: BuffId['proc:6:hc'],\n        name: 'Active Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'proc:6:item': {\n        id: BuffId['proc:6:item'],\n        name: 'Active Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'proc:7': {\n        id: BuffId['proc:7'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:8:flat': {\n        id: BuffId['proc:8:flat'],\n        name: 'Max HP Boost (Flat Amount)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    }, 'proc:8:percent': {\n        id: BuffId['proc:8:percent'],\n        name: 'Max HP Boost (Percentage)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'DOWN'; // default to down since these are reduction buffs\n            if (buff) {\n                if (buff.value && buff.value > 0) {\n                    polarity = 'UP';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:9:atk': {\n            id: BuffId['proc:9:atk'],\n            name: 'Active Regular/Elemental Attack Reduction',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:9:def': {\n            id: BuffId['proc:9:def'],\n            name: 'Active Regular/Elemental Defense Reduction',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:9:rec': {\n            id: BuffId['proc:9:rec'],\n            name: 'Active Regular/Elemental Recovery Reduction',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:9:unknown': {\n            id: BuffId['proc:9:unknown'],\n            name: 'Active Regular/Elemental Unknown Stat Reduction',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.UNKNOWN],\n        },\n    };\n})()), { 'proc:10:poison': {\n        id: BuffId['proc:10:poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:10:weak': {\n        id: BuffId['proc:10:weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:10:sick': {\n        id: BuffId['proc:10:sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:10:injury': {\n        id: BuffId['proc:10:injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:10:curse': {\n        id: BuffId['proc:10:curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:10:paralysis': {\n        id: BuffId['proc:10:paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:10:atk down': {\n        id: BuffId['proc:10:atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWNBLK],\n    }, 'proc:10:def down': {\n        id: BuffId['proc:10:def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWNBLK],\n    }, 'proc:10:rec down': {\n        id: BuffId['proc:10:rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWNBLK],\n    }, 'proc:10:unknown': {\n        id: BuffId['proc:10:unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:11:poison': {\n        id: BuffId['proc:11:poison'],\n        name: 'Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_POISON],\n    }, 'proc:11:weak': {\n        id: BuffId['proc:11:weak'],\n        name: 'Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_WEAK],\n    }, 'proc:11:sick': {\n        id: BuffId['proc:11:sick'],\n        name: 'Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_SICK],\n    }, 'proc:11:injury': {\n        id: BuffId['proc:11:injury'],\n        name: 'Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_INJURY],\n    }, 'proc:11:curse': {\n        id: BuffId['proc:11:curse'],\n        name: 'Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_CURSE],\n    }, 'proc:11:paralysis': {\n        id: BuffId['proc:11:paralysis'],\n        name: 'Paralysis Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_PARALYSIS],\n    }, 'proc:11:atk down': {\n        id: BuffId['proc:11:atk down'],\n        name: 'Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWN],\n    }, 'proc:11:def down': {\n        id: BuffId['proc:11:def down'],\n        name: 'Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWN],\n    }, 'proc:11:rec down': {\n        id: BuffId['proc:11:rec down'],\n        name: 'Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWN],\n    }, 'proc:11:unknown': {\n        id: BuffId['proc:11:unknown'],\n        name: 'Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.DEBUFF_AILMENT],\n    }, 'proc:12': {\n        id: BuffId['proc:12'],\n        name: 'Instant Revive (Guaranteed)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:13': {\n        id: BuffId['proc:13'],\n        name: 'Random Target Damage',\n        stackType: BuffStackType.Attack,\n        icons: () => [IconId.ATK_RT],\n    }, 'proc:14': {\n        id: BuffId['proc:14'],\n        name: 'Lifesteal Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n    }, 'proc:16:fire': {\n        id: BuffId['proc:16:fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:16:water': {\n        id: BuffId['proc:16:water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:16:earth': {\n        id: BuffId['proc:16:earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:16:thunder': {\n        id: BuffId['proc:16:thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:16:light': {\n        id: BuffId['proc:16:light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:16:dark': {\n        id: BuffId['proc:16:dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:16:all': {\n        id: BuffId['proc:16:all'],\n        name: 'Active Elemental Damage Reduction (All Elements)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:16:unknown': {\n        id: BuffId['proc:16:unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:17:poison': {\n        id: BuffId['proc:17:poison'],\n        name: 'Active Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:17:weak': {\n        id: BuffId['proc:17:weak'],\n        name: 'Active Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:17:sick': {\n        id: BuffId['proc:17:sick'],\n        name: 'Active Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:17:injury': {\n        id: BuffId['proc:17:injury'],\n        name: 'Active Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:17:curse': {\n        id: BuffId['proc:17:curse'],\n        name: 'Active Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:17:paralysis': {\n        id: BuffId['proc:17:paralysis'],\n        name: 'Active Paralysis Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:18': {\n        id: BuffId['proc:18'],\n        name: 'Active Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'proc:19': {\n        id: BuffId['proc:19'],\n        name: 'Active Gradual BB Gauge Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:20': {\n        id: BuffId['proc:20'],\n        name: 'Active BC Fill when attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'proc:22': {\n        id: BuffId['proc:22'],\n        name: 'Active Defense Ignore',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'proc:23': {\n        id: BuffId['proc:23'],\n        name: 'Active Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SPARKUP],\n    }, 'proc:24:atk': {\n        id: BuffId['proc:24:atk'],\n        name: 'Active Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'proc:24:def': {\n        id: BuffId['proc:24:def'],\n        name: 'Active Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'proc:24:rec': {\n        id: BuffId['proc:24:rec'],\n        name: 'Active Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'proc:26': {\n        id: BuffId['proc:26'],\n        name: 'Active Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'proc:27': {\n        id: BuffId['proc:27'],\n        name: 'Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    } }));\n","import { BUFF_METADATA } from './buff-metadata';\n/**\n * @description Get the associated metadata entry for a given buff ID.\n * @param id Buff ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","/**\n * @description Get the effects of a given extra skill.\n * @param skill Extra skill to get the effects of.\n * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForExtraSkill(skill) {\n    return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n}\n","/**\n * @description Get the effects of a given item.\n * @param item Item to get the effects of, if any are present,\n * @returns Effects of the given item if they exist, an empty array otherwise.\n */\nexport default function getEffectsForItem(item) {\n    let result = [];\n    if (item && item.effect) {\n        if (Array.isArray(item.effect)) {\n            result = item.effect;\n        }\n        else if (Array.isArray(item.effect.effect)) {\n            const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n            result = effect.map(e => {\n                // apply target data to each effect\n                const fullProcEffect = Object.assign({}, e);\n                fullProcEffect['target area'] = targetArea;\n                fullProcEffect['target type'] = targetType;\n                return fullProcEffect;\n            });\n        }\n    }\n    return result;\n}\n","/**\n * @description Generate a URL to display the image with the given item thumbnail filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents the thumbnail image for a given item.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getItemImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/item/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given leader skill.\n * @param skill Leader skill to get the effects of.\n * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForLeaderSkill(skill) {\n    return skill && Array.isArray(skill.effects) ? skill.effects : [];\n}\n","/**\n * @description Generate the file names for each of the image type for a given unit ID.\n * @param id Unit ID to use to generate the file names.\n * @param suffix Optional parameter that's useful for things like alternate art.\n * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n */\nexport default function getUnitImageFileNames(id, suffix = '') {\n    const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n    return {\n        spritesheet: `unit_anime_${fileNameSuffix}`,\n        battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n        guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n        fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n    };\n}\n","/**\n * @description Generate a URL to display the image with the given unit filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents an image for a given unit.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getUnitImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given SP Enhancement Entry.\n * @param entry SP Enhancement Entry to get the effects of.\n * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n */\nexport default function getEffectsForSpEnhancement(entry) {\n    const result = [];\n    if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n        const effectWrappers = entry.skill.effects;\n        effectWrappers.forEach(effectWrapper => {\n            Object.keys(effectWrapper).forEach(spType => {\n                const originalEffect = effectWrapper[spType];\n                const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                result.push(unwrappedEffect);\n            });\n        });\n    }\n    return result;\n}\n","import { SpCategoryName } from '../datamine-types';\n/**\n * @description Get the associated category name with a given category ID.\n * @param categoryId Category ID to get the name of.\n * @returns Name of the given category ID or the string 'Unknown'.\n */\nexport default function getSpCategoryName(categoryId) {\n    let result;\n    const numericalCategoryId = +categoryId;\n    switch (numericalCategoryId) {\n        case 1:\n            result = SpCategoryName['Parameter Boost'];\n            break;\n        case 2:\n            result = SpCategoryName.Spark;\n            break;\n        case 3:\n            result = SpCategoryName['Critical Hits'];\n            break;\n        case 4:\n            result = SpCategoryName['Attack Boost'];\n            break;\n        case 5:\n            result = SpCategoryName['BB Gauge'];\n            break;\n        case 6:\n            result = SpCategoryName['HP Recovery'];\n            break;\n        case 7:\n            result = SpCategoryName.Drops;\n            break;\n        case 8:\n            result = SpCategoryName['Ailment Resistance'];\n            break;\n        case 9:\n            result = SpCategoryName['Ailment Infliction'];\n            break;\n        case 10:\n            result = SpCategoryName['Damage Reduction'];\n            break;\n        case 11:\n            result = SpCategoryName.Special;\n            break;\n        default:\n            result = SpCategoryName.Unknown;\n            break;\n    }\n    return result;\n}\n","/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding character code for a given index.\n * It expects an index between 0 and 61 inclusive; will return an empty string if\n * the given value is outside of the range.\n * @param index Index of an SP entry in a given skills array.\n * @returns Corresponding single alphanumeric character to the given index\n * or an empty string if the index is invalid.\n */\nexport default function spIndexToCode(index) {\n    let result = '';\n    let correspondingCharacterCode = -1;\n    if (Number.isInteger(index)) {\n        if (index >= 0 && index <= 25) { // A-Z\n            correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (index >= 26 && index <= 51) { // a-z\n            correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n        }\n        else if (index >= 52 && index <= 61) { // 0-9\n            correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n        }\n    }\n    if (correspondingCharacterCode !== -1) {\n        result = String.fromCharCode(correspondingCharacterCode);\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding index for a given character code.\n * It expects an alphanumeric character and will return -1 otherwise.\n * @param code Character code an SP entry in a given skills array.\n * @returns Corresponding index to the given character or -1 if the\n * character is invalid.\n */\nexport default function spCodeToIndex(code) {\n    let result = -1;\n    let characterCodeOffset = -1;\n    if (!!code && typeof code === 'string' && code.length === 1) {\n        if (code >= 'A' && code <= 'Z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (code >= 'a' && code <= 'z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n        }\n        else if (code >= '0' && code <= '9') {\n            characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n        }\n    }\n    if (characterCodeOffset !== -1) {\n        result = code.charCodeAt(0) - characterCodeOffset;\n    }\n    return result;\n}\n","/**\n * @description Extract the ID of a string in the format of `number@actualId`. If there\n * is no value after the @ character or if no @ character is present, the original ID is returned.\n * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n * @param id Original SP Enhancement Entry ID.\n * @returns The ID of a string in the format of `number@actualId`, or the original input if\n * there is no @ character or no value after the @ character.\n */\nexport default function getSpEntryId(id) {\n    return (typeof id === 'string' && id.split('@')[1]) || id;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n * @param id SP Enhancement entry ID.\n * @param entries Collection of SP Enhancement entries to search in.\n * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n */\nexport default function getSpEntryWithId(id, entries) {\n    const spId = getSpEntryId(id);\n    return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n * @param entry SP Entry to get dependencies for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n */\nexport default function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependencies = [];\n    if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n        const dependencyId = getSpEntryId(entry.dependency);\n        const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n        if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n            addedEntries.add(dependencyEntry);\n            const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n            dependencies = [dependencyEntry].concat(subDependencies);\n        }\n    }\n    return dependencies;\n}\n","/**\n * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n * @param entry SP Entry to get dependents for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n */\nexport default function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependents = [];\n    if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n        const entryId = entry.id;\n        dependents = allEntries\n            .filter(s => {\n            return s.dependency &&\n                s.dependency.includes(entryId) &&\n                !addedEntries.has(s);\n        });\n        dependents.forEach(dependent => {\n            addedEntries.add(dependent);\n            const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n            dependents = dependents.concat(subDependents);\n        });\n    }\n    return dependents;\n}\n","/* NOTE: this file is automatically generated; do not edit this file */\nexport default '0.7.0';\n"]}