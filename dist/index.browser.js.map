{"version":3,"sources":["index.browser.js","bursts/getLevelEntryForBurst.js","bursts/getEffectsForBurst.js","buffs/getEffectId.js","buffs/constants.js","buffs/effect-metadata.js","buffs/getMetadataForProc.js","buffs/isAttackingProcId.js","bursts/getExtraAttackDamageFramesEntry.js","buffs/getMetadataForPassive.js","buffs/getNameForProc.js","buffs/getNameForPassive.js","buffs/isProcEffect.js","buffs/isPassiveEffect.js","datamine-types.js","buffs/combineEffectsAndDamageFrames.js","buffs/getEffectName.js","buffs/parsers/buff-types.js","buffs/parsers/_helpers.js","buffs/parsers/proc-effect-mapping.js","buffs/parsers/convertProcEffectToBuffs.js","buffs/parsers/conditional-effect-mapping.js","buffs/parsers/convertConditionalEffectToBuffs.js","buffs/parsers/passive-effect-mapping.js","buffs/parsers/convertPassiveEffectToBuffs.js","buffs/parsers/buff-metadata.js","buffs/parsers/getMetadataForBuff.js","extra-skills/getEffectsForExtraSkill.js","items/getEffectsForItem.js","items/getItemImageUrl.js","leader-skills/getEffectsForLeaderSkill.js","units/getUnitImageFileNames.js","units/getUnitImageUrl.js","sp-enhancements/getEffectsForSpEnhancement.js","sp-enhancements/getSpCategoryName.js","sp-enhancements/_constants.js","sp-enhancements/spIndexToCode.js","sp-enhancements/spCodeToIndex.js","sp-enhancements/getSpEntryId.js","sp-enhancements/getSpEntryWithId.js","sp-enhancements/getAllDependenciesForSpEntry.js","sp-enhancements/getAllEntriesThatDependOnSpEntry.js","version.js"],"names":["bfmtUtilities","exports","getLevelEntryForBurst","burst","level","burstEffectsByLevel","Array","isArray","levels","levelIndex","isNaN","length","getEffectsForBurst","levelEntry","effects","getEffectId","effect","resultId","KNOWN_PROC_ID","KNOWN_PASSIVE_ID","KNOWN_CONDITIONAL_ID","constants","Object","freeze","__proto__","ProcBuffType","PASSIVE_METADATA","PROC_METADATA","getMetadataForProc","id","metadata","hasOwnProperty","call","isAttackingProcId","metadataEntry","Type","Attack","getExtraAttackDamageFramesEntry","damageFrames","effectDelay","inputFrames","relevantFrames","filter","frame","procId","BurstHeal","unifiedFrames","reduce","acc","frameEntry","index","keepFirstFrame","numFrames","damageDistribution","frameTimes","frameIndex","push","damage","time","resultDamageFramesEntry","hits","sort","a","b","forEach","getMetadataForPassive","getNameForProc","Name","getNameForPassive","isProcEffect","isPassiveEffect","Ailment","ArenaCondition","MoveType","TargetArea","TargetAreaShorthand","TargetType","SpPassiveType","SphereTypeName","SphereTypeId","SpCategoryName","SpCategoryId","UnitAnimationKey","UnitElement","UnitGender","UnitGettingType","UnitKind","UnitType","ItemType","MimicUnitIds","MimicMonsterGroupMapping","Mimic","BatMimic","DragonMimic","MetalMimic","datamineTypes","combineEffectsAndDamageFrames","combinedEntries","map","i","correspondingFrameEntry","delay","frames","targetArea","Random","targetType","getEffectName","resultName","effectId","passive","proc","BuffStackType","BuffSource","BuffConditionElement","UnitStat","IconId","BuffId","createSourceEntryFromContext","context","source","sourceId","createSourcesFromContext","resultArray","previousSources","slice","unshift","processExtraSkillConditions","conditions","aggregate","units","Set","items","sphereTypes","unknowns","condition","add","item","unit","type_id","condition_id","result","entries","entry","size","from","getPassiveTargetData","isLeaderSkillEffect","LeaderSkill","sp_type","EnhancePassive","isPartyEffect","Party","Self","Aoe","Single","getProcTargetData","parseNumberOrDefault","value","defaultValue","createUnknownParamsValue","params","startIndex","hasValue","buffSourceIsBurstType","BraveBurst","SuperBraveBurst","UltimateBraveBurst","BondedBraveBurst","BondedSuperBraveBurst","DualBraveBurst","includes","createUnknownParamsEntryFromExtraParams","extraParams","injectionContext","unknownParams","createNoParamsEntry","originalId","sources","NO_PARAMS_SPECIFIED","mapping","getProcEffectToBuffMapping","reload","Map","setMapping","UNKNOWN_PROC_PARAM_EFFECT_KEY","ELEMENT_MAPPING","All","Fire","Water","Earth","Thunder","Light","Dark","NON_ZERO_ELEMENT_MAPPING","AILMENT_MAPPING","Poison","Weak","Sick","Injury","Curse","Paralysis","AttackReduction","DefenseReduction","RecoveryReduction","retrieveCommonInfoForEffects","targetData","splitEffectParams","split","splitEffectWithUnknownProcParamsProperty","rawParams","createUnknownParamsEntry","assign","UNKNOWN_PROC_BUFF_PARAMS","createTurnDurationEntry","buffs","duration","TURN_DURATION_MODIFICATION","handlePostParse","results","isTurnDurationBuff","turnDuration","getAttackInformationFromContext","distribution","parseProcWithSingleNumericalParameterAndTurnDuration","effectValueKey","effectTurnDurationKey","parseParamValue","rawValue","buffId","rawTurnDuration","parseProcWithNumericalValueRangeAndChanceAndTurnDuration","effectKeyLow","effectKeyHigh","effectKeyChance","buffKeyLow","buffKeyHigh","generateConditions","valueLow","valueHigh","chance","rawValueLow","rawValueHigh","rawChance","hasAnyValues","set","flatAtk","filteredValue","key","keys","healLow","healHigh","recX","recY","rec","hasAnyHealValues","flatFill","percentFill","rawFlatFill","rawPercentFill","element","atk","def","crit","coreStatProperties","rawElement","Unknown","effectElement","statType","effectKey","find","k","startsWith","concat","prop","hasAnyStats","some","statKey","buffEntry","targetElements","bc","hc","dropRateProperties","hasAnyRates","recoveredHpPercent","rawRecoveredHp","flatHpBoost","percentHpBoost","rawFlatBoost","rawPercentBoost","STAT_TYPE_MAPPING","statReductionEntries","statType1","value1","procChance1","statType2","value2","procChance2","rawStatType","rawProcChance","stat","buffKey","curedAilments","splitParams","knownParams","p","param","values","ailment","inflictedAilments","numParams","ailmentValue","ailmentType","reviveToHp","rawReviveToHp","rawHits","mitigation","rawMitigation","mitigationKey","e","AILMENTS_ORDER","resistances","poison","weak","sick","injury","curse","paralysis","rawDuration","ailmentKeysInEffect","correspondingKey","whenAttacked","coreStatPropertyMapping","effectToCoreStatMapping","attack","defense","recovery","hp","stats","convertedStat","rawConvertedStat","hitIncreasePerHit","extraHitDamage","attackElements","element1","element2","element3","elements","validElements","inputElement","sanitizedElement","flatDrainLow","flatDrainHigh","percentDrainLow","percentDrainHigh","rawFlatLow","rawFlatHigh","rawPercentLow","rawPercentHigh","drainLow","drainHigh","summonGroup","summonId","rawPositionX","rawPositionY","positionX","positionY","effectAilmentsCured","unknownAilmentCount","rawElementsMitigated","rawModLow","rawModHigh","rawFlatAtk","overdriveFill","rawOverdriveFill","damageParams","affectsElement","unitIndex","rawAffectsElement","rawUnitIndex","filteredDamageParams","bb","sbb","ubb","rawBb","rawSbb","rawUbb","type","rawHpLow","rawHpHigh","hpLow","hpHigh","proportionalMode","rawMaxAttackValue","rawProportionalMode","rawBasePercentHpLow","rawBasePercentHpHigh","rawCurrentPercentHpLow","rawCurrentPercentHpHigh","rawFixedDamage","rawIsLethal","basePercentHpLow","basePercentHpHigh","currentPercentHpLow","currentPercentHpHigh","fixedDamage","isLethal","createAttackOfType","valueProperties","rawDamageLow","rawDamageHigh","reflectedDamageLow","reflectedDamageHigh","hasAnyRangeValues","inflictedReductions","debuffTurnDuration","reductionValue","reductionValueKey","chanceKey","inflictionChances","damageBoost","rawRecoverHp","bcBaseResist","bcBuffResist","hcBaseResist","hcBuffResist","rawBcBaseResist","rawBcBuffResist","rawHcBaseResist","rawHcBuffResist","damageIncrease","rawDamageIncrease","damageAbsorption","rawHp","rawDefense","rawDamageAbsorption","maxIncreases","recoveredHp","onGuard","elementToMatch","maxExtraActions","rawMaxExtraActions","rawExpBoost","rawDurationInMinutes","expBoost","durationInMinutes","rawPercentHp","percentHp","sparkDamage","rawSparkDamage","ResistType","rawBaseCritDamageResist","rawBuffCritDamageResist","rawBaseElementDamageResist","rawBuffElementDamageResist","rawBaseSparkDamageResist","rawBuffSparkDamageResist","resistType","CriticalDamage","base","buff","ElementDamage","SparkDamage","baseKey","weakerElementMapping","getOpposingWeakerElement","sourceElement","rawTargetElementsParam","extraTargetElement","defaultConversionFunction","UNKNOWN_PROC_EFFECT_ID","convertProcEffectToBuffs","TypeError","conversionFunction","reloadMapping","get","getConditionalEffectToBuffMapping","UNKNOWN_CONDITIONAL_BUFF_PARAMS","getDefaultTargetData","parseConditionalWithSingleNumericalParameter","returnBuffWithValueOfZero","parseConditionalWithOnlyBaseAndBuffResistanceParameters","baseResistanceBuffId","buffResistanceBuffId","rawBaseResist","rawBuffResist","baseResist","buffResist","parseBarrierConditionalBuff","parsedElement","rawHealLow","rawHealHigh","rawAddedRec","addedRec","rawReductionValue","rawDebuffTurns","rawHpRecover","hpRecover","rawFillLow","rawFillHigh","fillLow","fillHigh","rawDebuffTurnDuration","rawAttack","rawCritRate","rawRecovery","makeBaseBuff","rawElementValue","UNKNOWN_CONDITIONAL_EFFECT_ID","convertConditionalEffectToBuffs","getPassiveEffectToBuffMapping","convertPassiveEffectToBuffs","UNKNOWN_PASSIVE_PARAM_EFFECT_KEY","X","OmniParadigm","TYPE_MAPPING","Lord","Anima","Breaker","Guardian","Oracle","Rex","TARGET_TYPE_MAPPING","Enemy","TARGET_AREA_MAPPING","STATS_ORDER","DROP_TYPES_ORDER","conditionInfo","convertConditionalEffectToBuffsWithInjectionContext","convertProcEffectToBuffsWithInjectionContext","splitEffectWithUnknownPassiveParamsProperty","UNKNOWN_PASSIVE_BUFF_PARAMS","ThresholdType","parseThresholdValuesFromParamsProperty","rawThreshold","rawRequireAboveFlag","thresholdType","threshold","requireAbove","parseThresholdValuesFromEffect","suffix","fallbackEffectKey","DamageTaken","DamageDealt","BcReceived","HcReceived","SparkCount","getThresholdConditions","Hp","hpGreaterThanOrEqualTo","hpLessThanOrEqualTo","Bb","bbGaugeGreaterThanOrEqualTo","bbGaugeLessThanOrEqualTo","damageTakenExceeds","damageDealtExceeds","bcReceivedExceeds","hcReceivedExceeds","sparkCountExceeds","ChanceGuard","onGuardChance","ChanceCrit","onCriticalHitChance","ChanceOverDrive","onOverdriveChance","parsePassiveWithSingleNumericalParameter","typedEffect","parsePassiveWithNumericalValueRangeAndChance","defaultEffectChance","generateBaseConditions","rawLowValue","rawHighValue","parseConditionalPassiveWithSingleNumericalCondition","triggeredBuffs","maxTriggerCount","thresholdInfo","thresholdConditions","parseConditionalBcFillWithSingleNumericalCondition","flatFillBuffId","percentFillBuffId","flatFillEffectKey","elementValue","createBaseStatObject","unitType","targetUnitType","elem","dropRates","zel","karma","dropType","onEnemyDefeat","damageReduction","rawReduction","onBattleWin","sparkDamageBoost","rawSparkDamageBoost","onNormalAttack","additionalActions","damageModifier","rawAdditionalActions","rawDamageModifier","minimumElements","minimumUniqueElements","GENDER_MAPPING","Other","Male","Female","gender","rawGender","targetGender","availableStats","baseValue","addedValue","rawBaseCritChanceResist","rawBuffCritChanceResist","CriticalHitRate","onCriticalHit","triggerOnBb","triggerOnSbb","triggerOnUbb","rawProcIds","rawTargetTypes","rawTargetAreas","rawStartFrames","rawTriggerOnBb","rawTriggerOnSbb","rawTriggerOnUbb","allProcIds","allProcParams","allTargetTypes","allTargetAreas","allStartFrames","FRAME_IN_MS","replace","startFrame","effectDelayInMs","toFixed","procEffect","procBuffs","triggeredEffects","addBuffOfBurstType","burstType","maxCount","chanceLow","chanceHigh","rawMaxCount","rawChanceLow","rawChanceHigh","rawHpAtTurnStart","rawBcAtTurnStart","hpAtTurnStart","bcAtTurnStart","requiredAilments","attackBoost","rawRequiredAilments","rawBoost","targetHasAnyOfGivenAilments","firstUnknownValue","boosts","BOOST_ORDER","boost","turnCount","scaleLowToHigh","minValue","maxValue","startingValue","endingValue","addedPassiveId","addedPassiveParams","addedPassiveAsEffect","join","addedPassiveContext","addedBuffs","UNKNOWN_PASSIVE_EFFECT_ID","BUFF_METADATA","name","turnDurationModification","stackType","Passive","icons","TURN_DURATION_DOWN","TURN_DURATION_UP","UNKNOWN","BUFF_HPDOWN","BUFF_HPUP","BUFF_ATKDOWN","BUFF_ATKUP","BUFF_DEFDOWN","BUFF_DEFUP","BUFF_RECDOWN","BUFF_RECUP","BUFF_CRTRATEDOWN","BUFF_CRTRATEUP","createIconGetterForStat","polarity","iconKey","toUpperCase","poisonResist","BUFF_POISONBLK","weakResist","BUFF_WEAKBLK","sickResist","BUFF_SICKBLK","injuryResist","BUFF_INJURYBLK","curseResist","BUFF_CURSEBLK","paralysisResist","BUFF_PARALYSISBLK","fireMitigation","BUFF_FIREDMGDOWN","waterMitigation","BUFF_WATERDMGDOWN","earthMitigation","BUFF_EARTHDMGDOWN","thunderMitigation","BUFF_THUNDERDMGDOWN","lightMitigation","BUFF_LIGHTDMGDOWN","darkMitigation","BUFF_DARKDMGDOWN","BUFF_ELEMENTDMGDOWN","BUFF_DAMAGECUT","bbGauge","BUFF_BBREC","hcEfficacy","BUFF_HCREC","BUFF_HPTHRESHATKDOWN","BUFF_HPTHRESHATKUP","BUFF_HPTHRESHDEFDOWN","BUFF_HPTHRESHDEFUP","BUFF_HPTHRESHRECDOWN","BUFF_HPTHRESHRECUP","BUFF_HPTHRESHCRTRATEDOWN","BUFF_HPTHRESHCRTRATEUP","bcDropRate","BUFF_HPTHRESHBCDOWN","BUFF_HPTHRESHBCDROP","hcDropRate","BUFF_HPTHRESHHCDOWN","BUFF_HPTHRESHHCDROP","itemDropRate","BUFF_HPTHRESHITEMDOWN","BUFF_HPTHRESHITEMDROP","zelDropRate","BUFF_HPTHRESHZELDOWN","BUFF_HPTHRESHZELDROP","karmaDropRate","BUFF_HPTHRESHKARMADOWN","BUFF_HPTHRESHKARMADROP","hpRecovery","BUFF_HPREC","BUFF_HPABS","BUFF_BCDOWN","BUFF_BCDROP","BUFF_HCDOWN","BUFF_HCDROP","BUFF_ITEMDOWN","BUFF_ITEMDROP","BUFF_ZELDOWN","BUFF_ZELDROP","BUFF_KARMADOWN","BUFF_KARMADROP","poisonInflict","BUFF_ADDPOISON","weakInflict","BUFF_ADDWEAK","sickInflict","BUFF_ADDSICK","injuryInflict","BUFF_ADDINJURY","curseInflict","BUFF_ADDCURSE","paralysisInflict","BUFF_ADDPARA","atkDownInflict","BUFF_ADDATKDOWN","defDownInflict","BUFF_ADDDEFDOWN","recDownInflict","BUFF_ADDRECDOWN","BUFF_ADDAILMENT","ConditionalTimed","BUFF_BEENATK_HPREC","BUFF_DAMAGEBB","damageReflect","BUFF_COUNTERDAMAGE","targetingModification","BUFF_REPENEATT","BUFF_GETENEATT","BUFF_HPTHRESHREPENEATT","BUFF_HPTHRESHGETENEATT","defenseIgnore","BUFF_IGNOREDEF","BUFF_BBGAUGETHRESHATKDOWN","BUFF_BBGAUGETHRESHATKUP","BUFF_BBGAUGETHRESHDEFDOWN","BUFF_BBGAUGETHRESHDEFUP","BUFF_BBGAUGETHRESHRECDOWN","BUFF_BBGAUGETHRESHRECUP","BUFF_BBGAUGETHRESHCRTRATEDOWN","BUFF_BBGAUGETHRESHCRTRATEUP","BUFF_SPARKDOWN","BUFF_SPARKUP","BUFF_SPARKBC","BUFF_SPARKHC","BUFF_SPARKITEM","BUFF_SPARKZEL","BUFF_SPARKKARMA","bcEfficacy","BUFF_BBFILL","criticalDamage","BUFF_CRTUP","extraAction","BUFF_DBLSTRIKE","hitCountModification","BUFF_HITUP","BUFF_CONVERTATKDOWN","BUFF_CONVERTATKUP","BUFF_CONVERTDEFDOWN","BUFF_CONVERTDEFUP","BUFF_CONVERTRECDOWN","BUFF_CONVERTRECUP","BUFF_UNIQUEELEMENTHPDOWN","BUFF_UNIQUEELEMENTHPUP","BUFF_UNIQUEELEMENTATKDOWN","BUFF_UNIQUEELEMENTATKUP","BUFF_UNIQUEELEMENTDEFDOWN","BUFF_UNIQUEELEMENTDEFUP","BUFF_UNIQUEELEMENTRECDOWN","BUFF_UNIQUEELEMENTRECUP","BUFF_UNIQUEELEMENTCRTRATEDOWN","BUFF_UNIQUEELEMENTCRTRATEUP","reduceDamageToOne","BUFF_DAMAGECUTTOONE","criticalDamageMitigation","BUFF_CRTDOWN","BUFF_HPSCALEDATKDOWN","BUFF_HPSCALEDATKUP","BUFF_HPSCALEDDEFDOWN","BUFF_HPSCALEDDEFUP","BUFF_HPSCALEDRECDOWN","BUFF_HPSCALEDRECUP","BUFF_SPARKBBUP","bcCostReduction","BUFF_BBCOST_REDUCTION","bbGaugeConsumptionReduction","fireElementalDamage","BUFF_FIREDMGUP","waterElementalDamage","BUFF_WATERDMGUP","earthElementalDamage","BUFF_EARTHDMGUP","thunderElementalDamage","BUFF_THUNDERDMGUP","lightElementalDamage","BUFF_LIGHTDMGUP","darkElementalDamage","BUFF_DARKDMGUP","BUFF_ELEMENTDMGUP","elementalWeaknessDamageMitigation","BUFF_ELEMENTDOWN","CONDITIONALBUFF_HPTHRESH","BUFF_GUARDCUT","BUFF_GUARDBBUP","bbAtk","BUFF_BBATKUP","BUFF_SBBATKUP","BUFF_UBBATKUP","BUFF_ADDTO_BB","BUFF_ADDTO_SBB","BUFF_ADDTO_UBB","koResistance","BUFF_KOBLOCK","odGauge","BUFF_OVERDRIVEUP","poisonCounter","BUFF_POISONCOUNTER","weakCounter","BUFF_WEAKCOUNTER","sickCounter","BUFF_SICKCOUNTER","injuryCounter","BUFF_INJCONTER","curseCounter","BUFF_CURSECOUNTER","paralysisCounter","BUFF_PARALYCOUNTER","effectOccurrenceShift","Singleton","BUFF_HPTURNSTART","BUFF_BCTURNSTART","atkDownResist","BUFF_RESISTATKDOWN","defDownResist","BUFF_RESISTDEFDOWN","recDownResist","BUFF_RESISTRECDOWN","ailmentAttackBoost","BUFF_AILDMGUP","BUFF_SPARKDMGUP","sparkDamageMitigation","BUFF_SPARKDMGDOWN","CONDITIONALBUFF_DAMAGETAKENTHRESH","CONDITIONALBUFF_DAMAGEDEALTTHRESH","CONDITIONALBUFF_BCRECEIVEDTHRESH","CONDITIONALBUFF_HCRECEIVEDTHRESH","CONDITIONALBUFF_SPARKCOUNTTHRESH","CONDITIONALBUFF_GUARD","CONDITIONALBUFF_CRIT","defenseIgnoreMitigation","BUFF_IGNOREDEFBLK","elementModification","BUFF_ADDFIRE","BUFF_ADDWATER","BUFF_ADDEARTH","BUFF_ADDTHUNDER","BUFF_ADDLIGHT","BUFF_ADDDARK","BUFF_ADDELEMENT","aoeNormalAttack","BUFF_AOEATK","expModification","BUFF_PLAYEREXP","BUFF_SPARKCRTACTIVATED","BUFF_SPARK_HPREC","icon","BUFF_TURNSCALEDATKUP","buffValue","BUFF_TURNSCALEDATKDOWN","BUFF_TURNSCALEDDEFUP","BUFF_TURNSCALEDDEFDOWN","BUFF_TURNSCALEDRECUP","BUFF_TURNSCALEDRECDOWN","CONDITIONALBUFF_OD","BUFF_ADDTO_LS","ATK_ST","ATK_AOE","Burst","Active","hasElement","BUFF_KOBLK","BUFF_AILMENTBLK","DEBUFF_POISON","DEBUFF_WEAK","DEBUFF_SICK","DEBUFF_INJURY","DEBUFF_CURSE","DEBUFF_PARALYSIS","DEBUFF_AILMENT","ATK_RT","ATK_ST_HPREC","ATK_AOE_HPREC","ATK_ST_PROPORTIONAL","ATK_AOE_PROPORTIONAL","ATK_ST_FIXED","ATK_AOE_FIXED","ATK_ST_MULTIELEMENT","ATK_AOE_MULTIELEMENT","BUFF_SHIFTFIRE","BUFF_SHIFTWATER","BUFF_SHIFTEARTH","BUFF_SHIFTTHUNDER","BUFF_SHIFTLIGHT","BUFF_SHIFTDARK","BUFF_SHIFTELEMENT","buffStabilityModification","BUFF_REMOVEBUFF","BUFF_BBFILLDOWN","BUFF_DISABLELS","BUFF_SUMMONUNIT","ATK_ST_SACRIFICIAL","ATK_AOE_SACRIFICIAL","BUFF_KO","BUFF_ODFILLBOOST","damageOverTime","BUFF_TURNDMG","ATK_ST_HPSCALED","ATK_AOE_HPSCALED","ATK_ST_PIERCING_PROPORTIONAL","ATK_AOE_PIERCING_PROPORTIONAL","ATK_ST_PIERCING_FIXED","ATK_AOE_PIERCING_FIXED","BUFF_BBATKDOWN","BUFF_SBBATKDOWN","BUFF_UBBATKDOWN","ATK_ST_BBGAUGESCALED","ATK_AOE_BBGAUGESCALED","barrier","BUFF_FIRESHIELD","BUFF_WATERSHIELD","BUFF_EARTHSHIELD","BUFF_THUNDERSHIELD","BUFF_LIGHTSHIELD","BUFF_DARKSHIELD","BUFF_ELEMENTSHIELD","ATK_ST_USAGESCALED","ATK_AOE_USAGESCALED","ATK_ST_ELEMENTSCALED","ATK_AOE_ELEMENTSCALED","BUFF_ATKDOWNLOCK","BUFF_SELFATKUP","BUFF_DEFDOWNLOCK","BUFF_SELFDEFUP","BUFF_RECDOWNLOCK","BUFF_SELFRECUP","BUFF_CRTRATEDOWNLOCK","BUFF_SELFCRTRATEUP","BUFF_SPARKDMGDOWN2","BUFF_SPARKDMGUP2","BUFF_SELFCONVERTATKDOWN","BUFF_SELFCONVERTATKUP","BUFF_SELFCONVERTDEFDOWN","BUFF_SELFCONVERTDEFUP","BUFF_SELFCONVERTRECDOWN","BUFF_SELFCONVERTRECUP","BUFF_SELFHPUP","BUFF_NULLSPHERE","BUFF_NULLES","elementalIconKeys","atkDownCounter","BUFF_PROB_ATKREDUC","SG_BUFF_STEALTH","shield","SG_BUFF_ALL","SG_BUFF_FIRE","SG_BUFF_WATER","SG_BUFF_EARTH","SG_BUFF_THUNDER","SG_BUFF_LIGHT","SG_BUFF_DARK","SG_BUFF_UNKNOWN","getMetadataForBuff","index$1","index$2","parsers","getEffectsForExtraSkill","skill","index$3","getEffectsForItem","target_area","target_type","fullProcEffect","getItemImageUrl","baseContentUrl","fileName","index$4","getEffectsForLeaderSkill","index$5","getUnitImageFileNames","fileNameSuffix","spritesheet","battleAvatar","guideAvatar","fullIllustration","getUnitImageUrl","index$6","getEffectsForSpEnhancement","effectWrappers","effectWrapper","spType","originalEffect","unwrappedEffect","getSpCategoryName","categoryId","numericalCategoryId","Spark","Drops","Special","CHARACTER_CODE_FOR_UPPERCASE_A","charCodeAt","CHARACTER_CODE_FOR_LOWERCASE_A","CHARACTER_CODE_FOR_NUMBER_0","spIndexToCode","correspondingCharacterCode","Number","isInteger","String","fromCharCode","spCodeToIndex","code","characterCodeOffset","getSpEntryId","getSpEntryWithId","spId","getAllDependenciesForSpEntry","allEntries","addedEntries","dependencies","dependency","dependencyId","dependencyEntry","s","has","subDependencies","getAllEntriesThatDependOnSpEntry","dependents","entryId","dependent","subDependents","index$7","version","bursts","extraSkills","leaderSkills","spEnhancements"],"mappings":"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","file":"index.browser.js","sourcesContent":["var bfmtUtilities = (function (exports) {\n    'use strict';\n\n    /**\n     * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get level entry from.\n     * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n     * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n     */\n    function getLevelEntryForBurst(burst, level) {\n        const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n        let levelIndex;\n        if (level !== null && !isNaN(level)) {\n            // 1-indexed\n            levelIndex = (+level - 1);\n        }\n        else {\n            // default to last entry in burst\n            levelIndex = burstEffectsByLevel.length - 1;\n        }\n        return burstEffectsByLevel[levelIndex];\n    }\n\n    /**\n     * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get effects from.\n     * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n     * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n     */\n    function getEffectsForBurst(burst, level) {\n        const levelEntry = getLevelEntryForBurst(burst, level);\n        return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n    }\n\n    /**\n     * @description Get the proc/passive ID of a given object.\n     * @param effect Object to get the effect ID from.\n     * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectId(effect) {\n        let resultId = '';\n        if (effect) {\n            resultId = effect['proc id'] || effect['unknown proc id'] ||\n                effect['passive id'] || effect['unknown passive id'] || '';\n        }\n        return resultId;\n    }\n\n    var KNOWN_PROC_ID;\n    (function (KNOWN_PROC_ID) {\n        KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n        KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    })(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\n    var KNOWN_PASSIVE_ID;\n    (function (KNOWN_PASSIVE_ID) {\n        KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n        KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    })(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n    var KNOWN_CONDITIONAL_ID;\n    (function (KNOWN_CONDITIONAL_ID) {\n        KNOWN_CONDITIONAL_ID[\"Unknown\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n    })(KNOWN_CONDITIONAL_ID || (KNOWN_CONDITIONAL_ID = {}));\n\n    var constants = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get KNOWN_PROC_ID () { return KNOWN_PROC_ID; },\n        get KNOWN_PASSIVE_ID () { return KNOWN_PASSIVE_ID; },\n        get KNOWN_CONDITIONAL_ID () { return KNOWN_CONDITIONAL_ID; }\n    });\n\n    var ProcBuffType;\n    (function (ProcBuffType) {\n        ProcBuffType[\"Attack\"] = \"Attack\";\n    })(ProcBuffType || (ProcBuffType = {}));\n    /* eslint-disable */\n    /**\n     * @ignore\n     */\n    const PASSIVE_METADATA = Object.freeze({\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Parameter Boost\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Elemental Parameter Boost\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Type-Based Parameter Boost\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"Status Negation\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Damage Reduction\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Gradual BB Gauge Boost\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"HC Efficacy\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"HP-Conditional Parameter Boost\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"HP-Conditional Drop Rate Boost\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"BC Fill on Enemy Defeat\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Damage Reduction (Chance)\"\n        },\n        \"15\": {\n            \"ID\": \"15\",\n            \"Name\": \"Heal on Enemy Defeat\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Heal on Battle Victory\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"HP Absorption\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Drop Rate Boost\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"Status Infliction\"\n        },\n        \"21\": {\n            \"ID\": \"21\",\n            \"Name\": \"Parameter Boost for First X Turns\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"BC Fill on Battle Victory\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Heal when Attacked (Chance)\"\n        },\n        \"25\": {\n            \"ID\": \"25\",\n            \"Name\": \"BC Fill when Hit (Chance)\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Damage Counter (Chance)\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Increased Target Chance\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Decreased Target Chance\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Defense Ignore (Chance)\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"BB Conditional Parameter Boost\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"BC Efficacy\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Heal over Time\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"Critical Damage Boost\"\n        },\n        \"35\": {\n            \"ID\": \"35\",\n            \"Name\": \"BC Fill when Normal Attacking\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Extra Action\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Hit Count Boost\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Parameter Conversion\"\n        },\n        \"41\": {\n            \"ID\": \"41\",\n            \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"Gender Parameter Boost\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Damage Reduction to 1\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Flat Parameter Boost\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"Critical Damage Negation\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"BC Fill on Spark\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"BC Cost Reduction\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"BB Gauge Consumption Reduction\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Elemental Damage Boost\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Conditional Effect based on HP Threshold\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Damage Reduction when Guarding\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BC Fill when Attacked when Guarding\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BC Fill on Guard\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Elemental Damage Reduction for first X Turns\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"BB Atk Boost\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"BC Fill on Critical\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Add buff to Brave Burst\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"OD Gauge Fill Rate Boost\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"Status Counter\"\n        },\n        \"72\": {\n            \"ID\": \"72\",\n            \"Name\": \"Turn End Effects Activate at Turn Start\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\"\n        },\n        \"74\": {\n            \"ID\": \"74\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Spark Vulnerability\"\n        },\n        \"77\": {\n            \"ID\": \"77\",\n            \"Name\": \"Spark Damage Reduction\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Conditional Effect after Damage Received Threshold\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"BC Fill after Damage Received Threshold\"\n        },\n        \"80\": {\n            \"ID\": \"80\",\n            \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n        },\n        \"81\": {\n            \"ID\": \"81\",\n            \"Name\": \"BC Fill after Damage Dealt Threshold\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"Conditional Effect after BC Received Threshold\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"Conditional Effect after HC Received Threshold\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"BC Fill after HC Received Threshold\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"Conditional Effect after Spark Threshold\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Conditional Effect on Guard\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Conditional Effect on Critical\"\n        },\n        \"90\": {\n            \"ID\": \"90\",\n            \"Name\": \"Status Infliction on Critical\"\n        },\n        \"91\": {\n            \"ID\": \"91\",\n            \"Name\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Negate Defense Ignore\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Added Elements\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Normal Attacks Hit All Foes\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Player EXP Boost\"\n        },\n        \"99\": {\n            \"ID\": \"99\",\n            \"Name\": \"\"\n        },\n        \"100\": {\n            \"ID\": \"100\",\n            \"Name\": \"Spark Critical\"\n        },\n        \"101\": {\n            \"ID\": \"101\",\n            \"Name\": \"Heal on Spark\"\n        },\n        \"102\": {\n            \"ID\": \"102\",\n            \"Name\": \"Added Elements\"\n        },\n        \"103\": {\n            \"ID\": \"103\",\n            \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n        },\n        \"104\": {\n            \"ID\": \"104\",\n            \"Name\": \"Spark Boost when HP Passes Threshold\"\n        },\n        \"105\": {\n            \"ID\": \"105\",\n            \"Name\": \"Turn-Based Parameter Boost\"\n        },\n        \"106\": {\n            \"ID\": \"106\",\n            \"Name\": \"Conditional Effect after Activating Overdrive\"\n        },\n        \"107\": {\n            \"ID\": \"107\",\n            \"Name\": \"Add Effect to Leader Skill\"\n        },\n        \"109\": {\n            \"ID\": \"109\",\n            \"Name\": \"BB Gauge Reduction (Chance)\"\n        },\n        \"110\": {\n            \"ID\": \"110\",\n            \"Name\": \"BC Efficacy Reduction (Chance)\"\n        },\n        \"111\": {\n            \"ID\": \"111\",\n            \"Name\": \"Increase Brave Burst Activation Rate\"\n        },\n        \"112\": {\n            \"ID\": \"112\",\n            \"Name\": \"ABP/CBP Boost\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Conditional Effect after HP Threshold\"\n        },\n        \"114\": {\n            \"ID\": \"114\",\n            \"Name\": \"Inflict Buff when Attacked\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n        },\n        \"128\": {\n            \"ID\": \"128\",\n            \"Name\": \"Damage Reduction from Normal Attacks\"\n        },\n        \"143\": {\n            \"ID\": \"143\",\n            \"Name\": \"Break Atk Parameter Limit\"\n        },\n        \"10008\": {\n            \"ID\": \"10008\",\n            \"Name\": \"Damage Reduction from Specific Sources\"\n        },\n        \"11004\": {\n            \"ID\": \"11004\",\n            \"Name\": \"Elemental Spark Damage Boost\"\n        },\n        \"11005\": {\n            \"ID\": \"11005\",\n            \"Name\": \"Elemental Critical Damage Boost\"\n        },\n        \"11006\": {\n            \"ID\": \"11006\",\n            \"Name\": \"Summoner EXP Boost\"\n        },\n        \"11009\": {\n            \"ID\": \"11009\",\n            \"Name\": \"Effect Duration Boost\"\n        },\n        \"66,1\": {\n            \"ID\": \"66,1\",\n            \"Name\": \"\"\n        }\n    });\n    /**\n     * @ignore\n     */\n    const PROC_METADATA = Object.freeze({\n        \"0\": {\n            \"ID\": \"0\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Regular Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Burst Heal\",\n            \"Type\": \"\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Heal over Time\",\n            \"Type\": \"\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"BB Gauge Refill\",\n            \"Type\": \"\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"Drop Rate\",\n            \"Type\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Parameter Reduction\",\n            \"Type\": \"\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"Status Cleanse\",\n            \"Type\": \"\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"Status Infliction\",\n            \"Type\": \"\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"Revive (Guaranteed)\",\n            \"Type\": \"\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"Random Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Lifesteal Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"Status Negation\",\n            \"Type\": \"\"\n        },\n        \"18\": {\n            \"ID\": \"18\",\n            \"Name\": \"Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Gradual BB Gauge Boost\",\n            \"Type\": \"\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"BC Fill on Hit\",\n            \"Type\": \"\"\n        },\n        \"22\": {\n            \"ID\": \"22\",\n            \"Name\": \"Defense Ignore\",\n            \"Type\": \"\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Hit Count Boost\",\n            \"Type\": \"\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Fixed Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Multi-Element Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"Add Elements\",\n            \"Type\": \"\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Instant BB Gauge Fill\",\n            \"Type\": \"\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"Element Shift\",\n            \"Type\": \"\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Buff Removal (Chance)\",\n            \"Type\": \"\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"BB Gauge Reduction (Chance)\",\n            \"Type\": \"\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Leader Skill Lock (Chance)\",\n            \"Type\": \"\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Summon Unit\",\n            \"Type\": \"\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"Status Cure\",\n            \"Type\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Status Infliction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Instant OD Fill\",\n            \"Type\": \"\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Damage over Time (Additional Damage)\",\n            \"Type\": \"\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"BB Atk Boost\",\n            \"Type\": \"\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Non-Lethal Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"HP Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"Piercing Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"Retire\",\n            \"Type\": \"\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Damage Counter\",\n            \"Type\": \"\"\n        },\n        \"51\": {\n            \"ID\": \"51\",\n            \"Name\": \"Parameter Reduction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"BC Efficacy\",\n            \"Type\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Status Counter\",\n            \"Type\": \"\"\n        },\n        \"54\": {\n            \"ID\": \"54\",\n            \"Name\": \"Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Elemental Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"56\": {\n            \"ID\": \"56\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"57\": {\n            \"ID\": \"57\",\n            \"Name\": \"BC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Spark Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BB Atk Reduction\",\n            \"Type\": \"\"\n        },\n        \"60\": {\n            \"ID\": \"60\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BB-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Barrier\",\n            \"Type\": \"\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Selective Buff Wipe\",\n            \"Type\": \"\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"Consecutive Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\",\n            \"Type\": \"\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Revive (Chance)\",\n            \"Type\": \"\"\n        },\n        \"67\": {\n            \"ID\": \"67\",\n            \"Name\": \"BC Fill on Spark\",\n            \"Type\": \"\"\n        },\n        \"68\": {\n            \"ID\": \"68\",\n            \"Name\": \"Damage Reduction when Guarding\",\n            \"Type\": \"\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"BC Fill on Guard\",\n            \"Type\": \"\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"BB Gauge Fill Rate Debuff\",\n            \"Type\": \"\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\",\n            \"Type\": \"\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Element Squad-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"76\": {\n            \"ID\": \"76\",\n            \"Name\": \"Extra Action\",\n            \"Type\": \"\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Self Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"Player EXP Boost\",\n            \"Type\": \"\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"83\": {\n            \"ID\": \"83\",\n            \"Name\": \"Spark Critical\",\n            \"Type\": \"\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"OD Gauge Fill Rate\",\n            \"Type\": \"\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"Heal when Attacked\",\n            \"Type\": \"\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"HP Absorption\",\n            \"Type\": \"\"\n        },\n        \"87\": {\n            \"ID\": \"87\",\n            \"Name\": \"Heal on Spark\",\n            \"Type\": \"\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Self Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Self Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Self Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"94\": {\n            \"ID\": \"94\",\n            \"Name\": \"Normal Attacks Hit All Foes\",\n            \"Type\": \"\"\n        },\n        \"95\": {\n            \"ID\": \"95\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n            \"Type\": \"\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Element Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Gradual OD Fill\",\n            \"Type\": \"\"\n        },\n        \"119\": {\n            \"ID\": \"119\",\n            \"Name\": \"Gradual BC Drain\",\n            \"Type\": \"\"\n        },\n        \"123\": {\n            \"ID\": \"123\",\n            \"Name\": \"OD Gauge Reduction\",\n            \"Type\": \"\"\n        },\n        \"126\": {\n            \"ID\": \"126\",\n            \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n            \"Type\": \"\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Lock On\",\n            \"Type\": \"\"\n        },\n        \"130\": {\n            \"ID\": \"130\",\n            \"Name\": \"Parameter Reduction Counter\",\n            \"Type\": \"\"\n        },\n        \"131\": {\n            \"ID\": \"131\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"132\": {\n            \"ID\": \"132\",\n            \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"901\": {\n            \"ID\": \"901\",\n            \"Name\": \"Raid Heal (on Map)\",\n            \"Type\": \"\"\n        },\n        \"902\": {\n            \"ID\": \"902\",\n            \"Name\": \"Raid Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"903\": {\n            \"ID\": \"903\",\n            \"Name\": \"Raid Boss Reveal\",\n            \"Type\": \"\"\n        },\n        \"905\": {\n            \"ID\": \"905\",\n            \"Name\": \"Raid Teleport\",\n            \"Type\": \"\"\n        },\n        \"906\": {\n            \"ID\": \"906\",\n            \"Name\": \"Raid Flee\",\n            \"Type\": \"\"\n        },\n        \"907\": {\n            \"ID\": \"907\",\n            \"Name\": \"Raid Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"908\": {\n            \"ID\": \"908\",\n            \"Name\": \"Raid Item Drop Rate Boost\",\n            \"Type\": \"\"\n        },\n        \"10000\": {\n            \"ID\": \"10000\",\n            \"Name\": \"Taunt\",\n            \"Type\": \"\"\n        },\n        \"10001\": {\n            \"ID\": \"10001\",\n            \"Name\": \"Stealth\",\n            \"Type\": \"\"\n        },\n        \"10002\": {\n            \"ID\": \"10002\",\n            \"Name\": \"Shield (old)\",\n            \"Type\": \"\"\n        },\n        \"10003\": {\n            \"ID\": \"10003\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"10004\": {\n            \"ID\": \"10004\",\n            \"Name\": \"Damage Immunity\",\n            \"Type\": \"\"\n        },\n        \"10005\": {\n            \"ID\": \"10005\",\n            \"Name\": \"Turn Skip (short duration)\",\n            \"Type\": \"\"\n        },\n        \"10006\": {\n            \"ID\": \"10006\",\n            \"Name\": \"Turn Skip (long duration)\",\n            \"Type\": \"\"\n        },\n        \"10007\": {\n            \"ID\": \"10007\",\n            \"Name\": \"Evasion\",\n            \"Type\": \"\"\n        },\n        \"10009\": {\n            \"ID\": \"10009\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"10012\": {\n            \"ID\": \"10012\",\n            \"Name\": \"OD Drain\",\n            \"Type\": \"\"\n        },\n        \"10015\": {\n            \"ID\": \"10015\",\n            \"Name\": \"Elemental Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"10016\": {\n            \"ID\": \"10016\",\n            \"Name\": \"Element Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"10017\": {\n            \"ID\": \"10017\",\n            \"Name\": \"Elemental Shield\",\n            \"Type\": \"\"\n        },\n        \"10018\": {\n            \"ID\": \"10018\",\n            \"Name\": \"Max HP Reduction\",\n            \"Type\": \"\"\n        },\n        \"10019\": {\n            \"ID\": \"10019\",\n            \"Name\": \"Effect Purge\",\n            \"Type\": \"\"\n        },\n        \"10020\": {\n            \"ID\": \"10020\",\n            \"Name\": \"Piercing Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"10021\": {\n            \"ID\": \"10021\",\n            \"Name\": \"Active Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10022\": {\n            \"ID\": \"10022\",\n            \"Name\": \"Passive Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10023\": {\n            \"ID\": \"10023\",\n            \"Name\": \"HC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"10025\": {\n            \"ID\": \"10025\",\n            \"Name\": \"KO Resistance Negation\",\n            \"Type\": \"\"\n        },\n        \"10026\": {\n            \"ID\": \"10026\",\n            \"Name\": \"Doom\",\n            \"Type\": \"\"\n        },\n        \"11000\": {\n            \"ID\": \"11000\",\n            \"Name\": \"Negative HP-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"11001\": {\n            \"ID\": \"11001\",\n            \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n            \"Type\": \"\"\n        },\n        \"11002\": {\n            \"ID\": \"11002\",\n            \"Name\": \"HP Limit Break, Convert to HP\",\n            \"Type\": \"\"\n        },\n        \"11003\": {\n            \"ID\": \"11003\",\n            \"Name\": \"Effect Negation\",\n            \"Type\": \"\"\n        },\n        \"70001\": {\n            \"ID\": \"70001\",\n            \"Name\": \"Mana Bubble Shield\",\n            \"Type\": \"\"\n        },\n        \"70002\": {\n            \"ID\": \"70002\",\n            \"Name\": \"Recast\",\n            \"Type\": \"\"\n        },\n        \"2-5\": {\n            \"ID\": \"2-5\",\n            \"Name\": \"Burst Heal and DEF/REC Boost\",\n            \"Type\": \"\"\n        }\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given proc ID.\n     * @param id Proc ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForProc(id, metadata = PROC_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Determine if a given proc ID's type is an attack.\n     * @param id Proc ID to check.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n     */\n    function isAttackingProcId(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n    }\n\n    /**\n     * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n     * @param damageFrames Damage frames that each have their own proc ID.\n     * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Damage frames entry whose frames are based on the input damage frames.\n     */\n    function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n        // relevant frames are all effects for healing or attacking\n        const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n        const relevantFrames = inputFrames.filter(frame => {\n            const procId = getEffectId(frame);\n            return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n        });\n        const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n            const keepFirstFrame = index === 0;\n            const numFrames = frameEntry['frame times'].length;\n            const damageDistribution = frameEntry['hit dmg% distribution'];\n            const frameTimes = frameEntry['frame times'];\n            for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n                acc.push({\n                    damage: damageDistribution[frameIndex],\n                    time: frameTimes[frameIndex],\n                });\n            }\n            return acc;\n        }, []);\n        const resultDamageFramesEntry = {\n            'effect delay time(ms)/frame': effectDelay,\n            'frame times': [],\n            'hit dmg% distribution': [],\n            'hit dmg% distribution (total)': 0,\n            hits: 0,\n        };\n        unifiedFrames.sort((a, b) => a.time - b.time)\n            .forEach(({ time, damage }) => {\n            resultDamageFramesEntry['frame times'].push(time);\n            resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n            resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n        });\n        resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n        return resultDamageFramesEntry;\n    }\n\n    var index = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLevelEntryForBurst: getLevelEntryForBurst,\n        getEffectsForBurst: getEffectsForBurst,\n        getExtraAttackDamageFramesEntry: getExtraAttackDamageFramesEntry\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given passive ID.\n     * @param id Passive ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Get the associated name for a given proc ID.\n     * @param id Proc ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Name of the proc ID if it exists, empty string otherwise.\n     */\n    function getNameForProc(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Get the associated name for a given passive ID.\n     * @param id Passive ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Name of the passive ID if it exists, empty string otherwise.\n     */\n    function getNameForPassive(id, metadata) {\n        const metadataEntry = getMetadataForPassive(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Determine if a given effect object is a proc effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a proc effect based on its properties.\n     */\n    function isProcEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n    }\n\n    /**\n     * @description Determine if a given effect object is a passive effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a passive effect based on its properties.\n     */\n    function isPassiveEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n    }\n\n    var Ailment;\n    (function (Ailment) {\n        Ailment[\"Poison\"] = \"poison\";\n        Ailment[\"Weak\"] = \"weak\";\n        Ailment[\"Sick\"] = \"sick\";\n        Ailment[\"Injury\"] = \"injury\";\n        Ailment[\"Curse\"] = \"curse\";\n        Ailment[\"Paralysis\"] = \"paralysis\";\n        Ailment[\"AttackReduction\"] = \"atk down\";\n        Ailment[\"DefenseReduction\"] = \"def down\";\n        Ailment[\"RecoveryReduction\"] = \"rec down\";\n        Ailment[\"Unknown\"] = \"unknown\";\n    })(Ailment || (Ailment = {}));\n    var ArenaCondition;\n    (function (ArenaCondition) {\n        ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n        ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n        ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n        ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n        ArenaCondition[\"hp_min\"] = \"hp_min\";\n        ArenaCondition[\"hp_max\"] = \"hp_max\";\n        ArenaCondition[\"atk_max\"] = \"atk_max\";\n        ArenaCondition[\"random\"] = \"random\";\n    })(ArenaCondition || (ArenaCondition = {}));\n    var MoveType;\n    (function (MoveType) {\n        MoveType[\"Moving\"] = \"1\";\n        MoveType[\"Teleporting\"] = \"2\";\n        MoveType[\"NonMoving\"] = \"3\";\n    })(MoveType || (MoveType = {}));\n    var TargetArea;\n    (function (TargetArea) {\n        TargetArea[\"Aoe\"] = \"aoe\";\n        TargetArea[\"Single\"] = \"single\";\n        TargetArea[\"Random\"] = \"random\";\n    })(TargetArea || (TargetArea = {}));\n    var TargetAreaShorthand;\n    (function (TargetAreaShorthand) {\n        TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n        TargetAreaShorthand[\"Single\"] = \"ST\";\n        TargetAreaShorthand[\"Random\"] = \"RT\";\n    })(TargetAreaShorthand || (TargetAreaShorthand = {}));\n    var TargetType;\n    (function (TargetType) {\n        TargetType[\"Self\"] = \"self\";\n        TargetType[\"Party\"] = \"party\";\n        TargetType[\"Enemy\"] = \"enemy\";\n    })(TargetType || (TargetType = {}));\n    var SpPassiveType;\n    (function (SpPassiveType) {\n        SpPassiveType[\"AddPassive\"] = \"passive\";\n        SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n        SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n        SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n        SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n    })(SpPassiveType || (SpPassiveType = {}));\n    var SphereTypeName;\n    (function (SphereTypeName) {\n        SphereTypeName[\"None\"] = \"None\";\n        SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n        SphereTypeName[\"Critical\"] = \"Critical\";\n        SphereTypeName[\"Drop\"] = \"Drop\";\n        SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n        SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n        SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n        SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n        SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n        SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n        SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n        SphereTypeName[\"Spark\"] = \"Spark\";\n        SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n        SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n        SphereTypeName[\"Special\"] = \"Special\";\n    })(SphereTypeName || (SphereTypeName = {}));\n    var SphereTypeId;\n    (function (SphereTypeId) {\n        SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n        SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n        SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n        SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n        SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n        SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n        SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n        SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n        SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n        SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n        SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n        SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n        SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n        SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n        SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n    })(SphereTypeId || (SphereTypeId = {}));\n    var SpCategoryName;\n    (function (SpCategoryName) {\n        SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n        SpCategoryName[\"Spark\"] = \"Spark\";\n        SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n        SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n        SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n        SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n        SpCategoryName[\"Drops\"] = \"Drops\";\n        SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n        SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n        SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n        SpCategoryName[\"Special\"] = \"Special\";\n        SpCategoryName[\"Unknown\"] = \"Unknown\";\n    })(SpCategoryName || (SpCategoryName = {}));\n    var SpCategoryId;\n    (function (SpCategoryId) {\n        SpCategoryId[\"Parameter Boost\"] = \"1\";\n        SpCategoryId[\"Spark\"] = \"2\";\n        SpCategoryId[\"Critical Hits\"] = \"3\";\n        SpCategoryId[\"Attack Boost\"] = \"4\";\n        SpCategoryId[\"BB Gauge\"] = \"5\";\n        SpCategoryId[\"HP Recovery\"] = \"6\";\n        SpCategoryId[\"Drops\"] = \"7\";\n        SpCategoryId[\"Ailment Resistance\"] = \"8\";\n        SpCategoryId[\"Ailment Infliction\"] = \"9\";\n        SpCategoryId[\"Damage Reduction\"] = \"10\";\n        SpCategoryId[\"Special\"] = \"11\";\n    })(SpCategoryId || (SpCategoryId = {}));\n    var UnitAnimationKey;\n    (function (UnitAnimationKey) {\n        UnitAnimationKey[\"Attack\"] = \"attack\";\n        UnitAnimationKey[\"Idle\"] = \"idle\";\n        UnitAnimationKey[\"Move\"] = \"move\";\n    })(UnitAnimationKey || (UnitAnimationKey = {}));\n    var UnitElement;\n    (function (UnitElement) {\n        UnitElement[\"Fire\"] = \"fire\";\n        UnitElement[\"Water\"] = \"water\";\n        UnitElement[\"Earth\"] = \"earth\";\n        UnitElement[\"Thunder\"] = \"thunder\";\n        UnitElement[\"Light\"] = \"light\";\n        UnitElement[\"Dark\"] = \"dark\";\n    })(UnitElement || (UnitElement = {}));\n    var UnitGender;\n    (function (UnitGender) {\n        UnitGender[\"Male\"] = \"male\";\n        UnitGender[\"Female\"] = \"female\";\n        UnitGender[\"Other\"] = \"other\";\n    })(UnitGender || (UnitGender = {}));\n    var UnitGettingType;\n    (function (UnitGettingType) {\n        UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n        UnitGettingType[\"Farmable\"] = \"farmable\";\n        UnitGettingType[\"RareSummon\"] = \"rare summon\";\n        UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n    })(UnitGettingType || (UnitGettingType = {}));\n    var UnitKind;\n    (function (UnitKind) {\n        UnitKind[\"Normal\"] = \"normal\";\n        UnitKind[\"Evolution\"] = \"evo\";\n        UnitKind[\"Enhancing\"] = \"enhancing\";\n        UnitKind[\"Sale\"] = \"sale\";\n    })(UnitKind || (UnitKind = {}));\n    var UnitType;\n    (function (UnitType) {\n        UnitType[\"Lord\"] = \"lord\";\n        UnitType[\"Anima\"] = \"anima\";\n        UnitType[\"Breaker\"] = \"breaker\";\n        UnitType[\"Guardian\"] = \"guardian\";\n        UnitType[\"Oracle\"] = \"oracle\";\n        UnitType[\"Rex\"] = \"rex\";\n    })(UnitType || (UnitType = {}));\n    var ItemType;\n    (function (ItemType) {\n        ItemType[\"Consumable\"] = \"consumable\";\n        ItemType[\"Material\"] = \"material\";\n        ItemType[\"Sphere\"] = \"sphere\";\n        ItemType[\"EvolutionMaterial\"] = \"evomat\";\n        ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n        ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n    })(ItemType || (ItemType = {}));\n    var MimicUnitIds;\n    (function (MimicUnitIds) {\n        MimicUnitIds[\"Mimic\"] = \"60142\";\n        MimicUnitIds[\"BatMimic\"] = \"60143\";\n        MimicUnitIds[\"DragonMimic\"] = \"60144\";\n        MimicUnitIds[\"MetalMimic\"] = \"60224\";\n    })(MimicUnitIds || (MimicUnitIds = {}));\n    /**\n     * @description Known values for the monster groups used in {@link IMimicInfo}.\n     */\n    const MimicMonsterGroupMapping = {\n        '1000': MimicUnitIds.Mimic,\n        '1100': MimicUnitIds.BatMimic,\n        '1101': MimicUnitIds.BatMimic,\n        '1200': MimicUnitIds.DragonMimic,\n        '1300': MimicUnitIds.MetalMimic,\n    };\n\n    var datamineTypes = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get Ailment () { return Ailment; },\n        get ArenaCondition () { return ArenaCondition; },\n        get MoveType () { return MoveType; },\n        get TargetArea () { return TargetArea; },\n        get TargetAreaShorthand () { return TargetAreaShorthand; },\n        get TargetType () { return TargetType; },\n        get SpPassiveType () { return SpPassiveType; },\n        get SphereTypeName () { return SphereTypeName; },\n        get SphereTypeId () { return SphereTypeId; },\n        get SpCategoryName () { return SpCategoryName; },\n        get SpCategoryId () { return SpCategoryId; },\n        get UnitAnimationKey () { return UnitAnimationKey; },\n        get UnitElement () { return UnitElement; },\n        get UnitGender () { return UnitGender; },\n        get UnitGettingType () { return UnitGettingType; },\n        get UnitKind () { return UnitKind; },\n        get UnitType () { return UnitType; },\n        get ItemType () { return ItemType; },\n        get MimicUnitIds () { return MimicUnitIds; },\n        MimicMonsterGroupMapping: MimicMonsterGroupMapping\n    });\n\n    /**\n     * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n     * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n     * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n     * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n     */\n    function combineEffectsAndDamageFrames(effects, damageFrames) {\n        let combinedEntries = [];\n        if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n            combinedEntries = effects.map((effect, i) => {\n                const correspondingFrameEntry = damageFrames[i];\n                return {\n                    delay: effect['effect delay time(ms)/frame'],\n                    effect,\n                    frames: correspondingFrameEntry,\n                    id: `${effect['proc id'] || effect['unknown proc id']}`,\n                    targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                    targetType: effect['target type'],\n                };\n            });\n        }\n        return combinedEntries;\n    }\n\n    /**\n     * @description Get the name of a given object.\n     * @param effect Object to get the name from.\n     * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n     * @returns Name of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectName(effect, metadata = {}) {\n        let resultName = '';\n        const effectId = getEffectId(effect);\n        if (isPassiveEffect(effect)) {\n            resultName = getNameForPassive(effectId, metadata && metadata.passive);\n        }\n        else if (isProcEffect(effect)) {\n            resultName = getNameForProc(effectId, metadata && metadata.proc);\n        }\n        return resultName;\n    }\n\n    /**\n     * @description Provides info at a glance regarding a buff's source and how it stacks.\n     */\n    var BuffStackType;\n    (function (BuffStackType) {\n        /**\n         * @description The buff is activated via some skill and lasts for a number of turns.\n         * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n         * from different levels. Two possible levels of sources are:\n         * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n         * 2. Ultimate Brave Burst or Dual Brave Burst\n         */\n        BuffStackType[\"Active\"] = \"active\";\n        /**\n         * @description The buff is always active provided that the source is not nullified.\n         * Most passive buffs can stack with themselves.\n         */\n        BuffStackType[\"Passive\"] = \"passive\";\n        /**\n         * @description The buff is applied for a number of turns once a certain condition is met.\n         * Buffs of the same type are not able to stack.\n         */\n        BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n        /**\n         * @description Only one instance of the buff can be active at a time and can last indefinitely.\n         * A couple examples of this are Barrier and Max HP Boost.\n         */\n        BuffStackType[\"Singleton\"] = \"singleton\";\n        /**\n         * @description The buff's effects immediately apply to the target(s). This differs from singleton\n         * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n         * in the HP bar filling by the sum of those burst heals).\n         */\n        BuffStackType[\"Burst\"] = \"burst\";\n        /**\n         * @description A specific subset of `Burst` type buffs that deal damage to the target.\n         */\n        BuffStackType[\"Attack\"] = \"attack\";\n        /**\n         * @description Only for buffs that cannot be processed by the library yet.\n         */\n        BuffStackType[\"Unknown\"] = \"unknown\";\n    })(BuffStackType || (BuffStackType = {}));\n    var BuffSource;\n    (function (BuffSource) {\n        BuffSource[\"BraveBurst\"] = \"bb\";\n        BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n        BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n        BuffSource[\"DualBraveBurst\"] = \"dbb\";\n        BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n        BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n        BuffSource[\"SpEnhancement\"] = \"sp\";\n        BuffSource[\"Item\"] = \"item\";\n        BuffSource[\"LeaderSkill\"] = \"ls\";\n        BuffSource[\"ExtraSkill\"] = \"es\";\n        /**\n         * @description Buffs that result of having a number of OE+ units in the squad.\n         */\n        BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n        /**\n         * @description Buffs based on a units type. See {@link UnitType}.\n         */\n        BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n        /**\n         * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n         * as well as ambient turn reductions present in some late-game quests.\n         */\n        BuffSource[\"Quest\"] = \"quest\";\n    })(BuffSource || (BuffSource = {}));\n    /**\n     * @description Extra element values that can be used in addition to {@link UnitElement}.\n     */\n    var BuffConditionElement;\n    (function (BuffConditionElement) {\n        BuffConditionElement[\"Unknown\"] = \"unknown\";\n        BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n        BuffConditionElement[\"All\"] = \"all\";\n    })(BuffConditionElement || (BuffConditionElement = {}));\n    /**\n     * @description Stats on a unit that a buff can affect.\n     */\n    var UnitStat;\n    (function (UnitStat) {\n        UnitStat[\"hp\"] = \"hp\";\n        UnitStat[\"atk\"] = \"atk\";\n        UnitStat[\"def\"] = \"def\";\n        UnitStat[\"rec\"] = \"rec\";\n        UnitStat[\"crit\"] = \"crit\";\n        UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n        UnitStat[\"bbGauge\"] = \"bbGauge\";\n        UnitStat[\"odGauge\"] = \"odGauge\";\n        UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n        UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n        UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n        UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n        UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n        UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n        UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n        UnitStat[\"bcCostReduction\"] = \"bcCostReduction\";\n        UnitStat[\"bbGaugeConsumptionReduction\"] = \"bbGaugeConsumptionReduction\";\n        UnitStat[\"ailmentAttackBoost\"] = \"ailmentAttackBoost\";\n        UnitStat[\"poisonResist\"] = \"poisonResist\";\n        UnitStat[\"weakResist\"] = \"weakResist\";\n        UnitStat[\"sickResist\"] = \"sickResist\";\n        UnitStat[\"injuryResist\"] = \"injuryResist\";\n        UnitStat[\"curseResist\"] = \"curseResist\";\n        UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n        UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n        UnitStat[\"weakInflict\"] = \"weakInflict\";\n        UnitStat[\"sickInflict\"] = \"sickInflict\";\n        UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n        UnitStat[\"curseInflict\"] = \"curseInflict\";\n        UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n        UnitStat[\"poisonCounter\"] = \"poisonCounter\";\n        UnitStat[\"weakCounter\"] = \"weakCounter\";\n        UnitStat[\"sickCounter\"] = \"sickCounter\";\n        UnitStat[\"injuryCounter\"] = \"injuryCounter\";\n        UnitStat[\"curseCounter\"] = \"curseCounter\";\n        UnitStat[\"paralysisCounter\"] = \"paralysisCounter\";\n        UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n        UnitStat[\"defDownResist\"] = \"defDownResist\";\n        UnitStat[\"recDownResist\"] = \"recDownResist\";\n        UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n        UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n        UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n        UnitStat[\"atkDownCounter\"] = \"atkDownCounter\";\n        UnitStat[\"defDownCounter\"] = \"defDownCounter\";\n        UnitStat[\"recDownCounter\"] = \"recDownCounter\";\n        UnitStat[\"mitigation\"] = \"mitigation\";\n        UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n        UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n        UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n        UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n        UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n        UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n        UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n        UnitStat[\"guardMitigation\"] = \"guardMitigation\";\n        UnitStat[\"barrier\"] = \"barrier\";\n        UnitStat[\"fireElementalDamage\"] = \"fireElementalDamage\";\n        UnitStat[\"waterElementalDamage\"] = \"waterElementalDamage\";\n        UnitStat[\"earthElementalDamage\"] = \"earthElementalDamage\";\n        UnitStat[\"thunderElementalDamage\"] = \"thunderElementalDamage\";\n        UnitStat[\"lightElementalDamage\"] = \"lightElementalDamage\";\n        UnitStat[\"darkElementalDamage\"] = \"darkElementalDamage\";\n        UnitStat[\"elementalWeaknessDamageMitigation\"] = \"elementalWeaknessDamageMitigation\";\n        UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n        UnitStat[\"koResistance\"] = \"koResistance\";\n        UnitStat[\"revive\"] = \"revive\";\n        UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n        UnitStat[\"defenseIgnoreMitigation\"] = \"defenseIgnoreMitigation\";\n        UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n        UnitStat[\"criticalDamageMitigation\"] = \"criticalDamageMitigation\";\n        UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n        UnitStat[\"sparkDamageMitigation\"] = \"sparkDamageMitigation\";\n        UnitStat[\"bbAtk\"] = \"bbAtk\";\n        UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n        UnitStat[\"damageReflect\"] = \"damageReflect\";\n        UnitStat[\"targetingModification\"] = \"targetingModification\";\n        UnitStat[\"elementModification\"] = \"elementModification\";\n        UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n        UnitStat[\"extraAction\"] = \"extraAction\";\n        UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n        UnitStat[\"effectOccurrenceShift\"] = \"effectOccurrenceShift\";\n        UnitStat[\"expModification\"] = \"expModification\";\n        UnitStat[\"shield\"] = \"shield\";\n        UnitStat[\"aoeNormalAttack\"] = \"aoeNormalAttack\";\n    })(UnitStat || (UnitStat = {}));\n    var IconId;\n    (function (IconId) {\n        IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n        IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n        IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n        IconId[\"CONDITIONALBUFF_HPTHRESH\"] = \"CONDITIONALBUFF_HPTHRESH\";\n        IconId[\"CONDITIONALBUFF_DAMAGETAKENTHRESH\"] = \"CONDITIONALBUFF_DAMAGETAKENTHRESH\";\n        IconId[\"CONDITIONALBUFF_DAMAGEDEALTTHRESH\"] = \"CONDITIONALBUFF_DAMAGEDEALTTHRESH\";\n        IconId[\"CONDITIONALBUFF_BCRECEIVEDTHRESH\"] = \"CONDITIONALBUFF_BCRECEIVEDTHRESH\";\n        IconId[\"CONDITIONALBUFF_HCRECEIVEDTHRESH\"] = \"CONDITIONALBUFF_HCRECEIVEDTHRESH\";\n        IconId[\"CONDITIONALBUFF_SPARKCOUNTTHRESH\"] = \"CONDITIONALBUFF_SPARKCOUNTTHRESH\";\n        IconId[\"CONDITIONALBUFF_GUARD\"] = \"CONDITIONALBUFF_GUARD\";\n        IconId[\"CONDITIONALBUFF_CRIT\"] = \"CONDITIONALBUFF_CRIT\";\n        IconId[\"CONDITIONALBUFF_OD\"] = \"CONDITIONALBUFF_OD\";\n        IconId[\"BUFF_ADDTO_BB\"] = \"BUFF_ADDTO_BB\";\n        IconId[\"BUFF_ADDTO_SBB\"] = \"BUFF_ADDTO_SBB\";\n        IconId[\"BUFF_ADDTO_UBB\"] = \"BUFF_ADDTO_UBB\";\n        IconId[\"BUFF_ADDTO_LS\"] = \"BUFF_ADDTO_LS\";\n        IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n        IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n        IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n        IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n        IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n        IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n        IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n        IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n        IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n        IconId[\"BUFF_SELFHPUP\"] = \"BUFF_SELFHPUP\";\n        IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n        IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n        IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n        IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n        IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n        IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n        IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n        IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n        IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n        IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n        IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n        IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n        IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n        IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n        IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n        IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n        IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n        IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n        IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n        IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n        IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n        IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n        IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n        IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n        IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n        IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n        IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n        IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n        IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n        IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n        IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n        IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n        IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n        IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n        IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n        IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n        IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n        IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n        IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n        IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n        IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n        IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n        IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n        IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n        IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n        IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n        IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n        IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n        IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n        IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n        IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n        IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n        IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n        IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n        IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n        IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n        IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n        IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n        IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n        IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n        IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n        IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n        IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n        IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n        IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n        IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n        IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n        IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n        IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n        IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n        IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n        IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n        IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n        IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n        IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n        IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n        IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n        IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n        IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n        IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n        IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n        IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n        IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n        IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n        IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n        IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n        IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n        IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n        IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n        IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n        IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n        IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n        IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n        IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n        IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n        IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n        IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n        IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n        IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n        IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n        IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n        IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n        IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n        IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n        IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n        IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n        IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n        IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n        IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n        IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n        IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n        IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n        IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n        IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n        IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n        IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n        IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n        IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n        IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n        IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n        IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n        IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n        IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n        IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n        IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n        IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n        IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n        IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n        IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n        IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n        IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n        IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n        IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n        IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n        IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n        IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n        IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n        IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n        IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n        IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n        IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n        IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n        IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n        IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n        IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n        IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n        IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n        IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n        IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n        IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n        IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n        IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n        IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n        IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n        IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n        IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n        IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n        IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n        IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n        IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n        IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n        IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n        IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n        IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n        IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n        IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n        IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n        IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n        IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n        IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n        IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n        IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n        IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n        IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n        IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n        IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n        IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n        IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n        IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n        IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n        IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n        IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n        IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n        IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n        IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n        IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n        IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n        IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n        IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n        IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n        IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n        IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n        IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n        IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n        IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n        IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n        IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n        IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n        IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n        IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n        IconId[\"BUFF_SELFCONVERTATKUP\"] = \"BUFF_SELFCONVERTATKUP\";\n        IconId[\"BUFF_SELFCONVERTATKDOWN\"] = \"BUFF_SELFCONVERTATKDOWN\";\n        IconId[\"BUFF_SELFCONVERTDEFUP\"] = \"BUFF_SELFCONVERTDEFUP\";\n        IconId[\"BUFF_SELFCONVERTDEFDOWN\"] = \"BUFF_SELFCONVERTDEFDOWN\";\n        IconId[\"BUFF_SELFCONVERTRECUP\"] = \"BUFF_SELFCONVERTRECUP\";\n        IconId[\"BUFF_SELFCONVERTRECDOWN\"] = \"BUFF_SELFCONVERTRECDOWN\";\n        IconId[\"BUFF_HPSCALEDATKUP\"] = \"BUFF_HPSCALEDATKUP\";\n        IconId[\"BUFF_HPSCALEDATKDOWN\"] = \"BUFF_HPSCALEDATKDOWN\";\n        IconId[\"BUFF_HPSCALEDDEFUP\"] = \"BUFF_HPSCALEDDEFUP\";\n        IconId[\"BUFF_HPSCALEDDEFDOWN\"] = \"BUFF_HPSCALEDDEFDOWN\";\n        IconId[\"BUFF_HPSCALEDRECUP\"] = \"BUFF_HPSCALEDRECUP\";\n        IconId[\"BUFF_HPSCALEDRECDOWN\"] = \"BUFF_HPSCALEDRECDOWN\";\n        IconId[\"BUFF_TURNSCALEDATKUP\"] = \"BUFF_TURNSCALEDATKUP\";\n        IconId[\"BUFF_TURNSCALEDATKDOWN\"] = \"BUFF_TURNSCALEDATKDOWN\";\n        IconId[\"BUFF_TURNSCALEDDEFUP\"] = \"BUFF_TURNSCALEDDEFUP\";\n        IconId[\"BUFF_TURNSCALEDDEFDOWN\"] = \"BUFF_TURNSCALEDDEFDOWN\";\n        IconId[\"BUFF_TURNSCALEDRECUP\"] = \"BUFF_TURNSCALEDRECUP\";\n        IconId[\"BUFF_TURNSCALEDRECDOWN\"] = \"BUFF_TURNSCALEDRECDOWN\";\n        IconId[\"BUFF_SELFATKUP\"] = \"BUFF_SELFATKUP\";\n        IconId[\"BUFF_ATKDOWNLOCK\"] = \"BUFF_ATKDOWNLOCK\";\n        IconId[\"BUFF_SELFDEFUP\"] = \"BUFF_SELFDEFUP\";\n        IconId[\"BUFF_DEFDOWNLOCK\"] = \"BUFF_DEFDOWNLOCK\";\n        IconId[\"BUFF_SELFRECUP\"] = \"BUFF_SELFRECUP\";\n        IconId[\"BUFF_RECDOWNLOCK\"] = \"BUFF_RECDOWNLOCK\";\n        IconId[\"BUFF_SELFCRTRATEUP\"] = \"BUFF_SELFCRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWNLOCK\"] = \"BUFF_CRTRATEDOWNLOCK\";\n        IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n        IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n        IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n        IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n        IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n        IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n        IconId[\"BUFF_RESISTATKDOWN\"] = \"BUFF_RESISTATKDOWN\";\n        IconId[\"BUFF_RESISTDEFDOWN\"] = \"BUFF_RESISTDEFDOWN\";\n        IconId[\"BUFF_RESISTRECDOWN\"] = \"BUFF_RESISTRECDOWN\";\n        IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n        IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n        IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n        IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n        IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n        IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n        IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n        IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n        IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n        IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n        IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n        IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n        IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n        IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n        IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n        IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n        IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n        IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n        IconId[\"BUFF_POISONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n        IconId[\"BUFF_POISIONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n        IconId[\"BUFF_WEAKCOUNTER\"] = \"BUFF_WEAKCOUNTER\";\n        IconId[\"BUFF_SICKCOUNTER\"] = \"BUFF_SICKCOUNTER\";\n        IconId[\"BUFF_INJCONTER\"] = \"BUFF_INJCONTER\";\n        IconId[\"BUFF_CURSECOUNTER\"] = \"BUFF_CURSECOUNTER\";\n        IconId[\"BUFF_PARALYCOUNTER\"] = \"BUFF_PARALYCOUNTER\";\n        IconId[\"BUFF_PROB_ATKREDUC\"] = \"BUFF_PROB_ATKREDUC\";\n        IconId[\"BUFF_PROB_DEFREDUC\"] = \"BUFF_PROB_DEFREDUC\";\n        IconId[\"BUFF_PROB_RECREDUC\"] = \"BUFF_PROB_RECREDUC\";\n        IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n        IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n        // elemental damage reduction buffs\n        IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n        IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n        IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n        IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n        IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n        IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n        IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n        // elemental weakness buffs\n        IconId[\"BUFF_FIREDMGUP\"] = \"BUFF_FIREDMGUP\";\n        IconId[\"BUFF_WATERDMGUP\"] = \"BUFF_WATERDMGUP\";\n        IconId[\"BUFF_WATERMDGUP\"] = \"BUFF_WATERDMGUP\";\n        IconId[\"BUFF_EARTHDMGUP\"] = \"BUFF_EARTHDMGUP\";\n        IconId[\"BUFF_THUNDERDMGUP\"] = \"BUFF_THUNDERDMGUP\";\n        IconId[\"BUFF_LIGHTDMGUP\"] = \"BUFF_LIGHTDMGUP\";\n        IconId[\"BUFF_DARKDMGUP\"] = \"BUFF_DARKDMGUP\";\n        IconId[\"BUFF_ELEMENTDMGUP\"] = \"BUFF_ELEMENTDMGUP\";\n        IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n        IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n        IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n        IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n        IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n        IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n        IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n        IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n        IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n        IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n        IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n        IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n        IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n        IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n        IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n        IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n        IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n        IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n        IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n        IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n        IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n        IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n        IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n        IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n        IconId[\"BUFF_KO\"] = \"BUFF_KO\";\n        IconId[\"BUFF_KOBLOCK\"] = \"BUFF_KOBLOCK\";\n        IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n        IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n        IconId[\"BUFF_IGNOREDEFBLK\"] = \"BUFF_IGNOREDEFBLK\";\n        IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n        IconId[\"BUFF_CRTDOWN\"] = \"BUFF_CRTDOWN\";\n        IconId[\"BUFF_ELEMENTDOWN\"] = \"BUFF_ELEMENTDOWN\";\n        IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n        IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n        IconId[\"BUFF_SPARKDMGUP\"] = \"BUFF_SPARKDMGUP\";\n        IconId[\"BUFF_SPARKDMGDOWN\"] = \"BUFF_SPARKDMGDOWN\";\n        IconId[\"BUFF_SPARKDMGUP2\"] = \"BUFF_SPARKDMGUP2\";\n        IconId[\"BUFF_SPARKDMGDOWN2\"] = \"BUFF_SPARKDMGDOWN2\";\n        IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n        IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n        IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n        IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n        IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n        IconId[\"BUFF_SPARKBBUP\"] = \"BUFF_SPARKBBUP\";\n        IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n        IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n        IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n        IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n        IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n        IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n        IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n        IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n        IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n        IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n        IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n        IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n        IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n        IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n        IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n        IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n        IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n        IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n        IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n        IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n        IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n        IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n        IconId[\"BUFF_NULLSPHERE\"] = \"BUFF_NULLSPHERE\";\n        IconId[\"BUFF_NULLES\"] = \"BUFF_NULLES\";\n        IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n        IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n        IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n        IconId[\"BUFF_ODFILLBOOST\"] = \"BUFF_ODFILLBOOST\";\n        IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n        IconId[\"BUFF_BBATKUP\"] = \"BUFF_BBATKUP\";\n        IconId[\"BUFF_SBBATKUP\"] = \"BUFF_SBBATKUP\";\n        IconId[\"BUFF_UBBATKUP\"] = \"BUFF_UBBATKUP\";\n        IconId[\"BUFF_BBATKDOWN\"] = \"BUFF_BBATKDOWN\";\n        IconId[\"BUFF_SBBATKDOWN\"] = \"BUFF_SBBATKDOWN\";\n        IconId[\"BUFF_UBBATKDOWN\"] = \"BUFF_UBBATKDOWN\";\n        IconId[\"BUFF_BBCOST_REDUCTION\"] = \"BUFF_BBCOST_REDUCTION\";\n        IconId[\"BUFF_GUARDCUT\"] = \"BUFF_GUARDCUT\";\n        IconId[\"BUFF_GUARDBBUP\"] = \"BUFF_GUARDBBUP\";\n        IconId[\"BUFF_FIRESHIELD\"] = \"BUFF_FIRESHIELD\";\n        IconId[\"BUFF_WATERSHIELD\"] = \"BUFF_WATERSHIELD\";\n        IconId[\"BUFF_EARTHSHIELD\"] = \"BUFF_EARTHSHIELD\";\n        IconId[\"BUFF_THUNDERSHIELD\"] = \"BUFF_THUNDERSHIELD\";\n        IconId[\"BUFF_LIGHTSHIELD\"] = \"BUFF_LIGHTSHIELD\";\n        IconId[\"BUFF_DARKSHIELD\"] = \"BUFF_DARKSHIELD\";\n        IconId[\"BUFF_ELEMENTSHIELD\"] = \"BUFF_ELEMENTSHIELD\";\n        IconId[\"BUFF_AILDMGUP\"] = \"BUFF_AILDMGUP\";\n        IconId[\"BUFF_HPTURNSTART\"] = \"BUFF_HPTURNSTART\";\n        IconId[\"BUFF_BCTURNSTART\"] = \"BUFF_BCTURNSTART\";\n        IconId[\"BUFF_PLAYEREXP\"] = \"BUFF_PLAYEREXP\";\n        IconId[\"BUFF_SPARKCRTACTIVATED\"] = \"BUFF_SPARKCRTACTIVATED\";\n        IconId[\"BUFF_SPARK_HPREC\"] = \"BUFF_SPARK_HPREC\";\n        IconId[\"BUFF_AOEATK\"] = \"BUFF_AOEATK\";\n        IconId[\"SG_BUFF_ALL\"] = \"SG_BUFF_ALL\";\n        IconId[\"SG_BUFF_FIRE\"] = \"SG_BUFF_FIRE\";\n        IconId[\"SG_BUFF_WATER\"] = \"SG_BUFF_WATER\";\n        IconId[\"SG_BUFF_EARTH\"] = \"SG_BUFF_EARTH\";\n        IconId[\"SG_BUFF_THUNDER\"] = \"SG_BUFF_THUNDER\";\n        IconId[\"SG_BUFF_LIGHT\"] = \"SG_BUFF_LIGHT\";\n        IconId[\"SG_BUFF_DARK\"] = \"SG_BUFF_DARK\";\n        IconId[\"SG_BUFF_UNKNOWN\"] = \"SG_BUFF_UNKNOWN\";\n        IconId[\"SG_BUFF_STEALTH\"] = \"SG_BUFF_STEALTH\";\n        IconId[\"ATK_ST\"] = \"ATK_ST\";\n        IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n        IconId[\"ATK_RT\"] = \"ATK_RT\";\n        IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n        IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n        IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n        IconId[\"ATK_ST_PIERCING_PROPORTIONAL\"] = \"ATK_ST_PIERCING_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PIERCING_PROPORTIONAL\"] = \"ATK_AOE_PIERCING_PROPORTIONAL\";\n        IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n        IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n        IconId[\"ATK_ST_PIERCING_FIXED\"] = \"ATK_ST_PIERCING_FIXED\";\n        IconId[\"ATK_AOE_PIERCING_FIXED\"] = \"ATK_AOE_PIERCING_FIXED\";\n        IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n        IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n        IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n        IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n        IconId[\"ATK_ST_HPSCALED\"] = \"ATK_ST_HPSCALED\";\n        IconId[\"ATK_AOE_HPSCALED\"] = \"ATK_AOE_HPSCALED\";\n        IconId[\"ATK_ST_BBGAUGESCALED\"] = \"ATK_ST_BBGAUGESCALED\";\n        IconId[\"ATK_AOE_BBGAUGESCALED\"] = \"ATK_AOE_BBGAUGESCALED\";\n        IconId[\"ATK_ST_USAGESCALED\"] = \"ATK_ST_USAGESCALED\";\n        IconId[\"ATK_AOE_USAGESCALED\"] = \"ATK_AOE_USAGESCALED\";\n        IconId[\"ATK_ST_ELEMENTSCALED\"] = \"ATK_ST_ELEMENTSCALED\";\n        IconId[\"ATK_AOE_ELEMENTSCALED\"] = \"ATK_AOE_ELEMENTSCALED\";\n    })(IconId || (IconId = {}));\n    /**\n     * @description Format of these IDs are `<passive|proc|conditional>:<original effect ID>:<stat>`.\n     * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n     * source of a given buff.\n     */\n    var BuffId;\n    (function (BuffId) {\n        BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n        BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n        BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n        BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n        BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n        BuffId[\"passive:1:def\"] = \"passive:1:def\";\n        BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n        BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n        BuffId[\"passive:2:elemental-hp\"] = \"passive:2:elemental-hp\";\n        BuffId[\"passive:2:elemental-atk\"] = \"passive:2:elemental-atk\";\n        BuffId[\"passive:2:elemental-def\"] = \"passive:2:elemental-def\";\n        BuffId[\"passive:2:elemental-rec\"] = \"passive:2:elemental-rec\";\n        BuffId[\"passive:2:elemental-crit\"] = \"passive:2:elemental-crit\";\n        BuffId[\"passive:3:type based-hp\"] = \"passive:3:type based-hp\";\n        BuffId[\"passive:3:type based-atk\"] = \"passive:3:type based-atk\";\n        BuffId[\"passive:3:type based-def\"] = \"passive:3:type based-def\";\n        BuffId[\"passive:3:type based-rec\"] = \"passive:3:type based-rec\";\n        BuffId[\"passive:3:type based-crit\"] = \"passive:3:type based-crit\";\n        BuffId[\"passive:4:resist-poison\"] = \"passive:4:resist-poison\";\n        BuffId[\"passive:4:resist-weak\"] = \"passive:4:resist-weak\";\n        BuffId[\"passive:4:resist-sick\"] = \"passive:4:resist-sick\";\n        BuffId[\"passive:4:resist-injury\"] = \"passive:4:resist-injury\";\n        BuffId[\"passive:4:resist-curse\"] = \"passive:4:resist-curse\";\n        BuffId[\"passive:4:resist-paralysis\"] = \"passive:4:resist-paralysis\";\n        BuffId[\"passive:5:mitigate-fire\"] = \"passive:5:mitigate-fire\";\n        BuffId[\"passive:5:mitigate-water\"] = \"passive:5:mitigate-water\";\n        BuffId[\"passive:5:mitigate-earth\"] = \"passive:5:mitigate-earth\";\n        BuffId[\"passive:5:mitigate-thunder\"] = \"passive:5:mitigate-thunder\";\n        BuffId[\"passive:5:mitigate-light\"] = \"passive:5:mitigate-light\";\n        BuffId[\"passive:5:mitigate-dark\"] = \"passive:5:mitigate-dark\";\n        BuffId[\"passive:5:mitigate-unknown\"] = \"passive:5:mitigate-unknown\";\n        BuffId[\"passive:8:mitigation\"] = \"passive:8:mitigation\";\n        BuffId[\"passive:9:gradual bc fill\"] = \"passive:9:gradual bc fill\";\n        BuffId[\"passive:10:hc efficacy\"] = \"passive:10:hc efficacy\";\n        BuffId[\"passive:11:hp conditional-atk\"] = \"passive:11:hp conditional-atk\";\n        BuffId[\"passive:11:hp conditional-def\"] = \"passive:11:hp conditional-def\";\n        BuffId[\"passive:11:hp conditional-rec\"] = \"passive:11:hp conditional-rec\";\n        BuffId[\"passive:11:hp conditional-crit\"] = \"passive:11:hp conditional-crit\";\n        BuffId[\"passive:12:hp conditional drop boost-bc\"] = \"passive:12:hp conditional drop boost-bc\";\n        BuffId[\"passive:12:hp conditional drop boost-hc\"] = \"passive:12:hp conditional drop boost-hc\";\n        BuffId[\"passive:12:hp conditional drop boost-item\"] = \"passive:12:hp conditional drop boost-item\";\n        BuffId[\"passive:12:hp conditional drop boost-zel\"] = \"passive:12:hp conditional drop boost-zel\";\n        BuffId[\"passive:12:hp conditional drop boost-karma\"] = \"passive:12:hp conditional drop boost-karma\";\n        BuffId[\"passive:13:bc fill on enemy defeat\"] = \"passive:13:bc fill on enemy defeat\";\n        BuffId[\"passive:14:chance mitigation\"] = \"passive:14:chance mitigation\";\n        BuffId[\"passive:15:heal on enemy defeat\"] = \"passive:15:heal on enemy defeat\";\n        BuffId[\"passive:16:heal on win\"] = \"passive:16:heal on win\";\n        BuffId[\"passive:17:hp absorb\"] = \"passive:17:hp absorb\";\n        BuffId[\"passive:19:drop boost-bc\"] = \"passive:19:drop boost-bc\";\n        BuffId[\"passive:19:drop boost-hc\"] = \"passive:19:drop boost-hc\";\n        BuffId[\"passive:19:drop boost-item\"] = \"passive:19:drop boost-item\";\n        BuffId[\"passive:19:drop boost-zel\"] = \"passive:19:drop boost-zel\";\n        BuffId[\"passive:19:drop boost-karma\"] = \"passive:19:drop boost-karma\";\n        BuffId[\"passive:20:chance inflict-poison\"] = \"passive:20:chance inflict-poison\";\n        BuffId[\"passive:20:chance inflict-weak\"] = \"passive:20:chance inflict-weak\";\n        BuffId[\"passive:20:chance inflict-sick\"] = \"passive:20:chance inflict-sick\";\n        BuffId[\"passive:20:chance inflict-injury\"] = \"passive:20:chance inflict-injury\";\n        BuffId[\"passive:20:chance inflict-curse\"] = \"passive:20:chance inflict-curse\";\n        BuffId[\"passive:20:chance inflict-paralysis\"] = \"passive:20:chance inflict-paralysis\";\n        BuffId[\"passive:20:chance inflict-atk down\"] = \"passive:20:chance inflict-atk down\";\n        BuffId[\"passive:20:chance inflict-def down\"] = \"passive:20:chance inflict-def down\";\n        BuffId[\"passive:20:chance inflict-rec down\"] = \"passive:20:chance inflict-rec down\";\n        BuffId[\"passive:20:chance inflict-unknown\"] = \"passive:20:chance inflict-unknown\";\n        BuffId[\"passive:21:first turn-atk\"] = \"passive:21:first turn-atk\";\n        BuffId[\"passive:21:first turn-def\"] = \"passive:21:first turn-def\";\n        BuffId[\"passive:21:first turn-rec\"] = \"passive:21:first turn-rec\";\n        BuffId[\"passive:21:first turn-crit\"] = \"passive:21:first turn-crit\";\n        BuffId[\"passive:23:bc fill on win\"] = \"passive:23:bc fill on win\";\n        BuffId[\"passive:24:heal on hit\"] = \"passive:24:heal on hit\";\n        BuffId[\"passive:25:bc fill on hit\"] = \"passive:25:bc fill on hit\";\n        BuffId[\"passive:26:chance damage reflect\"] = \"passive:26:chance damage reflect\";\n        BuffId[\"passive:27:target chance change\"] = \"passive:27:target chance change\";\n        BuffId[\"passive:28:hp conditional target chance change\"] = \"passive:28:hp conditional target chance change\";\n        BuffId[\"passive:29:chance def ignore\"] = \"passive:29:chance def ignore\";\n        BuffId[\"passive:30:bb gauge conditional-atk\"] = \"passive:30:bb gauge conditional-atk\";\n        BuffId[\"passive:30:bb gauge conditional-def\"] = \"passive:30:bb gauge conditional-def\";\n        BuffId[\"passive:30:bb gauge conditional-rec\"] = \"passive:30:bb gauge conditional-rec\";\n        BuffId[\"passive:30:bb gauge conditional-crit\"] = \"passive:30:bb gauge conditional-crit\";\n        BuffId[\"passive:31:spark-damage\"] = \"passive:31:spark-damage\";\n        BuffId[\"passive:31:spark-bc\"] = \"passive:31:spark-bc\";\n        BuffId[\"passive:31:spark-hc\"] = \"passive:31:spark-hc\";\n        BuffId[\"passive:31:spark-item\"] = \"passive:31:spark-item\";\n        BuffId[\"passive:31:spark-zel\"] = \"passive:31:spark-zel\";\n        BuffId[\"passive:31:spark-karma\"] = \"passive:31:spark-karma\";\n        BuffId[\"passive:32:bc efficacy\"] = \"passive:32:bc efficacy\";\n        BuffId[\"passive:33:gradual heal\"] = \"passive:33:gradual heal\";\n        BuffId[\"passive:34:critical damage\"] = \"passive:34:critical damage\";\n        BuffId[\"passive:35:bc fill on normal attack\"] = \"passive:35:bc fill on normal attack\";\n        BuffId[\"passive:36:extra action\"] = \"passive:36:extra action\";\n        BuffId[\"passive:37:hit count boost\"] = \"passive:37:hit count boost\";\n        BuffId[\"passive:40:converted-atk\"] = \"passive:40:converted-atk\";\n        BuffId[\"passive:40:converted-def\"] = \"passive:40:converted-def\";\n        BuffId[\"passive:40:converted-rec\"] = \"passive:40:converted-rec\";\n        BuffId[\"passive:41:unique element count-hp\"] = \"passive:41:unique element count-hp\";\n        BuffId[\"passive:41:unique element count-atk\"] = \"passive:41:unique element count-atk\";\n        BuffId[\"passive:41:unique element count-def\"] = \"passive:41:unique element count-def\";\n        BuffId[\"passive:41:unique element count-rec\"] = \"passive:41:unique element count-rec\";\n        BuffId[\"passive:41:unique element count-crit\"] = \"passive:41:unique element count-crit\";\n        BuffId[\"passive:42:gender-hp\"] = \"passive:42:gender-hp\";\n        BuffId[\"passive:42:gender-atk\"] = \"passive:42:gender-atk\";\n        BuffId[\"passive:42:gender-def\"] = \"passive:42:gender-def\";\n        BuffId[\"passive:42:gender-rec\"] = \"passive:42:gender-rec\";\n        BuffId[\"passive:42:gender-crit\"] = \"passive:42:gender-crit\";\n        BuffId[\"passive:43:chance damage to one\"] = \"passive:43:chance damage to one\";\n        BuffId[\"passive:44:flat-hp\"] = \"passive:44:flat-hp\";\n        BuffId[\"passive:44:flat-atk\"] = \"passive:44:flat-atk\";\n        BuffId[\"passive:44:flat-def\"] = \"passive:44:flat-def\";\n        BuffId[\"passive:44:flat-rec\"] = \"passive:44:flat-rec\";\n        BuffId[\"passive:44:flat-crit\"] = \"passive:44:flat-crit\";\n        BuffId[\"passive:45:critical damage reduction-base\"] = \"passive:45:critical damage reduction-base\";\n        BuffId[\"passive:45:critical damage reduction-buff\"] = \"passive:45:critical damage reduction-buff\";\n        BuffId[\"passive:46:hp scaled-atk\"] = \"passive:46:hp scaled-atk\";\n        BuffId[\"passive:46:hp scaled-def\"] = \"passive:46:hp scaled-def\";\n        BuffId[\"passive:46:hp scaled-rec\"] = \"passive:46:hp scaled-rec\";\n        BuffId[\"passive:47:bc fill on spark\"] = \"passive:47:bc fill on spark\";\n        BuffId[\"passive:48:bc cost reduction\"] = \"passive:48:bc cost reduction\";\n        BuffId[\"passive:49:bb gauge consumption reduction\"] = \"passive:49:bb gauge consumption reduction\";\n        BuffId[\"passive:50:elemental weakness damage-fire\"] = \"passive:50:elemental weakness damage-fire\";\n        BuffId[\"passive:50:elemental weakness damage-water\"] = \"passive:50:elemental weakness damage-water\";\n        BuffId[\"passive:50:elemental weakness damage-earth\"] = \"passive:50:elemental weakness damage-earth\";\n        BuffId[\"passive:50:elemental weakness damage-thunder\"] = \"passive:50:elemental weakness damage-thunder\";\n        BuffId[\"passive:50:elemental weakness damage-light\"] = \"passive:50:elemental weakness damage-light\";\n        BuffId[\"passive:50:elemental weakness damage-dark\"] = \"passive:50:elemental weakness damage-dark\";\n        BuffId[\"passive:50:elemental weakness damage-unknown\"] = \"passive:50:elemental weakness damage-unknown\";\n        BuffId[\"passive:53:critical damage-base\"] = \"passive:53:critical damage-base\";\n        BuffId[\"passive:53:critical damage-buff\"] = \"passive:53:critical damage-buff\";\n        BuffId[\"passive:53:element damage-base\"] = \"passive:53:element damage-base\";\n        BuffId[\"passive:53:element damage-buff\"] = \"passive:53:element damage-buff\";\n        BuffId[\"passive:53:critical rate-base\"] = \"passive:53:critical rate-base\";\n        BuffId[\"passive:53:critical rate-buff\"] = \"passive:53:critical rate-buff\";\n        BuffId[\"passive:55:hp conditional\"] = \"passive:55:hp conditional\";\n        BuffId[\"passive:58:guard mitigation\"] = \"passive:58:guard mitigation\";\n        BuffId[\"passive:59:bc fill when attacked on guard-percent\"] = \"passive:59:bc fill when attacked on guard-percent\";\n        BuffId[\"passive:59:bc fill when attacked on guard-flat\"] = \"passive:59:bc fill when attacked on guard-flat\";\n        BuffId[\"passive:61:bc fill on guard-percent\"] = \"passive:61:bc fill on guard-percent\";\n        BuffId[\"passive:61:bc fill on guard-flat\"] = \"passive:61:bc fill on guard-flat\";\n        BuffId[\"passive:62:mitigate-fire\"] = \"passive:62:mitigate-fire\";\n        BuffId[\"passive:62:mitigate-water\"] = \"passive:62:mitigate-water\";\n        BuffId[\"passive:62:mitigate-earth\"] = \"passive:62:mitigate-earth\";\n        BuffId[\"passive:62:mitigate-thunder\"] = \"passive:62:mitigate-thunder\";\n        BuffId[\"passive:62:mitigate-light\"] = \"passive:62:mitigate-light\";\n        BuffId[\"passive:62:mitigate-dark\"] = \"passive:62:mitigate-dark\";\n        BuffId[\"passive:62:mitigate-unknown\"] = \"passive:62:mitigate-unknown\";\n        BuffId[\"passive:63:first turn mitigate-fire\"] = \"passive:63:first turn mitigate-fire\";\n        BuffId[\"passive:63:first turn mitigate-water\"] = \"passive:63:first turn mitigate-water\";\n        BuffId[\"passive:63:first turn mitigate-earth\"] = \"passive:63:first turn mitigate-earth\";\n        BuffId[\"passive:63:first turn mitigate-thunder\"] = \"passive:63:first turn mitigate-thunder\";\n        BuffId[\"passive:63:first turn mitigate-light\"] = \"passive:63:first turn mitigate-light\";\n        BuffId[\"passive:63:first turn mitigate-dark\"] = \"passive:63:first turn mitigate-dark\";\n        BuffId[\"passive:63:first turn mitigate-unknown\"] = \"passive:63:first turn mitigate-unknown\";\n        BuffId[\"passive:64:attack boost-bb\"] = \"passive:64:attack boost-bb\";\n        BuffId[\"passive:64:attack boost-sbb\"] = \"passive:64:attack boost-sbb\";\n        BuffId[\"passive:64:attack boost-ubb\"] = \"passive:64:attack boost-ubb\";\n        BuffId[\"passive:65:bc fill on crit\"] = \"passive:65:bc fill on crit\";\n        BuffId[\"passive:66:add effect to skill-bb\"] = \"passive:66:add effect to skill-bb\";\n        BuffId[\"passive:66:add effect to skill-sbb\"] = \"passive:66:add effect to skill-sbb\";\n        BuffId[\"passive:66:add effect to skill-ubb\"] = \"passive:66:add effect to skill-ubb\";\n        BuffId[\"passive:69:chance ko resistance\"] = \"passive:69:chance ko resistance\";\n        BuffId[\"passive:70:od fill rate\"] = \"passive:70:od fill rate\";\n        BuffId[\"passive:71:inflict on hit-poison\"] = \"passive:71:inflict on hit-poison\";\n        BuffId[\"passive:71:inflict on hit-weak\"] = \"passive:71:inflict on hit-weak\";\n        BuffId[\"passive:71:inflict on hit-sick\"] = \"passive:71:inflict on hit-sick\";\n        BuffId[\"passive:71:inflict on hit-injury\"] = \"passive:71:inflict on hit-injury\";\n        BuffId[\"passive:71:inflict on hit-curse\"] = \"passive:71:inflict on hit-curse\";\n        BuffId[\"passive:71:inflict on hit-paralysis\"] = \"passive:71:inflict on hit-paralysis\";\n        BuffId[\"passive:72:effect at turn start-hp\"] = \"passive:72:effect at turn start-hp\";\n        BuffId[\"passive:72:effect at turn start-bc\"] = \"passive:72:effect at turn start-bc\";\n        BuffId[\"passive:73:resist-poison\"] = \"passive:73:resist-poison\";\n        BuffId[\"passive:73:resist-weak\"] = \"passive:73:resist-weak\";\n        BuffId[\"passive:73:resist-sick\"] = \"passive:73:resist-sick\";\n        BuffId[\"passive:73:resist-injury\"] = \"passive:73:resist-injury\";\n        BuffId[\"passive:73:resist-curse\"] = \"passive:73:resist-curse\";\n        BuffId[\"passive:73:resist-paralysis\"] = \"passive:73:resist-paralysis\";\n        BuffId[\"passive:73:resist-atk down\"] = \"passive:73:resist-atk down\";\n        BuffId[\"passive:73:resist-def down\"] = \"passive:73:resist-def down\";\n        BuffId[\"passive:73:resist-rec down\"] = \"passive:73:resist-rec down\";\n        BuffId[\"passive:74:ailment attack boost\"] = \"passive:74:ailment attack boost\";\n        BuffId[\"passive:75:spark vulnerability\"] = \"passive:75:spark vulnerability\";\n        BuffId[\"passive:77:spark damage reduction-base\"] = \"passive:77:spark damage reduction-base\";\n        BuffId[\"passive:77:spark damage reduction-buff\"] = \"passive:77:spark damage reduction-buff\";\n        BuffId[\"passive:78:damage taken conditional\"] = \"passive:78:damage taken conditional\";\n        BuffId[\"passive:79:bc fill after damage taken conditional-flat\"] = \"passive:79:bc fill after damage taken conditional-flat\";\n        BuffId[\"passive:79:bc fill after damage taken conditional-percent\"] = \"passive:79:bc fill after damage taken conditional-percent\";\n        BuffId[\"passive:80:damage dealt conditional\"] = \"passive:80:damage dealt conditional\";\n        BuffId[\"passive:81:bc fill after damage dealt conditional-flat\"] = \"passive:81:bc fill after damage dealt conditional-flat\";\n        BuffId[\"passive:81:bc fill after damage dealt conditional-percent\"] = \"passive:81:bc fill after damage dealt conditional-percent\";\n        BuffId[\"passive:82:bc received conditional\"] = \"passive:82:bc received conditional\";\n        BuffId[\"passive:83:bc fill after bc received conditional-flat\"] = \"passive:83:bc fill after bc received conditional-flat\";\n        BuffId[\"passive:83:bc fill after bc received conditional-percent\"] = \"passive:83:bc fill after bc received conditional-percent\";\n        BuffId[\"passive:84:hc received conditional\"] = \"passive:84:hc received conditional\";\n        BuffId[\"passive:85:bc fill after hc received conditional-flat\"] = \"passive:85:bc fill after hc received conditional-flat\";\n        BuffId[\"passive:85:bc fill after hc received conditional-percent\"] = \"passive:85:bc fill after hc received conditional-percent\";\n        BuffId[\"passive:86:spark count conditional\"] = \"passive:86:spark count conditional\";\n        BuffId[\"passive:87:bc fill after spark count conditional-flat\"] = \"passive:87:bc fill after spark count conditional-flat\";\n        BuffId[\"passive:87:bc fill after spark count conditional-percent\"] = \"passive:87:bc fill after spark count conditional-percent\";\n        BuffId[\"passive:88:on guard conditional\"] = \"passive:88:on guard conditional\";\n        BuffId[\"passive:89:on critical hit conditional\"] = \"passive:89:on critical hit conditional\";\n        BuffId[\"passive:90:inflict on crit-poison\"] = \"passive:90:inflict on crit-poison\";\n        BuffId[\"passive:90:inflict on crit-weak\"] = \"passive:90:inflict on crit-weak\";\n        BuffId[\"passive:90:inflict on crit-sick\"] = \"passive:90:inflict on crit-sick\";\n        BuffId[\"passive:90:inflict on crit-injury\"] = \"passive:90:inflict on crit-injury\";\n        BuffId[\"passive:90:inflict on crit-curse\"] = \"passive:90:inflict on crit-curse\";\n        BuffId[\"passive:90:inflict on crit-paralysis\"] = \"passive:90:inflict on crit-paralysis\";\n        BuffId[\"passive:91:first turn spark\"] = \"passive:91:first turn spark\";\n        BuffId[\"passive:92:negate defense ignore\"] = \"passive:92:negate defense ignore\";\n        BuffId[\"passive:93:add element-fire\"] = \"passive:93:add element-fire\";\n        BuffId[\"passive:93:add element-water\"] = \"passive:93:add element-water\";\n        BuffId[\"passive:93:add element-earth\"] = \"passive:93:add element-earth\";\n        BuffId[\"passive:93:add element-thunder\"] = \"passive:93:add element-thunder\";\n        BuffId[\"passive:93:add element-light\"] = \"passive:93:add element-light\";\n        BuffId[\"passive:93:add element-dark\"] = \"passive:93:add element-dark\";\n        BuffId[\"passive:93:add element-unknown\"] = \"passive:93:add element-unknown\";\n        BuffId[\"passive:96:aoe normal attack\"] = \"passive:96:aoe normal attack\";\n        BuffId[\"passive:97:player exp boost\"] = \"passive:97:player exp boost\";\n        BuffId[\"passive:100:spark critical\"] = \"passive:100:spark critical\";\n        BuffId[\"passive:101:heal on spark\"] = \"passive:101:heal on spark\";\n        BuffId[\"passive:102:add element-fire\"] = \"passive:102:add element-fire\";\n        BuffId[\"passive:102:add element-water\"] = \"passive:102:add element-water\";\n        BuffId[\"passive:102:add element-earth\"] = \"passive:102:add element-earth\";\n        BuffId[\"passive:102:add element-thunder\"] = \"passive:102:add element-thunder\";\n        BuffId[\"passive:102:add element-light\"] = \"passive:102:add element-light\";\n        BuffId[\"passive:102:add element-dark\"] = \"passive:102:add element-dark\";\n        BuffId[\"passive:102:add element-unknown\"] = \"passive:102:add element-unknown\";\n        BuffId[\"passive:103:hp conditional attack boost-bb\"] = \"passive:103:hp conditional attack boost-bb\";\n        BuffId[\"passive:103:hp conditional attack boost-sbb\"] = \"passive:103:hp conditional attack boost-sbb\";\n        BuffId[\"passive:103:hp conditional attack boost-ubb\"] = \"passive:103:hp conditional attack boost-ubb\";\n        BuffId[\"passive:104:hp conditional spark-damage\"] = \"passive:104:hp conditional spark-damage\";\n        BuffId[\"passive:104:hp conditional spark-bc\"] = \"passive:104:hp conditional spark-bc\";\n        BuffId[\"passive:104:hp conditional spark-hc\"] = \"passive:104:hp conditional spark-hc\";\n        BuffId[\"passive:104:hp conditional spark-item\"] = \"passive:104:hp conditional spark-item\";\n        BuffId[\"passive:104:hp conditional spark-zel\"] = \"passive:104:hp conditional spark-zel\";\n        BuffId[\"passive:104:hp conditional spark-karma\"] = \"passive:104:hp conditional spark-karma\";\n        BuffId[\"passive:105:turn scaled-atk\"] = \"passive:105:turn scaled-atk\";\n        BuffId[\"passive:105:turn scaled-def\"] = \"passive:105:turn scaled-def\";\n        BuffId[\"passive:105:turn scaled-rec\"] = \"passive:105:turn scaled-rec\";\n        BuffId[\"passive:106:on overdrive conditional\"] = \"passive:106:on overdrive conditional\";\n        BuffId[\"passive:107:add effect to leader skill\"] = \"passive:107:add effect to leader skill\";\n        BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n        BuffId[\"proc:1:attack\"] = \"proc:1:attack\";\n        BuffId[\"proc:2:burst heal\"] = \"proc:2:burst heal\";\n        BuffId[\"proc:3:gradual heal\"] = \"proc:3:gradual heal\";\n        BuffId[\"proc:4:bc fill-flat\"] = \"proc:4:bc fill-flat\";\n        BuffId[\"proc:4:bc fill-percent\"] = \"proc:4:bc fill-percent\";\n        BuffId[\"proc:5:regular or elemental-atk\"] = \"proc:5:regular or elemental-atk\";\n        BuffId[\"proc:5:regular or elemental-def\"] = \"proc:5:regular or elemental-def\";\n        BuffId[\"proc:5:regular or elemental-rec\"] = \"proc:5:regular or elemental-rec\";\n        BuffId[\"proc:5:regular or elemental-crit\"] = \"proc:5:regular or elemental-crit\";\n        BuffId[\"proc:6:drop boost-bc\"] = \"proc:6:drop boost-bc\";\n        BuffId[\"proc:6:drop boost-hc\"] = \"proc:6:drop boost-hc\";\n        BuffId[\"proc:6:drop boost-item\"] = \"proc:6:drop boost-item\";\n        BuffId[\"proc:7:guaranteed ko resistance\"] = \"proc:7:guaranteed ko resistance\";\n        BuffId[\"proc:8:max hp boost-flat\"] = \"proc:8:max hp boost-flat\";\n        BuffId[\"proc:8:max hp boost-percent\"] = \"proc:8:max hp boost-percent\";\n        BuffId[\"proc:9:regular or elemental reduction-atk\"] = \"proc:9:regular or elemental reduction-atk\";\n        BuffId[\"proc:9:regular or elemental reduction-def\"] = \"proc:9:regular or elemental reduction-def\";\n        BuffId[\"proc:9:regular or elemental reduction-rec\"] = \"proc:9:regular or elemental reduction-rec\";\n        BuffId[\"proc:9:regular or elemental reduction-unknown\"] = \"proc:9:regular or elemental reduction-unknown\";\n        BuffId[\"proc:10:cleanse-poison\"] = \"proc:10:cleanse-poison\";\n        BuffId[\"proc:10:cleanse-weak\"] = \"proc:10:cleanse-weak\";\n        BuffId[\"proc:10:cleanse-sick\"] = \"proc:10:cleanse-sick\";\n        BuffId[\"proc:10:cleanse-injury\"] = \"proc:10:cleanse-injury\";\n        BuffId[\"proc:10:cleanse-curse\"] = \"proc:10:cleanse-curse\";\n        BuffId[\"proc:10:cleanse-paralysis\"] = \"proc:10:cleanse-paralysis\";\n        BuffId[\"proc:10:cleanse-atk down\"] = \"proc:10:cleanse-atk down\";\n        BuffId[\"proc:10:cleanse-def down\"] = \"proc:10:cleanse-def down\";\n        BuffId[\"proc:10:cleanse-rec down\"] = \"proc:10:cleanse-rec down\";\n        BuffId[\"proc:10:cleanse-unknown\"] = \"proc:10:cleanse-unknown\";\n        BuffId[\"proc:11:chance inflict-poison\"] = \"proc:11:chance inflict-poison\";\n        BuffId[\"proc:11:chance inflict-weak\"] = \"proc:11:chance inflict-weak\";\n        BuffId[\"proc:11:chance inflict-sick\"] = \"proc:11:chance inflict-sick\";\n        BuffId[\"proc:11:chance inflict-injury\"] = \"proc:11:chance inflict-injury\";\n        BuffId[\"proc:11:chance inflict-curse\"] = \"proc:11:chance inflict-curse\";\n        BuffId[\"proc:11:chance inflict-paralysis\"] = \"proc:11:chance inflict-paralysis\";\n        BuffId[\"proc:11:chance inflict-atk down\"] = \"proc:11:chance inflict-atk down\";\n        BuffId[\"proc:11:chance inflict-def down\"] = \"proc:11:chance inflict-def down\";\n        BuffId[\"proc:11:chance inflict-rec down\"] = \"proc:11:chance inflict-rec down\";\n        BuffId[\"proc:11:chance inflict-unknown\"] = \"proc:11:chance inflict-unknown\";\n        BuffId[\"proc:12:guaranteed revive\"] = \"proc:12:guaranteed revive\";\n        BuffId[\"proc:13:random attack\"] = \"proc:13:random attack\";\n        BuffId[\"proc:14:hp absorb attack\"] = \"proc:14:hp absorb attack\";\n        BuffId[\"proc:16:mitigate-fire\"] = \"proc:16:mitigate-fire\";\n        BuffId[\"proc:16:mitigate-water\"] = \"proc:16:mitigate-water\";\n        BuffId[\"proc:16:mitigate-earth\"] = \"proc:16:mitigate-earth\";\n        BuffId[\"proc:16:mitigate-thunder\"] = \"proc:16:mitigate-thunder\";\n        BuffId[\"proc:16:mitigate-light\"] = \"proc:16:mitigate-light\";\n        BuffId[\"proc:16:mitigate-dark\"] = \"proc:16:mitigate-dark\";\n        BuffId[\"proc:16:mitigate-all\"] = \"proc:16:mitigate-all\";\n        BuffId[\"proc:16:mitigate-unknown\"] = \"proc:16:mitigate-unknown\";\n        BuffId[\"proc:17:resist-poison\"] = \"proc:17:resist-poison\";\n        BuffId[\"proc:17:resist-weak\"] = \"proc:17:resist-weak\";\n        BuffId[\"proc:17:resist-sick\"] = \"proc:17:resist-sick\";\n        BuffId[\"proc:17:resist-injury\"] = \"proc:17:resist-injury\";\n        BuffId[\"proc:17:resist-curse\"] = \"proc:17:resist-curse\";\n        BuffId[\"proc:17:resist-paralysis\"] = \"proc:17:resist-paralysis\";\n        BuffId[\"proc:18:mitigation\"] = \"proc:18:mitigation\";\n        BuffId[\"proc:19:gradual bc fill\"] = \"proc:19:gradual bc fill\";\n        BuffId[\"proc:20:bc fill on hit\"] = \"proc:20:bc fill on hit\";\n        BuffId[\"proc:22:defense ignore\"] = \"proc:22:defense ignore\";\n        BuffId[\"proc:23:spark damage\"] = \"proc:23:spark damage\";\n        BuffId[\"proc:24:converted-atk\"] = \"proc:24:converted-atk\";\n        BuffId[\"proc:24:converted-def\"] = \"proc:24:converted-def\";\n        BuffId[\"proc:24:converted-rec\"] = \"proc:24:converted-rec\";\n        BuffId[\"proc:26:hit count boost\"] = \"proc:26:hit count boost\";\n        BuffId[\"proc:27:proportional attack\"] = \"proc:27:proportional attack\";\n        BuffId[\"proc:28:fixed attack\"] = \"proc:28:fixed attack\";\n        BuffId[\"proc:29:multi-element attack\"] = \"proc:29:multi-element attack\";\n        BuffId[\"proc:30:add element-fire\"] = \"proc:30:add element-fire\";\n        BuffId[\"proc:30:add element-water\"] = \"proc:30:add element-water\";\n        BuffId[\"proc:30:add element-earth\"] = \"proc:30:add element-earth\";\n        BuffId[\"proc:30:add element-thunder\"] = \"proc:30:add element-thunder\";\n        BuffId[\"proc:30:add element-light\"] = \"proc:30:add element-light\";\n        BuffId[\"proc:30:add element-dark\"] = \"proc:30:add element-dark\";\n        BuffId[\"proc:30:add element-unknown\"] = \"proc:30:add element-unknown\";\n        BuffId[\"proc:31:bc fill-flat\"] = \"proc:31:bc fill-flat\";\n        BuffId[\"proc:31:bc fill-percent\"] = \"proc:31:bc fill-percent\";\n        BuffId[\"proc:32:element shift-fire\"] = \"proc:32:element shift-fire\";\n        BuffId[\"proc:32:element shift-water\"] = \"proc:32:element shift-water\";\n        BuffId[\"proc:32:element shift-earth\"] = \"proc:32:element shift-earth\";\n        BuffId[\"proc:32:element shift-thunder\"] = \"proc:32:element shift-thunder\";\n        BuffId[\"proc:32:element shift-light\"] = \"proc:32:element shift-light\";\n        BuffId[\"proc:32:element shift-dark\"] = \"proc:32:element shift-dark\";\n        BuffId[\"proc:32:element shift-unknown\"] = \"proc:32:element shift-unknown\";\n        BuffId[\"proc:33:buff wipe\"] = \"proc:33:buff wipe\";\n        BuffId[\"proc:34:bc drain-flat\"] = \"proc:34:bc drain-flat\";\n        BuffId[\"proc:34:bc drain-percent\"] = \"proc:34:bc drain-percent\";\n        BuffId[\"proc:36:ls lock\"] = \"proc:36:ls lock\";\n        BuffId[\"proc:37:summon\"] = \"proc:37:summon\";\n        BuffId[\"proc:38:cleanse-poison\"] = \"proc:38:cleanse-poison\";\n        BuffId[\"proc:38:cleanse-weak\"] = \"proc:38:cleanse-weak\";\n        BuffId[\"proc:38:cleanse-sick\"] = \"proc:38:cleanse-sick\";\n        BuffId[\"proc:38:cleanse-injury\"] = \"proc:38:cleanse-injury\";\n        BuffId[\"proc:38:cleanse-curse\"] = \"proc:38:cleanse-curse\";\n        BuffId[\"proc:38:cleanse-paralysis\"] = \"proc:38:cleanse-paralysis\";\n        BuffId[\"proc:38:cleanse-atk down\"] = \"proc:38:cleanse-atk down\";\n        BuffId[\"proc:38:cleanse-def down\"] = \"proc:38:cleanse-def down\";\n        BuffId[\"proc:38:cleanse-rec down\"] = \"proc:38:cleanse-rec down\";\n        BuffId[\"proc:38:cleanse-unknown\"] = \"proc:38:cleanse-unknown\";\n        BuffId[\"proc:39:mitigate-fire\"] = \"proc:39:mitigate-fire\";\n        BuffId[\"proc:39:mitigate-water\"] = \"proc:39:mitigate-water\";\n        BuffId[\"proc:39:mitigate-earth\"] = \"proc:39:mitigate-earth\";\n        BuffId[\"proc:39:mitigate-thunder\"] = \"proc:39:mitigate-thunder\";\n        BuffId[\"proc:39:mitigate-light\"] = \"proc:39:mitigate-light\";\n        BuffId[\"proc:39:mitigate-dark\"] = \"proc:39:mitigate-dark\";\n        BuffId[\"proc:39:mitigate-unknown\"] = \"proc:39:mitigate-unknown\";\n        BuffId[\"proc:40:add ailment-poison\"] = \"proc:40:add ailment-poison\";\n        BuffId[\"proc:40:add ailment-weak\"] = \"proc:40:add ailment-weak\";\n        BuffId[\"proc:40:add ailment-sick\"] = \"proc:40:add ailment-sick\";\n        BuffId[\"proc:40:add ailment-injury\"] = \"proc:40:add ailment-injury\";\n        BuffId[\"proc:40:add ailment-curse\"] = \"proc:40:add ailment-curse\";\n        BuffId[\"proc:40:add ailment-paralysis\"] = \"proc:40:add ailment-paralysis\";\n        BuffId[\"proc:40:add ailment-atk down\"] = \"proc:40:add ailment-atk down\";\n        BuffId[\"proc:40:add ailment-def down\"] = \"proc:40:add ailment-def down\";\n        BuffId[\"proc:40:add ailment-rec down\"] = \"proc:40:add ailment-rec down\";\n        BuffId[\"proc:40:add ailment-unknown\"] = \"proc:40:add ailment-unknown\";\n        BuffId[\"proc:42:sacrificial attack\"] = \"proc:42:sacrificial attack\";\n        BuffId[\"proc:42:instant death\"] = \"proc:42:instant death\";\n        BuffId[\"proc:43:burst od fill\"] = \"proc:43:burst od fill\";\n        BuffId[\"proc:44:damage over time\"] = \"proc:44:damage over time\";\n        BuffId[\"proc:45:attack boost-bb\"] = \"proc:45:attack boost-bb\";\n        BuffId[\"proc:45:attack boost-sbb\"] = \"proc:45:attack boost-sbb\";\n        BuffId[\"proc:45:attack boost-ubb\"] = \"proc:45:attack boost-ubb\";\n        BuffId[\"proc:46:non-lethal proportional attack\"] = \"proc:46:non-lethal proportional attack\";\n        BuffId[\"proc:47:hp scaled attack\"] = \"proc:47:hp scaled attack\";\n        BuffId[\"proc:48:piercing attack-base\"] = \"proc:48:piercing attack-base\";\n        BuffId[\"proc:48:piercing attack-current\"] = \"proc:48:piercing attack-current\";\n        BuffId[\"proc:48:piercing attack-fixed\"] = \"proc:48:piercing attack-fixed\";\n        BuffId[\"proc:48:piercing attack-unknown\"] = \"proc:48:piercing attack-unknown\";\n        BuffId[\"proc:49:chance instant death\"] = \"proc:49:chance instant death\";\n        BuffId[\"proc:50:chance damage reflect\"] = \"proc:50:chance damage reflect\";\n        BuffId[\"proc:51:add to attack-atk down\"] = \"proc:51:add to attack-atk down\";\n        BuffId[\"proc:51:add to attack-def down\"] = \"proc:51:add to attack-def down\";\n        BuffId[\"proc:51:add to attack-rec down\"] = \"proc:51:add to attack-rec down\";\n        BuffId[\"proc:52:bc efficacy\"] = \"proc:52:bc efficacy\";\n        BuffId[\"proc:53:inflict on hit-poison\"] = \"proc:53:inflict on hit-poison\";\n        BuffId[\"proc:53:inflict on hit-weak\"] = \"proc:53:inflict on hit-weak\";\n        BuffId[\"proc:53:inflict on hit-sick\"] = \"proc:53:inflict on hit-sick\";\n        BuffId[\"proc:53:inflict on hit-injury\"] = \"proc:53:inflict on hit-injury\";\n        BuffId[\"proc:53:inflict on hit-curse\"] = \"proc:53:inflict on hit-curse\";\n        BuffId[\"proc:53:inflict on hit-paralysis\"] = \"proc:53:inflict on hit-paralysis\";\n        BuffId[\"proc:54:critical damage boost\"] = \"proc:54:critical damage boost\";\n        BuffId[\"proc:55:elemental weakness damage-fire\"] = \"proc:55:elemental weakness damage-fire\";\n        BuffId[\"proc:55:elemental weakness damage-water\"] = \"proc:55:elemental weakness damage-water\";\n        BuffId[\"proc:55:elemental weakness damage-earth\"] = \"proc:55:elemental weakness damage-earth\";\n        BuffId[\"proc:55:elemental weakness damage-thunder\"] = \"proc:55:elemental weakness damage-thunder\";\n        BuffId[\"proc:55:elemental weakness damage-light\"] = \"proc:55:elemental weakness damage-light\";\n        BuffId[\"proc:55:elemental weakness damage-dark\"] = \"proc:55:elemental weakness damage-dark\";\n        BuffId[\"proc:55:elemental weakness damage-unknown\"] = \"proc:55:elemental weakness damage-unknown\";\n        BuffId[\"proc:56:chance ko resistance\"] = \"proc:56:chance ko resistance\";\n        BuffId[\"proc:57:bc drop resistance-base\"] = \"proc:57:bc drop resistance-base\";\n        BuffId[\"proc:57:bc drop resistance-buff\"] = \"proc:57:bc drop resistance-buff\";\n        BuffId[\"proc:57:hc drop resistance-base\"] = \"proc:57:hc drop resistance-base\";\n        BuffId[\"proc:57:hc drop resistance-buff\"] = \"proc:57:hc drop resistance-buff\";\n        BuffId[\"proc:58:spark vulnerability\"] = \"proc:58:spark vulnerability\";\n        BuffId[\"proc:59:attack reduction-bb\"] = \"proc:59:attack reduction-bb\";\n        BuffId[\"proc:59:attack reduction-sbb\"] = \"proc:59:attack reduction-sbb\";\n        BuffId[\"proc:59:attack reduction-ubb\"] = \"proc:59:attack reduction-ubb\";\n        BuffId[\"proc:61:party bb gauge-scaled attack\"] = \"proc:61:party bb gauge-scaled attack\";\n        BuffId[\"proc:61:party bc drain\"] = \"proc:61:party bc drain\";\n        BuffId[\"proc:62:barrier-all\"] = \"proc:62:barrier-all\";\n        BuffId[\"proc:62:barrier-fire\"] = \"proc:62:barrier-fire\";\n        BuffId[\"proc:62:barrier-water\"] = \"proc:62:barrier-water\";\n        BuffId[\"proc:62:barrier-earth\"] = \"proc:62:barrier-earth\";\n        BuffId[\"proc:62:barrier-thunder\"] = \"proc:62:barrier-thunder\";\n        BuffId[\"proc:62:barrier-light\"] = \"proc:62:barrier-light\";\n        BuffId[\"proc:62:barrier-dark\"] = \"proc:62:barrier-dark\";\n        BuffId[\"proc:62:barrier-unknown\"] = \"proc:62:barrier-unknown\";\n        BuffId[\"proc:64:consecutive usage attack\"] = \"proc:64:consecutive usage attack\";\n        BuffId[\"proc:65:ailment attack boost\"] = \"proc:65:ailment attack boost\";\n        BuffId[\"proc:66:chance revive\"] = \"proc:66:chance revive\";\n        BuffId[\"proc:67:bc fill on spark\"] = \"proc:67:bc fill on spark\";\n        BuffId[\"proc:68:guard mitigation\"] = \"proc:68:guard mitigation\";\n        BuffId[\"proc:69:bc fill on guard-flat\"] = \"proc:69:bc fill on guard-flat\";\n        BuffId[\"proc:69:bc fill on guard-percent\"] = \"proc:69:bc fill on guard-percent\";\n        BuffId[\"proc:71:bc efficacy reduction\"] = \"proc:71:bc efficacy reduction\";\n        BuffId[\"proc:73:resist-atk down\"] = \"proc:73:resist-atk down\";\n        BuffId[\"proc:73:resist-def down\"] = \"proc:73:resist-def down\";\n        BuffId[\"proc:73:resist-rec down\"] = \"proc:73:resist-rec down\";\n        BuffId[\"proc:75:element squad-scaled attack\"] = \"proc:75:element squad-scaled attack\";\n        BuffId[\"proc:76:extra action\"] = \"proc:76:extra action\";\n        BuffId[\"proc:78:self stat boost-atk\"] = \"proc:78:self stat boost-atk\";\n        BuffId[\"proc:78:self stat boost-def\"] = \"proc:78:self stat boost-def\";\n        BuffId[\"proc:78:self stat boost-rec\"] = \"proc:78:self stat boost-rec\";\n        BuffId[\"proc:78:self stat boost-crit\"] = \"proc:78:self stat boost-crit\";\n        BuffId[\"proc:79:player exp boost\"] = \"proc:79:player exp boost\";\n        BuffId[\"proc:82:resummon\"] = \"proc:82:resummon\";\n        BuffId[\"proc:83:spark critical\"] = \"proc:83:spark critical\";\n        BuffId[\"proc:84:od fill rate\"] = \"proc:84:od fill rate\";\n        BuffId[\"proc:85:heal on hit\"] = \"proc:85:heal on hit\";\n        BuffId[\"proc:86:hp absorb\"] = \"proc:86:hp absorb\";\n        BuffId[\"proc:87:heal on spark\"] = \"proc:87:heal on spark\";\n        BuffId[\"proc:88:self spark damage\"] = \"proc:88:self spark damage\";\n        BuffId[\"proc:89:self converted-atk\"] = \"proc:89:self converted-atk\";\n        BuffId[\"proc:89:self converted-def\"] = \"proc:89:self converted-def\";\n        BuffId[\"proc:89:self converted-rec\"] = \"proc:89:self converted-rec\";\n        BuffId[\"proc:92:self max hp boost-flat\"] = \"proc:92:self max hp boost-flat\";\n        BuffId[\"proc:92:self max hp boost-percent\"] = \"proc:92:self max hp boost-percent\";\n        BuffId[\"proc:93:critical damage resistance-base\"] = \"proc:93:critical damage resistance-base\";\n        BuffId[\"proc:93:critical damage resistance-buff\"] = \"proc:93:critical damage resistance-buff\";\n        BuffId[\"proc:93:element damage resistance-base\"] = \"proc:93:element damage resistance-base\";\n        BuffId[\"proc:93:element damage resistance-buff\"] = \"proc:93:element damage resistance-buff\";\n        BuffId[\"proc:93:spark damage resistance-base\"] = \"proc:93:spark damage resistance-base\";\n        BuffId[\"proc:93:spark damage resistance-buff\"] = \"proc:93:spark damage resistance-buff\";\n        BuffId[\"proc:94:aoe normal attack\"] = \"proc:94:aoe normal attack\";\n        BuffId[\"proc:95:sphere lock\"] = \"proc:95:sphere lock\";\n        BuffId[\"proc:96:es lock\"] = \"proc:96:es lock\";\n        BuffId[\"proc:97:element specific attack\"] = \"proc:97:element specific attack\";\n        BuffId[\"proc:113:gradual od fill\"] = \"proc:113:gradual od fill\";\n        BuffId[\"UNKNOWN_CONDITIONAL_EFFECT_ID\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n        BuffId[\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\"] = \"UNKNOWN_CONDITIONAL_BUFF_PARAMS\";\n        BuffId[\"conditional:1:attack buff\"] = \"conditional:1:attack buff\";\n        BuffId[\"conditional:3:defense buff\"] = \"conditional:3:defense buff\";\n        BuffId[\"conditional:5:recovery buff\"] = \"conditional:5:recovery buff\";\n        BuffId[\"conditional:7:critical hit rate buff\"] = \"conditional:7:critical hit rate buff\";\n        BuffId[\"conditional:8:gradual heal\"] = \"conditional:8:gradual heal\";\n        BuffId[\"conditional:12:guaranteed ko resistance\"] = \"conditional:12:guaranteed ko resistance\";\n        BuffId[\"conditional:13:elemental attack buff\"] = \"conditional:13:elemental attack buff\";\n        BuffId[\"conditional:14:elemental defense buff\"] = \"conditional:14:elemental defense buff\";\n        BuffId[\"conditional:21:fire mitigation\"] = \"conditional:21:fire mitigation\";\n        BuffId[\"conditional:22:water mitigation\"] = \"conditional:22:water mitigation\";\n        BuffId[\"conditional:23:earth mitigation\"] = \"conditional:23:earth mitigation\";\n        BuffId[\"conditional:24:thunder mitigation\"] = \"conditional:24:thunder mitigation\";\n        BuffId[\"conditional:25:light mitigation\"] = \"conditional:25:light mitigation\";\n        BuffId[\"conditional:26:dark mitigation\"] = \"conditional:26:dark mitigation\";\n        BuffId[\"conditional:36:mitigation\"] = \"conditional:36:mitigation\";\n        BuffId[\"conditional:37:gradual bc fill\"] = \"conditional:37:gradual bc fill\";\n        BuffId[\"conditional:40:spark damage\"] = \"conditional:40:spark damage\";\n        BuffId[\"conditional:51:add fire element\"] = \"conditional:51:add fire element\";\n        BuffId[\"conditional:52:add water element\"] = \"conditional:52:add water element\";\n        BuffId[\"conditional:53:add earth element\"] = \"conditional:53:add earth element\";\n        BuffId[\"conditional:54:add thunder element\"] = \"conditional:54:add thunder element\";\n        BuffId[\"conditional:55:add light element\"] = \"conditional:55:add light element\";\n        BuffId[\"conditional:56:add dark element\"] = \"conditional:56:add dark element\";\n        BuffId[\"conditional:72:attack boost-bb\"] = \"conditional:72:attack boost-bb\";\n        BuffId[\"conditional:72:attack boost-sbb\"] = \"conditional:72:attack boost-sbb\";\n        BuffId[\"conditional:72:attack boost-ubb\"] = \"conditional:72:attack boost-ubb\";\n        BuffId[\"conditional:74:add atk down to attack\"] = \"conditional:74:add atk down to attack\";\n        BuffId[\"conditional:75:add def down to attack\"] = \"conditional:75:add def down to attack\";\n        BuffId[\"conditional:84:critical damage\"] = \"conditional:84:critical damage\";\n        BuffId[\"conditional:91:chance ko resistance\"] = \"conditional:91:chance ko resistance\";\n        BuffId[\"conditional:95:fire barrier\"] = \"conditional:95:fire barrier\";\n        BuffId[\"conditional:96:water barrier\"] = \"conditional:96:water barrier\";\n        BuffId[\"conditional:97:earth barrier\"] = \"conditional:97:earth barrier\";\n        BuffId[\"conditional:98:thunder barrier\"] = \"conditional:98:thunder barrier\";\n        BuffId[\"conditional:99:light barrier\"] = \"conditional:99:light barrier\";\n        BuffId[\"conditional:100:dark barrier\"] = \"conditional:100:dark barrier\";\n        BuffId[\"conditional:111:bc fill on spark\"] = \"conditional:111:bc fill on spark\";\n        BuffId[\"conditional:124:self attack buff\"] = \"conditional:124:self attack buff\";\n        BuffId[\"conditional:125:self defense buff\"] = \"conditional:125:self defense buff\";\n        BuffId[\"conditional:131:spark critical\"] = \"conditional:131:spark critical\";\n        BuffId[\"conditional:132:od fill rate\"] = \"conditional:132:od fill rate\";\n        BuffId[\"conditional:133:heal on hit\"] = \"conditional:133:heal on hit\";\n        BuffId[\"conditional:143:critical damage reduction-base\"] = \"conditional:143:critical damage reduction-base\";\n        BuffId[\"conditional:143:critical damage reduction-buff\"] = \"conditional:143:critical damage reduction-buff\";\n        BuffId[\"conditional:144:spark damage reduction-base\"] = \"conditional:144:spark damage reduction-base\";\n        BuffId[\"conditional:144:spark damage reduction-buff\"] = \"conditional:144:spark damage reduction-buff\";\n        BuffId[\"conditional:145:elemental weakness damage reduction-base\"] = \"conditional:145:elemental weakness damage reduction-base\";\n        BuffId[\"conditional:145:elemental weakness damage reduction-buff\"] = \"conditional:145:elemental weakness damage reduction-buff\";\n        BuffId[\"conditional:153:chance inflict atk down on hit\"] = \"conditional:153:chance inflict atk down on hit\";\n        BuffId[\"conditional:10001:stealth\"] = \"conditional:10001:stealth\";\n        BuffId[\"conditional:10001:stealth-atk\"] = \"conditional:10001:stealth-atk\";\n        BuffId[\"conditional:10001:stealth-def\"] = \"conditional:10001:stealth-def\";\n        BuffId[\"conditional:10001:stealth-rec\"] = \"conditional:10001:stealth-rec\";\n        BuffId[\"conditional:10001:stealth-crit\"] = \"conditional:10001:stealth-crit\";\n        BuffId[\"conditional:10500:shield-all\"] = \"conditional:10500:shield-all\";\n        BuffId[\"conditional:10500:shield-fire\"] = \"conditional:10500:shield-fire\";\n        BuffId[\"conditional:10500:shield-water\"] = \"conditional:10500:shield-water\";\n        BuffId[\"conditional:10500:shield-earth\"] = \"conditional:10500:shield-earth\";\n        BuffId[\"conditional:10500:shield-thunder\"] = \"conditional:10500:shield-thunder\";\n        BuffId[\"conditional:10500:shield-light\"] = \"conditional:10500:shield-light\";\n        BuffId[\"conditional:10500:shield-dark\"] = \"conditional:10500:shield-dark\";\n        BuffId[\"conditional:10500:shield-unknown\"] = \"conditional:10500:shield-unknown\";\n    })(BuffId || (BuffId = {}));\n\n    /**\n     * @description Helper function for creating an entry to be used in the `sources`\n     * property of {@link IBuff}.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourceEntryFromContext(context) {\n        return `${context.source}-${context.sourceId}`;\n    }\n    /**\n     * @description Helper function for creating an entries array to be used in the `sources`\n     * property of {@link IBuff}. It handles setting the order of the sources.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourcesFromContext(context) {\n        const resultArray = Array.isArray(context.previousSources)\n            ? context.previousSources.slice()\n            : [];\n        // Ensure that the current source is at the beginning of the array\n        resultArray.unshift(createSourceEntryFromContext(context));\n        return resultArray;\n    }\n    /**\n     * @description Given the conditions in an extra skill effect, normalize them into\n     * a simpler object containing the IDs of each condition type.\n     * @param effect Extra skill effect to process conditions from.\n     * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n     */\n    function processExtraSkillConditions(effect) {\n        const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n        const aggregate = {\n            units: new Set(),\n            items: new Set(),\n            sphereTypes: new Set(),\n            unknowns: new Set(),\n        };\n        conditions.forEach((condition, index) => {\n            if ('sphere category required (raw)' in condition) {\n                aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n            }\n            else if ('item required' in condition) {\n                condition['item required'].forEach((item) => {\n                    aggregate.items.add(item);\n                });\n            }\n            else if ('unit required' in condition) {\n                condition['unit required'].forEach((unit) => {\n                    aggregate.units.add(`${unit.id}`);\n                });\n            }\n            else {\n                aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n            }\n        });\n        // filter out properties that have no entries\n        const result = Object.entries(aggregate)\n            .filter((entry) => entry[1].size > 0)\n            .reduce((acc, entry) => {\n            acc[entry[0]] = Array.from(entry[1]);\n            return acc;\n        }, {});\n        return result;\n    }\n    /**\n     * @description Extract the target type and target area of a given passive effect.\n     * @param effect Passive effect to extract target data from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns The target data for the given effect and context. There are only two possible values:\n     * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n     */\n    function getPassiveTargetData(effect, context) {\n        const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n            (effect.sp_type === SpPassiveType.EnhancePassive);\n        const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n        return {\n            targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n            targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n        };\n    }\n    /**\n     * @description Extract the target type and target area of a given proc effect.\n     * @param effect Proc effect to extract target data from.\n     * @returns The target data for the given effect and context.\n     */\n    function getProcTargetData(effect) {\n        return {\n            targetArea: effect['target area'],\n            targetType: effect['target type'],\n        };\n    }\n    /**\n     * @description Try to parse the given value into a number or return a value if it is not a number.\n     * @param value Value to parse into a number.\n     * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n     * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n     */\n    function parseNumberOrDefault(value, defaultValue = 0) {\n        return (value !== null && !isNaN(value)) ? +value : defaultValue;\n    }\n    /**\n     * @description Create an object denoting values that cannot be processed yet. To be used\n     * in the `value` property of `IBuff` as needed.\n     * @param params Array of values that cannot be processed yet.\n     * @param startIndex The first index before which we know how to process an effect's values.\n     * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n     */\n    function createUnknownParamsValue(params = [], startIndex = 0) {\n        let hasValue = false;\n        const result = params\n            .reduce((acc, value, index) => {\n            if (value && value !== '0') {\n                acc[`param_${startIndex + index}`] = value;\n                hasValue = true;\n            }\n            return acc;\n        }, {});\n        return hasValue ? result : (void 0);\n    }\n    /**\n     * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n     * @param source Source value to check.\n     * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n     * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n     * bonded super brave burst, or bonded dual brave burst.\n     */\n    function buffSourceIsBurstType(source) {\n        return !!source && [\n            BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n            BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n        ].includes(source);\n    }\n    /**\n     * @description Given an array of parameters, conditionally creata an unknown params value entry.\n     * @param extraParams Array of string parameters from an effect.\n     * @param startIndex Index to use when generating entries for the unknown params value entry.\n     * @param injectionContext Object whose main use is for injecting methods in testing.\n     * @returns An unknown params entry if there are extra parameters, undefined otherwise.\n     */\n    function createUnknownParamsEntryFromExtraParams(extraParams, startIndex, injectionContext) {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    }\n    /**\n     * @description Helper function for creating a `NO_PARAMS_SPECIFIED` entry from a given context.\n     * @param context An effect processing context containing information created while parsing an effect.\n     * @returns A single buff denoting a `NO_PARAMS_SPECIFIED` entry.\n     */\n    function createNoParamsEntry({ originalId, sources }) {\n        return {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        };\n    }\n\n    let mapping;\n    /**\n     * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of proc IDs to functions.\n     */\n    function getProcEffectToBuffMapping(reload) {\n        if (!mapping || reload) {\n            mapping = new Map();\n            setMapping(mapping);\n        }\n        return mapping;\n    }\n    /**\n     * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping(map) {\n        const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const NON_ZERO_ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const effectDelay = effect['effect delay time(ms)/frame'];\n            return { targetData, sources, effectDelay };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const splitEffectWithUnknownProcParamsProperty = (effect) => {\n            const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n            return splitEffectParams({ params: rawParams });\n        };\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n            effectDelay,\n            sources, value: unknownParams }, targetData));\n        const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n            sources, value: {\n                buffs,\n                duration,\n            } }, targetData));\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n        };\n        /**\n         * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n         * checked if all other known values in the effect are 0.\n         * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n         * @param turnDuration Parsed turn duration value to check.\n         * @param injectionContext Object whose main use is for injecting methods in testing.\n         * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n         */\n        const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n            let result = turnDuration !== 0;\n            if (result) {\n                result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n            }\n            return result;\n        };\n        /**\n         * @description Helper function to get attack information common across most attacks from the conversion context.\n         * @param context Given context that may contain attack information like damage frames.\n         * @returns Extracted attack information from the context (with defaults where applicable).\n         */\n        const getAttackInformationFromContext = (context) => {\n            const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n            const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n            return {\n                hits,\n                distribution,\n            };\n        };\n        const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                value = parseParamValue(rawValue);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else if (effectValueKey && effectTurnDurationKey) {\n                value = parseNumberOrDefault(effect[effectValueKey]);\n                turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [buffId],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        };\n        const parseProcWithNumericalValueRangeAndChanceAndTurnDuration = ({ effect, context, injectionContext, originalId, buffId, effectKeyLow, effectKeyHigh, effectKeyChance, effectTurnDurationKey, buffKeyLow, buffKeyHigh, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateConditions, }) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let valueLow = 0;\n            let valueHigh = 0;\n            let chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValueLow, rawValueHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                valueLow = parseParamValue(rawValueLow);\n                valueHigh = parseParamValue(rawValueHigh);\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                valueLow = parseNumberOrDefault(effect[effectKeyLow]);\n                valueHigh = parseNumberOrDefault(effect[effectKeyHigh]);\n                chance = parseNumberOrDefault(effect[effectKeyChance]);\n                turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n            }\n            const hasAnyValues = valueLow !== 0 || valueHigh !== 0 || chance !== 0;\n            const results = [];\n            if (hasAnyValues) {\n                const entry = Object.assign({ id: buffId, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        [buffKeyLow]: valueLow,\n                        [buffKeyHigh]: valueHigh,\n                        chance,\n                    } }, targetData);\n                if (generateConditions) {\n                    entry.conditions = generateConditions();\n                }\n                results.push(entry);\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [buffId],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:1:attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'healerRec%': 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                let recX, recY;\n                let extraParams;\n                [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n                params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['heal low'];\n                params.healHigh = effect['heal high'];\n                params['healerRec%'] = effect['rec added% (from healer)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const results = [];\n            if (params.healHigh !== 0 || params.healLow !== 0) {\n                results.push(Object.assign({ id: 'proc:2:burst heal', originalId,\n                    sources,\n                    effectDelay, value: params }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'targetRec%': 0,\n                turnDuration: '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let rec;\n                let extraParams;\n                [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['gradual heal low'];\n                params.healHigh = effect['gradual heal high'];\n                params['targetRec%'] = effect['rec added% (from target)'];\n                params.turnDuration = effect['gradual heal turns (8)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n            const results = [];\n            if (hasAnyHealValues) {\n                results.push(Object.assign({ id: 'proc:3:gradual heal', originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: {\n                        healLow: params.healLow,\n                        healHigh: params.healHigh,\n                        'targetRec%': params['targetRec%'],\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:3:gradual heal'],\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('bb bc fill' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill']);\n                }\n                if ('bb bc fill%' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n                }\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:bc fill-flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:bc fill-percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                element: BuffConditionElement.All,\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        params[statType] = effect[effectKey];\n                    }\n                });\n                params.turnDuration = effect['buff turns'];\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        const buffEntry = Object.assign({ id: `proc:5:regular or elemental-${statKey}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData);\n                        if (params.element !== BuffConditionElement.All) {\n                            buffEntry.conditions = {\n                                targetElements: [params.element],\n                            };\n                        }\n                        results.push(buffEntry);\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:5:regular or elemental-${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('6', (effect, context, injectionContext) => {\n            const originalId = '6';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                turnDuration: '0',\n            };\n            const dropRateProperties = ['bc', 'hc', 'item'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.bc = effect['bc drop rate% buff (10)'];\n                params.hc = effect['hc drop rate% buff (9)'];\n                params.item = effect['item drop rate% buff (11)'];\n                params.turnDuration = effect['drop buff rate turns'];\n            }\n            dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n            const results = [];\n            if (hasAnyRates) {\n                dropRateProperties.forEach((key) => {\n                    const value = params[key];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:6:drop boost-${key}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: dropRateProperties.map((key) => `proc:6:drop boost-${key}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('7', (effect, context, injectionContext) => {\n            const originalId = '7';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHpPercent = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:7:guaranteed ko resistance', originalId,\n                    sources,\n                    effectDelay, value: recoveredHpPercent }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const originalId = '8';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatHpBoost = 0;\n            let percentHpBoost = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n                flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n                percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('max hp increase' in effect) {\n                    flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n                }\n                if ('max hp% increase' in effect) {\n                    percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n                }\n            }\n            const results = [];\n            if (flatHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:max hp boost-flat', originalId,\n                    sources,\n                    effectDelay, value: flatHpBoost }, targetData));\n            }\n            if (percentHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:max hp boost-percent', originalId,\n                    sources,\n                    effectDelay, value: percentHpBoost }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            const originalId = '9';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const STAT_TYPE_MAPPING = {\n                0: 'atk',\n                1: 'def',\n                2: 'rec',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const params = {\n                element: BuffConditionElement.All,\n                statReductionEntries: [],\n                turnDuration: 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n                [\n                    [statType1, value1, procChance1],\n                    [statType2, value2, procChance2],\n                ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                    const statType = parseNumberOrDefault(rawStatType) - 1;\n                    const value = parseNumberOrDefault(rawValue);\n                    const chance = parseNumberOrDefault(rawProcChance);\n                    if (statType === 3) { // all stats\n                        params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                            stat,\n                            value,\n                            chance,\n                        })));\n                    }\n                    else {\n                        params.statReductionEntries.push({\n                            stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                            value,\n                            chance,\n                        });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                ['buff #1', 'buff #2'].forEach((buffKey) => {\n                    const entry = effect[buffKey];\n                    if (entry) {\n                        const chance = parseNumberOrDefault(entry['proc chance%']);\n                        const keys = Object.keys(entry);\n                        coreStatProperties.forEach((statType) => {\n                            const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                            if (effectKey) {\n                                params.statReductionEntries.push({\n                                    stat: statType,\n                                    value: parseNumberOrDefault(entry[effectKey]),\n                                    chance,\n                                });\n                            }\n                        });\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            let hasAnyValues = false;\n            params.statReductionEntries.forEach(({ stat, value, chance }) => {\n                if (value !== 0 || chance !== 0) {\n                    hasAnyValues = true;\n                    const buffEntry = Object.assign({ id: `proc:9:regular or elemental reduction-${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n            if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:9:regular or elemental reduction-${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            const originalId = '10';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 8);\n                const extraParams = splitParams.slice(8);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    if (`remove ${ailment}` in effect) { // mainly for items\n                        curedAilments.push(ailment);\n                    }\n                });\n                if ('remove all status ailments' in effect) {\n                    curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:cleanse-${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                let params = splitEffectParams(effect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:chance inflict-${ailment}`, originalId,\n                sources,\n                effectDelay, value: chance }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let reviveToHp = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n                reviveToHp = parseNumberOrDefault(rawReviveToHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:12:guaranteed revive', originalId,\n                    sources,\n                    effectDelay, value: reviveToHp }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const originalId = '13';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hits = 0;\n            const { distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawHits;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n                hits = parseNumberOrDefault(rawHits);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                hits = parseNumberOrDefault(effect.hits);\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push({\n                    id: 'proc:13:random attack',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }),\n                    targetType: targetData.targetType,\n                    targetArea: TargetArea.Random,\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n                'drainLow%': '0',\n                'drainHigh%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n                params['drainLow%'] = effect['hp drain% low'];\n                params['drainHigh%'] = effect['hp drain% high'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:14:hp absorb attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let mitigation = 0;\n            let element;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                mitigation = parseNumberOrDefault(rawMitigation);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n                element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n                if (mitigationKey) {\n                    mitigation = parseNumberOrDefault(effect[mitigationKey]);\n                }\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (mitigation !== 0) {\n                results.push(Object.assign({ id: `proc:16:mitigate-${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:mitigate-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            const originalId = '17';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        resistances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:17:resist-${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:17:resist-${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('18', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'dmg% reduction',\n                effectTurnDurationKey: 'dmg% reduction turns (36)',\n                buffId: 'proc:18:mitigation',\n                originalId: '18',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'increase bb gauge gradual',\n                effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'proc:19:gradual bc fill',\n                originalId: '19',\n            });\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                originalId: '20',\n                buffId: 'proc:20:bc fill on hit',\n                effectKeyLow: 'bc fill when attacked low',\n                effectKeyHigh: 'bc fill when attacked high',\n                effectKeyChance: 'bc fill when attacked%',\n                effectTurnDurationKey: 'bc fill when attacked turns (38)',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateConditions: () => ({ whenAttacked: true }),\n            });\n        });\n        map.set('22', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'defense% ignore',\n                effectTurnDurationKey: 'defense% ignore turns (39)',\n                buffId: 'proc:22:defense ignore',\n                originalId: '22',\n            });\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                value = parseNumberOrDefault(params[0]);\n                turnDuration = parseNumberOrDefault(params[6]);\n                const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'proc:23:spark damage', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:23:spark damage'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            const originalId = '24';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let turnDuration = 0;\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawConvertedStat, rawTurnDuration;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                const rawConvertedStat = effect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        stats[statType] = effect[effectKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['% converted turns']);\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:24:converted-${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: {\n                            convertedStat,\n                            value,\n                        } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:24:converted-${statKey}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            const originalId = '26';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n                turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'proc:26:hit count boost', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:26:hit count boost'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            const originalId = '27';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'hpDamageLow%': '0',\n                'hpDamageHigh%': '0',\n                'hpDamageChance%': '0',\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else {\n                params['hpDamageLow%'] = effect['hp% damage low'];\n                params['hpDamageHigh%'] = effect['hp% damage high'];\n                params['hpDamageChance%'] = effect['hp% damage chance%'];\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:27:proportional attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            let value = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                value = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['fixed damage']);\n            }\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || value !== 0) {\n                const entry = Object.assign({ id: 'proc:28:fixed attack', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (value !== 0) {\n                    entry.value.value = value;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            const originalId = '29';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let attackElements = [];\n            let unknownParams;\n            if (effect.params) {\n                let element1, element2, element3;\n                let extraParams;\n                [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                [element1, element2, element3].forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                    unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n                });\n            }\n            else {\n                if (Array.isArray(effect['bb elements'])) {\n                    attackElements = effect['bb elements'].slice();\n                }\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n                const entry = Object.assign({ id: 'proc:29:multi-element attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData);\n                if (attackElements.length > 0) {\n                    entry.value.elements = attackElements;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let elements = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                elements = params\n                    .slice(0, 6)\n                    .filter((p) => p !== '0')\n                    .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n                turnDuration = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                if ('elements added' in effect) {\n                    if (Array.isArray(effect['elements added'])) {\n                        elements = effect['elements added'];\n                    }\n                    else {\n                        elements = [BuffConditionElement.Unknown];\n                    }\n                }\n                turnDuration = parseNumberOrDefault(effect['elements added turns']);\n            }\n            const results = [];\n            const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n            if (elements.length > 0) {\n                elements.forEach((inputElement) => {\n                    const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                    results.push(Object.assign({ id: `proc:30:add element-${sanitizedElement}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: true }, targetData));\n                });\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:add element-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('increase bb gauge' in effect) {\n                    flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n                }\n                // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n                // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:bc fill-flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:bc fill-percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            const originalId = '32';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let element;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, ...extraParams] = splitEffectParams(effect);\n                if (rawElement && rawElement !== '0') {\n                    element = NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                const effectElement = effect['set attack element attribute'];\n                if (effectElement) {\n                    const sanitizedElement = Object.values(NON_ZERO_ELEMENT_MAPPING).find((e) => effectElement === e);\n                    if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                        element = sanitizedElement;\n                    }\n                    else {\n                        element = BuffConditionElement.Unknown;\n                    }\n                }\n            }\n            const results = [];\n            if (element) {\n                results.push(Object.assign({ id: `proc:32:element shift-${element}`, originalId,\n                    sources,\n                    effectDelay, value: true }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                chance = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(effect['clear buff chance%']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:33:buff wipe', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            const originalId = '34';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatDrainLow = 0, flatDrainHigh = 0;\n            let percentDrainLow = 0, percentDrainHigh = 0;\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n                flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n                flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n                percentDrainLow = parseNumberOrDefault(rawPercentLow);\n                percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n                flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n                percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n                percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n                chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n            }\n            const results = [];\n            if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:bc drain-flat', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: flatDrainLow,\n                        drainHigh: flatDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:bc drain-percent', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: percentDrainLow,\n                        drainHigh: percentDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'invalidate LS chance%',\n                effectTurnDurationKey: 'invalidate LS turns (60)',\n                buffId: 'proc:36:ls lock',\n                originalId: '36',\n            });\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const positionX = parseNumberOrDefault(rawPositionX);\n            const positionY = parseNumberOrDefault(rawPositionY);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const results = [];\n            if (summonGroup || summonId) {\n                results.push(Object.assign({ id: 'proc:37:summon', originalId,\n                    sources,\n                    effectDelay, value: {\n                        summonGroup,\n                        summonId,\n                        positionX,\n                        positionY,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('38', (effect, context, injectionContext) => {\n            const originalId = '38';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 9);\n                const extraParams = splitParams.slice(9);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else if (Array.isArray(effect['ailments cured'])) {\n                const effectAilmentsCured = effect['ailments cured'];\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                    if (effectAilmentsCured.includes(effectKey)) {\n                        curedAilments.push(ailment);\n                    }\n                });\n                if (effectAilmentsCured.length > curedAilments.length) {\n                    const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                    for (let i = 0; i < unknownAilmentCount; ++i) {\n                        curedAilments.push(Ailment.Unknown);\n                    }\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:cleanse-${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('39', (effect, context, injectionContext) => {\n            const originalId = '39';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const elements = [];\n            let mitigation = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                const rawElementsMitigated = params.slice(0, 6);\n                mitigation = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                rawElementsMitigated.forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        elements.push(NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                Object.values(NON_ZERO_ELEMENT_MAPPING).forEach((element) => {\n                    if (effect[`mitigate ${element} attacks`]) {\n                        elements.push(element);\n                    }\n                });\n                mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n                turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n            }\n            const results = [];\n            if (elements.length > 0) {\n                elements.forEach((element) => {\n                    results.push(Object.assign({ id: `proc:39:mitigate-${element}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: mitigation }, targetData));\n                });\n            }\n            else if (mitigation !== 0) {\n                results.push(Object.assign({ id: 'proc:39:mitigate-unknown', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:mitigate-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                for (let index = 0; index < 8; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n                turnDuration = parseNumberOrDefault(params[8]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken% buff';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = `${ailment} buff`;\n                    }\n                    else {\n                        effectKey = `${ailment}% buff`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:add ailment-${ailment}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: chance }, targetData)));\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    duration: turnDuration,\n                    buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:add ailment-${a}`),\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const params = {\n                'atkLow%': rawModLow,\n                'atkHigh%': rawModHigh,\n                flatAtk: rawFlatAtk,\n            };\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            let results;\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results = [\n                    Object.assign({ id: 'proc:42:sacrificial attack', originalId,\n                        sources,\n                        effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                            distribution }) }, targetData),\n                    {\n                        id: 'proc:42:instant death',\n                        originalId,\n                        sources,\n                        effectDelay,\n                        value: true,\n                        targetArea: TargetArea.Single,\n                        targetType: TargetType.Self,\n                    },\n                ];\n            }\n            else {\n                results = [];\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            const originalId = '43';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let overdriveFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n                overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n            }\n            const results = [];\n            if (overdriveFill !== 0) {\n                results.push(Object.assign({ id: 'proc:43:burst od fill', originalId,\n                    sources,\n                    effectDelay, value: overdriveFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const damageParams = {\n                'atk%': '0',\n                flatAtk: '0',\n                'dmg%': '0',\n            };\n            let affectsElement = false, unitIndex = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n                [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n                unitIndex = parseNumberOrDefault(rawUnitIndex);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                damageParams['atk%'] = effect['dot atk%'];\n                damageParams.flatAtk = effect['dot flat atk'];\n                damageParams['dmg%'] = effect['dot dmg%'];\n                affectsElement = !!(effect['dot element affected']);\n                unitIndex = parseNumberOrDefault(effect['dot unit index']);\n                turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n            }\n            const filteredDamageParams = Object.entries(damageParams)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (Object.keys(filteredDamageParams).length > 0) {\n                results.push(Object.assign({ id: 'proc:44:damage over time', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                        unitIndex }) }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:44:damage over time'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('45', (effect, context, injectionContext) => {\n            const originalId = '45';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let bb = 0, sbb = 0, ubb = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                bb = parseNumberOrDefault(rawBb);\n                sbb = parseNumberOrDefault(rawSbb);\n                ubb = parseNumberOrDefault(rawUbb);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                bb = parseNumberOrDefault(effect['bb atk% buff']);\n                sbb = parseNumberOrDefault(effect['sbb atk% buff']);\n                ubb = parseNumberOrDefault(effect['ubb atk% buff']);\n                turnDuration = parseNumberOrDefault(effect['buff turns (72)']);\n            }\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:attack boost-bb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:attack boost-sbb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:attack boost-ubb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: ubb }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:45:attack boost-${type}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('46', (effect, context, injectionContext) => {\n            const originalId = '46';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawHpLow, rawHpHigh, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const hpLow = parseNumberOrDefault(rawHpLow);\n            const hpHigh = parseNumberOrDefault(rawHpHigh);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (hpLow !== 0 || hpHigh !== 0 || hits !== 0 || distribution !== 0) {\n                const entry = Object.assign({ id: 'proc:46:non-lethal proportional attack', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (hpLow !== 0 || hpHigh !== 0) {\n                    entry.value = {\n                        'hpDamageLow%': hpLow,\n                        'hpDamageHigh%': hpHigh,\n                        hits,\n                        distribution,\n                    };\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('47', (effect, context, injectionContext) => {\n            const originalId = '47';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'baseAtk%': '0',\n                'maxAddedAtk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let proportionalMode = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawMaxAttackValue, rawProportionalMode;\n                [params['baseAtk%'], rawMaxAttackValue, rawProportionalMode, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue) - parseNumberOrDefault(params['baseAtk%']);\n                proportionalMode = rawProportionalMode === '1' ? 'lost' : 'remaining';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['baseAtk%'] = effect['bb base atk%'];\n                params['maxAddedAtk%'] = effect['bb added atk% based on hp'];\n                proportionalMode = effect['bb added atk% proportional to hp'] || 'unknown';\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:47:hp scaled attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { proportionalMode,\n                        hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('48', (effect, context, injectionContext) => {\n            const originalId = '48';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawBasePercentHpLow, rawBasePercentHpHigh, rawCurrentPercentHpLow, rawCurrentPercentHpHigh, rawFixedDamage, rawChance, rawIsLethal, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const basePercentHpLow = parseNumberOrDefault(rawBasePercentHpLow);\n            const basePercentHpHigh = parseNumberOrDefault(rawBasePercentHpHigh);\n            const currentPercentHpLow = parseNumberOrDefault(rawCurrentPercentHpLow);\n            const currentPercentHpHigh = parseNumberOrDefault(rawCurrentPercentHpHigh);\n            const fixedDamage = parseNumberOrDefault(rawFixedDamage);\n            const chance = parseNumberOrDefault(rawChance);\n            const isLethal = rawIsLethal === '1';\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            /**\n             * Current assumption is that each set of parameters results in a separate attack\n             * due to no known skills having more than one of each variant.\n             */\n            const results = [];\n            const createAttackOfType = (type, valueProperties) => (Object.assign({ id: `proc:48:piercing attack-${type}`, originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, valueProperties), { isLethal,\n                    chance,\n                    hits,\n                    distribution }) }, targetData));\n            if (basePercentHpLow !== 0 || basePercentHpHigh !== 0) {\n                results.push(createAttackOfType('base', {\n                    'hpDamageLow%': basePercentHpLow,\n                    'hpDamageHigh%': basePercentHpHigh,\n                }));\n            }\n            if (currentPercentHpLow !== 0 || currentPercentHpHigh !== 0) {\n                results.push(createAttackOfType('current', {\n                    'hpDamageLow%': currentPercentHpLow,\n                    'hpDamageHigh%': currentPercentHpHigh,\n                }));\n            }\n            if (fixedDamage !== 0) {\n                results.push(createAttackOfType('fixed', {\n                    value: fixedDamage,\n                }));\n            }\n            if (results.length === 0 && (hits !== 0 || distribution !== 0)) {\n                results.push(createAttackOfType('unknown', {}));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('49', (effect, context, injectionContext) => {\n            const originalId = '49';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawChance, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const chance = parseNumberOrDefault(rawChance);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:49:chance instant death', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('50', (effect, context, injectionContext) => {\n            const originalId = '50';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawDamageLow, rawDamageHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const reflectedDamageLow = parseNumberOrDefault(rawDamageLow);\n            const reflectedDamageHigh = parseNumberOrDefault(rawDamageHigh);\n            const chance = parseNumberOrDefault(rawChance);\n            const turnDuration = parseNumberOrDefault(rawTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const hasAnyRangeValues = reflectedDamageLow !== 0 || reflectedDamageHigh !== 0;\n            const results = [];\n            if (hasAnyRangeValues) {\n                results.push(Object.assign({ id: 'proc:50:chance damage reflect', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        'reflectedDamageLow%': reflectedDamageLow,\n                        'reflectedDamageHigh%': reflectedDamageHigh,\n                        chance,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:50:chance damage reflect'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('51', (effect, context, injectionContext) => {\n            const originalId = '51';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedReductions = [];\n            let debuffTurnDuration = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                [\n                    { type: Ailment.AttackReduction, reductionValue: parseNumberOrDefault(params[0]), chance: parseNumberOrDefault(params[3]) },\n                    { type: Ailment.DefenseReduction, reductionValue: parseNumberOrDefault(params[1]), chance: parseNumberOrDefault(params[4]) },\n                    { type: Ailment.RecoveryReduction, reductionValue: parseNumberOrDefault(params[2]), chance: parseNumberOrDefault(params[5]) },\n                ].forEach(({ type, reductionValue, chance }) => {\n                    if (reductionValue !== 0 || chance !== 0) {\n                        inflictedReductions.push({ type, reductionValue, chance });\n                    }\n                });\n                debuffTurnDuration = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                [\n                    { type: Ailment.AttackReduction, reductionValueKey: 'inflict atk% debuff (2)', chanceKey: 'inflict atk% debuff chance% (74)' },\n                    { type: Ailment.DefenseReduction, reductionValueKey: 'inflict def% debuff (4)', chanceKey: 'inflict def% debuff chance% (75)' },\n                    { type: Ailment.RecoveryReduction, reductionValueKey: 'inflict rec% debuff (6)', chanceKey: 'inflict rec% debuff chance% (76)' },\n                ].forEach(({ type, reductionValueKey, chanceKey }) => {\n                    const reductionValue = parseNumberOrDefault(effect[reductionValueKey]);\n                    const chance = parseNumberOrDefault(effect[chanceKey]);\n                    if (reductionValue !== 0 || chance !== 0) {\n                        inflictedReductions.push({ type, reductionValue, chance });\n                    }\n                });\n                debuffTurnDuration = parseNumberOrDefault(effect['stat% debuff turns']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedReductions.map(({ type, reductionValue, chance }) => (Object.assign({ id: `proc:51:add to attack-${type}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                } }, targetData)));\n            if (results.length === 0 && (isTurnDurationBuff(context, turnDuration, injectionContext) || isTurnDurationBuff(context, debuffTurnDuration, injectionContext))) {\n                // manually create turn duration buff to account for debuff turn duration\n                results.push(Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n                    sources, value: {\n                        buffs: [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction].map((a) => `proc:51:add to attack-${a}`),\n                        duration: turnDuration,\n                        debuffTurnDuration: debuffTurnDuration,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('52', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'bb gauge fill rate% buff',\n                effectTurnDurationKey: 'buff turns (77)',\n                buffId: 'proc:52:bc efficacy',\n                originalId: '52',\n            });\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            const originalId = '53';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const inflictionChances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        inflictionChances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['counter inflict ailment turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(inflictionChances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:53:inflict on hit-${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration, conditions: { whenAttacked: true } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:53:inflict on hit-${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('54', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'crit multiplier%',\n                effectTurnDurationKey: 'buff turns (84)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n                buffId: 'proc:54:critical damage boost',\n                originalId: '54',\n            });\n        });\n        map.set('55', (effect, context, injectionContext) => {\n            const originalId = '55';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let elements;\n            let damageBoost = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => NON_ZERO_ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                damageBoost = parseNumberOrDefault(params[6]) * 100;\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                elements = Object.values(NON_ZERO_ELEMENT_MAPPING).filter((element) => !!effect[`${element} units do extra elemental weakness dmg`]);\n                damageBoost = parseNumberOrDefault(effect['elemental weakness multiplier%']);\n                turnDuration = parseNumberOrDefault(effect['elemental weakness buff turns']);\n            }\n            let results = [];\n            if (damageBoost !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `proc:55:elemental weakness damage-${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: damageBoost }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'proc:55:elemental weakness damage-unknown', originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: damageBoost }, targetData));\n                }\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:55:elemental weakness damage-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('56', (effect, context, injectionContext) => {\n            const originalId = '56';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let chance = 0, recoveredHpPercent = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawChance, rawRecoverHp, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                chance = parseNumberOrDefault(rawChance);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoverHp);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(effect['angel idol recover chance%']);\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n                turnDuration = parseNumberOrDefault(effect['angel idol buff turns (91)']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:56:chance ko resistance', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: { 'recoveredHp%': recoveredHpPercent, chance } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:56:chance ko resistance'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('57', (effect, context, injectionContext) => {\n            const originalId = '57';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let bcBaseResist = 0, bcBuffResist = 0;\n            let hcBaseResist = 0, hcBuffResist = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawBcBaseResist, rawBcBuffResist, rawHcBaseResist, rawHcBuffResist, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                bcBaseResist = parseNumberOrDefault(rawBcBaseResist);\n                bcBuffResist = parseNumberOrDefault(rawBcBuffResist);\n                hcBaseResist = parseNumberOrDefault(rawHcBaseResist);\n                hcBuffResist = parseNumberOrDefault(rawHcBuffResist);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                // Deathmax's datamine doesn't parse HC drop resistance\n                bcBaseResist = parseNumberOrDefault(effect['base bc drop% resist buff']);\n                bcBuffResist = parseNumberOrDefault(effect['buffed bc drop% resist buff']);\n                turnDuration = parseNumberOrDefault(effect['bc drop% resist buff turns (92)']);\n            }\n            const results = [];\n            if (bcBaseResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:bc drop resistance-base', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bcBaseResist }, targetData));\n            }\n            if (bcBuffResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:bc drop resistance-buff', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bcBuffResist }, targetData));\n            }\n            if (hcBaseResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:hc drop resistance-base', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: hcBaseResist }, targetData));\n            }\n            if (hcBuffResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:hc drop resistance-buff', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: hcBuffResist }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [\n                        'proc:57:bc drop resistance-base',\n                        'proc:57:bc drop resistance-buff',\n                        'proc:57:hc drop resistance-base',\n                        'proc:57:hc drop resistance-buff',\n                    ],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('58', (effect, context, injectionContext) => {\n            const originalId = '58';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let damageIncrease = 0, chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                damageIncrease = parseNumberOrDefault(effect['spark dmg% received']);\n                chance = parseNumberOrDefault(effect['spark dmg received apply%']);\n                turnDuration = parseNumberOrDefault(effect['spark dmg received debuff turns (94)']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:58:spark vulnerability', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: { 'sparkDamage%': damageIncrease, chance } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:58:spark vulnerability'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('59', (effect, context, injectionContext) => {\n            const originalId = '59';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const bb = parseNumberOrDefault(rawBb);\n            const sbb = parseNumberOrDefault(rawSbb);\n            const ubb = parseNumberOrDefault(rawUbb);\n            const turnDuration = parseNumberOrDefault(rawTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'proc:59:attack reduction-bb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'proc:59:attack reduction-sbb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'proc:59:attack reduction-ubb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: ubb }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:59:attack reduction-${type}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('61', (effect, context, injectionContext) => {\n            const originalId = '61';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'baseAtk%': '0',\n                'maxAddedAtk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawMaxAttackValue;\n                [params['baseAtk%'], rawMaxAttackValue, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                params['baseAtk%'] = effect['bb base atk%'];\n                params['maxAddedAtk%'] = effect['bb max atk% based on ally bb gauge and clear bb gauges'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            let results;\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results = [\n                    Object.assign({ id: 'proc:61:party bb gauge-scaled attack', originalId,\n                        sources,\n                        effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                            distribution }) }, targetData),\n                    {\n                        id: 'proc:61:party bc drain',\n                        originalId,\n                        sources,\n                        effectDelay,\n                        value: true,\n                        targetArea: TargetArea.Aoe,\n                        targetType: TargetType.Party,\n                    },\n                ];\n            }\n            else {\n                results = [];\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('62', (effect, context, injectionContext) => {\n            const originalId = '62';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let element;\n            let hp = 0, defense = 0, damageAbsorption = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawHp, rawDefense, rawDamageAbsorption, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                hp = parseNumberOrDefault(rawHp);\n                defense = parseNumberOrDefault(rawDefense);\n                damageAbsorption = parseNumberOrDefault(rawDamageAbsorption);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const effectElement = effect['elemental barrier element'];\n                element = (effectElement && Object.values(ELEMENT_MAPPING).find((e) => e === effectElement)) || BuffConditionElement.Unknown;\n                hp = parseNumberOrDefault(effect['elemental barrier hp']);\n                defense = parseNumberOrDefault(effect['elemental barrier def']);\n                damageAbsorption = parseNumberOrDefault(effect['elemental barrier absorb dmg%']);\n            }\n            const results = [];\n            if (hp !== 0 || defense !== 0 || damageAbsorption !== 0) {\n                results.push(Object.assign({ id: `proc:62:barrier-${element}`, originalId,\n                    sources,\n                    effectDelay, value: {\n                        hp,\n                        defense,\n                        'damageAbsorption%': damageAbsorption,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('64', (effect, context, injectionContext) => {\n            const originalId = '64';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                'addedAtkPerUse%': '0',\n                maxIncreases: '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params['addedAtkPerUse%'], params.maxIncreases, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params['addedAtkPerUse%'] = effect['bb atk% inc per use'];\n                params.maxIncreases = effect['bb atk% max number of inc'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:64:consecutive usage attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('65', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'atk% buff when enemy has ailment',\n                effectTurnDurationKey: 'atk% buff turns (110)',\n                buffId: 'proc:65:ailment attack boost',\n                originalId: '65',\n            });\n        });\n        map.set('66', (effect, context, injectionContext) => {\n            const originalId = '66';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHp = 0, chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, rawChance, ...extraParams] = splitEffectParams(effect);\n                recoveredHp = parseNumberOrDefault(rawRecoveredHp);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                recoveredHp = parseNumberOrDefault(effect['revive unit hp%']);\n                chance = parseNumberOrDefault(effect['revive unit chance%']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:66:chance revive', originalId,\n                    sources,\n                    effectDelay, value: { 'reviveToHp%': recoveredHp, chance } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('67', (effect, context, injectionContext) => {\n            return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                originalId: '67',\n                buffId: 'proc:67:bc fill on spark',\n                effectKeyLow: 'bc fill on spark low',\n                effectKeyHigh: 'bc fill on spark high',\n                effectKeyChance: 'bc fill on spark%',\n                effectTurnDurationKey: 'bc fill on spark buff turns (111)',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            });\n        });\n        map.set('68', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'guard increase mitigation%',\n                effectTurnDurationKey: 'guard increase mitigation buff turns (113)',\n                buffId: 'proc:68:guard mitigation',\n                originalId: '68',\n            });\n        });\n        map.set('69', (effect, context, injectionContext) => {\n            const originalId = '69';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                if ('bb bc fill on guard' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill on guard']);\n                }\n                if ('bb bc fill% on guard' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill% on guard']);\n                }\n                turnDuration = parseNumberOrDefault(effect['bb bc fill on guard buff turns (114)']);\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:69:bc fill on guard-flat', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: flatFill, conditions: {\n                        onGuard: true,\n                    } }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:69:bc fill on guard-percent', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: percentFill, conditions: {\n                        onGuard: true,\n                    } }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:69:bc fill on guard-flat', 'proc:69:bc fill on guard-percent'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('71', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'bb fill inc%',\n                effectTurnDurationKey: 'bb fill inc buff turns (112)',\n                buffId: 'proc:71:bc efficacy reduction',\n                originalId: '71',\n            });\n        });\n        map.set('73', (effect, context, injectionContext) => {\n            const originalId = '73';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction];\n            const resistances = {\n                [Ailment.AttackReduction]: '0',\n                [Ailment.DefenseReduction]: '0',\n                [Ailment.RecoveryReduction]: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [resistances[Ailment.AttackReduction], resistances[Ailment.DefenseReduction], resistances[Ailment.RecoveryReduction], rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.includes('resist%'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        resistances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['stat down immunity buff turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:73:resist-${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:73:resist-${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('75', (effect, context, injectionContext) => {\n            const originalId = '75';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'baseAtk%': '0',\n                'addedAttackPerUnitWithMatchingElement%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let element;\n            let unknownParams;\n            if (effect.params) {\n                let extraParams, rawElement;\n                [rawElement, params['baseAtk%'], params['addedAttackPerUnitWithMatchingElement%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                // in Deathmax's datamine, this proc is incorrectly parsed as a tri-stat buff\n                const effectElement = effect['counted element for buff multiplier'];\n                if (!effectElement) {\n                    element = BuffConditionElement.Unknown;\n                }\n                else {\n                    element = effectElement;\n                }\n                params['baseAtk%'] = effect['atk% buff (1)'];\n                params['addedAttackPerUnitWithMatchingElement%'] = effect['def% buff (3)'];\n                params.flatAtk = effect['rec% buff (5)'];\n                params['crit%'] = effect['crit% buff (7)'];\n                params['bc%'] = effect['buff turns'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:75:element squad-scaled attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { elementToMatch: element, hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('76', (effect, context, injectionContext) => {\n            const originalId = '76';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let maxExtraActions = 0, chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawMaxExtraActions, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                maxExtraActions = parseNumberOrDefault(rawMaxExtraActions);\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                maxExtraActions = parseNumberOrDefault(effect['max number of extra actions']);\n                chance = parseNumberOrDefault(effect['chance% for extra action']);\n                turnDuration = parseNumberOrDefault(effect['extra action buff turns (123)']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:76:extra action', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: { maxExtraActions, chance } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:76:extra action'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('78', (effect, context, injectionContext) => {\n            const originalId = '78';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = `self ${statType}% buff`;\n                    if (effectKey in effect) {\n                        params[statType] = effect[effectKey];\n                    }\n                });\n                params.turnDuration = effect['self stat buff turns'];\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:78:self stat boost-${statKey}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:78:self stat boost-${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('79', (effect, context, injectionContext) => {\n            const originalId = '79';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawExpBoost, rawDurationInMinutes = '', ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const expBoost = parseNumberOrDefault(rawExpBoost);\n            const durationInMinutes = parseNumberOrDefault(rawDurationInMinutes);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (expBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:79:player exp boost', originalId,\n                    sources,\n                    effectDelay, value: { 'expBoost%': expBoost, durationInMinutes } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('82', (effect, context, injectionContext) => {\n            const originalId = '82';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [summonGroup, rawPercentHp, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const percentHp = parseNumberOrDefault(rawPercentHp);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (summonGroup) {\n                results.push(Object.assign({ id: 'proc:82:resummon', originalId,\n                    sources,\n                    effectDelay, value: {\n                        summonGroup,\n                        'startingHp%': percentHp,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('83', (effect, context, injectionContext) => {\n            const originalId = '83';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let chance = 0, sparkDamage = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawChance, rawSparkDamage, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                chance = parseNumberOrDefault(rawChance);\n                sparkDamage = parseNumberOrDefault(rawSparkDamage);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(effect['spark dmg inc chance%']);\n                sparkDamage = parseNumberOrDefault(effect['spark dmg inc% buff']);\n                turnDuration = parseNumberOrDefault(effect['spark dmg inc buff turns (131)']);\n            }\n            const results = [];\n            if (sparkDamage !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'proc:83:spark critical', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: { 'sparkDamage%': sparkDamage, chance } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:83:spark critical'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('84', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'od fill rate% buff',\n                effectTurnDurationKey: 'od fill rate buff turns (132)',\n                buffId: 'proc:84:od fill rate',\n                originalId: '84',\n            });\n        });\n        map.set('85', (effect, context, injectionContext) => {\n            return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                originalId: '85',\n                buffId: 'proc:85:heal on hit',\n                effectKeyLow: 'hp recover from dmg% low',\n                effectKeyHigh: 'hp recover from dmg% high',\n                effectKeyChance: 'hp recover from dmg chance',\n                effectTurnDurationKey: 'hp recover from dmg buff turns (133)',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateConditions: () => ({ whenAttacked: true }),\n            });\n        });\n        map.set('86', (effect, context, injectionContext) => {\n            return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                originalId: '86',\n                buffId: 'proc:86:hp absorb',\n                effectKeyLow: 'hp drain% low',\n                effectKeyHigh: 'hp drain% high',\n                effectKeyChance: 'hp drain chance%',\n                effectTurnDurationKey: 'hp drain buff turns (134)',\n                buffKeyLow: 'drainHealLow%',\n                buffKeyHigh: 'drainHealHigh%',\n            });\n        });\n        map.set('87', (effect, context, injectionContext) => {\n            return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                originalId: '87',\n                buffId: 'proc:87:heal on spark',\n                effectKeyLow: 'spark recover hp low',\n                effectKeyHigh: 'spark recover hp high',\n                effectKeyChance: 'spark recover hp chance%',\n                effectTurnDurationKey: 'spark recover hp buff turns (135)',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n            });\n        });\n        map.set('88', (effect, context, injectionContext) => {\n            const originalId = '88';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                value = parseNumberOrDefault(params[0]);\n                turnDuration = parseNumberOrDefault(params[6]);\n                const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['spark dmg inc%']);\n                turnDuration = parseNumberOrDefault(effect['spark dmg inc% turns (136)']);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'proc:88:self spark damage', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:88:self spark damage'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('89', (effect, context, injectionContext) => {\n            const originalId = '89';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let turnDuration = 0;\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawConvertedStat, rawTurnDuration;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:89:self converted-${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: {\n                            convertedStat,\n                            value,\n                        } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:89:self converted-${statKey}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('92', (effect, context, injectionContext) => {\n            const originalId = '92';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatHpBoost = 0;\n            let percentHpBoost = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n                flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n                percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            const results = [];\n            if (flatHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:92:self max hp boost-flat', originalId,\n                    sources,\n                    effectDelay, value: flatHpBoost }, targetData));\n            }\n            if (percentHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:92:self max hp boost-percent', originalId,\n                    sources,\n                    effectDelay, value: percentHpBoost }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('93', (effect, context, injectionContext) => {\n            const originalId = '93';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let ResistType;\n            (function (ResistType) {\n                ResistType[\"CriticalDamage\"] = \"critical damage\";\n                ResistType[\"ElementDamage\"] = \"element damage\";\n                ResistType[\"SparkDamage\"] = \"spark damage\";\n            })(ResistType || (ResistType = {}));\n            const resistances = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseSparkDamageResist, rawBuffSparkDamageResist, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                [\n                    { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                    { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                    { resistType: ResistType.SparkDamage, base: parseNumberOrDefault(rawBaseSparkDamageResist), buff: parseNumberOrDefault(rawBuffSparkDamageResist) },\n                ].forEach(({ resistType, base, buff }) => {\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                [\n                    { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist% (143)', buffKey: 'crit dmg buffed damage resist% (143)' },\n                    { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist% (144)', buffKey: 'strong buffed element damage resist% (144)' },\n                    { resistType: ResistType.SparkDamage, baseKey: 'spark dmg base resist% (145)', buffKey: 'spark dmg buffed resist% (145)' },\n                ].forEach(({ resistType, baseKey, buffKey }) => {\n                    const base = parseNumberOrDefault(effect[baseKey]);\n                    const buff = parseNumberOrDefault(effect[buffKey]);\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['dmg resist turns']);\n            }\n            const results = [];\n            resistances.forEach(({ resistType, base, buff }) => {\n                if (base !== 0) {\n                    results.push(Object.assign({ id: `proc:93:${resistType} resistance-base`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: base }, targetData));\n                }\n                if (buff !== 0) {\n                    results.push(Object.assign({ id: `proc:93:${resistType} resistance-buff`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: buff }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                const buffs = [];\n                [ResistType.CriticalDamage, ResistType.ElementDamage, ResistType.SparkDamage].forEach((resistType) => {\n                    buffs.push(`proc:93:${resistType} resistance-base`, `proc:93:${resistType} resistance-buff`);\n                });\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs,\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('94', (effect, context, injectionContext) => {\n            const originalId = '94';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let damageIncrease = 0, chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                damageIncrease = parseNumberOrDefault(effect['aoe atk inc%']);\n                chance = parseNumberOrDefault(effect['chance to aoe']);\n                turnDuration = parseNumberOrDefault(effect['aoe atk turns (142)']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:94:aoe normal attack', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: { 'damageModifier%': damageIncrease, chance } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:94:aoe normal attack'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('95', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                buffId: 'proc:95:sphere lock',\n                originalId: '95',\n            });\n        });\n        map.set('96', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                buffId: 'proc:96:es lock',\n                originalId: '96',\n            });\n        });\n        map.set('97', (effect, context, injectionContext) => {\n            const originalId = '97';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            /**\n             * @desc Mapping of a given element to the element that is weak to it. For example, given a key of\n             * `fire`, the corresponding value is `earth` because `earth` units are weak to (i.e. take extra\n             * damage from) `fire` attacks.\n             */\n            const weakerElementMapping = {\n                [UnitElement.Fire]: UnitElement.Earth,\n                [UnitElement.Water]: UnitElement.Fire,\n                [UnitElement.Earth]: UnitElement.Thunder,\n                [UnitElement.Thunder]: UnitElement.Water,\n                [UnitElement.Light]: UnitElement.Dark,\n                [UnitElement.Dark]: UnitElement.Light,\n            };\n            const getOpposingWeakerElement = (inputElement) => {\n                return (inputElement && Object.hasOwnProperty.call(weakerElementMapping, inputElement))\n                    ? weakerElementMapping[inputElement]\n                    : BuffConditionElement.Unknown;\n            };\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            const targetElements = [getOpposingWeakerElement(context.sourceElement)];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams, rawTargetElementsParam;\n                [rawTargetElementsParam, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                if (rawTargetElementsParam && rawTargetElementsParam !== '0') {\n                    targetElements.push(getOpposingWeakerElement(ELEMENT_MAPPING[rawTargetElementsParam]));\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                // in Deathmax's datamine, this proc is incorrectly parsed as a tri-stat buff\n                const extraTargetElement = effect['additional element used for attack check'];\n                if (extraTargetElement && extraTargetElement !== 'self only') {\n                    targetElements.push(getOpposingWeakerElement(extraTargetElement));\n                }\n                else if (!extraTargetElement) {\n                    targetElements.push(BuffConditionElement.Unknown);\n                }\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:97:element specific attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }), conditions: { targetElements } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('113', (effect, context, injectionContext) => {\n            const originalId = '113';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                value = parseNumberOrDefault(params[2]);\n                turnDuration = parseNumberOrDefault(params[3]);\n                unknownParams = createUnknownParamsEntryFromExtraParams([params[0], params[1], '0', '0'].concat(params.slice(4)), 0, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['od fill']);\n                turnDuration = parseNumberOrDefault(effect['od fill turns (148)']);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'proc:113:gradual od fill', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:113:gradual od fill'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to {@link IBuff} format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given proc effect.\n     */\n    function defaultConversionFunction(effect, context) {\n        const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n                originalId: id,\n                effectDelay: effect['effect delay time(ms)/frame'],\n                targetType: effect['target type'],\n                targetArea: effect['target area'],\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given proc effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Proc effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given proc effect object.\n     */\n    function convertProcEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isProcEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction(effect, context);\n    }\n\n    let mapping$1;\n    /**\n     * @description Retrieve the conditional-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of conditional IDs to functions.\n     */\n    function getConditionalEffectToBuffMapping(reload) {\n        if (!mapping$1 || reload) {\n            mapping$1 = new Map();\n            setMapping$1(mapping$1);\n        }\n        return mapping$1;\n    }\n    /**\n     * @description Apply the mapping of conditional effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$1(map) {\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, }) => (Object.assign({ id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS, originalId,\n            sources, value: unknownParams }, targetData));\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                }));\n            }\n        };\n        const getDefaultTargetData = () => ({ targetType: TargetType.Self, targetArea: TargetArea.Single });\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const splitParams = typeof effect.params === 'string' ? effect.params.split('&') : [];\n            const targetData = getDefaultTargetData();\n            const turnDuration = parseNumberOrDefault(effect.turnDuration);\n            return { targetData, sources, splitParams, turnDuration };\n        };\n        const parseConditionalWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, buffId, returnBuffWithValueOfZero = false, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawValue, ...extraParams] = splitParams;\n            const value = parseParamValue(rawValue);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [];\n            if (returnBuffWithValueOfZero || value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources, duration: turnDuration, value }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        };\n        const parseConditionalWithOnlyBaseAndBuffResistanceParameters = ({ effect, context, injectionContext, originalId, baseResistanceBuffId, buffResistanceBuffId, }) => {\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawBaseResist, rawBuffResist, ...extraParams] = splitParams;\n            const baseResist = parseNumberOrDefault(rawBaseResist);\n            const buffResist = parseNumberOrDefault(rawBuffResist);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (baseResist !== 0) {\n                results.push(Object.assign({ id: baseResistanceBuffId, originalId,\n                    sources, duration: turnDuration, value: baseResist }, targetData));\n            }\n            if (buffResist !== 0) {\n                results.push(Object.assign({ id: buffResistanceBuffId, originalId,\n                    sources, duration: turnDuration, value: buffResist }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        };\n        const parseBarrierConditionalBuff = ({ effect, context, injectionContext, buffId, originalId, }) => {\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawElement, rawHp, ...extraParams] = splitParams;\n            const element = ELEMENT_MAPPING[rawElement] || rawElement || BuffConditionElement.Unknown;\n            const hp = parseNumberOrDefault(rawHp);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (hp !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources, duration: turnDuration, value: {\n                        hp,\n                        parsedElement: element,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '1',\n                buffId: 'conditional:1:attack buff',\n            });\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '3',\n                buffId: 'conditional:3:defense buff',\n            });\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '5',\n                buffId: 'conditional:5:recovery buff',\n            });\n        });\n        map.set('7', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '7',\n                buffId: 'conditional:7:critical hit rate buff',\n            });\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const originalId = '8';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitParams;\n            const healLow = parseNumberOrDefault(rawHealLow);\n            const healHigh = parseNumberOrDefault(rawHealHigh);\n            const addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'conditional:8:gradual heal', originalId,\n                    sources, duration: turnDuration, value: {\n                        healLow,\n                        healHigh,\n                        'addedRec%': addedRec,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '12',\n                buffId: 'conditional:12:guaranteed ko resistance',\n                returnBuffWithValueOfZero: true,\n            });\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const originalId = '13';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawElement, rawValue, ...extraParams] = splitParams;\n            const element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            const value = parseNumberOrDefault(rawValue);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'conditional:13:elemental attack buff', originalId,\n                    sources, duration: turnDuration, value, conditions: {\n                        targetElements: [element],\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawElement, rawValue, ...extraParams] = splitParams;\n            const element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            const value = parseNumberOrDefault(rawValue);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'conditional:14:elemental defense buff', originalId,\n                    sources, duration: turnDuration, value, conditions: {\n                        targetElements: [element],\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('21', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '21',\n                buffId: 'conditional:21:fire mitigation',\n            });\n        });\n        map.set('22', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '22',\n                buffId: 'conditional:22:water mitigation',\n            });\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '23',\n                buffId: 'conditional:23:earth mitigation',\n            });\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '24',\n                buffId: 'conditional:24:thunder mitigation',\n            });\n        });\n        map.set('25', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '25',\n                buffId: 'conditional:25:light mitigation',\n            });\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '26',\n                buffId: 'conditional:26:dark mitigation',\n            });\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '36',\n                buffId: 'conditional:36:mitigation',\n            });\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '37',\n                buffId: 'conditional:37:gradual bc fill',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            });\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '40',\n                buffId: 'conditional:40:spark damage',\n            });\n        });\n        map.set('51', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '51',\n                buffId: 'conditional:51:add fire element',\n                returnBuffWithValueOfZero: true,\n            });\n        });\n        map.set('52', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '52',\n                buffId: 'conditional:52:add water element',\n                returnBuffWithValueOfZero: true,\n            });\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '53',\n                buffId: 'conditional:53:add earth element',\n                returnBuffWithValueOfZero: true,\n            });\n        });\n        map.set('54', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '54',\n                buffId: 'conditional:54:add thunder element',\n                returnBuffWithValueOfZero: true,\n            });\n        });\n        map.set('55', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '55',\n                buffId: 'conditional:55:add light element',\n                returnBuffWithValueOfZero: true,\n            });\n        });\n        map.set('56', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '56',\n                buffId: 'conditional:56:add dark element',\n                returnBuffWithValueOfZero: true,\n            });\n        });\n        map.set('72', (effect, context, injectionContext) => {\n            const originalId = '72';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawBb, rawSbb, rawUbb, ...extraParams] = splitParams;\n            const bb = parseNumberOrDefault(rawBb);\n            const sbb = parseNumberOrDefault(rawSbb);\n            const ubb = parseNumberOrDefault(rawUbb);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'conditional:72:attack boost-bb', originalId,\n                    sources, duration: turnDuration, value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'conditional:72:attack boost-sbb', originalId,\n                    sources, duration: turnDuration, value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'conditional:72:attack boost-ubb', originalId,\n                    sources, duration: turnDuration, value: ubb }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('74', (effect, context, injectionContext) => {\n            const originalId = '74';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawReductionValue, rawChance, rawDebuffTurns, ...extraParams] = splitParams;\n            const reductionValue = parseNumberOrDefault(rawReductionValue);\n            const chance = parseNumberOrDefault(rawChance);\n            const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurns);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (reductionValue !== 0 || chance !== 0 || debuffTurnDuration !== 0) {\n                results.push(Object.assign({ id: 'conditional:74:add atk down to attack', originalId,\n                    sources, duration: turnDuration, value: {\n                        reductionValue,\n                        chance,\n                        debuffTurnDuration,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('75', (effect, context, injectionContext) => {\n            const originalId = '75';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawReductionValue, rawChance, rawDebuffTurns, ...extraParams] = splitParams;\n            const reductionValue = parseNumberOrDefault(rawReductionValue);\n            const chance = parseNumberOrDefault(rawChance);\n            const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurns);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (reductionValue !== 0 || chance !== 0 || debuffTurnDuration !== 0) {\n                results.push(Object.assign({ id: 'conditional:75:add def down to attack', originalId,\n                    sources, duration: turnDuration, value: {\n                        reductionValue,\n                        chance,\n                        debuffTurnDuration,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('84', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '84',\n                buffId: 'conditional:84:critical damage',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            });\n        });\n        map.set('91', (effect, context, injectionContext) => {\n            const originalId = '91';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawChance, rawHpRecover, ...extraParams] = splitParams;\n            const chance = parseNumberOrDefault(rawChance);\n            const hpRecover = parseNumberOrDefault(rawHpRecover);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'conditional:91:chance ko resistance', originalId,\n                    sources, duration: turnDuration, value: {\n                        'hpRecover%': hpRecover,\n                        chance,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('95', (effect, context, injectionContext) => {\n            return parseBarrierConditionalBuff({\n                effect,\n                context,\n                injectionContext,\n                buffId: 'conditional:95:fire barrier',\n                originalId: '95',\n            });\n        });\n        map.set('96', (effect, context, injectionContext) => {\n            return parseBarrierConditionalBuff({\n                effect,\n                context,\n                injectionContext,\n                buffId: 'conditional:96:water barrier',\n                originalId: '96',\n            });\n        });\n        map.set('97', (effect, context, injectionContext) => {\n            return parseBarrierConditionalBuff({\n                effect,\n                context,\n                injectionContext,\n                buffId: 'conditional:97:earth barrier',\n                originalId: '97',\n            });\n        });\n        map.set('98', (effect, context, injectionContext) => {\n            return parseBarrierConditionalBuff({\n                effect,\n                context,\n                injectionContext,\n                buffId: 'conditional:98:thunder barrier',\n                originalId: '98',\n            });\n        });\n        map.set('99', (effect, context, injectionContext) => {\n            return parseBarrierConditionalBuff({\n                effect,\n                context,\n                injectionContext,\n                buffId: 'conditional:99:light barrier',\n                originalId: '99',\n            });\n        });\n        map.set('100', (effect, context, injectionContext) => {\n            return parseBarrierConditionalBuff({\n                effect,\n                context,\n                injectionContext,\n                buffId: 'conditional:100:dark barrier',\n                originalId: '100',\n            });\n        });\n        map.set('111', (effect, context, injectionContext) => {\n            const originalId = '111';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawFillLow, rawFillHigh, rawChance, ...extraParams] = splitParams;\n            const fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            const fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            const chance = parseNumberOrDefault(rawChance);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (fillLow !== 0 || fillHigh !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'conditional:111:bc fill on spark', originalId,\n                    sources, duration: turnDuration, value: {\n                        fillLow,\n                        fillHigh,\n                        chance,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('124', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '124',\n                buffId: 'conditional:124:self attack buff',\n            });\n        });\n        map.set('125', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '125',\n                buffId: 'conditional:125:self defense buff',\n            });\n        });\n        map.set('131', (effect, context, injectionContext) => {\n            const originalId = '131';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawChance, rawSparkDamage, ...extraParams] = splitParams;\n            const chance = parseNumberOrDefault(rawChance);\n            const sparkDamage = parseNumberOrDefault(rawSparkDamage);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (chance !== 0 || sparkDamage !== 0) {\n                results.push(Object.assign({ id: 'conditional:131:spark critical', originalId,\n                    sources, duration: turnDuration, value: {\n                        chance,\n                        'sparkDamage%': sparkDamage,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('132', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '132',\n                buffId: 'conditional:132:od fill rate',\n            });\n        });\n        map.set('133', (effect, context, injectionContext) => {\n            const originalId = '133';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawHealLow, rawHealHigh, rawChance, ...extraParams] = splitParams;\n            const healLow = parseNumberOrDefault(rawHealLow);\n            const healHigh = parseNumberOrDefault(rawHealHigh);\n            const chance = parseNumberOrDefault(rawChance);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'conditional:133:heal on hit', originalId,\n                    sources, duration: turnDuration, value: {\n                        healLow,\n                        healHigh,\n                        chance,\n                    }, conditions: { whenAttacked: true } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('143', (effect, context, injectionContext) => {\n            return parseConditionalWithOnlyBaseAndBuffResistanceParameters({\n                effect,\n                context,\n                injectionContext,\n                originalId: '143',\n                baseResistanceBuffId: 'conditional:143:critical damage reduction-base',\n                buffResistanceBuffId: 'conditional:143:critical damage reduction-buff',\n            });\n        });\n        map.set('144', (effect, context, injectionContext) => {\n            return parseConditionalWithOnlyBaseAndBuffResistanceParameters({\n                effect,\n                context,\n                injectionContext,\n                originalId: '144',\n                baseResistanceBuffId: 'conditional:144:spark damage reduction-base',\n                buffResistanceBuffId: 'conditional:144:spark damage reduction-buff',\n            });\n        });\n        map.set('145', (effect, context, injectionContext) => {\n            return parseConditionalWithOnlyBaseAndBuffResistanceParameters({\n                effect,\n                context,\n                injectionContext,\n                originalId: '145',\n                baseResistanceBuffId: 'conditional:145:elemental weakness damage reduction-base',\n                buffResistanceBuffId: 'conditional:145:elemental weakness damage reduction-buff',\n            });\n        });\n        map.set('153', (effect, context, injectionContext) => {\n            const originalId = '153';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawReductionValue, rawChance, rawDebuffTurnDuration, ...extraParams] = splitParams;\n            const reductionValue = parseNumberOrDefault(rawReductionValue);\n            const chance = parseNumberOrDefault(rawChance);\n            const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (reductionValue !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'conditional:153:chance inflict atk down on hit', originalId,\n                    sources, duration: turnDuration, value: {\n                        reductionValue,\n                        chance,\n                        debuffTurnDuration,\n                    }, conditions: { whenAttacked: true } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('10001', (effect, context, injectionContext) => {\n            const originalId = '10001';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawAttack, rawDefense, rawCritRate, rawRecovery, ...extraParams] = splitParams;\n            const stats = {\n                atk: parseNumberOrDefault(rawAttack),\n                def: parseNumberOrDefault(rawDefense),\n                rec: parseNumberOrDefault(rawRecovery),\n                crit: parseNumberOrDefault(rawCritRate),\n            };\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const makeBaseBuff = () => (Object.assign({ originalId,\n                sources, duration: turnDuration }, targetData));\n            const results = [Object.assign(Object.assign({}, makeBaseBuff()), { id: 'conditional:10001:stealth', value: true })];\n            ['atk', 'def', 'crit', 'rec'].forEach((stat) => {\n                const value = stats[stat];\n                if (value !== 0) {\n                    results.push(Object.assign(Object.assign({}, makeBaseBuff()), { id: `conditional:10001:stealth-${stat}`, value }));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('10500', (effect, context, injectionContext) => {\n            const originalId = '10500';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawElementValue, rawHp, rawDefense, ...extraParams] = splitParams;\n            const element = ELEMENT_MAPPING[rawElementValue] || BuffConditionElement.Unknown;\n            const hp = parseNumberOrDefault(rawHp);\n            const defense = parseNumberOrDefault(rawDefense);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (hp !== 0 || defense !== 0) {\n                results.push(Object.assign({ id: `conditional:10500:shield-${element}`, originalId,\n                    sources, duration: turnDuration, value: {\n                        hp,\n                        defense,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to {@link IBuff} format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given conditional effect.\n     */\n    function defaultConversionFunction$1(effect, context) {\n        const id = effect.id || KNOWN_CONDITIONAL_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given conditional effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Conditional effect to extract buffs from\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertConditionalEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const conversionFunction = getConditionalEffectToBuffMapping(context.reloadMapping).get(effect.id);\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$1(effect, context);\n    }\n\n    let mapping$2;\n    /**\n     * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @param convertPassiveEffectToBuffs Function used for recursive passive buff parsing.\n     * @returns Mapping of passive IDs to functions.\n     */\n    function getPassiveEffectToBuffMapping(reload, convertPassiveEffectToBuffs) {\n        if (!mapping$2 || reload) {\n            mapping$2 = new Map();\n            setMapping$2(mapping$2, convertPassiveEffectToBuffs || (() => []));\n        }\n        return mapping$2;\n    }\n    /**\n     * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @param convertPassiveEffectToBuffs Function used for recursive passive buff parsing.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$2(map, convertPassiveEffectToBuffs) {\n        const UNKNOWN_PASSIVE_PARAM_EFFECT_KEY = 'unknown passive params';\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n            X: BuffConditionElement.OmniParadigm,\n        };\n        const TYPE_MAPPING = {\n            1: UnitType.Lord,\n            2: UnitType.Anima,\n            3: UnitType.Breaker,\n            4: UnitType.Guardian,\n            5: UnitType.Oracle,\n            6: UnitType.Rex,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const TARGET_TYPE_MAPPING = {\n            1: TargetType.Party,\n            2: TargetType.Enemy,\n            3: TargetType.Self,\n        };\n        const TARGET_AREA_MAPPING = {\n            1: TargetArea.Single,\n            2: TargetArea.Aoe,\n        };\n        const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n            const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            return { conditionInfo, targetData, sources };\n        };\n        const convertConditionalEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n            const conversionFunction = (injectionContext && injectionContext.convertConditionalEffectToBuffs) || convertConditionalEffectToBuffs;\n            return conversionFunction(effect, context);\n        };\n        const convertProcEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n            const conversionFunction = (injectionContext && injectionContext.convertProcEffectToBuffs) || convertProcEffectToBuffs;\n            return conversionFunction(effect, context);\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const splitEffectWithUnknownPassiveParamsProperty = (effect) => {\n            const rawParams = effect.params || effect[UNKNOWN_PASSIVE_PARAM_EFFECT_KEY] || '';\n            return splitEffectParams({ params: rawParams });\n        };\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n            sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n        };\n        let ThresholdType;\n        (function (ThresholdType) {\n            ThresholdType[\"Hp\"] = \"hp\";\n            ThresholdType[\"Bb\"] = \"bb gauge\";\n            ThresholdType[\"DamageTaken\"] = \"damage taken\";\n            ThresholdType[\"DamageDealt\"] = \"damage dealt\";\n            ThresholdType[\"BcReceived\"] = \"bc receive count\";\n            ThresholdType[\"HcReceived\"] = \"hc receive count\";\n            ThresholdType[\"SparkCount\"] = \"spark count\";\n            ThresholdType[\"ChanceGuard\"] = \"on guard\";\n            ThresholdType[\"ChanceCrit\"] = \"on crit\";\n            ThresholdType[\"ChanceOverDrive\"] = \"on overdrive activation\";\n        })(ThresholdType || (ThresholdType = {}));\n        const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n            return {\n                threshold: parseNumberOrDefault(rawThreshold),\n                requireAbove: rawRequireAboveFlag === '1',\n                type: thresholdType,\n            };\n        };\n        const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n            let effectKey, fallbackEffectKey, requireAbove = true;\n            if (thresholdType === ThresholdType.DamageTaken) {\n                effectKey = 'damage threshold activation';\n            }\n            else if (thresholdType === ThresholdType.DamageDealt) {\n                effectKey = 'damage dealt threshold activation';\n            }\n            else if (thresholdType === ThresholdType.BcReceived) {\n                effectKey = 'bc receive count buff activation';\n                fallbackEffectKey = 'bc receive count activation';\n            }\n            else if (thresholdType === ThresholdType.HcReceived) {\n                effectKey = 'hc receive count buff activation';\n                fallbackEffectKey = 'hc receive count activation';\n            }\n            else if (thresholdType === ThresholdType.SparkCount) {\n                effectKey = 'spark count buff activation';\n                fallbackEffectKey = 'spark count activation';\n            }\n            else if (`${thresholdType} above % ${suffix}` in effect) {\n                effectKey = `${thresholdType} above % ${suffix}`;\n            }\n            else {\n                effectKey = `${thresholdType} below % ${suffix}`;\n                requireAbove = false;\n            }\n            const threshold = !fallbackEffectKey\n                ? parseNumberOrDefault(effect[effectKey])\n                : parseNumberOrDefault(effect[effectKey], parseNumberOrDefault(effect[fallbackEffectKey]));\n            return {\n                threshold,\n                requireAbove,\n                type: thresholdType,\n            };\n        };\n        const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n            let conditions;\n            if (type === ThresholdType.Hp) {\n                if (requireAbove) {\n                    conditions = { hpGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { hpLessThanOrEqualTo: threshold };\n                }\n            }\n            else if (type === ThresholdType.Bb) {\n                if (requireAbove) {\n                    conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { bbGaugeLessThanOrEqualTo: threshold };\n                }\n            }\n            else if (type === ThresholdType.DamageTaken) {\n                conditions = { damageTakenExceeds: threshold };\n            }\n            else if (type === ThresholdType.DamageDealt) {\n                conditions = { damageDealtExceeds: threshold };\n            }\n            else if (type === ThresholdType.BcReceived) {\n                conditions = { bcReceivedExceeds: threshold };\n            }\n            else if (type === ThresholdType.HcReceived) {\n                conditions = { hcReceivedExceeds: threshold };\n            }\n            else if (type === ThresholdType.SparkCount) {\n                conditions = { sparkCountExceeds: threshold };\n            }\n            else if (type === ThresholdType.ChanceGuard) {\n                conditions = { onGuardChance: threshold };\n            }\n            else if (type === ThresholdType.ChanceCrit) {\n                conditions = { onCriticalHitChance: threshold };\n            }\n            else if (type === ThresholdType.ChanceOverDrive) {\n                conditions = { onOverdriveChance: threshold };\n            }\n            return conditions;\n        };\n        const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let value = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseParamValue(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect[effectKey]);\n            }\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let valueLow, valueHigh, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                valueLow = parseParamValue(rawLowValue);\n                valueHigh = parseParamValue(rawHighValue);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n                valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n                chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n            }\n            const results = [];\n            if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources, value: {\n                        [buffKeyLow]: valueLow,\n                        [buffKeyHigh]: valueHigh,\n                        chance,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        const parseConditionalPassiveWithSingleNumericalCondition = ({ effect, context, injectionContext, originalId, buffId, thresholdType, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                    id: params[0],\n                    params: params[1],\n                    turnDuration: parseNumberOrDefault(params[4]),\n                }, context, injectionContext);\n                const maxTriggerCount = parseNumberOrDefault(params[2]);\n                const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], '1', thresholdType);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(5), 5, injectionContext);\n                if (triggeredBuffs.length > 0) {\n                    const thresholdConditions = getThresholdConditions(thresholdInfo);\n                    results.push(Object.assign({ id: buffId, originalId,\n                        sources, value: {\n                            triggeredBuffs,\n                            maxTriggerCount,\n                        }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        const parseConditionalBcFillWithSingleNumericalCondition = ({ effect, context, injectionContext, originalId, thresholdType, flatFillBuffId, percentFillBuffId, flatFillEffectKey, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let flatFill, percentFill, thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                flatFill = parseNumberOrDefault(params[0]) / 100;\n                percentFill = parseNumberOrDefault(params[1]);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(params[2], '1', thresholdType);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(3), 3, injectionContext);\n            }\n            else {\n                flatFill = parseNumberOrDefault(typedEffect[flatFillEffectKey]);\n                percentFill = 0; // NOTE: deathmax datamine does not parse this property\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, thresholdType);\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: flatFillBuffId, originalId,\n                    sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n            if (percentFill !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: percentFillBuffId, originalId,\n                    sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                elements: [],\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let element1, element2;\n                [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                [element1, element2].forEach((elementValue) => {\n                    if (elementValue && elementValue !== '0') {\n                        stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                if (Array.isArray(typedEffect['elements buffed'])) {\n                    stats.elements = typedEffect['elements buffed'];\n                }\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:elemental-${stat}`, originalId,\n                sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n            if (stats.elements.length > 0) {\n                stats.elements.forEach((element) => {\n                    STATS_ORDER.forEach((stat) => {\n                        const value = parseNumberOrDefault(stats[stat]);\n                        if (value !== 0) {\n                            results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                        }\n                    });\n                });\n            }\n            else {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                    }\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                unitType: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let unitType;\n                [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                if (unitType && unitType !== '0') {\n                    stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.unitType = typedEffect['unit type buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetUnitType = stats.unitType || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:3:type based-${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:4:resist-${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let element;\n            let mitigation = '0';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n                if (element !== BuffConditionElement.Unknown) {\n                    mitigation = typedEffect[`${element} resist%`];\n                }\n            }\n            const value = parseNumberOrDefault(mitigation);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:5:mitigate-${element}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'dmg% mitigation',\n                buffId: 'passive:8:mitigation',\n                originalId: '8',\n            });\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bc fill per turn',\n                buffId: 'passive:9:gradual bc fill',\n                originalId: '9',\n            });\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'hc effectiveness%',\n                buffId: 'passive:10:hc efficacy',\n                originalId: '10',\n            });\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:11:hp conditional-${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    const entry = Object.assign({ id: `passive:12:hp conditional drop boost-${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '13',\n                effectKeyLow: 'bc fill on enemy defeat low',\n                effectKeyHigh: 'bc fill on enemy defeat high',\n                effectKeyChance: 'bc fill on enemy defeat%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                buffId: 'passive:13:bc fill on enemy defeat',\n            });\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageReduction, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                damageReduction = parseNumberOrDefault(rawReduction);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n                chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n            }\n            const results = [];\n            if (damageReduction !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:14:chance mitigation', originalId,\n                    sources, value: {\n                        value: damageReduction,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('15', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '15',\n                effectKeyLow: 'hp% recover on enemy defeat low',\n                effectKeyHigh: 'hp% recover on enemy defeat high',\n                effectKeyChance: 'hp% recover on enemy defeat chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                defaultEffectChance: 100,\n                buffId: 'passive:15:heal on enemy defeat',\n            });\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n                healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:16:heal on win', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '17',\n                effectKeyLow: 'hp drain% low',\n                effectKeyHigh: 'hp drain% high',\n                effectKeyChance: 'hp drain chance%',\n                buffKeyLow: 'drainHealLow%',\n                buffKeyHigh: 'drainHealHigh%',\n                buffId: 'passive:17:hp absorb',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            const originalId = '19';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:19:drop boost-${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const originalId = '20';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                let params = splitEffectParams(typedEffect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(typedEffect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = [];\n            inflictedAilments.forEach(({ ailment, chance }) => {\n                if (chance !== 0) {\n                    results.push(Object.assign({ id: `passive:20:chance inflict-${ailment}`, originalId,\n                        sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('21', (effect, context, injectionContext) => {\n            const originalId = '21';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let rawDuration, extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['first x turns atk% (1)'];\n                stats.def = typedEffect['first x turns def% (3)'];\n                stats.rec = typedEffect['first x turns rec% (5)'];\n                stats.crit = typedEffect['first x turns crit% (7)'];\n                turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:21:first turn-${stat}`, originalId,\n                        sources,\n                        value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let fillLow, fillHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n                fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n            }\n            const results = [];\n            if (fillLow !== 0 || fillHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:23:bc fill on win', originalId,\n                    sources, value: {\n                        fillLow,\n                        fillHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '24',\n                effectKeyLow: 'dmg% to hp when attacked low',\n                effectKeyHigh: 'dmg% to hp when attacked high',\n                effectKeyChance: 'dmg% to hp when attacked chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:24:heal on hit',\n            });\n        });\n        map.set('25', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '25',\n                effectKeyLow: 'bc fill when attacked low',\n                effectKeyHigh: 'bc fill when attacked high',\n                effectKeyChance: 'bc fill when attacked%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:25:bc fill on hit',\n            });\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '26',\n                effectKeyLow: 'dmg% reflect low',\n                effectKeyHigh: 'dmg% reflect high',\n                effectKeyChance: 'dmg% reflect chance%',\n                buffKeyLow: 'damageReflectLow',\n                buffKeyHigh: 'damageReflectHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:26:chance damage reflect',\n            });\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'target% chance',\n                buffId: 'passive:27:target chance change',\n                originalId: '27',\n            });\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let value = 0;\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseNumberOrDefault(rawValue);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect['target% chance']);\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n            }\n            const results = [];\n            if (value !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                const entry = Object.assign({ id: 'passive:28:hp conditional target chance change', originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'ignore def%',\n                buffId: 'passive:29:chance def ignore',\n                originalId: '29',\n            });\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:30:bb gauge conditional-${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let sparkDamageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawSparkDamageBoost;\n                [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n                });\n            }\n            const results = [];\n            if (sparkDamageBoost !== 0) {\n                results.push(Object.assign({ id: 'passive:31:spark-damage', originalId,\n                    sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:31:spark-${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bb gauge fill rate%',\n                buffId: 'passive:32:bc efficacy',\n                originalId: '32',\n            });\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh, addedRec;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n                healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n                addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:33:gradual heal', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                        'addedRec%': addedRec,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'crit multiplier%',\n                buffId: 'passive:34:critical damage',\n                originalId: '34',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            });\n        });\n        map.set('35', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '35',\n                effectKeyLow: 'bc fill when attacking low',\n                effectKeyHigh: 'bc fill when attacking high',\n                effectKeyChance: 'bc fill when attacking%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onNormalAttack: true }),\n                buffId: 'passive:35:bc fill on normal attack',\n            });\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            const originalId = '36';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let additionalActions = 0, damageModifier = 0, chance = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                additionalActions = parseNumberOrDefault(rawAdditionalActions);\n                damageModifier = parseNumberOrDefault(rawDamageModifier);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n            }\n            const results = [];\n            if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:36:extra action', originalId,\n                    sources, value: {\n                        additionalActions,\n                        damageModifier,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let hitIncreasePerHit = 0, extraHitDamage = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'passive:37:hit count boost', originalId,\n                    sources, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawConvertedStat;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const rawConvertedStat = typedEffect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = `${statType}% buff`;\n                    if (effectKey in typedEffect) {\n                        stats[statType] = typedEffect[effectKey];\n                    }\n                });\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:40:converted-${stat}`, originalId,\n                        sources, value: {\n                            convertedStat,\n                            value,\n                        }, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('41', (effect, context, injectionContext) => {\n            const originalId = '41';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                minimumElements: '0',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.minimumElements = typedEffect['unique elements required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const minimumElements = parseNumberOrDefault(stats.minimumElements);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:41:unique element count-${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minimumUniqueElements: minimumElements }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const GENDER_MAPPING = {\n                0: UnitGender.Other,\n                1: UnitGender.Male,\n                2: UnitGender.Female,\n            };\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                gender: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawGender;\n                [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.gender = typedEffect['gender required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetGender = stats.gender || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:42:gender-${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'take 1 dmg%',\n                buffId: 'passive:43:chance damage to one',\n                originalId: '43',\n            });\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp buff'];\n                stats.atk = typedEffect['atk buff'];\n                stats.def = typedEffect['def buff'];\n                stats.rec = typedEffect['rec buff'];\n                stats.crit = typedEffect['crit buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:44:flat-${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('45', (effect, context, injectionContext) => {\n            const originalId = '45';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let baseResist = 0, buffResist = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n                baseResist = parseNumberOrDefault(rawBaseResist);\n                buffResist = parseNumberOrDefault(rawBuffResist);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                baseResist = parseNumberOrDefault(typedEffect['base crit% resist']);\n                buffResist = parseNumberOrDefault(typedEffect['buff crit% resist']);\n            }\n            const results = [];\n            if (baseResist !== 0) {\n                results.push(Object.assign({ id: 'passive:45:critical damage reduction-base', originalId,\n                    sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buffResist !== 0) {\n                results.push(Object.assign({ id: 'passive:45:critical damage reduction-buff', originalId,\n                    sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('46', (effect, context, injectionContext) => {\n            const originalId = '46';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const availableStats = ['atk', 'def', 'rec'];\n            const stats = [];\n            let proportionalMode = 'unknown';\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                availableStats.forEach((stat, index) => {\n                    const baseValue = parseNumberOrDefault(params[index * 2]);\n                    const addedValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                    if (baseValue !== 0 || addedValue !== 0) {\n                        stats.push({\n                            stat,\n                            baseValue,\n                            addedValue,\n                        });\n                    }\n                });\n                proportionalMode = params[6] === '1' ? 'lost' : 'remaining';\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                availableStats.forEach((stat) => {\n                    const baseValue = parseNumberOrDefault(typedEffect[`${stat}% base buff`]);\n                    const addedValue = parseNumberOrDefault(typedEffect[`${stat}% extra buff based on hp`]);\n                    if (baseValue !== 0 || addedValue !== 0) {\n                        stats.push({\n                            stat,\n                            baseValue,\n                            addedValue,\n                        });\n                    }\n                });\n                proportionalMode = typedEffect['buff proportional to hp'] || 'unknown';\n            }\n            const results = stats.map(({ stat, baseValue, addedValue }) => (Object.assign({ id: `passive:46:hp scaled-${stat}`, originalId,\n                sources, value: {\n                    baseValue,\n                    addedValue,\n                    proportionalMode,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('47', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '47',\n                effectKeyLow: 'bc fill on spark low',\n                effectKeyHigh: 'bc fill on spark high',\n                effectKeyChance: 'bc fill on spark%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'passive:47:bc fill on spark',\n            });\n        });\n        map.set('48', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'reduced bb bc cost%',\n                buffId: 'passive:48:bc cost reduction',\n                originalId: '48',\n            });\n        });\n        map.set('49', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '49',\n                effectKeyLow: 'reduced bb bc use% low',\n                effectKeyHigh: 'reduced bb bc use% high',\n                effectKeyChance: 'reduced bb bc use chance%',\n                buffKeyLow: 'reducedUseLow%',\n                buffKeyHigh: 'reducedUseHigh%',\n                buffId: 'passive:49:bb gauge consumption reduction',\n            });\n        });\n        map.set('50', (effect, context, injectionContext) => {\n            const originalId = '50';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let damageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                damageBoost = parseNumberOrDefault(params[6]) * 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`${element} units do extra elemental weakness dmg`]);\n                damageBoost = parseNumberOrDefault(typedEffect['elemental weakness multiplier%']);\n            }\n            let results = [];\n            if (damageBoost !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:50:elemental weakness damage-${element}`, originalId,\n                    sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:50:elemental weakness damage-unknown', originalId,\n                        sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            const originalId = '53';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let ResistType;\n            (function (ResistType) {\n                ResistType[\"CriticalDamage\"] = \"critical damage\";\n                ResistType[\"ElementDamage\"] = \"element damage\";\n                ResistType[\"CriticalHitRate\"] = \"critical rate\";\n            })(ResistType || (ResistType = {}));\n            const resistances = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseCritChanceResist, rawBuffCritChanceResist, ...extraParams] = splitEffectParams(typedEffect);\n                [\n                    { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                    { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                    { resistType: ResistType.CriticalHitRate, base: parseNumberOrDefault(rawBaseCritChanceResist), buff: parseNumberOrDefault(rawBuffCritChanceResist) },\n                ].forEach(({ resistType, base, buff }) => {\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                [\n                    { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist%', buffKey: 'crit dmg buffed damage resist%' },\n                    { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist%', buffKey: 'strong buffed element damage resist%' },\n                    { resistType: ResistType.CriticalHitRate, baseKey: 'crit chance base resist%', buffKey: 'crit chance buffed resist%' },\n                ].forEach(({ resistType, baseKey, buffKey }) => {\n                    const base = parseNumberOrDefault(typedEffect[baseKey]);\n                    const buff = parseNumberOrDefault(typedEffect[buffKey]);\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n            }\n            const results = [];\n            resistances.forEach(({ resistType, base, buff }) => {\n                if (base !== 0) {\n                    results.push(Object.assign({ id: `passive:53:${resistType}-base`, originalId,\n                        sources, value: base, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n                if (buff !== 0) {\n                    results.push(Object.assign({ id: `passive:53:${resistType}-buff`, originalId,\n                        sources, value: buff, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('55', (effect, context, injectionContext) => {\n            const originalId = '55';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                    id: params[0],\n                    params: params[1],\n                    turnDuration: parseNumberOrDefault(params[5]),\n                }, context, injectionContext);\n                const maxTriggerCount = parseNumberOrDefault(params[2]);\n                const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], params[4], ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(6), 6, injectionContext);\n                if (triggeredBuffs.length > 0) {\n                    const thresholdConditions = getThresholdConditions(thresholdInfo);\n                    results.push(Object.assign({ id: 'passive:55:hp conditional', originalId,\n                        sources, value: {\n                            triggeredBuffs,\n                            maxTriggerCount,\n                        }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('58', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'guard increase mitigation%',\n                buffId: 'passive:58:guard mitigation',\n                originalId: '58',\n            });\n        });\n        map.set('59', (effect, context, injectionContext) => {\n            const originalId = '59';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let percentFill, flatFill;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled when attacked while guarded']);\n                flatFill = parseNumberOrDefault(typedEffect['bc filled when attacked while guarded']);\n            }\n            const results = [];\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-percent', originalId,\n                    sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n            }\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-flat', originalId,\n                    sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('61', (effect, context, injectionContext) => {\n            const originalId = '61';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let percentFill, flatFill;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled on guard']);\n                flatFill = parseNumberOrDefault(typedEffect['bc filled on guard']);\n            }\n            const results = [];\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'passive:61:bc fill on guard-percent', originalId,\n                    sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n            }\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'passive:61:bc fill on guard-flat', originalId,\n                    sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('62', (effect, context, injectionContext) => {\n            const originalId = '62';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let mitigation = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                mitigation = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n                mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n            }\n            let results = [];\n            if (mitigation !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:62:mitigate-${element}`, originalId,\n                    sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:62:mitigate-unknown', originalId,\n                        sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('63', (effect, context, injectionContext) => {\n            const originalId = '63';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let mitigation = 0, turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                mitigation = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n                mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n                turnDuration = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks buff for first x turns']);\n            }\n            let results = [];\n            if (mitigation !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:63:first turn mitigate-${element}`, originalId,\n                    sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:63:first turn mitigate-unknown', originalId,\n                        sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('64', (effect, context, injectionContext) => {\n            const originalId = '64';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let bb = 0, sbb = 0, ubb = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBb, rawSbb, rawUbb, ...extraParams] = splitEffectParams(typedEffect);\n                bb = parseNumberOrDefault(rawBb);\n                sbb = parseNumberOrDefault(rawSbb);\n                ubb = parseNumberOrDefault(rawUbb);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                bb = parseNumberOrDefault(typedEffect['bb atk% buff']);\n                sbb = parseNumberOrDefault(typedEffect['sbb atk% buff']);\n                ubb = parseNumberOrDefault(typedEffect['ubb atk% buff']);\n            }\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'passive:64:attack boost-bb', originalId,\n                    sources, conditions: Object.assign({}, conditionInfo), value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'passive:64:attack boost-sbb', originalId,\n                    sources, conditions: Object.assign({}, conditionInfo), value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'passive:64:attack boost-ubb', originalId,\n                    sources, conditions: Object.assign({}, conditionInfo), value: ubb }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('65', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '65',\n                effectKeyLow: 'bc fill on crit min',\n                effectKeyHigh: 'bc fill on crit max',\n                effectKeyChance: 'bc fill on crit%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onCriticalHit: true }),\n                buffId: 'passive:65:bc fill on crit',\n            });\n        });\n        map.set('66', (effect, context, injectionContext) => {\n            const originalId = '66';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let triggeredBuffs = [];\n            let triggerOnBb = false, triggerOnSbb = false, triggerOnUbb = false;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawProcIds, rawParams = '', rawTargetTypes = '', rawTargetAreas = '', rawStartFrames = '', rawTriggerOnBb, rawTriggerOnSbb, rawTriggerOnUbb, ...extraParams] = splitEffectParams(typedEffect);\n                const allProcIds = rawProcIds.split('~');\n                const allProcParams = rawParams.split('~');\n                const allTargetTypes = rawTargetTypes.split('~');\n                const allTargetAreas = rawTargetAreas.split('~');\n                const allStartFrames = rawStartFrames.split('~');\n                const FRAME_IN_MS = (16 + (2 / 3));\n                allProcIds.forEach((procId, index) => {\n                    const params = (allProcParams[index] || '').replace(/&/g, ',');\n                    const targetType = allTargetTypes[index];\n                    const targetArea = allTargetAreas[index];\n                    const startFrame = parseNumberOrDefault(allStartFrames[index]);\n                    const effectDelayInMs = (startFrame * FRAME_IN_MS).toFixed(1);\n                    const procEffect = {\n                        'proc id': procId,\n                        params,\n                        'effect delay time(ms)/frame': `${effectDelayInMs}/${startFrame}`,\n                        'target area': TARGET_AREA_MAPPING[targetArea] || targetArea || 'unknown target area',\n                        'target type': TARGET_TYPE_MAPPING[targetType] || targetType || 'unknown target type',\n                    };\n                    const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                    triggeredBuffs = triggeredBuffs.concat(procBuffs);\n                });\n                triggerOnBb = rawTriggerOnBb === '1';\n                triggerOnSbb = rawTriggerOnSbb === '1';\n                triggerOnUbb = rawTriggerOnUbb === '1';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const triggeredEffects = typedEffect['triggered effect'];\n                if (Array.isArray(triggeredEffects)) {\n                    triggeredEffects.forEach((procEffect) => {\n                        const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                        triggeredBuffs = triggeredBuffs.concat(procBuffs);\n                    });\n                }\n                triggerOnBb = !!typedEffect['trigger on bb'];\n                triggerOnSbb = !!typedEffect['trigger on sbb'];\n                triggerOnUbb = !!typedEffect['trigger on ubb'];\n            }\n            const results = [];\n            if ((triggerOnBb || triggerOnSbb || triggerOnUbb) && triggeredBuffs.length > 0) {\n                const addBuffOfBurstType = (burstType) => {\n                    results.push(Object.assign({ id: `passive:66:add effect to skill-${burstType}`, originalId,\n                        sources, value: triggeredBuffs, conditions: Object.assign({}, conditionInfo) }, targetData));\n                };\n                if (triggerOnBb) {\n                    addBuffOfBurstType('bb');\n                }\n                if (triggerOnSbb) {\n                    addBuffOfBurstType('sbb');\n                }\n                if (triggerOnUbb) {\n                    addBuffOfBurstType('ubb');\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('69', (effect, context, injectionContext) => {\n            const originalId = '69';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let recoveredHp = 0, maxCount = 0;\n            let chanceLow = 0, chanceHigh = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawRecoveredHp, rawMaxCount, rawChanceLow, rawChanceHigh, ...extraParams] = splitEffectParams(typedEffect);\n                recoveredHp = parseNumberOrDefault(rawRecoveredHp);\n                maxCount = parseNumberOrDefault(rawMaxCount);\n                chanceLow = parseNumberOrDefault(rawChanceLow);\n                chanceHigh = parseNumberOrDefault(rawChanceHigh);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                recoveredHp = parseNumberOrDefault(typedEffect['angel idol recover hp%']);\n                maxCount = parseNumberOrDefault(typedEffect['angel idol recover counts']);\n                chanceLow = parseNumberOrDefault(typedEffect['angel idol recover chance% low']);\n                chanceHigh = parseNumberOrDefault(typedEffect['angel idol recover chance% high']);\n            }\n            const results = [];\n            if (chanceLow !== 0 || chanceHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:69:chance ko resistance', originalId,\n                    sources, value: {\n                        'recoveredHp%': recoveredHp,\n                        maxCount,\n                        chanceLow,\n                        chanceHigh,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('70', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'od fill rate%',\n                buffId: 'passive:70:od fill rate',\n                originalId: '70',\n            });\n        });\n        map.set('71', (effect, context, injectionContext) => {\n            const originalId = '71';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const inflictionChances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        inflictionChances[ailment] = typedEffect[correspondingKey];\n                    }\n                });\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(inflictionChances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:71:inflict on hit-${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('72', (effect, context, injectionContext) => {\n            const originalId = '72';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawHpAtTurnStart, rawBcAtTurnStart, ...extraParams] = splitEffectWithUnknownPassiveParamsProperty(effect);\n            const hpAtTurnStart = rawHpAtTurnStart === '1';\n            const bcAtTurnStart = rawBcAtTurnStart === '1';\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (hpAtTurnStart) {\n                results.push(Object.assign({ id: 'passive:72:effect at turn start-hp', originalId,\n                    sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (bcAtTurnStart) {\n                results.push(Object.assign({ id: 'passive:72:effect at turn start-bc', originalId,\n                    sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('73', (effect, context, injectionContext) => {\n            const originalId = '73';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis, Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction];\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n                'atk down': '0',\n                'def down': '0',\n                'rec down': '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, resistances['atk down'], resistances['def down'], resistances['rec down'], ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:73:resist-${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('74', (effect, context, injectionContext) => {\n            const originalId = '74';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let requiredAilments, attackBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawRequiredAilments, rawBoost, ...extraParams] = splitEffectParams(typedEffect);\n                requiredAilments = rawRequiredAilments.split('&')\n                    .filter((p) => p !== '0')\n                    .map((p) => AILMENT_MAPPING[p] || Ailment.Unknown);\n                attackBoost = parseNumberOrDefault(rawBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(typedEffect).filter((k) => (typedEffect[k] === true) && k.startsWith('atk% buff when enemy has'));\n                requiredAilments = AILMENTS_ORDER.filter((ailment) => ailmentKeysInEffect.find((k) => k.includes(ailment)));\n                attackBoost = parseNumberOrDefault(typedEffect['atk% buff when enemy has ailment']);\n            }\n            const results = [];\n            if (attackBoost !== 0) {\n                results.push(Object.assign({ id: 'passive:74:ailment attack boost', originalId,\n                    sources, value: attackBoost, conditions: Object.assign(Object.assign({}, conditionInfo), { targetHasAnyOfGivenAilments: requiredAilments }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('75', (effect, context, injectionContext) => {\n            const originalId = '75';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageIncrease = 0, chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(typedEffect);\n                damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                damageIncrease = parseNumberOrDefault(typedEffect['spark debuff%']);\n                chance = parseNumberOrDefault(typedEffect['spark debuff chance%']);\n                turnDuration = parseNumberOrDefault(typedEffect['spark debuff turns']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'passive:75:spark vulnerability', originalId,\n                    sources, duration: turnDuration, value: { 'sparkDamage%': damageIncrease, chance }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('77', (effect, context, injectionContext) => {\n            const originalId = '77';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let baseResist = 0, buffResist = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n                baseResist = parseNumberOrDefault(rawBaseResist);\n                buffResist = parseNumberOrDefault(rawBuffResist);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                baseResist = parseNumberOrDefault(typedEffect['base spark dmg% resist']);\n                buffResist = parseNumberOrDefault(typedEffect['buff spark dmg% resist']);\n            }\n            const results = [];\n            if (baseResist !== 0) {\n                results.push(Object.assign({ id: 'passive:77:spark damage reduction-base', originalId,\n                    sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buffResist !== 0) {\n                results.push(Object.assign({ id: 'passive:77:spark damage reduction-buff', originalId,\n                    sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('78', (effect, context, injectionContext) => {\n            return parseConditionalPassiveWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '78',\n                buffId: 'passive:78:damage taken conditional',\n                thresholdType: ThresholdType.DamageTaken,\n            });\n        });\n        map.set('79', (effect, context, injectionContext) => {\n            return parseConditionalBcFillWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '79',\n                thresholdType: ThresholdType.DamageTaken,\n                flatFillBuffId: 'passive:79:bc fill after damage taken conditional-flat',\n                percentFillBuffId: 'passive:79:bc fill after damage taken conditional-percent',\n                flatFillEffectKey: 'increase bb gauge',\n            });\n        });\n        map.set('80', (effect, context, injectionContext) => {\n            return parseConditionalPassiveWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '80',\n                buffId: 'passive:80:damage dealt conditional',\n                thresholdType: ThresholdType.DamageDealt,\n            });\n        });\n        map.set('81', (effect, context, injectionContext) => {\n            return parseConditionalBcFillWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '81',\n                thresholdType: ThresholdType.DamageDealt,\n                flatFillBuffId: 'passive:81:bc fill after damage dealt conditional-flat',\n                percentFillBuffId: 'passive:81:bc fill after damage dealt conditional-percent',\n                flatFillEffectKey: 'increase bb gauge',\n            });\n        });\n        map.set('82', (effect, context, injectionContext) => {\n            return parseConditionalPassiveWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '82',\n                buffId: 'passive:82:bc received conditional',\n                thresholdType: ThresholdType.BcReceived,\n            });\n        });\n        map.set('83', (effect, context, injectionContext) => {\n            return parseConditionalBcFillWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '83',\n                thresholdType: ThresholdType.BcReceived,\n                flatFillBuffId: 'passive:83:bc fill after bc received conditional-flat',\n                percentFillBuffId: 'passive:83:bc fill after bc received conditional-percent',\n                flatFillEffectKey: 'increase bb gauge',\n            });\n        });\n        map.set('84', (effect, context, injectionContext) => {\n            return parseConditionalPassiveWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '84',\n                buffId: 'passive:84:hc received conditional',\n                thresholdType: ThresholdType.HcReceived,\n            });\n        });\n        map.set('85', (effect, context, injectionContext) => {\n            return parseConditionalBcFillWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '85',\n                thresholdType: ThresholdType.HcReceived,\n                flatFillBuffId: 'passive:85:bc fill after hc received conditional-flat',\n                percentFillBuffId: 'passive:85:bc fill after hc received conditional-percent',\n                flatFillEffectKey: 'increase bb gauge',\n            });\n        });\n        map.set('86', (effect, context, injectionContext) => {\n            return parseConditionalPassiveWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '86',\n                buffId: 'passive:86:spark count conditional',\n                thresholdType: ThresholdType.SparkCount,\n            });\n        });\n        map.set('87', (effect, context, injectionContext) => {\n            return parseConditionalBcFillWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '87',\n                thresholdType: ThresholdType.SparkCount,\n                flatFillBuffId: 'passive:87:bc fill after spark count conditional-flat',\n                percentFillBuffId: 'passive:87:bc fill after spark count conditional-percent',\n                flatFillEffectKey: 'increase bb gauge',\n            });\n        });\n        map.set('88', (effect, context, injectionContext) => {\n            return parseConditionalPassiveWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '88',\n                buffId: 'passive:88:on guard conditional',\n                thresholdType: ThresholdType.ChanceGuard,\n            });\n        });\n        map.set('89', (effect, context, injectionContext) => {\n            return parseConditionalPassiveWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '89',\n                buffId: 'passive:89:on critical hit conditional',\n                thresholdType: ThresholdType.ChanceCrit,\n            });\n        });\n        map.set('90', (effect, context, injectionContext) => {\n            const originalId = '90';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const inflictionChances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('inflict'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        inflictionChances[ailment] = typedEffect[correspondingKey];\n                    }\n                });\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(inflictionChances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:90:inflict on crit-${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), { onCriticalHit: true }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('91', (effect, context, injectionContext) => {\n            const originalId = '91';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [firstUnknownValue, rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseNumberOrDefault(rawValue);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams([firstUnknownValue, '0', '0'].concat(extraParams), 0, injectionContext);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'passive:91:first turn spark', originalId,\n                    sources, duration: turnDuration, value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('92', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'ignore def resist chance%',\n                buffId: 'passive:92:negate defense ignore',\n                originalId: '92',\n            });\n        });\n        map.set('93', (effect, context, injectionContext) => {\n            const originalId = '93';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                // is last parameter turn duration, where -1 is lasting indefinitely?\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(6), 6, injectionContext);\n            }\n            const results = elements.map((element) => (Object.assign({ id: `passive:93:add element-${element}`, originalId,\n                sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('96', (effect, context, injectionContext) => {\n            const originalId = '96';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageIncrease = 0, chance = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawDamageIncrease, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                damageIncrease = parseNumberOrDefault(typedEffect['aoe atk inc%']);\n                chance = parseNumberOrDefault(typedEffect['chance to aoe']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'passive:96:aoe normal attack', originalId,\n                    sources, value: { 'damageModifier%': damageIncrease, chance }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('97', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'xp gained increase%',\n                buffId: 'passive:97:player exp boost',\n                originalId: '97',\n            });\n        });\n        map.set('100', (effect, context, injectionContext) => {\n            const originalId = '100';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let sparkDamage = 0, chance = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawChance, rawSparkDamage, ...extraParams] = splitEffectParams(typedEffect);\n                chance = parseNumberOrDefault(rawChance);\n                sparkDamage = parseNumberOrDefault(rawSparkDamage);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(typedEffect['spark crit chance%']);\n                sparkDamage = parseNumberOrDefault(typedEffect['spark crit dmg%']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'passive:100:spark critical', originalId,\n                    sources, value: { 'sparkDamage%': sparkDamage, chance }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('101', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '101',\n                effectKeyLow: 'heal on spark low',\n                effectKeyHigh: 'heal on spark high',\n                effectKeyChance: 'heal on spark%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                buffId: 'passive:101:heal on spark',\n            });\n        });\n        map.set('102', (effect, context, injectionContext) => {\n            const originalId = '102';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(6), 6, injectionContext);\n            }\n            const results = elements.map((element) => (Object.assign({ id: `passive:102:add element-${element}`, originalId,\n                sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('103', (effect, context, injectionContext) => {\n            const originalId = '103';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const boosts = {\n                bb: '0',\n                sbb: '0',\n                ubb: '0',\n            };\n            const BOOST_ORDER = ['bb', 'sbb', 'ubb'];\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [boosts.bb, boosts.sbb, boosts.ubb, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                boosts.bb = typedEffect['bb atk% add'];\n                boosts.sbb = typedEffect['sbb atk% add'];\n                boosts.ubb = typedEffect['ubb atk% add'];\n                // not using existing effect threshold parsing functions because this is\n                // is parsed differently for some reason\n                thresholdInfo = {\n                    threshold: parseNumberOrDefault(typedEffect['hp threshold']),\n                    requireAbove: typedEffect['triggered when hp'] === 'higher',\n                    type: ThresholdType.Hp,\n                };\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            BOOST_ORDER.forEach((boost) => {\n                const value = parseNumberOrDefault(boosts[boost]);\n                if (value !== 0) {\n                    const entry = Object.assign({ id: `passive:103:hp conditional attack boost-${boost}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('104', (effect, context, injectionContext) => {\n            const originalId = '104';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let sparkDamageBoost = 0;\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawSparkDamageBoost;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n                });\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            const results = [];\n            if (sparkDamageBoost !== 0) {\n                results.push(Object.assign({ id: 'passive:104:hp conditional spark-damage', originalId,\n                    sources, value: sparkDamageBoost, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:104:hp conditional spark-${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('105', (effect, context, injectionContext) => {\n            const originalId = '105';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const availableStats = ['atk', 'def', 'rec'];\n            const stats = [];\n            let turnCount;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                const scaleLowToHigh = params[6] === '1';\n                availableStats.forEach((stat, index) => {\n                    const minValue = parseNumberOrDefault(params[index * 2]);\n                    const maxValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                    if (minValue !== 0 || maxValue !== 0) {\n                        stats.push({\n                            stat,\n                            startingValue: scaleLowToHigh ? minValue : maxValue,\n                            endingValue: scaleLowToHigh ? maxValue : minValue,\n                        });\n                    }\n                });\n                turnCount = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                const scaleLowToHigh = 'increase from min to max' in typedEffect;\n                availableStats.forEach((stat) => {\n                    const minValue = parseNumberOrDefault(typedEffect[`${stat}% min buff`]);\n                    const maxValue = parseNumberOrDefault(typedEffect[`${stat}% max buff`]);\n                    if (minValue !== 0 || maxValue !== 0) {\n                        stats.push({\n                            stat,\n                            startingValue: scaleLowToHigh ? minValue : maxValue,\n                            endingValue: scaleLowToHigh ? maxValue : minValue,\n                        });\n                    }\n                });\n                turnCount = parseNumberOrDefault(typedEffect['turn count']);\n            }\n            const results = stats.map(({ stat, startingValue, endingValue }) => (Object.assign({ id: `passive:105:turn scaled-${stat}`, originalId,\n                sources, value: {\n                    'startingValue%': startingValue,\n                    'endingValue%': endingValue,\n                    turnCount,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('106', (effect, context, injectionContext) => {\n            return parseConditionalPassiveWithSingleNumericalCondition({\n                effect,\n                context,\n                injectionContext,\n                originalId: '106',\n                buffId: 'passive:106:on overdrive conditional',\n                thresholdType: ThresholdType.ChanceOverDrive,\n            });\n        });\n        map.set('107', (effect, context, injectionContext) => {\n            const originalId = '107';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const [addedPassiveId, addedPassiveParams = '', ...extraParams] = splitEffectParams(typedEffect);\n                const addedPassiveAsEffect = {\n                    'passive id': addedPassiveId,\n                    params: addedPassiveParams.split('$').join(','),\n                };\n                const addedPassiveContext = Object.assign(Object.assign({}, context), { source: BuffSource.LeaderSkill });\n                const addedBuffs = convertPassiveEffectToBuffs(addedPassiveAsEffect, addedPassiveContext);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n                if (addedBuffs.length > 0) {\n                    results.push(Object.assign({ id: 'passive:107:add effect to leader skill', originalId,\n                        sources, value: addedBuffs, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to {@link IBuff} format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given passive effect.\n     */\n    function defaultConversionFunction$2(effect, context) {\n        const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given passive effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Passive effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertPassiveEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isPassiveEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping, convertPassiveEffectToBuffs).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$2(effect, context);\n    }\n\n    const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ TURN_DURATION_MODIFICATION: {\n            id: BuffId.TURN_DURATION_MODIFICATION,\n            name: 'Passive Turn Duration Modification',\n            stat: UnitStat.turnDurationModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [\n                (buff && buff.value &&\n                    buff.value.duration &&\n                    buff.value.duration < 0) ?\n                    IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n            ],\n        }, NO_PARAMS_SPECIFIED: {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            name: 'No Parameters Specified',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_PASSIVE_EFFECT_ID: {\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            name: 'Unknown Passive Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_PASSIVE_BUFF_PARAMS: {\n            id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n            name: 'Unknown Passive Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'passive:1:hp': {\n            id: BuffId['passive:1:hp'],\n            name: 'Passive HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:1:atk': {\n            id: BuffId['passive:1:atk'],\n            name: 'Passive Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:1:def': {\n            id: BuffId['passive:1:def'],\n            name: 'Passive Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:1:rec': {\n            id: BuffId['passive:1:rec'],\n            name: 'Passive Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:1:crit': {\n            id: BuffId['passive:1:crit'],\n            name: 'Passive Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        } }, (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:2:elemental-hp': {\n                id: BuffId['passive:2:elemental-hp'],\n                name: 'Passive Elemental HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:2:elemental-atk': {\n                id: BuffId['passive:2:elemental-atk'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:2:elemental-def': {\n                id: BuffId['passive:2:elemental-def'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:2:elemental-rec': {\n                id: BuffId['passive:2:elemental-rec'],\n                name: 'Passive Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:2:elemental-crit': {\n                id: BuffId['passive:2:elemental-crit'],\n                name: 'Passive Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let unitType = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        unitType = buff.conditions.targetUnitType || '';\n                    }\n                }\n                if (typeof unitType !== 'string' || !unitType) {\n                    unitType = 'unknown';\n                }\n                let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n                if (!unitType || !(iconKey in IconId)) {\n                    iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:3:type based-hp': {\n                id: BuffId['passive:3:type based-hp'],\n                name: 'Passive Type-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:3:type based-atk': {\n                id: BuffId['passive:3:type based-atk'],\n                name: 'Passive Type-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:3:type based-def': {\n                id: BuffId['passive:3:type based-def'],\n                name: 'Passive Type-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:3:type based-rec': {\n                id: BuffId['passive:3:type based-rec'],\n                name: 'Passive Type-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:3:type based-crit': {\n                id: BuffId['passive:3:type based-crit'],\n                name: 'Passive Type-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:4:resist-poison': {\n            id: BuffId['passive:4:resist-poison'],\n            name: 'Passive Poison Resistance',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:4:resist-weak': {\n            id: BuffId['passive:4:resist-weak'],\n            name: 'Passive Weak Resistance',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:4:resist-sick': {\n            id: BuffId['passive:4:resist-sick'],\n            name: 'Passive Sick Resistance',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:4:resist-injury': {\n            id: BuffId['passive:4:resist-injury'],\n            name: 'Passive Injury Resistance',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:4:resist-curse': {\n            id: BuffId['passive:4:resist-curse'],\n            name: 'Passive Curse Resistance',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:4:resist-paralysis': {\n            id: BuffId['passive:4:resist-paralysis'],\n            name: 'Passive Paralysis Resistance',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:5:mitigate-fire': {\n            id: BuffId['passive:5:mitigate-fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:5:mitigate-water': {\n            id: BuffId['passive:5:mitigate-water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:5:mitigate-earth': {\n            id: BuffId['passive:5:mitigate-earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:5:mitigate-thunder': {\n            id: BuffId['passive:5:mitigate-thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:5:mitigate-light': {\n            id: BuffId['passive:5:mitigate-light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:5:mitigate-dark': {\n            id: BuffId['passive:5:mitigate-dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:5:mitigate-unknown': {\n            id: BuffId['passive:5:mitigate-unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:8:mitigation': {\n            id: BuffId['passive:8:mitigation'],\n            name: 'Passive Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:9:gradual bc fill': {\n            id: BuffId['passive:9:gradual bc fill'],\n            name: 'Passive Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:10:hc efficacy': {\n            id: BuffId['passive:10:hc efficacy'],\n            name: 'Passive HC Efficacy',\n            stat: UnitStat.hcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HCREC],\n        }, 'passive:11:hp conditional-atk': {\n            id: BuffId['passive:11:hp conditional-atk'],\n            name: 'Passive HP-Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n        }, 'passive:11:hp conditional-def': {\n            id: BuffId['passive:11:hp conditional-def'],\n            name: 'Passive HP-Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n        }, 'passive:11:hp conditional-rec': {\n            id: BuffId['passive:11:hp conditional-rec'],\n            name: 'Passive HP-Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n        }, 'passive:11:hp conditional-crit': {\n            id: BuffId['passive:11:hp conditional-crit'],\n            name: 'Passive HP-Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n        }, 'passive:12:hp conditional drop boost-bc': {\n            id: BuffId['passive:12:hp conditional drop boost-bc'],\n            name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n        }, 'passive:12:hp conditional drop boost-hc': {\n            id: BuffId['passive:12:hp conditional drop boost-hc'],\n            name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n        }, 'passive:12:hp conditional drop boost-item': {\n            id: BuffId['passive:12:hp conditional drop boost-item'],\n            name: 'Passive HP-Conditional Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n        }, 'passive:12:hp conditional drop boost-zel': {\n            id: BuffId['passive:12:hp conditional drop boost-zel'],\n            name: 'Passive HP-Conditional Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n        }, 'passive:12:hp conditional drop boost-karma': {\n            id: BuffId['passive:12:hp conditional drop boost-karma'],\n            name: 'Passive HP-Conditional Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n        }, 'passive:13:bc fill on enemy defeat': {\n            id: BuffId['passive:13:bc fill on enemy defeat'],\n            name: 'Passive BC Fill on Enemy Defeat',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:14:chance mitigation': {\n            id: BuffId['passive:14:chance mitigation'],\n            name: 'Passive Damage Reduction (Chance)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:15:heal on enemy defeat': {\n            id: BuffId['passive:15:heal on enemy defeat'],\n            name: 'Passive Heal on Enemy Defeat',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:16:heal on win': {\n            id: BuffId['passive:16:heal on win'],\n            name: 'Passive Heal on Battle Win',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:17:hp absorb': {\n            id: BuffId['passive:17:hp absorb'],\n            name: 'Passive HP Absorption',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPABS],\n        }, 'passive:19:drop boost-bc': {\n            id: BuffId['passive:19:drop boost-bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'passive:19:drop boost-hc': {\n            id: BuffId['passive:19:drop boost-hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'passive:19:drop boost-item': {\n            id: BuffId['passive:19:drop boost-item'],\n            name: 'Passive Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'passive:19:drop boost-zel': {\n            id: BuffId['passive:19:drop boost-zel'],\n            name: 'Passive Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n        }, 'passive:19:drop boost-karma': {\n            id: BuffId['passive:19:drop boost-karma'],\n            name: 'Passive Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n        }, 'passive:20:chance inflict-poison': {\n            id: BuffId['passive:20:chance inflict-poison'],\n            name: 'Passive Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'passive:20:chance inflict-weak': {\n            id: BuffId['passive:20:chance inflict-weak'],\n            name: 'Passive Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'passive:20:chance inflict-sick': {\n            id: BuffId['passive:20:chance inflict-sick'],\n            name: 'Passive Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'passive:20:chance inflict-injury': {\n            id: BuffId['passive:20:chance inflict-injury'],\n            name: 'Passive Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'passive:20:chance inflict-curse': {\n            id: BuffId['passive:20:chance inflict-curse'],\n            name: 'Passive Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'passive:20:chance inflict-paralysis': {\n            id: BuffId['passive:20:chance inflict-paralysis'],\n            name: 'Passive Paralysis Infliction',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'passive:20:chance inflict-atk down': {\n            id: BuffId['passive:20:chance inflict-atk down'],\n            name: 'Passive Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'passive:20:chance inflict-def down': {\n            id: BuffId['passive:20:chance inflict-def down'],\n            name: 'Passive Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'passive:20:chance inflict-rec down': {\n            id: BuffId['passive:20:chance inflict-rec down'],\n            name: 'Passive Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'passive:20:chance inflict-unknown': {\n            id: BuffId['passive:20:chance inflict-unknown'],\n            name: 'Passive Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'passive:21:first turn-atk': {\n            id: BuffId['passive:21:first turn-atk'],\n            name: 'Attack Boost for X Turns',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:21:first turn-def': {\n            id: BuffId['passive:21:first turn-def'],\n            name: 'Defense Boost for X Turns',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:21:first turn-rec': {\n            id: BuffId['passive:21:first turn-rec'],\n            name: 'Recovery Boost for X Turns',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:21:first turn-crit': {\n            id: BuffId['passive:21:first turn-crit'],\n            name: 'Critical Hit Rate Boost for X Turns',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:23:bc fill on win': {\n            id: BuffId['passive:23:bc fill on win'],\n            name: 'Passive BC Fill on Battle Win',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:24:heal on hit': {\n            id: BuffId['passive:24:heal on hit'],\n            name: 'Passive Heal when Attacked (Chance)',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'passive:25:bc fill on hit': {\n            id: BuffId['passive:25:bc fill on hit'],\n            name: 'Passive BC Fill when Attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:26:chance damage reflect': {\n            id: BuffId['passive:26:chance damage reflect'],\n            name: 'Passive Damage Counter (Chance)',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'passive:27:target chance change': {\n            id: BuffId['passive:27:target chance change'],\n            name: 'Passive Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n        }, 'passive:28:hp conditional target chance change': {\n            id: BuffId['passive:28:hp conditional target chance change'],\n            name: 'Passive HP-Conditional Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n        }, 'passive:29:chance def ignore': {\n            id: BuffId['passive:29:chance def ignore'],\n            name: 'Passive Defense Ignore (Chance)',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'passive:30:bb gauge conditional-atk': {\n            id: BuffId['passive:30:bb gauge conditional-atk'],\n            name: 'Passive BB Gauge Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n        }, 'passive:30:bb gauge conditional-def': {\n            id: BuffId['passive:30:bb gauge conditional-def'],\n            name: 'Passive BB Gauge Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n        }, 'passive:30:bb gauge conditional-rec': {\n            id: BuffId['passive:30:bb gauge conditional-rec'],\n            name: 'Passive BB Gauge Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n        }, 'passive:30:bb gauge conditional-crit': {\n            id: BuffId['passive:30:bb gauge conditional-crit'],\n            name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n        }, 'passive:31:spark-damage': {\n            id: BuffId['passive:31:spark-damage'],\n            name: 'Passive Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'passive:31:spark-bc': {\n            id: BuffId['passive:31:spark-bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n        }, 'passive:31:spark-hc': {\n            id: BuffId['passive:31:spark-hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n        }, 'passive:31:spark-item': {\n            id: BuffId['passive:31:spark-item'],\n            name: 'Passive Item Drop Rate Boost during Spark',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n        }, 'passive:31:spark-zel': {\n            id: BuffId['passive:31:spark-zel'],\n            name: 'Passive Zel Drop Rate Boost during Spark',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n        }, 'passive:31:spark-karma': {\n            id: BuffId['passive:31:spark-karma'],\n            name: 'Passive Karma Drop Rate Boost during Spark',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n        }, 'passive:32:bc efficacy': {\n            id: BuffId['passive:32:bc efficacy'],\n            name: 'Passive BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'passive:33:gradual heal': {\n            id: BuffId['passive:33:gradual heal'],\n            name: 'Passive Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:34:critical damage': {\n            id: BuffId['passive:34:critical damage'],\n            name: 'Passive Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'passive:35:bc fill on normal attack': {\n            id: BuffId['passive:35:bc fill on normal attack'],\n            name: 'Passive BC Fill when Normal Attacking',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:36:extra action': {\n            id: BuffId['passive:36:extra action'],\n            name: 'Passive Extra Action',\n            stat: UnitStat.extraAction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DBLSTRIKE],\n        }, 'passive:37:hit count boost': {\n            id: BuffId['passive:37:hit count boost'],\n            name: 'Passive Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'passive:40:converted-atk': {\n            id: BuffId['passive:40:converted-atk'],\n            name: 'Passive Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'passive:40:converted-def': {\n            id: BuffId['passive:40:converted-def'],\n            name: 'Passive Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'passive:40:converted-rec': {\n            id: BuffId['passive:40:converted-rec'],\n            name: 'Passive Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'passive:41:unique element count-hp': {\n            id: BuffId['passive:41:unique element count-hp'],\n            name: 'Passive Element Squad-based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n        }, 'passive:41:unique element count-atk': {\n            id: BuffId['passive:41:unique element count-atk'],\n            name: 'Passive Element Squad-based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n        }, 'passive:41:unique element count-def': {\n            id: BuffId['passive:41:unique element count-def'],\n            name: 'Passive Element Squad-based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n        }, 'passive:41:unique element count-rec': {\n            id: BuffId['passive:41:unique element count-rec'],\n            name: 'Passive Element Squad-based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n        }, 'passive:41:unique element count-crit': {\n            id: BuffId['passive:41:unique element count-crit'],\n            name: 'Passive Element Squad-based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let gender = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        gender = buff.conditions.targetGender || '';\n                    }\n                }\n                if (typeof gender !== 'string' || !gender) {\n                    gender = 'unknown';\n                }\n                let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n                if (!gender || !(iconKey in IconId)) {\n                    iconKey = `BUFF_GENDER${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:42:gender-hp': {\n                id: BuffId['passive:42:gender-hp'],\n                name: 'Passive Gender-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:42:gender-atk': {\n                id: BuffId['passive:42:gender-atk'],\n                name: 'Passive Gender-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:42:gender-def': {\n                id: BuffId['passive:42:gender-def'],\n                name: 'Passive Gender-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:42:gender-rec': {\n                id: BuffId['passive:42:gender-rec'],\n                name: 'Passive Gender-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:42:gender-crit': {\n                id: BuffId['passive:42:gender-crit'],\n                name: 'Passive Gender-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:43:chance damage to one': {\n            id: BuffId['passive:43:chance damage to one'],\n            name: 'Passive Damage Reduction To One (Chance)',\n            stat: UnitStat.reduceDamageToOne,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n        }, 'passive:44:flat-hp': {\n            id: BuffId['passive:44:flat-hp'],\n            name: 'Passive Flat HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:44:flat-atk': {\n            id: BuffId['passive:44:flat-atk'],\n            name: 'Passive Flat Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:44:flat-def': {\n            id: BuffId['passive:44:flat-def'],\n            name: 'Passive Flat Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:44:flat-rec': {\n            id: BuffId['passive:44:flat-rec'],\n            name: 'Passive Flat Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:44:flat-crit': {\n            id: BuffId['passive:44:flat-crit'],\n            name: 'Passive Flat Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:45:critical damage reduction-base': {\n            id: BuffId['passive:45:critical damage reduction-base'],\n            name: 'Passive Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:45:critical damage reduction-buff': {\n            id: BuffId['passive:45:critical damage reduction-buff'],\n            name: 'Passive Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:46:hp scaled-atk': {\n            id: BuffId['passive:46:hp scaled-atk'],\n            name: 'Passive Attack Boost Relative to HP',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDATKDOWN : IconId.BUFF_HPSCALEDATKUP],\n        }, 'passive:46:hp scaled-def': {\n            id: BuffId['passive:46:hp scaled-def'],\n            name: 'Passive Defense Boost Relative to HP',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDDEFDOWN : IconId.BUFF_HPSCALEDDEFUP],\n        }, 'passive:46:hp scaled-rec': {\n            id: BuffId['passive:46:hp scaled-rec'],\n            name: 'Passive Recovery Boost Relative to HP',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDRECDOWN : IconId.BUFF_HPSCALEDRECUP],\n        }, 'passive:47:bc fill on spark': {\n            id: BuffId['passive:47:bc fill on spark'],\n            name: 'Passive BC Fill on Spark',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKBBUP],\n        }, 'passive:48:bc cost reduction': {\n            id: BuffId['passive:48:bc cost reduction'],\n            name: 'Passive BC Cost Reduction',\n            stat: UnitStat.bcCostReduction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBCOST_REDUCTION],\n        }, 'passive:49:bb gauge consumption reduction': {\n            id: BuffId['passive:49:bb gauge consumption reduction'],\n            name: 'Passive BB Gauge Consumption Reduction',\n            stat: UnitStat.bbGaugeConsumptionReduction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:50:elemental weakness damage-fire': {\n            id: BuffId['passive:50:elemental weakness damage-fire'],\n            name: 'Passive Fire Elemental Damage Boost',\n            stat: UnitStat.fireElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGUP],\n        }, 'passive:50:elemental weakness damage-water': {\n            id: BuffId['passive:50:elemental weakness damage-water'],\n            name: 'Passive Water Elemental Damage Boost',\n            stat: UnitStat.waterElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGUP],\n        }, 'passive:50:elemental weakness damage-earth': {\n            id: BuffId['passive:50:elemental weakness damage-earth'],\n            name: 'Passive Earth Elemental Damage Boost',\n            stat: UnitStat.earthElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGUP],\n        }, 'passive:50:elemental weakness damage-thunder': {\n            id: BuffId['passive:50:elemental weakness damage-thunder'],\n            name: 'Passive Thunder Elemental Damage Boost',\n            stat: UnitStat.thunderElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGUP],\n        }, 'passive:50:elemental weakness damage-light': {\n            id: BuffId['passive:50:elemental weakness damage-light'],\n            name: 'Passive Light Elemental Damage Boost',\n            stat: UnitStat.lightElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGUP],\n        }, 'passive:50:elemental weakness damage-dark': {\n            id: BuffId['passive:50:elemental weakness damage-dark'],\n            name: 'Passive Dark Elemental Damage Boost',\n            stat: UnitStat.darkElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGUP],\n        }, 'passive:50:elemental weakness damage-unknown': {\n            id: BuffId['passive:50:elemental weakness damage-unknown'],\n            name: 'Passive Elemental Damage Boost (Unspecified Element)',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGUP],\n        }, 'passive:53:critical damage-base': {\n            id: BuffId['passive:53:critical damage-base'],\n            name: 'Passive Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:critical damage-buff': {\n            id: BuffId['passive:53:critical damage-buff'],\n            name: 'Passive Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:element damage-base': {\n            id: BuffId['passive:53:element damage-base'],\n            name: 'Passive Base Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'passive:53:element damage-buff': {\n            id: BuffId['passive:53:element damage-buff'],\n            name: 'Passive Buffed Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'passive:53:critical rate-base': {\n            id: BuffId['passive:53:critical rate-base'],\n            name: 'Passive Base Critical Hit Rate Reduction',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:critical rate-buff': {\n            id: BuffId['passive:53:critical rate-buff'],\n            name: 'Passive Buffed Critical Hit Rate Reduction',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:55:hp conditional': {\n            id: BuffId['passive:55:hp conditional'],\n            name: 'Passive Conditional Effect based on HP Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_HPTHRESH],\n        }, 'passive:58:guard mitigation': {\n            id: BuffId['passive:58:guard mitigation'],\n            name: 'Passive Guard Damage Reduction',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDCUT],\n        }, 'passive:59:bc fill when attacked on guard-percent': {\n            id: BuffId['passive:59:bc fill when attacked on guard-percent'],\n            name: 'Passive BC Fill when Attacked and Guarding (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:59:bc fill when attacked on guard-flat': {\n            id: BuffId['passive:59:bc fill when attacked on guard-flat'],\n            name: 'Passive BC Fill when Attacked and Guarding (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:61:bc fill on guard-percent': {\n            id: BuffId['passive:61:bc fill on guard-percent'],\n            name: 'Passive BC Fill on Guard (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:61:bc fill on guard-flat': {\n            id: BuffId['passive:61:bc fill on guard-flat'],\n            name: 'Passive BC Fill on Guard (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:62:mitigate-fire': {\n            id: BuffId['passive:62:mitigate-fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:62:mitigate-water': {\n            id: BuffId['passive:62:mitigate-water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:62:mitigate-earth': {\n            id: BuffId['passive:62:mitigate-earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:62:mitigate-thunder': {\n            id: BuffId['passive:62:mitigate-thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:62:mitigate-light': {\n            id: BuffId['passive:62:mitigate-light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:62:mitigate-dark': {\n            id: BuffId['passive:62:mitigate-dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:62:mitigate-unknown': {\n            id: BuffId['passive:62:mitigate-unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:63:first turn mitigate-fire': {\n            id: BuffId['passive:63:first turn mitigate-fire'],\n            name: 'Fire Damage Reduction for First X Turns',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:63:first turn mitigate-water': {\n            id: BuffId['passive:63:first turn mitigate-water'],\n            name: 'Water Damage Reduction for First X Turns',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:63:first turn mitigate-earth': {\n            id: BuffId['passive:63:first turn mitigate-earth'],\n            name: 'Earth Damage Reduction for First X Turns',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:63:first turn mitigate-thunder': {\n            id: BuffId['passive:63:first turn mitigate-thunder'],\n            name: 'Thunder Damage Reduction for First X Turns',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:63:first turn mitigate-light': {\n            id: BuffId['passive:63:first turn mitigate-light'],\n            name: 'Light Damage Reduction for First X Turns',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:63:first turn mitigate-dark': {\n            id: BuffId['passive:63:first turn mitigate-dark'],\n            name: 'Dark Damage Reduction for First X Turns',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:63:first turn mitigate-unknown': {\n            id: BuffId['passive:63:first turn mitigate-unknown'],\n            name: 'Elemental Damage Reduction (Unspecified Element) for First X Turns',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:64:attack boost-bb': {\n            id: BuffId['passive:64:attack boost-bb'],\n            name: 'Passive BB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'passive:64:attack boost-sbb': {\n            id: BuffId['passive:64:attack boost-sbb'],\n            name: 'Passive SBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'passive:64:attack boost-ubb': {\n            id: BuffId['passive:64:attack boost-ubb'],\n            name: 'Passive UBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'passive:65:bc fill on crit': {\n            id: BuffId['passive:65:bc fill on crit'],\n            name: 'Passive BC Fill on Critical Hit',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:66:add effect to skill-bb': {\n            id: BuffId['passive:66:add effect to skill-bb'],\n            name: 'Passive Added Effect to Brave Burst',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTO_BB],\n        }, 'passive:66:add effect to skill-sbb': {\n            id: BuffId['passive:66:add effect to skill-sbb'],\n            name: 'Passive Added Effect to Super Brave Burst',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTO_SBB],\n        }, 'passive:66:add effect to skill-ubb': {\n            id: BuffId['passive:66:add effect to skill-ubb'],\n            name: 'Passive Added Effect to Ultimate Brave Burst',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTO_UBB],\n        }, 'passive:69:chance ko resistance': {\n            id: BuffId['passive:69:chance ko resistance'],\n            name: 'Passive KO Resistance (Chance)',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, 'passive:70:od fill rate': {\n            id: BuffId['passive:70:od fill rate'],\n            name: 'Passive OD Gauge Fill Rate',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_OVERDRIVEUP],\n        }, 'passive:71:inflict on hit-poison': {\n            id: BuffId['passive:71:inflict on hit-poison'],\n            name: 'Passive Poison Counter',\n            stat: UnitStat.poisonCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONCOUNTER],\n        }, 'passive:71:inflict on hit-weak': {\n            id: BuffId['passive:71:inflict on hit-weak'],\n            name: 'Passive Weak Counter',\n            stat: UnitStat.weakCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKCOUNTER],\n        }, 'passive:71:inflict on hit-sick': {\n            id: BuffId['passive:71:inflict on hit-sick'],\n            name: 'Passive Sick Counter',\n            stat: UnitStat.sickCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKCOUNTER],\n        }, 'passive:71:inflict on hit-injury': {\n            id: BuffId['passive:71:inflict on hit-injury'],\n            name: 'Passive Injury Counter',\n            stat: UnitStat.injuryCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJCONTER],\n        }, 'passive:71:inflict on hit-curse': {\n            id: BuffId['passive:71:inflict on hit-curse'],\n            name: 'Passive Curse Counter',\n            stat: UnitStat.curseCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSECOUNTER],\n        }, 'passive:71:inflict on hit-paralysis': {\n            id: BuffId['passive:71:inflict on hit-paralysis'],\n            name: 'Passive Paralysis Counter',\n            stat: UnitStat.paralysisCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYCOUNTER],\n        }, 'passive:72:effect at turn start-hp': {\n            id: BuffId['passive:72:effect at turn start-hp'],\n            name: 'Gradual HP Effects Occur at Turn Start',\n            stat: UnitStat.effectOccurrenceShift,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPTURNSTART],\n        }, 'passive:72:effect at turn start-bc': {\n            id: BuffId['passive:72:effect at turn start-bc'],\n            name: 'Gradual Battle Crystal Effects Occur at Turn Start',\n            stat: UnitStat.effectOccurrenceShift,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_BCTURNSTART],\n        }, 'passive:73:resist-poison': {\n            id: BuffId['passive:73:resist-poison'],\n            name: 'Passive Poison Resistance',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:73:resist-weak': {\n            id: BuffId['passive:73:resist-weak'],\n            name: 'Passive Weak Resistance',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:73:resist-sick': {\n            id: BuffId['passive:73:resist-sick'],\n            name: 'Passive Sick Resistance',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:73:resist-injury': {\n            id: BuffId['passive:73:resist-injury'],\n            name: 'Passive Injury Resistance',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:73:resist-curse': {\n            id: BuffId['passive:73:resist-curse'],\n            name: 'Passive Curse Resistance',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:73:resist-paralysis': {\n            id: BuffId['passive:73:resist-paralysis'],\n            name: 'Passive Paralysis Resistance',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:73:resist-atk down': {\n            id: BuffId['passive:73:resist-atk down'],\n            name: 'Passive Attack Reduction Resistance',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_RESISTATKDOWN],\n        }, 'passive:73:resist-def down': {\n            id: BuffId['passive:73:resist-def down'],\n            name: 'Passive Defense Reduction Resistance',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_RESISTDEFDOWN],\n        }, 'passive:73:resist-rec down': {\n            id: BuffId['passive:73:resist-rec down'],\n            name: 'Passive Recovery Reduction Resistance',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_RESISTRECDOWN],\n        }, 'passive:74:ailment attack boost': {\n            id: BuffId['passive:74:ailment attack boost'],\n            name: 'Passive Attack Boost on Status Afflicted Foes',\n            stat: UnitStat.ailmentAttackBoost,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_AILDMGUP],\n        }, 'passive:75:spark vulnerability': {\n            id: BuffId['passive:75:spark vulnerability'],\n            name: 'Passive Spark Vulnerability',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKDMGUP],\n        }, 'passive:77:spark damage reduction-base': {\n            id: BuffId['passive:77:spark damage reduction-base'],\n            name: 'Passive Base Spark Damage Reduction',\n            stat: UnitStat.sparkDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKDMGDOWN],\n        }, 'passive:77:spark damage reduction-buff': {\n            id: BuffId['passive:77:spark damage reduction-buff'],\n            name: 'Passive Buffed Spark Damage Reduction',\n            stat: UnitStat.sparkDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKDMGDOWN],\n        }, 'passive:78:damage taken conditional': {\n            id: BuffId['passive:78:damage taken conditional'],\n            name: 'Passive Conditional Effect after Damage Received Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_DAMAGETAKENTHRESH],\n        }, 'passive:79:bc fill after damage taken conditional-flat': {\n            id: BuffId['passive:79:bc fill after damage taken conditional-flat'],\n            name: 'Passive Flat BC Fill after Damage Taken Received Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:79:bc fill after damage taken conditional-percent': {\n            id: BuffId['passive:79:bc fill after damage taken conditional-percent'],\n            name: 'Passive Percent BC Fill after Damage Taken Received Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:80:damage dealt conditional': {\n            id: BuffId['passive:80:damage dealt conditional'],\n            name: 'Passive Conditional Effect after Damage Dealt Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_DAMAGEDEALTTHRESH],\n        }, 'passive:81:bc fill after damage dealt conditional-flat': {\n            id: BuffId['passive:81:bc fill after damage dealt conditional-flat'],\n            name: 'Passive Flat BC Fill after Damage Dealt Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:81:bc fill after damage dealt conditional-percent': {\n            id: BuffId['passive:81:bc fill after damage dealt conditional-percent'],\n            name: 'Passive Percent BC Fill after Damage Dealt Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:82:bc received conditional': {\n            id: BuffId['passive:82:bc received conditional'],\n            name: 'Passive Conditional Effect after BC Received Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_BCRECEIVEDTHRESH],\n        }, 'passive:83:bc fill after bc received conditional-flat': {\n            id: BuffId['passive:83:bc fill after bc received conditional-flat'],\n            name: 'Passive Flat BC Fill after BC Received Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:83:bc fill after bc received conditional-percent': {\n            id: BuffId['passive:83:bc fill after bc received conditional-percent'],\n            name: 'Passive Percent BC Fill after BC Received Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:84:hc received conditional': {\n            id: BuffId['passive:84:hc received conditional'],\n            name: 'Passive Conditional Effect after HC Received Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_HCRECEIVEDTHRESH],\n        }, 'passive:85:bc fill after hc received conditional-flat': {\n            id: BuffId['passive:85:bc fill after hc received conditional-flat'],\n            name: 'Passive Flat BC Fill after HC Received Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:85:bc fill after hc received conditional-percent': {\n            id: BuffId['passive:85:bc fill after hc received conditional-percent'],\n            name: 'Passive Percent BC Fill after HC Received Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:86:spark count conditional': {\n            id: BuffId['passive:86:spark count conditional'],\n            name: 'Passive Conditional Effect after Spark Count Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_SPARKCOUNTTHRESH],\n        }, 'passive:87:bc fill after spark count conditional-flat': {\n            id: BuffId['passive:87:bc fill after spark count conditional-flat'],\n            name: 'Passive Flat BC Fill after Spark Count Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:87:bc fill after spark count conditional-percent': {\n            id: BuffId['passive:87:bc fill after spark count conditional-percent'],\n            name: 'Passive Percent BC Fill after Spark Count Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:88:on guard conditional': {\n            id: BuffId['passive:88:on guard conditional'],\n            name: 'Passive Conditional Effect on Guard (Chance)',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_GUARD],\n        }, 'passive:89:on critical hit conditional': {\n            id: BuffId['passive:89:on critical hit conditional'],\n            name: 'Passive Conditional Effect on Critical Hit (Chance)',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_CRIT],\n        }, 'passive:90:inflict on crit-poison': {\n            id: BuffId['passive:90:inflict on crit-poison'],\n            name: 'Passive Poison Infliction on Critical Hit (Chance)',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'passive:90:inflict on crit-weak': {\n            id: BuffId['passive:90:inflict on crit-weak'],\n            name: 'Passive Weak Infliction on Critical Hit (Chance)',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'passive:90:inflict on crit-sick': {\n            id: BuffId['passive:90:inflict on crit-sick'],\n            name: 'Passive Sick Infliction on Critical Hit (Chance)',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'passive:90:inflict on crit-injury': {\n            id: BuffId['passive:90:inflict on crit-injury'],\n            name: 'Passive Injury Infliction on Critical Hit (Chance)',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'passive:90:inflict on crit-curse': {\n            id: BuffId['passive:90:inflict on crit-curse'],\n            name: 'Passive Curse Infliction on Critical Hit (Chance)',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'passive:90:inflict on crit-paralysis': {\n            id: BuffId['passive:90:inflict on crit-paralysis'],\n            name: 'Passive Paralysis Infliction on Critical Hit (Chance)',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'passive:91:first turn spark': {\n            id: BuffId['passive:91:first turn spark'],\n            name: 'Spark Damage Boost for First X Turns',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'passive:92:negate defense ignore': {\n            id: BuffId['passive:92:negate defense ignore'],\n            name: 'Passive Defense Ignore Negation (Chance)',\n            stat: UnitStat.defenseIgnoreMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_IGNOREDEFBLK],\n        }, 'passive:93:add element-fire': {\n            id: BuffId['passive:93:add element-fire'],\n            name: 'Passive Added Element to Attack (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDFIRE],\n        }, 'passive:93:add element-water': {\n            id: BuffId['passive:93:add element-water'],\n            name: 'Passive Added Element to Attack (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDWATER],\n        }, 'passive:93:add element-earth': {\n            id: BuffId['passive:93:add element-earth'],\n            name: 'Passive Added Element to Attack (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDEARTH],\n        }, 'passive:93:add element-thunder': {\n            id: BuffId['passive:93:add element-thunder'],\n            name: 'Passive Added Element to Attack (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTHUNDER],\n        }, 'passive:93:add element-light': {\n            id: BuffId['passive:93:add element-light'],\n            name: 'Passive Added Element to Attack (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDLIGHT],\n        }, 'passive:93:add element-dark': {\n            id: BuffId['passive:93:add element-dark'],\n            name: 'Passive Added Element to Attack (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDDARK],\n        }, 'passive:93:add element-unknown': {\n            id: BuffId['passive:93:add element-unknown'],\n            name: 'Passive Added Element to Attack (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDELEMENT],\n        }, 'passive:96:aoe normal attack': {\n            id: BuffId['passive:96:aoe normal attack'],\n            name: 'Passive Normal Attacks Hit All Foes',\n            stat: UnitStat.aoeNormalAttack,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_AOEATK],\n        }, 'passive:97:player exp boost': {\n            id: BuffId['passive:97:player exp boost'],\n            name: 'Passive Player EXP Boost',\n            stat: UnitStat.expModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PLAYEREXP],\n        }, 'passive:100:spark critical': {\n            id: BuffId['passive:100:spark critical'],\n            name: 'Passive Spark Critical',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKCRTACTIVATED],\n        }, 'passive:101:heal on spark': {\n            id: BuffId['passive:101:heal on spark'],\n            name: 'Passive Heal on Spark (Chance)',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARK_HPREC],\n        }, 'passive:102:add element-fire': {\n            id: BuffId['passive:102:add element-fire'],\n            name: 'Passive Added Element to Attack (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDFIRE],\n        }, 'passive:102:add element-water': {\n            id: BuffId['passive:102:add element-water'],\n            name: 'Passive Added Element to Attack (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDWATER],\n        }, 'passive:102:add element-earth': {\n            id: BuffId['passive:102:add element-earth'],\n            name: 'Passive Added Element to Attack (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDEARTH],\n        }, 'passive:102:add element-thunder': {\n            id: BuffId['passive:102:add element-thunder'],\n            name: 'Passive Added Element to Attack (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTHUNDER],\n        }, 'passive:102:add element-light': {\n            id: BuffId['passive:102:add element-light'],\n            name: 'Passive Added Element to Attack (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDLIGHT],\n        }, 'passive:102:add element-dark': {\n            id: BuffId['passive:102:add element-dark'],\n            name: 'Passive Added Element to Attack (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDDARK],\n        }, 'passive:102:add element-unknown': {\n            id: BuffId['passive:102:add element-unknown'],\n            name: 'Passive Added Element to Attack (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDELEMENT],\n        }, 'passive:103:hp conditional attack boost-bb': {\n            id: BuffId['passive:103:hp conditional attack boost-bb'],\n            name: 'Passive BB ATK Boost when HP Passes Threshold',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'passive:103:hp conditional attack boost-sbb': {\n            id: BuffId['passive:103:hp conditional attack boost-sbb'],\n            name: 'Passive SBB ATK Boost when HP Passes Threshold',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'passive:103:hp conditional attack boost-ubb': {\n            id: BuffId['passive:103:hp conditional attack boost-ubb'],\n            name: 'Passive UBB ATK Boost when HP Passes Threshold',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'passive:104:hp conditional spark-damage': {\n            id: BuffId['passive:104:hp conditional spark-damage'],\n            name: 'Passive Spark Damage Boost when HP Passes Threshold',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'passive:104:hp conditional spark-bc': {\n            id: BuffId['passive:104:hp conditional spark-bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost during Spark when HP Passes Threshold',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n        }, 'passive:104:hp conditional spark-hc': {\n            id: BuffId['passive:104:hp conditional spark-hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost during Spark when HP Passes Threshold',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n        }, 'passive:104:hp conditional spark-item': {\n            id: BuffId['passive:104:hp conditional spark-item'],\n            name: 'Passive Item Drop Rate Boost during Spark when HP Passes Threshold',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n        }, 'passive:104:hp conditional spark-zel': {\n            id: BuffId['passive:104:hp conditional spark-zel'],\n            name: 'Passive Zel Drop Rate Boost during Spark when HP Passes Threshold',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n        }, 'passive:104:hp conditional spark-karma': {\n            id: BuffId['passive:104:hp conditional spark-karma'],\n            name: 'Passive Karma Drop Rate Boost during Spark when HP Passes Threshold',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n        }, 'passive:105:turn scaled-atk': {\n            id: BuffId['passive:105:turn scaled-atk'],\n            name: 'Passive Turn-Scaled Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => {\n                let icon = IconId.BUFF_TURNSCALEDATKUP;\n                if (buff && buff.value) {\n                    const buffValue = buff.value;\n                    if (buffValue['startingValue%'] > buffValue['endingValue%']) {\n                        icon = IconId.BUFF_TURNSCALEDATKDOWN;\n                    }\n                }\n                return [icon];\n            },\n        }, 'passive:105:turn scaled-def': {\n            id: BuffId['passive:105:turn scaled-def'],\n            name: 'Passive Turn-Scaled Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => {\n                let icon = IconId.BUFF_TURNSCALEDDEFUP;\n                if (buff && buff.value) {\n                    const buffValue = buff.value;\n                    if (buffValue['startingValue%'] > buffValue['endingValue%']) {\n                        icon = IconId.BUFF_TURNSCALEDDEFDOWN;\n                    }\n                }\n                return [icon];\n            },\n        }, 'passive:105:turn scaled-rec': {\n            id: BuffId['passive:105:turn scaled-rec'],\n            name: 'Passive Turn-Scaled Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => {\n                let icon = IconId.BUFF_TURNSCALEDRECUP;\n                if (buff && buff.value) {\n                    const buffValue = buff.value;\n                    if (buffValue['startingValue%'] > buffValue['endingValue%']) {\n                        icon = IconId.BUFF_TURNSCALEDRECDOWN;\n                    }\n                }\n                return [icon];\n            },\n        }, 'passive:106:on overdrive conditional': {\n            id: BuffId['passive:106:on overdrive conditional'],\n            name: 'Passive Conditional Effect on Overdrive (Chance)',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_OD],\n        }, 'passive:107:add effect to leader skill': {\n            id: BuffId['passive:107:add effect to leader skill'],\n            name: 'Passive Added Effect to Leader Skill',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTO_LS],\n        }, UNKNOWN_PROC_EFFECT_ID: {\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            name: 'Unknown Proc Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_PROC_BUFF_PARAMS: {\n            id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n            name: 'Unknown Proc Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'proc:1:attack': {\n            id: BuffId['proc:1:attack'],\n            name: 'Regular Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:2:burst heal': {\n            id: BuffId['proc:2:burst heal'],\n            name: 'Burst Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:3:gradual heal': {\n            id: BuffId['proc:3:gradual heal'],\n            name: 'Active Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:4:bc fill-flat': {\n            id: BuffId['proc:4:bc fill-flat'],\n            name: 'Burst BC Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:4:bc fill-percent': {\n            id: BuffId['proc:4:bc fill-percent'],\n            name: 'Burst BC Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:5:regular or elemental-atk': {\n                id: BuffId['proc:5:regular or elemental-atk'],\n                name: 'Active Regular/Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:5:regular or elemental-def': {\n                id: BuffId['proc:5:regular or elemental-def'],\n                name: 'Active Regular/Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:5:regular or elemental-rec': {\n                id: BuffId['proc:5:regular or elemental-rec'],\n                name: 'Active Regular/Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:5:regular or elemental-crit': {\n                id: BuffId['proc:5:regular or elemental-crit'],\n                name: 'Active Regular/Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'proc:6:drop boost-bc': {\n            id: BuffId['proc:6:drop boost-bc'],\n            name: 'Active Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'proc:6:drop boost-hc': {\n            id: BuffId['proc:6:drop boost-hc'],\n            name: 'Active Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'proc:6:drop boost-item': {\n            id: BuffId['proc:6:drop boost-item'],\n            name: 'Active Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'proc:7:guaranteed ko resistance': {\n            id: BuffId['proc:7:guaranteed ko resistance'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:8:max hp boost-flat': {\n            id: BuffId['proc:8:max hp boost-flat'],\n            name: 'Max HP Boost (Flat Amount)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        }, 'proc:8:max hp boost-percent': {\n            id: BuffId['proc:8:max hp boost-percent'],\n            name: 'Max HP Boost (Percentage)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'DOWN'; // default to down since these are reduction buffs\n                if (buff) {\n                    if (buff.value && buff.value > 0) {\n                        polarity = 'UP';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:9:regular or elemental reduction-atk': {\n                id: BuffId['proc:9:regular or elemental reduction-atk'],\n                name: 'Active Regular/Elemental Attack Reduction',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:9:regular or elemental reduction-def': {\n                id: BuffId['proc:9:regular or elemental reduction-def'],\n                name: 'Active Regular/Elemental Defense Reduction',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:9:regular or elemental reduction-rec': {\n                id: BuffId['proc:9:regular or elemental reduction-rec'],\n                name: 'Active Regular/Elemental Recovery Reduction',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:9:regular or elemental reduction-unknown': {\n                id: BuffId['proc:9:regular or elemental reduction-unknown'],\n                name: 'Active Regular/Elemental Unknown Stat Reduction',\n                stackType: BuffStackType.Active,\n                icons: () => [IconId.UNKNOWN],\n            },\n        };\n    })()), { 'proc:10:cleanse-poison': {\n            id: BuffId['proc:10:cleanse-poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:10:cleanse-weak': {\n            id: BuffId['proc:10:cleanse-weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:10:cleanse-sick': {\n            id: BuffId['proc:10:cleanse-sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:10:cleanse-injury': {\n            id: BuffId['proc:10:cleanse-injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:10:cleanse-curse': {\n            id: BuffId['proc:10:cleanse-curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:10:cleanse-paralysis': {\n            id: BuffId['proc:10:cleanse-paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:10:cleanse-atk down': {\n            id: BuffId['proc:10:cleanse-atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTATKDOWN],\n        }, 'proc:10:cleanse-def down': {\n            id: BuffId['proc:10:cleanse-def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTDEFDOWN],\n        }, 'proc:10:cleanse-rec down': {\n            id: BuffId['proc:10:cleanse-rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTRECDOWN],\n        }, 'proc:10:cleanse-unknown': {\n            id: BuffId['proc:10:cleanse-unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:11:chance inflict-poison': {\n            id: BuffId['proc:11:chance inflict-poison'],\n            name: 'Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_POISON],\n        }, 'proc:11:chance inflict-weak': {\n            id: BuffId['proc:11:chance inflict-weak'],\n            name: 'Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_WEAK],\n        }, 'proc:11:chance inflict-sick': {\n            id: BuffId['proc:11:chance inflict-sick'],\n            name: 'Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_SICK],\n        }, 'proc:11:chance inflict-injury': {\n            id: BuffId['proc:11:chance inflict-injury'],\n            name: 'Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_INJURY],\n        }, 'proc:11:chance inflict-curse': {\n            id: BuffId['proc:11:chance inflict-curse'],\n            name: 'Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_CURSE],\n        }, 'proc:11:chance inflict-paralysis': {\n            id: BuffId['proc:11:chance inflict-paralysis'],\n            name: 'Paralysis Infliction',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_PARALYSIS],\n        }, 'proc:11:chance inflict-atk down': {\n            id: BuffId['proc:11:chance inflict-atk down'],\n            name: 'Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWN],\n        }, 'proc:11:chance inflict-def down': {\n            id: BuffId['proc:11:chance inflict-def down'],\n            name: 'Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWN],\n        }, 'proc:11:chance inflict-rec down': {\n            id: BuffId['proc:11:chance inflict-rec down'],\n            name: 'Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWN],\n        }, 'proc:11:chance inflict-unknown': {\n            id: BuffId['proc:11:chance inflict-unknown'],\n            name: 'Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.DEBUFF_AILMENT],\n        }, 'proc:12:guaranteed revive': {\n            id: BuffId['proc:12:guaranteed revive'],\n            name: 'Instant Revive (Guaranteed)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:13:random attack': {\n            id: BuffId['proc:13:random attack'],\n            name: 'Random Target Damage',\n            stackType: BuffStackType.Attack,\n            icons: () => [IconId.ATK_RT],\n        }, 'proc:14:hp absorb attack': {\n            id: BuffId['proc:14:hp absorb attack'],\n            name: 'Lifesteal Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n        }, 'proc:16:mitigate-fire': {\n            id: BuffId['proc:16:mitigate-fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:16:mitigate-water': {\n            id: BuffId['proc:16:mitigate-water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:16:mitigate-earth': {\n            id: BuffId['proc:16:mitigate-earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:16:mitigate-thunder': {\n            id: BuffId['proc:16:mitigate-thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:16:mitigate-light': {\n            id: BuffId['proc:16:mitigate-light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:16:mitigate-dark': {\n            id: BuffId['proc:16:mitigate-dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:16:mitigate-all': {\n            id: BuffId['proc:16:mitigate-all'],\n            name: 'Active Elemental Damage Reduction (All Elements)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:16:mitigate-unknown': {\n            id: BuffId['proc:16:mitigate-unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:17:resist-poison': {\n            id: BuffId['proc:17:resist-poison'],\n            name: 'Active Poison Resistance',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:17:resist-weak': {\n            id: BuffId['proc:17:resist-weak'],\n            name: 'Active Weak Resistance',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:17:resist-sick': {\n            id: BuffId['proc:17:resist-sick'],\n            name: 'Active Sick Resistance',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:17:resist-injury': {\n            id: BuffId['proc:17:resist-injury'],\n            name: 'Active Injury Resistance',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:17:resist-curse': {\n            id: BuffId['proc:17:resist-curse'],\n            name: 'Active Curse Resistance',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:17:resist-paralysis': {\n            id: BuffId['proc:17:resist-paralysis'],\n            name: 'Active Paralysis Resistance',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:18:mitigation': {\n            id: BuffId['proc:18:mitigation'],\n            name: 'Active Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'proc:19:gradual bc fill': {\n            id: BuffId['proc:19:gradual bc fill'],\n            name: 'Active Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:20:bc fill on hit': {\n            id: BuffId['proc:20:bc fill on hit'],\n            name: 'Active BC Fill when attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'proc:22:defense ignore': {\n            id: BuffId['proc:22:defense ignore'],\n            name: 'Active Defense Ignore',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'proc:23:spark damage': {\n            id: BuffId['proc:23:spark damage'],\n            name: 'Active Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'proc:24:converted-atk': {\n            id: BuffId['proc:24:converted-atk'],\n            name: 'Active Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'proc:24:converted-def': {\n            id: BuffId['proc:24:converted-def'],\n            name: 'Active Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'proc:24:converted-rec': {\n            id: BuffId['proc:24:converted-rec'],\n            name: 'Active Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'proc:26:hit count boost': {\n            id: BuffId['proc:26:hit count boost'],\n            name: 'Active Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'proc:27:proportional attack': {\n            id: BuffId['proc:27:proportional attack'],\n            name: 'Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:28:fixed attack': {\n            id: BuffId['proc:28:fixed attack'],\n            name: 'Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n        }, 'proc:29:multi-element attack': {\n            id: BuffId['proc:29:multi-element attack'],\n            name: 'Multi-Element Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n        }, 'proc:30:add element-fire': {\n            id: BuffId['proc:30:add element-fire'],\n            name: 'Active Added Element to Attack (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDFIRE],\n        }, 'proc:30:add element-water': {\n            id: BuffId['proc:30:add element-water'],\n            name: 'Active Added Element to Attack (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWATER],\n        }, 'proc:30:add element-earth': {\n            id: BuffId['proc:30:add element-earth'],\n            name: 'Active Added Element to Attack (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDEARTH],\n        }, 'proc:30:add element-thunder': {\n            id: BuffId['proc:30:add element-thunder'],\n            name: 'Active Added Element to Attack (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDTHUNDER],\n        }, 'proc:30:add element-light': {\n            id: BuffId['proc:30:add element-light'],\n            name: 'Active Added Element to Attack (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDLIGHT],\n        }, 'proc:30:add element-dark': {\n            id: BuffId['proc:30:add element-dark'],\n            name: 'Active Added Element to Attack (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDARK],\n        }, 'proc:30:add element-unknown': {\n            id: BuffId['proc:30:add element-unknown'],\n            name: 'Active Added Element to Attack (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDELEMENT],\n        }, 'proc:31:bc fill-flat': {\n            id: BuffId['proc:31:bc fill-flat'],\n            name: 'Burst BC Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:31:bc fill-percent': {\n            id: BuffId['proc:31:bc fill-percent'],\n            name: 'Burst BC Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:32:element shift-fire': {\n            id: BuffId['proc:32:element shift-fire'],\n            name: 'Element Shift (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTFIRE],\n        }, 'proc:32:element shift-water': {\n            id: BuffId['proc:32:element shift-water'],\n            name: 'Element Shift (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTWATER],\n        }, 'proc:32:element shift-earth': {\n            id: BuffId['proc:32:element shift-earth'],\n            name: 'Element Shift (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTEARTH],\n        }, 'proc:32:element shift-thunder': {\n            id: BuffId['proc:32:element shift-thunder'],\n            name: 'Element Shift (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTTHUNDER],\n        }, 'proc:32:element shift-light': {\n            id: BuffId['proc:32:element shift-light'],\n            name: 'Element Shift (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTLIGHT],\n        }, 'proc:32:element shift-dark': {\n            id: BuffId['proc:32:element shift-dark'],\n            name: 'Element Shift (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTDARK],\n        }, 'proc:32:element shift-unknown': {\n            id: BuffId['proc:32:element shift-unknown'],\n            name: 'Element Shift (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTELEMENT],\n        }, 'proc:33:buff wipe': {\n            id: BuffId['proc:33:buff wipe'],\n            name: 'Buff Removal',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_REMOVEBUFF],\n        }, 'proc:34:bc drain-flat': {\n            id: BuffId['proc:34:bc drain-flat'],\n            name: 'Burst BB Gauge Drain (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:34:bc drain-percent': {\n            id: BuffId['proc:34:bc drain-percent'],\n            name: 'Burst BB Gauge Drain (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:36:ls lock': {\n            id: BuffId['proc:36:ls lock'],\n            name: 'Active Leader Skill Lock',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DISABLELS],\n        }, 'proc:37:summon': {\n            id: BuffId['proc:37:summon'],\n            name: 'Summon Unit',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SUMMONUNIT],\n        }, 'proc:38:cleanse-poison': {\n            id: BuffId['proc:38:cleanse-poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:38:cleanse-weak': {\n            id: BuffId['proc:38:cleanse-weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:38:cleanse-sick': {\n            id: BuffId['proc:38:cleanse-sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:38:cleanse-injury': {\n            id: BuffId['proc:38:cleanse-injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:38:cleanse-curse': {\n            id: BuffId['proc:38:cleanse-curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:38:cleanse-paralysis': {\n            id: BuffId['proc:38:cleanse-paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:38:cleanse-atk down': {\n            id: BuffId['proc:38:cleanse-atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTATKDOWN],\n        }, 'proc:38:cleanse-def down': {\n            id: BuffId['proc:38:cleanse-def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTDEFDOWN],\n        }, 'proc:38:cleanse-rec down': {\n            id: BuffId['proc:38:cleanse-rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTRECDOWN],\n        }, 'proc:38:cleanse-unknown': {\n            id: BuffId['proc:38:cleanse-unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:39:mitigate-fire': {\n            id: BuffId['proc:39:mitigate-fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:39:mitigate-water': {\n            id: BuffId['proc:39:mitigate-water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:39:mitigate-earth': {\n            id: BuffId['proc:39:mitigate-earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:39:mitigate-thunder': {\n            id: BuffId['proc:39:mitigate-thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:39:mitigate-light': {\n            id: BuffId['proc:39:mitigate-light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:39:mitigate-dark': {\n            id: BuffId['proc:39:mitigate-dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:39:mitigate-unknown': {\n            id: BuffId['proc:39:mitigate-unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:40:add ailment-poison': {\n            id: BuffId['proc:40:add ailment-poison'],\n            name: 'Active Poison Infliction Added to Attack',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'proc:40:add ailment-weak': {\n            id: BuffId['proc:40:add ailment-weak'],\n            name: 'Active Weak Infliction Added to Attack',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'proc:40:add ailment-sick': {\n            id: BuffId['proc:40:add ailment-sick'],\n            name: 'Active Sick Infliction Added to Attack',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'proc:40:add ailment-injury': {\n            id: BuffId['proc:40:add ailment-injury'],\n            name: 'Active Injury Infliction Added to Attack',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'proc:40:add ailment-curse': {\n            id: BuffId['proc:40:add ailment-curse'],\n            name: 'Active Curse Infliction Added to Attack',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'proc:40:add ailment-paralysis': {\n            id: BuffId['proc:40:add ailment-paralysis'],\n            name: 'Active Paralysis Infliction Added to Attack',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'proc:40:add ailment-atk down': {\n            id: BuffId['proc:40:add ailment-atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:40:add ailment-def down': {\n            id: BuffId['proc:40:add ailment-def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:40:add ailment-rec down': {\n            id: BuffId['proc:40:add ailment-rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:40:add ailment-unknown': {\n            id: BuffId['proc:40:add ailment-unknown'],\n            name: 'Active Unknown Ailment Infliction Added to Attack',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'proc:42:sacrificial attack': {\n            id: BuffId['proc:42:sacrificial attack'],\n            name: 'Sacrificial Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n        }, 'proc:42:instant death': {\n            id: BuffId['proc:42:instant death'],\n            name: 'Instant Death to Self (Post-Attack)',\n            stackType: BuffStackType.Burst,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL, IconId.BUFF_KO],\n        }, 'proc:43:burst od fill': {\n            id: BuffId['proc:43:burst od fill'],\n            name: 'Burst OD Gauge Fill (Percentage)',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ODFILLBOOST],\n        }, 'proc:44:damage over time': {\n            id: BuffId['proc:44:damage over time'],\n            name: 'Active Damage over Time',\n            stat: UnitStat.damageOverTime,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_TURNDMG],\n        }, 'proc:45:attack boost-bb': {\n            id: BuffId['proc:45:attack boost-bb'],\n            name: 'Active BB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'proc:45:attack boost-sbb': {\n            id: BuffId['proc:45:attack boost-sbb'],\n            name: 'Active SBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'proc:45:attack boost-ubb': {\n            id: BuffId['proc:45:attack boost-ubb'],\n            name: 'Active UBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'proc:46:non-lethal proportional attack': {\n            id: BuffId['proc:46:non-lethal proportional attack'],\n            name: 'Non-Lethal Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:47:hp scaled attack': {\n            id: BuffId['proc:47:hp scaled attack'],\n            name: 'HP Scaled Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPSCALED : IconId.ATK_AOE_HPSCALED],\n        }, 'proc:48:piercing attack-base': {\n            id: BuffId['proc:48:piercing attack-base'],\n            name: 'Piercing Proportional Damage (Base HP)',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n        }, 'proc:48:piercing attack-current': {\n            id: BuffId['proc:48:piercing attack-current'],\n            name: 'Piercing Proportional Damage (Current HP)',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n        }, 'proc:48:piercing attack-fixed': {\n            id: BuffId['proc:48:piercing attack-fixed'],\n            name: 'Piercing Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_FIXED : IconId.ATK_AOE_PIERCING_FIXED],\n        }, 'proc:48:piercing attack-unknown': {\n            id: BuffId['proc:48:piercing attack-unknown'],\n            name: 'Unknown Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:49:chance instant death': {\n            id: BuffId['proc:49:chance instant death'],\n            name: 'Instant Death (Chance)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KO],\n        }, 'proc:50:chance damage reflect': {\n            id: BuffId['proc:50:chance damage reflect'],\n            name: 'Active Damage Reflect (Chance)',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'proc:51:add to attack-atk down': {\n            id: BuffId['proc:51:add to attack-atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:51:add to attack-def down': {\n            id: BuffId['proc:51:add to attack-def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:51:add to attack-rec down': {\n            id: BuffId['proc:51:add to attack-rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:52:bc efficacy': {\n            id: BuffId['proc:52:bc efficacy'],\n            name: 'Active BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'proc:53:inflict on hit-poison': {\n            id: BuffId['proc:53:inflict on hit-poison'],\n            name: 'Active Poison Counter',\n            stat: UnitStat.poisonCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONCOUNTER],\n        }, 'proc:53:inflict on hit-weak': {\n            id: BuffId['proc:53:inflict on hit-weak'],\n            name: 'Active Weak Counter',\n            stat: UnitStat.weakCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKCOUNTER],\n        }, 'proc:53:inflict on hit-sick': {\n            id: BuffId['proc:53:inflict on hit-sick'],\n            name: 'Active Sick Counter',\n            stat: UnitStat.sickCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKCOUNTER],\n        }, 'proc:53:inflict on hit-injury': {\n            id: BuffId['proc:53:inflict on hit-injury'],\n            name: 'Active Injury Counter',\n            stat: UnitStat.injuryCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJCONTER],\n        }, 'proc:53:inflict on hit-curse': {\n            id: BuffId['proc:53:inflict on hit-curse'],\n            name: 'Active Curse Counter',\n            stat: UnitStat.curseCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSECOUNTER],\n        }, 'proc:53:inflict on hit-paralysis': {\n            id: BuffId['proc:53:inflict on hit-paralysis'],\n            name: 'Active Paralysis Counter',\n            stat: UnitStat.paralysisCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYCOUNTER],\n        }, 'proc:54:critical damage boost': {\n            id: BuffId['proc:54:critical damage boost'],\n            name: 'Active Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'proc:55:elemental weakness damage-fire': {\n            id: BuffId['proc:55:elemental weakness damage-fire'],\n            name: 'Active Fire Elemental Damage Boost',\n            stat: UnitStat.fireElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGUP],\n        }, 'proc:55:elemental weakness damage-water': {\n            id: BuffId['proc:55:elemental weakness damage-water'],\n            name: 'Active Water Elemental Damage Boost',\n            stat: UnitStat.waterElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGUP],\n        }, 'proc:55:elemental weakness damage-earth': {\n            id: BuffId['proc:55:elemental weakness damage-earth'],\n            name: 'Active Earth Elemental Damage Boost',\n            stat: UnitStat.earthElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGUP],\n        }, 'proc:55:elemental weakness damage-thunder': {\n            id: BuffId['proc:55:elemental weakness damage-thunder'],\n            name: 'Active Thunder Elemental Damage Boost',\n            stat: UnitStat.thunderElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGUP],\n        }, 'proc:55:elemental weakness damage-light': {\n            id: BuffId['proc:55:elemental weakness damage-light'],\n            name: 'Active Light Elemental Damage Boost',\n            stat: UnitStat.lightElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGUP],\n        }, 'proc:55:elemental weakness damage-dark': {\n            id: BuffId['proc:55:elemental weakness damage-dark'],\n            name: 'Active Dark Elemental Damage Boost',\n            stat: UnitStat.darkElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGUP],\n        }, 'proc:55:elemental weakness damage-unknown': {\n            id: BuffId['proc:55:elemental weakness damage-unknown'],\n            name: 'Active Elemental Damage Boost (Unspecified Element)',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGUP],\n        }, 'proc:56:chance ko resistance': {\n            id: BuffId['proc:56:chance ko resistance'],\n            name: 'KO Resistance (Chance)',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, 'proc:57:bc drop resistance-base': {\n            id: BuffId['proc:57:bc drop resistance-base'],\n            name: 'Active Base Battle Crystal Drop Rate Reduction',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BCDOWN],\n        }, 'proc:57:bc drop resistance-buff': {\n            id: BuffId['proc:57:bc drop resistance-buff'],\n            name: 'Active Buffed Battle Crystal Drop Rate Reduction',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BCDOWN],\n        }, 'proc:57:hc drop resistance-base': {\n            id: BuffId['proc:57:hc drop resistance-base'],\n            name: 'Active Base Heart Crystal Drop Rate Reduction',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HCDOWN],\n        }, 'proc:57:hc drop resistance-buff': {\n            id: BuffId['proc:57:hc drop resistance-buff'],\n            name: 'Active Buffed Heart Crystal Drop Rate Reduction',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HCDOWN],\n        }, 'proc:58:spark vulnerability': {\n            id: BuffId['proc:58:spark vulnerability'],\n            name: 'Active Spark Vulnerability',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SPARKDMGUP],\n        }, 'proc:59:attack reduction-bb': {\n            id: BuffId['proc:59:attack reduction-bb'],\n            name: 'Active BB ATK Reduction',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBATKDOWN],\n        }, 'proc:59:attack reduction-sbb': {\n            id: BuffId['proc:59:attack reduction-sbb'],\n            name: 'Active SBB ATK Reduction',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SBBATKDOWN],\n        }, 'proc:59:attack reduction-ubb': {\n            id: BuffId['proc:59:attack reduction-ubb'],\n            name: 'Active UBB ATK Reduction',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_UBBATKDOWN],\n        }, 'proc:61:party bb gauge-scaled attack': {\n            id: BuffId['proc:61:party bb gauge-scaled attack'],\n            name: 'Party BB Gauge-Scaled Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED],\n        }, 'proc:61:party bc drain': {\n            id: BuffId['proc:61:party bc drain'],\n            name: 'Party BB Gauge Drain (Post-Attack)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED, IconId.BUFF_BBFILLDOWN],\n        }, 'proc:62:barrier-fire': {\n            id: BuffId['proc:62:barrier-fire'],\n            name: 'Fire Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_FIRESHIELD],\n        }, 'proc:62:barrier-water': {\n            id: BuffId['proc:62:barrier-water'],\n            name: 'Water Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_WATERSHIELD],\n        }, 'proc:62:barrier-earth': {\n            id: BuffId['proc:62:barrier-earth'],\n            name: 'Earth Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_EARTHSHIELD],\n        }, 'proc:62:barrier-thunder': {\n            id: BuffId['proc:62:barrier-thunder'],\n            name: 'Thunder Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_THUNDERSHIELD],\n        }, 'proc:62:barrier-light': {\n            id: BuffId['proc:62:barrier-light'],\n            name: 'Light Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_LIGHTSHIELD],\n        }, 'proc:62:barrier-dark': {\n            id: BuffId['proc:62:barrier-dark'],\n            name: 'Dark Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_DARKSHIELD],\n        }, 'proc:62:barrier-all': {\n            id: BuffId['proc:62:barrier-all'],\n            name: 'Barrier (All Elements)',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_ELEMENTSHIELD],\n        }, 'proc:62:barrier-unknown': {\n            id: BuffId['proc:62:barrier-unknown'],\n            name: 'Barrier (Unspecified Element)',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_ELEMENTSHIELD],\n        }, 'proc:64:consecutive usage attack': {\n            id: BuffId['proc:64:consecutive usage attack'],\n            name: 'Consecutive Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_USAGESCALED : IconId.ATK_AOE_USAGESCALED],\n        }, 'proc:65:ailment attack boost': {\n            id: BuffId['proc:65:ailment attack boost'],\n            name: 'Active Attack Boost on Status Afflicted Foes',\n            stat: UnitStat.ailmentAttackBoost,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_AILDMGUP],\n        }, 'proc:66:chance revive': {\n            id: BuffId['proc:66:chance revive'],\n            name: 'Instant Revive (Chance)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, 'proc:67:bc fill on spark': {\n            id: BuffId['proc:67:bc fill on spark'],\n            name: 'Active BC Fill on Spark',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SPARKBBUP],\n        }, 'proc:68:guard mitigation': {\n            id: BuffId['proc:68:guard mitigation'],\n            name: 'Active Guard Damage Reduction',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_GUARDCUT],\n        }, 'proc:69:bc fill on guard-percent': {\n            id: BuffId['proc:69:bc fill on guard-percent'],\n            name: 'Active BC Fill on Guard (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'proc:69:bc fill on guard-flat': {\n            id: BuffId['proc:69:bc fill on guard-flat'],\n            name: 'Active BC Fill on Guard (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'proc:71:bc efficacy reduction': {\n            id: BuffId['proc:71:bc efficacy reduction'],\n            name: 'Active BC Efficacy Reduction',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:73:resist-atk down': {\n            id: BuffId['proc:73:resist-atk down'],\n            name: 'Active Attack Reduction Resistance',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTATKDOWN],\n        }, 'proc:73:resist-def down': {\n            id: BuffId['proc:73:resist-def down'],\n            name: 'Active Defense Reduction Resistance',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTDEFDOWN],\n        }, 'proc:73:resist-rec down': {\n            id: BuffId['proc:73:resist-rec down'],\n            name: 'Active Recovery Reduction Resistance',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTRECDOWN],\n        }, 'proc:75:element squad-scaled attack': {\n            id: BuffId['proc:75:element squad-scaled attack'],\n            name: 'Element Squad-Scaled Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_ELEMENTSCALED : IconId.ATK_AOE_ELEMENTSCALED],\n        }, 'proc:76:extra action': {\n            id: BuffId['proc:76:extra action'],\n            name: 'Active Extra Action',\n            stat: UnitStat.extraAction,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DBLSTRIKE],\n        }, 'proc:78:self stat boost-atk': {\n            id: BuffId['proc:78:self stat boost-atk'],\n            name: 'Active Self Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWNLOCK : IconId.BUFF_SELFATKUP],\n        }, 'proc:78:self stat boost-def': {\n            id: BuffId['proc:78:self stat boost-def'],\n            name: 'Active Self Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWNLOCK : IconId.BUFF_SELFDEFUP],\n        }, 'proc:78:self stat boost-rec': {\n            id: BuffId['proc:78:self stat boost-rec'],\n            name: 'Active Self Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWNLOCK : IconId.BUFF_SELFRECUP],\n        }, 'proc:78:self stat boost-crit': {\n            id: BuffId['proc:78:self stat boost-crit'],\n            name: 'Active Self Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWNLOCK : IconId.BUFF_SELFCRTRATEUP],\n        }, 'proc:79:player exp boost': {\n            id: BuffId['proc:79:player exp boost'],\n            name: 'Active Player EXP Boost',\n            stat: UnitStat.expModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_PLAYEREXP],\n        }, 'proc:82:resummon': {\n            id: BuffId['proc:82:resummon'],\n            name: 'Resummon Unit',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SUMMONUNIT],\n        }, 'proc:83:spark critical': {\n            id: BuffId['proc:83:spark critical'],\n            name: 'Active Spark Critical',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SPARKCRTACTIVATED],\n        }, 'proc:84:od fill rate': {\n            id: BuffId['proc:84:od fill rate'],\n            name: 'Active OD Gauge Fill Rate',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_OVERDRIVEUP],\n        }, 'proc:85:heal on hit': {\n            id: BuffId['proc:85:heal on hit'],\n            name: 'Active Heal when Attacked (Chance)',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'proc:86:hp absorb': {\n            id: BuffId['proc:86:hp absorb'],\n            name: 'Active HP Absorption',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HPABS],\n        }, 'proc:87:heal on spark': {\n            id: BuffId['proc:87:heal on spark'],\n            name: 'Active Heal on Spark (Chance)',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SPARK_HPREC],\n        }, 'proc:88:self spark damage': {\n            id: BuffId['proc:88:self spark damage'],\n            name: 'Active Self Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDMGDOWN2 : IconId.BUFF_SPARKDMGUP2],\n        }, 'proc:89:self converted-atk': {\n            id: BuffId['proc:89:self converted-atk'],\n            name: 'Active Self Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_SELFCONVERTATKDOWN : IconId.BUFF_SELFCONVERTATKUP],\n        }, 'proc:89:self converted-def': {\n            id: BuffId['proc:89:self converted-def'],\n            name: 'Active Self Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_SELFCONVERTDEFDOWN : IconId.BUFF_SELFCONVERTDEFUP],\n        }, 'proc:89:self converted-rec': {\n            id: BuffId['proc:89:self converted-rec'],\n            name: 'Active Self Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_SELFCONVERTRECDOWN : IconId.BUFF_SELFCONVERTRECUP],\n        }, 'proc:92:self max hp boost-flat': {\n            id: BuffId['proc:92:self max hp boost-flat'],\n            name: 'Self Max HP Boost (Flat Amount)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SELFHPUP],\n        }, 'proc:92:self max hp boost-percent': {\n            id: BuffId['proc:92:self max hp boost-percent'],\n            name: 'Self Max HP Boost (Percentage)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SELFHPUP],\n        }, 'proc:93:critical damage resistance-base': {\n            id: BuffId['proc:93:critical damage resistance-base'],\n            name: 'Active Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'proc:93:critical damage resistance-buff': {\n            id: BuffId['proc:93:critical damage resistance-buff'],\n            name: 'Active Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'proc:93:element damage resistance-base': {\n            id: BuffId['proc:93:element damage resistance-base'],\n            name: 'Active Base Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'proc:93:element damage resistance-buff': {\n            id: BuffId['proc:93:element damage resistance-buff'],\n            name: 'Active Buffed Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'proc:93:spark damage resistance-base': {\n            id: BuffId['proc:93:spark damage resistance-base'],\n            name: 'Active Base Spark Damage Reduction',\n            stat: UnitStat.sparkDamageMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SPARKDMGDOWN],\n        }, 'proc:93:spark damage resistance-buff': {\n            id: BuffId['proc:93:spark damage resistance-buff'],\n            name: 'Active Buffed Spark Damage Reduction',\n            stat: UnitStat.sparkDamageMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SPARKDMGDOWN],\n        }, 'proc:94:aoe normal attack': {\n            id: BuffId['proc:94:aoe normal attack'],\n            name: 'Active Normal Attacks Hit All Foes',\n            stat: UnitStat.aoeNormalAttack,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_AOEATK],\n        }, 'proc:95:sphere lock': {\n            id: BuffId['proc:95:sphere lock'],\n            name: 'Active Sphere Lock',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_NULLSPHERE],\n        }, 'proc:96:es lock': {\n            id: BuffId['proc:96:es lock'],\n            name: 'Active Extra Skill Lock',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_NULLES],\n        }, 'proc:97:element specific attack': {\n            id: BuffId['proc:97:element specific attack'],\n            name: 'Element Target Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => {\n                let elements;\n                if (buff && buff.conditions && buff.conditions.targetElements && buff.conditions.targetElements.length > 0) {\n                    elements = buff.conditions.targetElements;\n                }\n                else {\n                    elements = [BuffConditionElement.Unknown];\n                }\n                const elementalIconKeys = elements.map((inputElement) => {\n                    const element = typeof inputElement === 'string' ? inputElement : '';\n                    let iconKey = `BUFF_${element.toUpperCase()}DMGUP`;\n                    if (!(iconKey in IconId)) {\n                        iconKey = 'BUFF_ELEMENTDMGUP';\n                    }\n                    return IconId[iconKey];\n                });\n                return [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE].concat(elementalIconKeys);\n            },\n        }, 'proc:113:gradual od fill': {\n            id: BuffId['proc:113:gradual od fill'],\n            name: 'Active Gradual OD Gauge Fill (Flat Amount)',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ODFILLBOOST],\n        }, UNKNOWN_CONDITIONAL_EFFECT_ID: {\n            id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n            name: 'Unknown Conditional Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_CONDITIONAL_BUFF_PARAMS: {\n            id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n            name: 'Unknown Conditional Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'conditional:1:attack buff': {\n            id: BuffId['conditional:1:attack buff'],\n            name: 'Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'conditional:3:defense buff': {\n            id: BuffId['conditional:3:defense buff'],\n            name: 'Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'conditional:5:recovery buff': {\n            id: BuffId['conditional:5:recovery buff'],\n            name: 'Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'conditional:7:critical hit rate buff': {\n            id: BuffId['conditional:7:critical hit rate buff'],\n            name: 'Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'conditional:8:gradual heal': {\n            id: BuffId['conditional:8:gradual heal'],\n            name: 'Conditional Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'conditional:12:guaranteed ko resistance': {\n            id: BuffId['conditional:12:guaranteed ko resistance'],\n            name: 'Conditional Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_KOBLK],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'conditional:13:elemental attack buff': {\n                id: BuffId['conditional:13:elemental attack buff'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.ConditionalTimed,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'conditional:14:elemental defense buff': {\n                id: BuffId['conditional:14:elemental defense buff'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.ConditionalTimed,\n                icons: createIconGetterForStat('DEF'),\n            },\n        };\n    })()), { 'conditional:21:fire mitigation': {\n            id: BuffId['conditional:21:fire mitigation'],\n            name: 'Conditional Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'conditional:22:water mitigation': {\n            id: BuffId['conditional:22:water mitigation'],\n            name: 'Conditional Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'conditional:23:earth mitigation': {\n            id: BuffId['conditional:23:earth mitigation'],\n            name: 'Conditional Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'conditional:24:thunder mitigation': {\n            id: BuffId['conditional:24:thunder mitigation'],\n            name: 'Conditional Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'conditional:25:light mitigation': {\n            id: BuffId['conditional:25:light mitigation'],\n            name: 'Conditional Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'conditional:26:dark mitigation': {\n            id: BuffId['conditional:26:dark mitigation'],\n            name: 'Conditional Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'conditional:36:mitigation': {\n            id: BuffId['conditional:36:mitigation'],\n            name: 'Conditional Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'conditional:37:gradual bc fill': {\n            id: BuffId['conditional:37:gradual bc fill'],\n            name: 'Conditional Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'conditional:40:spark damage': {\n            id: BuffId['conditional:40:spark damage'],\n            name: 'Conditional Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'conditional:51:add fire element': {\n            id: BuffId['conditional:51:add fire element'],\n            name: 'Conditional Added Fire Element to Attack',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ADDFIRE],\n        }, 'conditional:52:add water element': {\n            id: BuffId['conditional:52:add water element'],\n            name: 'Conditional Added Water Element to Attack',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ADDWATER],\n        }, 'conditional:53:add earth element': {\n            id: BuffId['conditional:53:add earth element'],\n            name: 'Conditional Added Earth Element to Attack',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ADDEARTH],\n        }, 'conditional:54:add thunder element': {\n            id: BuffId['conditional:54:add thunder element'],\n            name: 'Conditional Added Thunder Element to Attack',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ADDTHUNDER],\n        }, 'conditional:55:add light element': {\n            id: BuffId['conditional:55:add light element'],\n            name: 'Conditional Added Light Element to Attack',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ADDLIGHT],\n        }, 'conditional:56:add dark element': {\n            id: BuffId['conditional:56:add dark element'],\n            name: 'Conditional Added Dark Element to Attack',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ADDDARK],\n        }, 'conditional:72:attack boost-bb': {\n            id: BuffId['conditional:72:attack boost-bb'],\n            name: 'Conditional BB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'conditional:72:attack boost-sbb': {\n            id: BuffId['conditional:72:attack boost-sbb'],\n            name: 'Conditional SBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'conditional:72:attack boost-ubb': {\n            id: BuffId['conditional:72:attack boost-ubb'],\n            name: 'Conditional UBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'conditional:74:add atk down to attack': {\n            id: BuffId['conditional:74:add atk down to attack'],\n            name: 'Conditional Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'conditional:75:add def down to attack': {\n            id: BuffId['conditional:75:add def down to attack'],\n            name: 'Conditional Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'conditional:84:critical damage': {\n            id: BuffId['conditional:84:critical damage'],\n            name: 'Conditional Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'conditional:91:chance ko resistance': {\n            id: BuffId['conditional:91:chance ko resistance'],\n            name: 'Conditional KO Resistance (Chance)',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, 'conditional:95:fire barrier': {\n            id: BuffId['conditional:95:fire barrier'],\n            name: 'Conditional Fire Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_FIRESHIELD],\n        }, 'conditional:96:water barrier': {\n            id: BuffId['conditional:96:water barrier'],\n            name: 'Conditional Water Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_WATERSHIELD],\n        }, 'conditional:97:earth barrier': {\n            id: BuffId['conditional:97:earth barrier'],\n            name: 'Conditional Earth Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_EARTHSHIELD],\n        }, 'conditional:98:thunder barrier': {\n            id: BuffId['conditional:98:thunder barrier'],\n            name: 'Conditional Thunder Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_THUNDERSHIELD],\n        }, 'conditional:99:light barrier': {\n            id: BuffId['conditional:99:light barrier'],\n            name: 'Conditional Light Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_LIGHTSHIELD],\n        }, 'conditional:100:dark barrier': {\n            id: BuffId['conditional:100:dark barrier'],\n            name: 'Conditional Dark Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_DARKSHIELD],\n        }, 'conditional:111:bc fill on spark': {\n            id: BuffId['conditional:111:bc fill on spark'],\n            name: 'Conditional BC Fill on Spark',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_SPARKBBUP],\n        }, 'conditional:124:self attack buff': {\n            id: BuffId['conditional:124:self attack buff'],\n            name: 'Conditional Self Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWNLOCK : IconId.BUFF_SELFATKUP],\n        }, 'conditional:125:self defense buff': {\n            id: BuffId['conditional:125:self defense buff'],\n            name: 'Conditional Self Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWNLOCK : IconId.BUFF_SELFDEFUP],\n        }, 'conditional:131:spark critical': {\n            id: BuffId['conditional:131:spark critical'],\n            name: 'Conditional Spark Critical',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_SPARKCRTACTIVATED],\n        }, 'conditional:132:od fill rate': {\n            id: BuffId['conditional:132:od fill rate'],\n            name: 'Conditional OD Gauge Fill Rate',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_OVERDRIVEUP],\n        }, 'conditional:133:heal on hit': {\n            id: BuffId['conditional:133:heal on hit'],\n            name: 'Conditional Heal when Attacked (Chance)',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'conditional:143:critical damage reduction-base': {\n            id: BuffId['conditional:143:critical damage reduction-base'],\n            name: 'Conditional Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'conditional:143:critical damage reduction-buff': {\n            id: BuffId['conditional:143:critical damage reduction-buff'],\n            name: 'Conditional Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'conditional:144:spark damage reduction-base': {\n            id: BuffId['conditional:144:spark damage reduction-base'],\n            name: 'Conditional Base Spark Damage Reduction',\n            stat: UnitStat.sparkDamageMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_SPARKDMGDOWN],\n        }, 'conditional:144:spark damage reduction-buff': {\n            id: BuffId['conditional:144:spark damage reduction-buff'],\n            name: 'Conditional Buffed Spark Damage Reduction',\n            stat: UnitStat.sparkDamageMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_SPARKDMGDOWN],\n        }, 'conditional:145:elemental weakness damage reduction-base': {\n            id: BuffId['conditional:145:elemental weakness damage reduction-base'],\n            name: 'Conditional Base Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'conditional:145:elemental weakness damage reduction-buff': {\n            id: BuffId['conditional:145:elemental weakness damage reduction-buff'],\n            name: 'Conditional Buffed Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'conditional:153:chance inflict atk down on hit': {\n            id: BuffId['conditional:153:chance inflict atk down on hit'],\n            name: 'Conditional Attack Reduction Counter (Chance)',\n            stat: UnitStat.atkDownCounter,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_PROB_ATKREDUC],\n        }, 'conditional:10001:stealth': {\n            id: BuffId['conditional:10001:stealth'],\n            name: 'Conditional Stealth',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.SG_BUFF_STEALTH],\n        }, 'conditional:10001:stealth-atk': {\n            id: BuffId['conditional:10001:stealth-atk'],\n            name: 'Conditional Attack Boost (from Stealth)',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [IconId.SG_BUFF_STEALTH, (buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'conditional:10001:stealth-def': {\n            id: BuffId['conditional:10001:stealth-def'],\n            name: 'Conditional Defense Boost (from Stealth)',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [IconId.SG_BUFF_STEALTH, (buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'conditional:10001:stealth-rec': {\n            id: BuffId['conditional:10001:stealth-rec'],\n            name: 'Conditional Recovery Boost (from Stealth)',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [IconId.SG_BUFF_STEALTH, (buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'conditional:10001:stealth-crit': {\n            id: BuffId['conditional:10001:stealth-crit'],\n            name: 'Conditional Critical Hit Rate Boost (from Stealth)',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [IconId.SG_BUFF_STEALTH, (buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'conditional:10500:shield-all': {\n            id: BuffId['conditional:10500:shield-all'],\n            name: 'Non-Elemental Shield',\n            stat: UnitStat.shield,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.SG_BUFF_ALL],\n        }, 'conditional:10500:shield-fire': {\n            id: BuffId['conditional:10500:shield-fire'],\n            name: 'Fire Shield',\n            stat: UnitStat.shield,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.SG_BUFF_FIRE],\n        }, 'conditional:10500:shield-water': {\n            id: BuffId['conditional:10500:shield-water'],\n            name: 'Water Shield',\n            stat: UnitStat.shield,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.SG_BUFF_WATER],\n        }, 'conditional:10500:shield-earth': {\n            id: BuffId['conditional:10500:shield-earth'],\n            name: 'Earth Shield',\n            stat: UnitStat.shield,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.SG_BUFF_EARTH],\n        }, 'conditional:10500:shield-thunder': {\n            id: BuffId['conditional:10500:shield-thunder'],\n            name: 'Thunder Shield',\n            stat: UnitStat.shield,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.SG_BUFF_THUNDER],\n        }, 'conditional:10500:shield-light': {\n            id: BuffId['conditional:10500:shield-light'],\n            name: 'Light Shield',\n            stat: UnitStat.shield,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.SG_BUFF_LIGHT],\n        }, 'conditional:10500:shield-dark': {\n            id: BuffId['conditional:10500:shield-dark'],\n            name: 'Dark Shield',\n            stat: UnitStat.shield,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.SG_BUFF_DARK],\n        }, 'conditional:10500:shield-unknown': {\n            id: BuffId['conditional:10500:shield-unknown'],\n            name: 'Dark Shield',\n            stat: UnitStat.shield,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.SG_BUFF_UNKNOWN],\n        } }));\n\n    /**\n     * @description Get the associated metadata entry for a given buff ID.\n     * @param id Buff ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n     * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    var index$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        convertProcEffectToBuffs: convertProcEffectToBuffs,\n        convertPassiveEffectToBuffs: convertPassiveEffectToBuffs,\n        convertConditionalEffectToBuffs: convertConditionalEffectToBuffs,\n        get BuffSource () { return BuffSource; },\n        get BuffStackType () { return BuffStackType; },\n        BUFF_METADATA: BUFF_METADATA,\n        getMetadataForBuff: getMetadataForBuff\n    });\n\n    var index$2 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        constants: constants,\n        parsers: index$1,\n        getMetadataForProc: getMetadataForProc,\n        getMetadataForPassive: getMetadataForPassive,\n        isAttackingProcId: isAttackingProcId,\n        getNameForProc: getNameForProc,\n        getNameForPassive: getNameForPassive,\n        isProcEffect: isProcEffect,\n        isPassiveEffect: isPassiveEffect,\n        combineEffectsAndDamageFrames: combineEffectsAndDamageFrames,\n        getEffectId: getEffectId,\n        getEffectName: getEffectName,\n        get ProcBuffType () { return ProcBuffType; },\n        PASSIVE_METADATA: PASSIVE_METADATA,\n        PROC_METADATA: PROC_METADATA\n    });\n\n    /**\n     * @description Get the effects of a given extra skill.\n     * @param skill Extra skill to get the effects of.\n     * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForExtraSkill(skill) {\n        return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n    }\n\n    var index$3 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForExtraSkill: getEffectsForExtraSkill\n    });\n\n    /**\n     * @description Get the effects of a given item.\n     * @param item Item to get the effects of, if any are present,\n     * @returns Effects of the given item if they exist, an empty array otherwise.\n     */\n    function getEffectsForItem(item) {\n        let result = [];\n        if (item && item.effect) {\n            if (Array.isArray(item.effect)) {\n                result = item.effect;\n            }\n            else if (Array.isArray(item.effect.effect)) {\n                const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n                result = effect.map(e => {\n                    // apply target data to each effect\n                    const fullProcEffect = Object.assign({}, e);\n                    fullProcEffect['target area'] = targetArea;\n                    fullProcEffect['target type'] = targetType;\n                    return fullProcEffect;\n                });\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given item thumbnail filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents the thumbnail image for a given item.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getItemImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/item/${fileName || ''}`;\n    }\n\n    var index$4 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForItem: getEffectsForItem,\n        getItemImageUrl: getItemImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given leader skill.\n     * @param skill Leader skill to get the effects of.\n     * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForLeaderSkill(skill) {\n        return skill && Array.isArray(skill.effects) ? skill.effects : [];\n    }\n\n    var index$5 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForLeaderSkill: getEffectsForLeaderSkill\n    });\n\n    /**\n     * @description Generate the file names for each of the image type for a given unit ID.\n     * @param id Unit ID to use to generate the file names.\n     * @param suffix Optional parameter that's useful for things like alternate art.\n     * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n     */\n    function getUnitImageFileNames(id, suffix = '') {\n        const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n        return {\n            spritesheet: `unit_anime_${fileNameSuffix}`,\n            battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n            guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n            fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n        };\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given unit filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents an image for a given unit.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getUnitImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n    }\n\n    var index$6 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getUnitImageFileNames: getUnitImageFileNames,\n        getUnitImageUrl: getUnitImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given SP Enhancement Entry.\n     * @param entry SP Enhancement Entry to get the effects of.\n     * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n     */\n    function getEffectsForSpEnhancement(entry) {\n        const result = [];\n        if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n            const effectWrappers = entry.skill.effects;\n            effectWrappers.forEach(effectWrapper => {\n                Object.keys(effectWrapper).forEach(spType => {\n                    const originalEffect = effectWrapper[spType];\n                    const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                    result.push(unwrappedEffect);\n                });\n            });\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the associated category name with a given category ID.\n     * @param categoryId Category ID to get the name of.\n     * @returns Name of the given category ID or the string 'Unknown'.\n     */\n    function getSpCategoryName(categoryId) {\n        let result;\n        const numericalCategoryId = +categoryId;\n        switch (numericalCategoryId) {\n            case 1:\n                result = SpCategoryName['Parameter Boost'];\n                break;\n            case 2:\n                result = SpCategoryName.Spark;\n                break;\n            case 3:\n                result = SpCategoryName['Critical Hits'];\n                break;\n            case 4:\n                result = SpCategoryName['Attack Boost'];\n                break;\n            case 5:\n                result = SpCategoryName['BB Gauge'];\n                break;\n            case 6:\n                result = SpCategoryName['HP Recovery'];\n                break;\n            case 7:\n                result = SpCategoryName.Drops;\n                break;\n            case 8:\n                result = SpCategoryName['Ailment Resistance'];\n                break;\n            case 9:\n                result = SpCategoryName['Ailment Infliction'];\n                break;\n            case 10:\n                result = SpCategoryName['Damage Reduction'];\n                break;\n            case 11:\n                result = SpCategoryName.Special;\n                break;\n            default:\n                result = SpCategoryName.Unknown;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n\n    /**\n     * @description Get the corresponding character code for a given index.\n     * It expects an index between 0 and 61 inclusive; will return an empty string if\n     * the given value is outside of the range.\n     * @param index Index of an SP entry in a given skills array.\n     * @returns Corresponding single alphanumeric character to the given index\n     * or an empty string if the index is invalid.\n     */\n    function spIndexToCode(index) {\n        let result = '';\n        let correspondingCharacterCode = -1;\n        if (Number.isInteger(index)) {\n            if (index >= 0 && index <= 25) { // A-Z\n                correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (index >= 26 && index <= 51) { // a-z\n                correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n            }\n            else if (index >= 52 && index <= 61) { // 0-9\n                correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n            }\n        }\n        if (correspondingCharacterCode !== -1) {\n            result = String.fromCharCode(correspondingCharacterCode);\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the corresponding index for a given character code.\n     * It expects an alphanumeric character and will return -1 otherwise.\n     * @param code Character code an SP entry in a given skills array.\n     * @returns Corresponding index to the given character or -1 if the\n     * character is invalid.\n     */\n    function spCodeToIndex(code) {\n        let result = -1;\n        let characterCodeOffset = -1;\n        if (!!code && typeof code === 'string' && code.length === 1) {\n            if (code >= 'A' && code <= 'Z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (code >= 'a' && code <= 'z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n            }\n            else if (code >= '0' && code <= '9') {\n                characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n            }\n        }\n        if (characterCodeOffset !== -1) {\n            result = code.charCodeAt(0) - characterCodeOffset;\n        }\n        return result;\n    }\n\n    /**\n     * @description Extract the ID of a string in the format of `number@actualId`. If there\n     * is no value after the @ character or if no @ character is present, the original ID is returned.\n     * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n     * @param id Original SP Enhancement Entry ID.\n     * @returns The ID of a string in the format of `number@actualId`, or the original input if\n     * there is no @ character or no value after the @ character.\n     */\n    function getSpEntryId(id) {\n        return (typeof id === 'string' && id.split('@')[1]) || id;\n    }\n\n    /**\n     * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n     * @param id SP Enhancement entry ID.\n     * @param entries Collection of SP Enhancement entries to search in.\n     * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n     */\n    function getSpEntryWithId(id, entries) {\n        const spId = getSpEntryId(id);\n        return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n     * @param entry SP Entry to get dependencies for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n     */\n    function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependencies = [];\n        if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n            const dependencyId = getSpEntryId(entry.dependency);\n            const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n            if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n                addedEntries.add(dependencyEntry);\n                const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n                dependencies = [dependencyEntry].concat(subDependencies);\n            }\n        }\n        return dependencies;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n     * @param entry SP Entry to get dependents for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n     */\n    function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependents = [];\n        if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n            const entryId = entry.id;\n            dependents = allEntries\n                .filter(s => {\n                return s.dependency &&\n                    s.dependency.includes(entryId) &&\n                    !addedEntries.has(s);\n            });\n            dependents.forEach(dependent => {\n                addedEntries.add(dependent);\n                const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n                dependents = dependents.concat(subDependents);\n            });\n        }\n        return dependents;\n    }\n\n    var index$7 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForSpEnhancement: getEffectsForSpEnhancement,\n        getSpCategoryName: getSpCategoryName,\n        spIndexToCode: spIndexToCode,\n        spCodeToIndex: spCodeToIndex,\n        getSpEntryId: getSpEntryId,\n        getSpEntryWithId: getSpEntryWithId,\n        getAllDependenciesForSpEntry: getAllDependenciesForSpEntry,\n        getAllEntriesThatDependOnSpEntry: getAllEntriesThatDependOnSpEntry\n    });\n\n    /* NOTE: this file is automatically generated; do not edit this file */\n    var version = '0.7.0';\n\n    exports.buffs = index$2;\n    exports.bursts = index;\n    exports.datamineTypes = datamineTypes;\n    exports.extraSkills = index$3;\n    exports.items = index$4;\n    exports.leaderSkills = index$5;\n    exports.spEnhancements = index$7;\n    exports.units = index$6;\n    exports.version = version;\n\n    return exports;\n\n}({}));\n\n","/**\n * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get level entry from.\n * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n */\nexport default function getLevelEntryForBurst(burst, level) {\n    const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n    let levelIndex;\n    if (level !== null && !isNaN(level)) {\n        // 1-indexed\n        levelIndex = (+level - 1);\n    }\n    else {\n        // default to last entry in burst\n        levelIndex = burstEffectsByLevel.length - 1;\n    }\n    return burstEffectsByLevel[levelIndex];\n}\n","import getLevelEntryForBurst from './getLevelEntryForBurst';\n/**\n * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get effects from.\n * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n */\nexport default function getEffectsForBurst(burst, level) {\n    const levelEntry = getLevelEntryForBurst(burst, level);\n    return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n}\n","/**\n * @description Get the proc/passive ID of a given object.\n * @param effect Object to get the effect ID from.\n * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectId(effect) {\n    let resultId = '';\n    if (effect) {\n        resultId = effect['proc id'] || effect['unknown proc id'] ||\n            effect['passive id'] || effect['unknown passive id'] || '';\n    }\n    return resultId;\n}\n","export var KNOWN_PROC_ID;\n(function (KNOWN_PROC_ID) {\n    KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n    KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n})(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\nexport var KNOWN_PASSIVE_ID;\n(function (KNOWN_PASSIVE_ID) {\n    KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n    KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n})(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\nexport var KNOWN_CONDITIONAL_ID;\n(function (KNOWN_CONDITIONAL_ID) {\n    KNOWN_CONDITIONAL_ID[\"Unknown\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n})(KNOWN_CONDITIONAL_ID || (KNOWN_CONDITIONAL_ID = {}));\n","export var ProcBuffType;\n(function (ProcBuffType) {\n    ProcBuffType[\"Attack\"] = \"Attack\";\n})(ProcBuffType || (ProcBuffType = {}));\n/* eslint-disable */\n/**\n * @ignore\n */\nexport const PASSIVE_METADATA = Object.freeze({\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Parameter Boost\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Elemental Parameter Boost\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Type-Based Parameter Boost\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"Status Negation\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Damage Reduction\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Gradual BB Gauge Boost\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"HC Efficacy\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"HP-Conditional Parameter Boost\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"HP-Conditional Drop Rate Boost\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"BC Fill on Enemy Defeat\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Damage Reduction (Chance)\"\n    },\n    \"15\": {\n        \"ID\": \"15\",\n        \"Name\": \"Heal on Enemy Defeat\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Heal on Battle Victory\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"HP Absorption\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Drop Rate Boost\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"Status Infliction\"\n    },\n    \"21\": {\n        \"ID\": \"21\",\n        \"Name\": \"Parameter Boost for First X Turns\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"BC Fill on Battle Victory\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Heal when Attacked (Chance)\"\n    },\n    \"25\": {\n        \"ID\": \"25\",\n        \"Name\": \"BC Fill when Hit (Chance)\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Damage Counter (Chance)\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Increased Target Chance\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Decreased Target Chance\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Defense Ignore (Chance)\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"BB Conditional Parameter Boost\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"BC Efficacy\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Heal over Time\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"Critical Damage Boost\"\n    },\n    \"35\": {\n        \"ID\": \"35\",\n        \"Name\": \"BC Fill when Normal Attacking\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Extra Action\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Hit Count Boost\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Parameter Conversion\"\n    },\n    \"41\": {\n        \"ID\": \"41\",\n        \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"Gender Parameter Boost\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Damage Reduction to 1\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Flat Parameter Boost\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"Critical Damage Negation\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"BC Fill on Spark\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"BC Cost Reduction\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"BB Gauge Consumption Reduction\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Elemental Damage Boost\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Conditional Effect based on HP Threshold\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Damage Reduction when Guarding\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BC Fill when Attacked when Guarding\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BC Fill on Guard\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Elemental Damage Reduction for first X Turns\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"BB Atk Boost\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"BC Fill on Critical\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Add buff to Brave Burst\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"OD Gauge Fill Rate Boost\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"Status Counter\"\n    },\n    \"72\": {\n        \"ID\": \"72\",\n        \"Name\": \"Turn End Effects Activate at Turn Start\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\"\n    },\n    \"74\": {\n        \"ID\": \"74\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Spark Vulnerability\"\n    },\n    \"77\": {\n        \"ID\": \"77\",\n        \"Name\": \"Spark Damage Reduction\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Conditional Effect after Damage Received Threshold\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"BC Fill after Damage Received Threshold\"\n    },\n    \"80\": {\n        \"ID\": \"80\",\n        \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n    },\n    \"81\": {\n        \"ID\": \"81\",\n        \"Name\": \"BC Fill after Damage Dealt Threshold\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"Conditional Effect after BC Received Threshold\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"Conditional Effect after HC Received Threshold\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"BC Fill after HC Received Threshold\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"Conditional Effect after Spark Threshold\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Conditional Effect on Guard\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Conditional Effect on Critical\"\n    },\n    \"90\": {\n        \"ID\": \"90\",\n        \"Name\": \"Status Infliction on Critical\"\n    },\n    \"91\": {\n        \"ID\": \"91\",\n        \"Name\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Negate Defense Ignore\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Added Elements\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Normal Attacks Hit All Foes\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Player EXP Boost\"\n    },\n    \"99\": {\n        \"ID\": \"99\",\n        \"Name\": \"\"\n    },\n    \"100\": {\n        \"ID\": \"100\",\n        \"Name\": \"Spark Critical\"\n    },\n    \"101\": {\n        \"ID\": \"101\",\n        \"Name\": \"Heal on Spark\"\n    },\n    \"102\": {\n        \"ID\": \"102\",\n        \"Name\": \"Added Elements\"\n    },\n    \"103\": {\n        \"ID\": \"103\",\n        \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n    },\n    \"104\": {\n        \"ID\": \"104\",\n        \"Name\": \"Spark Boost when HP Passes Threshold\"\n    },\n    \"105\": {\n        \"ID\": \"105\",\n        \"Name\": \"Turn-Based Parameter Boost\"\n    },\n    \"106\": {\n        \"ID\": \"106\",\n        \"Name\": \"Conditional Effect after Activating Overdrive\"\n    },\n    \"107\": {\n        \"ID\": \"107\",\n        \"Name\": \"Add Effect to Leader Skill\"\n    },\n    \"109\": {\n        \"ID\": \"109\",\n        \"Name\": \"BB Gauge Reduction (Chance)\"\n    },\n    \"110\": {\n        \"ID\": \"110\",\n        \"Name\": \"BC Efficacy Reduction (Chance)\"\n    },\n    \"111\": {\n        \"ID\": \"111\",\n        \"Name\": \"Increase Brave Burst Activation Rate\"\n    },\n    \"112\": {\n        \"ID\": \"112\",\n        \"Name\": \"ABP/CBP Boost\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Conditional Effect after HP Threshold\"\n    },\n    \"114\": {\n        \"ID\": \"114\",\n        \"Name\": \"Inflict Buff when Attacked\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n    },\n    \"128\": {\n        \"ID\": \"128\",\n        \"Name\": \"Damage Reduction from Normal Attacks\"\n    },\n    \"143\": {\n        \"ID\": \"143\",\n        \"Name\": \"Break Atk Parameter Limit\"\n    },\n    \"10008\": {\n        \"ID\": \"10008\",\n        \"Name\": \"Damage Reduction from Specific Sources\"\n    },\n    \"11004\": {\n        \"ID\": \"11004\",\n        \"Name\": \"Elemental Spark Damage Boost\"\n    },\n    \"11005\": {\n        \"ID\": \"11005\",\n        \"Name\": \"Elemental Critical Damage Boost\"\n    },\n    \"11006\": {\n        \"ID\": \"11006\",\n        \"Name\": \"Summoner EXP Boost\"\n    },\n    \"11009\": {\n        \"ID\": \"11009\",\n        \"Name\": \"Effect Duration Boost\"\n    },\n    \"66,1\": {\n        \"ID\": \"66,1\",\n        \"Name\": \"\"\n    }\n});\n/**\n * @ignore\n */\nexport const PROC_METADATA = Object.freeze({\n    \"0\": {\n        \"ID\": \"0\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Regular Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Burst Heal\",\n        \"Type\": \"\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Heal over Time\",\n        \"Type\": \"\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"BB Gauge Refill\",\n        \"Type\": \"\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"Drop Rate\",\n        \"Type\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Parameter Reduction\",\n        \"Type\": \"\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"Status Cleanse\",\n        \"Type\": \"\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"Status Infliction\",\n        \"Type\": \"\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"Revive (Guaranteed)\",\n        \"Type\": \"\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"Random Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Lifesteal Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"Status Negation\",\n        \"Type\": \"\"\n    },\n    \"18\": {\n        \"ID\": \"18\",\n        \"Name\": \"Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Gradual BB Gauge Boost\",\n        \"Type\": \"\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"BC Fill on Hit\",\n        \"Type\": \"\"\n    },\n    \"22\": {\n        \"ID\": \"22\",\n        \"Name\": \"Defense Ignore\",\n        \"Type\": \"\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Hit Count Boost\",\n        \"Type\": \"\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Fixed Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Multi-Element Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"Add Elements\",\n        \"Type\": \"\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Instant BB Gauge Fill\",\n        \"Type\": \"\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"Element Shift\",\n        \"Type\": \"\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Buff Removal (Chance)\",\n        \"Type\": \"\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"BB Gauge Reduction (Chance)\",\n        \"Type\": \"\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Leader Skill Lock (Chance)\",\n        \"Type\": \"\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Summon Unit\",\n        \"Type\": \"\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"Status Cure\",\n        \"Type\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Status Infliction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Instant OD Fill\",\n        \"Type\": \"\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Damage over Time (Additional Damage)\",\n        \"Type\": \"\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"BB Atk Boost\",\n        \"Type\": \"\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Non-Lethal Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"HP Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"Piercing Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"Retire\",\n        \"Type\": \"\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Damage Counter\",\n        \"Type\": \"\"\n    },\n    \"51\": {\n        \"ID\": \"51\",\n        \"Name\": \"Parameter Reduction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"BC Efficacy\",\n        \"Type\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Status Counter\",\n        \"Type\": \"\"\n    },\n    \"54\": {\n        \"ID\": \"54\",\n        \"Name\": \"Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Elemental Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"56\": {\n        \"ID\": \"56\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"57\": {\n        \"ID\": \"57\",\n        \"Name\": \"BC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Spark Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BB Atk Reduction\",\n        \"Type\": \"\"\n    },\n    \"60\": {\n        \"ID\": \"60\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BB-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Barrier\",\n        \"Type\": \"\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Selective Buff Wipe\",\n        \"Type\": \"\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"Consecutive Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\",\n        \"Type\": \"\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Revive (Chance)\",\n        \"Type\": \"\"\n    },\n    \"67\": {\n        \"ID\": \"67\",\n        \"Name\": \"BC Fill on Spark\",\n        \"Type\": \"\"\n    },\n    \"68\": {\n        \"ID\": \"68\",\n        \"Name\": \"Damage Reduction when Guarding\",\n        \"Type\": \"\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"BC Fill on Guard\",\n        \"Type\": \"\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"BB Gauge Fill Rate Debuff\",\n        \"Type\": \"\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\",\n        \"Type\": \"\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Element Squad-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"76\": {\n        \"ID\": \"76\",\n        \"Name\": \"Extra Action\",\n        \"Type\": \"\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Self Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"Player EXP Boost\",\n        \"Type\": \"\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"83\": {\n        \"ID\": \"83\",\n        \"Name\": \"Spark Critical\",\n        \"Type\": \"\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"OD Gauge Fill Rate\",\n        \"Type\": \"\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"Heal when Attacked\",\n        \"Type\": \"\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"HP Absorption\",\n        \"Type\": \"\"\n    },\n    \"87\": {\n        \"ID\": \"87\",\n        \"Name\": \"Heal on Spark\",\n        \"Type\": \"\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Self Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Self Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Self Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"94\": {\n        \"ID\": \"94\",\n        \"Name\": \"Normal Attacks Hit All Foes\",\n        \"Type\": \"\"\n    },\n    \"95\": {\n        \"ID\": \"95\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n        \"Type\": \"\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Element Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Gradual OD Fill\",\n        \"Type\": \"\"\n    },\n    \"119\": {\n        \"ID\": \"119\",\n        \"Name\": \"Gradual BC Drain\",\n        \"Type\": \"\"\n    },\n    \"123\": {\n        \"ID\": \"123\",\n        \"Name\": \"OD Gauge Reduction\",\n        \"Type\": \"\"\n    },\n    \"126\": {\n        \"ID\": \"126\",\n        \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n        \"Type\": \"\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Lock On\",\n        \"Type\": \"\"\n    },\n    \"130\": {\n        \"ID\": \"130\",\n        \"Name\": \"Parameter Reduction Counter\",\n        \"Type\": \"\"\n    },\n    \"131\": {\n        \"ID\": \"131\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"132\": {\n        \"ID\": \"132\",\n        \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"901\": {\n        \"ID\": \"901\",\n        \"Name\": \"Raid Heal (on Map)\",\n        \"Type\": \"\"\n    },\n    \"902\": {\n        \"ID\": \"902\",\n        \"Name\": \"Raid Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"903\": {\n        \"ID\": \"903\",\n        \"Name\": \"Raid Boss Reveal\",\n        \"Type\": \"\"\n    },\n    \"905\": {\n        \"ID\": \"905\",\n        \"Name\": \"Raid Teleport\",\n        \"Type\": \"\"\n    },\n    \"906\": {\n        \"ID\": \"906\",\n        \"Name\": \"Raid Flee\",\n        \"Type\": \"\"\n    },\n    \"907\": {\n        \"ID\": \"907\",\n        \"Name\": \"Raid Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"908\": {\n        \"ID\": \"908\",\n        \"Name\": \"Raid Item Drop Rate Boost\",\n        \"Type\": \"\"\n    },\n    \"10000\": {\n        \"ID\": \"10000\",\n        \"Name\": \"Taunt\",\n        \"Type\": \"\"\n    },\n    \"10001\": {\n        \"ID\": \"10001\",\n        \"Name\": \"Stealth\",\n        \"Type\": \"\"\n    },\n    \"10002\": {\n        \"ID\": \"10002\",\n        \"Name\": \"Shield (old)\",\n        \"Type\": \"\"\n    },\n    \"10003\": {\n        \"ID\": \"10003\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"10004\": {\n        \"ID\": \"10004\",\n        \"Name\": \"Damage Immunity\",\n        \"Type\": \"\"\n    },\n    \"10005\": {\n        \"ID\": \"10005\",\n        \"Name\": \"Turn Skip (short duration)\",\n        \"Type\": \"\"\n    },\n    \"10006\": {\n        \"ID\": \"10006\",\n        \"Name\": \"Turn Skip (long duration)\",\n        \"Type\": \"\"\n    },\n    \"10007\": {\n        \"ID\": \"10007\",\n        \"Name\": \"Evasion\",\n        \"Type\": \"\"\n    },\n    \"10009\": {\n        \"ID\": \"10009\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"10012\": {\n        \"ID\": \"10012\",\n        \"Name\": \"OD Drain\",\n        \"Type\": \"\"\n    },\n    \"10015\": {\n        \"ID\": \"10015\",\n        \"Name\": \"Elemental Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"10016\": {\n        \"ID\": \"10016\",\n        \"Name\": \"Element Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"10017\": {\n        \"ID\": \"10017\",\n        \"Name\": \"Elemental Shield\",\n        \"Type\": \"\"\n    },\n    \"10018\": {\n        \"ID\": \"10018\",\n        \"Name\": \"Max HP Reduction\",\n        \"Type\": \"\"\n    },\n    \"10019\": {\n        \"ID\": \"10019\",\n        \"Name\": \"Effect Purge\",\n        \"Type\": \"\"\n    },\n    \"10020\": {\n        \"ID\": \"10020\",\n        \"Name\": \"Piercing Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"10021\": {\n        \"ID\": \"10021\",\n        \"Name\": \"Active Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10022\": {\n        \"ID\": \"10022\",\n        \"Name\": \"Passive Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10023\": {\n        \"ID\": \"10023\",\n        \"Name\": \"HC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"10025\": {\n        \"ID\": \"10025\",\n        \"Name\": \"KO Resistance Negation\",\n        \"Type\": \"\"\n    },\n    \"10026\": {\n        \"ID\": \"10026\",\n        \"Name\": \"Doom\",\n        \"Type\": \"\"\n    },\n    \"11000\": {\n        \"ID\": \"11000\",\n        \"Name\": \"Negative HP-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"11001\": {\n        \"ID\": \"11001\",\n        \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n        \"Type\": \"\"\n    },\n    \"11002\": {\n        \"ID\": \"11002\",\n        \"Name\": \"HP Limit Break, Convert to HP\",\n        \"Type\": \"\"\n    },\n    \"11003\": {\n        \"ID\": \"11003\",\n        \"Name\": \"Effect Negation\",\n        \"Type\": \"\"\n    },\n    \"70001\": {\n        \"ID\": \"70001\",\n        \"Name\": \"Mana Bubble Shield\",\n        \"Type\": \"\"\n    },\n    \"70002\": {\n        \"ID\": \"70002\",\n        \"Name\": \"Recast\",\n        \"Type\": \"\"\n    },\n    \"2-5\": {\n        \"ID\": \"2-5\",\n        \"Name\": \"Burst Heal and DEF/REC Boost\",\n        \"Type\": \"\"\n    }\n});\n","import { PROC_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given proc ID.\n * @param id Proc ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForProc(id, metadata = PROC_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\nimport { ProcBuffType } from './effect-metadata';\n/**\n * @description Determine if a given proc ID's type is an attack.\n * @param id Proc ID to check.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n */\nexport default function isAttackingProcId(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n}\n","import getEffectId from '../buffs/getEffectId';\nimport { KNOWN_PROC_ID } from '../buffs/constants';\nimport isAttackingProcId from '../buffs/isAttackingProcId';\n/**\n * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n * @param damageFrames Damage frames that each have their own proc ID.\n * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Damage frames entry whose frames are based on the input damage frames.\n */\nexport default function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n    // relevant frames are all effects for healing or attacking\n    const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n    const relevantFrames = inputFrames.filter(frame => {\n        const procId = getEffectId(frame);\n        return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n    });\n    const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n        const keepFirstFrame = index === 0;\n        const numFrames = frameEntry['frame times'].length;\n        const damageDistribution = frameEntry['hit dmg% distribution'];\n        const frameTimes = frameEntry['frame times'];\n        for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n            acc.push({\n                damage: damageDistribution[frameIndex],\n                time: frameTimes[frameIndex],\n            });\n        }\n        return acc;\n    }, []);\n    const resultDamageFramesEntry = {\n        'effect delay time(ms)/frame': effectDelay,\n        'frame times': [],\n        'hit dmg% distribution': [],\n        'hit dmg% distribution (total)': 0,\n        hits: 0,\n    };\n    unifiedFrames.sort((a, b) => a.time - b.time)\n        .forEach(({ time, damage }) => {\n        resultDamageFramesEntry['frame times'].push(time);\n        resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n        resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n    });\n    resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n    return resultDamageFramesEntry;\n}\n","import { PASSIVE_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given passive ID.\n * @param id Passive ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\n/**\n * @description Get the associated name for a given proc ID.\n * @param id Proc ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Name of the proc ID if it exists, empty string otherwise.\n */\nexport default function getNameForProc(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","import getMetadataForPassive from './getMetadataForPassive';\n/**\n * @description Get the associated name for a given passive ID.\n * @param id Passive ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Name of the passive ID if it exists, empty string otherwise.\n */\nexport default function getNameForPassive(id, metadata) {\n    const metadataEntry = getMetadataForPassive(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","/**\n * @description Determine if a given effect object is a proc effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a proc effect based on its properties.\n */\nexport default function isProcEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n}\n","/**\n * @description Determine if a given effect object is a passive effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a passive effect based on its properties.\n */\nexport default function isPassiveEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n}\n","export var Ailment;\n(function (Ailment) {\n    Ailment[\"Poison\"] = \"poison\";\n    Ailment[\"Weak\"] = \"weak\";\n    Ailment[\"Sick\"] = \"sick\";\n    Ailment[\"Injury\"] = \"injury\";\n    Ailment[\"Curse\"] = \"curse\";\n    Ailment[\"Paralysis\"] = \"paralysis\";\n    Ailment[\"AttackReduction\"] = \"atk down\";\n    Ailment[\"DefenseReduction\"] = \"def down\";\n    Ailment[\"RecoveryReduction\"] = \"rec down\";\n    Ailment[\"Unknown\"] = \"unknown\";\n})(Ailment || (Ailment = {}));\nexport var ArenaCondition;\n(function (ArenaCondition) {\n    ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n    ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n    ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n    ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n    ArenaCondition[\"hp_min\"] = \"hp_min\";\n    ArenaCondition[\"hp_max\"] = \"hp_max\";\n    ArenaCondition[\"atk_max\"] = \"atk_max\";\n    ArenaCondition[\"random\"] = \"random\";\n})(ArenaCondition || (ArenaCondition = {}));\nexport var MoveType;\n(function (MoveType) {\n    MoveType[\"Moving\"] = \"1\";\n    MoveType[\"Teleporting\"] = \"2\";\n    MoveType[\"NonMoving\"] = \"3\";\n})(MoveType || (MoveType = {}));\nexport var TargetArea;\n(function (TargetArea) {\n    TargetArea[\"Aoe\"] = \"aoe\";\n    TargetArea[\"Single\"] = \"single\";\n    TargetArea[\"Random\"] = \"random\";\n})(TargetArea || (TargetArea = {}));\nexport var TargetAreaShorthand;\n(function (TargetAreaShorthand) {\n    TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n    TargetAreaShorthand[\"Single\"] = \"ST\";\n    TargetAreaShorthand[\"Random\"] = \"RT\";\n})(TargetAreaShorthand || (TargetAreaShorthand = {}));\nexport var TargetType;\n(function (TargetType) {\n    TargetType[\"Self\"] = \"self\";\n    TargetType[\"Party\"] = \"party\";\n    TargetType[\"Enemy\"] = \"enemy\";\n})(TargetType || (TargetType = {}));\nexport var SpPassiveType;\n(function (SpPassiveType) {\n    SpPassiveType[\"AddPassive\"] = \"passive\";\n    SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n    SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n    SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n    SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n})(SpPassiveType || (SpPassiveType = {}));\nexport var SphereTypeName;\n(function (SphereTypeName) {\n    SphereTypeName[\"None\"] = \"None\";\n    SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n    SphereTypeName[\"Critical\"] = \"Critical\";\n    SphereTypeName[\"Drop\"] = \"Drop\";\n    SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n    SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n    SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n    SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n    SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n    SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n    SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n    SphereTypeName[\"Spark\"] = \"Spark\";\n    SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n    SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n    SphereTypeName[\"Special\"] = \"Special\";\n})(SphereTypeName || (SphereTypeName = {}));\nexport var SphereTypeId;\n(function (SphereTypeId) {\n    SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n    SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n    SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n    SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n    SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n    SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n    SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n    SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n    SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n    SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n    SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n    SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n    SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n    SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n    SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n})(SphereTypeId || (SphereTypeId = {}));\nexport var SpCategoryName;\n(function (SpCategoryName) {\n    SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n    SpCategoryName[\"Spark\"] = \"Spark\";\n    SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n    SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n    SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n    SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n    SpCategoryName[\"Drops\"] = \"Drops\";\n    SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n    SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n    SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n    SpCategoryName[\"Special\"] = \"Special\";\n    SpCategoryName[\"Unknown\"] = \"Unknown\";\n})(SpCategoryName || (SpCategoryName = {}));\nexport var SpCategoryId;\n(function (SpCategoryId) {\n    SpCategoryId[\"Parameter Boost\"] = \"1\";\n    SpCategoryId[\"Spark\"] = \"2\";\n    SpCategoryId[\"Critical Hits\"] = \"3\";\n    SpCategoryId[\"Attack Boost\"] = \"4\";\n    SpCategoryId[\"BB Gauge\"] = \"5\";\n    SpCategoryId[\"HP Recovery\"] = \"6\";\n    SpCategoryId[\"Drops\"] = \"7\";\n    SpCategoryId[\"Ailment Resistance\"] = \"8\";\n    SpCategoryId[\"Ailment Infliction\"] = \"9\";\n    SpCategoryId[\"Damage Reduction\"] = \"10\";\n    SpCategoryId[\"Special\"] = \"11\";\n})(SpCategoryId || (SpCategoryId = {}));\nexport var UnitAnimationKey;\n(function (UnitAnimationKey) {\n    UnitAnimationKey[\"Attack\"] = \"attack\";\n    UnitAnimationKey[\"Idle\"] = \"idle\";\n    UnitAnimationKey[\"Move\"] = \"move\";\n})(UnitAnimationKey || (UnitAnimationKey = {}));\nexport var UnitElement;\n(function (UnitElement) {\n    UnitElement[\"Fire\"] = \"fire\";\n    UnitElement[\"Water\"] = \"water\";\n    UnitElement[\"Earth\"] = \"earth\";\n    UnitElement[\"Thunder\"] = \"thunder\";\n    UnitElement[\"Light\"] = \"light\";\n    UnitElement[\"Dark\"] = \"dark\";\n})(UnitElement || (UnitElement = {}));\nexport var UnitGender;\n(function (UnitGender) {\n    UnitGender[\"Male\"] = \"male\";\n    UnitGender[\"Female\"] = \"female\";\n    UnitGender[\"Other\"] = \"other\";\n})(UnitGender || (UnitGender = {}));\nexport var UnitGettingType;\n(function (UnitGettingType) {\n    UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n    UnitGettingType[\"Farmable\"] = \"farmable\";\n    UnitGettingType[\"RareSummon\"] = \"rare summon\";\n    UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n})(UnitGettingType || (UnitGettingType = {}));\nexport var UnitKind;\n(function (UnitKind) {\n    UnitKind[\"Normal\"] = \"normal\";\n    UnitKind[\"Evolution\"] = \"evo\";\n    UnitKind[\"Enhancing\"] = \"enhancing\";\n    UnitKind[\"Sale\"] = \"sale\";\n})(UnitKind || (UnitKind = {}));\nexport var UnitType;\n(function (UnitType) {\n    UnitType[\"Lord\"] = \"lord\";\n    UnitType[\"Anima\"] = \"anima\";\n    UnitType[\"Breaker\"] = \"breaker\";\n    UnitType[\"Guardian\"] = \"guardian\";\n    UnitType[\"Oracle\"] = \"oracle\";\n    UnitType[\"Rex\"] = \"rex\";\n})(UnitType || (UnitType = {}));\nexport var ItemType;\n(function (ItemType) {\n    ItemType[\"Consumable\"] = \"consumable\";\n    ItemType[\"Material\"] = \"material\";\n    ItemType[\"Sphere\"] = \"sphere\";\n    ItemType[\"EvolutionMaterial\"] = \"evomat\";\n    ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n    ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n})(ItemType || (ItemType = {}));\nexport var MimicUnitIds;\n(function (MimicUnitIds) {\n    MimicUnitIds[\"Mimic\"] = \"60142\";\n    MimicUnitIds[\"BatMimic\"] = \"60143\";\n    MimicUnitIds[\"DragonMimic\"] = \"60144\";\n    MimicUnitIds[\"MetalMimic\"] = \"60224\";\n})(MimicUnitIds || (MimicUnitIds = {}));\n/**\n * @description Known values for the monster groups used in {@link IMimicInfo}.\n */\nexport const MimicMonsterGroupMapping = {\n    '1000': MimicUnitIds.Mimic,\n    '1100': MimicUnitIds.BatMimic,\n    '1101': MimicUnitIds.BatMimic,\n    '1200': MimicUnitIds.DragonMimic,\n    '1300': MimicUnitIds.MetalMimic,\n};\n","import { TargetArea, } from '../datamine-types';\n/**\n * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n */\nexport default function combineEffectsAndDamageFrames(effects, damageFrames) {\n    let combinedEntries = [];\n    if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n        combinedEntries = effects.map((effect, i) => {\n            const correspondingFrameEntry = damageFrames[i];\n            return {\n                delay: effect['effect delay time(ms)/frame'],\n                effect,\n                frames: correspondingFrameEntry,\n                id: `${effect['proc id'] || effect['unknown proc id']}`,\n                targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                targetType: effect['target type'],\n            };\n        });\n    }\n    return combinedEntries;\n}\n","import getEffectId from './getEffectId';\nimport isPassiveEffect from './isPassiveEffect';\nimport getNameForPassive from './getNameForPassive';\nimport isProcEffect from './isProcEffect';\nimport getNameForProc from './getNameForProc';\n/**\n * @description Get the name of a given object.\n * @param effect Object to get the name from.\n * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n * @returns Name of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectName(effect, metadata = {}) {\n    let resultName = '';\n    const effectId = getEffectId(effect);\n    if (isPassiveEffect(effect)) {\n        resultName = getNameForPassive(effectId, metadata && metadata.passive);\n    }\n    else if (isProcEffect(effect)) {\n        resultName = getNameForProc(effectId, metadata && metadata.proc);\n    }\n    return resultName;\n}\n","/**\n * @description Provides info at a glance regarding a buff's source and how it stacks.\n */\nexport var BuffStackType;\n(function (BuffStackType) {\n    /**\n     * @description The buff is activated via some skill and lasts for a number of turns.\n     * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n     * from different levels. Two possible levels of sources are:\n     * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n     * 2. Ultimate Brave Burst or Dual Brave Burst\n     */\n    BuffStackType[\"Active\"] = \"active\";\n    /**\n     * @description The buff is always active provided that the source is not nullified.\n     * Most passive buffs can stack with themselves.\n     */\n    BuffStackType[\"Passive\"] = \"passive\";\n    /**\n     * @description The buff is applied for a number of turns once a certain condition is met.\n     * Buffs of the same type are not able to stack.\n     */\n    BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n    /**\n     * @description Only one instance of the buff can be active at a time and can last indefinitely.\n     * A couple examples of this are Barrier and Max HP Boost.\n     */\n    BuffStackType[\"Singleton\"] = \"singleton\";\n    /**\n     * @description The buff's effects immediately apply to the target(s). This differs from singleton\n     * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n     * in the HP bar filling by the sum of those burst heals).\n     */\n    BuffStackType[\"Burst\"] = \"burst\";\n    /**\n     * @description A specific subset of `Burst` type buffs that deal damage to the target.\n     */\n    BuffStackType[\"Attack\"] = \"attack\";\n    /**\n     * @description Only for buffs that cannot be processed by the library yet.\n     */\n    BuffStackType[\"Unknown\"] = \"unknown\";\n})(BuffStackType || (BuffStackType = {}));\nexport var BuffSource;\n(function (BuffSource) {\n    BuffSource[\"BraveBurst\"] = \"bb\";\n    BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n    BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n    BuffSource[\"DualBraveBurst\"] = \"dbb\";\n    BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n    BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n    BuffSource[\"SpEnhancement\"] = \"sp\";\n    BuffSource[\"Item\"] = \"item\";\n    BuffSource[\"LeaderSkill\"] = \"ls\";\n    BuffSource[\"ExtraSkill\"] = \"es\";\n    /**\n     * @description Buffs that result of having a number of OE+ units in the squad.\n     */\n    BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n    /**\n     * @description Buffs based on a units type. See {@link UnitType}.\n     */\n    BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n    /**\n     * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n     * as well as ambient turn reductions present in some late-game quests.\n     */\n    BuffSource[\"Quest\"] = \"quest\";\n})(BuffSource || (BuffSource = {}));\n/**\n * @description Extra element values that can be used in addition to {@link UnitElement}.\n */\nexport var BuffConditionElement;\n(function (BuffConditionElement) {\n    BuffConditionElement[\"Unknown\"] = \"unknown\";\n    BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n    BuffConditionElement[\"All\"] = \"all\";\n})(BuffConditionElement || (BuffConditionElement = {}));\n/**\n * @description Stats on a unit that a buff can affect.\n */\nexport var UnitStat;\n(function (UnitStat) {\n    UnitStat[\"hp\"] = \"hp\";\n    UnitStat[\"atk\"] = \"atk\";\n    UnitStat[\"def\"] = \"def\";\n    UnitStat[\"rec\"] = \"rec\";\n    UnitStat[\"crit\"] = \"crit\";\n    UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n    UnitStat[\"bbGauge\"] = \"bbGauge\";\n    UnitStat[\"odGauge\"] = \"odGauge\";\n    UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n    UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n    UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n    UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n    UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n    UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n    UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n    UnitStat[\"bcCostReduction\"] = \"bcCostReduction\";\n    UnitStat[\"bbGaugeConsumptionReduction\"] = \"bbGaugeConsumptionReduction\";\n    UnitStat[\"ailmentAttackBoost\"] = \"ailmentAttackBoost\";\n    UnitStat[\"poisonResist\"] = \"poisonResist\";\n    UnitStat[\"weakResist\"] = \"weakResist\";\n    UnitStat[\"sickResist\"] = \"sickResist\";\n    UnitStat[\"injuryResist\"] = \"injuryResist\";\n    UnitStat[\"curseResist\"] = \"curseResist\";\n    UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n    UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n    UnitStat[\"weakInflict\"] = \"weakInflict\";\n    UnitStat[\"sickInflict\"] = \"sickInflict\";\n    UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n    UnitStat[\"curseInflict\"] = \"curseInflict\";\n    UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n    UnitStat[\"poisonCounter\"] = \"poisonCounter\";\n    UnitStat[\"weakCounter\"] = \"weakCounter\";\n    UnitStat[\"sickCounter\"] = \"sickCounter\";\n    UnitStat[\"injuryCounter\"] = \"injuryCounter\";\n    UnitStat[\"curseCounter\"] = \"curseCounter\";\n    UnitStat[\"paralysisCounter\"] = \"paralysisCounter\";\n    UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n    UnitStat[\"defDownResist\"] = \"defDownResist\";\n    UnitStat[\"recDownResist\"] = \"recDownResist\";\n    UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n    UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n    UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n    UnitStat[\"atkDownCounter\"] = \"atkDownCounter\";\n    UnitStat[\"defDownCounter\"] = \"defDownCounter\";\n    UnitStat[\"recDownCounter\"] = \"recDownCounter\";\n    UnitStat[\"mitigation\"] = \"mitigation\";\n    UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n    UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n    UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n    UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n    UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n    UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n    UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n    UnitStat[\"guardMitigation\"] = \"guardMitigation\";\n    UnitStat[\"barrier\"] = \"barrier\";\n    UnitStat[\"fireElementalDamage\"] = \"fireElementalDamage\";\n    UnitStat[\"waterElementalDamage\"] = \"waterElementalDamage\";\n    UnitStat[\"earthElementalDamage\"] = \"earthElementalDamage\";\n    UnitStat[\"thunderElementalDamage\"] = \"thunderElementalDamage\";\n    UnitStat[\"lightElementalDamage\"] = \"lightElementalDamage\";\n    UnitStat[\"darkElementalDamage\"] = \"darkElementalDamage\";\n    UnitStat[\"elementalWeaknessDamageMitigation\"] = \"elementalWeaknessDamageMitigation\";\n    UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n    UnitStat[\"koResistance\"] = \"koResistance\";\n    UnitStat[\"revive\"] = \"revive\";\n    UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n    UnitStat[\"defenseIgnoreMitigation\"] = \"defenseIgnoreMitigation\";\n    UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n    UnitStat[\"criticalDamageMitigation\"] = \"criticalDamageMitigation\";\n    UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n    UnitStat[\"sparkDamageMitigation\"] = \"sparkDamageMitigation\";\n    UnitStat[\"bbAtk\"] = \"bbAtk\";\n    UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n    UnitStat[\"damageReflect\"] = \"damageReflect\";\n    UnitStat[\"targetingModification\"] = \"targetingModification\";\n    UnitStat[\"elementModification\"] = \"elementModification\";\n    UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n    UnitStat[\"extraAction\"] = \"extraAction\";\n    UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n    UnitStat[\"effectOccurrenceShift\"] = \"effectOccurrenceShift\";\n    UnitStat[\"expModification\"] = \"expModification\";\n    UnitStat[\"shield\"] = \"shield\";\n    UnitStat[\"aoeNormalAttack\"] = \"aoeNormalAttack\";\n})(UnitStat || (UnitStat = {}));\nexport var IconId;\n(function (IconId) {\n    IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n    IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n    IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n    IconId[\"CONDITIONALBUFF_HPTHRESH\"] = \"CONDITIONALBUFF_HPTHRESH\";\n    IconId[\"CONDITIONALBUFF_DAMAGETAKENTHRESH\"] = \"CONDITIONALBUFF_DAMAGETAKENTHRESH\";\n    IconId[\"CONDITIONALBUFF_DAMAGEDEALTTHRESH\"] = \"CONDITIONALBUFF_DAMAGEDEALTTHRESH\";\n    IconId[\"CONDITIONALBUFF_BCRECEIVEDTHRESH\"] = \"CONDITIONALBUFF_BCRECEIVEDTHRESH\";\n    IconId[\"CONDITIONALBUFF_HCRECEIVEDTHRESH\"] = \"CONDITIONALBUFF_HCRECEIVEDTHRESH\";\n    IconId[\"CONDITIONALBUFF_SPARKCOUNTTHRESH\"] = \"CONDITIONALBUFF_SPARKCOUNTTHRESH\";\n    IconId[\"CONDITIONALBUFF_GUARD\"] = \"CONDITIONALBUFF_GUARD\";\n    IconId[\"CONDITIONALBUFF_CRIT\"] = \"CONDITIONALBUFF_CRIT\";\n    IconId[\"CONDITIONALBUFF_OD\"] = \"CONDITIONALBUFF_OD\";\n    IconId[\"BUFF_ADDTO_BB\"] = \"BUFF_ADDTO_BB\";\n    IconId[\"BUFF_ADDTO_SBB\"] = \"BUFF_ADDTO_SBB\";\n    IconId[\"BUFF_ADDTO_UBB\"] = \"BUFF_ADDTO_UBB\";\n    IconId[\"BUFF_ADDTO_LS\"] = \"BUFF_ADDTO_LS\";\n    IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n    IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n    IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n    IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n    IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n    IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n    IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n    IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n    IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n    IconId[\"BUFF_SELFHPUP\"] = \"BUFF_SELFHPUP\";\n    IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n    IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n    IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n    IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n    IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n    IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n    IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n    IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n    IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n    IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n    IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n    IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n    IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n    IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n    IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n    IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n    IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n    IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n    IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n    IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n    IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n    IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n    IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n    IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n    IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n    IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n    IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n    IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n    IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n    IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n    IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n    IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n    IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n    IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n    IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n    IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n    IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n    IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n    IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n    IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n    IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n    IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n    IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n    IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n    IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n    IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n    IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n    IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n    IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n    IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n    IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n    IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n    IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n    IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n    IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n    IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n    IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n    IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n    IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n    IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n    IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n    IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n    IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n    IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n    IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n    IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n    IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n    IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n    IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n    IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n    IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n    IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n    IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n    IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n    IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n    IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n    IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n    IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n    IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n    IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n    IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n    IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n    IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n    IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n    IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n    IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n    IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n    IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n    IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n    IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n    IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n    IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n    IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n    IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n    IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n    IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n    IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n    IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n    IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n    IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n    IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n    IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n    IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n    IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n    IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n    IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n    IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n    IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n    IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n    IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n    IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n    IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n    IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n    IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n    IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n    IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n    IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n    IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n    IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n    IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n    IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n    IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n    IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n    IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n    IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n    IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n    IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n    IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n    IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n    IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n    IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n    IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n    IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n    IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n    IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n    IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n    IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n    IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n    IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n    IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n    IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n    IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n    IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n    IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n    IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n    IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n    IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n    IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n    IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n    IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n    IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n    IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n    IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n    IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n    IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n    IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n    IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n    IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n    IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n    IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n    IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n    IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n    IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n    IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n    IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n    IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n    IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n    IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n    IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n    IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n    IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n    IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n    IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n    IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n    IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n    IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n    IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n    IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n    IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n    IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n    IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n    IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n    IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n    IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n    IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n    IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n    IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n    IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n    IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n    IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n    IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n    IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n    IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n    IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n    IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n    IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n    IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n    IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n    IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n    IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n    IconId[\"BUFF_SELFCONVERTATKUP\"] = \"BUFF_SELFCONVERTATKUP\";\n    IconId[\"BUFF_SELFCONVERTATKDOWN\"] = \"BUFF_SELFCONVERTATKDOWN\";\n    IconId[\"BUFF_SELFCONVERTDEFUP\"] = \"BUFF_SELFCONVERTDEFUP\";\n    IconId[\"BUFF_SELFCONVERTDEFDOWN\"] = \"BUFF_SELFCONVERTDEFDOWN\";\n    IconId[\"BUFF_SELFCONVERTRECUP\"] = \"BUFF_SELFCONVERTRECUP\";\n    IconId[\"BUFF_SELFCONVERTRECDOWN\"] = \"BUFF_SELFCONVERTRECDOWN\";\n    IconId[\"BUFF_HPSCALEDATKUP\"] = \"BUFF_HPSCALEDATKUP\";\n    IconId[\"BUFF_HPSCALEDATKDOWN\"] = \"BUFF_HPSCALEDATKDOWN\";\n    IconId[\"BUFF_HPSCALEDDEFUP\"] = \"BUFF_HPSCALEDDEFUP\";\n    IconId[\"BUFF_HPSCALEDDEFDOWN\"] = \"BUFF_HPSCALEDDEFDOWN\";\n    IconId[\"BUFF_HPSCALEDRECUP\"] = \"BUFF_HPSCALEDRECUP\";\n    IconId[\"BUFF_HPSCALEDRECDOWN\"] = \"BUFF_HPSCALEDRECDOWN\";\n    IconId[\"BUFF_TURNSCALEDATKUP\"] = \"BUFF_TURNSCALEDATKUP\";\n    IconId[\"BUFF_TURNSCALEDATKDOWN\"] = \"BUFF_TURNSCALEDATKDOWN\";\n    IconId[\"BUFF_TURNSCALEDDEFUP\"] = \"BUFF_TURNSCALEDDEFUP\";\n    IconId[\"BUFF_TURNSCALEDDEFDOWN\"] = \"BUFF_TURNSCALEDDEFDOWN\";\n    IconId[\"BUFF_TURNSCALEDRECUP\"] = \"BUFF_TURNSCALEDRECUP\";\n    IconId[\"BUFF_TURNSCALEDRECDOWN\"] = \"BUFF_TURNSCALEDRECDOWN\";\n    IconId[\"BUFF_SELFATKUP\"] = \"BUFF_SELFATKUP\";\n    IconId[\"BUFF_ATKDOWNLOCK\"] = \"BUFF_ATKDOWNLOCK\";\n    IconId[\"BUFF_SELFDEFUP\"] = \"BUFF_SELFDEFUP\";\n    IconId[\"BUFF_DEFDOWNLOCK\"] = \"BUFF_DEFDOWNLOCK\";\n    IconId[\"BUFF_SELFRECUP\"] = \"BUFF_SELFRECUP\";\n    IconId[\"BUFF_RECDOWNLOCK\"] = \"BUFF_RECDOWNLOCK\";\n    IconId[\"BUFF_SELFCRTRATEUP\"] = \"BUFF_SELFCRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWNLOCK\"] = \"BUFF_CRTRATEDOWNLOCK\";\n    IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n    IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n    IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n    IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n    IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n    IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n    IconId[\"BUFF_RESISTATKDOWN\"] = \"BUFF_RESISTATKDOWN\";\n    IconId[\"BUFF_RESISTDEFDOWN\"] = \"BUFF_RESISTDEFDOWN\";\n    IconId[\"BUFF_RESISTRECDOWN\"] = \"BUFF_RESISTRECDOWN\";\n    IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n    IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n    IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n    IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n    IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n    IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n    IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n    IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n    IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n    IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n    IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n    IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n    IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n    IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n    IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n    IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n    IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n    IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n    IconId[\"BUFF_POISONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n    IconId[\"BUFF_POISIONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n    IconId[\"BUFF_WEAKCOUNTER\"] = \"BUFF_WEAKCOUNTER\";\n    IconId[\"BUFF_SICKCOUNTER\"] = \"BUFF_SICKCOUNTER\";\n    IconId[\"BUFF_INJCONTER\"] = \"BUFF_INJCONTER\";\n    IconId[\"BUFF_CURSECOUNTER\"] = \"BUFF_CURSECOUNTER\";\n    IconId[\"BUFF_PARALYCOUNTER\"] = \"BUFF_PARALYCOUNTER\";\n    IconId[\"BUFF_PROB_ATKREDUC\"] = \"BUFF_PROB_ATKREDUC\";\n    IconId[\"BUFF_PROB_DEFREDUC\"] = \"BUFF_PROB_DEFREDUC\";\n    IconId[\"BUFF_PROB_RECREDUC\"] = \"BUFF_PROB_RECREDUC\";\n    IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n    IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n    // elemental damage reduction buffs\n    IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n    IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n    IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n    IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n    IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n    IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n    IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n    // elemental weakness buffs\n    IconId[\"BUFF_FIREDMGUP\"] = \"BUFF_FIREDMGUP\";\n    IconId[\"BUFF_WATERDMGUP\"] = \"BUFF_WATERDMGUP\";\n    IconId[\"BUFF_WATERMDGUP\"] = \"BUFF_WATERDMGUP\";\n    IconId[\"BUFF_EARTHDMGUP\"] = \"BUFF_EARTHDMGUP\";\n    IconId[\"BUFF_THUNDERDMGUP\"] = \"BUFF_THUNDERDMGUP\";\n    IconId[\"BUFF_LIGHTDMGUP\"] = \"BUFF_LIGHTDMGUP\";\n    IconId[\"BUFF_DARKDMGUP\"] = \"BUFF_DARKDMGUP\";\n    IconId[\"BUFF_ELEMENTDMGUP\"] = \"BUFF_ELEMENTDMGUP\";\n    IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n    IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n    IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n    IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n    IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n    IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n    IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n    IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n    IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n    IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n    IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n    IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n    IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n    IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n    IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n    IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n    IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n    IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n    IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n    IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n    IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n    IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n    IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n    IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n    IconId[\"BUFF_KO\"] = \"BUFF_KO\";\n    IconId[\"BUFF_KOBLOCK\"] = \"BUFF_KOBLOCK\";\n    IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n    IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n    IconId[\"BUFF_IGNOREDEFBLK\"] = \"BUFF_IGNOREDEFBLK\";\n    IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n    IconId[\"BUFF_CRTDOWN\"] = \"BUFF_CRTDOWN\";\n    IconId[\"BUFF_ELEMENTDOWN\"] = \"BUFF_ELEMENTDOWN\";\n    IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n    IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n    IconId[\"BUFF_SPARKDMGUP\"] = \"BUFF_SPARKDMGUP\";\n    IconId[\"BUFF_SPARKDMGDOWN\"] = \"BUFF_SPARKDMGDOWN\";\n    IconId[\"BUFF_SPARKDMGUP2\"] = \"BUFF_SPARKDMGUP2\";\n    IconId[\"BUFF_SPARKDMGDOWN2\"] = \"BUFF_SPARKDMGDOWN2\";\n    IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n    IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n    IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n    IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n    IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n    IconId[\"BUFF_SPARKBBUP\"] = \"BUFF_SPARKBBUP\";\n    IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n    IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n    IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n    IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n    IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n    IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n    IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n    IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n    IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n    IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n    IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n    IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n    IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n    IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n    IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n    IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n    IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n    IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n    IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n    IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n    IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n    IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n    IconId[\"BUFF_NULLSPHERE\"] = \"BUFF_NULLSPHERE\";\n    IconId[\"BUFF_NULLES\"] = \"BUFF_NULLES\";\n    IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n    IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n    IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n    IconId[\"BUFF_ODFILLBOOST\"] = \"BUFF_ODFILLBOOST\";\n    IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n    IconId[\"BUFF_BBATKUP\"] = \"BUFF_BBATKUP\";\n    IconId[\"BUFF_SBBATKUP\"] = \"BUFF_SBBATKUP\";\n    IconId[\"BUFF_UBBATKUP\"] = \"BUFF_UBBATKUP\";\n    IconId[\"BUFF_BBATKDOWN\"] = \"BUFF_BBATKDOWN\";\n    IconId[\"BUFF_SBBATKDOWN\"] = \"BUFF_SBBATKDOWN\";\n    IconId[\"BUFF_UBBATKDOWN\"] = \"BUFF_UBBATKDOWN\";\n    IconId[\"BUFF_BBCOST_REDUCTION\"] = \"BUFF_BBCOST_REDUCTION\";\n    IconId[\"BUFF_GUARDCUT\"] = \"BUFF_GUARDCUT\";\n    IconId[\"BUFF_GUARDBBUP\"] = \"BUFF_GUARDBBUP\";\n    IconId[\"BUFF_FIRESHIELD\"] = \"BUFF_FIRESHIELD\";\n    IconId[\"BUFF_WATERSHIELD\"] = \"BUFF_WATERSHIELD\";\n    IconId[\"BUFF_EARTHSHIELD\"] = \"BUFF_EARTHSHIELD\";\n    IconId[\"BUFF_THUNDERSHIELD\"] = \"BUFF_THUNDERSHIELD\";\n    IconId[\"BUFF_LIGHTSHIELD\"] = \"BUFF_LIGHTSHIELD\";\n    IconId[\"BUFF_DARKSHIELD\"] = \"BUFF_DARKSHIELD\";\n    IconId[\"BUFF_ELEMENTSHIELD\"] = \"BUFF_ELEMENTSHIELD\";\n    IconId[\"BUFF_AILDMGUP\"] = \"BUFF_AILDMGUP\";\n    IconId[\"BUFF_HPTURNSTART\"] = \"BUFF_HPTURNSTART\";\n    IconId[\"BUFF_BCTURNSTART\"] = \"BUFF_BCTURNSTART\";\n    IconId[\"BUFF_PLAYEREXP\"] = \"BUFF_PLAYEREXP\";\n    IconId[\"BUFF_SPARKCRTACTIVATED\"] = \"BUFF_SPARKCRTACTIVATED\";\n    IconId[\"BUFF_SPARK_HPREC\"] = \"BUFF_SPARK_HPREC\";\n    IconId[\"BUFF_AOEATK\"] = \"BUFF_AOEATK\";\n    IconId[\"SG_BUFF_ALL\"] = \"SG_BUFF_ALL\";\n    IconId[\"SG_BUFF_FIRE\"] = \"SG_BUFF_FIRE\";\n    IconId[\"SG_BUFF_WATER\"] = \"SG_BUFF_WATER\";\n    IconId[\"SG_BUFF_EARTH\"] = \"SG_BUFF_EARTH\";\n    IconId[\"SG_BUFF_THUNDER\"] = \"SG_BUFF_THUNDER\";\n    IconId[\"SG_BUFF_LIGHT\"] = \"SG_BUFF_LIGHT\";\n    IconId[\"SG_BUFF_DARK\"] = \"SG_BUFF_DARK\";\n    IconId[\"SG_BUFF_UNKNOWN\"] = \"SG_BUFF_UNKNOWN\";\n    IconId[\"SG_BUFF_STEALTH\"] = \"SG_BUFF_STEALTH\";\n    IconId[\"ATK_ST\"] = \"ATK_ST\";\n    IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n    IconId[\"ATK_RT\"] = \"ATK_RT\";\n    IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n    IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n    IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n    IconId[\"ATK_ST_PIERCING_PROPORTIONAL\"] = \"ATK_ST_PIERCING_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PIERCING_PROPORTIONAL\"] = \"ATK_AOE_PIERCING_PROPORTIONAL\";\n    IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n    IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n    IconId[\"ATK_ST_PIERCING_FIXED\"] = \"ATK_ST_PIERCING_FIXED\";\n    IconId[\"ATK_AOE_PIERCING_FIXED\"] = \"ATK_AOE_PIERCING_FIXED\";\n    IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n    IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n    IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n    IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n    IconId[\"ATK_ST_HPSCALED\"] = \"ATK_ST_HPSCALED\";\n    IconId[\"ATK_AOE_HPSCALED\"] = \"ATK_AOE_HPSCALED\";\n    IconId[\"ATK_ST_BBGAUGESCALED\"] = \"ATK_ST_BBGAUGESCALED\";\n    IconId[\"ATK_AOE_BBGAUGESCALED\"] = \"ATK_AOE_BBGAUGESCALED\";\n    IconId[\"ATK_ST_USAGESCALED\"] = \"ATK_ST_USAGESCALED\";\n    IconId[\"ATK_AOE_USAGESCALED\"] = \"ATK_AOE_USAGESCALED\";\n    IconId[\"ATK_ST_ELEMENTSCALED\"] = \"ATK_ST_ELEMENTSCALED\";\n    IconId[\"ATK_AOE_ELEMENTSCALED\"] = \"ATK_AOE_ELEMENTSCALED\";\n})(IconId || (IconId = {}));\n/**\n * @description Format of these IDs are `<passive|proc|conditional>:<original effect ID>:<stat>`.\n * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n * source of a given buff.\n */\nexport var BuffId;\n(function (BuffId) {\n    BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n    BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n    BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n    BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n    BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n    BuffId[\"passive:1:def\"] = \"passive:1:def\";\n    BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n    BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n    BuffId[\"passive:2:elemental-hp\"] = \"passive:2:elemental-hp\";\n    BuffId[\"passive:2:elemental-atk\"] = \"passive:2:elemental-atk\";\n    BuffId[\"passive:2:elemental-def\"] = \"passive:2:elemental-def\";\n    BuffId[\"passive:2:elemental-rec\"] = \"passive:2:elemental-rec\";\n    BuffId[\"passive:2:elemental-crit\"] = \"passive:2:elemental-crit\";\n    BuffId[\"passive:3:type based-hp\"] = \"passive:3:type based-hp\";\n    BuffId[\"passive:3:type based-atk\"] = \"passive:3:type based-atk\";\n    BuffId[\"passive:3:type based-def\"] = \"passive:3:type based-def\";\n    BuffId[\"passive:3:type based-rec\"] = \"passive:3:type based-rec\";\n    BuffId[\"passive:3:type based-crit\"] = \"passive:3:type based-crit\";\n    BuffId[\"passive:4:resist-poison\"] = \"passive:4:resist-poison\";\n    BuffId[\"passive:4:resist-weak\"] = \"passive:4:resist-weak\";\n    BuffId[\"passive:4:resist-sick\"] = \"passive:4:resist-sick\";\n    BuffId[\"passive:4:resist-injury\"] = \"passive:4:resist-injury\";\n    BuffId[\"passive:4:resist-curse\"] = \"passive:4:resist-curse\";\n    BuffId[\"passive:4:resist-paralysis\"] = \"passive:4:resist-paralysis\";\n    BuffId[\"passive:5:mitigate-fire\"] = \"passive:5:mitigate-fire\";\n    BuffId[\"passive:5:mitigate-water\"] = \"passive:5:mitigate-water\";\n    BuffId[\"passive:5:mitigate-earth\"] = \"passive:5:mitigate-earth\";\n    BuffId[\"passive:5:mitigate-thunder\"] = \"passive:5:mitigate-thunder\";\n    BuffId[\"passive:5:mitigate-light\"] = \"passive:5:mitigate-light\";\n    BuffId[\"passive:5:mitigate-dark\"] = \"passive:5:mitigate-dark\";\n    BuffId[\"passive:5:mitigate-unknown\"] = \"passive:5:mitigate-unknown\";\n    BuffId[\"passive:8:mitigation\"] = \"passive:8:mitigation\";\n    BuffId[\"passive:9:gradual bc fill\"] = \"passive:9:gradual bc fill\";\n    BuffId[\"passive:10:hc efficacy\"] = \"passive:10:hc efficacy\";\n    BuffId[\"passive:11:hp conditional-atk\"] = \"passive:11:hp conditional-atk\";\n    BuffId[\"passive:11:hp conditional-def\"] = \"passive:11:hp conditional-def\";\n    BuffId[\"passive:11:hp conditional-rec\"] = \"passive:11:hp conditional-rec\";\n    BuffId[\"passive:11:hp conditional-crit\"] = \"passive:11:hp conditional-crit\";\n    BuffId[\"passive:12:hp conditional drop boost-bc\"] = \"passive:12:hp conditional drop boost-bc\";\n    BuffId[\"passive:12:hp conditional drop boost-hc\"] = \"passive:12:hp conditional drop boost-hc\";\n    BuffId[\"passive:12:hp conditional drop boost-item\"] = \"passive:12:hp conditional drop boost-item\";\n    BuffId[\"passive:12:hp conditional drop boost-zel\"] = \"passive:12:hp conditional drop boost-zel\";\n    BuffId[\"passive:12:hp conditional drop boost-karma\"] = \"passive:12:hp conditional drop boost-karma\";\n    BuffId[\"passive:13:bc fill on enemy defeat\"] = \"passive:13:bc fill on enemy defeat\";\n    BuffId[\"passive:14:chance mitigation\"] = \"passive:14:chance mitigation\";\n    BuffId[\"passive:15:heal on enemy defeat\"] = \"passive:15:heal on enemy defeat\";\n    BuffId[\"passive:16:heal on win\"] = \"passive:16:heal on win\";\n    BuffId[\"passive:17:hp absorb\"] = \"passive:17:hp absorb\";\n    BuffId[\"passive:19:drop boost-bc\"] = \"passive:19:drop boost-bc\";\n    BuffId[\"passive:19:drop boost-hc\"] = \"passive:19:drop boost-hc\";\n    BuffId[\"passive:19:drop boost-item\"] = \"passive:19:drop boost-item\";\n    BuffId[\"passive:19:drop boost-zel\"] = \"passive:19:drop boost-zel\";\n    BuffId[\"passive:19:drop boost-karma\"] = \"passive:19:drop boost-karma\";\n    BuffId[\"passive:20:chance inflict-poison\"] = \"passive:20:chance inflict-poison\";\n    BuffId[\"passive:20:chance inflict-weak\"] = \"passive:20:chance inflict-weak\";\n    BuffId[\"passive:20:chance inflict-sick\"] = \"passive:20:chance inflict-sick\";\n    BuffId[\"passive:20:chance inflict-injury\"] = \"passive:20:chance inflict-injury\";\n    BuffId[\"passive:20:chance inflict-curse\"] = \"passive:20:chance inflict-curse\";\n    BuffId[\"passive:20:chance inflict-paralysis\"] = \"passive:20:chance inflict-paralysis\";\n    BuffId[\"passive:20:chance inflict-atk down\"] = \"passive:20:chance inflict-atk down\";\n    BuffId[\"passive:20:chance inflict-def down\"] = \"passive:20:chance inflict-def down\";\n    BuffId[\"passive:20:chance inflict-rec down\"] = \"passive:20:chance inflict-rec down\";\n    BuffId[\"passive:20:chance inflict-unknown\"] = \"passive:20:chance inflict-unknown\";\n    BuffId[\"passive:21:first turn-atk\"] = \"passive:21:first turn-atk\";\n    BuffId[\"passive:21:first turn-def\"] = \"passive:21:first turn-def\";\n    BuffId[\"passive:21:first turn-rec\"] = \"passive:21:first turn-rec\";\n    BuffId[\"passive:21:first turn-crit\"] = \"passive:21:first turn-crit\";\n    BuffId[\"passive:23:bc fill on win\"] = \"passive:23:bc fill on win\";\n    BuffId[\"passive:24:heal on hit\"] = \"passive:24:heal on hit\";\n    BuffId[\"passive:25:bc fill on hit\"] = \"passive:25:bc fill on hit\";\n    BuffId[\"passive:26:chance damage reflect\"] = \"passive:26:chance damage reflect\";\n    BuffId[\"passive:27:target chance change\"] = \"passive:27:target chance change\";\n    BuffId[\"passive:28:hp conditional target chance change\"] = \"passive:28:hp conditional target chance change\";\n    BuffId[\"passive:29:chance def ignore\"] = \"passive:29:chance def ignore\";\n    BuffId[\"passive:30:bb gauge conditional-atk\"] = \"passive:30:bb gauge conditional-atk\";\n    BuffId[\"passive:30:bb gauge conditional-def\"] = \"passive:30:bb gauge conditional-def\";\n    BuffId[\"passive:30:bb gauge conditional-rec\"] = \"passive:30:bb gauge conditional-rec\";\n    BuffId[\"passive:30:bb gauge conditional-crit\"] = \"passive:30:bb gauge conditional-crit\";\n    BuffId[\"passive:31:spark-damage\"] = \"passive:31:spark-damage\";\n    BuffId[\"passive:31:spark-bc\"] = \"passive:31:spark-bc\";\n    BuffId[\"passive:31:spark-hc\"] = \"passive:31:spark-hc\";\n    BuffId[\"passive:31:spark-item\"] = \"passive:31:spark-item\";\n    BuffId[\"passive:31:spark-zel\"] = \"passive:31:spark-zel\";\n    BuffId[\"passive:31:spark-karma\"] = \"passive:31:spark-karma\";\n    BuffId[\"passive:32:bc efficacy\"] = \"passive:32:bc efficacy\";\n    BuffId[\"passive:33:gradual heal\"] = \"passive:33:gradual heal\";\n    BuffId[\"passive:34:critical damage\"] = \"passive:34:critical damage\";\n    BuffId[\"passive:35:bc fill on normal attack\"] = \"passive:35:bc fill on normal attack\";\n    BuffId[\"passive:36:extra action\"] = \"passive:36:extra action\";\n    BuffId[\"passive:37:hit count boost\"] = \"passive:37:hit count boost\";\n    BuffId[\"passive:40:converted-atk\"] = \"passive:40:converted-atk\";\n    BuffId[\"passive:40:converted-def\"] = \"passive:40:converted-def\";\n    BuffId[\"passive:40:converted-rec\"] = \"passive:40:converted-rec\";\n    BuffId[\"passive:41:unique element count-hp\"] = \"passive:41:unique element count-hp\";\n    BuffId[\"passive:41:unique element count-atk\"] = \"passive:41:unique element count-atk\";\n    BuffId[\"passive:41:unique element count-def\"] = \"passive:41:unique element count-def\";\n    BuffId[\"passive:41:unique element count-rec\"] = \"passive:41:unique element count-rec\";\n    BuffId[\"passive:41:unique element count-crit\"] = \"passive:41:unique element count-crit\";\n    BuffId[\"passive:42:gender-hp\"] = \"passive:42:gender-hp\";\n    BuffId[\"passive:42:gender-atk\"] = \"passive:42:gender-atk\";\n    BuffId[\"passive:42:gender-def\"] = \"passive:42:gender-def\";\n    BuffId[\"passive:42:gender-rec\"] = \"passive:42:gender-rec\";\n    BuffId[\"passive:42:gender-crit\"] = \"passive:42:gender-crit\";\n    BuffId[\"passive:43:chance damage to one\"] = \"passive:43:chance damage to one\";\n    BuffId[\"passive:44:flat-hp\"] = \"passive:44:flat-hp\";\n    BuffId[\"passive:44:flat-atk\"] = \"passive:44:flat-atk\";\n    BuffId[\"passive:44:flat-def\"] = \"passive:44:flat-def\";\n    BuffId[\"passive:44:flat-rec\"] = \"passive:44:flat-rec\";\n    BuffId[\"passive:44:flat-crit\"] = \"passive:44:flat-crit\";\n    BuffId[\"passive:45:critical damage reduction-base\"] = \"passive:45:critical damage reduction-base\";\n    BuffId[\"passive:45:critical damage reduction-buff\"] = \"passive:45:critical damage reduction-buff\";\n    BuffId[\"passive:46:hp scaled-atk\"] = \"passive:46:hp scaled-atk\";\n    BuffId[\"passive:46:hp scaled-def\"] = \"passive:46:hp scaled-def\";\n    BuffId[\"passive:46:hp scaled-rec\"] = \"passive:46:hp scaled-rec\";\n    BuffId[\"passive:47:bc fill on spark\"] = \"passive:47:bc fill on spark\";\n    BuffId[\"passive:48:bc cost reduction\"] = \"passive:48:bc cost reduction\";\n    BuffId[\"passive:49:bb gauge consumption reduction\"] = \"passive:49:bb gauge consumption reduction\";\n    BuffId[\"passive:50:elemental weakness damage-fire\"] = \"passive:50:elemental weakness damage-fire\";\n    BuffId[\"passive:50:elemental weakness damage-water\"] = \"passive:50:elemental weakness damage-water\";\n    BuffId[\"passive:50:elemental weakness damage-earth\"] = \"passive:50:elemental weakness damage-earth\";\n    BuffId[\"passive:50:elemental weakness damage-thunder\"] = \"passive:50:elemental weakness damage-thunder\";\n    BuffId[\"passive:50:elemental weakness damage-light\"] = \"passive:50:elemental weakness damage-light\";\n    BuffId[\"passive:50:elemental weakness damage-dark\"] = \"passive:50:elemental weakness damage-dark\";\n    BuffId[\"passive:50:elemental weakness damage-unknown\"] = \"passive:50:elemental weakness damage-unknown\";\n    BuffId[\"passive:53:critical damage-base\"] = \"passive:53:critical damage-base\";\n    BuffId[\"passive:53:critical damage-buff\"] = \"passive:53:critical damage-buff\";\n    BuffId[\"passive:53:element damage-base\"] = \"passive:53:element damage-base\";\n    BuffId[\"passive:53:element damage-buff\"] = \"passive:53:element damage-buff\";\n    BuffId[\"passive:53:critical rate-base\"] = \"passive:53:critical rate-base\";\n    BuffId[\"passive:53:critical rate-buff\"] = \"passive:53:critical rate-buff\";\n    BuffId[\"passive:55:hp conditional\"] = \"passive:55:hp conditional\";\n    BuffId[\"passive:58:guard mitigation\"] = \"passive:58:guard mitigation\";\n    BuffId[\"passive:59:bc fill when attacked on guard-percent\"] = \"passive:59:bc fill when attacked on guard-percent\";\n    BuffId[\"passive:59:bc fill when attacked on guard-flat\"] = \"passive:59:bc fill when attacked on guard-flat\";\n    BuffId[\"passive:61:bc fill on guard-percent\"] = \"passive:61:bc fill on guard-percent\";\n    BuffId[\"passive:61:bc fill on guard-flat\"] = \"passive:61:bc fill on guard-flat\";\n    BuffId[\"passive:62:mitigate-fire\"] = \"passive:62:mitigate-fire\";\n    BuffId[\"passive:62:mitigate-water\"] = \"passive:62:mitigate-water\";\n    BuffId[\"passive:62:mitigate-earth\"] = \"passive:62:mitigate-earth\";\n    BuffId[\"passive:62:mitigate-thunder\"] = \"passive:62:mitigate-thunder\";\n    BuffId[\"passive:62:mitigate-light\"] = \"passive:62:mitigate-light\";\n    BuffId[\"passive:62:mitigate-dark\"] = \"passive:62:mitigate-dark\";\n    BuffId[\"passive:62:mitigate-unknown\"] = \"passive:62:mitigate-unknown\";\n    BuffId[\"passive:63:first turn mitigate-fire\"] = \"passive:63:first turn mitigate-fire\";\n    BuffId[\"passive:63:first turn mitigate-water\"] = \"passive:63:first turn mitigate-water\";\n    BuffId[\"passive:63:first turn mitigate-earth\"] = \"passive:63:first turn mitigate-earth\";\n    BuffId[\"passive:63:first turn mitigate-thunder\"] = \"passive:63:first turn mitigate-thunder\";\n    BuffId[\"passive:63:first turn mitigate-light\"] = \"passive:63:first turn mitigate-light\";\n    BuffId[\"passive:63:first turn mitigate-dark\"] = \"passive:63:first turn mitigate-dark\";\n    BuffId[\"passive:63:first turn mitigate-unknown\"] = \"passive:63:first turn mitigate-unknown\";\n    BuffId[\"passive:64:attack boost-bb\"] = \"passive:64:attack boost-bb\";\n    BuffId[\"passive:64:attack boost-sbb\"] = \"passive:64:attack boost-sbb\";\n    BuffId[\"passive:64:attack boost-ubb\"] = \"passive:64:attack boost-ubb\";\n    BuffId[\"passive:65:bc fill on crit\"] = \"passive:65:bc fill on crit\";\n    BuffId[\"passive:66:add effect to skill-bb\"] = \"passive:66:add effect to skill-bb\";\n    BuffId[\"passive:66:add effect to skill-sbb\"] = \"passive:66:add effect to skill-sbb\";\n    BuffId[\"passive:66:add effect to skill-ubb\"] = \"passive:66:add effect to skill-ubb\";\n    BuffId[\"passive:69:chance ko resistance\"] = \"passive:69:chance ko resistance\";\n    BuffId[\"passive:70:od fill rate\"] = \"passive:70:od fill rate\";\n    BuffId[\"passive:71:inflict on hit-poison\"] = \"passive:71:inflict on hit-poison\";\n    BuffId[\"passive:71:inflict on hit-weak\"] = \"passive:71:inflict on hit-weak\";\n    BuffId[\"passive:71:inflict on hit-sick\"] = \"passive:71:inflict on hit-sick\";\n    BuffId[\"passive:71:inflict on hit-injury\"] = \"passive:71:inflict on hit-injury\";\n    BuffId[\"passive:71:inflict on hit-curse\"] = \"passive:71:inflict on hit-curse\";\n    BuffId[\"passive:71:inflict on hit-paralysis\"] = \"passive:71:inflict on hit-paralysis\";\n    BuffId[\"passive:72:effect at turn start-hp\"] = \"passive:72:effect at turn start-hp\";\n    BuffId[\"passive:72:effect at turn start-bc\"] = \"passive:72:effect at turn start-bc\";\n    BuffId[\"passive:73:resist-poison\"] = \"passive:73:resist-poison\";\n    BuffId[\"passive:73:resist-weak\"] = \"passive:73:resist-weak\";\n    BuffId[\"passive:73:resist-sick\"] = \"passive:73:resist-sick\";\n    BuffId[\"passive:73:resist-injury\"] = \"passive:73:resist-injury\";\n    BuffId[\"passive:73:resist-curse\"] = \"passive:73:resist-curse\";\n    BuffId[\"passive:73:resist-paralysis\"] = \"passive:73:resist-paralysis\";\n    BuffId[\"passive:73:resist-atk down\"] = \"passive:73:resist-atk down\";\n    BuffId[\"passive:73:resist-def down\"] = \"passive:73:resist-def down\";\n    BuffId[\"passive:73:resist-rec down\"] = \"passive:73:resist-rec down\";\n    BuffId[\"passive:74:ailment attack boost\"] = \"passive:74:ailment attack boost\";\n    BuffId[\"passive:75:spark vulnerability\"] = \"passive:75:spark vulnerability\";\n    BuffId[\"passive:77:spark damage reduction-base\"] = \"passive:77:spark damage reduction-base\";\n    BuffId[\"passive:77:spark damage reduction-buff\"] = \"passive:77:spark damage reduction-buff\";\n    BuffId[\"passive:78:damage taken conditional\"] = \"passive:78:damage taken conditional\";\n    BuffId[\"passive:79:bc fill after damage taken conditional-flat\"] = \"passive:79:bc fill after damage taken conditional-flat\";\n    BuffId[\"passive:79:bc fill after damage taken conditional-percent\"] = \"passive:79:bc fill after damage taken conditional-percent\";\n    BuffId[\"passive:80:damage dealt conditional\"] = \"passive:80:damage dealt conditional\";\n    BuffId[\"passive:81:bc fill after damage dealt conditional-flat\"] = \"passive:81:bc fill after damage dealt conditional-flat\";\n    BuffId[\"passive:81:bc fill after damage dealt conditional-percent\"] = \"passive:81:bc fill after damage dealt conditional-percent\";\n    BuffId[\"passive:82:bc received conditional\"] = \"passive:82:bc received conditional\";\n    BuffId[\"passive:83:bc fill after bc received conditional-flat\"] = \"passive:83:bc fill after bc received conditional-flat\";\n    BuffId[\"passive:83:bc fill after bc received conditional-percent\"] = \"passive:83:bc fill after bc received conditional-percent\";\n    BuffId[\"passive:84:hc received conditional\"] = \"passive:84:hc received conditional\";\n    BuffId[\"passive:85:bc fill after hc received conditional-flat\"] = \"passive:85:bc fill after hc received conditional-flat\";\n    BuffId[\"passive:85:bc fill after hc received conditional-percent\"] = \"passive:85:bc fill after hc received conditional-percent\";\n    BuffId[\"passive:86:spark count conditional\"] = \"passive:86:spark count conditional\";\n    BuffId[\"passive:87:bc fill after spark count conditional-flat\"] = \"passive:87:bc fill after spark count conditional-flat\";\n    BuffId[\"passive:87:bc fill after spark count conditional-percent\"] = \"passive:87:bc fill after spark count conditional-percent\";\n    BuffId[\"passive:88:on guard conditional\"] = \"passive:88:on guard conditional\";\n    BuffId[\"passive:89:on critical hit conditional\"] = \"passive:89:on critical hit conditional\";\n    BuffId[\"passive:90:inflict on crit-poison\"] = \"passive:90:inflict on crit-poison\";\n    BuffId[\"passive:90:inflict on crit-weak\"] = \"passive:90:inflict on crit-weak\";\n    BuffId[\"passive:90:inflict on crit-sick\"] = \"passive:90:inflict on crit-sick\";\n    BuffId[\"passive:90:inflict on crit-injury\"] = \"passive:90:inflict on crit-injury\";\n    BuffId[\"passive:90:inflict on crit-curse\"] = \"passive:90:inflict on crit-curse\";\n    BuffId[\"passive:90:inflict on crit-paralysis\"] = \"passive:90:inflict on crit-paralysis\";\n    BuffId[\"passive:91:first turn spark\"] = \"passive:91:first turn spark\";\n    BuffId[\"passive:92:negate defense ignore\"] = \"passive:92:negate defense ignore\";\n    BuffId[\"passive:93:add element-fire\"] = \"passive:93:add element-fire\";\n    BuffId[\"passive:93:add element-water\"] = \"passive:93:add element-water\";\n    BuffId[\"passive:93:add element-earth\"] = \"passive:93:add element-earth\";\n    BuffId[\"passive:93:add element-thunder\"] = \"passive:93:add element-thunder\";\n    BuffId[\"passive:93:add element-light\"] = \"passive:93:add element-light\";\n    BuffId[\"passive:93:add element-dark\"] = \"passive:93:add element-dark\";\n    BuffId[\"passive:93:add element-unknown\"] = \"passive:93:add element-unknown\";\n    BuffId[\"passive:96:aoe normal attack\"] = \"passive:96:aoe normal attack\";\n    BuffId[\"passive:97:player exp boost\"] = \"passive:97:player exp boost\";\n    BuffId[\"passive:100:spark critical\"] = \"passive:100:spark critical\";\n    BuffId[\"passive:101:heal on spark\"] = \"passive:101:heal on spark\";\n    BuffId[\"passive:102:add element-fire\"] = \"passive:102:add element-fire\";\n    BuffId[\"passive:102:add element-water\"] = \"passive:102:add element-water\";\n    BuffId[\"passive:102:add element-earth\"] = \"passive:102:add element-earth\";\n    BuffId[\"passive:102:add element-thunder\"] = \"passive:102:add element-thunder\";\n    BuffId[\"passive:102:add element-light\"] = \"passive:102:add element-light\";\n    BuffId[\"passive:102:add element-dark\"] = \"passive:102:add element-dark\";\n    BuffId[\"passive:102:add element-unknown\"] = \"passive:102:add element-unknown\";\n    BuffId[\"passive:103:hp conditional attack boost-bb\"] = \"passive:103:hp conditional attack boost-bb\";\n    BuffId[\"passive:103:hp conditional attack boost-sbb\"] = \"passive:103:hp conditional attack boost-sbb\";\n    BuffId[\"passive:103:hp conditional attack boost-ubb\"] = \"passive:103:hp conditional attack boost-ubb\";\n    BuffId[\"passive:104:hp conditional spark-damage\"] = \"passive:104:hp conditional spark-damage\";\n    BuffId[\"passive:104:hp conditional spark-bc\"] = \"passive:104:hp conditional spark-bc\";\n    BuffId[\"passive:104:hp conditional spark-hc\"] = \"passive:104:hp conditional spark-hc\";\n    BuffId[\"passive:104:hp conditional spark-item\"] = \"passive:104:hp conditional spark-item\";\n    BuffId[\"passive:104:hp conditional spark-zel\"] = \"passive:104:hp conditional spark-zel\";\n    BuffId[\"passive:104:hp conditional spark-karma\"] = \"passive:104:hp conditional spark-karma\";\n    BuffId[\"passive:105:turn scaled-atk\"] = \"passive:105:turn scaled-atk\";\n    BuffId[\"passive:105:turn scaled-def\"] = \"passive:105:turn scaled-def\";\n    BuffId[\"passive:105:turn scaled-rec\"] = \"passive:105:turn scaled-rec\";\n    BuffId[\"passive:106:on overdrive conditional\"] = \"passive:106:on overdrive conditional\";\n    BuffId[\"passive:107:add effect to leader skill\"] = \"passive:107:add effect to leader skill\";\n    BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n    BuffId[\"proc:1:attack\"] = \"proc:1:attack\";\n    BuffId[\"proc:2:burst heal\"] = \"proc:2:burst heal\";\n    BuffId[\"proc:3:gradual heal\"] = \"proc:3:gradual heal\";\n    BuffId[\"proc:4:bc fill-flat\"] = \"proc:4:bc fill-flat\";\n    BuffId[\"proc:4:bc fill-percent\"] = \"proc:4:bc fill-percent\";\n    BuffId[\"proc:5:regular or elemental-atk\"] = \"proc:5:regular or elemental-atk\";\n    BuffId[\"proc:5:regular or elemental-def\"] = \"proc:5:regular or elemental-def\";\n    BuffId[\"proc:5:regular or elemental-rec\"] = \"proc:5:regular or elemental-rec\";\n    BuffId[\"proc:5:regular or elemental-crit\"] = \"proc:5:regular or elemental-crit\";\n    BuffId[\"proc:6:drop boost-bc\"] = \"proc:6:drop boost-bc\";\n    BuffId[\"proc:6:drop boost-hc\"] = \"proc:6:drop boost-hc\";\n    BuffId[\"proc:6:drop boost-item\"] = \"proc:6:drop boost-item\";\n    BuffId[\"proc:7:guaranteed ko resistance\"] = \"proc:7:guaranteed ko resistance\";\n    BuffId[\"proc:8:max hp boost-flat\"] = \"proc:8:max hp boost-flat\";\n    BuffId[\"proc:8:max hp boost-percent\"] = \"proc:8:max hp boost-percent\";\n    BuffId[\"proc:9:regular or elemental reduction-atk\"] = \"proc:9:regular or elemental reduction-atk\";\n    BuffId[\"proc:9:regular or elemental reduction-def\"] = \"proc:9:regular or elemental reduction-def\";\n    BuffId[\"proc:9:regular or elemental reduction-rec\"] = \"proc:9:regular or elemental reduction-rec\";\n    BuffId[\"proc:9:regular or elemental reduction-unknown\"] = \"proc:9:regular or elemental reduction-unknown\";\n    BuffId[\"proc:10:cleanse-poison\"] = \"proc:10:cleanse-poison\";\n    BuffId[\"proc:10:cleanse-weak\"] = \"proc:10:cleanse-weak\";\n    BuffId[\"proc:10:cleanse-sick\"] = \"proc:10:cleanse-sick\";\n    BuffId[\"proc:10:cleanse-injury\"] = \"proc:10:cleanse-injury\";\n    BuffId[\"proc:10:cleanse-curse\"] = \"proc:10:cleanse-curse\";\n    BuffId[\"proc:10:cleanse-paralysis\"] = \"proc:10:cleanse-paralysis\";\n    BuffId[\"proc:10:cleanse-atk down\"] = \"proc:10:cleanse-atk down\";\n    BuffId[\"proc:10:cleanse-def down\"] = \"proc:10:cleanse-def down\";\n    BuffId[\"proc:10:cleanse-rec down\"] = \"proc:10:cleanse-rec down\";\n    BuffId[\"proc:10:cleanse-unknown\"] = \"proc:10:cleanse-unknown\";\n    BuffId[\"proc:11:chance inflict-poison\"] = \"proc:11:chance inflict-poison\";\n    BuffId[\"proc:11:chance inflict-weak\"] = \"proc:11:chance inflict-weak\";\n    BuffId[\"proc:11:chance inflict-sick\"] = \"proc:11:chance inflict-sick\";\n    BuffId[\"proc:11:chance inflict-injury\"] = \"proc:11:chance inflict-injury\";\n    BuffId[\"proc:11:chance inflict-curse\"] = \"proc:11:chance inflict-curse\";\n    BuffId[\"proc:11:chance inflict-paralysis\"] = \"proc:11:chance inflict-paralysis\";\n    BuffId[\"proc:11:chance inflict-atk down\"] = \"proc:11:chance inflict-atk down\";\n    BuffId[\"proc:11:chance inflict-def down\"] = \"proc:11:chance inflict-def down\";\n    BuffId[\"proc:11:chance inflict-rec down\"] = \"proc:11:chance inflict-rec down\";\n    BuffId[\"proc:11:chance inflict-unknown\"] = \"proc:11:chance inflict-unknown\";\n    BuffId[\"proc:12:guaranteed revive\"] = \"proc:12:guaranteed revive\";\n    BuffId[\"proc:13:random attack\"] = \"proc:13:random attack\";\n    BuffId[\"proc:14:hp absorb attack\"] = \"proc:14:hp absorb attack\";\n    BuffId[\"proc:16:mitigate-fire\"] = \"proc:16:mitigate-fire\";\n    BuffId[\"proc:16:mitigate-water\"] = \"proc:16:mitigate-water\";\n    BuffId[\"proc:16:mitigate-earth\"] = \"proc:16:mitigate-earth\";\n    BuffId[\"proc:16:mitigate-thunder\"] = \"proc:16:mitigate-thunder\";\n    BuffId[\"proc:16:mitigate-light\"] = \"proc:16:mitigate-light\";\n    BuffId[\"proc:16:mitigate-dark\"] = \"proc:16:mitigate-dark\";\n    BuffId[\"proc:16:mitigate-all\"] = \"proc:16:mitigate-all\";\n    BuffId[\"proc:16:mitigate-unknown\"] = \"proc:16:mitigate-unknown\";\n    BuffId[\"proc:17:resist-poison\"] = \"proc:17:resist-poison\";\n    BuffId[\"proc:17:resist-weak\"] = \"proc:17:resist-weak\";\n    BuffId[\"proc:17:resist-sick\"] = \"proc:17:resist-sick\";\n    BuffId[\"proc:17:resist-injury\"] = \"proc:17:resist-injury\";\n    BuffId[\"proc:17:resist-curse\"] = \"proc:17:resist-curse\";\n    BuffId[\"proc:17:resist-paralysis\"] = \"proc:17:resist-paralysis\";\n    BuffId[\"proc:18:mitigation\"] = \"proc:18:mitigation\";\n    BuffId[\"proc:19:gradual bc fill\"] = \"proc:19:gradual bc fill\";\n    BuffId[\"proc:20:bc fill on hit\"] = \"proc:20:bc fill on hit\";\n    BuffId[\"proc:22:defense ignore\"] = \"proc:22:defense ignore\";\n    BuffId[\"proc:23:spark damage\"] = \"proc:23:spark damage\";\n    BuffId[\"proc:24:converted-atk\"] = \"proc:24:converted-atk\";\n    BuffId[\"proc:24:converted-def\"] = \"proc:24:converted-def\";\n    BuffId[\"proc:24:converted-rec\"] = \"proc:24:converted-rec\";\n    BuffId[\"proc:26:hit count boost\"] = \"proc:26:hit count boost\";\n    BuffId[\"proc:27:proportional attack\"] = \"proc:27:proportional attack\";\n    BuffId[\"proc:28:fixed attack\"] = \"proc:28:fixed attack\";\n    BuffId[\"proc:29:multi-element attack\"] = \"proc:29:multi-element attack\";\n    BuffId[\"proc:30:add element-fire\"] = \"proc:30:add element-fire\";\n    BuffId[\"proc:30:add element-water\"] = \"proc:30:add element-water\";\n    BuffId[\"proc:30:add element-earth\"] = \"proc:30:add element-earth\";\n    BuffId[\"proc:30:add element-thunder\"] = \"proc:30:add element-thunder\";\n    BuffId[\"proc:30:add element-light\"] = \"proc:30:add element-light\";\n    BuffId[\"proc:30:add element-dark\"] = \"proc:30:add element-dark\";\n    BuffId[\"proc:30:add element-unknown\"] = \"proc:30:add element-unknown\";\n    BuffId[\"proc:31:bc fill-flat\"] = \"proc:31:bc fill-flat\";\n    BuffId[\"proc:31:bc fill-percent\"] = \"proc:31:bc fill-percent\";\n    BuffId[\"proc:32:element shift-fire\"] = \"proc:32:element shift-fire\";\n    BuffId[\"proc:32:element shift-water\"] = \"proc:32:element shift-water\";\n    BuffId[\"proc:32:element shift-earth\"] = \"proc:32:element shift-earth\";\n    BuffId[\"proc:32:element shift-thunder\"] = \"proc:32:element shift-thunder\";\n    BuffId[\"proc:32:element shift-light\"] = \"proc:32:element shift-light\";\n    BuffId[\"proc:32:element shift-dark\"] = \"proc:32:element shift-dark\";\n    BuffId[\"proc:32:element shift-unknown\"] = \"proc:32:element shift-unknown\";\n    BuffId[\"proc:33:buff wipe\"] = \"proc:33:buff wipe\";\n    BuffId[\"proc:34:bc drain-flat\"] = \"proc:34:bc drain-flat\";\n    BuffId[\"proc:34:bc drain-percent\"] = \"proc:34:bc drain-percent\";\n    BuffId[\"proc:36:ls lock\"] = \"proc:36:ls lock\";\n    BuffId[\"proc:37:summon\"] = \"proc:37:summon\";\n    BuffId[\"proc:38:cleanse-poison\"] = \"proc:38:cleanse-poison\";\n    BuffId[\"proc:38:cleanse-weak\"] = \"proc:38:cleanse-weak\";\n    BuffId[\"proc:38:cleanse-sick\"] = \"proc:38:cleanse-sick\";\n    BuffId[\"proc:38:cleanse-injury\"] = \"proc:38:cleanse-injury\";\n    BuffId[\"proc:38:cleanse-curse\"] = \"proc:38:cleanse-curse\";\n    BuffId[\"proc:38:cleanse-paralysis\"] = \"proc:38:cleanse-paralysis\";\n    BuffId[\"proc:38:cleanse-atk down\"] = \"proc:38:cleanse-atk down\";\n    BuffId[\"proc:38:cleanse-def down\"] = \"proc:38:cleanse-def down\";\n    BuffId[\"proc:38:cleanse-rec down\"] = \"proc:38:cleanse-rec down\";\n    BuffId[\"proc:38:cleanse-unknown\"] = \"proc:38:cleanse-unknown\";\n    BuffId[\"proc:39:mitigate-fire\"] = \"proc:39:mitigate-fire\";\n    BuffId[\"proc:39:mitigate-water\"] = \"proc:39:mitigate-water\";\n    BuffId[\"proc:39:mitigate-earth\"] = \"proc:39:mitigate-earth\";\n    BuffId[\"proc:39:mitigate-thunder\"] = \"proc:39:mitigate-thunder\";\n    BuffId[\"proc:39:mitigate-light\"] = \"proc:39:mitigate-light\";\n    BuffId[\"proc:39:mitigate-dark\"] = \"proc:39:mitigate-dark\";\n    BuffId[\"proc:39:mitigate-unknown\"] = \"proc:39:mitigate-unknown\";\n    BuffId[\"proc:40:add ailment-poison\"] = \"proc:40:add ailment-poison\";\n    BuffId[\"proc:40:add ailment-weak\"] = \"proc:40:add ailment-weak\";\n    BuffId[\"proc:40:add ailment-sick\"] = \"proc:40:add ailment-sick\";\n    BuffId[\"proc:40:add ailment-injury\"] = \"proc:40:add ailment-injury\";\n    BuffId[\"proc:40:add ailment-curse\"] = \"proc:40:add ailment-curse\";\n    BuffId[\"proc:40:add ailment-paralysis\"] = \"proc:40:add ailment-paralysis\";\n    BuffId[\"proc:40:add ailment-atk down\"] = \"proc:40:add ailment-atk down\";\n    BuffId[\"proc:40:add ailment-def down\"] = \"proc:40:add ailment-def down\";\n    BuffId[\"proc:40:add ailment-rec down\"] = \"proc:40:add ailment-rec down\";\n    BuffId[\"proc:40:add ailment-unknown\"] = \"proc:40:add ailment-unknown\";\n    BuffId[\"proc:42:sacrificial attack\"] = \"proc:42:sacrificial attack\";\n    BuffId[\"proc:42:instant death\"] = \"proc:42:instant death\";\n    BuffId[\"proc:43:burst od fill\"] = \"proc:43:burst od fill\";\n    BuffId[\"proc:44:damage over time\"] = \"proc:44:damage over time\";\n    BuffId[\"proc:45:attack boost-bb\"] = \"proc:45:attack boost-bb\";\n    BuffId[\"proc:45:attack boost-sbb\"] = \"proc:45:attack boost-sbb\";\n    BuffId[\"proc:45:attack boost-ubb\"] = \"proc:45:attack boost-ubb\";\n    BuffId[\"proc:46:non-lethal proportional attack\"] = \"proc:46:non-lethal proportional attack\";\n    BuffId[\"proc:47:hp scaled attack\"] = \"proc:47:hp scaled attack\";\n    BuffId[\"proc:48:piercing attack-base\"] = \"proc:48:piercing attack-base\";\n    BuffId[\"proc:48:piercing attack-current\"] = \"proc:48:piercing attack-current\";\n    BuffId[\"proc:48:piercing attack-fixed\"] = \"proc:48:piercing attack-fixed\";\n    BuffId[\"proc:48:piercing attack-unknown\"] = \"proc:48:piercing attack-unknown\";\n    BuffId[\"proc:49:chance instant death\"] = \"proc:49:chance instant death\";\n    BuffId[\"proc:50:chance damage reflect\"] = \"proc:50:chance damage reflect\";\n    BuffId[\"proc:51:add to attack-atk down\"] = \"proc:51:add to attack-atk down\";\n    BuffId[\"proc:51:add to attack-def down\"] = \"proc:51:add to attack-def down\";\n    BuffId[\"proc:51:add to attack-rec down\"] = \"proc:51:add to attack-rec down\";\n    BuffId[\"proc:52:bc efficacy\"] = \"proc:52:bc efficacy\";\n    BuffId[\"proc:53:inflict on hit-poison\"] = \"proc:53:inflict on hit-poison\";\n    BuffId[\"proc:53:inflict on hit-weak\"] = \"proc:53:inflict on hit-weak\";\n    BuffId[\"proc:53:inflict on hit-sick\"] = \"proc:53:inflict on hit-sick\";\n    BuffId[\"proc:53:inflict on hit-injury\"] = \"proc:53:inflict on hit-injury\";\n    BuffId[\"proc:53:inflict on hit-curse\"] = \"proc:53:inflict on hit-curse\";\n    BuffId[\"proc:53:inflict on hit-paralysis\"] = \"proc:53:inflict on hit-paralysis\";\n    BuffId[\"proc:54:critical damage boost\"] = \"proc:54:critical damage boost\";\n    BuffId[\"proc:55:elemental weakness damage-fire\"] = \"proc:55:elemental weakness damage-fire\";\n    BuffId[\"proc:55:elemental weakness damage-water\"] = \"proc:55:elemental weakness damage-water\";\n    BuffId[\"proc:55:elemental weakness damage-earth\"] = \"proc:55:elemental weakness damage-earth\";\n    BuffId[\"proc:55:elemental weakness damage-thunder\"] = \"proc:55:elemental weakness damage-thunder\";\n    BuffId[\"proc:55:elemental weakness damage-light\"] = \"proc:55:elemental weakness damage-light\";\n    BuffId[\"proc:55:elemental weakness damage-dark\"] = \"proc:55:elemental weakness damage-dark\";\n    BuffId[\"proc:55:elemental weakness damage-unknown\"] = \"proc:55:elemental weakness damage-unknown\";\n    BuffId[\"proc:56:chance ko resistance\"] = \"proc:56:chance ko resistance\";\n    BuffId[\"proc:57:bc drop resistance-base\"] = \"proc:57:bc drop resistance-base\";\n    BuffId[\"proc:57:bc drop resistance-buff\"] = \"proc:57:bc drop resistance-buff\";\n    BuffId[\"proc:57:hc drop resistance-base\"] = \"proc:57:hc drop resistance-base\";\n    BuffId[\"proc:57:hc drop resistance-buff\"] = \"proc:57:hc drop resistance-buff\";\n    BuffId[\"proc:58:spark vulnerability\"] = \"proc:58:spark vulnerability\";\n    BuffId[\"proc:59:attack reduction-bb\"] = \"proc:59:attack reduction-bb\";\n    BuffId[\"proc:59:attack reduction-sbb\"] = \"proc:59:attack reduction-sbb\";\n    BuffId[\"proc:59:attack reduction-ubb\"] = \"proc:59:attack reduction-ubb\";\n    BuffId[\"proc:61:party bb gauge-scaled attack\"] = \"proc:61:party bb gauge-scaled attack\";\n    BuffId[\"proc:61:party bc drain\"] = \"proc:61:party bc drain\";\n    BuffId[\"proc:62:barrier-all\"] = \"proc:62:barrier-all\";\n    BuffId[\"proc:62:barrier-fire\"] = \"proc:62:barrier-fire\";\n    BuffId[\"proc:62:barrier-water\"] = \"proc:62:barrier-water\";\n    BuffId[\"proc:62:barrier-earth\"] = \"proc:62:barrier-earth\";\n    BuffId[\"proc:62:barrier-thunder\"] = \"proc:62:barrier-thunder\";\n    BuffId[\"proc:62:barrier-light\"] = \"proc:62:barrier-light\";\n    BuffId[\"proc:62:barrier-dark\"] = \"proc:62:barrier-dark\";\n    BuffId[\"proc:62:barrier-unknown\"] = \"proc:62:barrier-unknown\";\n    BuffId[\"proc:64:consecutive usage attack\"] = \"proc:64:consecutive usage attack\";\n    BuffId[\"proc:65:ailment attack boost\"] = \"proc:65:ailment attack boost\";\n    BuffId[\"proc:66:chance revive\"] = \"proc:66:chance revive\";\n    BuffId[\"proc:67:bc fill on spark\"] = \"proc:67:bc fill on spark\";\n    BuffId[\"proc:68:guard mitigation\"] = \"proc:68:guard mitigation\";\n    BuffId[\"proc:69:bc fill on guard-flat\"] = \"proc:69:bc fill on guard-flat\";\n    BuffId[\"proc:69:bc fill on guard-percent\"] = \"proc:69:bc fill on guard-percent\";\n    BuffId[\"proc:71:bc efficacy reduction\"] = \"proc:71:bc efficacy reduction\";\n    BuffId[\"proc:73:resist-atk down\"] = \"proc:73:resist-atk down\";\n    BuffId[\"proc:73:resist-def down\"] = \"proc:73:resist-def down\";\n    BuffId[\"proc:73:resist-rec down\"] = \"proc:73:resist-rec down\";\n    BuffId[\"proc:75:element squad-scaled attack\"] = \"proc:75:element squad-scaled attack\";\n    BuffId[\"proc:76:extra action\"] = \"proc:76:extra action\";\n    BuffId[\"proc:78:self stat boost-atk\"] = \"proc:78:self stat boost-atk\";\n    BuffId[\"proc:78:self stat boost-def\"] = \"proc:78:self stat boost-def\";\n    BuffId[\"proc:78:self stat boost-rec\"] = \"proc:78:self stat boost-rec\";\n    BuffId[\"proc:78:self stat boost-crit\"] = \"proc:78:self stat boost-crit\";\n    BuffId[\"proc:79:player exp boost\"] = \"proc:79:player exp boost\";\n    BuffId[\"proc:82:resummon\"] = \"proc:82:resummon\";\n    BuffId[\"proc:83:spark critical\"] = \"proc:83:spark critical\";\n    BuffId[\"proc:84:od fill rate\"] = \"proc:84:od fill rate\";\n    BuffId[\"proc:85:heal on hit\"] = \"proc:85:heal on hit\";\n    BuffId[\"proc:86:hp absorb\"] = \"proc:86:hp absorb\";\n    BuffId[\"proc:87:heal on spark\"] = \"proc:87:heal on spark\";\n    BuffId[\"proc:88:self spark damage\"] = \"proc:88:self spark damage\";\n    BuffId[\"proc:89:self converted-atk\"] = \"proc:89:self converted-atk\";\n    BuffId[\"proc:89:self converted-def\"] = \"proc:89:self converted-def\";\n    BuffId[\"proc:89:self converted-rec\"] = \"proc:89:self converted-rec\";\n    BuffId[\"proc:92:self max hp boost-flat\"] = \"proc:92:self max hp boost-flat\";\n    BuffId[\"proc:92:self max hp boost-percent\"] = \"proc:92:self max hp boost-percent\";\n    BuffId[\"proc:93:critical damage resistance-base\"] = \"proc:93:critical damage resistance-base\";\n    BuffId[\"proc:93:critical damage resistance-buff\"] = \"proc:93:critical damage resistance-buff\";\n    BuffId[\"proc:93:element damage resistance-base\"] = \"proc:93:element damage resistance-base\";\n    BuffId[\"proc:93:element damage resistance-buff\"] = \"proc:93:element damage resistance-buff\";\n    BuffId[\"proc:93:spark damage resistance-base\"] = \"proc:93:spark damage resistance-base\";\n    BuffId[\"proc:93:spark damage resistance-buff\"] = \"proc:93:spark damage resistance-buff\";\n    BuffId[\"proc:94:aoe normal attack\"] = \"proc:94:aoe normal attack\";\n    BuffId[\"proc:95:sphere lock\"] = \"proc:95:sphere lock\";\n    BuffId[\"proc:96:es lock\"] = \"proc:96:es lock\";\n    BuffId[\"proc:97:element specific attack\"] = \"proc:97:element specific attack\";\n    BuffId[\"proc:113:gradual od fill\"] = \"proc:113:gradual od fill\";\n    BuffId[\"UNKNOWN_CONDITIONAL_EFFECT_ID\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n    BuffId[\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\"] = \"UNKNOWN_CONDITIONAL_BUFF_PARAMS\";\n    BuffId[\"conditional:1:attack buff\"] = \"conditional:1:attack buff\";\n    BuffId[\"conditional:3:defense buff\"] = \"conditional:3:defense buff\";\n    BuffId[\"conditional:5:recovery buff\"] = \"conditional:5:recovery buff\";\n    BuffId[\"conditional:7:critical hit rate buff\"] = \"conditional:7:critical hit rate buff\";\n    BuffId[\"conditional:8:gradual heal\"] = \"conditional:8:gradual heal\";\n    BuffId[\"conditional:12:guaranteed ko resistance\"] = \"conditional:12:guaranteed ko resistance\";\n    BuffId[\"conditional:13:elemental attack buff\"] = \"conditional:13:elemental attack buff\";\n    BuffId[\"conditional:14:elemental defense buff\"] = \"conditional:14:elemental defense buff\";\n    BuffId[\"conditional:21:fire mitigation\"] = \"conditional:21:fire mitigation\";\n    BuffId[\"conditional:22:water mitigation\"] = \"conditional:22:water mitigation\";\n    BuffId[\"conditional:23:earth mitigation\"] = \"conditional:23:earth mitigation\";\n    BuffId[\"conditional:24:thunder mitigation\"] = \"conditional:24:thunder mitigation\";\n    BuffId[\"conditional:25:light mitigation\"] = \"conditional:25:light mitigation\";\n    BuffId[\"conditional:26:dark mitigation\"] = \"conditional:26:dark mitigation\";\n    BuffId[\"conditional:36:mitigation\"] = \"conditional:36:mitigation\";\n    BuffId[\"conditional:37:gradual bc fill\"] = \"conditional:37:gradual bc fill\";\n    BuffId[\"conditional:40:spark damage\"] = \"conditional:40:spark damage\";\n    BuffId[\"conditional:51:add fire element\"] = \"conditional:51:add fire element\";\n    BuffId[\"conditional:52:add water element\"] = \"conditional:52:add water element\";\n    BuffId[\"conditional:53:add earth element\"] = \"conditional:53:add earth element\";\n    BuffId[\"conditional:54:add thunder element\"] = \"conditional:54:add thunder element\";\n    BuffId[\"conditional:55:add light element\"] = \"conditional:55:add light element\";\n    BuffId[\"conditional:56:add dark element\"] = \"conditional:56:add dark element\";\n    BuffId[\"conditional:72:attack boost-bb\"] = \"conditional:72:attack boost-bb\";\n    BuffId[\"conditional:72:attack boost-sbb\"] = \"conditional:72:attack boost-sbb\";\n    BuffId[\"conditional:72:attack boost-ubb\"] = \"conditional:72:attack boost-ubb\";\n    BuffId[\"conditional:74:add atk down to attack\"] = \"conditional:74:add atk down to attack\";\n    BuffId[\"conditional:75:add def down to attack\"] = \"conditional:75:add def down to attack\";\n    BuffId[\"conditional:84:critical damage\"] = \"conditional:84:critical damage\";\n    BuffId[\"conditional:91:chance ko resistance\"] = \"conditional:91:chance ko resistance\";\n    BuffId[\"conditional:95:fire barrier\"] = \"conditional:95:fire barrier\";\n    BuffId[\"conditional:96:water barrier\"] = \"conditional:96:water barrier\";\n    BuffId[\"conditional:97:earth barrier\"] = \"conditional:97:earth barrier\";\n    BuffId[\"conditional:98:thunder barrier\"] = \"conditional:98:thunder barrier\";\n    BuffId[\"conditional:99:light barrier\"] = \"conditional:99:light barrier\";\n    BuffId[\"conditional:100:dark barrier\"] = \"conditional:100:dark barrier\";\n    BuffId[\"conditional:111:bc fill on spark\"] = \"conditional:111:bc fill on spark\";\n    BuffId[\"conditional:124:self attack buff\"] = \"conditional:124:self attack buff\";\n    BuffId[\"conditional:125:self defense buff\"] = \"conditional:125:self defense buff\";\n    BuffId[\"conditional:131:spark critical\"] = \"conditional:131:spark critical\";\n    BuffId[\"conditional:132:od fill rate\"] = \"conditional:132:od fill rate\";\n    BuffId[\"conditional:133:heal on hit\"] = \"conditional:133:heal on hit\";\n    BuffId[\"conditional:143:critical damage reduction-base\"] = \"conditional:143:critical damage reduction-base\";\n    BuffId[\"conditional:143:critical damage reduction-buff\"] = \"conditional:143:critical damage reduction-buff\";\n    BuffId[\"conditional:144:spark damage reduction-base\"] = \"conditional:144:spark damage reduction-base\";\n    BuffId[\"conditional:144:spark damage reduction-buff\"] = \"conditional:144:spark damage reduction-buff\";\n    BuffId[\"conditional:145:elemental weakness damage reduction-base\"] = \"conditional:145:elemental weakness damage reduction-base\";\n    BuffId[\"conditional:145:elemental weakness damage reduction-buff\"] = \"conditional:145:elemental weakness damage reduction-buff\";\n    BuffId[\"conditional:153:chance inflict atk down on hit\"] = \"conditional:153:chance inflict atk down on hit\";\n    BuffId[\"conditional:10001:stealth\"] = \"conditional:10001:stealth\";\n    BuffId[\"conditional:10001:stealth-atk\"] = \"conditional:10001:stealth-atk\";\n    BuffId[\"conditional:10001:stealth-def\"] = \"conditional:10001:stealth-def\";\n    BuffId[\"conditional:10001:stealth-rec\"] = \"conditional:10001:stealth-rec\";\n    BuffId[\"conditional:10001:stealth-crit\"] = \"conditional:10001:stealth-crit\";\n    BuffId[\"conditional:10500:shield-all\"] = \"conditional:10500:shield-all\";\n    BuffId[\"conditional:10500:shield-fire\"] = \"conditional:10500:shield-fire\";\n    BuffId[\"conditional:10500:shield-water\"] = \"conditional:10500:shield-water\";\n    BuffId[\"conditional:10500:shield-earth\"] = \"conditional:10500:shield-earth\";\n    BuffId[\"conditional:10500:shield-thunder\"] = \"conditional:10500:shield-thunder\";\n    BuffId[\"conditional:10500:shield-light\"] = \"conditional:10500:shield-light\";\n    BuffId[\"conditional:10500:shield-dark\"] = \"conditional:10500:shield-dark\";\n    BuffId[\"conditional:10500:shield-unknown\"] = \"conditional:10500:shield-unknown\";\n})(BuffId || (BuffId = {}));\n","import { BuffSource, BuffId, } from './buff-types';\nimport { SpPassiveType, TargetType, TargetArea, } from '../../datamine-types';\n/**\n * @description Helper function for creating an entry to be used in the `sources`\n * property of {@link IBuff}.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourceEntryFromContext(context) {\n    return `${context.source}-${context.sourceId}`;\n}\n/**\n * @description Helper function for creating an entries array to be used in the `sources`\n * property of {@link IBuff}. It handles setting the order of the sources.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourcesFromContext(context) {\n    const resultArray = Array.isArray(context.previousSources)\n        ? context.previousSources.slice()\n        : [];\n    // Ensure that the current source is at the beginning of the array\n    resultArray.unshift(createSourceEntryFromContext(context));\n    return resultArray;\n}\n/**\n * @description Given the conditions in an extra skill effect, normalize them into\n * a simpler object containing the IDs of each condition type.\n * @param effect Extra skill effect to process conditions from.\n * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n */\nexport function processExtraSkillConditions(effect) {\n    const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n    const aggregate = {\n        units: new Set(),\n        items: new Set(),\n        sphereTypes: new Set(),\n        unknowns: new Set(),\n    };\n    conditions.forEach((condition, index) => {\n        if ('sphere category required (raw)' in condition) {\n            aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n        }\n        else if ('item required' in condition) {\n            condition['item required'].forEach((item) => {\n                aggregate.items.add(item);\n            });\n        }\n        else if ('unit required' in condition) {\n            condition['unit required'].forEach((unit) => {\n                aggregate.units.add(`${unit.id}`);\n            });\n        }\n        else {\n            aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n        }\n    });\n    // filter out properties that have no entries\n    const result = Object.entries(aggregate)\n        .filter((entry) => entry[1].size > 0)\n        .reduce((acc, entry) => {\n        acc[entry[0]] = Array.from(entry[1]);\n        return acc;\n    }, {});\n    return result;\n}\n/**\n * @description Extract the target type and target area of a given passive effect.\n * @param effect Passive effect to extract target data from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns The target data for the given effect and context. There are only two possible values:\n * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n */\nexport function getPassiveTargetData(effect, context) {\n    const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n        (effect.sp_type === SpPassiveType.EnhancePassive);\n    const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n    return {\n        targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n        targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n    };\n}\n/**\n * @description Extract the target type and target area of a given proc effect.\n * @param effect Proc effect to extract target data from.\n * @returns The target data for the given effect and context.\n */\nexport function getProcTargetData(effect) {\n    return {\n        targetArea: effect['target area'],\n        targetType: effect['target type'],\n    };\n}\n/**\n * @description Try to parse the given value into a number or return a value if it is not a number.\n * @param value Value to parse into a number.\n * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n */\nexport function parseNumberOrDefault(value, defaultValue = 0) {\n    return (value !== null && !isNaN(value)) ? +value : defaultValue;\n}\n/**\n * @description Create an object denoting values that cannot be processed yet. To be used\n * in the `value` property of `IBuff` as needed.\n * @param params Array of values that cannot be processed yet.\n * @param startIndex The first index before which we know how to process an effect's values.\n * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n */\nexport function createUnknownParamsValue(params = [], startIndex = 0) {\n    let hasValue = false;\n    const result = params\n        .reduce((acc, value, index) => {\n        if (value && value !== '0') {\n            acc[`param_${startIndex + index}`] = value;\n            hasValue = true;\n        }\n        return acc;\n    }, {});\n    return hasValue ? result : (void 0);\n}\n/**\n * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n * @param source Source value to check.\n * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n * bonded super brave burst, or bonded dual brave burst.\n */\nexport function buffSourceIsBurstType(source) {\n    return !!source && [\n        BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n        BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n    ].includes(source);\n}\n/**\n * @description Given an array of parameters, conditionally creata an unknown params value entry.\n * @param extraParams Array of string parameters from an effect.\n * @param startIndex Index to use when generating entries for the unknown params value entry.\n * @param injectionContext Object whose main use is for injecting methods in testing.\n * @returns An unknown params entry if there are extra parameters, undefined otherwise.\n */\nexport function createUnknownParamsEntryFromExtraParams(extraParams, startIndex, injectionContext) {\n    let unknownParams;\n    if (extraParams && extraParams.length > 0) {\n        unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n    }\n    return unknownParams;\n}\n/**\n * @description Helper function for creating a `NO_PARAMS_SPECIFIED` entry from a given context.\n * @param context An effect processing context containing information created while parsing an effect.\n * @returns A single buff denoting a `NO_PARAMS_SPECIFIED` entry.\n */\nexport function createNoParamsEntry({ originalId, sources }) {\n    return {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    };\n}\n","import { UnitElement, Ailment, TargetArea, TargetType } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { getProcTargetData, createSourcesFromContext, parseNumberOrDefault, buffSourceIsBurstType, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of proc IDs to functions.\n */\nexport function getProcEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const NON_ZERO_ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const effectDelay = effect['effect delay time(ms)/frame'];\n        return { targetData, sources, effectDelay };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const splitEffectWithUnknownProcParamsProperty = (effect) => {\n        const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n        return splitEffectParams({ params: rawParams });\n    };\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n        effectDelay,\n        sources, value: unknownParams }, targetData));\n    const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n        sources, value: {\n            buffs,\n            duration,\n        } }, targetData));\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n    };\n    /**\n     * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n     * checked if all other known values in the effect are 0.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @param turnDuration Parsed turn duration value to check.\n     * @param injectionContext Object whose main use is for injecting methods in testing.\n     * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n     */\n    const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n        let result = turnDuration !== 0;\n        if (result) {\n            result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n        }\n        return result;\n    };\n    /**\n     * @description Helper function to get attack information common across most attacks from the conversion context.\n     * @param context Given context that may contain attack information like damage frames.\n     * @returns Extracted attack information from the context (with defaults where applicable).\n     */\n    const getAttackInformationFromContext = (context) => {\n        const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n        const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n        return {\n            hits,\n            distribution,\n        };\n    };\n    const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            value = parseParamValue(rawValue);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else if (effectValueKey && effectTurnDurationKey) {\n            value = parseNumberOrDefault(effect[effectValueKey]);\n            turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [buffId],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    };\n    const parseProcWithNumericalValueRangeAndChanceAndTurnDuration = ({ effect, context, injectionContext, originalId, buffId, effectKeyLow, effectKeyHigh, effectKeyChance, effectTurnDurationKey, buffKeyLow, buffKeyHigh, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateConditions, }) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let valueLow = 0;\n        let valueHigh = 0;\n        let chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValueLow, rawValueHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            valueLow = parseParamValue(rawValueLow);\n            valueHigh = parseParamValue(rawValueHigh);\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            valueLow = parseNumberOrDefault(effect[effectKeyLow]);\n            valueHigh = parseNumberOrDefault(effect[effectKeyHigh]);\n            chance = parseNumberOrDefault(effect[effectKeyChance]);\n            turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n        }\n        const hasAnyValues = valueLow !== 0 || valueHigh !== 0 || chance !== 0;\n        const results = [];\n        if (hasAnyValues) {\n            const entry = Object.assign({ id: buffId, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    [buffKeyLow]: valueLow,\n                    [buffKeyHigh]: valueHigh,\n                    chance,\n                } }, targetData);\n            if (generateConditions) {\n                entry.conditions = generateConditions();\n            }\n            results.push(entry);\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [buffId],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:1:attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'healerRec%': 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            let recX, recY;\n            let extraParams;\n            [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n            params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['heal low'];\n            params.healHigh = effect['heal high'];\n            params['healerRec%'] = effect['rec added% (from healer)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const results = [];\n        if (params.healHigh !== 0 || params.healLow !== 0) {\n            results.push(Object.assign({ id: 'proc:2:burst heal', originalId,\n                sources,\n                effectDelay, value: params }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'targetRec%': 0,\n            turnDuration: '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let rec;\n            let extraParams;\n            [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['gradual heal low'];\n            params.healHigh = effect['gradual heal high'];\n            params['targetRec%'] = effect['rec added% (from target)'];\n            params.turnDuration = effect['gradual heal turns (8)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n        const results = [];\n        if (hasAnyHealValues) {\n            results.push(Object.assign({ id: 'proc:3:gradual heal', originalId,\n                sources,\n                effectDelay, duration: params.turnDuration, value: {\n                    healLow: params.healLow,\n                    healHigh: params.healHigh,\n                    'targetRec%': params['targetRec%'],\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:3:gradual heal'],\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('bb bc fill' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill']);\n            }\n            if ('bb bc fill%' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n            }\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:bc fill-flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:bc fill-percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            element: BuffConditionElement.All,\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    params[statType] = effect[effectKey];\n                }\n            });\n            params.turnDuration = effect['buff turns'];\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    const buffEntry = Object.assign({ id: `proc:5:regular or elemental-${statKey}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:5:regular or elemental-${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('6', (effect, context, injectionContext) => {\n        const originalId = '6';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            turnDuration: '0',\n        };\n        const dropRateProperties = ['bc', 'hc', 'item'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.bc = effect['bc drop rate% buff (10)'];\n            params.hc = effect['hc drop rate% buff (9)'];\n            params.item = effect['item drop rate% buff (11)'];\n            params.turnDuration = effect['drop buff rate turns'];\n        }\n        dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n        const results = [];\n        if (hasAnyRates) {\n            dropRateProperties.forEach((key) => {\n                const value = params[key];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:6:drop boost-${key}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: dropRateProperties.map((key) => `proc:6:drop boost-${key}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('7', (effect, context, injectionContext) => {\n        const originalId = '7';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHpPercent = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:7:guaranteed ko resistance', originalId,\n                sources,\n                effectDelay, value: recoveredHpPercent }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const originalId = '8';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatHpBoost = 0;\n        let percentHpBoost = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n            flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n            percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('max hp increase' in effect) {\n                flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n            }\n            if ('max hp% increase' in effect) {\n                percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n            }\n        }\n        const results = [];\n        if (flatHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:max hp boost-flat', originalId,\n                sources,\n                effectDelay, value: flatHpBoost }, targetData));\n        }\n        if (percentHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:max hp boost-percent', originalId,\n                sources,\n                effectDelay, value: percentHpBoost }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        const originalId = '9';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const STAT_TYPE_MAPPING = {\n            0: 'atk',\n            1: 'def',\n            2: 'rec',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const params = {\n            element: BuffConditionElement.All,\n            statReductionEntries: [],\n            turnDuration: 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n            [\n                [statType1, value1, procChance1],\n                [statType2, value2, procChance2],\n            ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                const statType = parseNumberOrDefault(rawStatType) - 1;\n                const value = parseNumberOrDefault(rawValue);\n                const chance = parseNumberOrDefault(rawProcChance);\n                if (statType === 3) { // all stats\n                    params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                        stat,\n                        value,\n                        chance,\n                    })));\n                }\n                else {\n                    params.statReductionEntries.push({\n                        stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                        value,\n                        chance,\n                    });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            ['buff #1', 'buff #2'].forEach((buffKey) => {\n                const entry = effect[buffKey];\n                if (entry) {\n                    const chance = parseNumberOrDefault(entry['proc chance%']);\n                    const keys = Object.keys(entry);\n                    coreStatProperties.forEach((statType) => {\n                        const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                        if (effectKey) {\n                            params.statReductionEntries.push({\n                                stat: statType,\n                                value: parseNumberOrDefault(entry[effectKey]),\n                                chance,\n                            });\n                        }\n                    });\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        let hasAnyValues = false;\n        params.statReductionEntries.forEach(({ stat, value, chance }) => {\n            if (value !== 0 || chance !== 0) {\n                hasAnyValues = true;\n                const buffEntry = Object.assign({ id: `proc:9:regular or elemental reduction-${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                if (params.element !== BuffConditionElement.All) {\n                    buffEntry.conditions = {\n                        targetElements: [params.element],\n                    };\n                }\n                results.push(buffEntry);\n            }\n        });\n        if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:9:regular or elemental reduction-${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        const originalId = '10';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 8);\n            const extraParams = splitParams.slice(8);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                if (`remove ${ailment}` in effect) { // mainly for items\n                    curedAilments.push(ailment);\n                }\n            });\n            if ('remove all status ailments' in effect) {\n                curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:cleanse-${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            let params = splitEffectParams(effect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:chance inflict-${ailment}`, originalId,\n            sources,\n            effectDelay, value: chance }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let reviveToHp = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n            reviveToHp = parseNumberOrDefault(rawReviveToHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:12:guaranteed revive', originalId,\n                sources,\n                effectDelay, value: reviveToHp }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const originalId = '13';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hits = 0;\n        const { distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawHits;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n            hits = parseNumberOrDefault(rawHits);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            hits = parseNumberOrDefault(effect.hits);\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push({\n                id: 'proc:13:random attack',\n                originalId,\n                sources,\n                effectDelay,\n                value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }),\n                targetType: targetData.targetType,\n                targetArea: TargetArea.Random,\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n            'drainLow%': '0',\n            'drainHigh%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n            params['drainLow%'] = effect['hp drain% low'];\n            params['drainHigh%'] = effect['hp drain% high'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:14:hp absorb attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let mitigation = 0;\n        let element;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            mitigation = parseNumberOrDefault(rawMitigation);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n            element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n            if (mitigationKey) {\n                mitigation = parseNumberOrDefault(effect[mitigationKey]);\n            }\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (mitigation !== 0) {\n            results.push(Object.assign({ id: `proc:16:mitigate-${element}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:mitigate-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        const originalId = '17';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    resistances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:17:resist-${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:17:resist-${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('18', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'dmg% reduction',\n            effectTurnDurationKey: 'dmg% reduction turns (36)',\n            buffId: 'proc:18:mitigation',\n            originalId: '18',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'increase bb gauge gradual',\n            effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'proc:19:gradual bc fill',\n            originalId: '19',\n        });\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            originalId: '20',\n            buffId: 'proc:20:bc fill on hit',\n            effectKeyLow: 'bc fill when attacked low',\n            effectKeyHigh: 'bc fill when attacked high',\n            effectKeyChance: 'bc fill when attacked%',\n            effectTurnDurationKey: 'bc fill when attacked turns (38)',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateConditions: () => ({ whenAttacked: true }),\n        });\n    });\n    map.set('22', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'defense% ignore',\n            effectTurnDurationKey: 'defense% ignore turns (39)',\n            buffId: 'proc:22:defense ignore',\n            originalId: '22',\n        });\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            value = parseNumberOrDefault(params[0]);\n            turnDuration = parseNumberOrDefault(params[6]);\n            const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'proc:23:spark damage', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:23:spark damage'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        const originalId = '24';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let turnDuration = 0;\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawConvertedStat, rawTurnDuration;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            const rawConvertedStat = effect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    stats[statType] = effect[effectKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['% converted turns']);\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:24:converted-${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        convertedStat,\n                        value,\n                    } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:24:converted-${statKey}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        const originalId = '26';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n            turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'proc:26:hit count boost', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:26:hit count boost'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        const originalId = '27';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'hpDamageLow%': '0',\n            'hpDamageHigh%': '0',\n            'hpDamageChance%': '0',\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else {\n            params['hpDamageLow%'] = effect['hp% damage low'];\n            params['hpDamageHigh%'] = effect['hp% damage high'];\n            params['hpDamageChance%'] = effect['hp% damage chance%'];\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:27:proportional attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        let value = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            value = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['fixed damage']);\n        }\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || value !== 0) {\n            const entry = Object.assign({ id: 'proc:28:fixed attack', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (value !== 0) {\n                entry.value.value = value;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        const originalId = '29';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let attackElements = [];\n        let unknownParams;\n        if (effect.params) {\n            let element1, element2, element3;\n            let extraParams;\n            [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            [element1, element2, element3].forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            });\n        }\n        else {\n            if (Array.isArray(effect['bb elements'])) {\n                attackElements = effect['bb elements'].slice();\n            }\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n            const entry = Object.assign({ id: 'proc:29:multi-element attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData);\n            if (attackElements.length > 0) {\n                entry.value.elements = attackElements;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let elements = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            elements = params\n                .slice(0, 6)\n                .filter((p) => p !== '0')\n                .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n            turnDuration = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            if ('elements added' in effect) {\n                if (Array.isArray(effect['elements added'])) {\n                    elements = effect['elements added'];\n                }\n                else {\n                    elements = [BuffConditionElement.Unknown];\n                }\n            }\n            turnDuration = parseNumberOrDefault(effect['elements added turns']);\n        }\n        const results = [];\n        const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n        if (elements.length > 0) {\n            elements.forEach((inputElement) => {\n                const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                results.push(Object.assign({ id: `proc:30:add element-${sanitizedElement}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: true }, targetData));\n            });\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:add element-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('increase bb gauge' in effect) {\n                flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n            }\n            // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n            // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:bc fill-flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:bc fill-percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        const originalId = '32';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let element;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, ...extraParams] = splitEffectParams(effect);\n            if (rawElement && rawElement !== '0') {\n                element = NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            const effectElement = effect['set attack element attribute'];\n            if (effectElement) {\n                const sanitizedElement = Object.values(NON_ZERO_ELEMENT_MAPPING).find((e) => effectElement === e);\n                if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                    element = sanitizedElement;\n                }\n                else {\n                    element = BuffConditionElement.Unknown;\n                }\n            }\n        }\n        const results = [];\n        if (element) {\n            results.push(Object.assign({ id: `proc:32:element shift-${element}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            chance = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(effect['clear buff chance%']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:33:buff wipe', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        const originalId = '34';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatDrainLow = 0, flatDrainHigh = 0;\n        let percentDrainLow = 0, percentDrainHigh = 0;\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n            flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n            flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n            percentDrainLow = parseNumberOrDefault(rawPercentLow);\n            percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n            flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n            percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n            percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n            chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n        }\n        const results = [];\n        if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:bc drain-flat', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: flatDrainLow,\n                    drainHigh: flatDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:bc drain-percent', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: percentDrainLow,\n                    drainHigh: percentDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'invalidate LS chance%',\n            effectTurnDurationKey: 'invalidate LS turns (60)',\n            buffId: 'proc:36:ls lock',\n            originalId: '36',\n        });\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const positionX = parseNumberOrDefault(rawPositionX);\n        const positionY = parseNumberOrDefault(rawPositionY);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const results = [];\n        if (summonGroup || summonId) {\n            results.push(Object.assign({ id: 'proc:37:summon', originalId,\n                sources,\n                effectDelay, value: {\n                    summonGroup,\n                    summonId,\n                    positionX,\n                    positionY,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('38', (effect, context, injectionContext) => {\n        const originalId = '38';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 9);\n            const extraParams = splitParams.slice(9);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else if (Array.isArray(effect['ailments cured'])) {\n            const effectAilmentsCured = effect['ailments cured'];\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                if (effectAilmentsCured.includes(effectKey)) {\n                    curedAilments.push(ailment);\n                }\n            });\n            if (effectAilmentsCured.length > curedAilments.length) {\n                const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                for (let i = 0; i < unknownAilmentCount; ++i) {\n                    curedAilments.push(Ailment.Unknown);\n                }\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:cleanse-${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('39', (effect, context, injectionContext) => {\n        const originalId = '39';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const elements = [];\n        let mitigation = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            const rawElementsMitigated = params.slice(0, 6);\n            mitigation = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            rawElementsMitigated.forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    elements.push(NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            Object.values(NON_ZERO_ELEMENT_MAPPING).forEach((element) => {\n                if (effect[`mitigate ${element} attacks`]) {\n                    elements.push(element);\n                }\n            });\n            mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n            turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n        }\n        const results = [];\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                results.push(Object.assign({ id: `proc:39:mitigate-${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            });\n        }\n        else if (mitigation !== 0) {\n            results.push(Object.assign({ id: 'proc:39:mitigate-unknown', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:mitigate-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            for (let index = 0; index < 8; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n            turnDuration = parseNumberOrDefault(params[8]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken% buff';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = `${ailment} buff`;\n                }\n                else {\n                    effectKey = `${ailment}% buff`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:add ailment-${ailment}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: chance }, targetData)));\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                duration: turnDuration,\n                buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:add ailment-${a}`),\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const params = {\n            'atkLow%': rawModLow,\n            'atkHigh%': rawModHigh,\n            flatAtk: rawFlatAtk,\n        };\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        let results;\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results = [\n                Object.assign({ id: 'proc:42:sacrificial attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData),\n                {\n                    id: 'proc:42:instant death',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: true,\n                    targetArea: TargetArea.Single,\n                    targetType: TargetType.Self,\n                },\n            ];\n        }\n        else {\n            results = [];\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        const originalId = '43';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let overdriveFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n            overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n        }\n        const results = [];\n        if (overdriveFill !== 0) {\n            results.push(Object.assign({ id: 'proc:43:burst od fill', originalId,\n                sources,\n                effectDelay, value: overdriveFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const damageParams = {\n            'atk%': '0',\n            flatAtk: '0',\n            'dmg%': '0',\n        };\n        let affectsElement = false, unitIndex = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n            [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n            unitIndex = parseNumberOrDefault(rawUnitIndex);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            damageParams['atk%'] = effect['dot atk%'];\n            damageParams.flatAtk = effect['dot flat atk'];\n            damageParams['dmg%'] = effect['dot dmg%'];\n            affectsElement = !!(effect['dot element affected']);\n            unitIndex = parseNumberOrDefault(effect['dot unit index']);\n            turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n        }\n        const filteredDamageParams = Object.entries(damageParams)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (Object.keys(filteredDamageParams).length > 0) {\n            results.push(Object.assign({ id: 'proc:44:damage over time', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                    unitIndex }) }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:44:damage over time'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('45', (effect, context, injectionContext) => {\n        const originalId = '45';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let bb = 0, sbb = 0, ubb = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            bb = parseNumberOrDefault(rawBb);\n            sbb = parseNumberOrDefault(rawSbb);\n            ubb = parseNumberOrDefault(rawUbb);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            bb = parseNumberOrDefault(effect['bb atk% buff']);\n            sbb = parseNumberOrDefault(effect['sbb atk% buff']);\n            ubb = parseNumberOrDefault(effect['ubb atk% buff']);\n            turnDuration = parseNumberOrDefault(effect['buff turns (72)']);\n        }\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:attack boost-bb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:attack boost-sbb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:attack boost-ubb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: ubb }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:45:attack boost-${type}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('46', (effect, context, injectionContext) => {\n        const originalId = '46';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawHpLow, rawHpHigh, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const hpLow = parseNumberOrDefault(rawHpLow);\n        const hpHigh = parseNumberOrDefault(rawHpHigh);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (hpLow !== 0 || hpHigh !== 0 || hits !== 0 || distribution !== 0) {\n            const entry = Object.assign({ id: 'proc:46:non-lethal proportional attack', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (hpLow !== 0 || hpHigh !== 0) {\n                entry.value = {\n                    'hpDamageLow%': hpLow,\n                    'hpDamageHigh%': hpHigh,\n                    hits,\n                    distribution,\n                };\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('47', (effect, context, injectionContext) => {\n        const originalId = '47';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'baseAtk%': '0',\n            'maxAddedAtk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let proportionalMode = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawMaxAttackValue, rawProportionalMode;\n            [params['baseAtk%'], rawMaxAttackValue, rawProportionalMode, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue) - parseNumberOrDefault(params['baseAtk%']);\n            proportionalMode = rawProportionalMode === '1' ? 'lost' : 'remaining';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['baseAtk%'] = effect['bb base atk%'];\n            params['maxAddedAtk%'] = effect['bb added atk% based on hp'];\n            proportionalMode = effect['bb added atk% proportional to hp'] || 'unknown';\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:47:hp scaled attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { proportionalMode,\n                    hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('48', (effect, context, injectionContext) => {\n        const originalId = '48';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawBasePercentHpLow, rawBasePercentHpHigh, rawCurrentPercentHpLow, rawCurrentPercentHpHigh, rawFixedDamage, rawChance, rawIsLethal, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const basePercentHpLow = parseNumberOrDefault(rawBasePercentHpLow);\n        const basePercentHpHigh = parseNumberOrDefault(rawBasePercentHpHigh);\n        const currentPercentHpLow = parseNumberOrDefault(rawCurrentPercentHpLow);\n        const currentPercentHpHigh = parseNumberOrDefault(rawCurrentPercentHpHigh);\n        const fixedDamage = parseNumberOrDefault(rawFixedDamage);\n        const chance = parseNumberOrDefault(rawChance);\n        const isLethal = rawIsLethal === '1';\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        /**\n         * Current assumption is that each set of parameters results in a separate attack\n         * due to no known skills having more than one of each variant.\n         */\n        const results = [];\n        const createAttackOfType = (type, valueProperties) => (Object.assign({ id: `proc:48:piercing attack-${type}`, originalId,\n            sources,\n            effectDelay, value: Object.assign(Object.assign({}, valueProperties), { isLethal,\n                chance,\n                hits,\n                distribution }) }, targetData));\n        if (basePercentHpLow !== 0 || basePercentHpHigh !== 0) {\n            results.push(createAttackOfType('base', {\n                'hpDamageLow%': basePercentHpLow,\n                'hpDamageHigh%': basePercentHpHigh,\n            }));\n        }\n        if (currentPercentHpLow !== 0 || currentPercentHpHigh !== 0) {\n            results.push(createAttackOfType('current', {\n                'hpDamageLow%': currentPercentHpLow,\n                'hpDamageHigh%': currentPercentHpHigh,\n            }));\n        }\n        if (fixedDamage !== 0) {\n            results.push(createAttackOfType('fixed', {\n                value: fixedDamage,\n            }));\n        }\n        if (results.length === 0 && (hits !== 0 || distribution !== 0)) {\n            results.push(createAttackOfType('unknown', {}));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('49', (effect, context, injectionContext) => {\n        const originalId = '49';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawChance, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const chance = parseNumberOrDefault(rawChance);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:49:chance instant death', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('50', (effect, context, injectionContext) => {\n        const originalId = '50';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawDamageLow, rawDamageHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const reflectedDamageLow = parseNumberOrDefault(rawDamageLow);\n        const reflectedDamageHigh = parseNumberOrDefault(rawDamageHigh);\n        const chance = parseNumberOrDefault(rawChance);\n        const turnDuration = parseNumberOrDefault(rawTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const hasAnyRangeValues = reflectedDamageLow !== 0 || reflectedDamageHigh !== 0;\n        const results = [];\n        if (hasAnyRangeValues) {\n            results.push(Object.assign({ id: 'proc:50:chance damage reflect', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    'reflectedDamageLow%': reflectedDamageLow,\n                    'reflectedDamageHigh%': reflectedDamageHigh,\n                    chance,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:50:chance damage reflect'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('51', (effect, context, injectionContext) => {\n        const originalId = '51';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedReductions = [];\n        let debuffTurnDuration = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            [\n                { type: Ailment.AttackReduction, reductionValue: parseNumberOrDefault(params[0]), chance: parseNumberOrDefault(params[3]) },\n                { type: Ailment.DefenseReduction, reductionValue: parseNumberOrDefault(params[1]), chance: parseNumberOrDefault(params[4]) },\n                { type: Ailment.RecoveryReduction, reductionValue: parseNumberOrDefault(params[2]), chance: parseNumberOrDefault(params[5]) },\n            ].forEach(({ type, reductionValue, chance }) => {\n                if (reductionValue !== 0 || chance !== 0) {\n                    inflictedReductions.push({ type, reductionValue, chance });\n                }\n            });\n            debuffTurnDuration = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            [\n                { type: Ailment.AttackReduction, reductionValueKey: 'inflict atk% debuff (2)', chanceKey: 'inflict atk% debuff chance% (74)' },\n                { type: Ailment.DefenseReduction, reductionValueKey: 'inflict def% debuff (4)', chanceKey: 'inflict def% debuff chance% (75)' },\n                { type: Ailment.RecoveryReduction, reductionValueKey: 'inflict rec% debuff (6)', chanceKey: 'inflict rec% debuff chance% (76)' },\n            ].forEach(({ type, reductionValueKey, chanceKey }) => {\n                const reductionValue = parseNumberOrDefault(effect[reductionValueKey]);\n                const chance = parseNumberOrDefault(effect[chanceKey]);\n                if (reductionValue !== 0 || chance !== 0) {\n                    inflictedReductions.push({ type, reductionValue, chance });\n                }\n            });\n            debuffTurnDuration = parseNumberOrDefault(effect['stat% debuff turns']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedReductions.map(({ type, reductionValue, chance }) => (Object.assign({ id: `proc:51:add to attack-${type}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: {\n                reductionValue,\n                chance,\n                debuffTurnDuration,\n            } }, targetData)));\n        if (results.length === 0 && (isTurnDurationBuff(context, turnDuration, injectionContext) || isTurnDurationBuff(context, debuffTurnDuration, injectionContext))) {\n            // manually create turn duration buff to account for debuff turn duration\n            results.push(Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n                sources, value: {\n                    buffs: [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction].map((a) => `proc:51:add to attack-${a}`),\n                    duration: turnDuration,\n                    debuffTurnDuration: debuffTurnDuration,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('52', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'bb gauge fill rate% buff',\n            effectTurnDurationKey: 'buff turns (77)',\n            buffId: 'proc:52:bc efficacy',\n            originalId: '52',\n        });\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        const originalId = '53';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const inflictionChances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    inflictionChances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['counter inflict ailment turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(inflictionChances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:53:inflict on hit-${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration, conditions: { whenAttacked: true } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:53:inflict on hit-${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('54', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'crit multiplier%',\n            effectTurnDurationKey: 'buff turns (84)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            buffId: 'proc:54:critical damage boost',\n            originalId: '54',\n        });\n    });\n    map.set('55', (effect, context, injectionContext) => {\n        const originalId = '55';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let elements;\n        let damageBoost = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => NON_ZERO_ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            damageBoost = parseNumberOrDefault(params[6]) * 100;\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            elements = Object.values(NON_ZERO_ELEMENT_MAPPING).filter((element) => !!effect[`${element} units do extra elemental weakness dmg`]);\n            damageBoost = parseNumberOrDefault(effect['elemental weakness multiplier%']);\n            turnDuration = parseNumberOrDefault(effect['elemental weakness buff turns']);\n        }\n        let results = [];\n        if (damageBoost !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `proc:55:elemental weakness damage-${element}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: damageBoost }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'proc:55:elemental weakness damage-unknown', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: damageBoost }, targetData));\n            }\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:55:elemental weakness damage-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('56', (effect, context, injectionContext) => {\n        const originalId = '56';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let chance = 0, recoveredHpPercent = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawChance, rawRecoverHp, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            chance = parseNumberOrDefault(rawChance);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoverHp);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(effect['angel idol recover chance%']);\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            turnDuration = parseNumberOrDefault(effect['angel idol buff turns (91)']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:56:chance ko resistance', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: { 'recoveredHp%': recoveredHpPercent, chance } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:56:chance ko resistance'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('57', (effect, context, injectionContext) => {\n        const originalId = '57';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let bcBaseResist = 0, bcBuffResist = 0;\n        let hcBaseResist = 0, hcBuffResist = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawBcBaseResist, rawBcBuffResist, rawHcBaseResist, rawHcBuffResist, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            bcBaseResist = parseNumberOrDefault(rawBcBaseResist);\n            bcBuffResist = parseNumberOrDefault(rawBcBuffResist);\n            hcBaseResist = parseNumberOrDefault(rawHcBaseResist);\n            hcBuffResist = parseNumberOrDefault(rawHcBuffResist);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            // Deathmax's datamine doesn't parse HC drop resistance\n            bcBaseResist = parseNumberOrDefault(effect['base bc drop% resist buff']);\n            bcBuffResist = parseNumberOrDefault(effect['buffed bc drop% resist buff']);\n            turnDuration = parseNumberOrDefault(effect['bc drop% resist buff turns (92)']);\n        }\n        const results = [];\n        if (bcBaseResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:bc drop resistance-base', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bcBaseResist }, targetData));\n        }\n        if (bcBuffResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:bc drop resistance-buff', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bcBuffResist }, targetData));\n        }\n        if (hcBaseResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:hc drop resistance-base', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: hcBaseResist }, targetData));\n        }\n        if (hcBuffResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:hc drop resistance-buff', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: hcBuffResist }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [\n                    'proc:57:bc drop resistance-base',\n                    'proc:57:bc drop resistance-buff',\n                    'proc:57:hc drop resistance-base',\n                    'proc:57:hc drop resistance-buff',\n                ],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('58', (effect, context, injectionContext) => {\n        const originalId = '58';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let damageIncrease = 0, chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            damageIncrease = parseNumberOrDefault(effect['spark dmg% received']);\n            chance = parseNumberOrDefault(effect['spark dmg received apply%']);\n            turnDuration = parseNumberOrDefault(effect['spark dmg received debuff turns (94)']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:58:spark vulnerability', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: { 'sparkDamage%': damageIncrease, chance } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:58:spark vulnerability'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('59', (effect, context, injectionContext) => {\n        const originalId = '59';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const bb = parseNumberOrDefault(rawBb);\n        const sbb = parseNumberOrDefault(rawSbb);\n        const ubb = parseNumberOrDefault(rawUbb);\n        const turnDuration = parseNumberOrDefault(rawTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'proc:59:attack reduction-bb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'proc:59:attack reduction-sbb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'proc:59:attack reduction-ubb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: ubb }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:59:attack reduction-${type}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('61', (effect, context, injectionContext) => {\n        const originalId = '61';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'baseAtk%': '0',\n            'maxAddedAtk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawMaxAttackValue;\n            [params['baseAtk%'], rawMaxAttackValue, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            params['baseAtk%'] = effect['bb base atk%'];\n            params['maxAddedAtk%'] = effect['bb max atk% based on ally bb gauge and clear bb gauges'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        let results;\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results = [\n                Object.assign({ id: 'proc:61:party bb gauge-scaled attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData),\n                {\n                    id: 'proc:61:party bc drain',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: true,\n                    targetArea: TargetArea.Aoe,\n                    targetType: TargetType.Party,\n                },\n            ];\n        }\n        else {\n            results = [];\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('62', (effect, context, injectionContext) => {\n        const originalId = '62';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let element;\n        let hp = 0, defense = 0, damageAbsorption = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawHp, rawDefense, rawDamageAbsorption, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            hp = parseNumberOrDefault(rawHp);\n            defense = parseNumberOrDefault(rawDefense);\n            damageAbsorption = parseNumberOrDefault(rawDamageAbsorption);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const effectElement = effect['elemental barrier element'];\n            element = (effectElement && Object.values(ELEMENT_MAPPING).find((e) => e === effectElement)) || BuffConditionElement.Unknown;\n            hp = parseNumberOrDefault(effect['elemental barrier hp']);\n            defense = parseNumberOrDefault(effect['elemental barrier def']);\n            damageAbsorption = parseNumberOrDefault(effect['elemental barrier absorb dmg%']);\n        }\n        const results = [];\n        if (hp !== 0 || defense !== 0 || damageAbsorption !== 0) {\n            results.push(Object.assign({ id: `proc:62:barrier-${element}`, originalId,\n                sources,\n                effectDelay, value: {\n                    hp,\n                    defense,\n                    'damageAbsorption%': damageAbsorption,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('64', (effect, context, injectionContext) => {\n        const originalId = '64';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            'addedAtkPerUse%': '0',\n            maxIncreases: '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params['addedAtkPerUse%'], params.maxIncreases, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params['addedAtkPerUse%'] = effect['bb atk% inc per use'];\n            params.maxIncreases = effect['bb atk% max number of inc'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:64:consecutive usage attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('65', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'atk% buff when enemy has ailment',\n            effectTurnDurationKey: 'atk% buff turns (110)',\n            buffId: 'proc:65:ailment attack boost',\n            originalId: '65',\n        });\n    });\n    map.set('66', (effect, context, injectionContext) => {\n        const originalId = '66';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHp = 0, chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, rawChance, ...extraParams] = splitEffectParams(effect);\n            recoveredHp = parseNumberOrDefault(rawRecoveredHp);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            recoveredHp = parseNumberOrDefault(effect['revive unit hp%']);\n            chance = parseNumberOrDefault(effect['revive unit chance%']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:66:chance revive', originalId,\n                sources,\n                effectDelay, value: { 'reviveToHp%': recoveredHp, chance } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('67', (effect, context, injectionContext) => {\n        return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            originalId: '67',\n            buffId: 'proc:67:bc fill on spark',\n            effectKeyLow: 'bc fill on spark low',\n            effectKeyHigh: 'bc fill on spark high',\n            effectKeyChance: 'bc fill on spark%',\n            effectTurnDurationKey: 'bc fill on spark buff turns (111)',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n        });\n    });\n    map.set('68', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'guard increase mitigation%',\n            effectTurnDurationKey: 'guard increase mitigation buff turns (113)',\n            buffId: 'proc:68:guard mitigation',\n            originalId: '68',\n        });\n    });\n    map.set('69', (effect, context, injectionContext) => {\n        const originalId = '69';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            if ('bb bc fill on guard' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill on guard']);\n            }\n            if ('bb bc fill% on guard' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill% on guard']);\n            }\n            turnDuration = parseNumberOrDefault(effect['bb bc fill on guard buff turns (114)']);\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:69:bc fill on guard-flat', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: flatFill, conditions: {\n                    onGuard: true,\n                } }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:69:bc fill on guard-percent', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: percentFill, conditions: {\n                    onGuard: true,\n                } }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:69:bc fill on guard-flat', 'proc:69:bc fill on guard-percent'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('71', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'bb fill inc%',\n            effectTurnDurationKey: 'bb fill inc buff turns (112)',\n            buffId: 'proc:71:bc efficacy reduction',\n            originalId: '71',\n        });\n    });\n    map.set('73', (effect, context, injectionContext) => {\n        const originalId = '73';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction];\n        const resistances = {\n            [Ailment.AttackReduction]: '0',\n            [Ailment.DefenseReduction]: '0',\n            [Ailment.RecoveryReduction]: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [resistances[Ailment.AttackReduction], resistances[Ailment.DefenseReduction], resistances[Ailment.RecoveryReduction], rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.includes('resist%'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    resistances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['stat down immunity buff turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:73:resist-${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:73:resist-${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('75', (effect, context, injectionContext) => {\n        const originalId = '75';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'baseAtk%': '0',\n            'addedAttackPerUnitWithMatchingElement%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let element;\n        let unknownParams;\n        if (effect.params) {\n            let extraParams, rawElement;\n            [rawElement, params['baseAtk%'], params['addedAttackPerUnitWithMatchingElement%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            // in Deathmax's datamine, this proc is incorrectly parsed as a tri-stat buff\n            const effectElement = effect['counted element for buff multiplier'];\n            if (!effectElement) {\n                element = BuffConditionElement.Unknown;\n            }\n            else {\n                element = effectElement;\n            }\n            params['baseAtk%'] = effect['atk% buff (1)'];\n            params['addedAttackPerUnitWithMatchingElement%'] = effect['def% buff (3)'];\n            params.flatAtk = effect['rec% buff (5)'];\n            params['crit%'] = effect['crit% buff (7)'];\n            params['bc%'] = effect['buff turns'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:75:element squad-scaled attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { elementToMatch: element, hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('76', (effect, context, injectionContext) => {\n        const originalId = '76';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let maxExtraActions = 0, chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawMaxExtraActions, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            maxExtraActions = parseNumberOrDefault(rawMaxExtraActions);\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            maxExtraActions = parseNumberOrDefault(effect['max number of extra actions']);\n            chance = parseNumberOrDefault(effect['chance% for extra action']);\n            turnDuration = parseNumberOrDefault(effect['extra action buff turns (123)']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:76:extra action', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: { maxExtraActions, chance } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:76:extra action'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('78', (effect, context, injectionContext) => {\n        const originalId = '78';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            coreStatProperties.forEach((statType) => {\n                const effectKey = `self ${statType}% buff`;\n                if (effectKey in effect) {\n                    params[statType] = effect[effectKey];\n                }\n            });\n            params.turnDuration = effect['self stat buff turns'];\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:78:self stat boost-${statKey}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:78:self stat boost-${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('79', (effect, context, injectionContext) => {\n        const originalId = '79';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawExpBoost, rawDurationInMinutes = '', ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const expBoost = parseNumberOrDefault(rawExpBoost);\n        const durationInMinutes = parseNumberOrDefault(rawDurationInMinutes);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (expBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:79:player exp boost', originalId,\n                sources,\n                effectDelay, value: { 'expBoost%': expBoost, durationInMinutes } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('82', (effect, context, injectionContext) => {\n        const originalId = '82';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [summonGroup, rawPercentHp, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const percentHp = parseNumberOrDefault(rawPercentHp);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (summonGroup) {\n            results.push(Object.assign({ id: 'proc:82:resummon', originalId,\n                sources,\n                effectDelay, value: {\n                    summonGroup,\n                    'startingHp%': percentHp,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('83', (effect, context, injectionContext) => {\n        const originalId = '83';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let chance = 0, sparkDamage = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawChance, rawSparkDamage, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            chance = parseNumberOrDefault(rawChance);\n            sparkDamage = parseNumberOrDefault(rawSparkDamage);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(effect['spark dmg inc chance%']);\n            sparkDamage = parseNumberOrDefault(effect['spark dmg inc% buff']);\n            turnDuration = parseNumberOrDefault(effect['spark dmg inc buff turns (131)']);\n        }\n        const results = [];\n        if (sparkDamage !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'proc:83:spark critical', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: { 'sparkDamage%': sparkDamage, chance } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:83:spark critical'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('84', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'od fill rate% buff',\n            effectTurnDurationKey: 'od fill rate buff turns (132)',\n            buffId: 'proc:84:od fill rate',\n            originalId: '84',\n        });\n    });\n    map.set('85', (effect, context, injectionContext) => {\n        return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            originalId: '85',\n            buffId: 'proc:85:heal on hit',\n            effectKeyLow: 'hp recover from dmg% low',\n            effectKeyHigh: 'hp recover from dmg% high',\n            effectKeyChance: 'hp recover from dmg chance',\n            effectTurnDurationKey: 'hp recover from dmg buff turns (133)',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateConditions: () => ({ whenAttacked: true }),\n        });\n    });\n    map.set('86', (effect, context, injectionContext) => {\n        return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            originalId: '86',\n            buffId: 'proc:86:hp absorb',\n            effectKeyLow: 'hp drain% low',\n            effectKeyHigh: 'hp drain% high',\n            effectKeyChance: 'hp drain chance%',\n            effectTurnDurationKey: 'hp drain buff turns (134)',\n            buffKeyLow: 'drainHealLow%',\n            buffKeyHigh: 'drainHealHigh%',\n        });\n    });\n    map.set('87', (effect, context, injectionContext) => {\n        return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            originalId: '87',\n            buffId: 'proc:87:heal on spark',\n            effectKeyLow: 'spark recover hp low',\n            effectKeyHigh: 'spark recover hp high',\n            effectKeyChance: 'spark recover hp chance%',\n            effectTurnDurationKey: 'spark recover hp buff turns (135)',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n        });\n    });\n    map.set('88', (effect, context, injectionContext) => {\n        const originalId = '88';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            value = parseNumberOrDefault(params[0]);\n            turnDuration = parseNumberOrDefault(params[6]);\n            const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['spark dmg inc%']);\n            turnDuration = parseNumberOrDefault(effect['spark dmg inc% turns (136)']);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'proc:88:self spark damage', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:88:self spark damage'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('89', (effect, context, injectionContext) => {\n        const originalId = '89';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let turnDuration = 0;\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawConvertedStat, rawTurnDuration;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:89:self converted-${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        convertedStat,\n                        value,\n                    } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:89:self converted-${statKey}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('92', (effect, context, injectionContext) => {\n        const originalId = '92';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatHpBoost = 0;\n        let percentHpBoost = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n            flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n            percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        const results = [];\n        if (flatHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:92:self max hp boost-flat', originalId,\n                sources,\n                effectDelay, value: flatHpBoost }, targetData));\n        }\n        if (percentHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:92:self max hp boost-percent', originalId,\n                sources,\n                effectDelay, value: percentHpBoost }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('93', (effect, context, injectionContext) => {\n        const originalId = '93';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let ResistType;\n        (function (ResistType) {\n            ResistType[\"CriticalDamage\"] = \"critical damage\";\n            ResistType[\"ElementDamage\"] = \"element damage\";\n            ResistType[\"SparkDamage\"] = \"spark damage\";\n        })(ResistType || (ResistType = {}));\n        const resistances = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseSparkDamageResist, rawBuffSparkDamageResist, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            [\n                { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                { resistType: ResistType.SparkDamage, base: parseNumberOrDefault(rawBaseSparkDamageResist), buff: parseNumberOrDefault(rawBuffSparkDamageResist) },\n            ].forEach(({ resistType, base, buff }) => {\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            [\n                { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist% (143)', buffKey: 'crit dmg buffed damage resist% (143)' },\n                { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist% (144)', buffKey: 'strong buffed element damage resist% (144)' },\n                { resistType: ResistType.SparkDamage, baseKey: 'spark dmg base resist% (145)', buffKey: 'spark dmg buffed resist% (145)' },\n            ].forEach(({ resistType, baseKey, buffKey }) => {\n                const base = parseNumberOrDefault(effect[baseKey]);\n                const buff = parseNumberOrDefault(effect[buffKey]);\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['dmg resist turns']);\n        }\n        const results = [];\n        resistances.forEach(({ resistType, base, buff }) => {\n            if (base !== 0) {\n                results.push(Object.assign({ id: `proc:93:${resistType} resistance-base`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: base }, targetData));\n            }\n            if (buff !== 0) {\n                results.push(Object.assign({ id: `proc:93:${resistType} resistance-buff`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: buff }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            const buffs = [];\n            [ResistType.CriticalDamage, ResistType.ElementDamage, ResistType.SparkDamage].forEach((resistType) => {\n                buffs.push(`proc:93:${resistType} resistance-base`, `proc:93:${resistType} resistance-buff`);\n            });\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs,\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('94', (effect, context, injectionContext) => {\n        const originalId = '94';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let damageIncrease = 0, chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            damageIncrease = parseNumberOrDefault(effect['aoe atk inc%']);\n            chance = parseNumberOrDefault(effect['chance to aoe']);\n            turnDuration = parseNumberOrDefault(effect['aoe atk turns (142)']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:94:aoe normal attack', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: { 'damageModifier%': damageIncrease, chance } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:94:aoe normal attack'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('95', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            buffId: 'proc:95:sphere lock',\n            originalId: '95',\n        });\n    });\n    map.set('96', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            buffId: 'proc:96:es lock',\n            originalId: '96',\n        });\n    });\n    map.set('97', (effect, context, injectionContext) => {\n        const originalId = '97';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        /**\n         * @desc Mapping of a given element to the element that is weak to it. For example, given a key of\n         * `fire`, the corresponding value is `earth` because `earth` units are weak to (i.e. take extra\n         * damage from) `fire` attacks.\n         */\n        const weakerElementMapping = {\n            [UnitElement.Fire]: UnitElement.Earth,\n            [UnitElement.Water]: UnitElement.Fire,\n            [UnitElement.Earth]: UnitElement.Thunder,\n            [UnitElement.Thunder]: UnitElement.Water,\n            [UnitElement.Light]: UnitElement.Dark,\n            [UnitElement.Dark]: UnitElement.Light,\n        };\n        const getOpposingWeakerElement = (inputElement) => {\n            return (inputElement && Object.hasOwnProperty.call(weakerElementMapping, inputElement))\n                ? weakerElementMapping[inputElement]\n                : BuffConditionElement.Unknown;\n        };\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        const targetElements = [getOpposingWeakerElement(context.sourceElement)];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams, rawTargetElementsParam;\n            [rawTargetElementsParam, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            if (rawTargetElementsParam && rawTargetElementsParam !== '0') {\n                targetElements.push(getOpposingWeakerElement(ELEMENT_MAPPING[rawTargetElementsParam]));\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            // in Deathmax's datamine, this proc is incorrectly parsed as a tri-stat buff\n            const extraTargetElement = effect['additional element used for attack check'];\n            if (extraTargetElement && extraTargetElement !== 'self only') {\n                targetElements.push(getOpposingWeakerElement(extraTargetElement));\n            }\n            else if (!extraTargetElement) {\n                targetElements.push(BuffConditionElement.Unknown);\n            }\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:97:element specific attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }), conditions: { targetElements } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('113', (effect, context, injectionContext) => {\n        const originalId = '113';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            value = parseNumberOrDefault(params[2]);\n            turnDuration = parseNumberOrDefault(params[3]);\n            unknownParams = createUnknownParamsEntryFromExtraParams([params[0], params[1], '0', '0'].concat(params.slice(4)), 0, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['od fill']);\n            turnDuration = parseNumberOrDefault(effect['od fill turns (148)']);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'proc:113:gradual od fill', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:113:gradual od fill'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport { getProcEffectToBuffMapping } from './proc-effect-mapping';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PROC_ID } from '../constants';\nimport isProcEffect from '../isProcEffect';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to {@link IBuff} format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given proc effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            originalId: id,\n            effectDelay: effect['effect delay time(ms)/frame'],\n            targetType: effect['target type'],\n            targetArea: effect['target area'],\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given proc effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Proc effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given proc effect object.\n */\nexport default function convertProcEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isProcEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId, BuffConditionElement } from './buff-types';\nimport { createSourcesFromContext, parseNumberOrDefault, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from './_helpers';\nimport { TargetType, TargetArea, UnitElement } from '../../datamine-types';\nlet mapping;\n/**\n * @description Retrieve the conditional-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of conditional IDs to functions.\n */\nexport function getConditionalEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of conditional effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, }) => (Object.assign({ id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS, originalId,\n        sources, value: unknownParams }, targetData));\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            }));\n        }\n    };\n    const getDefaultTargetData = () => ({ targetType: TargetType.Self, targetArea: TargetArea.Single });\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const splitParams = typeof effect.params === 'string' ? effect.params.split('&') : [];\n        const targetData = getDefaultTargetData();\n        const turnDuration = parseNumberOrDefault(effect.turnDuration);\n        return { targetData, sources, splitParams, turnDuration };\n    };\n    const parseConditionalWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, buffId, returnBuffWithValueOfZero = false, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawValue, ...extraParams] = splitParams;\n        const value = parseParamValue(rawValue);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [];\n        if (returnBuffWithValueOfZero || value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources, duration: turnDuration, value }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    };\n    const parseConditionalWithOnlyBaseAndBuffResistanceParameters = ({ effect, context, injectionContext, originalId, baseResistanceBuffId, buffResistanceBuffId, }) => {\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawBaseResist, rawBuffResist, ...extraParams] = splitParams;\n        const baseResist = parseNumberOrDefault(rawBaseResist);\n        const buffResist = parseNumberOrDefault(rawBuffResist);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (baseResist !== 0) {\n            results.push(Object.assign({ id: baseResistanceBuffId, originalId,\n                sources, duration: turnDuration, value: baseResist }, targetData));\n        }\n        if (buffResist !== 0) {\n            results.push(Object.assign({ id: buffResistanceBuffId, originalId,\n                sources, duration: turnDuration, value: buffResist }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    };\n    const parseBarrierConditionalBuff = ({ effect, context, injectionContext, buffId, originalId, }) => {\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawElement, rawHp, ...extraParams] = splitParams;\n        const element = ELEMENT_MAPPING[rawElement] || rawElement || BuffConditionElement.Unknown;\n        const hp = parseNumberOrDefault(rawHp);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (hp !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources, duration: turnDuration, value: {\n                    hp,\n                    parsedElement: element,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '1',\n            buffId: 'conditional:1:attack buff',\n        });\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '3',\n            buffId: 'conditional:3:defense buff',\n        });\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '5',\n            buffId: 'conditional:5:recovery buff',\n        });\n    });\n    map.set('7', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '7',\n            buffId: 'conditional:7:critical hit rate buff',\n        });\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const originalId = '8';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitParams;\n        const healLow = parseNumberOrDefault(rawHealLow);\n        const healHigh = parseNumberOrDefault(rawHealHigh);\n        const addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'conditional:8:gradual heal', originalId,\n                sources, duration: turnDuration, value: {\n                    healLow,\n                    healHigh,\n                    'addedRec%': addedRec,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '12',\n            buffId: 'conditional:12:guaranteed ko resistance',\n            returnBuffWithValueOfZero: true,\n        });\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const originalId = '13';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawElement, rawValue, ...extraParams] = splitParams;\n        const element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n        const value = parseNumberOrDefault(rawValue);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'conditional:13:elemental attack buff', originalId,\n                sources, duration: turnDuration, value, conditions: {\n                    targetElements: [element],\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawElement, rawValue, ...extraParams] = splitParams;\n        const element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n        const value = parseNumberOrDefault(rawValue);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'conditional:14:elemental defense buff', originalId,\n                sources, duration: turnDuration, value, conditions: {\n                    targetElements: [element],\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('21', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '21',\n            buffId: 'conditional:21:fire mitigation',\n        });\n    });\n    map.set('22', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '22',\n            buffId: 'conditional:22:water mitigation',\n        });\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '23',\n            buffId: 'conditional:23:earth mitigation',\n        });\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '24',\n            buffId: 'conditional:24:thunder mitigation',\n        });\n    });\n    map.set('25', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '25',\n            buffId: 'conditional:25:light mitigation',\n        });\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '26',\n            buffId: 'conditional:26:dark mitigation',\n        });\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '36',\n            buffId: 'conditional:36:mitigation',\n        });\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '37',\n            buffId: 'conditional:37:gradual bc fill',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n        });\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '40',\n            buffId: 'conditional:40:spark damage',\n        });\n    });\n    map.set('51', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '51',\n            buffId: 'conditional:51:add fire element',\n            returnBuffWithValueOfZero: true,\n        });\n    });\n    map.set('52', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '52',\n            buffId: 'conditional:52:add water element',\n            returnBuffWithValueOfZero: true,\n        });\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '53',\n            buffId: 'conditional:53:add earth element',\n            returnBuffWithValueOfZero: true,\n        });\n    });\n    map.set('54', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '54',\n            buffId: 'conditional:54:add thunder element',\n            returnBuffWithValueOfZero: true,\n        });\n    });\n    map.set('55', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '55',\n            buffId: 'conditional:55:add light element',\n            returnBuffWithValueOfZero: true,\n        });\n    });\n    map.set('56', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '56',\n            buffId: 'conditional:56:add dark element',\n            returnBuffWithValueOfZero: true,\n        });\n    });\n    map.set('72', (effect, context, injectionContext) => {\n        const originalId = '72';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawBb, rawSbb, rawUbb, ...extraParams] = splitParams;\n        const bb = parseNumberOrDefault(rawBb);\n        const sbb = parseNumberOrDefault(rawSbb);\n        const ubb = parseNumberOrDefault(rawUbb);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'conditional:72:attack boost-bb', originalId,\n                sources, duration: turnDuration, value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'conditional:72:attack boost-sbb', originalId,\n                sources, duration: turnDuration, value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'conditional:72:attack boost-ubb', originalId,\n                sources, duration: turnDuration, value: ubb }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('74', (effect, context, injectionContext) => {\n        const originalId = '74';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawReductionValue, rawChance, rawDebuffTurns, ...extraParams] = splitParams;\n        const reductionValue = parseNumberOrDefault(rawReductionValue);\n        const chance = parseNumberOrDefault(rawChance);\n        const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurns);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (reductionValue !== 0 || chance !== 0 || debuffTurnDuration !== 0) {\n            results.push(Object.assign({ id: 'conditional:74:add atk down to attack', originalId,\n                sources, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('75', (effect, context, injectionContext) => {\n        const originalId = '75';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawReductionValue, rawChance, rawDebuffTurns, ...extraParams] = splitParams;\n        const reductionValue = parseNumberOrDefault(rawReductionValue);\n        const chance = parseNumberOrDefault(rawChance);\n        const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurns);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (reductionValue !== 0 || chance !== 0 || debuffTurnDuration !== 0) {\n            results.push(Object.assign({ id: 'conditional:75:add def down to attack', originalId,\n                sources, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('84', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '84',\n            buffId: 'conditional:84:critical damage',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n        });\n    });\n    map.set('91', (effect, context, injectionContext) => {\n        const originalId = '91';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawChance, rawHpRecover, ...extraParams] = splitParams;\n        const chance = parseNumberOrDefault(rawChance);\n        const hpRecover = parseNumberOrDefault(rawHpRecover);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'conditional:91:chance ko resistance', originalId,\n                sources, duration: turnDuration, value: {\n                    'hpRecover%': hpRecover,\n                    chance,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('95', (effect, context, injectionContext) => {\n        return parseBarrierConditionalBuff({\n            effect,\n            context,\n            injectionContext,\n            buffId: 'conditional:95:fire barrier',\n            originalId: '95',\n        });\n    });\n    map.set('96', (effect, context, injectionContext) => {\n        return parseBarrierConditionalBuff({\n            effect,\n            context,\n            injectionContext,\n            buffId: 'conditional:96:water barrier',\n            originalId: '96',\n        });\n    });\n    map.set('97', (effect, context, injectionContext) => {\n        return parseBarrierConditionalBuff({\n            effect,\n            context,\n            injectionContext,\n            buffId: 'conditional:97:earth barrier',\n            originalId: '97',\n        });\n    });\n    map.set('98', (effect, context, injectionContext) => {\n        return parseBarrierConditionalBuff({\n            effect,\n            context,\n            injectionContext,\n            buffId: 'conditional:98:thunder barrier',\n            originalId: '98',\n        });\n    });\n    map.set('99', (effect, context, injectionContext) => {\n        return parseBarrierConditionalBuff({\n            effect,\n            context,\n            injectionContext,\n            buffId: 'conditional:99:light barrier',\n            originalId: '99',\n        });\n    });\n    map.set('100', (effect, context, injectionContext) => {\n        return parseBarrierConditionalBuff({\n            effect,\n            context,\n            injectionContext,\n            buffId: 'conditional:100:dark barrier',\n            originalId: '100',\n        });\n    });\n    map.set('111', (effect, context, injectionContext) => {\n        const originalId = '111';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawFillLow, rawFillHigh, rawChance, ...extraParams] = splitParams;\n        const fillLow = parseNumberOrDefault(rawFillLow) / 100;\n        const fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n        const chance = parseNumberOrDefault(rawChance);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (fillLow !== 0 || fillHigh !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'conditional:111:bc fill on spark', originalId,\n                sources, duration: turnDuration, value: {\n                    fillLow,\n                    fillHigh,\n                    chance,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('124', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '124',\n            buffId: 'conditional:124:self attack buff',\n        });\n    });\n    map.set('125', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '125',\n            buffId: 'conditional:125:self defense buff',\n        });\n    });\n    map.set('131', (effect, context, injectionContext) => {\n        const originalId = '131';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawChance, rawSparkDamage, ...extraParams] = splitParams;\n        const chance = parseNumberOrDefault(rawChance);\n        const sparkDamage = parseNumberOrDefault(rawSparkDamage);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (chance !== 0 || sparkDamage !== 0) {\n            results.push(Object.assign({ id: 'conditional:131:spark critical', originalId,\n                sources, duration: turnDuration, value: {\n                    chance,\n                    'sparkDamage%': sparkDamage,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('132', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '132',\n            buffId: 'conditional:132:od fill rate',\n        });\n    });\n    map.set('133', (effect, context, injectionContext) => {\n        const originalId = '133';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawHealLow, rawHealHigh, rawChance, ...extraParams] = splitParams;\n        const healLow = parseNumberOrDefault(rawHealLow);\n        const healHigh = parseNumberOrDefault(rawHealHigh);\n        const chance = parseNumberOrDefault(rawChance);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'conditional:133:heal on hit', originalId,\n                sources, duration: turnDuration, value: {\n                    healLow,\n                    healHigh,\n                    chance,\n                }, conditions: { whenAttacked: true } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('143', (effect, context, injectionContext) => {\n        return parseConditionalWithOnlyBaseAndBuffResistanceParameters({\n            effect,\n            context,\n            injectionContext,\n            originalId: '143',\n            baseResistanceBuffId: 'conditional:143:critical damage reduction-base',\n            buffResistanceBuffId: 'conditional:143:critical damage reduction-buff',\n        });\n    });\n    map.set('144', (effect, context, injectionContext) => {\n        return parseConditionalWithOnlyBaseAndBuffResistanceParameters({\n            effect,\n            context,\n            injectionContext,\n            originalId: '144',\n            baseResistanceBuffId: 'conditional:144:spark damage reduction-base',\n            buffResistanceBuffId: 'conditional:144:spark damage reduction-buff',\n        });\n    });\n    map.set('145', (effect, context, injectionContext) => {\n        return parseConditionalWithOnlyBaseAndBuffResistanceParameters({\n            effect,\n            context,\n            injectionContext,\n            originalId: '145',\n            baseResistanceBuffId: 'conditional:145:elemental weakness damage reduction-base',\n            buffResistanceBuffId: 'conditional:145:elemental weakness damage reduction-buff',\n        });\n    });\n    map.set('153', (effect, context, injectionContext) => {\n        const originalId = '153';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawReductionValue, rawChance, rawDebuffTurnDuration, ...extraParams] = splitParams;\n        const reductionValue = parseNumberOrDefault(rawReductionValue);\n        const chance = parseNumberOrDefault(rawChance);\n        const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (reductionValue !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'conditional:153:chance inflict atk down on hit', originalId,\n                sources, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                }, conditions: { whenAttacked: true } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('10001', (effect, context, injectionContext) => {\n        const originalId = '10001';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawAttack, rawDefense, rawCritRate, rawRecovery, ...extraParams] = splitParams;\n        const stats = {\n            atk: parseNumberOrDefault(rawAttack),\n            def: parseNumberOrDefault(rawDefense),\n            rec: parseNumberOrDefault(rawRecovery),\n            crit: parseNumberOrDefault(rawCritRate),\n        };\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const makeBaseBuff = () => (Object.assign({ originalId,\n            sources, duration: turnDuration }, targetData));\n        const results = [Object.assign(Object.assign({}, makeBaseBuff()), { id: 'conditional:10001:stealth', value: true })];\n        ['atk', 'def', 'crit', 'rec'].forEach((stat) => {\n            const value = stats[stat];\n            if (value !== 0) {\n                results.push(Object.assign(Object.assign({}, makeBaseBuff()), { id: `conditional:10001:stealth-${stat}`, value }));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('10500', (effect, context, injectionContext) => {\n        const originalId = '10500';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawElementValue, rawHp, rawDefense, ...extraParams] = splitParams;\n        const element = ELEMENT_MAPPING[rawElementValue] || BuffConditionElement.Unknown;\n        const hp = parseNumberOrDefault(rawHp);\n        const defense = parseNumberOrDefault(rawDefense);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (hp !== 0 || defense !== 0) {\n            results.push(Object.assign({ id: `conditional:10500:shield-${element}`, originalId,\n                sources, duration: turnDuration, value: {\n                    hp,\n                    defense,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport { getConditionalEffectToBuffMapping } from './conditional-effect-mapping';\nimport { KNOWN_CONDITIONAL_ID } from '../constants';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to {@link IBuff} format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given conditional effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = effect.id || KNOWN_CONDITIONAL_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given conditional effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Conditional effect to extract buffs from\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertConditionalEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const conversionFunction = getConditionalEffectToBuffMapping(context.reloadMapping).get(effect.id);\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { UnitElement, UnitType, Ailment, UnitGender, TargetType, TargetArea } from '../../datamine-types';\nimport { BuffId, BuffConditionElement, BuffSource } from './buff-types';\nimport { createSourcesFromContext, processExtraSkillConditions, getPassiveTargetData, parseNumberOrDefault, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from './_helpers';\nimport convertConditionalEffectToBuffs from './convertConditionalEffectToBuffs';\nimport convertProcEffectToBuffs from './convertProcEffectToBuffs';\nlet mapping;\n/**\n * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @param convertPassiveEffectToBuffs Function used for recursive passive buff parsing.\n * @returns Mapping of passive IDs to functions.\n */\nexport function getPassiveEffectToBuffMapping(reload, convertPassiveEffectToBuffs) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping, convertPassiveEffectToBuffs || (() => []));\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @param convertPassiveEffectToBuffs Function used for recursive passive buff parsing.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map, convertPassiveEffectToBuffs) {\n    const UNKNOWN_PASSIVE_PARAM_EFFECT_KEY = 'unknown passive params';\n    const ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n        X: BuffConditionElement.OmniParadigm,\n    };\n    const TYPE_MAPPING = {\n        1: UnitType.Lord,\n        2: UnitType.Anima,\n        3: UnitType.Breaker,\n        4: UnitType.Guardian,\n        5: UnitType.Oracle,\n        6: UnitType.Rex,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const TARGET_TYPE_MAPPING = {\n        1: TargetType.Party,\n        2: TargetType.Enemy,\n        3: TargetType.Self,\n    };\n    const TARGET_AREA_MAPPING = {\n        1: TargetArea.Single,\n        2: TargetArea.Aoe,\n    };\n    const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n    const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n    const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n        const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        return { conditionInfo, targetData, sources };\n    };\n    const convertConditionalEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n        const conversionFunction = (injectionContext && injectionContext.convertConditionalEffectToBuffs) || convertConditionalEffectToBuffs;\n        return conversionFunction(effect, context);\n    };\n    const convertProcEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n        const conversionFunction = (injectionContext && injectionContext.convertProcEffectToBuffs) || convertProcEffectToBuffs;\n        return conversionFunction(effect, context);\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const splitEffectWithUnknownPassiveParamsProperty = (effect) => {\n        const rawParams = effect.params || effect[UNKNOWN_PASSIVE_PARAM_EFFECT_KEY] || '';\n        return splitEffectParams({ params: rawParams });\n    };\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n        sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n    };\n    let ThresholdType;\n    (function (ThresholdType) {\n        ThresholdType[\"Hp\"] = \"hp\";\n        ThresholdType[\"Bb\"] = \"bb gauge\";\n        ThresholdType[\"DamageTaken\"] = \"damage taken\";\n        ThresholdType[\"DamageDealt\"] = \"damage dealt\";\n        ThresholdType[\"BcReceived\"] = \"bc receive count\";\n        ThresholdType[\"HcReceived\"] = \"hc receive count\";\n        ThresholdType[\"SparkCount\"] = \"spark count\";\n        ThresholdType[\"ChanceGuard\"] = \"on guard\";\n        ThresholdType[\"ChanceCrit\"] = \"on crit\";\n        ThresholdType[\"ChanceOverDrive\"] = \"on overdrive activation\";\n    })(ThresholdType || (ThresholdType = {}));\n    const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n        return {\n            threshold: parseNumberOrDefault(rawThreshold),\n            requireAbove: rawRequireAboveFlag === '1',\n            type: thresholdType,\n        };\n    };\n    const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n        let effectKey, fallbackEffectKey, requireAbove = true;\n        if (thresholdType === ThresholdType.DamageTaken) {\n            effectKey = 'damage threshold activation';\n        }\n        else if (thresholdType === ThresholdType.DamageDealt) {\n            effectKey = 'damage dealt threshold activation';\n        }\n        else if (thresholdType === ThresholdType.BcReceived) {\n            effectKey = 'bc receive count buff activation';\n            fallbackEffectKey = 'bc receive count activation';\n        }\n        else if (thresholdType === ThresholdType.HcReceived) {\n            effectKey = 'hc receive count buff activation';\n            fallbackEffectKey = 'hc receive count activation';\n        }\n        else if (thresholdType === ThresholdType.SparkCount) {\n            effectKey = 'spark count buff activation';\n            fallbackEffectKey = 'spark count activation';\n        }\n        else if (`${thresholdType} above % ${suffix}` in effect) {\n            effectKey = `${thresholdType} above % ${suffix}`;\n        }\n        else {\n            effectKey = `${thresholdType} below % ${suffix}`;\n            requireAbove = false;\n        }\n        const threshold = !fallbackEffectKey\n            ? parseNumberOrDefault(effect[effectKey])\n            : parseNumberOrDefault(effect[effectKey], parseNumberOrDefault(effect[fallbackEffectKey]));\n        return {\n            threshold,\n            requireAbove,\n            type: thresholdType,\n        };\n    };\n    const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n        let conditions;\n        if (type === ThresholdType.Hp) {\n            if (requireAbove) {\n                conditions = { hpGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { hpLessThanOrEqualTo: threshold };\n            }\n        }\n        else if (type === ThresholdType.Bb) {\n            if (requireAbove) {\n                conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { bbGaugeLessThanOrEqualTo: threshold };\n            }\n        }\n        else if (type === ThresholdType.DamageTaken) {\n            conditions = { damageTakenExceeds: threshold };\n        }\n        else if (type === ThresholdType.DamageDealt) {\n            conditions = { damageDealtExceeds: threshold };\n        }\n        else if (type === ThresholdType.BcReceived) {\n            conditions = { bcReceivedExceeds: threshold };\n        }\n        else if (type === ThresholdType.HcReceived) {\n            conditions = { hcReceivedExceeds: threshold };\n        }\n        else if (type === ThresholdType.SparkCount) {\n            conditions = { sparkCountExceeds: threshold };\n        }\n        else if (type === ThresholdType.ChanceGuard) {\n            conditions = { onGuardChance: threshold };\n        }\n        else if (type === ThresholdType.ChanceCrit) {\n            conditions = { onCriticalHitChance: threshold };\n        }\n        else if (type === ThresholdType.ChanceOverDrive) {\n            conditions = { onOverdriveChance: threshold };\n        }\n        return conditions;\n    };\n    const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let value = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseParamValue(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect[effectKey]);\n        }\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let valueLow, valueHigh, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            valueLow = parseParamValue(rawLowValue);\n            valueHigh = parseParamValue(rawHighValue);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n            valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n            chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n        }\n        const results = [];\n        if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources, value: {\n                    [buffKeyLow]: valueLow,\n                    [buffKeyHigh]: valueHigh,\n                    chance,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    const parseConditionalPassiveWithSingleNumericalCondition = ({ effect, context, injectionContext, originalId, buffId, thresholdType, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                id: params[0],\n                params: params[1],\n                turnDuration: parseNumberOrDefault(params[4]),\n            }, context, injectionContext);\n            const maxTriggerCount = parseNumberOrDefault(params[2]);\n            const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], '1', thresholdType);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(5), 5, injectionContext);\n            if (triggeredBuffs.length > 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources, value: {\n                        triggeredBuffs,\n                        maxTriggerCount,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    const parseConditionalBcFillWithSingleNumericalCondition = ({ effect, context, injectionContext, originalId, thresholdType, flatFillBuffId, percentFillBuffId, flatFillEffectKey, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let flatFill, percentFill, thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            flatFill = parseNumberOrDefault(params[0]) / 100;\n            percentFill = parseNumberOrDefault(params[1]);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(params[2], '1', thresholdType);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(3), 3, injectionContext);\n        }\n        else {\n            flatFill = parseNumberOrDefault(typedEffect[flatFillEffectKey]);\n            percentFill = 0; // NOTE: deathmax datamine does not parse this property\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, thresholdType);\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            results.push(Object.assign({ id: flatFillBuffId, originalId,\n                sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n        }\n        if (percentFill !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            results.push(Object.assign({ id: percentFillBuffId, originalId,\n                sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            elements: [],\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let element1, element2;\n            [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            [element1, element2].forEach((elementValue) => {\n                if (elementValue && elementValue !== '0') {\n                    stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            if (Array.isArray(typedEffect['elements buffed'])) {\n                stats.elements = typedEffect['elements buffed'];\n            }\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:elemental-${stat}`, originalId,\n            sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n        if (stats.elements.length > 0) {\n            stats.elements.forEach((element) => {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                    }\n                });\n            });\n        }\n        else {\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                }\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            unitType: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let unitType;\n            [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            if (unitType && unitType !== '0') {\n                stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.unitType = typedEffect['unit type buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetUnitType = stats.unitType || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:3:type based-${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:4:resist-${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let element;\n        let mitigation = '0';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n            if (element !== BuffConditionElement.Unknown) {\n                mitigation = typedEffect[`${element} resist%`];\n            }\n        }\n        const value = parseNumberOrDefault(mitigation);\n        if (value !== 0) {\n            results.push(Object.assign({ id: `passive:5:mitigate-${element}`, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'dmg% mitigation',\n            buffId: 'passive:8:mitigation',\n            originalId: '8',\n        });\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bc fill per turn',\n            buffId: 'passive:9:gradual bc fill',\n            originalId: '9',\n        });\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'hc effectiveness%',\n            buffId: 'passive:10:hc efficacy',\n            originalId: '10',\n        });\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:11:hp conditional-${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                const entry = Object.assign({ id: `passive:12:hp conditional drop boost-${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '13',\n            effectKeyLow: 'bc fill on enemy defeat low',\n            effectKeyHigh: 'bc fill on enemy defeat high',\n            effectKeyChance: 'bc fill on enemy defeat%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            buffId: 'passive:13:bc fill on enemy defeat',\n        });\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageReduction, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            damageReduction = parseNumberOrDefault(rawReduction);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n            chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n        }\n        const results = [];\n        if (damageReduction !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:14:chance mitigation', originalId,\n                sources, value: {\n                    value: damageReduction,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('15', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '15',\n            effectKeyLow: 'hp% recover on enemy defeat low',\n            effectKeyHigh: 'hp% recover on enemy defeat high',\n            effectKeyChance: 'hp% recover on enemy defeat chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            defaultEffectChance: 100,\n            buffId: 'passive:15:heal on enemy defeat',\n        });\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n            healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:16:heal on win', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '17',\n            effectKeyLow: 'hp drain% low',\n            effectKeyHigh: 'hp drain% high',\n            effectKeyChance: 'hp drain chance%',\n            buffKeyLow: 'drainHealLow%',\n            buffKeyHigh: 'drainHealHigh%',\n            buffId: 'passive:17:hp absorb',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        const originalId = '19';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:19:drop boost-${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const originalId = '20';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            let params = splitEffectParams(typedEffect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(typedEffect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = [];\n        inflictedAilments.forEach(({ ailment, chance }) => {\n            if (chance !== 0) {\n                results.push(Object.assign({ id: `passive:20:chance inflict-${ailment}`, originalId,\n                    sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('21', (effect, context, injectionContext) => {\n        const originalId = '21';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let rawDuration, extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['first x turns atk% (1)'];\n            stats.def = typedEffect['first x turns def% (3)'];\n            stats.rec = typedEffect['first x turns rec% (5)'];\n            stats.crit = typedEffect['first x turns crit% (7)'];\n            turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:21:first turn-${stat}`, originalId,\n                    sources,\n                    value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let fillLow, fillHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n            fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n        }\n        const results = [];\n        if (fillLow !== 0 || fillHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:23:bc fill on win', originalId,\n                sources, value: {\n                    fillLow,\n                    fillHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '24',\n            effectKeyLow: 'dmg% to hp when attacked low',\n            effectKeyHigh: 'dmg% to hp when attacked high',\n            effectKeyChance: 'dmg% to hp when attacked chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:24:heal on hit',\n        });\n    });\n    map.set('25', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '25',\n            effectKeyLow: 'bc fill when attacked low',\n            effectKeyHigh: 'bc fill when attacked high',\n            effectKeyChance: 'bc fill when attacked%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:25:bc fill on hit',\n        });\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '26',\n            effectKeyLow: 'dmg% reflect low',\n            effectKeyHigh: 'dmg% reflect high',\n            effectKeyChance: 'dmg% reflect chance%',\n            buffKeyLow: 'damageReflectLow',\n            buffKeyHigh: 'damageReflectHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:26:chance damage reflect',\n        });\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'target% chance',\n            buffId: 'passive:27:target chance change',\n            originalId: '27',\n        });\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let value = 0;\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseNumberOrDefault(rawValue);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect['target% chance']);\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n        }\n        const results = [];\n        if (value !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            const entry = Object.assign({ id: 'passive:28:hp conditional target chance change', originalId,\n                sources,\n                value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'ignore def%',\n            buffId: 'passive:29:chance def ignore',\n            originalId: '29',\n        });\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:30:bb gauge conditional-${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let sparkDamageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawSparkDamageBoost;\n            [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n            });\n        }\n        const results = [];\n        if (sparkDamageBoost !== 0) {\n            results.push(Object.assign({ id: 'passive:31:spark-damage', originalId,\n                sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:31:spark-${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bb gauge fill rate%',\n            buffId: 'passive:32:bc efficacy',\n            originalId: '32',\n        });\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh, addedRec;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n            healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n            addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:33:gradual heal', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                    'addedRec%': addedRec,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'crit multiplier%',\n            buffId: 'passive:34:critical damage',\n            originalId: '34',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n        });\n    });\n    map.set('35', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '35',\n            effectKeyLow: 'bc fill when attacking low',\n            effectKeyHigh: 'bc fill when attacking high',\n            effectKeyChance: 'bc fill when attacking%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onNormalAttack: true }),\n            buffId: 'passive:35:bc fill on normal attack',\n        });\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        const originalId = '36';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let additionalActions = 0, damageModifier = 0, chance = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            additionalActions = parseNumberOrDefault(rawAdditionalActions);\n            damageModifier = parseNumberOrDefault(rawDamageModifier);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n        }\n        const results = [];\n        if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:36:extra action', originalId,\n                sources, value: {\n                    additionalActions,\n                    damageModifier,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let hitIncreasePerHit = 0, extraHitDamage = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'passive:37:hit count boost', originalId,\n                sources, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawConvertedStat;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const rawConvertedStat = typedEffect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            coreStatProperties.forEach((statType) => {\n                const effectKey = `${statType}% buff`;\n                if (effectKey in typedEffect) {\n                    stats[statType] = typedEffect[effectKey];\n                }\n            });\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:40:converted-${stat}`, originalId,\n                    sources, value: {\n                        convertedStat,\n                        value,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('41', (effect, context, injectionContext) => {\n        const originalId = '41';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            minimumElements: '0',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.minimumElements = typedEffect['unique elements required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const minimumElements = parseNumberOrDefault(stats.minimumElements);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:41:unique element count-${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minimumUniqueElements: minimumElements }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const GENDER_MAPPING = {\n            0: UnitGender.Other,\n            1: UnitGender.Male,\n            2: UnitGender.Female,\n        };\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            gender: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawGender;\n            [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.gender = typedEffect['gender required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetGender = stats.gender || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:42:gender-${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'take 1 dmg%',\n            buffId: 'passive:43:chance damage to one',\n            originalId: '43',\n        });\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp buff'];\n            stats.atk = typedEffect['atk buff'];\n            stats.def = typedEffect['def buff'];\n            stats.rec = typedEffect['rec buff'];\n            stats.crit = typedEffect['crit buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:44:flat-${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('45', (effect, context, injectionContext) => {\n        const originalId = '45';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let baseResist = 0, buffResist = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n            baseResist = parseNumberOrDefault(rawBaseResist);\n            buffResist = parseNumberOrDefault(rawBuffResist);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            baseResist = parseNumberOrDefault(typedEffect['base crit% resist']);\n            buffResist = parseNumberOrDefault(typedEffect['buff crit% resist']);\n        }\n        const results = [];\n        if (baseResist !== 0) {\n            results.push(Object.assign({ id: 'passive:45:critical damage reduction-base', originalId,\n                sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (buffResist !== 0) {\n            results.push(Object.assign({ id: 'passive:45:critical damage reduction-buff', originalId,\n                sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('46', (effect, context, injectionContext) => {\n        const originalId = '46';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const availableStats = ['atk', 'def', 'rec'];\n        const stats = [];\n        let proportionalMode = 'unknown';\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            availableStats.forEach((stat, index) => {\n                const baseValue = parseNumberOrDefault(params[index * 2]);\n                const addedValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                if (baseValue !== 0 || addedValue !== 0) {\n                    stats.push({\n                        stat,\n                        baseValue,\n                        addedValue,\n                    });\n                }\n            });\n            proportionalMode = params[6] === '1' ? 'lost' : 'remaining';\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            availableStats.forEach((stat) => {\n                const baseValue = parseNumberOrDefault(typedEffect[`${stat}% base buff`]);\n                const addedValue = parseNumberOrDefault(typedEffect[`${stat}% extra buff based on hp`]);\n                if (baseValue !== 0 || addedValue !== 0) {\n                    stats.push({\n                        stat,\n                        baseValue,\n                        addedValue,\n                    });\n                }\n            });\n            proportionalMode = typedEffect['buff proportional to hp'] || 'unknown';\n        }\n        const results = stats.map(({ stat, baseValue, addedValue }) => (Object.assign({ id: `passive:46:hp scaled-${stat}`, originalId,\n            sources, value: {\n                baseValue,\n                addedValue,\n                proportionalMode,\n            }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('47', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '47',\n            effectKeyLow: 'bc fill on spark low',\n            effectKeyHigh: 'bc fill on spark high',\n            effectKeyChance: 'bc fill on spark%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'passive:47:bc fill on spark',\n        });\n    });\n    map.set('48', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'reduced bb bc cost%',\n            buffId: 'passive:48:bc cost reduction',\n            originalId: '48',\n        });\n    });\n    map.set('49', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '49',\n            effectKeyLow: 'reduced bb bc use% low',\n            effectKeyHigh: 'reduced bb bc use% high',\n            effectKeyChance: 'reduced bb bc use chance%',\n            buffKeyLow: 'reducedUseLow%',\n            buffKeyHigh: 'reducedUseHigh%',\n            buffId: 'passive:49:bb gauge consumption reduction',\n        });\n    });\n    map.set('50', (effect, context, injectionContext) => {\n        const originalId = '50';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let damageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            damageBoost = parseNumberOrDefault(params[6]) * 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`${element} units do extra elemental weakness dmg`]);\n            damageBoost = parseNumberOrDefault(typedEffect['elemental weakness multiplier%']);\n        }\n        let results = [];\n        if (damageBoost !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:50:elemental weakness damage-${element}`, originalId,\n                sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:50:elemental weakness damage-unknown', originalId,\n                    sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        const originalId = '53';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let ResistType;\n        (function (ResistType) {\n            ResistType[\"CriticalDamage\"] = \"critical damage\";\n            ResistType[\"ElementDamage\"] = \"element damage\";\n            ResistType[\"CriticalHitRate\"] = \"critical rate\";\n        })(ResistType || (ResistType = {}));\n        const resistances = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseCritChanceResist, rawBuffCritChanceResist, ...extraParams] = splitEffectParams(typedEffect);\n            [\n                { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                { resistType: ResistType.CriticalHitRate, base: parseNumberOrDefault(rawBaseCritChanceResist), buff: parseNumberOrDefault(rawBuffCritChanceResist) },\n            ].forEach(({ resistType, base, buff }) => {\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            [\n                { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist%', buffKey: 'crit dmg buffed damage resist%' },\n                { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist%', buffKey: 'strong buffed element damage resist%' },\n                { resistType: ResistType.CriticalHitRate, baseKey: 'crit chance base resist%', buffKey: 'crit chance buffed resist%' },\n            ].forEach(({ resistType, baseKey, buffKey }) => {\n                const base = parseNumberOrDefault(typedEffect[baseKey]);\n                const buff = parseNumberOrDefault(typedEffect[buffKey]);\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n        }\n        const results = [];\n        resistances.forEach(({ resistType, base, buff }) => {\n            if (base !== 0) {\n                results.push(Object.assign({ id: `passive:53:${resistType}-base`, originalId,\n                    sources, value: base, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buff !== 0) {\n                results.push(Object.assign({ id: `passive:53:${resistType}-buff`, originalId,\n                    sources, value: buff, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('55', (effect, context, injectionContext) => {\n        const originalId = '55';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                id: params[0],\n                params: params[1],\n                turnDuration: parseNumberOrDefault(params[5]),\n            }, context, injectionContext);\n            const maxTriggerCount = parseNumberOrDefault(params[2]);\n            const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], params[4], ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(6), 6, injectionContext);\n            if (triggeredBuffs.length > 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: 'passive:55:hp conditional', originalId,\n                    sources, value: {\n                        triggeredBuffs,\n                        maxTriggerCount,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('58', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'guard increase mitigation%',\n            buffId: 'passive:58:guard mitigation',\n            originalId: '58',\n        });\n    });\n    map.set('59', (effect, context, injectionContext) => {\n        const originalId = '59';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let percentFill, flatFill;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled when attacked while guarded']);\n            flatFill = parseNumberOrDefault(typedEffect['bc filled when attacked while guarded']);\n        }\n        const results = [];\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-percent', originalId,\n                sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n        }\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-flat', originalId,\n                sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('61', (effect, context, injectionContext) => {\n        const originalId = '61';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let percentFill, flatFill;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled on guard']);\n            flatFill = parseNumberOrDefault(typedEffect['bc filled on guard']);\n        }\n        const results = [];\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'passive:61:bc fill on guard-percent', originalId,\n                sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n        }\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'passive:61:bc fill on guard-flat', originalId,\n                sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('62', (effect, context, injectionContext) => {\n        const originalId = '62';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let mitigation = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            mitigation = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n            mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n        }\n        let results = [];\n        if (mitigation !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:62:mitigate-${element}`, originalId,\n                sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:62:mitigate-unknown', originalId,\n                    sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('63', (effect, context, injectionContext) => {\n        const originalId = '63';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let mitigation = 0, turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            mitigation = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n            mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n            turnDuration = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks buff for first x turns']);\n        }\n        let results = [];\n        if (mitigation !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:63:first turn mitigate-${element}`, originalId,\n                sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:63:first turn mitigate-unknown', originalId,\n                    sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('64', (effect, context, injectionContext) => {\n        const originalId = '64';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let bb = 0, sbb = 0, ubb = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBb, rawSbb, rawUbb, ...extraParams] = splitEffectParams(typedEffect);\n            bb = parseNumberOrDefault(rawBb);\n            sbb = parseNumberOrDefault(rawSbb);\n            ubb = parseNumberOrDefault(rawUbb);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            bb = parseNumberOrDefault(typedEffect['bb atk% buff']);\n            sbb = parseNumberOrDefault(typedEffect['sbb atk% buff']);\n            ubb = parseNumberOrDefault(typedEffect['ubb atk% buff']);\n        }\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'passive:64:attack boost-bb', originalId,\n                sources, conditions: Object.assign({}, conditionInfo), value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'passive:64:attack boost-sbb', originalId,\n                sources, conditions: Object.assign({}, conditionInfo), value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'passive:64:attack boost-ubb', originalId,\n                sources, conditions: Object.assign({}, conditionInfo), value: ubb }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('65', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '65',\n            effectKeyLow: 'bc fill on crit min',\n            effectKeyHigh: 'bc fill on crit max',\n            effectKeyChance: 'bc fill on crit%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onCriticalHit: true }),\n            buffId: 'passive:65:bc fill on crit',\n        });\n    });\n    map.set('66', (effect, context, injectionContext) => {\n        const originalId = '66';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let triggeredBuffs = [];\n        let triggerOnBb = false, triggerOnSbb = false, triggerOnUbb = false;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawProcIds, rawParams = '', rawTargetTypes = '', rawTargetAreas = '', rawStartFrames = '', rawTriggerOnBb, rawTriggerOnSbb, rawTriggerOnUbb, ...extraParams] = splitEffectParams(typedEffect);\n            const allProcIds = rawProcIds.split('~');\n            const allProcParams = rawParams.split('~');\n            const allTargetTypes = rawTargetTypes.split('~');\n            const allTargetAreas = rawTargetAreas.split('~');\n            const allStartFrames = rawStartFrames.split('~');\n            const FRAME_IN_MS = (16 + (2 / 3));\n            allProcIds.forEach((procId, index) => {\n                const params = (allProcParams[index] || '').replace(/&/g, ',');\n                const targetType = allTargetTypes[index];\n                const targetArea = allTargetAreas[index];\n                const startFrame = parseNumberOrDefault(allStartFrames[index]);\n                const effectDelayInMs = (startFrame * FRAME_IN_MS).toFixed(1);\n                const procEffect = {\n                    'proc id': procId,\n                    params,\n                    'effect delay time(ms)/frame': `${effectDelayInMs}/${startFrame}`,\n                    'target area': TARGET_AREA_MAPPING[targetArea] || targetArea || 'unknown target area',\n                    'target type': TARGET_TYPE_MAPPING[targetType] || targetType || 'unknown target type',\n                };\n                const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                triggeredBuffs = triggeredBuffs.concat(procBuffs);\n            });\n            triggerOnBb = rawTriggerOnBb === '1';\n            triggerOnSbb = rawTriggerOnSbb === '1';\n            triggerOnUbb = rawTriggerOnUbb === '1';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const triggeredEffects = typedEffect['triggered effect'];\n            if (Array.isArray(triggeredEffects)) {\n                triggeredEffects.forEach((procEffect) => {\n                    const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                    triggeredBuffs = triggeredBuffs.concat(procBuffs);\n                });\n            }\n            triggerOnBb = !!typedEffect['trigger on bb'];\n            triggerOnSbb = !!typedEffect['trigger on sbb'];\n            triggerOnUbb = !!typedEffect['trigger on ubb'];\n        }\n        const results = [];\n        if ((triggerOnBb || triggerOnSbb || triggerOnUbb) && triggeredBuffs.length > 0) {\n            const addBuffOfBurstType = (burstType) => {\n                results.push(Object.assign({ id: `passive:66:add effect to skill-${burstType}`, originalId,\n                    sources, value: triggeredBuffs, conditions: Object.assign({}, conditionInfo) }, targetData));\n            };\n            if (triggerOnBb) {\n                addBuffOfBurstType('bb');\n            }\n            if (triggerOnSbb) {\n                addBuffOfBurstType('sbb');\n            }\n            if (triggerOnUbb) {\n                addBuffOfBurstType('ubb');\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('69', (effect, context, injectionContext) => {\n        const originalId = '69';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let recoveredHp = 0, maxCount = 0;\n        let chanceLow = 0, chanceHigh = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawRecoveredHp, rawMaxCount, rawChanceLow, rawChanceHigh, ...extraParams] = splitEffectParams(typedEffect);\n            recoveredHp = parseNumberOrDefault(rawRecoveredHp);\n            maxCount = parseNumberOrDefault(rawMaxCount);\n            chanceLow = parseNumberOrDefault(rawChanceLow);\n            chanceHigh = parseNumberOrDefault(rawChanceHigh);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            recoveredHp = parseNumberOrDefault(typedEffect['angel idol recover hp%']);\n            maxCount = parseNumberOrDefault(typedEffect['angel idol recover counts']);\n            chanceLow = parseNumberOrDefault(typedEffect['angel idol recover chance% low']);\n            chanceHigh = parseNumberOrDefault(typedEffect['angel idol recover chance% high']);\n        }\n        const results = [];\n        if (chanceLow !== 0 || chanceHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:69:chance ko resistance', originalId,\n                sources, value: {\n                    'recoveredHp%': recoveredHp,\n                    maxCount,\n                    chanceLow,\n                    chanceHigh,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('70', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'od fill rate%',\n            buffId: 'passive:70:od fill rate',\n            originalId: '70',\n        });\n    });\n    map.set('71', (effect, context, injectionContext) => {\n        const originalId = '71';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const inflictionChances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    inflictionChances[ailment] = typedEffect[correspondingKey];\n                }\n            });\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(inflictionChances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:71:inflict on hit-${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('72', (effect, context, injectionContext) => {\n        const originalId = '72';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawHpAtTurnStart, rawBcAtTurnStart, ...extraParams] = splitEffectWithUnknownPassiveParamsProperty(effect);\n        const hpAtTurnStart = rawHpAtTurnStart === '1';\n        const bcAtTurnStart = rawBcAtTurnStart === '1';\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (hpAtTurnStart) {\n            results.push(Object.assign({ id: 'passive:72:effect at turn start-hp', originalId,\n                sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (bcAtTurnStart) {\n            results.push(Object.assign({ id: 'passive:72:effect at turn start-bc', originalId,\n                sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('73', (effect, context, injectionContext) => {\n        const originalId = '73';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis, Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction];\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n            'atk down': '0',\n            'def down': '0',\n            'rec down': '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, resistances['atk down'], resistances['def down'], resistances['rec down'], ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:73:resist-${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('74', (effect, context, injectionContext) => {\n        const originalId = '74';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let requiredAilments, attackBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawRequiredAilments, rawBoost, ...extraParams] = splitEffectParams(typedEffect);\n            requiredAilments = rawRequiredAilments.split('&')\n                .filter((p) => p !== '0')\n                .map((p) => AILMENT_MAPPING[p] || Ailment.Unknown);\n            attackBoost = parseNumberOrDefault(rawBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(typedEffect).filter((k) => (typedEffect[k] === true) && k.startsWith('atk% buff when enemy has'));\n            requiredAilments = AILMENTS_ORDER.filter((ailment) => ailmentKeysInEffect.find((k) => k.includes(ailment)));\n            attackBoost = parseNumberOrDefault(typedEffect['atk% buff when enemy has ailment']);\n        }\n        const results = [];\n        if (attackBoost !== 0) {\n            results.push(Object.assign({ id: 'passive:74:ailment attack boost', originalId,\n                sources, value: attackBoost, conditions: Object.assign(Object.assign({}, conditionInfo), { targetHasAnyOfGivenAilments: requiredAilments }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('75', (effect, context, injectionContext) => {\n        const originalId = '75';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageIncrease = 0, chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(typedEffect);\n            damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            damageIncrease = parseNumberOrDefault(typedEffect['spark debuff%']);\n            chance = parseNumberOrDefault(typedEffect['spark debuff chance%']);\n            turnDuration = parseNumberOrDefault(typedEffect['spark debuff turns']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'passive:75:spark vulnerability', originalId,\n                sources, duration: turnDuration, value: { 'sparkDamage%': damageIncrease, chance }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('77', (effect, context, injectionContext) => {\n        const originalId = '77';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let baseResist = 0, buffResist = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n            baseResist = parseNumberOrDefault(rawBaseResist);\n            buffResist = parseNumberOrDefault(rawBuffResist);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            baseResist = parseNumberOrDefault(typedEffect['base spark dmg% resist']);\n            buffResist = parseNumberOrDefault(typedEffect['buff spark dmg% resist']);\n        }\n        const results = [];\n        if (baseResist !== 0) {\n            results.push(Object.assign({ id: 'passive:77:spark damage reduction-base', originalId,\n                sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (buffResist !== 0) {\n            results.push(Object.assign({ id: 'passive:77:spark damage reduction-buff', originalId,\n                sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('78', (effect, context, injectionContext) => {\n        return parseConditionalPassiveWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '78',\n            buffId: 'passive:78:damage taken conditional',\n            thresholdType: ThresholdType.DamageTaken,\n        });\n    });\n    map.set('79', (effect, context, injectionContext) => {\n        return parseConditionalBcFillWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '79',\n            thresholdType: ThresholdType.DamageTaken,\n            flatFillBuffId: 'passive:79:bc fill after damage taken conditional-flat',\n            percentFillBuffId: 'passive:79:bc fill after damage taken conditional-percent',\n            flatFillEffectKey: 'increase bb gauge',\n        });\n    });\n    map.set('80', (effect, context, injectionContext) => {\n        return parseConditionalPassiveWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '80',\n            buffId: 'passive:80:damage dealt conditional',\n            thresholdType: ThresholdType.DamageDealt,\n        });\n    });\n    map.set('81', (effect, context, injectionContext) => {\n        return parseConditionalBcFillWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '81',\n            thresholdType: ThresholdType.DamageDealt,\n            flatFillBuffId: 'passive:81:bc fill after damage dealt conditional-flat',\n            percentFillBuffId: 'passive:81:bc fill after damage dealt conditional-percent',\n            flatFillEffectKey: 'increase bb gauge',\n        });\n    });\n    map.set('82', (effect, context, injectionContext) => {\n        return parseConditionalPassiveWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '82',\n            buffId: 'passive:82:bc received conditional',\n            thresholdType: ThresholdType.BcReceived,\n        });\n    });\n    map.set('83', (effect, context, injectionContext) => {\n        return parseConditionalBcFillWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '83',\n            thresholdType: ThresholdType.BcReceived,\n            flatFillBuffId: 'passive:83:bc fill after bc received conditional-flat',\n            percentFillBuffId: 'passive:83:bc fill after bc received conditional-percent',\n            flatFillEffectKey: 'increase bb gauge',\n        });\n    });\n    map.set('84', (effect, context, injectionContext) => {\n        return parseConditionalPassiveWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '84',\n            buffId: 'passive:84:hc received conditional',\n            thresholdType: ThresholdType.HcReceived,\n        });\n    });\n    map.set('85', (effect, context, injectionContext) => {\n        return parseConditionalBcFillWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '85',\n            thresholdType: ThresholdType.HcReceived,\n            flatFillBuffId: 'passive:85:bc fill after hc received conditional-flat',\n            percentFillBuffId: 'passive:85:bc fill after hc received conditional-percent',\n            flatFillEffectKey: 'increase bb gauge',\n        });\n    });\n    map.set('86', (effect, context, injectionContext) => {\n        return parseConditionalPassiveWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '86',\n            buffId: 'passive:86:spark count conditional',\n            thresholdType: ThresholdType.SparkCount,\n        });\n    });\n    map.set('87', (effect, context, injectionContext) => {\n        return parseConditionalBcFillWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '87',\n            thresholdType: ThresholdType.SparkCount,\n            flatFillBuffId: 'passive:87:bc fill after spark count conditional-flat',\n            percentFillBuffId: 'passive:87:bc fill after spark count conditional-percent',\n            flatFillEffectKey: 'increase bb gauge',\n        });\n    });\n    map.set('88', (effect, context, injectionContext) => {\n        return parseConditionalPassiveWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '88',\n            buffId: 'passive:88:on guard conditional',\n            thresholdType: ThresholdType.ChanceGuard,\n        });\n    });\n    map.set('89', (effect, context, injectionContext) => {\n        return parseConditionalPassiveWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '89',\n            buffId: 'passive:89:on critical hit conditional',\n            thresholdType: ThresholdType.ChanceCrit,\n        });\n    });\n    map.set('90', (effect, context, injectionContext) => {\n        const originalId = '90';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const inflictionChances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('inflict'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    inflictionChances[ailment] = typedEffect[correspondingKey];\n                }\n            });\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(inflictionChances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:90:inflict on crit-${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), { onCriticalHit: true }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('91', (effect, context, injectionContext) => {\n        const originalId = '91';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [firstUnknownValue, rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseNumberOrDefault(rawValue);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams([firstUnknownValue, '0', '0'].concat(extraParams), 0, injectionContext);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'passive:91:first turn spark', originalId,\n                sources, duration: turnDuration, value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('92', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'ignore def resist chance%',\n            buffId: 'passive:92:negate defense ignore',\n            originalId: '92',\n        });\n    });\n    map.set('93', (effect, context, injectionContext) => {\n        const originalId = '93';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            // is last parameter turn duration, where -1 is lasting indefinitely?\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(6), 6, injectionContext);\n        }\n        const results = elements.map((element) => (Object.assign({ id: `passive:93:add element-${element}`, originalId,\n            sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('96', (effect, context, injectionContext) => {\n        const originalId = '96';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageIncrease = 0, chance = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawDamageIncrease, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            damageIncrease = parseNumberOrDefault(typedEffect['aoe atk inc%']);\n            chance = parseNumberOrDefault(typedEffect['chance to aoe']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'passive:96:aoe normal attack', originalId,\n                sources, value: { 'damageModifier%': damageIncrease, chance }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('97', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'xp gained increase%',\n            buffId: 'passive:97:player exp boost',\n            originalId: '97',\n        });\n    });\n    map.set('100', (effect, context, injectionContext) => {\n        const originalId = '100';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let sparkDamage = 0, chance = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawChance, rawSparkDamage, ...extraParams] = splitEffectParams(typedEffect);\n            chance = parseNumberOrDefault(rawChance);\n            sparkDamage = parseNumberOrDefault(rawSparkDamage);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(typedEffect['spark crit chance%']);\n            sparkDamage = parseNumberOrDefault(typedEffect['spark crit dmg%']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'passive:100:spark critical', originalId,\n                sources, value: { 'sparkDamage%': sparkDamage, chance }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('101', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '101',\n            effectKeyLow: 'heal on spark low',\n            effectKeyHigh: 'heal on spark high',\n            effectKeyChance: 'heal on spark%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            buffId: 'passive:101:heal on spark',\n        });\n    });\n    map.set('102', (effect, context, injectionContext) => {\n        const originalId = '102';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(6), 6, injectionContext);\n        }\n        const results = elements.map((element) => (Object.assign({ id: `passive:102:add element-${element}`, originalId,\n            sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('103', (effect, context, injectionContext) => {\n        const originalId = '103';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const boosts = {\n            bb: '0',\n            sbb: '0',\n            ubb: '0',\n        };\n        const BOOST_ORDER = ['bb', 'sbb', 'ubb'];\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [boosts.bb, boosts.sbb, boosts.ubb, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            boosts.bb = typedEffect['bb atk% add'];\n            boosts.sbb = typedEffect['sbb atk% add'];\n            boosts.ubb = typedEffect['ubb atk% add'];\n            // not using existing effect threshold parsing functions because this is\n            // is parsed differently for some reason\n            thresholdInfo = {\n                threshold: parseNumberOrDefault(typedEffect['hp threshold']),\n                requireAbove: typedEffect['triggered when hp'] === 'higher',\n                type: ThresholdType.Hp,\n            };\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        BOOST_ORDER.forEach((boost) => {\n            const value = parseNumberOrDefault(boosts[boost]);\n            if (value !== 0) {\n                const entry = Object.assign({ id: `passive:103:hp conditional attack boost-${boost}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('104', (effect, context, injectionContext) => {\n        const originalId = '104';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let sparkDamageBoost = 0;\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawSparkDamageBoost;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n            });\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        const results = [];\n        if (sparkDamageBoost !== 0) {\n            results.push(Object.assign({ id: 'passive:104:hp conditional spark-damage', originalId,\n                sources, value: sparkDamageBoost, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:104:hp conditional spark-${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('105', (effect, context, injectionContext) => {\n        const originalId = '105';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const availableStats = ['atk', 'def', 'rec'];\n        const stats = [];\n        let turnCount;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            const scaleLowToHigh = params[6] === '1';\n            availableStats.forEach((stat, index) => {\n                const minValue = parseNumberOrDefault(params[index * 2]);\n                const maxValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                if (minValue !== 0 || maxValue !== 0) {\n                    stats.push({\n                        stat,\n                        startingValue: scaleLowToHigh ? minValue : maxValue,\n                        endingValue: scaleLowToHigh ? maxValue : minValue,\n                    });\n                }\n            });\n            turnCount = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            const scaleLowToHigh = 'increase from min to max' in typedEffect;\n            availableStats.forEach((stat) => {\n                const minValue = parseNumberOrDefault(typedEffect[`${stat}% min buff`]);\n                const maxValue = parseNumberOrDefault(typedEffect[`${stat}% max buff`]);\n                if (minValue !== 0 || maxValue !== 0) {\n                    stats.push({\n                        stat,\n                        startingValue: scaleLowToHigh ? minValue : maxValue,\n                        endingValue: scaleLowToHigh ? maxValue : minValue,\n                    });\n                }\n            });\n            turnCount = parseNumberOrDefault(typedEffect['turn count']);\n        }\n        const results = stats.map(({ stat, startingValue, endingValue }) => (Object.assign({ id: `passive:105:turn scaled-${stat}`, originalId,\n            sources, value: {\n                'startingValue%': startingValue,\n                'endingValue%': endingValue,\n                turnCount,\n            }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('106', (effect, context, injectionContext) => {\n        return parseConditionalPassiveWithSingleNumericalCondition({\n            effect,\n            context,\n            injectionContext,\n            originalId: '106',\n            buffId: 'passive:106:on overdrive conditional',\n            thresholdType: ThresholdType.ChanceOverDrive,\n        });\n    });\n    map.set('107', (effect, context, injectionContext) => {\n        const originalId = '107';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const [addedPassiveId, addedPassiveParams = '', ...extraParams] = splitEffectParams(typedEffect);\n            const addedPassiveAsEffect = {\n                'passive id': addedPassiveId,\n                params: addedPassiveParams.split('$').join(','),\n            };\n            const addedPassiveContext = Object.assign(Object.assign({}, context), { source: BuffSource.LeaderSkill });\n            const addedBuffs = convertPassiveEffectToBuffs(addedPassiveAsEffect, addedPassiveContext);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            if (addedBuffs.length > 0) {\n                results.push(Object.assign({ id: 'passive:107:add effect to leader skill', originalId,\n                    sources, value: addedBuffs, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport isPassiveEffect from '../isPassiveEffect';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PASSIVE_ID } from '../constants';\nimport { getPassiveEffectToBuffMapping } from './passive-effect-mapping';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to {@link IBuff} format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given passive effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given passive effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Passive effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertPassiveEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isPassiveEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping, convertPassiveEffectToBuffs).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId, UnitStat, BuffStackType, IconId, BuffConditionElement, } from './buff-types';\nimport { TargetArea } from '../../datamine-types';\nexport const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ TURN_DURATION_MODIFICATION: {\n        id: BuffId.TURN_DURATION_MODIFICATION,\n        name: 'Passive Turn Duration Modification',\n        stat: UnitStat.turnDurationModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [\n            (buff && buff.value &&\n                buff.value.duration &&\n                buff.value.duration < 0) ?\n                IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n        ],\n    }, NO_PARAMS_SPECIFIED: {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        name: 'No Parameters Specified',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_PASSIVE_EFFECT_ID: {\n        id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n        name: 'Unknown Passive Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_PASSIVE_BUFF_PARAMS: {\n        id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n        name: 'Unknown Passive Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'passive:1:hp': {\n        id: BuffId['passive:1:hp'],\n        name: 'Passive HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:1:atk': {\n        id: BuffId['passive:1:atk'],\n        name: 'Passive Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:1:def': {\n        id: BuffId['passive:1:def'],\n        name: 'Passive Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:1:rec': {\n        id: BuffId['passive:1:rec'],\n        name: 'Passive Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:1:crit': {\n        id: BuffId['passive:1:crit'],\n        name: 'Passive Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    } }, (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:2:elemental-hp': {\n            id: BuffId['passive:2:elemental-hp'],\n            name: 'Passive Elemental HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:2:elemental-atk': {\n            id: BuffId['passive:2:elemental-atk'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:2:elemental-def': {\n            id: BuffId['passive:2:elemental-def'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:2:elemental-rec': {\n            id: BuffId['passive:2:elemental-rec'],\n            name: 'Passive Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:2:elemental-crit': {\n            id: BuffId['passive:2:elemental-crit'],\n            name: 'Passive Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let unitType = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    unitType = buff.conditions.targetUnitType || '';\n                }\n            }\n            if (typeof unitType !== 'string' || !unitType) {\n                unitType = 'unknown';\n            }\n            let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n            if (!unitType || !(iconKey in IconId)) {\n                iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:3:type based-hp': {\n            id: BuffId['passive:3:type based-hp'],\n            name: 'Passive Type-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:3:type based-atk': {\n            id: BuffId['passive:3:type based-atk'],\n            name: 'Passive Type-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:3:type based-def': {\n            id: BuffId['passive:3:type based-def'],\n            name: 'Passive Type-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:3:type based-rec': {\n            id: BuffId['passive:3:type based-rec'],\n            name: 'Passive Type-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:3:type based-crit': {\n            id: BuffId['passive:3:type based-crit'],\n            name: 'Passive Type-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:4:resist-poison': {\n        id: BuffId['passive:4:resist-poison'],\n        name: 'Passive Poison Resistance',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:4:resist-weak': {\n        id: BuffId['passive:4:resist-weak'],\n        name: 'Passive Weak Resistance',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:4:resist-sick': {\n        id: BuffId['passive:4:resist-sick'],\n        name: 'Passive Sick Resistance',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:4:resist-injury': {\n        id: BuffId['passive:4:resist-injury'],\n        name: 'Passive Injury Resistance',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:4:resist-curse': {\n        id: BuffId['passive:4:resist-curse'],\n        name: 'Passive Curse Resistance',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:4:resist-paralysis': {\n        id: BuffId['passive:4:resist-paralysis'],\n        name: 'Passive Paralysis Resistance',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:5:mitigate-fire': {\n        id: BuffId['passive:5:mitigate-fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:5:mitigate-water': {\n        id: BuffId['passive:5:mitigate-water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:5:mitigate-earth': {\n        id: BuffId['passive:5:mitigate-earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:5:mitigate-thunder': {\n        id: BuffId['passive:5:mitigate-thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:5:mitigate-light': {\n        id: BuffId['passive:5:mitigate-light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:5:mitigate-dark': {\n        id: BuffId['passive:5:mitigate-dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:5:mitigate-unknown': {\n        id: BuffId['passive:5:mitigate-unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:8:mitigation': {\n        id: BuffId['passive:8:mitigation'],\n        name: 'Passive Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:9:gradual bc fill': {\n        id: BuffId['passive:9:gradual bc fill'],\n        name: 'Passive Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:10:hc efficacy': {\n        id: BuffId['passive:10:hc efficacy'],\n        name: 'Passive HC Efficacy',\n        stat: UnitStat.hcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HCREC],\n    }, 'passive:11:hp conditional-atk': {\n        id: BuffId['passive:11:hp conditional-atk'],\n        name: 'Passive HP-Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n    }, 'passive:11:hp conditional-def': {\n        id: BuffId['passive:11:hp conditional-def'],\n        name: 'Passive HP-Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n    }, 'passive:11:hp conditional-rec': {\n        id: BuffId['passive:11:hp conditional-rec'],\n        name: 'Passive HP-Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n    }, 'passive:11:hp conditional-crit': {\n        id: BuffId['passive:11:hp conditional-crit'],\n        name: 'Passive HP-Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n    }, 'passive:12:hp conditional drop boost-bc': {\n        id: BuffId['passive:12:hp conditional drop boost-bc'],\n        name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n    }, 'passive:12:hp conditional drop boost-hc': {\n        id: BuffId['passive:12:hp conditional drop boost-hc'],\n        name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n    }, 'passive:12:hp conditional drop boost-item': {\n        id: BuffId['passive:12:hp conditional drop boost-item'],\n        name: 'Passive HP-Conditional Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n    }, 'passive:12:hp conditional drop boost-zel': {\n        id: BuffId['passive:12:hp conditional drop boost-zel'],\n        name: 'Passive HP-Conditional Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n    }, 'passive:12:hp conditional drop boost-karma': {\n        id: BuffId['passive:12:hp conditional drop boost-karma'],\n        name: 'Passive HP-Conditional Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n    }, 'passive:13:bc fill on enemy defeat': {\n        id: BuffId['passive:13:bc fill on enemy defeat'],\n        name: 'Passive BC Fill on Enemy Defeat',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:14:chance mitigation': {\n        id: BuffId['passive:14:chance mitigation'],\n        name: 'Passive Damage Reduction (Chance)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:15:heal on enemy defeat': {\n        id: BuffId['passive:15:heal on enemy defeat'],\n        name: 'Passive Heal on Enemy Defeat',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:16:heal on win': {\n        id: BuffId['passive:16:heal on win'],\n        name: 'Passive Heal on Battle Win',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:17:hp absorb': {\n        id: BuffId['passive:17:hp absorb'],\n        name: 'Passive HP Absorption',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPABS],\n    }, 'passive:19:drop boost-bc': {\n        id: BuffId['passive:19:drop boost-bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'passive:19:drop boost-hc': {\n        id: BuffId['passive:19:drop boost-hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'passive:19:drop boost-item': {\n        id: BuffId['passive:19:drop boost-item'],\n        name: 'Passive Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'passive:19:drop boost-zel': {\n        id: BuffId['passive:19:drop boost-zel'],\n        name: 'Passive Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n    }, 'passive:19:drop boost-karma': {\n        id: BuffId['passive:19:drop boost-karma'],\n        name: 'Passive Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n    }, 'passive:20:chance inflict-poison': {\n        id: BuffId['passive:20:chance inflict-poison'],\n        name: 'Passive Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'passive:20:chance inflict-weak': {\n        id: BuffId['passive:20:chance inflict-weak'],\n        name: 'Passive Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'passive:20:chance inflict-sick': {\n        id: BuffId['passive:20:chance inflict-sick'],\n        name: 'Passive Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'passive:20:chance inflict-injury': {\n        id: BuffId['passive:20:chance inflict-injury'],\n        name: 'Passive Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'passive:20:chance inflict-curse': {\n        id: BuffId['passive:20:chance inflict-curse'],\n        name: 'Passive Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'passive:20:chance inflict-paralysis': {\n        id: BuffId['passive:20:chance inflict-paralysis'],\n        name: 'Passive Paralysis Infliction',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'passive:20:chance inflict-atk down': {\n        id: BuffId['passive:20:chance inflict-atk down'],\n        name: 'Passive Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'passive:20:chance inflict-def down': {\n        id: BuffId['passive:20:chance inflict-def down'],\n        name: 'Passive Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'passive:20:chance inflict-rec down': {\n        id: BuffId['passive:20:chance inflict-rec down'],\n        name: 'Passive Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'passive:20:chance inflict-unknown': {\n        id: BuffId['passive:20:chance inflict-unknown'],\n        name: 'Passive Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'passive:21:first turn-atk': {\n        id: BuffId['passive:21:first turn-atk'],\n        name: 'Attack Boost for X Turns',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:21:first turn-def': {\n        id: BuffId['passive:21:first turn-def'],\n        name: 'Defense Boost for X Turns',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:21:first turn-rec': {\n        id: BuffId['passive:21:first turn-rec'],\n        name: 'Recovery Boost for X Turns',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:21:first turn-crit': {\n        id: BuffId['passive:21:first turn-crit'],\n        name: 'Critical Hit Rate Boost for X Turns',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:23:bc fill on win': {\n        id: BuffId['passive:23:bc fill on win'],\n        name: 'Passive BC Fill on Battle Win',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:24:heal on hit': {\n        id: BuffId['passive:24:heal on hit'],\n        name: 'Passive Heal when Attacked (Chance)',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'passive:25:bc fill on hit': {\n        id: BuffId['passive:25:bc fill on hit'],\n        name: 'Passive BC Fill when Attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:26:chance damage reflect': {\n        id: BuffId['passive:26:chance damage reflect'],\n        name: 'Passive Damage Counter (Chance)',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'passive:27:target chance change': {\n        id: BuffId['passive:27:target chance change'],\n        name: 'Passive Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n    }, 'passive:28:hp conditional target chance change': {\n        id: BuffId['passive:28:hp conditional target chance change'],\n        name: 'Passive HP-Conditional Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n    }, 'passive:29:chance def ignore': {\n        id: BuffId['passive:29:chance def ignore'],\n        name: 'Passive Defense Ignore (Chance)',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'passive:30:bb gauge conditional-atk': {\n        id: BuffId['passive:30:bb gauge conditional-atk'],\n        name: 'Passive BB Gauge Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n    }, 'passive:30:bb gauge conditional-def': {\n        id: BuffId['passive:30:bb gauge conditional-def'],\n        name: 'Passive BB Gauge Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n    }, 'passive:30:bb gauge conditional-rec': {\n        id: BuffId['passive:30:bb gauge conditional-rec'],\n        name: 'Passive BB Gauge Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n    }, 'passive:30:bb gauge conditional-crit': {\n        id: BuffId['passive:30:bb gauge conditional-crit'],\n        name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n    }, 'passive:31:spark-damage': {\n        id: BuffId['passive:31:spark-damage'],\n        name: 'Passive Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'passive:31:spark-bc': {\n        id: BuffId['passive:31:spark-bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n    }, 'passive:31:spark-hc': {\n        id: BuffId['passive:31:spark-hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n    }, 'passive:31:spark-item': {\n        id: BuffId['passive:31:spark-item'],\n        name: 'Passive Item Drop Rate Boost during Spark',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n    }, 'passive:31:spark-zel': {\n        id: BuffId['passive:31:spark-zel'],\n        name: 'Passive Zel Drop Rate Boost during Spark',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n    }, 'passive:31:spark-karma': {\n        id: BuffId['passive:31:spark-karma'],\n        name: 'Passive Karma Drop Rate Boost during Spark',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n    }, 'passive:32:bc efficacy': {\n        id: BuffId['passive:32:bc efficacy'],\n        name: 'Passive BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'passive:33:gradual heal': {\n        id: BuffId['passive:33:gradual heal'],\n        name: 'Passive Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:34:critical damage': {\n        id: BuffId['passive:34:critical damage'],\n        name: 'Passive Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'passive:35:bc fill on normal attack': {\n        id: BuffId['passive:35:bc fill on normal attack'],\n        name: 'Passive BC Fill when Normal Attacking',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:36:extra action': {\n        id: BuffId['passive:36:extra action'],\n        name: 'Passive Extra Action',\n        stat: UnitStat.extraAction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DBLSTRIKE],\n    }, 'passive:37:hit count boost': {\n        id: BuffId['passive:37:hit count boost'],\n        name: 'Passive Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'passive:40:converted-atk': {\n        id: BuffId['passive:40:converted-atk'],\n        name: 'Passive Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'passive:40:converted-def': {\n        id: BuffId['passive:40:converted-def'],\n        name: 'Passive Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'passive:40:converted-rec': {\n        id: BuffId['passive:40:converted-rec'],\n        name: 'Passive Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'passive:41:unique element count-hp': {\n        id: BuffId['passive:41:unique element count-hp'],\n        name: 'Passive Element Squad-based HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n    }, 'passive:41:unique element count-atk': {\n        id: BuffId['passive:41:unique element count-atk'],\n        name: 'Passive Element Squad-based Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n    }, 'passive:41:unique element count-def': {\n        id: BuffId['passive:41:unique element count-def'],\n        name: 'Passive Element Squad-based Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n    }, 'passive:41:unique element count-rec': {\n        id: BuffId['passive:41:unique element count-rec'],\n        name: 'Passive Element Squad-based Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n    }, 'passive:41:unique element count-crit': {\n        id: BuffId['passive:41:unique element count-crit'],\n        name: 'Passive Element Squad-based Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let gender = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    gender = buff.conditions.targetGender || '';\n                }\n            }\n            if (typeof gender !== 'string' || !gender) {\n                gender = 'unknown';\n            }\n            let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n            if (!gender || !(iconKey in IconId)) {\n                iconKey = `BUFF_GENDER${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:42:gender-hp': {\n            id: BuffId['passive:42:gender-hp'],\n            name: 'Passive Gender-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:42:gender-atk': {\n            id: BuffId['passive:42:gender-atk'],\n            name: 'Passive Gender-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:42:gender-def': {\n            id: BuffId['passive:42:gender-def'],\n            name: 'Passive Gender-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:42:gender-rec': {\n            id: BuffId['passive:42:gender-rec'],\n            name: 'Passive Gender-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:42:gender-crit': {\n            id: BuffId['passive:42:gender-crit'],\n            name: 'Passive Gender-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:43:chance damage to one': {\n        id: BuffId['passive:43:chance damage to one'],\n        name: 'Passive Damage Reduction To One (Chance)',\n        stat: UnitStat.reduceDamageToOne,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n    }, 'passive:44:flat-hp': {\n        id: BuffId['passive:44:flat-hp'],\n        name: 'Passive Flat HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:44:flat-atk': {\n        id: BuffId['passive:44:flat-atk'],\n        name: 'Passive Flat Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:44:flat-def': {\n        id: BuffId['passive:44:flat-def'],\n        name: 'Passive Flat Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:44:flat-rec': {\n        id: BuffId['passive:44:flat-rec'],\n        name: 'Passive Flat Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:44:flat-crit': {\n        id: BuffId['passive:44:flat-crit'],\n        name: 'Passive Flat Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:45:critical damage reduction-base': {\n        id: BuffId['passive:45:critical damage reduction-base'],\n        name: 'Passive Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:45:critical damage reduction-buff': {\n        id: BuffId['passive:45:critical damage reduction-buff'],\n        name: 'Passive Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:46:hp scaled-atk': {\n        id: BuffId['passive:46:hp scaled-atk'],\n        name: 'Passive Attack Boost Relative to HP',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDATKDOWN : IconId.BUFF_HPSCALEDATKUP],\n    }, 'passive:46:hp scaled-def': {\n        id: BuffId['passive:46:hp scaled-def'],\n        name: 'Passive Defense Boost Relative to HP',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDDEFDOWN : IconId.BUFF_HPSCALEDDEFUP],\n    }, 'passive:46:hp scaled-rec': {\n        id: BuffId['passive:46:hp scaled-rec'],\n        name: 'Passive Recovery Boost Relative to HP',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDRECDOWN : IconId.BUFF_HPSCALEDRECUP],\n    }, 'passive:47:bc fill on spark': {\n        id: BuffId['passive:47:bc fill on spark'],\n        name: 'Passive BC Fill on Spark',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKBBUP],\n    }, 'passive:48:bc cost reduction': {\n        id: BuffId['passive:48:bc cost reduction'],\n        name: 'Passive BC Cost Reduction',\n        stat: UnitStat.bcCostReduction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBCOST_REDUCTION],\n    }, 'passive:49:bb gauge consumption reduction': {\n        id: BuffId['passive:49:bb gauge consumption reduction'],\n        name: 'Passive BB Gauge Consumption Reduction',\n        stat: UnitStat.bbGaugeConsumptionReduction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:50:elemental weakness damage-fire': {\n        id: BuffId['passive:50:elemental weakness damage-fire'],\n        name: 'Passive Fire Elemental Damage Boost',\n        stat: UnitStat.fireElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGUP],\n    }, 'passive:50:elemental weakness damage-water': {\n        id: BuffId['passive:50:elemental weakness damage-water'],\n        name: 'Passive Water Elemental Damage Boost',\n        stat: UnitStat.waterElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGUP],\n    }, 'passive:50:elemental weakness damage-earth': {\n        id: BuffId['passive:50:elemental weakness damage-earth'],\n        name: 'Passive Earth Elemental Damage Boost',\n        stat: UnitStat.earthElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGUP],\n    }, 'passive:50:elemental weakness damage-thunder': {\n        id: BuffId['passive:50:elemental weakness damage-thunder'],\n        name: 'Passive Thunder Elemental Damage Boost',\n        stat: UnitStat.thunderElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGUP],\n    }, 'passive:50:elemental weakness damage-light': {\n        id: BuffId['passive:50:elemental weakness damage-light'],\n        name: 'Passive Light Elemental Damage Boost',\n        stat: UnitStat.lightElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGUP],\n    }, 'passive:50:elemental weakness damage-dark': {\n        id: BuffId['passive:50:elemental weakness damage-dark'],\n        name: 'Passive Dark Elemental Damage Boost',\n        stat: UnitStat.darkElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGUP],\n    }, 'passive:50:elemental weakness damage-unknown': {\n        id: BuffId['passive:50:elemental weakness damage-unknown'],\n        name: 'Passive Elemental Damage Boost (Unspecified Element)',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGUP],\n    }, 'passive:53:critical damage-base': {\n        id: BuffId['passive:53:critical damage-base'],\n        name: 'Passive Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:critical damage-buff': {\n        id: BuffId['passive:53:critical damage-buff'],\n        name: 'Passive Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:element damage-base': {\n        id: BuffId['passive:53:element damage-base'],\n        name: 'Passive Base Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'passive:53:element damage-buff': {\n        id: BuffId['passive:53:element damage-buff'],\n        name: 'Passive Buffed Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'passive:53:critical rate-base': {\n        id: BuffId['passive:53:critical rate-base'],\n        name: 'Passive Base Critical Hit Rate Reduction',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:critical rate-buff': {\n        id: BuffId['passive:53:critical rate-buff'],\n        name: 'Passive Buffed Critical Hit Rate Reduction',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:55:hp conditional': {\n        id: BuffId['passive:55:hp conditional'],\n        name: 'Passive Conditional Effect based on HP Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_HPTHRESH],\n    }, 'passive:58:guard mitigation': {\n        id: BuffId['passive:58:guard mitigation'],\n        name: 'Passive Guard Damage Reduction',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDCUT],\n    }, 'passive:59:bc fill when attacked on guard-percent': {\n        id: BuffId['passive:59:bc fill when attacked on guard-percent'],\n        name: 'Passive BC Fill when Attacked and Guarding (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:59:bc fill when attacked on guard-flat': {\n        id: BuffId['passive:59:bc fill when attacked on guard-flat'],\n        name: 'Passive BC Fill when Attacked and Guarding (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:61:bc fill on guard-percent': {\n        id: BuffId['passive:61:bc fill on guard-percent'],\n        name: 'Passive BC Fill on Guard (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:61:bc fill on guard-flat': {\n        id: BuffId['passive:61:bc fill on guard-flat'],\n        name: 'Passive BC Fill on Guard (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:62:mitigate-fire': {\n        id: BuffId['passive:62:mitigate-fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:62:mitigate-water': {\n        id: BuffId['passive:62:mitigate-water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:62:mitigate-earth': {\n        id: BuffId['passive:62:mitigate-earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:62:mitigate-thunder': {\n        id: BuffId['passive:62:mitigate-thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:62:mitigate-light': {\n        id: BuffId['passive:62:mitigate-light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:62:mitigate-dark': {\n        id: BuffId['passive:62:mitigate-dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:62:mitigate-unknown': {\n        id: BuffId['passive:62:mitigate-unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:63:first turn mitigate-fire': {\n        id: BuffId['passive:63:first turn mitigate-fire'],\n        name: 'Fire Damage Reduction for First X Turns',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:63:first turn mitigate-water': {\n        id: BuffId['passive:63:first turn mitigate-water'],\n        name: 'Water Damage Reduction for First X Turns',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:63:first turn mitigate-earth': {\n        id: BuffId['passive:63:first turn mitigate-earth'],\n        name: 'Earth Damage Reduction for First X Turns',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:63:first turn mitigate-thunder': {\n        id: BuffId['passive:63:first turn mitigate-thunder'],\n        name: 'Thunder Damage Reduction for First X Turns',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:63:first turn mitigate-light': {\n        id: BuffId['passive:63:first turn mitigate-light'],\n        name: 'Light Damage Reduction for First X Turns',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:63:first turn mitigate-dark': {\n        id: BuffId['passive:63:first turn mitigate-dark'],\n        name: 'Dark Damage Reduction for First X Turns',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:63:first turn mitigate-unknown': {\n        id: BuffId['passive:63:first turn mitigate-unknown'],\n        name: 'Elemental Damage Reduction (Unspecified Element) for First X Turns',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:64:attack boost-bb': {\n        id: BuffId['passive:64:attack boost-bb'],\n        name: 'Passive BB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'passive:64:attack boost-sbb': {\n        id: BuffId['passive:64:attack boost-sbb'],\n        name: 'Passive SBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'passive:64:attack boost-ubb': {\n        id: BuffId['passive:64:attack boost-ubb'],\n        name: 'Passive UBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'passive:65:bc fill on crit': {\n        id: BuffId['passive:65:bc fill on crit'],\n        name: 'Passive BC Fill on Critical Hit',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:66:add effect to skill-bb': {\n        id: BuffId['passive:66:add effect to skill-bb'],\n        name: 'Passive Added Effect to Brave Burst',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTO_BB],\n    }, 'passive:66:add effect to skill-sbb': {\n        id: BuffId['passive:66:add effect to skill-sbb'],\n        name: 'Passive Added Effect to Super Brave Burst',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTO_SBB],\n    }, 'passive:66:add effect to skill-ubb': {\n        id: BuffId['passive:66:add effect to skill-ubb'],\n        name: 'Passive Added Effect to Ultimate Brave Burst',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTO_UBB],\n    }, 'passive:69:chance ko resistance': {\n        id: BuffId['passive:69:chance ko resistance'],\n        name: 'Passive KO Resistance (Chance)',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, 'passive:70:od fill rate': {\n        id: BuffId['passive:70:od fill rate'],\n        name: 'Passive OD Gauge Fill Rate',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_OVERDRIVEUP],\n    }, 'passive:71:inflict on hit-poison': {\n        id: BuffId['passive:71:inflict on hit-poison'],\n        name: 'Passive Poison Counter',\n        stat: UnitStat.poisonCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONCOUNTER],\n    }, 'passive:71:inflict on hit-weak': {\n        id: BuffId['passive:71:inflict on hit-weak'],\n        name: 'Passive Weak Counter',\n        stat: UnitStat.weakCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKCOUNTER],\n    }, 'passive:71:inflict on hit-sick': {\n        id: BuffId['passive:71:inflict on hit-sick'],\n        name: 'Passive Sick Counter',\n        stat: UnitStat.sickCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKCOUNTER],\n    }, 'passive:71:inflict on hit-injury': {\n        id: BuffId['passive:71:inflict on hit-injury'],\n        name: 'Passive Injury Counter',\n        stat: UnitStat.injuryCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJCONTER],\n    }, 'passive:71:inflict on hit-curse': {\n        id: BuffId['passive:71:inflict on hit-curse'],\n        name: 'Passive Curse Counter',\n        stat: UnitStat.curseCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSECOUNTER],\n    }, 'passive:71:inflict on hit-paralysis': {\n        id: BuffId['passive:71:inflict on hit-paralysis'],\n        name: 'Passive Paralysis Counter',\n        stat: UnitStat.paralysisCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYCOUNTER],\n    }, 'passive:72:effect at turn start-hp': {\n        id: BuffId['passive:72:effect at turn start-hp'],\n        name: 'Gradual HP Effects Occur at Turn Start',\n        stat: UnitStat.effectOccurrenceShift,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPTURNSTART],\n    }, 'passive:72:effect at turn start-bc': {\n        id: BuffId['passive:72:effect at turn start-bc'],\n        name: 'Gradual Battle Crystal Effects Occur at Turn Start',\n        stat: UnitStat.effectOccurrenceShift,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_BCTURNSTART],\n    }, 'passive:73:resist-poison': {\n        id: BuffId['passive:73:resist-poison'],\n        name: 'Passive Poison Resistance',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:73:resist-weak': {\n        id: BuffId['passive:73:resist-weak'],\n        name: 'Passive Weak Resistance',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:73:resist-sick': {\n        id: BuffId['passive:73:resist-sick'],\n        name: 'Passive Sick Resistance',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:73:resist-injury': {\n        id: BuffId['passive:73:resist-injury'],\n        name: 'Passive Injury Resistance',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:73:resist-curse': {\n        id: BuffId['passive:73:resist-curse'],\n        name: 'Passive Curse Resistance',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:73:resist-paralysis': {\n        id: BuffId['passive:73:resist-paralysis'],\n        name: 'Passive Paralysis Resistance',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:73:resist-atk down': {\n        id: BuffId['passive:73:resist-atk down'],\n        name: 'Passive Attack Reduction Resistance',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_RESISTATKDOWN],\n    }, 'passive:73:resist-def down': {\n        id: BuffId['passive:73:resist-def down'],\n        name: 'Passive Defense Reduction Resistance',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_RESISTDEFDOWN],\n    }, 'passive:73:resist-rec down': {\n        id: BuffId['passive:73:resist-rec down'],\n        name: 'Passive Recovery Reduction Resistance',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_RESISTRECDOWN],\n    }, 'passive:74:ailment attack boost': {\n        id: BuffId['passive:74:ailment attack boost'],\n        name: 'Passive Attack Boost on Status Afflicted Foes',\n        stat: UnitStat.ailmentAttackBoost,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_AILDMGUP],\n    }, 'passive:75:spark vulnerability': {\n        id: BuffId['passive:75:spark vulnerability'],\n        name: 'Passive Spark Vulnerability',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKDMGUP],\n    }, 'passive:77:spark damage reduction-base': {\n        id: BuffId['passive:77:spark damage reduction-base'],\n        name: 'Passive Base Spark Damage Reduction',\n        stat: UnitStat.sparkDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKDMGDOWN],\n    }, 'passive:77:spark damage reduction-buff': {\n        id: BuffId['passive:77:spark damage reduction-buff'],\n        name: 'Passive Buffed Spark Damage Reduction',\n        stat: UnitStat.sparkDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKDMGDOWN],\n    }, 'passive:78:damage taken conditional': {\n        id: BuffId['passive:78:damage taken conditional'],\n        name: 'Passive Conditional Effect after Damage Received Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_DAMAGETAKENTHRESH],\n    }, 'passive:79:bc fill after damage taken conditional-flat': {\n        id: BuffId['passive:79:bc fill after damage taken conditional-flat'],\n        name: 'Passive Flat BC Fill after Damage Taken Received Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:79:bc fill after damage taken conditional-percent': {\n        id: BuffId['passive:79:bc fill after damage taken conditional-percent'],\n        name: 'Passive Percent BC Fill after Damage Taken Received Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:80:damage dealt conditional': {\n        id: BuffId['passive:80:damage dealt conditional'],\n        name: 'Passive Conditional Effect after Damage Dealt Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_DAMAGEDEALTTHRESH],\n    }, 'passive:81:bc fill after damage dealt conditional-flat': {\n        id: BuffId['passive:81:bc fill after damage dealt conditional-flat'],\n        name: 'Passive Flat BC Fill after Damage Dealt Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:81:bc fill after damage dealt conditional-percent': {\n        id: BuffId['passive:81:bc fill after damage dealt conditional-percent'],\n        name: 'Passive Percent BC Fill after Damage Dealt Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:82:bc received conditional': {\n        id: BuffId['passive:82:bc received conditional'],\n        name: 'Passive Conditional Effect after BC Received Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_BCRECEIVEDTHRESH],\n    }, 'passive:83:bc fill after bc received conditional-flat': {\n        id: BuffId['passive:83:bc fill after bc received conditional-flat'],\n        name: 'Passive Flat BC Fill after BC Received Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:83:bc fill after bc received conditional-percent': {\n        id: BuffId['passive:83:bc fill after bc received conditional-percent'],\n        name: 'Passive Percent BC Fill after BC Received Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:84:hc received conditional': {\n        id: BuffId['passive:84:hc received conditional'],\n        name: 'Passive Conditional Effect after HC Received Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_HCRECEIVEDTHRESH],\n    }, 'passive:85:bc fill after hc received conditional-flat': {\n        id: BuffId['passive:85:bc fill after hc received conditional-flat'],\n        name: 'Passive Flat BC Fill after HC Received Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:85:bc fill after hc received conditional-percent': {\n        id: BuffId['passive:85:bc fill after hc received conditional-percent'],\n        name: 'Passive Percent BC Fill after HC Received Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:86:spark count conditional': {\n        id: BuffId['passive:86:spark count conditional'],\n        name: 'Passive Conditional Effect after Spark Count Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_SPARKCOUNTTHRESH],\n    }, 'passive:87:bc fill after spark count conditional-flat': {\n        id: BuffId['passive:87:bc fill after spark count conditional-flat'],\n        name: 'Passive Flat BC Fill after Spark Count Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:87:bc fill after spark count conditional-percent': {\n        id: BuffId['passive:87:bc fill after spark count conditional-percent'],\n        name: 'Passive Percent BC Fill after Spark Count Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:88:on guard conditional': {\n        id: BuffId['passive:88:on guard conditional'],\n        name: 'Passive Conditional Effect on Guard (Chance)',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_GUARD],\n    }, 'passive:89:on critical hit conditional': {\n        id: BuffId['passive:89:on critical hit conditional'],\n        name: 'Passive Conditional Effect on Critical Hit (Chance)',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_CRIT],\n    }, 'passive:90:inflict on crit-poison': {\n        id: BuffId['passive:90:inflict on crit-poison'],\n        name: 'Passive Poison Infliction on Critical Hit (Chance)',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'passive:90:inflict on crit-weak': {\n        id: BuffId['passive:90:inflict on crit-weak'],\n        name: 'Passive Weak Infliction on Critical Hit (Chance)',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'passive:90:inflict on crit-sick': {\n        id: BuffId['passive:90:inflict on crit-sick'],\n        name: 'Passive Sick Infliction on Critical Hit (Chance)',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'passive:90:inflict on crit-injury': {\n        id: BuffId['passive:90:inflict on crit-injury'],\n        name: 'Passive Injury Infliction on Critical Hit (Chance)',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'passive:90:inflict on crit-curse': {\n        id: BuffId['passive:90:inflict on crit-curse'],\n        name: 'Passive Curse Infliction on Critical Hit (Chance)',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'passive:90:inflict on crit-paralysis': {\n        id: BuffId['passive:90:inflict on crit-paralysis'],\n        name: 'Passive Paralysis Infliction on Critical Hit (Chance)',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'passive:91:first turn spark': {\n        id: BuffId['passive:91:first turn spark'],\n        name: 'Spark Damage Boost for First X Turns',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'passive:92:negate defense ignore': {\n        id: BuffId['passive:92:negate defense ignore'],\n        name: 'Passive Defense Ignore Negation (Chance)',\n        stat: UnitStat.defenseIgnoreMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_IGNOREDEFBLK],\n    }, 'passive:93:add element-fire': {\n        id: BuffId['passive:93:add element-fire'],\n        name: 'Passive Added Element to Attack (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDFIRE],\n    }, 'passive:93:add element-water': {\n        id: BuffId['passive:93:add element-water'],\n        name: 'Passive Added Element to Attack (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDWATER],\n    }, 'passive:93:add element-earth': {\n        id: BuffId['passive:93:add element-earth'],\n        name: 'Passive Added Element to Attack (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDEARTH],\n    }, 'passive:93:add element-thunder': {\n        id: BuffId['passive:93:add element-thunder'],\n        name: 'Passive Added Element to Attack (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTHUNDER],\n    }, 'passive:93:add element-light': {\n        id: BuffId['passive:93:add element-light'],\n        name: 'Passive Added Element to Attack (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDLIGHT],\n    }, 'passive:93:add element-dark': {\n        id: BuffId['passive:93:add element-dark'],\n        name: 'Passive Added Element to Attack (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDDARK],\n    }, 'passive:93:add element-unknown': {\n        id: BuffId['passive:93:add element-unknown'],\n        name: 'Passive Added Element to Attack (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDELEMENT],\n    }, 'passive:96:aoe normal attack': {\n        id: BuffId['passive:96:aoe normal attack'],\n        name: 'Passive Normal Attacks Hit All Foes',\n        stat: UnitStat.aoeNormalAttack,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_AOEATK],\n    }, 'passive:97:player exp boost': {\n        id: BuffId['passive:97:player exp boost'],\n        name: 'Passive Player EXP Boost',\n        stat: UnitStat.expModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PLAYEREXP],\n    }, 'passive:100:spark critical': {\n        id: BuffId['passive:100:spark critical'],\n        name: 'Passive Spark Critical',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKCRTACTIVATED],\n    }, 'passive:101:heal on spark': {\n        id: BuffId['passive:101:heal on spark'],\n        name: 'Passive Heal on Spark (Chance)',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARK_HPREC],\n    }, 'passive:102:add element-fire': {\n        id: BuffId['passive:102:add element-fire'],\n        name: 'Passive Added Element to Attack (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDFIRE],\n    }, 'passive:102:add element-water': {\n        id: BuffId['passive:102:add element-water'],\n        name: 'Passive Added Element to Attack (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDWATER],\n    }, 'passive:102:add element-earth': {\n        id: BuffId['passive:102:add element-earth'],\n        name: 'Passive Added Element to Attack (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDEARTH],\n    }, 'passive:102:add element-thunder': {\n        id: BuffId['passive:102:add element-thunder'],\n        name: 'Passive Added Element to Attack (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTHUNDER],\n    }, 'passive:102:add element-light': {\n        id: BuffId['passive:102:add element-light'],\n        name: 'Passive Added Element to Attack (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDLIGHT],\n    }, 'passive:102:add element-dark': {\n        id: BuffId['passive:102:add element-dark'],\n        name: 'Passive Added Element to Attack (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDDARK],\n    }, 'passive:102:add element-unknown': {\n        id: BuffId['passive:102:add element-unknown'],\n        name: 'Passive Added Element to Attack (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDELEMENT],\n    }, 'passive:103:hp conditional attack boost-bb': {\n        id: BuffId['passive:103:hp conditional attack boost-bb'],\n        name: 'Passive BB ATK Boost when HP Passes Threshold',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'passive:103:hp conditional attack boost-sbb': {\n        id: BuffId['passive:103:hp conditional attack boost-sbb'],\n        name: 'Passive SBB ATK Boost when HP Passes Threshold',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'passive:103:hp conditional attack boost-ubb': {\n        id: BuffId['passive:103:hp conditional attack boost-ubb'],\n        name: 'Passive UBB ATK Boost when HP Passes Threshold',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'passive:104:hp conditional spark-damage': {\n        id: BuffId['passive:104:hp conditional spark-damage'],\n        name: 'Passive Spark Damage Boost when HP Passes Threshold',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'passive:104:hp conditional spark-bc': {\n        id: BuffId['passive:104:hp conditional spark-bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost during Spark when HP Passes Threshold',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n    }, 'passive:104:hp conditional spark-hc': {\n        id: BuffId['passive:104:hp conditional spark-hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost during Spark when HP Passes Threshold',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n    }, 'passive:104:hp conditional spark-item': {\n        id: BuffId['passive:104:hp conditional spark-item'],\n        name: 'Passive Item Drop Rate Boost during Spark when HP Passes Threshold',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n    }, 'passive:104:hp conditional spark-zel': {\n        id: BuffId['passive:104:hp conditional spark-zel'],\n        name: 'Passive Zel Drop Rate Boost during Spark when HP Passes Threshold',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n    }, 'passive:104:hp conditional spark-karma': {\n        id: BuffId['passive:104:hp conditional spark-karma'],\n        name: 'Passive Karma Drop Rate Boost during Spark when HP Passes Threshold',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n    }, 'passive:105:turn scaled-atk': {\n        id: BuffId['passive:105:turn scaled-atk'],\n        name: 'Passive Turn-Scaled Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => {\n            let icon = IconId.BUFF_TURNSCALEDATKUP;\n            if (buff && buff.value) {\n                const buffValue = buff.value;\n                if (buffValue['startingValue%'] > buffValue['endingValue%']) {\n                    icon = IconId.BUFF_TURNSCALEDATKDOWN;\n                }\n            }\n            return [icon];\n        },\n    }, 'passive:105:turn scaled-def': {\n        id: BuffId['passive:105:turn scaled-def'],\n        name: 'Passive Turn-Scaled Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => {\n            let icon = IconId.BUFF_TURNSCALEDDEFUP;\n            if (buff && buff.value) {\n                const buffValue = buff.value;\n                if (buffValue['startingValue%'] > buffValue['endingValue%']) {\n                    icon = IconId.BUFF_TURNSCALEDDEFDOWN;\n                }\n            }\n            return [icon];\n        },\n    }, 'passive:105:turn scaled-rec': {\n        id: BuffId['passive:105:turn scaled-rec'],\n        name: 'Passive Turn-Scaled Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => {\n            let icon = IconId.BUFF_TURNSCALEDRECUP;\n            if (buff && buff.value) {\n                const buffValue = buff.value;\n                if (buffValue['startingValue%'] > buffValue['endingValue%']) {\n                    icon = IconId.BUFF_TURNSCALEDRECDOWN;\n                }\n            }\n            return [icon];\n        },\n    }, 'passive:106:on overdrive conditional': {\n        id: BuffId['passive:106:on overdrive conditional'],\n        name: 'Passive Conditional Effect on Overdrive (Chance)',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_OD],\n    }, 'passive:107:add effect to leader skill': {\n        id: BuffId['passive:107:add effect to leader skill'],\n        name: 'Passive Added Effect to Leader Skill',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTO_LS],\n    }, UNKNOWN_PROC_EFFECT_ID: {\n        id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n        name: 'Unknown Proc Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_PROC_BUFF_PARAMS: {\n        id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n        name: 'Unknown Proc Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'proc:1:attack': {\n        id: BuffId['proc:1:attack'],\n        name: 'Regular Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:2:burst heal': {\n        id: BuffId['proc:2:burst heal'],\n        name: 'Burst Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:3:gradual heal': {\n        id: BuffId['proc:3:gradual heal'],\n        name: 'Active Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:4:bc fill-flat': {\n        id: BuffId['proc:4:bc fill-flat'],\n        name: 'Burst BC Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:4:bc fill-percent': {\n        id: BuffId['proc:4:bc fill-percent'],\n        name: 'Burst BC Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:5:regular or elemental-atk': {\n            id: BuffId['proc:5:regular or elemental-atk'],\n            name: 'Active Regular/Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:5:regular or elemental-def': {\n            id: BuffId['proc:5:regular or elemental-def'],\n            name: 'Active Regular/Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:5:regular or elemental-rec': {\n            id: BuffId['proc:5:regular or elemental-rec'],\n            name: 'Active Regular/Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:5:regular or elemental-crit': {\n            id: BuffId['proc:5:regular or elemental-crit'],\n            name: 'Active Regular/Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'proc:6:drop boost-bc': {\n        id: BuffId['proc:6:drop boost-bc'],\n        name: 'Active Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'proc:6:drop boost-hc': {\n        id: BuffId['proc:6:drop boost-hc'],\n        name: 'Active Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'proc:6:drop boost-item': {\n        id: BuffId['proc:6:drop boost-item'],\n        name: 'Active Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'proc:7:guaranteed ko resistance': {\n        id: BuffId['proc:7:guaranteed ko resistance'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:8:max hp boost-flat': {\n        id: BuffId['proc:8:max hp boost-flat'],\n        name: 'Max HP Boost (Flat Amount)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    }, 'proc:8:max hp boost-percent': {\n        id: BuffId['proc:8:max hp boost-percent'],\n        name: 'Max HP Boost (Percentage)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'DOWN'; // default to down since these are reduction buffs\n            if (buff) {\n                if (buff.value && buff.value > 0) {\n                    polarity = 'UP';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:9:regular or elemental reduction-atk': {\n            id: BuffId['proc:9:regular or elemental reduction-atk'],\n            name: 'Active Regular/Elemental Attack Reduction',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:9:regular or elemental reduction-def': {\n            id: BuffId['proc:9:regular or elemental reduction-def'],\n            name: 'Active Regular/Elemental Defense Reduction',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:9:regular or elemental reduction-rec': {\n            id: BuffId['proc:9:regular or elemental reduction-rec'],\n            name: 'Active Regular/Elemental Recovery Reduction',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:9:regular or elemental reduction-unknown': {\n            id: BuffId['proc:9:regular or elemental reduction-unknown'],\n            name: 'Active Regular/Elemental Unknown Stat Reduction',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.UNKNOWN],\n        },\n    };\n})()), { 'proc:10:cleanse-poison': {\n        id: BuffId['proc:10:cleanse-poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:10:cleanse-weak': {\n        id: BuffId['proc:10:cleanse-weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:10:cleanse-sick': {\n        id: BuffId['proc:10:cleanse-sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:10:cleanse-injury': {\n        id: BuffId['proc:10:cleanse-injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:10:cleanse-curse': {\n        id: BuffId['proc:10:cleanse-curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:10:cleanse-paralysis': {\n        id: BuffId['proc:10:cleanse-paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:10:cleanse-atk down': {\n        id: BuffId['proc:10:cleanse-atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTATKDOWN],\n    }, 'proc:10:cleanse-def down': {\n        id: BuffId['proc:10:cleanse-def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTDEFDOWN],\n    }, 'proc:10:cleanse-rec down': {\n        id: BuffId['proc:10:cleanse-rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTRECDOWN],\n    }, 'proc:10:cleanse-unknown': {\n        id: BuffId['proc:10:cleanse-unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:11:chance inflict-poison': {\n        id: BuffId['proc:11:chance inflict-poison'],\n        name: 'Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_POISON],\n    }, 'proc:11:chance inflict-weak': {\n        id: BuffId['proc:11:chance inflict-weak'],\n        name: 'Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_WEAK],\n    }, 'proc:11:chance inflict-sick': {\n        id: BuffId['proc:11:chance inflict-sick'],\n        name: 'Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_SICK],\n    }, 'proc:11:chance inflict-injury': {\n        id: BuffId['proc:11:chance inflict-injury'],\n        name: 'Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_INJURY],\n    }, 'proc:11:chance inflict-curse': {\n        id: BuffId['proc:11:chance inflict-curse'],\n        name: 'Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_CURSE],\n    }, 'proc:11:chance inflict-paralysis': {\n        id: BuffId['proc:11:chance inflict-paralysis'],\n        name: 'Paralysis Infliction',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_PARALYSIS],\n    }, 'proc:11:chance inflict-atk down': {\n        id: BuffId['proc:11:chance inflict-atk down'],\n        name: 'Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWN],\n    }, 'proc:11:chance inflict-def down': {\n        id: BuffId['proc:11:chance inflict-def down'],\n        name: 'Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWN],\n    }, 'proc:11:chance inflict-rec down': {\n        id: BuffId['proc:11:chance inflict-rec down'],\n        name: 'Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWN],\n    }, 'proc:11:chance inflict-unknown': {\n        id: BuffId['proc:11:chance inflict-unknown'],\n        name: 'Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.DEBUFF_AILMENT],\n    }, 'proc:12:guaranteed revive': {\n        id: BuffId['proc:12:guaranteed revive'],\n        name: 'Instant Revive (Guaranteed)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:13:random attack': {\n        id: BuffId['proc:13:random attack'],\n        name: 'Random Target Damage',\n        stackType: BuffStackType.Attack,\n        icons: () => [IconId.ATK_RT],\n    }, 'proc:14:hp absorb attack': {\n        id: BuffId['proc:14:hp absorb attack'],\n        name: 'Lifesteal Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n    }, 'proc:16:mitigate-fire': {\n        id: BuffId['proc:16:mitigate-fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:16:mitigate-water': {\n        id: BuffId['proc:16:mitigate-water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:16:mitigate-earth': {\n        id: BuffId['proc:16:mitigate-earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:16:mitigate-thunder': {\n        id: BuffId['proc:16:mitigate-thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:16:mitigate-light': {\n        id: BuffId['proc:16:mitigate-light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:16:mitigate-dark': {\n        id: BuffId['proc:16:mitigate-dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:16:mitigate-all': {\n        id: BuffId['proc:16:mitigate-all'],\n        name: 'Active Elemental Damage Reduction (All Elements)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:16:mitigate-unknown': {\n        id: BuffId['proc:16:mitigate-unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:17:resist-poison': {\n        id: BuffId['proc:17:resist-poison'],\n        name: 'Active Poison Resistance',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:17:resist-weak': {\n        id: BuffId['proc:17:resist-weak'],\n        name: 'Active Weak Resistance',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:17:resist-sick': {\n        id: BuffId['proc:17:resist-sick'],\n        name: 'Active Sick Resistance',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:17:resist-injury': {\n        id: BuffId['proc:17:resist-injury'],\n        name: 'Active Injury Resistance',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:17:resist-curse': {\n        id: BuffId['proc:17:resist-curse'],\n        name: 'Active Curse Resistance',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:17:resist-paralysis': {\n        id: BuffId['proc:17:resist-paralysis'],\n        name: 'Active Paralysis Resistance',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:18:mitigation': {\n        id: BuffId['proc:18:mitigation'],\n        name: 'Active Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'proc:19:gradual bc fill': {\n        id: BuffId['proc:19:gradual bc fill'],\n        name: 'Active Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:20:bc fill on hit': {\n        id: BuffId['proc:20:bc fill on hit'],\n        name: 'Active BC Fill when attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'proc:22:defense ignore': {\n        id: BuffId['proc:22:defense ignore'],\n        name: 'Active Defense Ignore',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'proc:23:spark damage': {\n        id: BuffId['proc:23:spark damage'],\n        name: 'Active Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'proc:24:converted-atk': {\n        id: BuffId['proc:24:converted-atk'],\n        name: 'Active Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'proc:24:converted-def': {\n        id: BuffId['proc:24:converted-def'],\n        name: 'Active Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'proc:24:converted-rec': {\n        id: BuffId['proc:24:converted-rec'],\n        name: 'Active Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'proc:26:hit count boost': {\n        id: BuffId['proc:26:hit count boost'],\n        name: 'Active Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'proc:27:proportional attack': {\n        id: BuffId['proc:27:proportional attack'],\n        name: 'Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:28:fixed attack': {\n        id: BuffId['proc:28:fixed attack'],\n        name: 'Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n    }, 'proc:29:multi-element attack': {\n        id: BuffId['proc:29:multi-element attack'],\n        name: 'Multi-Element Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n    }, 'proc:30:add element-fire': {\n        id: BuffId['proc:30:add element-fire'],\n        name: 'Active Added Element to Attack (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDFIRE],\n    }, 'proc:30:add element-water': {\n        id: BuffId['proc:30:add element-water'],\n        name: 'Active Added Element to Attack (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWATER],\n    }, 'proc:30:add element-earth': {\n        id: BuffId['proc:30:add element-earth'],\n        name: 'Active Added Element to Attack (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDEARTH],\n    }, 'proc:30:add element-thunder': {\n        id: BuffId['proc:30:add element-thunder'],\n        name: 'Active Added Element to Attack (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDTHUNDER],\n    }, 'proc:30:add element-light': {\n        id: BuffId['proc:30:add element-light'],\n        name: 'Active Added Element to Attack (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDLIGHT],\n    }, 'proc:30:add element-dark': {\n        id: BuffId['proc:30:add element-dark'],\n        name: 'Active Added Element to Attack (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDARK],\n    }, 'proc:30:add element-unknown': {\n        id: BuffId['proc:30:add element-unknown'],\n        name: 'Active Added Element to Attack (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDELEMENT],\n    }, 'proc:31:bc fill-flat': {\n        id: BuffId['proc:31:bc fill-flat'],\n        name: 'Burst BC Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:31:bc fill-percent': {\n        id: BuffId['proc:31:bc fill-percent'],\n        name: 'Burst BC Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:32:element shift-fire': {\n        id: BuffId['proc:32:element shift-fire'],\n        name: 'Element Shift (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTFIRE],\n    }, 'proc:32:element shift-water': {\n        id: BuffId['proc:32:element shift-water'],\n        name: 'Element Shift (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTWATER],\n    }, 'proc:32:element shift-earth': {\n        id: BuffId['proc:32:element shift-earth'],\n        name: 'Element Shift (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTEARTH],\n    }, 'proc:32:element shift-thunder': {\n        id: BuffId['proc:32:element shift-thunder'],\n        name: 'Element Shift (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTTHUNDER],\n    }, 'proc:32:element shift-light': {\n        id: BuffId['proc:32:element shift-light'],\n        name: 'Element Shift (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTLIGHT],\n    }, 'proc:32:element shift-dark': {\n        id: BuffId['proc:32:element shift-dark'],\n        name: 'Element Shift (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTDARK],\n    }, 'proc:32:element shift-unknown': {\n        id: BuffId['proc:32:element shift-unknown'],\n        name: 'Element Shift (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTELEMENT],\n    }, 'proc:33:buff wipe': {\n        id: BuffId['proc:33:buff wipe'],\n        name: 'Buff Removal',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_REMOVEBUFF],\n    }, 'proc:34:bc drain-flat': {\n        id: BuffId['proc:34:bc drain-flat'],\n        name: 'Burst BB Gauge Drain (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:34:bc drain-percent': {\n        id: BuffId['proc:34:bc drain-percent'],\n        name: 'Burst BB Gauge Drain (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:36:ls lock': {\n        id: BuffId['proc:36:ls lock'],\n        name: 'Active Leader Skill Lock',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DISABLELS],\n    }, 'proc:37:summon': {\n        id: BuffId['proc:37:summon'],\n        name: 'Summon Unit',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SUMMONUNIT],\n    }, 'proc:38:cleanse-poison': {\n        id: BuffId['proc:38:cleanse-poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:38:cleanse-weak': {\n        id: BuffId['proc:38:cleanse-weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:38:cleanse-sick': {\n        id: BuffId['proc:38:cleanse-sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:38:cleanse-injury': {\n        id: BuffId['proc:38:cleanse-injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:38:cleanse-curse': {\n        id: BuffId['proc:38:cleanse-curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:38:cleanse-paralysis': {\n        id: BuffId['proc:38:cleanse-paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:38:cleanse-atk down': {\n        id: BuffId['proc:38:cleanse-atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTATKDOWN],\n    }, 'proc:38:cleanse-def down': {\n        id: BuffId['proc:38:cleanse-def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTDEFDOWN],\n    }, 'proc:38:cleanse-rec down': {\n        id: BuffId['proc:38:cleanse-rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTRECDOWN],\n    }, 'proc:38:cleanse-unknown': {\n        id: BuffId['proc:38:cleanse-unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:39:mitigate-fire': {\n        id: BuffId['proc:39:mitigate-fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:39:mitigate-water': {\n        id: BuffId['proc:39:mitigate-water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:39:mitigate-earth': {\n        id: BuffId['proc:39:mitigate-earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:39:mitigate-thunder': {\n        id: BuffId['proc:39:mitigate-thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:39:mitigate-light': {\n        id: BuffId['proc:39:mitigate-light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:39:mitigate-dark': {\n        id: BuffId['proc:39:mitigate-dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:39:mitigate-unknown': {\n        id: BuffId['proc:39:mitigate-unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:40:add ailment-poison': {\n        id: BuffId['proc:40:add ailment-poison'],\n        name: 'Active Poison Infliction Added to Attack',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'proc:40:add ailment-weak': {\n        id: BuffId['proc:40:add ailment-weak'],\n        name: 'Active Weak Infliction Added to Attack',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'proc:40:add ailment-sick': {\n        id: BuffId['proc:40:add ailment-sick'],\n        name: 'Active Sick Infliction Added to Attack',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'proc:40:add ailment-injury': {\n        id: BuffId['proc:40:add ailment-injury'],\n        name: 'Active Injury Infliction Added to Attack',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'proc:40:add ailment-curse': {\n        id: BuffId['proc:40:add ailment-curse'],\n        name: 'Active Curse Infliction Added to Attack',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'proc:40:add ailment-paralysis': {\n        id: BuffId['proc:40:add ailment-paralysis'],\n        name: 'Active Paralysis Infliction Added to Attack',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'proc:40:add ailment-atk down': {\n        id: BuffId['proc:40:add ailment-atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:40:add ailment-def down': {\n        id: BuffId['proc:40:add ailment-def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:40:add ailment-rec down': {\n        id: BuffId['proc:40:add ailment-rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:40:add ailment-unknown': {\n        id: BuffId['proc:40:add ailment-unknown'],\n        name: 'Active Unknown Ailment Infliction Added to Attack',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'proc:42:sacrificial attack': {\n        id: BuffId['proc:42:sacrificial attack'],\n        name: 'Sacrificial Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n    }, 'proc:42:instant death': {\n        id: BuffId['proc:42:instant death'],\n        name: 'Instant Death to Self (Post-Attack)',\n        stackType: BuffStackType.Burst,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL, IconId.BUFF_KO],\n    }, 'proc:43:burst od fill': {\n        id: BuffId['proc:43:burst od fill'],\n        name: 'Burst OD Gauge Fill (Percentage)',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ODFILLBOOST],\n    }, 'proc:44:damage over time': {\n        id: BuffId['proc:44:damage over time'],\n        name: 'Active Damage over Time',\n        stat: UnitStat.damageOverTime,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_TURNDMG],\n    }, 'proc:45:attack boost-bb': {\n        id: BuffId['proc:45:attack boost-bb'],\n        name: 'Active BB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'proc:45:attack boost-sbb': {\n        id: BuffId['proc:45:attack boost-sbb'],\n        name: 'Active SBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'proc:45:attack boost-ubb': {\n        id: BuffId['proc:45:attack boost-ubb'],\n        name: 'Active UBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'proc:46:non-lethal proportional attack': {\n        id: BuffId['proc:46:non-lethal proportional attack'],\n        name: 'Non-Lethal Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:47:hp scaled attack': {\n        id: BuffId['proc:47:hp scaled attack'],\n        name: 'HP Scaled Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPSCALED : IconId.ATK_AOE_HPSCALED],\n    }, 'proc:48:piercing attack-base': {\n        id: BuffId['proc:48:piercing attack-base'],\n        name: 'Piercing Proportional Damage (Base HP)',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n    }, 'proc:48:piercing attack-current': {\n        id: BuffId['proc:48:piercing attack-current'],\n        name: 'Piercing Proportional Damage (Current HP)',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n    }, 'proc:48:piercing attack-fixed': {\n        id: BuffId['proc:48:piercing attack-fixed'],\n        name: 'Piercing Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_FIXED : IconId.ATK_AOE_PIERCING_FIXED],\n    }, 'proc:48:piercing attack-unknown': {\n        id: BuffId['proc:48:piercing attack-unknown'],\n        name: 'Unknown Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:49:chance instant death': {\n        id: BuffId['proc:49:chance instant death'],\n        name: 'Instant Death (Chance)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KO],\n    }, 'proc:50:chance damage reflect': {\n        id: BuffId['proc:50:chance damage reflect'],\n        name: 'Active Damage Reflect (Chance)',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'proc:51:add to attack-atk down': {\n        id: BuffId['proc:51:add to attack-atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:51:add to attack-def down': {\n        id: BuffId['proc:51:add to attack-def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:51:add to attack-rec down': {\n        id: BuffId['proc:51:add to attack-rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:52:bc efficacy': {\n        id: BuffId['proc:52:bc efficacy'],\n        name: 'Active BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'proc:53:inflict on hit-poison': {\n        id: BuffId['proc:53:inflict on hit-poison'],\n        name: 'Active Poison Counter',\n        stat: UnitStat.poisonCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONCOUNTER],\n    }, 'proc:53:inflict on hit-weak': {\n        id: BuffId['proc:53:inflict on hit-weak'],\n        name: 'Active Weak Counter',\n        stat: UnitStat.weakCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKCOUNTER],\n    }, 'proc:53:inflict on hit-sick': {\n        id: BuffId['proc:53:inflict on hit-sick'],\n        name: 'Active Sick Counter',\n        stat: UnitStat.sickCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKCOUNTER],\n    }, 'proc:53:inflict on hit-injury': {\n        id: BuffId['proc:53:inflict on hit-injury'],\n        name: 'Active Injury Counter',\n        stat: UnitStat.injuryCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJCONTER],\n    }, 'proc:53:inflict on hit-curse': {\n        id: BuffId['proc:53:inflict on hit-curse'],\n        name: 'Active Curse Counter',\n        stat: UnitStat.curseCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSECOUNTER],\n    }, 'proc:53:inflict on hit-paralysis': {\n        id: BuffId['proc:53:inflict on hit-paralysis'],\n        name: 'Active Paralysis Counter',\n        stat: UnitStat.paralysisCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYCOUNTER],\n    }, 'proc:54:critical damage boost': {\n        id: BuffId['proc:54:critical damage boost'],\n        name: 'Active Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'proc:55:elemental weakness damage-fire': {\n        id: BuffId['proc:55:elemental weakness damage-fire'],\n        name: 'Active Fire Elemental Damage Boost',\n        stat: UnitStat.fireElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGUP],\n    }, 'proc:55:elemental weakness damage-water': {\n        id: BuffId['proc:55:elemental weakness damage-water'],\n        name: 'Active Water Elemental Damage Boost',\n        stat: UnitStat.waterElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGUP],\n    }, 'proc:55:elemental weakness damage-earth': {\n        id: BuffId['proc:55:elemental weakness damage-earth'],\n        name: 'Active Earth Elemental Damage Boost',\n        stat: UnitStat.earthElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGUP],\n    }, 'proc:55:elemental weakness damage-thunder': {\n        id: BuffId['proc:55:elemental weakness damage-thunder'],\n        name: 'Active Thunder Elemental Damage Boost',\n        stat: UnitStat.thunderElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGUP],\n    }, 'proc:55:elemental weakness damage-light': {\n        id: BuffId['proc:55:elemental weakness damage-light'],\n        name: 'Active Light Elemental Damage Boost',\n        stat: UnitStat.lightElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGUP],\n    }, 'proc:55:elemental weakness damage-dark': {\n        id: BuffId['proc:55:elemental weakness damage-dark'],\n        name: 'Active Dark Elemental Damage Boost',\n        stat: UnitStat.darkElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGUP],\n    }, 'proc:55:elemental weakness damage-unknown': {\n        id: BuffId['proc:55:elemental weakness damage-unknown'],\n        name: 'Active Elemental Damage Boost (Unspecified Element)',\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGUP],\n    }, 'proc:56:chance ko resistance': {\n        id: BuffId['proc:56:chance ko resistance'],\n        name: 'KO Resistance (Chance)',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, 'proc:57:bc drop resistance-base': {\n        id: BuffId['proc:57:bc drop resistance-base'],\n        name: 'Active Base Battle Crystal Drop Rate Reduction',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BCDOWN],\n    }, 'proc:57:bc drop resistance-buff': {\n        id: BuffId['proc:57:bc drop resistance-buff'],\n        name: 'Active Buffed Battle Crystal Drop Rate Reduction',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BCDOWN],\n    }, 'proc:57:hc drop resistance-base': {\n        id: BuffId['proc:57:hc drop resistance-base'],\n        name: 'Active Base Heart Crystal Drop Rate Reduction',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HCDOWN],\n    }, 'proc:57:hc drop resistance-buff': {\n        id: BuffId['proc:57:hc drop resistance-buff'],\n        name: 'Active Buffed Heart Crystal Drop Rate Reduction',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HCDOWN],\n    }, 'proc:58:spark vulnerability': {\n        id: BuffId['proc:58:spark vulnerability'],\n        name: 'Active Spark Vulnerability',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SPARKDMGUP],\n    }, 'proc:59:attack reduction-bb': {\n        id: BuffId['proc:59:attack reduction-bb'],\n        name: 'Active BB ATK Reduction',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBATKDOWN],\n    }, 'proc:59:attack reduction-sbb': {\n        id: BuffId['proc:59:attack reduction-sbb'],\n        name: 'Active SBB ATK Reduction',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SBBATKDOWN],\n    }, 'proc:59:attack reduction-ubb': {\n        id: BuffId['proc:59:attack reduction-ubb'],\n        name: 'Active UBB ATK Reduction',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_UBBATKDOWN],\n    }, 'proc:61:party bb gauge-scaled attack': {\n        id: BuffId['proc:61:party bb gauge-scaled attack'],\n        name: 'Party BB Gauge-Scaled Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED],\n    }, 'proc:61:party bc drain': {\n        id: BuffId['proc:61:party bc drain'],\n        name: 'Party BB Gauge Drain (Post-Attack)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED, IconId.BUFF_BBFILLDOWN],\n    }, 'proc:62:barrier-fire': {\n        id: BuffId['proc:62:barrier-fire'],\n        name: 'Fire Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_FIRESHIELD],\n    }, 'proc:62:barrier-water': {\n        id: BuffId['proc:62:barrier-water'],\n        name: 'Water Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_WATERSHIELD],\n    }, 'proc:62:barrier-earth': {\n        id: BuffId['proc:62:barrier-earth'],\n        name: 'Earth Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_EARTHSHIELD],\n    }, 'proc:62:barrier-thunder': {\n        id: BuffId['proc:62:barrier-thunder'],\n        name: 'Thunder Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_THUNDERSHIELD],\n    }, 'proc:62:barrier-light': {\n        id: BuffId['proc:62:barrier-light'],\n        name: 'Light Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_LIGHTSHIELD],\n    }, 'proc:62:barrier-dark': {\n        id: BuffId['proc:62:barrier-dark'],\n        name: 'Dark Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_DARKSHIELD],\n    }, 'proc:62:barrier-all': {\n        id: BuffId['proc:62:barrier-all'],\n        name: 'Barrier (All Elements)',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_ELEMENTSHIELD],\n    }, 'proc:62:barrier-unknown': {\n        id: BuffId['proc:62:barrier-unknown'],\n        name: 'Barrier (Unspecified Element)',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_ELEMENTSHIELD],\n    }, 'proc:64:consecutive usage attack': {\n        id: BuffId['proc:64:consecutive usage attack'],\n        name: 'Consecutive Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_USAGESCALED : IconId.ATK_AOE_USAGESCALED],\n    }, 'proc:65:ailment attack boost': {\n        id: BuffId['proc:65:ailment attack boost'],\n        name: 'Active Attack Boost on Status Afflicted Foes',\n        stat: UnitStat.ailmentAttackBoost,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_AILDMGUP],\n    }, 'proc:66:chance revive': {\n        id: BuffId['proc:66:chance revive'],\n        name: 'Instant Revive (Chance)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, 'proc:67:bc fill on spark': {\n        id: BuffId['proc:67:bc fill on spark'],\n        name: 'Active BC Fill on Spark',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SPARKBBUP],\n    }, 'proc:68:guard mitigation': {\n        id: BuffId['proc:68:guard mitigation'],\n        name: 'Active Guard Damage Reduction',\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_GUARDCUT],\n    }, 'proc:69:bc fill on guard-percent': {\n        id: BuffId['proc:69:bc fill on guard-percent'],\n        name: 'Active BC Fill on Guard (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'proc:69:bc fill on guard-flat': {\n        id: BuffId['proc:69:bc fill on guard-flat'],\n        name: 'Active BC Fill on Guard (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'proc:71:bc efficacy reduction': {\n        id: BuffId['proc:71:bc efficacy reduction'],\n        name: 'Active BC Efficacy Reduction',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:73:resist-atk down': {\n        id: BuffId['proc:73:resist-atk down'],\n        name: 'Active Attack Reduction Resistance',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTATKDOWN],\n    }, 'proc:73:resist-def down': {\n        id: BuffId['proc:73:resist-def down'],\n        name: 'Active Defense Reduction Resistance',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTDEFDOWN],\n    }, 'proc:73:resist-rec down': {\n        id: BuffId['proc:73:resist-rec down'],\n        name: 'Active Recovery Reduction Resistance',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTRECDOWN],\n    }, 'proc:75:element squad-scaled attack': {\n        id: BuffId['proc:75:element squad-scaled attack'],\n        name: 'Element Squad-Scaled Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_ELEMENTSCALED : IconId.ATK_AOE_ELEMENTSCALED],\n    }, 'proc:76:extra action': {\n        id: BuffId['proc:76:extra action'],\n        name: 'Active Extra Action',\n        stat: UnitStat.extraAction,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DBLSTRIKE],\n    }, 'proc:78:self stat boost-atk': {\n        id: BuffId['proc:78:self stat boost-atk'],\n        name: 'Active Self Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWNLOCK : IconId.BUFF_SELFATKUP],\n    }, 'proc:78:self stat boost-def': {\n        id: BuffId['proc:78:self stat boost-def'],\n        name: 'Active Self Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWNLOCK : IconId.BUFF_SELFDEFUP],\n    }, 'proc:78:self stat boost-rec': {\n        id: BuffId['proc:78:self stat boost-rec'],\n        name: 'Active Self Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWNLOCK : IconId.BUFF_SELFRECUP],\n    }, 'proc:78:self stat boost-crit': {\n        id: BuffId['proc:78:self stat boost-crit'],\n        name: 'Active Self Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWNLOCK : IconId.BUFF_SELFCRTRATEUP],\n    }, 'proc:79:player exp boost': {\n        id: BuffId['proc:79:player exp boost'],\n        name: 'Active Player EXP Boost',\n        stat: UnitStat.expModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_PLAYEREXP],\n    }, 'proc:82:resummon': {\n        id: BuffId['proc:82:resummon'],\n        name: 'Resummon Unit',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SUMMONUNIT],\n    }, 'proc:83:spark critical': {\n        id: BuffId['proc:83:spark critical'],\n        name: 'Active Spark Critical',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SPARKCRTACTIVATED],\n    }, 'proc:84:od fill rate': {\n        id: BuffId['proc:84:od fill rate'],\n        name: 'Active OD Gauge Fill Rate',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_OVERDRIVEUP],\n    }, 'proc:85:heal on hit': {\n        id: BuffId['proc:85:heal on hit'],\n        name: 'Active Heal when Attacked (Chance)',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'proc:86:hp absorb': {\n        id: BuffId['proc:86:hp absorb'],\n        name: 'Active HP Absorption',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HPABS],\n    }, 'proc:87:heal on spark': {\n        id: BuffId['proc:87:heal on spark'],\n        name: 'Active Heal on Spark (Chance)',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SPARK_HPREC],\n    }, 'proc:88:self spark damage': {\n        id: BuffId['proc:88:self spark damage'],\n        name: 'Active Self Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDMGDOWN2 : IconId.BUFF_SPARKDMGUP2],\n    }, 'proc:89:self converted-atk': {\n        id: BuffId['proc:89:self converted-atk'],\n        name: 'Active Self Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_SELFCONVERTATKDOWN : IconId.BUFF_SELFCONVERTATKUP],\n    }, 'proc:89:self converted-def': {\n        id: BuffId['proc:89:self converted-def'],\n        name: 'Active Self Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_SELFCONVERTDEFDOWN : IconId.BUFF_SELFCONVERTDEFUP],\n    }, 'proc:89:self converted-rec': {\n        id: BuffId['proc:89:self converted-rec'],\n        name: 'Active Self Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_SELFCONVERTRECDOWN : IconId.BUFF_SELFCONVERTRECUP],\n    }, 'proc:92:self max hp boost-flat': {\n        id: BuffId['proc:92:self max hp boost-flat'],\n        name: 'Self Max HP Boost (Flat Amount)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SELFHPUP],\n    }, 'proc:92:self max hp boost-percent': {\n        id: BuffId['proc:92:self max hp boost-percent'],\n        name: 'Self Max HP Boost (Percentage)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SELFHPUP],\n    }, 'proc:93:critical damage resistance-base': {\n        id: BuffId['proc:93:critical damage resistance-base'],\n        name: 'Active Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'proc:93:critical damage resistance-buff': {\n        id: BuffId['proc:93:critical damage resistance-buff'],\n        name: 'Active Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'proc:93:element damage resistance-base': {\n        id: BuffId['proc:93:element damage resistance-base'],\n        name: 'Active Base Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'proc:93:element damage resistance-buff': {\n        id: BuffId['proc:93:element damage resistance-buff'],\n        name: 'Active Buffed Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'proc:93:spark damage resistance-base': {\n        id: BuffId['proc:93:spark damage resistance-base'],\n        name: 'Active Base Spark Damage Reduction',\n        stat: UnitStat.sparkDamageMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SPARKDMGDOWN],\n    }, 'proc:93:spark damage resistance-buff': {\n        id: BuffId['proc:93:spark damage resistance-buff'],\n        name: 'Active Buffed Spark Damage Reduction',\n        stat: UnitStat.sparkDamageMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SPARKDMGDOWN],\n    }, 'proc:94:aoe normal attack': {\n        id: BuffId['proc:94:aoe normal attack'],\n        name: 'Active Normal Attacks Hit All Foes',\n        stat: UnitStat.aoeNormalAttack,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_AOEATK],\n    }, 'proc:95:sphere lock': {\n        id: BuffId['proc:95:sphere lock'],\n        name: 'Active Sphere Lock',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_NULLSPHERE],\n    }, 'proc:96:es lock': {\n        id: BuffId['proc:96:es lock'],\n        name: 'Active Extra Skill Lock',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_NULLES],\n    }, 'proc:97:element specific attack': {\n        id: BuffId['proc:97:element specific attack'],\n        name: 'Element Target Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => {\n            let elements;\n            if (buff && buff.conditions && buff.conditions.targetElements && buff.conditions.targetElements.length > 0) {\n                elements = buff.conditions.targetElements;\n            }\n            else {\n                elements = [BuffConditionElement.Unknown];\n            }\n            const elementalIconKeys = elements.map((inputElement) => {\n                const element = typeof inputElement === 'string' ? inputElement : '';\n                let iconKey = `BUFF_${element.toUpperCase()}DMGUP`;\n                if (!(iconKey in IconId)) {\n                    iconKey = 'BUFF_ELEMENTDMGUP';\n                }\n                return IconId[iconKey];\n            });\n            return [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE].concat(elementalIconKeys);\n        },\n    }, 'proc:113:gradual od fill': {\n        id: BuffId['proc:113:gradual od fill'],\n        name: 'Active Gradual OD Gauge Fill (Flat Amount)',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ODFILLBOOST],\n    }, UNKNOWN_CONDITIONAL_EFFECT_ID: {\n        id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n        name: 'Unknown Conditional Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_CONDITIONAL_BUFF_PARAMS: {\n        id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n        name: 'Unknown Conditional Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'conditional:1:attack buff': {\n        id: BuffId['conditional:1:attack buff'],\n        name: 'Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'conditional:3:defense buff': {\n        id: BuffId['conditional:3:defense buff'],\n        name: 'Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'conditional:5:recovery buff': {\n        id: BuffId['conditional:5:recovery buff'],\n        name: 'Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'conditional:7:critical hit rate buff': {\n        id: BuffId['conditional:7:critical hit rate buff'],\n        name: 'Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'conditional:8:gradual heal': {\n        id: BuffId['conditional:8:gradual heal'],\n        name: 'Conditional Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'conditional:12:guaranteed ko resistance': {\n        id: BuffId['conditional:12:guaranteed ko resistance'],\n        name: 'Conditional Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_KOBLK],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'conditional:13:elemental attack buff': {\n            id: BuffId['conditional:13:elemental attack buff'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'conditional:14:elemental defense buff': {\n            id: BuffId['conditional:14:elemental defense buff'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: createIconGetterForStat('DEF'),\n        },\n    };\n})()), { 'conditional:21:fire mitigation': {\n        id: BuffId['conditional:21:fire mitigation'],\n        name: 'Conditional Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'conditional:22:water mitigation': {\n        id: BuffId['conditional:22:water mitigation'],\n        name: 'Conditional Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'conditional:23:earth mitigation': {\n        id: BuffId['conditional:23:earth mitigation'],\n        name: 'Conditional Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'conditional:24:thunder mitigation': {\n        id: BuffId['conditional:24:thunder mitigation'],\n        name: 'Conditional Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'conditional:25:light mitigation': {\n        id: BuffId['conditional:25:light mitigation'],\n        name: 'Conditional Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'conditional:26:dark mitigation': {\n        id: BuffId['conditional:26:dark mitigation'],\n        name: 'Conditional Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'conditional:36:mitigation': {\n        id: BuffId['conditional:36:mitigation'],\n        name: 'Conditional Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'conditional:37:gradual bc fill': {\n        id: BuffId['conditional:37:gradual bc fill'],\n        name: 'Conditional Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'conditional:40:spark damage': {\n        id: BuffId['conditional:40:spark damage'],\n        name: 'Conditional Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'conditional:51:add fire element': {\n        id: BuffId['conditional:51:add fire element'],\n        name: 'Conditional Added Fire Element to Attack',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ADDFIRE],\n    }, 'conditional:52:add water element': {\n        id: BuffId['conditional:52:add water element'],\n        name: 'Conditional Added Water Element to Attack',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ADDWATER],\n    }, 'conditional:53:add earth element': {\n        id: BuffId['conditional:53:add earth element'],\n        name: 'Conditional Added Earth Element to Attack',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ADDEARTH],\n    }, 'conditional:54:add thunder element': {\n        id: BuffId['conditional:54:add thunder element'],\n        name: 'Conditional Added Thunder Element to Attack',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ADDTHUNDER],\n    }, 'conditional:55:add light element': {\n        id: BuffId['conditional:55:add light element'],\n        name: 'Conditional Added Light Element to Attack',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ADDLIGHT],\n    }, 'conditional:56:add dark element': {\n        id: BuffId['conditional:56:add dark element'],\n        name: 'Conditional Added Dark Element to Attack',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ADDDARK],\n    }, 'conditional:72:attack boost-bb': {\n        id: BuffId['conditional:72:attack boost-bb'],\n        name: 'Conditional BB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'conditional:72:attack boost-sbb': {\n        id: BuffId['conditional:72:attack boost-sbb'],\n        name: 'Conditional SBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'conditional:72:attack boost-ubb': {\n        id: BuffId['conditional:72:attack boost-ubb'],\n        name: 'Conditional UBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'conditional:74:add atk down to attack': {\n        id: BuffId['conditional:74:add atk down to attack'],\n        name: 'Conditional Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'conditional:75:add def down to attack': {\n        id: BuffId['conditional:75:add def down to attack'],\n        name: 'Conditional Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'conditional:84:critical damage': {\n        id: BuffId['conditional:84:critical damage'],\n        name: 'Conditional Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'conditional:91:chance ko resistance': {\n        id: BuffId['conditional:91:chance ko resistance'],\n        name: 'Conditional KO Resistance (Chance)',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, 'conditional:95:fire barrier': {\n        id: BuffId['conditional:95:fire barrier'],\n        name: 'Conditional Fire Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_FIRESHIELD],\n    }, 'conditional:96:water barrier': {\n        id: BuffId['conditional:96:water barrier'],\n        name: 'Conditional Water Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_WATERSHIELD],\n    }, 'conditional:97:earth barrier': {\n        id: BuffId['conditional:97:earth barrier'],\n        name: 'Conditional Earth Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_EARTHSHIELD],\n    }, 'conditional:98:thunder barrier': {\n        id: BuffId['conditional:98:thunder barrier'],\n        name: 'Conditional Thunder Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_THUNDERSHIELD],\n    }, 'conditional:99:light barrier': {\n        id: BuffId['conditional:99:light barrier'],\n        name: 'Conditional Light Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_LIGHTSHIELD],\n    }, 'conditional:100:dark barrier': {\n        id: BuffId['conditional:100:dark barrier'],\n        name: 'Conditional Dark Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_DARKSHIELD],\n    }, 'conditional:111:bc fill on spark': {\n        id: BuffId['conditional:111:bc fill on spark'],\n        name: 'Conditional BC Fill on Spark',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_SPARKBBUP],\n    }, 'conditional:124:self attack buff': {\n        id: BuffId['conditional:124:self attack buff'],\n        name: 'Conditional Self Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWNLOCK : IconId.BUFF_SELFATKUP],\n    }, 'conditional:125:self defense buff': {\n        id: BuffId['conditional:125:self defense buff'],\n        name: 'Conditional Self Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWNLOCK : IconId.BUFF_SELFDEFUP],\n    }, 'conditional:131:spark critical': {\n        id: BuffId['conditional:131:spark critical'],\n        name: 'Conditional Spark Critical',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_SPARKCRTACTIVATED],\n    }, 'conditional:132:od fill rate': {\n        id: BuffId['conditional:132:od fill rate'],\n        name: 'Conditional OD Gauge Fill Rate',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_OVERDRIVEUP],\n    }, 'conditional:133:heal on hit': {\n        id: BuffId['conditional:133:heal on hit'],\n        name: 'Conditional Heal when Attacked (Chance)',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'conditional:143:critical damage reduction-base': {\n        id: BuffId['conditional:143:critical damage reduction-base'],\n        name: 'Conditional Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'conditional:143:critical damage reduction-buff': {\n        id: BuffId['conditional:143:critical damage reduction-buff'],\n        name: 'Conditional Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'conditional:144:spark damage reduction-base': {\n        id: BuffId['conditional:144:spark damage reduction-base'],\n        name: 'Conditional Base Spark Damage Reduction',\n        stat: UnitStat.sparkDamageMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_SPARKDMGDOWN],\n    }, 'conditional:144:spark damage reduction-buff': {\n        id: BuffId['conditional:144:spark damage reduction-buff'],\n        name: 'Conditional Buffed Spark Damage Reduction',\n        stat: UnitStat.sparkDamageMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_SPARKDMGDOWN],\n    }, 'conditional:145:elemental weakness damage reduction-base': {\n        id: BuffId['conditional:145:elemental weakness damage reduction-base'],\n        name: 'Conditional Base Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'conditional:145:elemental weakness damage reduction-buff': {\n        id: BuffId['conditional:145:elemental weakness damage reduction-buff'],\n        name: 'Conditional Buffed Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'conditional:153:chance inflict atk down on hit': {\n        id: BuffId['conditional:153:chance inflict atk down on hit'],\n        name: 'Conditional Attack Reduction Counter (Chance)',\n        stat: UnitStat.atkDownCounter,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_PROB_ATKREDUC],\n    }, 'conditional:10001:stealth': {\n        id: BuffId['conditional:10001:stealth'],\n        name: 'Conditional Stealth',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.SG_BUFF_STEALTH],\n    }, 'conditional:10001:stealth-atk': {\n        id: BuffId['conditional:10001:stealth-atk'],\n        name: 'Conditional Attack Boost (from Stealth)',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [IconId.SG_BUFF_STEALTH, (buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'conditional:10001:stealth-def': {\n        id: BuffId['conditional:10001:stealth-def'],\n        name: 'Conditional Defense Boost (from Stealth)',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [IconId.SG_BUFF_STEALTH, (buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'conditional:10001:stealth-rec': {\n        id: BuffId['conditional:10001:stealth-rec'],\n        name: 'Conditional Recovery Boost (from Stealth)',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [IconId.SG_BUFF_STEALTH, (buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'conditional:10001:stealth-crit': {\n        id: BuffId['conditional:10001:stealth-crit'],\n        name: 'Conditional Critical Hit Rate Boost (from Stealth)',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [IconId.SG_BUFF_STEALTH, (buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'conditional:10500:shield-all': {\n        id: BuffId['conditional:10500:shield-all'],\n        name: 'Non-Elemental Shield',\n        stat: UnitStat.shield,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.SG_BUFF_ALL],\n    }, 'conditional:10500:shield-fire': {\n        id: BuffId['conditional:10500:shield-fire'],\n        name: 'Fire Shield',\n        stat: UnitStat.shield,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.SG_BUFF_FIRE],\n    }, 'conditional:10500:shield-water': {\n        id: BuffId['conditional:10500:shield-water'],\n        name: 'Water Shield',\n        stat: UnitStat.shield,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.SG_BUFF_WATER],\n    }, 'conditional:10500:shield-earth': {\n        id: BuffId['conditional:10500:shield-earth'],\n        name: 'Earth Shield',\n        stat: UnitStat.shield,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.SG_BUFF_EARTH],\n    }, 'conditional:10500:shield-thunder': {\n        id: BuffId['conditional:10500:shield-thunder'],\n        name: 'Thunder Shield',\n        stat: UnitStat.shield,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.SG_BUFF_THUNDER],\n    }, 'conditional:10500:shield-light': {\n        id: BuffId['conditional:10500:shield-light'],\n        name: 'Light Shield',\n        stat: UnitStat.shield,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.SG_BUFF_LIGHT],\n    }, 'conditional:10500:shield-dark': {\n        id: BuffId['conditional:10500:shield-dark'],\n        name: 'Dark Shield',\n        stat: UnitStat.shield,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.SG_BUFF_DARK],\n    }, 'conditional:10500:shield-unknown': {\n        id: BuffId['conditional:10500:shield-unknown'],\n        name: 'Dark Shield',\n        stat: UnitStat.shield,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.SG_BUFF_UNKNOWN],\n    } }));\n","import { BUFF_METADATA } from './buff-metadata';\n/**\n * @description Get the associated metadata entry for a given buff ID.\n * @param id Buff ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","/**\n * @description Get the effects of a given extra skill.\n * @param skill Extra skill to get the effects of.\n * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForExtraSkill(skill) {\n    return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n}\n","/**\n * @description Get the effects of a given item.\n * @param item Item to get the effects of, if any are present,\n * @returns Effects of the given item if they exist, an empty array otherwise.\n */\nexport default function getEffectsForItem(item) {\n    let result = [];\n    if (item && item.effect) {\n        if (Array.isArray(item.effect)) {\n            result = item.effect;\n        }\n        else if (Array.isArray(item.effect.effect)) {\n            const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n            result = effect.map(e => {\n                // apply target data to each effect\n                const fullProcEffect = Object.assign({}, e);\n                fullProcEffect['target area'] = targetArea;\n                fullProcEffect['target type'] = targetType;\n                return fullProcEffect;\n            });\n        }\n    }\n    return result;\n}\n","/**\n * @description Generate a URL to display the image with the given item thumbnail filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents the thumbnail image for a given item.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getItemImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/item/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given leader skill.\n * @param skill Leader skill to get the effects of.\n * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForLeaderSkill(skill) {\n    return skill && Array.isArray(skill.effects) ? skill.effects : [];\n}\n","/**\n * @description Generate the file names for each of the image type for a given unit ID.\n * @param id Unit ID to use to generate the file names.\n * @param suffix Optional parameter that's useful for things like alternate art.\n * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n */\nexport default function getUnitImageFileNames(id, suffix = '') {\n    const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n    return {\n        spritesheet: `unit_anime_${fileNameSuffix}`,\n        battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n        guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n        fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n    };\n}\n","/**\n * @description Generate a URL to display the image with the given unit filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents an image for a given unit.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getUnitImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given SP Enhancement Entry.\n * @param entry SP Enhancement Entry to get the effects of.\n * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n */\nexport default function getEffectsForSpEnhancement(entry) {\n    const result = [];\n    if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n        const effectWrappers = entry.skill.effects;\n        effectWrappers.forEach(effectWrapper => {\n            Object.keys(effectWrapper).forEach(spType => {\n                const originalEffect = effectWrapper[spType];\n                const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                result.push(unwrappedEffect);\n            });\n        });\n    }\n    return result;\n}\n","import { SpCategoryName } from '../datamine-types';\n/**\n * @description Get the associated category name with a given category ID.\n * @param categoryId Category ID to get the name of.\n * @returns Name of the given category ID or the string 'Unknown'.\n */\nexport default function getSpCategoryName(categoryId) {\n    let result;\n    const numericalCategoryId = +categoryId;\n    switch (numericalCategoryId) {\n        case 1:\n            result = SpCategoryName['Parameter Boost'];\n            break;\n        case 2:\n            result = SpCategoryName.Spark;\n            break;\n        case 3:\n            result = SpCategoryName['Critical Hits'];\n            break;\n        case 4:\n            result = SpCategoryName['Attack Boost'];\n            break;\n        case 5:\n            result = SpCategoryName['BB Gauge'];\n            break;\n        case 6:\n            result = SpCategoryName['HP Recovery'];\n            break;\n        case 7:\n            result = SpCategoryName.Drops;\n            break;\n        case 8:\n            result = SpCategoryName['Ailment Resistance'];\n            break;\n        case 9:\n            result = SpCategoryName['Ailment Infliction'];\n            break;\n        case 10:\n            result = SpCategoryName['Damage Reduction'];\n            break;\n        case 11:\n            result = SpCategoryName.Special;\n            break;\n        default:\n            result = SpCategoryName.Unknown;\n            break;\n    }\n    return result;\n}\n","/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding character code for a given index.\n * It expects an index between 0 and 61 inclusive; will return an empty string if\n * the given value is outside of the range.\n * @param index Index of an SP entry in a given skills array.\n * @returns Corresponding single alphanumeric character to the given index\n * or an empty string if the index is invalid.\n */\nexport default function spIndexToCode(index) {\n    let result = '';\n    let correspondingCharacterCode = -1;\n    if (Number.isInteger(index)) {\n        if (index >= 0 && index <= 25) { // A-Z\n            correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (index >= 26 && index <= 51) { // a-z\n            correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n        }\n        else if (index >= 52 && index <= 61) { // 0-9\n            correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n        }\n    }\n    if (correspondingCharacterCode !== -1) {\n        result = String.fromCharCode(correspondingCharacterCode);\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding index for a given character code.\n * It expects an alphanumeric character and will return -1 otherwise.\n * @param code Character code an SP entry in a given skills array.\n * @returns Corresponding index to the given character or -1 if the\n * character is invalid.\n */\nexport default function spCodeToIndex(code) {\n    let result = -1;\n    let characterCodeOffset = -1;\n    if (!!code && typeof code === 'string' && code.length === 1) {\n        if (code >= 'A' && code <= 'Z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (code >= 'a' && code <= 'z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n        }\n        else if (code >= '0' && code <= '9') {\n            characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n        }\n    }\n    if (characterCodeOffset !== -1) {\n        result = code.charCodeAt(0) - characterCodeOffset;\n    }\n    return result;\n}\n","/**\n * @description Extract the ID of a string in the format of `number@actualId`. If there\n * is no value after the @ character or if no @ character is present, the original ID is returned.\n * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n * @param id Original SP Enhancement Entry ID.\n * @returns The ID of a string in the format of `number@actualId`, or the original input if\n * there is no @ character or no value after the @ character.\n */\nexport default function getSpEntryId(id) {\n    return (typeof id === 'string' && id.split('@')[1]) || id;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n * @param id SP Enhancement entry ID.\n * @param entries Collection of SP Enhancement entries to search in.\n * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n */\nexport default function getSpEntryWithId(id, entries) {\n    const spId = getSpEntryId(id);\n    return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n * @param entry SP Entry to get dependencies for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n */\nexport default function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependencies = [];\n    if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n        const dependencyId = getSpEntryId(entry.dependency);\n        const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n        if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n            addedEntries.add(dependencyEntry);\n            const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n            dependencies = [dependencyEntry].concat(subDependencies);\n        }\n    }\n    return dependencies;\n}\n","/**\n * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n * @param entry SP Entry to get dependents for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n */\nexport default function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependents = [];\n    if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n        const entryId = entry.id;\n        dependents = allEntries\n            .filter(s => {\n            return s.dependency &&\n                s.dependency.includes(entryId) &&\n                !addedEntries.has(s);\n        });\n        dependents.forEach(dependent => {\n            addedEntries.add(dependent);\n            const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n            dependents = dependents.concat(subDependents);\n        });\n    }\n    return dependents;\n}\n","/* NOTE: this file is automatically generated; do not edit this file */\nexport default '0.7.0';\n"]}