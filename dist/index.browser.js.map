{"version":3,"sources":["index.browser.js","bursts/getLevelEntryForBurst.js","bursts/getEffectsForBurst.js","buffs/getEffectId.js","buffs/constants.js","buffs/effect-metadata.js","buffs/getMetadataForProc.js","buffs/isAttackingProcId.js","bursts/getExtraAttackDamageFramesEntry.js","buffs/getMetadataForPassive.js","buffs/getNameForProc.js","buffs/getNameForPassive.js","buffs/isProcEffect.js","buffs/isPassiveEffect.js","datamine-types.js","buffs/combineEffectsAndDamageFrames.js","buffs/getEffectName.js","buffs/parsers/buff-types.js","buffs/parsers/_helpers.js","buffs/parsers/proc-effect-mapping.js","buffs/parsers/convertProcEffectToBuffs.js","buffs/parsers/passive-effect-mapping.js","buffs/parsers/convertPassiveEffectToBuffs.js","buffs/parsers/buff-metadata.js","buffs/parsers/getMetadataForBuff.js","extra-skills/getEffectsForExtraSkill.js","items/getEffectsForItem.js","items/getItemImageUrl.js","leader-skills/getEffectsForLeaderSkill.js","units/getUnitImageFileNames.js","units/getUnitImageUrl.js","sp-enhancements/getEffectsForSpEnhancement.js","sp-enhancements/getSpCategoryName.js","sp-enhancements/_constants.js","sp-enhancements/spIndexToCode.js","sp-enhancements/spCodeToIndex.js","sp-enhancements/getSpEntryId.js","sp-enhancements/getSpEntryWithId.js","sp-enhancements/getAllDependenciesForSpEntry.js","sp-enhancements/getAllEntriesThatDependOnSpEntry.js","version.js"],"names":["bfmtUtilities","exports","getLevelEntryForBurst","burst","level","burstEffectsByLevel","Array","isArray","levels","levelIndex","isNaN","length","getEffectsForBurst","levelEntry","effects","getEffectId","effect","resultId","KNOWN_PROC_ID","KNOWN_PASSIVE_ID","constants","Object","freeze","__proto__","ProcBuffType","PASSIVE_METADATA","PROC_METADATA","getMetadataForProc","id","metadata","hasOwnProperty","call","isAttackingProcId","metadataEntry","Type","Attack","getExtraAttackDamageFramesEntry","damageFrames","effectDelay","inputFrames","relevantFrames","filter","frame","procId","BurstHeal","unifiedFrames","reduce","acc","frameEntry","index","keepFirstFrame","numFrames","damageDistribution","frameTimes","frameIndex","push","damage","time","resultDamageFramesEntry","hits","sort","a","b","forEach","getMetadataForPassive","getNameForProc","Name","getNameForPassive","isProcEffect","isPassiveEffect","ArenaCondition","MoveType","TargetArea","TargetAreaShorthand","TargetType","SpPassiveType","SphereTypeName","SphereTypeId","SpCategoryName","SpCategoryId","UnitAnimationKey","UnitElement","UnitGender","UnitGettingType","UnitKind","UnitType","ItemType","MimicUnitIds","MimicMonsterGroupMapping","Mimic","BatMimic","DragonMimic","MetalMimic","datamineTypes","combineEffectsAndDamageFrames","combinedEntries","map","i","correspondingFrameEntry","delay","frames","targetArea","Random","targetType","getEffectName","resultName","effectId","passive","proc","BuffStackType","BuffSource","BuffConditionElement","UnitStat","IconId","BuffId","createSourceEntryFromContext","context","source","sourceId","createSourcesFromContext","resultArray","previousSources","slice","unshift","processExtraSkillConditions","conditions","aggregate","units","Set","items","sphereTypes","unknowns","condition","add","item","unit","type_id","condition_id","result","entries","entry","size","from","getPassiveTargetData","isLeaderSkillEffect","LeaderSkill","sp_type","EnhancePassive","isPartyEffect","Party","Self","Aoe","Single","getProcTargetData","parseNumberOrDefault","value","defaultValue","createUnknownParamsValue","params","startIndex","mapping","getProcEffectToBuffMapping","reload","Map","setMapping","ELEMENT_MAPPING","All","Fire","Water","Earth","Thunder","Light","Dark","retrieveCommonInfoForEffects","injectionContext","targetData","sources","splitEffectParams","split","createUnknownParamsEntry","unknownParams","originalId","assign","UNKNOWN_PROC_BUFF_PARAMS","createTurnDurationEntry","buffs","duration","TURN_DURATION_MODIFICATION","createUnknownParamsEntryFromExtraParams","extraParams","set","distribution","flatAtk","filteredValue","key","results","healLow","healHigh","recX","recY","keys","turnDuration","rec","hasAnyHealValues","flatFill","percentFill","rawFlatFill","rawPercentFill","element","atk","def","crit","coreStatProperties","rawElement","Unknown","effectElement","statType","effectKey","find","k","startsWith","concat","prop","hasAnyStats","some","statKey","buffEntry","targetElements","bc","hc","dropRateProperties","hasAnyRates","recoveredHpPercent","rawRecoveredHp","flatHpBoost","percentHpBoost","rawFlatBoost","rawPercentBoost","STAT_TYPE_MAPPING","statReductionEntries","statType1","value1","procChance1","statType2","value2","procChance2","rawTurnDuration","rawStatType","rawValue","rawProcChance","chance","stat","buffKey","hasAnyValues","defaultConversionFunction","UNKNOWN_PROC_EFFECT_ID","convertProcEffectToBuffs","TypeError","conversionFunction","reloadMapping","get","getPassiveEffectToBuffMapping","X","OmniParadigm","TYPE_MAPPING","Lord","Anima","Breaker","Guardian","Oracle","Rex","STATS_ORDER","AILMENTS_ORDER","conditionInfo","createaUnknownParamsEntry","UNKNOWN_PASSIVE_BUFF_PARAMS","typedEffect","stats","hp","elements","element1","element2","elementValue","createBaseStatObject","unitType","targetUnitType","resistances","poison","weak","sick","injury","curse","paralysis","ailment","mitigation","values","elem","UNKNOWN_PASSIVE_EFFECT_ID","convertPassiveEffectToBuffs","BUFF_METADATA","name","stackType","icons","UNKNOWN","turnDurationModification","Passive","buff","TURN_DURATION_DOWN","TURN_DURATION_UP","BUFF_HPDOWN","BUFF_HPUP","BUFF_ATKDOWN","BUFF_ATKUP","BUFF_DEFDOWN","BUFF_DEFUP","BUFF_RECDOWN","BUFF_RECUP","BUFF_CRTRATEDOWN","BUFF_CRTRATEUP","createIconGetterForStat","polarity","iconKey","toUpperCase","poisonResist","BUFF_POISONBLK","weakResist","BUFF_WEAKBLK","sickResist","BUFF_SICKBLK","injuryResist","BUFF_INJURYBLK","curseResist","BUFF_CURSEBLK","BUFF_PARALYSISBLK","fireMitigation","BUFF_FIREDMGDOWN","waterMitigation","BUFF_WATERDMGDOWN","earthMitigation","BUFF_EARTHDMGDOWN","thunderMitigation","BUFF_THUNDERDMGDOWN","lightMitigation","BUFF_LIGHTDMGDOWN","darkMitigation","BUFF_DARKDMGDOWN","BUFF_ELEMENTDMGDOWN","BUFF_DAMAGECUT","ATK_ST","ATK_AOE","Burst","BUFF_HPREC","Active","bbGauge","BUFF_BBREC","hasElement","bcDropRate","BUFF_BCDOWN","BUFF_BCDROP","hcDropRate","BUFF_HCDOWN","BUFF_HCDROP","itemDropRate","BUFF_ITEMDOWN","BUFF_ITEMDROP","koResistance","Singleton","BUFF_KOBLK","getMetadataForBuff","index$1","index$2","parsers","getEffectsForExtraSkill","skill","index$3","getEffectsForItem","target_area","target_type","e","fullProcEffect","getItemImageUrl","baseContentUrl","fileName","index$4","getEffectsForLeaderSkill","index$5","getUnitImageFileNames","suffix","fileNameSuffix","spritesheet","battleAvatar","guideAvatar","fullIllustration","getUnitImageUrl","index$6","getEffectsForSpEnhancement","effectWrappers","effectWrapper","spType","originalEffect","unwrappedEffect","getSpCategoryName","categoryId","numericalCategoryId","Spark","Drops","Special","CHARACTER_CODE_FOR_UPPERCASE_A","charCodeAt","CHARACTER_CODE_FOR_LOWERCASE_A","CHARACTER_CODE_FOR_NUMBER_0","spIndexToCode","correspondingCharacterCode","Number","isInteger","String","fromCharCode","spCodeToIndex","code","characterCodeOffset","getSpEntryId","getSpEntryWithId","spId","getAllDependenciesForSpEntry","allEntries","addedEntries","dependencies","dependency","dependencyId","dependencyEntry","s","has","subDependencies","getAllEntriesThatDependOnSpEntry","dependents","entryId","includes","dependent","subDependents","index$7","version","bursts","extraSkills","leaderSkills","spEnhancements"],"mappings":"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","file":"index.browser.js","sourcesContent":["var bfmtUtilities = (function (exports) {\n    'use strict';\n\n    /**\n     * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get level entry from.\n     * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n     * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n     */\n    function getLevelEntryForBurst(burst, level) {\n        const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n        let levelIndex;\n        if (level !== null && !isNaN(level)) {\n            // 1-indexed\n            levelIndex = (+level - 1);\n        }\n        else {\n            // default to last entry in burst\n            levelIndex = burstEffectsByLevel.length - 1;\n        }\n        return burstEffectsByLevel[levelIndex];\n    }\n\n    /**\n     * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get effects from.\n     * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n     * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n     */\n    function getEffectsForBurst(burst, level) {\n        const levelEntry = getLevelEntryForBurst(burst, level);\n        return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n    }\n\n    /**\n     * @description Get the proc/passive ID of a given object.\n     * @param effect Object to get the effect ID from.\n     * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectId(effect) {\n        let resultId = '';\n        if (effect) {\n            resultId = effect['proc id'] || effect['unknown proc id'] ||\n                effect['passive id'] || effect['unknown passive id'] || '';\n        }\n        return resultId;\n    }\n\n    var KNOWN_PROC_ID;\n    (function (KNOWN_PROC_ID) {\n        KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n        KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    })(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\n    var KNOWN_PASSIVE_ID;\n    (function (KNOWN_PASSIVE_ID) {\n        KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n        KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    })(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n\n    var constants = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get KNOWN_PROC_ID () { return KNOWN_PROC_ID; },\n        get KNOWN_PASSIVE_ID () { return KNOWN_PASSIVE_ID; }\n    });\n\n    var ProcBuffType;\n    (function (ProcBuffType) {\n        ProcBuffType[\"Attack\"] = \"Attack\";\n    })(ProcBuffType || (ProcBuffType = {}));\n    /* eslint-disable */\n    /**\n     * @ignore\n     */\n    const PASSIVE_METADATA = Object.freeze({\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Parameter Boost\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Elemental Parameter Boost\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Type-Based Parameter Boost\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"Status Negation\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Damage Reduction\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Gradual BB Gauge Boost\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"HC Efficacy\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"HP-Conditional Parameter Boost\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"HP-Conditional Drop Rate Boost\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"BC Fill on Enemy Defeat\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Damage Reduction (Chance)\"\n        },\n        \"15\": {\n            \"ID\": \"15\",\n            \"Name\": \"Heal on Enemy Defeat\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Heal on Battle Victory\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"HP Absorption\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Drop Rate Boost\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"Status Infliction\"\n        },\n        \"21\": {\n            \"ID\": \"21\",\n            \"Name\": \"Parameter Boost for First X Turns\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"BC Fill on Battle Victory\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Heal when Attacked (Chance)\"\n        },\n        \"25\": {\n            \"ID\": \"25\",\n            \"Name\": \"BC Fill when Hit (Chance)\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Damage Counter (Chance)\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Increased Target Chance\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Decreased Target Chance\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Defense Ignore (Chance)\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"BB Conditional Parameter Boost\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"BC Efficacy\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Heal over Time\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"Critical Damage Boost\"\n        },\n        \"35\": {\n            \"ID\": \"35\",\n            \"Name\": \"BC Fill when Normal Attacking\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Extra Action\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Hit Count Boost\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Parameter Conversion\"\n        },\n        \"41\": {\n            \"ID\": \"41\",\n            \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"Gender Parameter Boost\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Damage Reduction to 1\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Flat Parameter Boost\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"Critical Damage Negation\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"BC Fill on Spark\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"BC Cost Reduction\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"BB Gauge Consumption Reduction\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Elemental Damage Boost\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Conditional Effect based on HP Threshold\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Damage Reduction when Guarding\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BC Fill when Attacked when Guarding\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BC Fill on Guard\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Elemental Damage Reduction for first X Turns\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"BB Atk Boost\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"BC Fill on Critical\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Add buff to Brave Burst\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"OD Gauge Fill Rate Boost\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"Status Counter\"\n        },\n        \"72\": {\n            \"ID\": \"72\",\n            \"Name\": \"Turn End Effects Activate at Turn Start\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\"\n        },\n        \"74\": {\n            \"ID\": \"74\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Spark Vulnerability\"\n        },\n        \"77\": {\n            \"ID\": \"77\",\n            \"Name\": \"Spark Damage Reduction\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Conditional Effect after Damage Received Threshold\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"BC Fill after Damage Received Threshold\"\n        },\n        \"80\": {\n            \"ID\": \"80\",\n            \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n        },\n        \"81\": {\n            \"ID\": \"81\",\n            \"Name\": \"BC Fill after Damage Dealt Threshold\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"Conditional Effect after BC Received Threshold\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"Conditional Effect after HC Received Threshold\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"BC Fill after HC Received Threshold\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"Conditional Effect after Spark Threshold\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Conditional Effect on Guard\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Conditional Effect on Critical\"\n        },\n        \"90\": {\n            \"ID\": \"90\",\n            \"Name\": \"Status Infliction on Critical\"\n        },\n        \"91\": {\n            \"ID\": \"91\",\n            \"Name\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Negate Defense Ignore\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Added Elements\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Normal Attacks Hit All Foes\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Player EXP Boost\"\n        },\n        \"99\": {\n            \"ID\": \"99\",\n            \"Name\": \"\"\n        },\n        \"100\": {\n            \"ID\": \"100\",\n            \"Name\": \"Spark Critical\"\n        },\n        \"101\": {\n            \"ID\": \"101\",\n            \"Name\": \"Heal on Spark\"\n        },\n        \"102\": {\n            \"ID\": \"102\",\n            \"Name\": \"Added Elements\"\n        },\n        \"103\": {\n            \"ID\": \"103\",\n            \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n        },\n        \"104\": {\n            \"ID\": \"104\",\n            \"Name\": \"Spark Boost when HP Passes Threshold\"\n        },\n        \"105\": {\n            \"ID\": \"105\",\n            \"Name\": \"Turn-Based Parameter Boost\"\n        },\n        \"106\": {\n            \"ID\": \"106\",\n            \"Name\": \"Conditional Effect after Activating Overdrive\"\n        },\n        \"107\": {\n            \"ID\": \"107\",\n            \"Name\": \"Add Effect to Leader Skill\"\n        },\n        \"109\": {\n            \"ID\": \"109\",\n            \"Name\": \"BB Gauge Reduction (Chance)\"\n        },\n        \"110\": {\n            \"ID\": \"110\",\n            \"Name\": \"BC Efficacy Reduction (Chance)\"\n        },\n        \"111\": {\n            \"ID\": \"111\",\n            \"Name\": \"Increase Brave Burst Activation Rate\"\n        },\n        \"112\": {\n            \"ID\": \"112\",\n            \"Name\": \"ABP/CBP Boost\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Conditional Effect after HP Threshold\"\n        },\n        \"114\": {\n            \"ID\": \"114\",\n            \"Name\": \"Inflict Buff when Attacked\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n        },\n        \"128\": {\n            \"ID\": \"128\",\n            \"Name\": \"Damage Reduction from Normal Attacks\"\n        },\n        \"143\": {\n            \"ID\": \"143\",\n            \"Name\": \"Break Atk Parameter Limit\"\n        },\n        \"10008\": {\n            \"ID\": \"10008\",\n            \"Name\": \"Damage Reduction from Specific Sources\"\n        },\n        \"11004\": {\n            \"ID\": \"11004\",\n            \"Name\": \"Elemental Spark Damage Boost\"\n        },\n        \"11005\": {\n            \"ID\": \"11005\",\n            \"Name\": \"Elemental Critical Damage Boost\"\n        },\n        \"11006\": {\n            \"ID\": \"11006\",\n            \"Name\": \"Summoner EXP Boost\"\n        },\n        \"11009\": {\n            \"ID\": \"11009\",\n            \"Name\": \"Effect Duration Boost\"\n        },\n        \"66,1\": {\n            \"ID\": \"66,1\",\n            \"Name\": \"\"\n        }\n    });\n    /**\n     * @ignore\n     */\n    const PROC_METADATA = Object.freeze({\n        \"0\": {\n            \"ID\": \"0\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Regular Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Burst Heal\",\n            \"Type\": \"\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Heal over Time\",\n            \"Type\": \"\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"BB Gauge Refill\",\n            \"Type\": \"\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"Drop Rate\",\n            \"Type\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Parameter Reduction\",\n            \"Type\": \"\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"Status Cleanse\",\n            \"Type\": \"\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"Status Infliction\",\n            \"Type\": \"\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"Revive (Guaranteed)\",\n            \"Type\": \"\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"Random Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Lifesteal Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"Status Negation\",\n            \"Type\": \"\"\n        },\n        \"18\": {\n            \"ID\": \"18\",\n            \"Name\": \"Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Gradual BB Gauge Boost\",\n            \"Type\": \"\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"BC Fill on Hit\",\n            \"Type\": \"\"\n        },\n        \"22\": {\n            \"ID\": \"22\",\n            \"Name\": \"Defense Ignore\",\n            \"Type\": \"\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Hit Count Boost\",\n            \"Type\": \"\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Fixed Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Multi-Element Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"Add Elements\",\n            \"Type\": \"\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Instant BB Gauge Fill\",\n            \"Type\": \"\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"Element Shift\",\n            \"Type\": \"\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Buff Removal (Chance)\",\n            \"Type\": \"\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"BB Gauge Reduction (Chance)\",\n            \"Type\": \"\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Leader Skill Lock (Chance)\",\n            \"Type\": \"\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Summon Unit\",\n            \"Type\": \"\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"Status Cure\",\n            \"Type\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Status Infliction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Instant OD Fill\",\n            \"Type\": \"\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Damage over Time (Additional Damage)\",\n            \"Type\": \"\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"BB Atk Boost\",\n            \"Type\": \"\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Non-Lethal Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"HP Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"Piercing Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"Retire\",\n            \"Type\": \"\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Damage Counter\",\n            \"Type\": \"\"\n        },\n        \"51\": {\n            \"ID\": \"51\",\n            \"Name\": \"Parameter Reduction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"BC Efficacy\",\n            \"Type\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Status Counter\",\n            \"Type\": \"\"\n        },\n        \"54\": {\n            \"ID\": \"54\",\n            \"Name\": \"Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Elemental Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"56\": {\n            \"ID\": \"56\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"57\": {\n            \"ID\": \"57\",\n            \"Name\": \"BC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Spark Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BB Atk Reduction\",\n            \"Type\": \"\"\n        },\n        \"60\": {\n            \"ID\": \"60\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BB-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Barrier\",\n            \"Type\": \"\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Selective Buff Wipe\",\n            \"Type\": \"\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"Consecutive Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\",\n            \"Type\": \"\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Revive (Chance)\",\n            \"Type\": \"\"\n        },\n        \"67\": {\n            \"ID\": \"67\",\n            \"Name\": \"BC Fill on Spark\",\n            \"Type\": \"\"\n        },\n        \"68\": {\n            \"ID\": \"68\",\n            \"Name\": \"Damage Reduction when Guarding\",\n            \"Type\": \"\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"BC Fill on Guard\",\n            \"Type\": \"\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"BB Gauge Fill Rate Debuff\",\n            \"Type\": \"\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\",\n            \"Type\": \"\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Element Squad-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"76\": {\n            \"ID\": \"76\",\n            \"Name\": \"Extra Action\",\n            \"Type\": \"\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Self Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"Player EXP Boost\",\n            \"Type\": \"\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"83\": {\n            \"ID\": \"83\",\n            \"Name\": \"Spark Critical\",\n            \"Type\": \"\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"OD Gauge Fill Rate\",\n            \"Type\": \"\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"Heal when Attacked\",\n            \"Type\": \"\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"HP Absorption\",\n            \"Type\": \"\"\n        },\n        \"87\": {\n            \"ID\": \"87\",\n            \"Name\": \"Heal on Spark\",\n            \"Type\": \"\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Self Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Self Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Self Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"94\": {\n            \"ID\": \"94\",\n            \"Name\": \"Normal Attacks Hit All Foes\",\n            \"Type\": \"\"\n        },\n        \"95\": {\n            \"ID\": \"95\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n            \"Type\": \"\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Element Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Gradual OD Fill\",\n            \"Type\": \"\"\n        },\n        \"119\": {\n            \"ID\": \"119\",\n            \"Name\": \"Gradual BC Drain\",\n            \"Type\": \"\"\n        },\n        \"123\": {\n            \"ID\": \"123\",\n            \"Name\": \"OD Gauge Reduction\",\n            \"Type\": \"\"\n        },\n        \"126\": {\n            \"ID\": \"126\",\n            \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n            \"Type\": \"\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Lock On\",\n            \"Type\": \"\"\n        },\n        \"130\": {\n            \"ID\": \"130\",\n            \"Name\": \"Parameter Reduction Counter\",\n            \"Type\": \"\"\n        },\n        \"131\": {\n            \"ID\": \"131\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"132\": {\n            \"ID\": \"132\",\n            \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"901\": {\n            \"ID\": \"901\",\n            \"Name\": \"Raid Heal (on Map)\",\n            \"Type\": \"\"\n        },\n        \"902\": {\n            \"ID\": \"902\",\n            \"Name\": \"Raid Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"903\": {\n            \"ID\": \"903\",\n            \"Name\": \"Raid Boss Reveal\",\n            \"Type\": \"\"\n        },\n        \"905\": {\n            \"ID\": \"905\",\n            \"Name\": \"Raid Teleport\",\n            \"Type\": \"\"\n        },\n        \"906\": {\n            \"ID\": \"906\",\n            \"Name\": \"Raid Flee\",\n            \"Type\": \"\"\n        },\n        \"907\": {\n            \"ID\": \"907\",\n            \"Name\": \"Raid Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"908\": {\n            \"ID\": \"908\",\n            \"Name\": \"Raid Item Drop Rate Boost\",\n            \"Type\": \"\"\n        },\n        \"10000\": {\n            \"ID\": \"10000\",\n            \"Name\": \"Taunt\",\n            \"Type\": \"\"\n        },\n        \"10001\": {\n            \"ID\": \"10001\",\n            \"Name\": \"Stealth\",\n            \"Type\": \"\"\n        },\n        \"10002\": {\n            \"ID\": \"10002\",\n            \"Name\": \"Shield (old)\",\n            \"Type\": \"\"\n        },\n        \"10003\": {\n            \"ID\": \"10003\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"10004\": {\n            \"ID\": \"10004\",\n            \"Name\": \"Damage Immunity\",\n            \"Type\": \"\"\n        },\n        \"10005\": {\n            \"ID\": \"10005\",\n            \"Name\": \"Turn Skip (short duration)\",\n            \"Type\": \"\"\n        },\n        \"10006\": {\n            \"ID\": \"10006\",\n            \"Name\": \"Turn Skip (long duration)\",\n            \"Type\": \"\"\n        },\n        \"10007\": {\n            \"ID\": \"10007\",\n            \"Name\": \"Evasion\",\n            \"Type\": \"\"\n        },\n        \"10009\": {\n            \"ID\": \"10009\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"10012\": {\n            \"ID\": \"10012\",\n            \"Name\": \"OD Drain\",\n            \"Type\": \"\"\n        },\n        \"10015\": {\n            \"ID\": \"10015\",\n            \"Name\": \"Elemental Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"10016\": {\n            \"ID\": \"10016\",\n            \"Name\": \"Element Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"10017\": {\n            \"ID\": \"10017\",\n            \"Name\": \"Elemental Shield\",\n            \"Type\": \"\"\n        },\n        \"10018\": {\n            \"ID\": \"10018\",\n            \"Name\": \"Max HP Reduction\",\n            \"Type\": \"\"\n        },\n        \"10019\": {\n            \"ID\": \"10019\",\n            \"Name\": \"Effect Purge\",\n            \"Type\": \"\"\n        },\n        \"10020\": {\n            \"ID\": \"10020\",\n            \"Name\": \"Piercing Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"10021\": {\n            \"ID\": \"10021\",\n            \"Name\": \"Active Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10022\": {\n            \"ID\": \"10022\",\n            \"Name\": \"Passive Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10023\": {\n            \"ID\": \"10023\",\n            \"Name\": \"HC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"10025\": {\n            \"ID\": \"10025\",\n            \"Name\": \"KO Resistance Negation\",\n            \"Type\": \"\"\n        },\n        \"10026\": {\n            \"ID\": \"10026\",\n            \"Name\": \"Doom\",\n            \"Type\": \"\"\n        },\n        \"11000\": {\n            \"ID\": \"11000\",\n            \"Name\": \"Negative HP-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"11001\": {\n            \"ID\": \"11001\",\n            \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n            \"Type\": \"\"\n        },\n        \"11002\": {\n            \"ID\": \"11002\",\n            \"Name\": \"HP Limit Break, Convert to HP\",\n            \"Type\": \"\"\n        },\n        \"11003\": {\n            \"ID\": \"11003\",\n            \"Name\": \"Effect Negation\",\n            \"Type\": \"\"\n        },\n        \"70001\": {\n            \"ID\": \"70001\",\n            \"Name\": \"Mana Bubble Shield\",\n            \"Type\": \"\"\n        },\n        \"70002\": {\n            \"ID\": \"70002\",\n            \"Name\": \"Recast\",\n            \"Type\": \"\"\n        },\n        \"2-5\": {\n            \"ID\": \"2-5\",\n            \"Name\": \"Burst Heal and DEF/REC Boost\",\n            \"Type\": \"\"\n        }\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given proc ID.\n     * @param id Proc ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForProc(id, metadata = PROC_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Determine if a given proc ID's type is an attack.\n     * @param id Proc ID to check.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n     */\n    function isAttackingProcId(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n    }\n\n    /**\n     * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n     * @param damageFrames Damage frames that each have their own proc ID.\n     * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Damage frames entry whose frames are based on the input damage frames.\n     */\n    function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n        // relevant frames are all effects for healing or attacking\n        const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n        const relevantFrames = inputFrames.filter(frame => {\n            const procId = getEffectId(frame);\n            return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n        });\n        const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n            const keepFirstFrame = index === 0;\n            const numFrames = frameEntry['frame times'].length;\n            const damageDistribution = frameEntry['hit dmg% distribution'];\n            const frameTimes = frameEntry['frame times'];\n            for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n                acc.push({\n                    damage: damageDistribution[frameIndex],\n                    time: frameTimes[frameIndex],\n                });\n            }\n            return acc;\n        }, []);\n        const resultDamageFramesEntry = {\n            'effect delay time(ms)/frame': effectDelay,\n            'frame times': [],\n            'hit dmg% distribution': [],\n            'hit dmg% distribution (total)': 0,\n            hits: 0,\n        };\n        unifiedFrames.sort((a, b) => a.time - b.time)\n            .forEach(({ time, damage }) => {\n            resultDamageFramesEntry['frame times'].push(time);\n            resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n            resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n        });\n        resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n        return resultDamageFramesEntry;\n    }\n\n    var index = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLevelEntryForBurst: getLevelEntryForBurst,\n        getEffectsForBurst: getEffectsForBurst,\n        getExtraAttackDamageFramesEntry: getExtraAttackDamageFramesEntry\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given passive ID.\n     * @param id Passive ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Get the associated name for a given proc ID.\n     * @param id Proc ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Name of the proc ID if it exists, empty string otherwise.\n     */\n    function getNameForProc(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Get the associated name for a given passive ID.\n     * @param id Passive ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Name of the passive ID if it exists, empty string otherwise.\n     */\n    function getNameForPassive(id, metadata) {\n        const metadataEntry = getMetadataForPassive(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Determine if a given effect object is a proc effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a proc effect based on its properties.\n     */\n    function isProcEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n    }\n\n    /**\n     * @description Determine if a given effect object is a passive effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a passive effect based on its properties.\n     */\n    function isPassiveEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n    }\n\n    var ArenaCondition;\n    (function (ArenaCondition) {\n        ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n        ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n        ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n        ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n        ArenaCondition[\"hp_min\"] = \"hp_min\";\n        ArenaCondition[\"hp_max\"] = \"hp_max\";\n        ArenaCondition[\"atk_max\"] = \"atk_max\";\n        ArenaCondition[\"random\"] = \"random\";\n    })(ArenaCondition || (ArenaCondition = {}));\n    var MoveType;\n    (function (MoveType) {\n        MoveType[\"Moving\"] = \"1\";\n        MoveType[\"Teleporting\"] = \"2\";\n        MoveType[\"NonMoving\"] = \"3\";\n    })(MoveType || (MoveType = {}));\n    var TargetArea;\n    (function (TargetArea) {\n        TargetArea[\"Aoe\"] = \"aoe\";\n        TargetArea[\"Single\"] = \"single\";\n        TargetArea[\"Random\"] = \"random\";\n    })(TargetArea || (TargetArea = {}));\n    var TargetAreaShorthand;\n    (function (TargetAreaShorthand) {\n        TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n        TargetAreaShorthand[\"Single\"] = \"ST\";\n        TargetAreaShorthand[\"Random\"] = \"RT\";\n    })(TargetAreaShorthand || (TargetAreaShorthand = {}));\n    var TargetType;\n    (function (TargetType) {\n        TargetType[\"Self\"] = \"self\";\n        TargetType[\"Party\"] = \"party\";\n        TargetType[\"Enemy\"] = \"enemy\";\n    })(TargetType || (TargetType = {}));\n    var SpPassiveType;\n    (function (SpPassiveType) {\n        SpPassiveType[\"AddPassive\"] = \"passive\";\n        SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n        SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n        SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n        SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n    })(SpPassiveType || (SpPassiveType = {}));\n    var SphereTypeName;\n    (function (SphereTypeName) {\n        SphereTypeName[\"None\"] = \"None\";\n        SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n        SphereTypeName[\"Critical\"] = \"Critical\";\n        SphereTypeName[\"Drop\"] = \"Drop\";\n        SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n        SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n        SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n        SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n        SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n        SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n        SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n        SphereTypeName[\"Spark\"] = \"Spark\";\n        SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n        SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n        SphereTypeName[\"Special\"] = \"Special\";\n    })(SphereTypeName || (SphereTypeName = {}));\n    var SphereTypeId;\n    (function (SphereTypeId) {\n        SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n        SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n        SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n        SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n        SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n        SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n        SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n        SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n        SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n        SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n        SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n        SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n        SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n        SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n        SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n    })(SphereTypeId || (SphereTypeId = {}));\n    var SpCategoryName;\n    (function (SpCategoryName) {\n        SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n        SpCategoryName[\"Spark\"] = \"Spark\";\n        SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n        SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n        SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n        SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n        SpCategoryName[\"Drops\"] = \"Drops\";\n        SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n        SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n        SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n        SpCategoryName[\"Special\"] = \"Special\";\n        SpCategoryName[\"Unknown\"] = \"Unknown\";\n    })(SpCategoryName || (SpCategoryName = {}));\n    var SpCategoryId;\n    (function (SpCategoryId) {\n        SpCategoryId[\"Parameter Boost\"] = \"1\";\n        SpCategoryId[\"Spark\"] = \"2\";\n        SpCategoryId[\"Critical Hits\"] = \"3\";\n        SpCategoryId[\"Attack Boost\"] = \"4\";\n        SpCategoryId[\"BB Gauge\"] = \"5\";\n        SpCategoryId[\"HP Recovery\"] = \"6\";\n        SpCategoryId[\"Drops\"] = \"7\";\n        SpCategoryId[\"Ailment Resistance\"] = \"8\";\n        SpCategoryId[\"Ailment Infliction\"] = \"9\";\n        SpCategoryId[\"Damage Reduction\"] = \"10\";\n        SpCategoryId[\"Special\"] = \"11\";\n    })(SpCategoryId || (SpCategoryId = {}));\n    var UnitAnimationKey;\n    (function (UnitAnimationKey) {\n        UnitAnimationKey[\"Attack\"] = \"attack\";\n        UnitAnimationKey[\"Idle\"] = \"idle\";\n        UnitAnimationKey[\"Move\"] = \"move\";\n    })(UnitAnimationKey || (UnitAnimationKey = {}));\n    var UnitElement;\n    (function (UnitElement) {\n        UnitElement[\"Fire\"] = \"fire\";\n        UnitElement[\"Water\"] = \"water\";\n        UnitElement[\"Earth\"] = \"earth\";\n        UnitElement[\"Thunder\"] = \"thunder\";\n        UnitElement[\"Light\"] = \"light\";\n        UnitElement[\"Dark\"] = \"dark\";\n    })(UnitElement || (UnitElement = {}));\n    var UnitGender;\n    (function (UnitGender) {\n        UnitGender[\"Male\"] = \"male\";\n        UnitGender[\"Female\"] = \"female\";\n        UnitGender[\"Other\"] = \"other\";\n    })(UnitGender || (UnitGender = {}));\n    var UnitGettingType;\n    (function (UnitGettingType) {\n        UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n        UnitGettingType[\"Farmable\"] = \"farmable\";\n        UnitGettingType[\"RareSummon\"] = \"rare summon\";\n        UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n    })(UnitGettingType || (UnitGettingType = {}));\n    var UnitKind;\n    (function (UnitKind) {\n        UnitKind[\"Normal\"] = \"normal\";\n        UnitKind[\"Evolution\"] = \"evo\";\n        UnitKind[\"Enhancing\"] = \"enhancing\";\n        UnitKind[\"Sale\"] = \"sale\";\n    })(UnitKind || (UnitKind = {}));\n    var UnitType;\n    (function (UnitType) {\n        UnitType[\"Lord\"] = \"lord\";\n        UnitType[\"Anima\"] = \"anima\";\n        UnitType[\"Breaker\"] = \"breaker\";\n        UnitType[\"Guardian\"] = \"guardian\";\n        UnitType[\"Oracle\"] = \"oracle\";\n        UnitType[\"Rex\"] = \"rex\";\n    })(UnitType || (UnitType = {}));\n    var ItemType;\n    (function (ItemType) {\n        ItemType[\"Consumable\"] = \"consumable\";\n        ItemType[\"Material\"] = \"material\";\n        ItemType[\"Sphere\"] = \"sphere\";\n        ItemType[\"EvolutionMaterial\"] = \"evomat\";\n        ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n        ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n    })(ItemType || (ItemType = {}));\n    var MimicUnitIds;\n    (function (MimicUnitIds) {\n        MimicUnitIds[\"Mimic\"] = \"60142\";\n        MimicUnitIds[\"BatMimic\"] = \"60143\";\n        MimicUnitIds[\"DragonMimic\"] = \"60144\";\n        MimicUnitIds[\"MetalMimic\"] = \"60224\";\n    })(MimicUnitIds || (MimicUnitIds = {}));\n    /**\n     * @description Known values for the monster groups used in {@link IMimicInfo}.\n     */\n    const MimicMonsterGroupMapping = {\n        '1000': MimicUnitIds.Mimic,\n        '1100': MimicUnitIds.BatMimic,\n        '1101': MimicUnitIds.BatMimic,\n        '1200': MimicUnitIds.DragonMimic,\n        '1300': MimicUnitIds.MetalMimic,\n    };\n\n    var datamineTypes = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get ArenaCondition () { return ArenaCondition; },\n        get MoveType () { return MoveType; },\n        get TargetArea () { return TargetArea; },\n        get TargetAreaShorthand () { return TargetAreaShorthand; },\n        get TargetType () { return TargetType; },\n        get SpPassiveType () { return SpPassiveType; },\n        get SphereTypeName () { return SphereTypeName; },\n        get SphereTypeId () { return SphereTypeId; },\n        get SpCategoryName () { return SpCategoryName; },\n        get SpCategoryId () { return SpCategoryId; },\n        get UnitAnimationKey () { return UnitAnimationKey; },\n        get UnitElement () { return UnitElement; },\n        get UnitGender () { return UnitGender; },\n        get UnitGettingType () { return UnitGettingType; },\n        get UnitKind () { return UnitKind; },\n        get UnitType () { return UnitType; },\n        get ItemType () { return ItemType; },\n        get MimicUnitIds () { return MimicUnitIds; },\n        MimicMonsterGroupMapping: MimicMonsterGroupMapping\n    });\n\n    /**\n     * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n     * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n     * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n     * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n     */\n    function combineEffectsAndDamageFrames(effects, damageFrames) {\n        let combinedEntries = [];\n        if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n            combinedEntries = effects.map((effect, i) => {\n                const correspondingFrameEntry = damageFrames[i];\n                return {\n                    delay: effect['effect delay time(ms)/frame'],\n                    effect,\n                    frames: correspondingFrameEntry,\n                    id: `${effect['proc id'] || effect['unknown proc id']}`,\n                    targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                    targetType: effect['target type'],\n                };\n            });\n        }\n        return combinedEntries;\n    }\n\n    /**\n     * @description Get the name of a given object.\n     * @param effect Object to get the name from.\n     * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n     * @returns Name of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectName(effect, metadata = {}) {\n        let resultName = '';\n        const effectId = getEffectId(effect);\n        if (isPassiveEffect(effect)) {\n            resultName = getNameForPassive(effectId, metadata && metadata.passive);\n        }\n        else if (isProcEffect(effect)) {\n            resultName = getNameForProc(effectId, metadata && metadata.proc);\n        }\n        return resultName;\n    }\n\n    /**\n     * @description Provides info at a glance regarding a buff's source and how it stacks.\n     */\n    var BuffStackType;\n    (function (BuffStackType) {\n        /**\n         * @description The buff is activated via some skill and lasts for a number of turns.\n         * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n         * from different levels. Two possible levels of sources are:\n         * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n         * 2. Ultimate Brave Burst or Dual Brave Burst\n         */\n        BuffStackType[\"Active\"] = \"active\";\n        /**\n         * @description The buff is always active provided that the source is not nullified.\n         * Most passive buffs can stack with themselves.\n         */\n        BuffStackType[\"Passive\"] = \"passive\";\n        /**\n         * @description The buff is applied for a number of turns once a certain condition is met.\n         * Buffs of the same type are not able to stack.\n         */\n        BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n        /**\n         * @description Only one instance of the buff can be active at a time and can last indefinitely.\n         * A couple examples of this are Barrier and Max HP Boost.\n         */\n        BuffStackType[\"Singleton\"] = \"singleton\";\n        /**\n         * @description The buff's effects immediately apply to the target(s). This differs from singleton\n         * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n         * in the HP bar filling by the sum of those burst heals).\n         */\n        BuffStackType[\"Burst\"] = \"burst\";\n        /**\n         * @description A specific subset of `Burst` type buffs that deal damage to the target.\n         */\n        BuffStackType[\"Attack\"] = \"attack\";\n        /**\n         * @description Only for buffs that cannot be processed by the library yet.\n         */\n        BuffStackType[\"Unknown\"] = \"unknown\";\n    })(BuffStackType || (BuffStackType = {}));\n    var BuffSource;\n    (function (BuffSource) {\n        BuffSource[\"BraveBurst\"] = \"bb\";\n        BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n        BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n        BuffSource[\"DualBraveBurst\"] = \"dbb\";\n        BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n        BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n        BuffSource[\"SpEnhancement\"] = \"sp\";\n        BuffSource[\"Item\"] = \"item\";\n        BuffSource[\"LeaderSkill\"] = \"ls\";\n        BuffSource[\"ExtraSkill\"] = \"es\";\n        /**\n         * @description Buffs that result of having a number of OE+ units in the squad.\n         */\n        BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n        /**\n         * @description Buffs based on a units type. See {@link UnitType}.\n         */\n        BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n        /**\n         * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n         * as well as ambient turn reductions present in some late-game quests.\n         */\n        BuffSource[\"Quest\"] = \"quest\";\n    })(BuffSource || (BuffSource = {}));\n    /**\n     * @description Extra element values that can be used in addition to {@link UnitElement}.\n     */\n    var BuffConditionElement;\n    (function (BuffConditionElement) {\n        BuffConditionElement[\"Unknown\"] = \"unknown\";\n        BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n        BuffConditionElement[\"All\"] = \"all\";\n    })(BuffConditionElement || (BuffConditionElement = {}));\n    /**\n     * @description Stats on a unit that a buff can affect.\n     */\n    var UnitStat;\n    (function (UnitStat) {\n        UnitStat[\"hp\"] = \"hp\";\n        UnitStat[\"atk\"] = \"atk\";\n        UnitStat[\"def\"] = \"def\";\n        UnitStat[\"rec\"] = \"rec\";\n        UnitStat[\"crit\"] = \"crit\";\n        UnitStat[\"bbGauge\"] = \"bbGauge\";\n        UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n        UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n        UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n        UnitStat[\"poisonResist\"] = \"poisonResist\";\n        UnitStat[\"weakResist\"] = \"weakResist\";\n        UnitStat[\"sickResist\"] = \"sickResist\";\n        UnitStat[\"injuryResist\"] = \"injuryResist\";\n        UnitStat[\"curseResist\"] = \"curseResist\";\n        UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n        UnitStat[\"mitigation\"] = \"mitigation\";\n        UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n        UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n        UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n        UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n        UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n        UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n        UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n        UnitStat[\"koResistance\"] = \"koResistance\";\n    })(UnitStat || (UnitStat = {}));\n    var IconId;\n    (function (IconId) {\n        IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n        IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n        IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n        IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n        IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n        IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n        IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n        IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n        IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n        IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n        IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n        IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n        IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n        IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n        IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n        IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n        IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n        IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n        IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n        IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n        IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n        IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n        IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n        IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n        IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n        IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n        IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n        IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n        IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n        IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n        IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n        IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n        IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n        IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n        IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n        IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n        IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n        IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n        IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n        IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n        IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n        IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n        IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n        IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n        IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n        IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n        IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n        IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n        IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n        IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n        IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n        IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n        IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n        IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n        IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n        IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n        IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n        IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n        IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n        IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n        IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n        IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n        IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n        IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n        IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n        IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n        IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n        IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n        IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n        IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n        IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n        IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n        IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n        IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n        IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n        IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n        IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n        IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n        IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n        IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n        IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n        IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n        IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n        IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n        IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n        IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n        IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n        IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n        IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n        IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n        IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n        IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n        IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n        IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n        IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n        IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n        IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n        IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n        IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n        IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n        IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n        IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n        IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n        IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n        IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n        IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n        IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n        IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n        IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n        IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n        IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n        IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n        IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n        IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n        IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n        IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n        IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n        IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n        IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n        IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n        IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n        IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n        IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n        IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n        IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n        IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n        IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n        IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n        IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n        IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n        IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n        IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n        IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n        IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n        IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n        IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n        IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n        IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n        IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n        IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n        IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n        IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n        IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n        IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n        IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n        IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n        IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n        IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n        IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n        IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n        IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n        IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n        IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n        IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n        IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n        IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n        IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n        IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n        IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n        IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n        IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n        IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n        IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n        IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n        IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n        IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n        IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n        IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n        IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n        IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n        IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n        IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n        IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n        IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n        IconId[\"ATK_ST\"] = \"ATK_ST\";\n        IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n    })(IconId || (IconId = {}));\n    /**\n     * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n     * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n     * source of a given buff.\n     */\n    var BuffId;\n    (function (BuffId) {\n        BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n        BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n        BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n        BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n        BuffId[\"passive:1:def\"] = \"passive:1:def\";\n        BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n        BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n        BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n        BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n        BuffId[\"passive:2:def\"] = \"passive:2:def\";\n        BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n        BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n        BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n        BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n        BuffId[\"passive:3:def\"] = \"passive:3:def\";\n        BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n        BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n        BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n        BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n        BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n        BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n        BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n        BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n        BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n        BuffId[\"passive:5:water\"] = \"passive:5:water\";\n        BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n        BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n        BuffId[\"passive:5:light\"] = \"passive:5:light\";\n        BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n        BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n        BuffId[\"passive:8\"] = \"passive:8\";\n        BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n        BuffId[\"proc:1\"] = \"proc:1\";\n        BuffId[\"proc:2\"] = \"proc:2\";\n        BuffId[\"proc:3\"] = \"proc:3\";\n        BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n        BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n        BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n        BuffId[\"proc:5:def\"] = \"proc:5:def\";\n        BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n        BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n        BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n        BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n        BuffId[\"proc:6:item\"] = \"proc:6:item\";\n        BuffId[\"proc:7\"] = \"proc:7\";\n        BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n        BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n        BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n        BuffId[\"proc:9:def\"] = \"proc:9:def\";\n        BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n    })(BuffId || (BuffId = {}));\n\n    /**\n     * @description Helper function for creating an entry to be used in the `sources`\n     * property of {@link IBuff}.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourceEntryFromContext(context) {\n        return `${context.source}-${context.sourceId}`;\n    }\n    /**\n     * @description Helper function for creating an entries array to be used in the `sources`\n     * property of {@link IBuff}. It handles setting the order of the sources.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourcesFromContext(context) {\n        const resultArray = Array.isArray(context.previousSources)\n            ? context.previousSources.slice()\n            : [];\n        // Ensure that the current source is at the beginning of the array\n        resultArray.unshift(createSourceEntryFromContext(context));\n        return resultArray;\n    }\n    /**\n     * @description Given the conditions in an extra skill effect, normalize them into\n     * a simpler object containing the IDs of each condition type.\n     * @param effect Extra skill effect to process conditions from.\n     * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n     */\n    function processExtraSkillConditions(effect) {\n        const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n        const aggregate = {\n            units: new Set(),\n            items: new Set(),\n            sphereTypes: new Set(),\n            unknowns: new Set(),\n        };\n        conditions.forEach((condition, index) => {\n            if ('sphere category required (raw)' in condition) {\n                aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n            }\n            else if ('item required' in condition) {\n                condition['item required'].forEach((item) => {\n                    aggregate.items.add(item);\n                });\n            }\n            else if ('unit required' in condition) {\n                condition['unit required'].forEach((unit) => {\n                    aggregate.units.add(`${unit.id}`);\n                });\n            }\n            else {\n                aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n            }\n        });\n        // filter out properties that have no entries\n        const result = Object.entries(aggregate)\n            .filter((entry) => entry[1].size > 0)\n            .reduce((acc, entry) => {\n            acc[entry[0]] = Array.from(entry[1]);\n            return acc;\n        }, {});\n        return result;\n    }\n    /**\n     * @description Extract the target type and target area of a given passive effect.\n     * @param effect Passive effect to extract target data from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns The target data for the given effect and context. There are only two possible values:\n     * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n     */\n    function getPassiveTargetData(effect, context) {\n        const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n            (effect.sp_type === SpPassiveType.EnhancePassive);\n        const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n        return {\n            targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n            targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n        };\n    }\n    /**\n     * @description Extract the target type and target area of a given proc effect.\n     * @param effect Proc effect to extract target data from.\n     * @returns The target data for the given effect and context.\n     */\n    function getProcTargetData(effect) {\n        return {\n            targetArea: effect['target area'],\n            targetType: effect['target type'],\n        };\n    }\n    /**\n     * @description Try to parse the given value into a number or return a value if it is not a number.\n     * @param value Value to parse into a number.\n     * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n     * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n     */\n    function parseNumberOrDefault(value, defaultValue = 0) {\n        return (value !== null && !isNaN(value)) ? +value : defaultValue;\n    }\n    /**\n     * @description Create an object denoting values that cannot be processed yet. To be used\n     * in the `value` property of `IBuff` as needed.\n     * @param params Array of values that cannot be processed yet.\n     * @param startIndex The first index before which we know how to process an effect's values.\n     * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n     */\n    function createUnknownParamsValue(params = [], startIndex = 0) {\n        return params\n            .reduce((acc, value, index) => {\n            if (value && value !== '0') {\n                acc[`param_${startIndex + index}`] = value;\n            }\n            return acc;\n        }, {});\n    }\n\n    let mapping;\n    /**\n     * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of proc IDs to functions.\n     */\n    function getProcEffectToBuffMapping(reload) {\n        if (!mapping || reload) {\n            mapping = new Map();\n            setMapping(mapping);\n        }\n        return mapping;\n    }\n    /**\n     * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping(map) {\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const effectDelay = effect['effect delay time(ms)/frame'];\n            return { targetData, sources, effectDelay };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n            effectDelay,\n            sources, value: unknownParams }, targetData));\n        const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n            sources, value: {\n                buffs,\n                duration: duration,\n            } }, targetData));\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const hits = +((context.damageFrames && context.damageFrames.hits) || 0);\n            const distribution = +((context.damageFrames && context.damageFrames['hit dmg% distribution (total)']) || 0);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = +value;\n                return acc;\n            }, {});\n            const results = [Object.assign({ id: 'proc:1', originalId: '1', sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '1',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'healerRec%': 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                let recX, recY;\n                let extraParams;\n                [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n                params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['heal low'];\n                params.healHigh = effect['heal high'];\n                params['healerRec%'] = effect['rec added% (from healer)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const results = [Object.assign({ id: 'proc:2', originalId: '2', sources,\n                    effectDelay, value: params }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '2',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'targetRec%': 0,\n                turnDuration: '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let rec;\n                let extraParams;\n                [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['gradual heal low'];\n                params.healHigh = effect['gradual heal high'];\n                params['targetRec%'] = effect['rec added% (from target)'];\n                params.turnDuration = effect['gradual heal turns (8)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n            const results = [];\n            if (hasAnyHealValues) {\n                results.push(Object.assign({ id: 'proc:3', originalId: '3', sources,\n                    effectDelay, duration: params.turnDuration, value: {\n                        healLow: params.healLow,\n                        healHigh: params.healHigh,\n                        'targetRec%': params['targetRec%'],\n                    } }, targetData));\n            }\n            else if (params.turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId: '3',\n                    sources,\n                    buffs: ['proc:3'],\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '3',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill);\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('bb bc fill' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill']);\n                }\n                if ('bb bc fill%' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n                }\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:flat', originalId: '4', sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:percent', originalId: '4', sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '4',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                element: BuffConditionElement.All,\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        params[statType] = parseNumberOrDefault(effect[effectKey]);\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId: '5', sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData);\n                        if (params.element !== BuffConditionElement.All) {\n                            buffEntry.conditions = {\n                                targetElements: [params.element],\n                            };\n                        }\n                        results.push(buffEntry);\n                    }\n                });\n            }\n            else if (params.turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId: '5',\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '5',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('6', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                turnDuration: '0',\n            };\n            const dropRateProperties = ['bc', 'hc', 'item'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.bc = effect['bc drop rate% buff (10)'];\n                params.hc = effect['hc drop rate% buff (9)'];\n                params.item = effect['item drop rate% buff (11)'];\n                params.turnDuration = effect['drop buff rate turns'];\n            }\n            dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n            const results = [];\n            if (hasAnyRates) {\n                dropRateProperties.forEach((key) => {\n                    const value = params[key];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:6:${key}`, originalId: '6', sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (params.turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId: '6',\n                    sources,\n                    buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '6',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('7', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHpPercent = 0;\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawRecoveredHp;\n                [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:7', originalId: '7', sources,\n                    effectDelay, value: recoveredHpPercent }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '7',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatHpBoost = 0;\n            let percentHpBoost = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n                flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n                percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('max hp increase' in effect) {\n                    flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n                }\n                if ('max hp% increase' in effect) {\n                    percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n                }\n            }\n            const results = [];\n            if (flatHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:flat', originalId: '8', sources,\n                    effectDelay, value: flatHpBoost }, targetData));\n            }\n            if (percentHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:percent', originalId: '8', sources,\n                    effectDelay, value: percentHpBoost }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '8',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const STAT_TYPE_MAPPING = {\n                0: 'atk',\n                1: 'def',\n                2: 'rec',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const params = {\n                element: BuffConditionElement.All,\n                statReductionEntries: [],\n                turnDuration: 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                let [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n                [\n                    [statType1, value1, procChance1],\n                    [statType2, value2, procChance2],\n                ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                    const statType = parseNumberOrDefault(rawStatType) - 1;\n                    const value = parseNumberOrDefault(rawValue);\n                    const chance = parseNumberOrDefault(rawProcChance);\n                    if (statType === 3) { // all stats\n                        params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                            stat,\n                            value,\n                            chance,\n                        })));\n                    }\n                    else {\n                        params.statReductionEntries.push({\n                            stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                            value,\n                            chance,\n                        });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                ['buff #1', 'buff #2'].forEach((buffKey) => {\n                    const entry = effect[buffKey];\n                    if (entry) {\n                        const chance = parseNumberOrDefault(entry['proc chance%']);\n                        const keys = Object.keys(entry);\n                        coreStatProperties.forEach((statType) => {\n                            const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                            if (effectKey) {\n                                params.statReductionEntries.push({\n                                    stat: statType,\n                                    value: parseNumberOrDefault(entry[effectKey]),\n                                    chance,\n                                });\n                            }\n                        });\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            let hasAnyValues = false;\n            params.statReductionEntries.forEach(({ stat, value, chance }) => {\n                if (value !== 0 || chance !== 0) {\n                    hasAnyValues = true;\n                    const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId: '9', sources,\n                        effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n            if (!hasAnyValues && params.turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId: '9',\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '9',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given proc effect.\n     */\n    function defaultConversionFunction(effect, context) {\n        const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n                originalId: id,\n                effectDelay: effect['effect delay time(ms)/frame'],\n                targetType: effect['target type'],\n                targetArea: effect['target area'],\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given proc effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Proc effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given proc effect object.\n     */\n    function convertProcEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isProcEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction(effect, context);\n    }\n\n    let mapping$1;\n    /**\n     * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of passive IDs to functions.\n     */\n    function getPassiveEffectToBuffMapping(reload) {\n        if (!mapping$1 || reload) {\n            mapping$1 = new Map();\n            setMapping$1(mapping$1);\n        }\n        return mapping$1;\n    }\n    /**\n     * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$1(map) {\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n            X: BuffConditionElement.OmniParadigm,\n        };\n        const TYPE_MAPPING = {\n            1: UnitType.Lord,\n            2: UnitType.Anima,\n            3: UnitType.Breaker,\n            4: UnitType.Guardian,\n            5: UnitType.Oracle,\n            6: UnitType.Rex,\n        };\n        const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n        const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n            const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            return { conditionInfo, targetData, sources };\n        };\n        const createaUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n            sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = typedEffect.params.split(',');\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:1:${stat}`, originalId: '1', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '1',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                elements: [],\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let element1, element2;\n                [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = typedEffect.params.split(',');\n                [element1, element2].forEach((elementValue) => {\n                    if (elementValue && elementValue !== '0') {\n                        stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                stats.elements = typedEffect['elements buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId: '2', sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n            if (stats.elements.length > 0) {\n                stats.elements.forEach((element) => {\n                    STATS_ORDER.forEach((stat) => {\n                        const value = parseNumberOrDefault(stats[stat]);\n                        if (value !== 0) {\n                            results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                        }\n                    });\n                });\n            }\n            else {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                    }\n                });\n            }\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '2',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                unitType: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let unitType;\n                [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = typedEffect.params.split(',');\n                if (unitType && unitType !== '0') {\n                    stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.unitType = typedEffect['unit type buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetUnitType = stats.unitType || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:3:${stat}`, originalId: '3', sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '3',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = typedEffect.params.split(',');\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:4:${ailment}`, originalId: '4', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '4',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let element;\n            let mitigation = '0';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, mitigation, ...extraParams] = typedEffect.params.split(',');\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n                if (element !== BuffConditionElement.Unknown) {\n                    mitigation = typedEffect[`${element} resist%`];\n                }\n            }\n            const value = parseNumberOrDefault(mitigation);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:5:${element}`, originalId: '5', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '5',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let mitigation = '0';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [mitigation, ...extraParams] = typedEffect.params.split(',');\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                mitigation = typedEffect['dmg% mitigation'];\n            }\n            const value = parseNumberOrDefault(mitigation);\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'passive:8', originalId: '8', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '8',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given passive effect.\n     */\n    function defaultConversionFunction$1(effect, context) {\n        const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given passive effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Passive effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertPassiveEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isPassiveEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$1(effect, context);\n    }\n\n    const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'UNKNOWN_PASSIVE_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            name: 'Unknown Passive Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n            name: 'Unknown Passive Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'TURN_DURATION_MODIFICATION': {\n            id: BuffId.TURN_DURATION_MODIFICATION,\n            name: 'Passive Turn Duration Modification',\n            stat: UnitStat.turnDurationModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [\n                (buff && buff.value &&\n                    buff.value.duration &&\n                    buff.value.duration < 0) ?\n                    IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n            ],\n        }, 'passive:1:hp': {\n            id: BuffId['passive:1:hp'],\n            name: 'Passive HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:1:atk': {\n            id: BuffId['passive:1:atk'],\n            name: 'Passive Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:1:def': {\n            id: BuffId['passive:1:def'],\n            name: 'Passive Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:1:rec': {\n            id: BuffId['passive:1:rec'],\n            name: 'Passive Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:1:crit': {\n            id: BuffId['passive:1:crit'],\n            name: 'Passive Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        } }, (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:2:hp': {\n                id: BuffId['passive:2:hp'],\n                name: 'Passive Elemental HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:2:atk': {\n                id: BuffId['passive:2:atk'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:2:def': {\n                id: BuffId['passive:2:def'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:2:rec': {\n                id: BuffId['passive:2:rec'],\n                name: 'Passive Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:2:crit': {\n                id: BuffId['passive:2:crit'],\n                name: 'Passive Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let unitType = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        unitType = buff.conditions.targetUnitType || '';\n                    }\n                }\n                if (typeof unitType !== 'string' || !unitType) {\n                    unitType = 'unknown';\n                }\n                let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n                if (!unitType || !(iconKey in IconId)) {\n                    iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:3:hp': {\n                id: BuffId['passive:3:hp'],\n                name: 'Passive Type-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:3:atk': {\n                id: BuffId['passive:3:atk'],\n                name: 'Passive Type-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:3:def': {\n                id: BuffId['passive:3:def'],\n                name: 'Passive Type-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:3:rec': {\n                id: BuffId['passive:3:rec'],\n                name: 'Passive Type-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:3:crit': {\n                id: BuffId['passive:3:crit'],\n                name: 'Passive Type-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:4:poison': {\n            id: BuffId['passive:4:poison'],\n            name: 'Passive Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:4:weak': {\n            id: BuffId['passive:4:weak'],\n            name: 'Passive Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:4:sick': {\n            id: BuffId['passive:4:sick'],\n            name: 'Passive Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:4:injury': {\n            id: BuffId['passive:4:injury'],\n            name: 'Passive Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:4:curse': {\n            id: BuffId['passive:4:curse'],\n            name: 'Passive Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:4:paralysis': {\n            id: BuffId['passive:4:paralysis'],\n            name: 'Passive Paralysis Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:5:fire': {\n            id: BuffId['passive:5:fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:5:water': {\n            id: BuffId['passive:5:water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:5:earth': {\n            id: BuffId['passive:5:earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:5:thunder': {\n            id: BuffId['passive:5:thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:5:light': {\n            id: BuffId['passive:5:light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:5:dark': {\n            id: BuffId['passive:5:dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:5:unknown': {\n            id: BuffId['passive:5:unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:8': {\n            id: BuffId['passive:8'],\n            name: 'Passive Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'UNKNOWN_PROC_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            name: 'Unknown Proc Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n            name: 'Unknown Proc Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'proc:1': {\n            id: BuffId['proc:1'],\n            name: 'Regular Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:2': {\n            id: BuffId['proc:2'],\n            name: 'Burst Heal',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:3': {\n            id: BuffId['proc:3'],\n            name: 'Gradual Heal',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:4:flat': {\n            id: BuffId['proc:4:flat'],\n            name: 'Burst BB Gauge Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:4:percent': {\n            id: BuffId['proc:4:percent'],\n            name: 'Burst BB Gauge Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:5:atk': {\n                id: BuffId['proc:5:atk'],\n                name: 'Active Regular/Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:5:def': {\n                id: BuffId['proc:5:def'],\n                name: 'Active Regular/Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:5:rec': {\n                id: BuffId['proc:5:rec'],\n                name: 'Active Regular/Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:5:crit': {\n                id: BuffId['proc:5:crit'],\n                name: 'Active Regular/Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'proc:6:bc': {\n            id: BuffId['proc:6:bc'],\n            name: 'Active Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'proc:6:hc': {\n            id: BuffId['proc:6:hc'],\n            name: 'Active Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'proc:6:item': {\n            id: BuffId['proc:6:item'],\n            name: 'Active Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'proc:7': {\n            id: BuffId['proc:7'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:8:flat': {\n            id: BuffId['proc:8:flat'],\n            name: 'Max HP Boost (Flat Amount)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        }, 'proc:8:percent': {\n            id: BuffId['proc:8:percent'],\n            name: 'Max HP Boost (Percentage)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'DOWN'; // default to down since these are reduction buffs\n                if (buff) {\n                    if (buff.value && buff.value > 0) {\n                        polarity = 'UP';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:9:atk': {\n                id: BuffId['proc:9:atk'],\n                name: 'Active Regular/Elemental Attack Reduction',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:9:def': {\n                id: BuffId['proc:9:def'],\n                name: 'Active Regular/Elemental Defense Reduction',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:9:rec': {\n                id: BuffId['proc:9:rec'],\n                name: 'Active Regular/Elemental Recovery Reduction',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n        };\n    })()));\n\n    /**\n     * @description Get the associated metadata entry for a given buff ID.\n     * @param id Buff ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n     * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    var index$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        convertProcEffectToBuffs: convertProcEffectToBuffs,\n        convertPassiveEffectToBuffs: convertPassiveEffectToBuffs,\n        get BuffSource () { return BuffSource; },\n        get BuffStackType () { return BuffStackType; },\n        BUFF_METADATA: BUFF_METADATA,\n        getMetadataForBuff: getMetadataForBuff\n    });\n\n    var index$2 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        constants: constants,\n        parsers: index$1,\n        getMetadataForProc: getMetadataForProc,\n        getMetadataForPassive: getMetadataForPassive,\n        isAttackingProcId: isAttackingProcId,\n        getNameForProc: getNameForProc,\n        getNameForPassive: getNameForPassive,\n        isProcEffect: isProcEffect,\n        isPassiveEffect: isPassiveEffect,\n        combineEffectsAndDamageFrames: combineEffectsAndDamageFrames,\n        getEffectId: getEffectId,\n        getEffectName: getEffectName,\n        get ProcBuffType () { return ProcBuffType; },\n        PASSIVE_METADATA: PASSIVE_METADATA,\n        PROC_METADATA: PROC_METADATA\n    });\n\n    /**\n     * @description Get the effects of a given extra skill.\n     * @param skill Extra skill to get the effects of.\n     * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForExtraSkill(skill) {\n        return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n    }\n\n    var index$3 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForExtraSkill: getEffectsForExtraSkill\n    });\n\n    /**\n     * @description Get the effects of a given item.\n     * @param item Item to get the effects of, if any are present,\n     * @returns Effects of the given item if they exist, an empty array otherwise.\n     */\n    function getEffectsForItem(item) {\n        let result = [];\n        if (item && item.effect) {\n            if (Array.isArray(item.effect)) {\n                result = item.effect;\n            }\n            else if (Array.isArray(item.effect.effect)) {\n                const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n                result = effect.map(e => {\n                    // apply target data to each effect\n                    const fullProcEffect = Object.assign({}, e);\n                    fullProcEffect['target area'] = targetArea;\n                    fullProcEffect['target type'] = targetType;\n                    return fullProcEffect;\n                });\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given item thumbnail filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents the thumbnail image for a given item.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getItemImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/item/${fileName || ''}`;\n    }\n\n    var index$4 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForItem: getEffectsForItem,\n        getItemImageUrl: getItemImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given leader skill.\n     * @param skill Leader skill to get the effects of.\n     * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForLeaderSkill(skill) {\n        return skill && Array.isArray(skill.effects) ? skill.effects : [];\n    }\n\n    var index$5 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForLeaderSkill: getEffectsForLeaderSkill\n    });\n\n    /**\n     * @description Generate the file names for each of the image type for a given unit ID.\n     * @param id Unit ID to use to generate the file names.\n     * @param suffix Optional parameter that's useful for things like alternate art.\n     * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n     */\n    function getUnitImageFileNames(id, suffix = '') {\n        const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n        return {\n            spritesheet: `unit_anime_${fileNameSuffix}`,\n            battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n            guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n            fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n        };\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given unit filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents an image for a given unit.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getUnitImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n    }\n\n    var index$6 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getUnitImageFileNames: getUnitImageFileNames,\n        getUnitImageUrl: getUnitImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given SP Enhancement Entry.\n     * @param entry SP Enhancement Entry to get the effects of.\n     * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n     */\n    function getEffectsForSpEnhancement(entry) {\n        const result = [];\n        if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n            const effectWrappers = entry.skill.effects;\n            effectWrappers.forEach(effectWrapper => {\n                Object.keys(effectWrapper).forEach(spType => {\n                    const originalEffect = effectWrapper[spType];\n                    const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                    result.push(unwrappedEffect);\n                });\n            });\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the associated category name with a given category ID.\n     * @param categoryId Category ID to get the name of.\n     * @returns Name of the given category ID or the string 'Unknown'.\n     */\n    function getSpCategoryName(categoryId) {\n        let result;\n        const numericalCategoryId = +categoryId;\n        switch (numericalCategoryId) {\n            case 1:\n                result = SpCategoryName['Parameter Boost'];\n                break;\n            case 2:\n                result = SpCategoryName.Spark;\n                break;\n            case 3:\n                result = SpCategoryName['Critical Hits'];\n                break;\n            case 4:\n                result = SpCategoryName['Attack Boost'];\n                break;\n            case 5:\n                result = SpCategoryName['BB Gauge'];\n                break;\n            case 6:\n                result = SpCategoryName['HP Recovery'];\n                break;\n            case 7:\n                result = SpCategoryName.Drops;\n                break;\n            case 8:\n                result = SpCategoryName['Ailment Resistance'];\n                break;\n            case 9:\n                result = SpCategoryName['Ailment Infliction'];\n                break;\n            case 10:\n                result = SpCategoryName['Damage Reduction'];\n                break;\n            case 11:\n                result = SpCategoryName.Special;\n                break;\n            default:\n                result = SpCategoryName.Unknown;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n\n    /**\n     * @description Get the corresponding character code for a given index.\n     * It expects an index between 0 and 61 inclusive; will return an empty string if\n     * the given value is outside of the range.\n     * @param index Index of an SP entry in a given skills array.\n     * @returns Corresponding single alphanumeric character to the given index\n     * or an empty string if the index is invalid.\n     */\n    function spIndexToCode(index) {\n        let result = '';\n        let correspondingCharacterCode = -1;\n        if (Number.isInteger(index)) {\n            if (index >= 0 && index <= 25) { // A-Z\n                correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (index >= 26 && index <= 51) { // a-z\n                correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n            }\n            else if (index >= 52 && index <= 61) { // 0-9\n                correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n            }\n        }\n        if (correspondingCharacterCode !== -1) {\n            result = String.fromCharCode(correspondingCharacterCode);\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the corresponding index for a given character code.\n     * It expects an alphanumeric character and will return -1 otherwise.\n     * @param code Character code an SP entry in a given skills array.\n     * @returns Corresponding index to the given character or -1 if the\n     * character is invalid.\n     */\n    function spCodeToIndex(code) {\n        let result = -1;\n        let characterCodeOffset = -1;\n        if (!!code && typeof code === 'string' && code.length === 1) {\n            if (code >= 'A' && code <= 'Z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (code >= 'a' && code <= 'z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n            }\n            else if (code >= '0' && code <= '9') {\n                characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n            }\n        }\n        if (characterCodeOffset !== -1) {\n            result = code.charCodeAt(0) - characterCodeOffset;\n        }\n        return result;\n    }\n\n    /**\n     * @description Extract the ID of a string in the format of `number@actualId`. If there\n     * is no value after the @ character or if no @ character is present, the original ID is returned.\n     * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n     * @param id Original SP Enhancement Entry ID.\n     * @returns The ID of a string in the format of `number@actualId`, or the original input if\n     * there is no @ character or no value after the @ character.\n     */\n    function getSpEntryId(id) {\n        return (typeof id === 'string' && id.split('@')[1]) || id;\n    }\n\n    /**\n     * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n     * @param id SP Enhancement entry ID.\n     * @param entries Collection of SP Enhancement entries to search in.\n     * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n     */\n    function getSpEntryWithId(id, entries) {\n        const spId = getSpEntryId(id);\n        return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n     * @param entry SP Entry to get dependencies for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n     */\n    function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependencies = [];\n        if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n            const dependencyId = getSpEntryId(entry.dependency);\n            const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n            if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n                addedEntries.add(dependencyEntry);\n                const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n                dependencies = [dependencyEntry].concat(subDependencies);\n            }\n        }\n        return dependencies;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n     * @param entry SP Entry to get dependents for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n     */\n    function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependents = [];\n        if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n            const entryId = entry.id;\n            dependents = allEntries\n                .filter(s => {\n                return s.dependency &&\n                    s.dependency.includes(entryId) &&\n                    !addedEntries.has(s);\n            });\n            dependents.forEach(dependent => {\n                addedEntries.add(dependent);\n                const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n                dependents = dependents.concat(subDependents);\n            });\n        }\n        return dependents;\n    }\n\n    var index$7 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForSpEnhancement: getEffectsForSpEnhancement,\n        getSpCategoryName: getSpCategoryName,\n        spIndexToCode: spIndexToCode,\n        spCodeToIndex: spCodeToIndex,\n        getSpEntryId: getSpEntryId,\n        getSpEntryWithId: getSpEntryWithId,\n        getAllDependenciesForSpEntry: getAllDependenciesForSpEntry,\n        getAllEntriesThatDependOnSpEntry: getAllEntriesThatDependOnSpEntry\n    });\n\n    /* NOTE: this file is automatically generated; do not edit this file */\n    var version = '0.7.0';\n\n    exports.buffs = index$2;\n    exports.bursts = index;\n    exports.datamineTypes = datamineTypes;\n    exports.extraSkills = index$3;\n    exports.items = index$4;\n    exports.leaderSkills = index$5;\n    exports.spEnhancements = index$7;\n    exports.units = index$6;\n    exports.version = version;\n\n    return exports;\n\n}({}));\n\n","/**\n * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get level entry from.\n * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n */\nexport default function getLevelEntryForBurst(burst, level) {\n    const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n    let levelIndex;\n    if (level !== null && !isNaN(level)) {\n        // 1-indexed\n        levelIndex = (+level - 1);\n    }\n    else {\n        // default to last entry in burst\n        levelIndex = burstEffectsByLevel.length - 1;\n    }\n    return burstEffectsByLevel[levelIndex];\n}\n","import getLevelEntryForBurst from './getLevelEntryForBurst';\n/**\n * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get effects from.\n * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n */\nexport default function getEffectsForBurst(burst, level) {\n    const levelEntry = getLevelEntryForBurst(burst, level);\n    return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n}\n","/**\n * @description Get the proc/passive ID of a given object.\n * @param effect Object to get the effect ID from.\n * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectId(effect) {\n    let resultId = '';\n    if (effect) {\n        resultId = effect['proc id'] || effect['unknown proc id'] ||\n            effect['passive id'] || effect['unknown passive id'] || '';\n    }\n    return resultId;\n}\n","export var KNOWN_PROC_ID;\n(function (KNOWN_PROC_ID) {\n    KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n    KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n})(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\nexport var KNOWN_PASSIVE_ID;\n(function (KNOWN_PASSIVE_ID) {\n    KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n    KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n})(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n","export var ProcBuffType;\n(function (ProcBuffType) {\n    ProcBuffType[\"Attack\"] = \"Attack\";\n})(ProcBuffType || (ProcBuffType = {}));\n/* eslint-disable */\n/**\n * @ignore\n */\nexport const PASSIVE_METADATA = Object.freeze({\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Parameter Boost\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Elemental Parameter Boost\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Type-Based Parameter Boost\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"Status Negation\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Damage Reduction\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Gradual BB Gauge Boost\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"HC Efficacy\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"HP-Conditional Parameter Boost\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"HP-Conditional Drop Rate Boost\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"BC Fill on Enemy Defeat\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Damage Reduction (Chance)\"\n    },\n    \"15\": {\n        \"ID\": \"15\",\n        \"Name\": \"Heal on Enemy Defeat\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Heal on Battle Victory\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"HP Absorption\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Drop Rate Boost\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"Status Infliction\"\n    },\n    \"21\": {\n        \"ID\": \"21\",\n        \"Name\": \"Parameter Boost for First X Turns\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"BC Fill on Battle Victory\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Heal when Attacked (Chance)\"\n    },\n    \"25\": {\n        \"ID\": \"25\",\n        \"Name\": \"BC Fill when Hit (Chance)\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Damage Counter (Chance)\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Increased Target Chance\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Decreased Target Chance\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Defense Ignore (Chance)\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"BB Conditional Parameter Boost\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"BC Efficacy\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Heal over Time\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"Critical Damage Boost\"\n    },\n    \"35\": {\n        \"ID\": \"35\",\n        \"Name\": \"BC Fill when Normal Attacking\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Extra Action\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Hit Count Boost\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Parameter Conversion\"\n    },\n    \"41\": {\n        \"ID\": \"41\",\n        \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"Gender Parameter Boost\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Damage Reduction to 1\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Flat Parameter Boost\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"Critical Damage Negation\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"BC Fill on Spark\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"BC Cost Reduction\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"BB Gauge Consumption Reduction\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Elemental Damage Boost\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Conditional Effect based on HP Threshold\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Damage Reduction when Guarding\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BC Fill when Attacked when Guarding\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BC Fill on Guard\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Elemental Damage Reduction for first X Turns\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"BB Atk Boost\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"BC Fill on Critical\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Add buff to Brave Burst\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"OD Gauge Fill Rate Boost\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"Status Counter\"\n    },\n    \"72\": {\n        \"ID\": \"72\",\n        \"Name\": \"Turn End Effects Activate at Turn Start\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\"\n    },\n    \"74\": {\n        \"ID\": \"74\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Spark Vulnerability\"\n    },\n    \"77\": {\n        \"ID\": \"77\",\n        \"Name\": \"Spark Damage Reduction\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Conditional Effect after Damage Received Threshold\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"BC Fill after Damage Received Threshold\"\n    },\n    \"80\": {\n        \"ID\": \"80\",\n        \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n    },\n    \"81\": {\n        \"ID\": \"81\",\n        \"Name\": \"BC Fill after Damage Dealt Threshold\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"Conditional Effect after BC Received Threshold\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"Conditional Effect after HC Received Threshold\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"BC Fill after HC Received Threshold\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"Conditional Effect after Spark Threshold\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Conditional Effect on Guard\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Conditional Effect on Critical\"\n    },\n    \"90\": {\n        \"ID\": \"90\",\n        \"Name\": \"Status Infliction on Critical\"\n    },\n    \"91\": {\n        \"ID\": \"91\",\n        \"Name\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Negate Defense Ignore\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Added Elements\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Normal Attacks Hit All Foes\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Player EXP Boost\"\n    },\n    \"99\": {\n        \"ID\": \"99\",\n        \"Name\": \"\"\n    },\n    \"100\": {\n        \"ID\": \"100\",\n        \"Name\": \"Spark Critical\"\n    },\n    \"101\": {\n        \"ID\": \"101\",\n        \"Name\": \"Heal on Spark\"\n    },\n    \"102\": {\n        \"ID\": \"102\",\n        \"Name\": \"Added Elements\"\n    },\n    \"103\": {\n        \"ID\": \"103\",\n        \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n    },\n    \"104\": {\n        \"ID\": \"104\",\n        \"Name\": \"Spark Boost when HP Passes Threshold\"\n    },\n    \"105\": {\n        \"ID\": \"105\",\n        \"Name\": \"Turn-Based Parameter Boost\"\n    },\n    \"106\": {\n        \"ID\": \"106\",\n        \"Name\": \"Conditional Effect after Activating Overdrive\"\n    },\n    \"107\": {\n        \"ID\": \"107\",\n        \"Name\": \"Add Effect to Leader Skill\"\n    },\n    \"109\": {\n        \"ID\": \"109\",\n        \"Name\": \"BB Gauge Reduction (Chance)\"\n    },\n    \"110\": {\n        \"ID\": \"110\",\n        \"Name\": \"BC Efficacy Reduction (Chance)\"\n    },\n    \"111\": {\n        \"ID\": \"111\",\n        \"Name\": \"Increase Brave Burst Activation Rate\"\n    },\n    \"112\": {\n        \"ID\": \"112\",\n        \"Name\": \"ABP/CBP Boost\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Conditional Effect after HP Threshold\"\n    },\n    \"114\": {\n        \"ID\": \"114\",\n        \"Name\": \"Inflict Buff when Attacked\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n    },\n    \"128\": {\n        \"ID\": \"128\",\n        \"Name\": \"Damage Reduction from Normal Attacks\"\n    },\n    \"143\": {\n        \"ID\": \"143\",\n        \"Name\": \"Break Atk Parameter Limit\"\n    },\n    \"10008\": {\n        \"ID\": \"10008\",\n        \"Name\": \"Damage Reduction from Specific Sources\"\n    },\n    \"11004\": {\n        \"ID\": \"11004\",\n        \"Name\": \"Elemental Spark Damage Boost\"\n    },\n    \"11005\": {\n        \"ID\": \"11005\",\n        \"Name\": \"Elemental Critical Damage Boost\"\n    },\n    \"11006\": {\n        \"ID\": \"11006\",\n        \"Name\": \"Summoner EXP Boost\"\n    },\n    \"11009\": {\n        \"ID\": \"11009\",\n        \"Name\": \"Effect Duration Boost\"\n    },\n    \"66,1\": {\n        \"ID\": \"66,1\",\n        \"Name\": \"\"\n    }\n});\n/**\n * @ignore\n */\nexport const PROC_METADATA = Object.freeze({\n    \"0\": {\n        \"ID\": \"0\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Regular Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Burst Heal\",\n        \"Type\": \"\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Heal over Time\",\n        \"Type\": \"\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"BB Gauge Refill\",\n        \"Type\": \"\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"Drop Rate\",\n        \"Type\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Parameter Reduction\",\n        \"Type\": \"\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"Status Cleanse\",\n        \"Type\": \"\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"Status Infliction\",\n        \"Type\": \"\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"Revive (Guaranteed)\",\n        \"Type\": \"\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"Random Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Lifesteal Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"Status Negation\",\n        \"Type\": \"\"\n    },\n    \"18\": {\n        \"ID\": \"18\",\n        \"Name\": \"Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Gradual BB Gauge Boost\",\n        \"Type\": \"\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"BC Fill on Hit\",\n        \"Type\": \"\"\n    },\n    \"22\": {\n        \"ID\": \"22\",\n        \"Name\": \"Defense Ignore\",\n        \"Type\": \"\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Hit Count Boost\",\n        \"Type\": \"\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Fixed Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Multi-Element Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"Add Elements\",\n        \"Type\": \"\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Instant BB Gauge Fill\",\n        \"Type\": \"\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"Element Shift\",\n        \"Type\": \"\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Buff Removal (Chance)\",\n        \"Type\": \"\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"BB Gauge Reduction (Chance)\",\n        \"Type\": \"\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Leader Skill Lock (Chance)\",\n        \"Type\": \"\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Summon Unit\",\n        \"Type\": \"\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"Status Cure\",\n        \"Type\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Status Infliction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Instant OD Fill\",\n        \"Type\": \"\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Damage over Time (Additional Damage)\",\n        \"Type\": \"\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"BB Atk Boost\",\n        \"Type\": \"\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Non-Lethal Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"HP Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"Piercing Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"Retire\",\n        \"Type\": \"\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Damage Counter\",\n        \"Type\": \"\"\n    },\n    \"51\": {\n        \"ID\": \"51\",\n        \"Name\": \"Parameter Reduction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"BC Efficacy\",\n        \"Type\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Status Counter\",\n        \"Type\": \"\"\n    },\n    \"54\": {\n        \"ID\": \"54\",\n        \"Name\": \"Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Elemental Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"56\": {\n        \"ID\": \"56\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"57\": {\n        \"ID\": \"57\",\n        \"Name\": \"BC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Spark Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BB Atk Reduction\",\n        \"Type\": \"\"\n    },\n    \"60\": {\n        \"ID\": \"60\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BB-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Barrier\",\n        \"Type\": \"\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Selective Buff Wipe\",\n        \"Type\": \"\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"Consecutive Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\",\n        \"Type\": \"\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Revive (Chance)\",\n        \"Type\": \"\"\n    },\n    \"67\": {\n        \"ID\": \"67\",\n        \"Name\": \"BC Fill on Spark\",\n        \"Type\": \"\"\n    },\n    \"68\": {\n        \"ID\": \"68\",\n        \"Name\": \"Damage Reduction when Guarding\",\n        \"Type\": \"\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"BC Fill on Guard\",\n        \"Type\": \"\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"BB Gauge Fill Rate Debuff\",\n        \"Type\": \"\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\",\n        \"Type\": \"\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Element Squad-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"76\": {\n        \"ID\": \"76\",\n        \"Name\": \"Extra Action\",\n        \"Type\": \"\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Self Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"Player EXP Boost\",\n        \"Type\": \"\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"83\": {\n        \"ID\": \"83\",\n        \"Name\": \"Spark Critical\",\n        \"Type\": \"\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"OD Gauge Fill Rate\",\n        \"Type\": \"\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"Heal when Attacked\",\n        \"Type\": \"\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"HP Absorption\",\n        \"Type\": \"\"\n    },\n    \"87\": {\n        \"ID\": \"87\",\n        \"Name\": \"Heal on Spark\",\n        \"Type\": \"\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Self Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Self Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Self Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"94\": {\n        \"ID\": \"94\",\n        \"Name\": \"Normal Attacks Hit All Foes\",\n        \"Type\": \"\"\n    },\n    \"95\": {\n        \"ID\": \"95\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n        \"Type\": \"\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Element Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Gradual OD Fill\",\n        \"Type\": \"\"\n    },\n    \"119\": {\n        \"ID\": \"119\",\n        \"Name\": \"Gradual BC Drain\",\n        \"Type\": \"\"\n    },\n    \"123\": {\n        \"ID\": \"123\",\n        \"Name\": \"OD Gauge Reduction\",\n        \"Type\": \"\"\n    },\n    \"126\": {\n        \"ID\": \"126\",\n        \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n        \"Type\": \"\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Lock On\",\n        \"Type\": \"\"\n    },\n    \"130\": {\n        \"ID\": \"130\",\n        \"Name\": \"Parameter Reduction Counter\",\n        \"Type\": \"\"\n    },\n    \"131\": {\n        \"ID\": \"131\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"132\": {\n        \"ID\": \"132\",\n        \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"901\": {\n        \"ID\": \"901\",\n        \"Name\": \"Raid Heal (on Map)\",\n        \"Type\": \"\"\n    },\n    \"902\": {\n        \"ID\": \"902\",\n        \"Name\": \"Raid Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"903\": {\n        \"ID\": \"903\",\n        \"Name\": \"Raid Boss Reveal\",\n        \"Type\": \"\"\n    },\n    \"905\": {\n        \"ID\": \"905\",\n        \"Name\": \"Raid Teleport\",\n        \"Type\": \"\"\n    },\n    \"906\": {\n        \"ID\": \"906\",\n        \"Name\": \"Raid Flee\",\n        \"Type\": \"\"\n    },\n    \"907\": {\n        \"ID\": \"907\",\n        \"Name\": \"Raid Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"908\": {\n        \"ID\": \"908\",\n        \"Name\": \"Raid Item Drop Rate Boost\",\n        \"Type\": \"\"\n    },\n    \"10000\": {\n        \"ID\": \"10000\",\n        \"Name\": \"Taunt\",\n        \"Type\": \"\"\n    },\n    \"10001\": {\n        \"ID\": \"10001\",\n        \"Name\": \"Stealth\",\n        \"Type\": \"\"\n    },\n    \"10002\": {\n        \"ID\": \"10002\",\n        \"Name\": \"Shield (old)\",\n        \"Type\": \"\"\n    },\n    \"10003\": {\n        \"ID\": \"10003\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"10004\": {\n        \"ID\": \"10004\",\n        \"Name\": \"Damage Immunity\",\n        \"Type\": \"\"\n    },\n    \"10005\": {\n        \"ID\": \"10005\",\n        \"Name\": \"Turn Skip (short duration)\",\n        \"Type\": \"\"\n    },\n    \"10006\": {\n        \"ID\": \"10006\",\n        \"Name\": \"Turn Skip (long duration)\",\n        \"Type\": \"\"\n    },\n    \"10007\": {\n        \"ID\": \"10007\",\n        \"Name\": \"Evasion\",\n        \"Type\": \"\"\n    },\n    \"10009\": {\n        \"ID\": \"10009\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"10012\": {\n        \"ID\": \"10012\",\n        \"Name\": \"OD Drain\",\n        \"Type\": \"\"\n    },\n    \"10015\": {\n        \"ID\": \"10015\",\n        \"Name\": \"Elemental Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"10016\": {\n        \"ID\": \"10016\",\n        \"Name\": \"Element Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"10017\": {\n        \"ID\": \"10017\",\n        \"Name\": \"Elemental Shield\",\n        \"Type\": \"\"\n    },\n    \"10018\": {\n        \"ID\": \"10018\",\n        \"Name\": \"Max HP Reduction\",\n        \"Type\": \"\"\n    },\n    \"10019\": {\n        \"ID\": \"10019\",\n        \"Name\": \"Effect Purge\",\n        \"Type\": \"\"\n    },\n    \"10020\": {\n        \"ID\": \"10020\",\n        \"Name\": \"Piercing Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"10021\": {\n        \"ID\": \"10021\",\n        \"Name\": \"Active Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10022\": {\n        \"ID\": \"10022\",\n        \"Name\": \"Passive Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10023\": {\n        \"ID\": \"10023\",\n        \"Name\": \"HC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"10025\": {\n        \"ID\": \"10025\",\n        \"Name\": \"KO Resistance Negation\",\n        \"Type\": \"\"\n    },\n    \"10026\": {\n        \"ID\": \"10026\",\n        \"Name\": \"Doom\",\n        \"Type\": \"\"\n    },\n    \"11000\": {\n        \"ID\": \"11000\",\n        \"Name\": \"Negative HP-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"11001\": {\n        \"ID\": \"11001\",\n        \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n        \"Type\": \"\"\n    },\n    \"11002\": {\n        \"ID\": \"11002\",\n        \"Name\": \"HP Limit Break, Convert to HP\",\n        \"Type\": \"\"\n    },\n    \"11003\": {\n        \"ID\": \"11003\",\n        \"Name\": \"Effect Negation\",\n        \"Type\": \"\"\n    },\n    \"70001\": {\n        \"ID\": \"70001\",\n        \"Name\": \"Mana Bubble Shield\",\n        \"Type\": \"\"\n    },\n    \"70002\": {\n        \"ID\": \"70002\",\n        \"Name\": \"Recast\",\n        \"Type\": \"\"\n    },\n    \"2-5\": {\n        \"ID\": \"2-5\",\n        \"Name\": \"Burst Heal and DEF/REC Boost\",\n        \"Type\": \"\"\n    }\n});\n","import { PROC_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given proc ID.\n * @param id Proc ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForProc(id, metadata = PROC_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\nimport { ProcBuffType } from './effect-metadata';\n/**\n * @description Determine if a given proc ID's type is an attack.\n * @param id Proc ID to check.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n */\nexport default function isAttackingProcId(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n}\n","import getEffectId from '../buffs/getEffectId';\nimport { KNOWN_PROC_ID } from '../buffs/constants';\nimport isAttackingProcId from '../buffs/isAttackingProcId';\n/**\n * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n * @param damageFrames Damage frames that each have their own proc ID.\n * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Damage frames entry whose frames are based on the input damage frames.\n */\nexport default function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n    // relevant frames are all effects for healing or attacking\n    const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n    const relevantFrames = inputFrames.filter(frame => {\n        const procId = getEffectId(frame);\n        return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n    });\n    const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n        const keepFirstFrame = index === 0;\n        const numFrames = frameEntry['frame times'].length;\n        const damageDistribution = frameEntry['hit dmg% distribution'];\n        const frameTimes = frameEntry['frame times'];\n        for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n            acc.push({\n                damage: damageDistribution[frameIndex],\n                time: frameTimes[frameIndex],\n            });\n        }\n        return acc;\n    }, []);\n    const resultDamageFramesEntry = {\n        'effect delay time(ms)/frame': effectDelay,\n        'frame times': [],\n        'hit dmg% distribution': [],\n        'hit dmg% distribution (total)': 0,\n        hits: 0,\n    };\n    unifiedFrames.sort((a, b) => a.time - b.time)\n        .forEach(({ time, damage }) => {\n        resultDamageFramesEntry['frame times'].push(time);\n        resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n        resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n    });\n    resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n    return resultDamageFramesEntry;\n}\n","import { PASSIVE_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given passive ID.\n * @param id Passive ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\n/**\n * @description Get the associated name for a given proc ID.\n * @param id Proc ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Name of the proc ID if it exists, empty string otherwise.\n */\nexport default function getNameForProc(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","import getMetadataForPassive from './getMetadataForPassive';\n/**\n * @description Get the associated name for a given passive ID.\n * @param id Passive ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Name of the passive ID if it exists, empty string otherwise.\n */\nexport default function getNameForPassive(id, metadata) {\n    const metadataEntry = getMetadataForPassive(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","/**\n * @description Determine if a given effect object is a proc effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a proc effect based on its properties.\n */\nexport default function isProcEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n}\n","/**\n * @description Determine if a given effect object is a passive effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a passive effect based on its properties.\n */\nexport default function isPassiveEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n}\n","export var ArenaCondition;\n(function (ArenaCondition) {\n    ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n    ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n    ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n    ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n    ArenaCondition[\"hp_min\"] = \"hp_min\";\n    ArenaCondition[\"hp_max\"] = \"hp_max\";\n    ArenaCondition[\"atk_max\"] = \"atk_max\";\n    ArenaCondition[\"random\"] = \"random\";\n})(ArenaCondition || (ArenaCondition = {}));\nexport var MoveType;\n(function (MoveType) {\n    MoveType[\"Moving\"] = \"1\";\n    MoveType[\"Teleporting\"] = \"2\";\n    MoveType[\"NonMoving\"] = \"3\";\n})(MoveType || (MoveType = {}));\nexport var TargetArea;\n(function (TargetArea) {\n    TargetArea[\"Aoe\"] = \"aoe\";\n    TargetArea[\"Single\"] = \"single\";\n    TargetArea[\"Random\"] = \"random\";\n})(TargetArea || (TargetArea = {}));\nexport var TargetAreaShorthand;\n(function (TargetAreaShorthand) {\n    TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n    TargetAreaShorthand[\"Single\"] = \"ST\";\n    TargetAreaShorthand[\"Random\"] = \"RT\";\n})(TargetAreaShorthand || (TargetAreaShorthand = {}));\nexport var TargetType;\n(function (TargetType) {\n    TargetType[\"Self\"] = \"self\";\n    TargetType[\"Party\"] = \"party\";\n    TargetType[\"Enemy\"] = \"enemy\";\n})(TargetType || (TargetType = {}));\nexport var SpPassiveType;\n(function (SpPassiveType) {\n    SpPassiveType[\"AddPassive\"] = \"passive\";\n    SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n    SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n    SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n    SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n})(SpPassiveType || (SpPassiveType = {}));\nexport var SphereTypeName;\n(function (SphereTypeName) {\n    SphereTypeName[\"None\"] = \"None\";\n    SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n    SphereTypeName[\"Critical\"] = \"Critical\";\n    SphereTypeName[\"Drop\"] = \"Drop\";\n    SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n    SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n    SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n    SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n    SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n    SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n    SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n    SphereTypeName[\"Spark\"] = \"Spark\";\n    SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n    SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n    SphereTypeName[\"Special\"] = \"Special\";\n})(SphereTypeName || (SphereTypeName = {}));\nexport var SphereTypeId;\n(function (SphereTypeId) {\n    SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n    SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n    SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n    SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n    SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n    SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n    SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n    SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n    SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n    SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n    SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n    SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n    SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n    SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n    SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n})(SphereTypeId || (SphereTypeId = {}));\nexport var SpCategoryName;\n(function (SpCategoryName) {\n    SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n    SpCategoryName[\"Spark\"] = \"Spark\";\n    SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n    SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n    SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n    SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n    SpCategoryName[\"Drops\"] = \"Drops\";\n    SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n    SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n    SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n    SpCategoryName[\"Special\"] = \"Special\";\n    SpCategoryName[\"Unknown\"] = \"Unknown\";\n})(SpCategoryName || (SpCategoryName = {}));\nexport var SpCategoryId;\n(function (SpCategoryId) {\n    SpCategoryId[\"Parameter Boost\"] = \"1\";\n    SpCategoryId[\"Spark\"] = \"2\";\n    SpCategoryId[\"Critical Hits\"] = \"3\";\n    SpCategoryId[\"Attack Boost\"] = \"4\";\n    SpCategoryId[\"BB Gauge\"] = \"5\";\n    SpCategoryId[\"HP Recovery\"] = \"6\";\n    SpCategoryId[\"Drops\"] = \"7\";\n    SpCategoryId[\"Ailment Resistance\"] = \"8\";\n    SpCategoryId[\"Ailment Infliction\"] = \"9\";\n    SpCategoryId[\"Damage Reduction\"] = \"10\";\n    SpCategoryId[\"Special\"] = \"11\";\n})(SpCategoryId || (SpCategoryId = {}));\nexport var UnitAnimationKey;\n(function (UnitAnimationKey) {\n    UnitAnimationKey[\"Attack\"] = \"attack\";\n    UnitAnimationKey[\"Idle\"] = \"idle\";\n    UnitAnimationKey[\"Move\"] = \"move\";\n})(UnitAnimationKey || (UnitAnimationKey = {}));\nexport var UnitElement;\n(function (UnitElement) {\n    UnitElement[\"Fire\"] = \"fire\";\n    UnitElement[\"Water\"] = \"water\";\n    UnitElement[\"Earth\"] = \"earth\";\n    UnitElement[\"Thunder\"] = \"thunder\";\n    UnitElement[\"Light\"] = \"light\";\n    UnitElement[\"Dark\"] = \"dark\";\n})(UnitElement || (UnitElement = {}));\nexport var UnitGender;\n(function (UnitGender) {\n    UnitGender[\"Male\"] = \"male\";\n    UnitGender[\"Female\"] = \"female\";\n    UnitGender[\"Other\"] = \"other\";\n})(UnitGender || (UnitGender = {}));\nexport var UnitGettingType;\n(function (UnitGettingType) {\n    UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n    UnitGettingType[\"Farmable\"] = \"farmable\";\n    UnitGettingType[\"RareSummon\"] = \"rare summon\";\n    UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n})(UnitGettingType || (UnitGettingType = {}));\nexport var UnitKind;\n(function (UnitKind) {\n    UnitKind[\"Normal\"] = \"normal\";\n    UnitKind[\"Evolution\"] = \"evo\";\n    UnitKind[\"Enhancing\"] = \"enhancing\";\n    UnitKind[\"Sale\"] = \"sale\";\n})(UnitKind || (UnitKind = {}));\nexport var UnitType;\n(function (UnitType) {\n    UnitType[\"Lord\"] = \"lord\";\n    UnitType[\"Anima\"] = \"anima\";\n    UnitType[\"Breaker\"] = \"breaker\";\n    UnitType[\"Guardian\"] = \"guardian\";\n    UnitType[\"Oracle\"] = \"oracle\";\n    UnitType[\"Rex\"] = \"rex\";\n})(UnitType || (UnitType = {}));\nexport var ItemType;\n(function (ItemType) {\n    ItemType[\"Consumable\"] = \"consumable\";\n    ItemType[\"Material\"] = \"material\";\n    ItemType[\"Sphere\"] = \"sphere\";\n    ItemType[\"EvolutionMaterial\"] = \"evomat\";\n    ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n    ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n})(ItemType || (ItemType = {}));\nexport var MimicUnitIds;\n(function (MimicUnitIds) {\n    MimicUnitIds[\"Mimic\"] = \"60142\";\n    MimicUnitIds[\"BatMimic\"] = \"60143\";\n    MimicUnitIds[\"DragonMimic\"] = \"60144\";\n    MimicUnitIds[\"MetalMimic\"] = \"60224\";\n})(MimicUnitIds || (MimicUnitIds = {}));\n/**\n * @description Known values for the monster groups used in {@link IMimicInfo}.\n */\nexport const MimicMonsterGroupMapping = {\n    '1000': MimicUnitIds.Mimic,\n    '1100': MimicUnitIds.BatMimic,\n    '1101': MimicUnitIds.BatMimic,\n    '1200': MimicUnitIds.DragonMimic,\n    '1300': MimicUnitIds.MetalMimic,\n};\n","import { TargetArea, } from '../datamine-types';\n/**\n * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n */\nexport default function combineEffectsAndDamageFrames(effects, damageFrames) {\n    let combinedEntries = [];\n    if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n        combinedEntries = effects.map((effect, i) => {\n            const correspondingFrameEntry = damageFrames[i];\n            return {\n                delay: effect['effect delay time(ms)/frame'],\n                effect,\n                frames: correspondingFrameEntry,\n                id: `${effect['proc id'] || effect['unknown proc id']}`,\n                targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                targetType: effect['target type'],\n            };\n        });\n    }\n    return combinedEntries;\n}\n","import getEffectId from './getEffectId';\nimport isPassiveEffect from './isPassiveEffect';\nimport getNameForPassive from './getNameForPassive';\nimport isProcEffect from './isProcEffect';\nimport getNameForProc from './getNameForProc';\n/**\n * @description Get the name of a given object.\n * @param effect Object to get the name from.\n * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n * @returns Name of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectName(effect, metadata = {}) {\n    let resultName = '';\n    const effectId = getEffectId(effect);\n    if (isPassiveEffect(effect)) {\n        resultName = getNameForPassive(effectId, metadata && metadata.passive);\n    }\n    else if (isProcEffect(effect)) {\n        resultName = getNameForProc(effectId, metadata && metadata.proc);\n    }\n    return resultName;\n}\n","/**\n * @description Provides info at a glance regarding a buff's source and how it stacks.\n */\nexport var BuffStackType;\n(function (BuffStackType) {\n    /**\n     * @description The buff is activated via some skill and lasts for a number of turns.\n     * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n     * from different levels. Two possible levels of sources are:\n     * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n     * 2. Ultimate Brave Burst or Dual Brave Burst\n     */\n    BuffStackType[\"Active\"] = \"active\";\n    /**\n     * @description The buff is always active provided that the source is not nullified.\n     * Most passive buffs can stack with themselves.\n     */\n    BuffStackType[\"Passive\"] = \"passive\";\n    /**\n     * @description The buff is applied for a number of turns once a certain condition is met.\n     * Buffs of the same type are not able to stack.\n     */\n    BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n    /**\n     * @description Only one instance of the buff can be active at a time and can last indefinitely.\n     * A couple examples of this are Barrier and Max HP Boost.\n     */\n    BuffStackType[\"Singleton\"] = \"singleton\";\n    /**\n     * @description The buff's effects immediately apply to the target(s). This differs from singleton\n     * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n     * in the HP bar filling by the sum of those burst heals).\n     */\n    BuffStackType[\"Burst\"] = \"burst\";\n    /**\n     * @description A specific subset of `Burst` type buffs that deal damage to the target.\n     */\n    BuffStackType[\"Attack\"] = \"attack\";\n    /**\n     * @description Only for buffs that cannot be processed by the library yet.\n     */\n    BuffStackType[\"Unknown\"] = \"unknown\";\n})(BuffStackType || (BuffStackType = {}));\nexport var BuffSource;\n(function (BuffSource) {\n    BuffSource[\"BraveBurst\"] = \"bb\";\n    BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n    BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n    BuffSource[\"DualBraveBurst\"] = \"dbb\";\n    BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n    BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n    BuffSource[\"SpEnhancement\"] = \"sp\";\n    BuffSource[\"Item\"] = \"item\";\n    BuffSource[\"LeaderSkill\"] = \"ls\";\n    BuffSource[\"ExtraSkill\"] = \"es\";\n    /**\n     * @description Buffs that result of having a number of OE+ units in the squad.\n     */\n    BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n    /**\n     * @description Buffs based on a units type. See {@link UnitType}.\n     */\n    BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n    /**\n     * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n     * as well as ambient turn reductions present in some late-game quests.\n     */\n    BuffSource[\"Quest\"] = \"quest\";\n})(BuffSource || (BuffSource = {}));\n/**\n * @description Extra element values that can be used in addition to {@link UnitElement}.\n */\nexport var BuffConditionElement;\n(function (BuffConditionElement) {\n    BuffConditionElement[\"Unknown\"] = \"unknown\";\n    BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n    BuffConditionElement[\"All\"] = \"all\";\n})(BuffConditionElement || (BuffConditionElement = {}));\n/**\n * @description Stats on a unit that a buff can affect.\n */\nexport var UnitStat;\n(function (UnitStat) {\n    UnitStat[\"hp\"] = \"hp\";\n    UnitStat[\"atk\"] = \"atk\";\n    UnitStat[\"def\"] = \"def\";\n    UnitStat[\"rec\"] = \"rec\";\n    UnitStat[\"crit\"] = \"crit\";\n    UnitStat[\"bbGauge\"] = \"bbGauge\";\n    UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n    UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n    UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n    UnitStat[\"poisonResist\"] = \"poisonResist\";\n    UnitStat[\"weakResist\"] = \"weakResist\";\n    UnitStat[\"sickResist\"] = \"sickResist\";\n    UnitStat[\"injuryResist\"] = \"injuryResist\";\n    UnitStat[\"curseResist\"] = \"curseResist\";\n    UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n    UnitStat[\"mitigation\"] = \"mitigation\";\n    UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n    UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n    UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n    UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n    UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n    UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n    UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n    UnitStat[\"koResistance\"] = \"koResistance\";\n})(UnitStat || (UnitStat = {}));\nexport var IconId;\n(function (IconId) {\n    IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n    IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n    IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n    IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n    IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n    IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n    IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n    IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n    IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n    IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n    IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n    IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n    IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n    IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n    IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n    IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n    IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n    IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n    IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n    IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n    IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n    IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n    IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n    IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n    IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n    IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n    IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n    IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n    IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n    IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n    IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n    IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n    IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n    IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n    IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n    IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n    IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n    IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n    IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n    IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n    IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n    IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n    IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n    IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n    IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n    IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n    IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n    IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n    IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n    IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n    IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n    IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n    IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n    IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n    IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n    IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n    IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n    IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n    IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n    IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n    IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n    IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n    IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n    IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n    IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n    IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n    IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n    IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n    IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n    IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n    IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n    IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n    IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n    IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n    IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n    IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n    IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n    IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n    IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n    IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n    IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n    IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n    IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n    IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n    IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n    IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n    IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n    IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n    IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n    IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n    IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n    IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n    IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n    IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n    IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n    IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n    IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n    IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n    IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n    IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n    IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n    IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n    IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n    IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n    IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n    IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n    IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n    IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n    IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n    IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n    IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n    IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n    IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n    IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n    IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n    IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n    IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n    IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n    IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n    IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n    IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n    IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n    IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n    IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n    IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n    IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n    IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n    IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n    IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n    IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n    IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n    IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n    IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n    IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n    IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n    IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n    IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n    IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n    IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n    IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n    IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n    IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n    IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n    IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n    IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n    IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n    IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n    IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n    IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n    IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n    IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n    IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n    IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n    IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n    IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n    IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n    IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n    IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n    IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n    IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n    IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n    IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n    IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n    IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n    IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n    IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n    IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n    IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n    IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n    IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n    IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n    IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n    IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n    IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n    IconId[\"ATK_ST\"] = \"ATK_ST\";\n    IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n})(IconId || (IconId = {}));\n/**\n * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n * source of a given buff.\n */\nexport var BuffId;\n(function (BuffId) {\n    BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n    BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n    BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n    BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n    BuffId[\"passive:1:def\"] = \"passive:1:def\";\n    BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n    BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n    BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n    BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n    BuffId[\"passive:2:def\"] = \"passive:2:def\";\n    BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n    BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n    BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n    BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n    BuffId[\"passive:3:def\"] = \"passive:3:def\";\n    BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n    BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n    BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n    BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n    BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n    BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n    BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n    BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n    BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n    BuffId[\"passive:5:water\"] = \"passive:5:water\";\n    BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n    BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n    BuffId[\"passive:5:light\"] = \"passive:5:light\";\n    BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n    BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n    BuffId[\"passive:8\"] = \"passive:8\";\n    BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n    BuffId[\"proc:1\"] = \"proc:1\";\n    BuffId[\"proc:2\"] = \"proc:2\";\n    BuffId[\"proc:3\"] = \"proc:3\";\n    BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n    BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n    BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n    BuffId[\"proc:5:def\"] = \"proc:5:def\";\n    BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n    BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n    BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n    BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n    BuffId[\"proc:6:item\"] = \"proc:6:item\";\n    BuffId[\"proc:7\"] = \"proc:7\";\n    BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n    BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n    BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n    BuffId[\"proc:9:def\"] = \"proc:9:def\";\n    BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n})(BuffId || (BuffId = {}));\n","import { BuffSource, } from './buff-types';\nimport { SpPassiveType, TargetType, TargetArea, } from '../../datamine-types';\n/**\n * @description Helper function for creating an entry to be used in the `sources`\n * property of {@link IBuff}.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourceEntryFromContext(context) {\n    return `${context.source}-${context.sourceId}`;\n}\n/**\n * @description Helper function for creating an entries array to be used in the `sources`\n * property of {@link IBuff}. It handles setting the order of the sources.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourcesFromContext(context) {\n    const resultArray = Array.isArray(context.previousSources)\n        ? context.previousSources.slice()\n        : [];\n    // Ensure that the current source is at the beginning of the array\n    resultArray.unshift(createSourceEntryFromContext(context));\n    return resultArray;\n}\n/**\n * @description Given the conditions in an extra skill effect, normalize them into\n * a simpler object containing the IDs of each condition type.\n * @param effect Extra skill effect to process conditions from.\n * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n */\nexport function processExtraSkillConditions(effect) {\n    const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n    const aggregate = {\n        units: new Set(),\n        items: new Set(),\n        sphereTypes: new Set(),\n        unknowns: new Set(),\n    };\n    conditions.forEach((condition, index) => {\n        if ('sphere category required (raw)' in condition) {\n            aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n        }\n        else if ('item required' in condition) {\n            condition['item required'].forEach((item) => {\n                aggregate.items.add(item);\n            });\n        }\n        else if ('unit required' in condition) {\n            condition['unit required'].forEach((unit) => {\n                aggregate.units.add(`${unit.id}`);\n            });\n        }\n        else {\n            aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n        }\n    });\n    // filter out properties that have no entries\n    const result = Object.entries(aggregate)\n        .filter((entry) => entry[1].size > 0)\n        .reduce((acc, entry) => {\n        acc[entry[0]] = Array.from(entry[1]);\n        return acc;\n    }, {});\n    return result;\n}\n/**\n * @description Extract the target type and target area of a given passive effect.\n * @param effect Passive effect to extract target data from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns The target data for the given effect and context. There are only two possible values:\n * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n */\nexport function getPassiveTargetData(effect, context) {\n    const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n        (effect.sp_type === SpPassiveType.EnhancePassive);\n    const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n    return {\n        targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n        targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n    };\n}\n/**\n * @description Extract the target type and target area of a given proc effect.\n * @param effect Proc effect to extract target data from.\n * @returns The target data for the given effect and context.\n */\nexport function getProcTargetData(effect) {\n    return {\n        targetArea: effect['target area'],\n        targetType: effect['target type'],\n    };\n}\n/**\n * @description Try to parse the given value into a number or return a value if it is not a number.\n * @param value Value to parse into a number.\n * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n */\nexport function parseNumberOrDefault(value, defaultValue = 0) {\n    return (value !== null && !isNaN(value)) ? +value : defaultValue;\n}\n/**\n * @description Create an object denoting values that cannot be processed yet. To be used\n * in the `value` property of `IBuff` as needed.\n * @param params Array of values that cannot be processed yet.\n * @param startIndex The first index before which we know how to process an effect's values.\n * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n */\nexport function createUnknownParamsValue(params = [], startIndex = 0) {\n    return params\n        .reduce((acc, value, index) => {\n        if (value && value !== '0') {\n            acc[`param_${startIndex + index}`] = value;\n        }\n        return acc;\n    }, {});\n}\n","import { UnitElement } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { getProcTargetData, createSourcesFromContext, parseNumberOrDefault, createUnknownParamsValue } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of proc IDs to functions.\n */\nexport function getProcEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const effectDelay = effect['effect delay time(ms)/frame'];\n        return { targetData, sources, effectDelay };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n        effectDelay,\n        sources, value: unknownParams }, targetData));\n    const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n        sources, value: {\n            buffs,\n            duration: duration,\n        } }, targetData));\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const hits = +((context.damageFrames && context.damageFrames.hits) || 0);\n        const distribution = +((context.damageFrames && context.damageFrames['hit dmg% distribution (total)']) || 0);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = +value;\n            return acc;\n        }, {});\n        const results = [Object.assign({ id: 'proc:1', originalId: '1', sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '1',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'healerRec%': 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            let recX, recY;\n            let extraParams;\n            [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n            params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['heal low'];\n            params.healHigh = effect['heal high'];\n            params['healerRec%'] = effect['rec added% (from healer)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const results = [Object.assign({ id: 'proc:2', originalId: '2', sources,\n                effectDelay, value: params }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '2',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'targetRec%': 0,\n            turnDuration: '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let rec;\n            let extraParams;\n            [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['gradual heal low'];\n            params.healHigh = effect['gradual heal high'];\n            params['targetRec%'] = effect['rec added% (from target)'];\n            params.turnDuration = effect['gradual heal turns (8)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n        const results = [];\n        if (hasAnyHealValues) {\n            results.push(Object.assign({ id: 'proc:3', originalId: '3', sources,\n                effectDelay, duration: params.turnDuration, value: {\n                    healLow: params.healLow,\n                    healHigh: params.healHigh,\n                    'targetRec%': params['targetRec%'],\n                } }, targetData));\n        }\n        else if (params.turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId: '3',\n                sources,\n                buffs: ['proc:3'],\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '3',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill);\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('bb bc fill' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill']);\n            }\n            if ('bb bc fill%' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n            }\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:flat', originalId: '4', sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:percent', originalId: '4', sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '4',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            element: BuffConditionElement.All,\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    params[statType] = parseNumberOrDefault(effect[effectKey]);\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId: '5', sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n        }\n        else if (params.turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId: '5',\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '5',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('6', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            turnDuration: '0',\n        };\n        const dropRateProperties = ['bc', 'hc', 'item'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.bc = effect['bc drop rate% buff (10)'];\n            params.hc = effect['hc drop rate% buff (9)'];\n            params.item = effect['item drop rate% buff (11)'];\n            params.turnDuration = effect['drop buff rate turns'];\n        }\n        dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n        const results = [];\n        if (hasAnyRates) {\n            dropRateProperties.forEach((key) => {\n                const value = params[key];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:6:${key}`, originalId: '6', sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (params.turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId: '6',\n                sources,\n                buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '6',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('7', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHpPercent = 0;\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawRecoveredHp;\n            [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:7', originalId: '7', sources,\n                effectDelay, value: recoveredHpPercent }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '7',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatHpBoost = 0;\n        let percentHpBoost = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n            flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n            percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('max hp increase' in effect) {\n                flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n            }\n            if ('max hp% increase' in effect) {\n                percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n            }\n        }\n        const results = [];\n        if (flatHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:flat', originalId: '8', sources,\n                effectDelay, value: flatHpBoost }, targetData));\n        }\n        if (percentHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:percent', originalId: '8', sources,\n                effectDelay, value: percentHpBoost }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '8',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const STAT_TYPE_MAPPING = {\n            0: 'atk',\n            1: 'def',\n            2: 'rec',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const params = {\n            element: BuffConditionElement.All,\n            statReductionEntries: [],\n            turnDuration: 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            let [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n            [\n                [statType1, value1, procChance1],\n                [statType2, value2, procChance2],\n            ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                const statType = parseNumberOrDefault(rawStatType) - 1;\n                const value = parseNumberOrDefault(rawValue);\n                const chance = parseNumberOrDefault(rawProcChance);\n                if (statType === 3) { // all stats\n                    params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                        stat,\n                        value,\n                        chance,\n                    })));\n                }\n                else {\n                    params.statReductionEntries.push({\n                        stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                        value,\n                        chance,\n                    });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            ['buff #1', 'buff #2'].forEach((buffKey) => {\n                const entry = effect[buffKey];\n                if (entry) {\n                    const chance = parseNumberOrDefault(entry['proc chance%']);\n                    const keys = Object.keys(entry);\n                    coreStatProperties.forEach((statType) => {\n                        const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                        if (effectKey) {\n                            params.statReductionEntries.push({\n                                stat: statType,\n                                value: parseNumberOrDefault(entry[effectKey]),\n                                chance,\n                            });\n                        }\n                    });\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        let hasAnyValues = false;\n        params.statReductionEntries.forEach(({ stat, value, chance }) => {\n            if (value !== 0 || chance !== 0) {\n                hasAnyValues = true;\n                const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId: '9', sources,\n                    effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                if (params.element !== BuffConditionElement.All) {\n                    buffEntry.conditions = {\n                        targetElements: [params.element],\n                    };\n                }\n                results.push(buffEntry);\n            }\n        });\n        if (!hasAnyValues && params.turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId: '9',\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '9',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport { getProcEffectToBuffMapping } from './proc-effect-mapping';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PROC_ID } from '../constants';\nimport isProcEffect from '../isProcEffect';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given proc effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            originalId: id,\n            effectDelay: effect['effect delay time(ms)/frame'],\n            targetType: effect['target type'],\n            targetArea: effect['target area'],\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given proc effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Proc effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given proc effect object.\n */\nexport default function convertProcEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isProcEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { UnitElement, UnitType } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { createSourcesFromContext, processExtraSkillConditions, getPassiveTargetData, createUnknownParamsValue, parseNumberOrDefault } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of passive IDs to functions.\n */\nexport function getPassiveEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n        X: BuffConditionElement.OmniParadigm,\n    };\n    const TYPE_MAPPING = {\n        1: UnitType.Lord,\n        2: UnitType.Anima,\n        3: UnitType.Breaker,\n        4: UnitType.Guardian,\n        5: UnitType.Oracle,\n        6: UnitType.Rex,\n    };\n    const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n    const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n        const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        return { conditionInfo, targetData, sources };\n    };\n    const createaUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n        sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = typedEffect.params.split(',');\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:1:${stat}`, originalId: '1', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '1',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            elements: [],\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let element1, element2;\n            [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = typedEffect.params.split(',');\n            [element1, element2].forEach((elementValue) => {\n                if (elementValue && elementValue !== '0') {\n                    stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            stats.elements = typedEffect['elements buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId: '2', sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n        if (stats.elements.length > 0) {\n            stats.elements.forEach((element) => {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                    }\n                });\n            });\n        }\n        else {\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                }\n            });\n        }\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '2',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            unitType: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let unitType;\n            [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = typedEffect.params.split(',');\n            if (unitType && unitType !== '0') {\n                stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.unitType = typedEffect['unit type buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetUnitType = stats.unitType || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:3:${stat}`, originalId: '3', sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '3',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = typedEffect.params.split(',');\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:4:${ailment}`, originalId: '4', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '4',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let element;\n        let mitigation = '0';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, mitigation, ...extraParams] = typedEffect.params.split(',');\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n            if (element !== BuffConditionElement.Unknown) {\n                mitigation = typedEffect[`${element} resist%`];\n            }\n        }\n        const value = parseNumberOrDefault(mitigation);\n        if (value !== 0) {\n            results.push(Object.assign({ id: `passive:5:${element}`, originalId: '5', sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '5',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let mitigation = '0';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [mitigation, ...extraParams] = typedEffect.params.split(',');\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            mitigation = typedEffect['dmg% mitigation'];\n        }\n        const value = parseNumberOrDefault(mitigation);\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'passive:8', originalId: '8', sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '8',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport isPassiveEffect from '../isPassiveEffect';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PASSIVE_ID } from '../constants';\nimport { getPassiveEffectToBuffMapping } from './passive-effect-mapping';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given passive effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given passive effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Passive effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertPassiveEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isPassiveEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId, UnitStat, BuffStackType, IconId, } from './buff-types';\nimport { TargetArea } from '../../datamine-types';\nexport const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'UNKNOWN_PASSIVE_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n        name: 'Unknown Passive Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n        name: 'Unknown Passive Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'TURN_DURATION_MODIFICATION': {\n        id: BuffId.TURN_DURATION_MODIFICATION,\n        name: 'Passive Turn Duration Modification',\n        stat: UnitStat.turnDurationModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [\n            (buff && buff.value &&\n                buff.value.duration &&\n                buff.value.duration < 0) ?\n                IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n        ],\n    }, 'passive:1:hp': {\n        id: BuffId['passive:1:hp'],\n        name: 'Passive HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:1:atk': {\n        id: BuffId['passive:1:atk'],\n        name: 'Passive Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:1:def': {\n        id: BuffId['passive:1:def'],\n        name: 'Passive Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:1:rec': {\n        id: BuffId['passive:1:rec'],\n        name: 'Passive Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:1:crit': {\n        id: BuffId['passive:1:crit'],\n        name: 'Passive Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    } }, (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:2:hp': {\n            id: BuffId['passive:2:hp'],\n            name: 'Passive Elemental HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:2:atk': {\n            id: BuffId['passive:2:atk'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:2:def': {\n            id: BuffId['passive:2:def'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:2:rec': {\n            id: BuffId['passive:2:rec'],\n            name: 'Passive Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:2:crit': {\n            id: BuffId['passive:2:crit'],\n            name: 'Passive Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let unitType = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    unitType = buff.conditions.targetUnitType || '';\n                }\n            }\n            if (typeof unitType !== 'string' || !unitType) {\n                unitType = 'unknown';\n            }\n            let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n            if (!unitType || !(iconKey in IconId)) {\n                iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:3:hp': {\n            id: BuffId['passive:3:hp'],\n            name: 'Passive Type-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:3:atk': {\n            id: BuffId['passive:3:atk'],\n            name: 'Passive Type-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:3:def': {\n            id: BuffId['passive:3:def'],\n            name: 'Passive Type-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:3:rec': {\n            id: BuffId['passive:3:rec'],\n            name: 'Passive Type-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:3:crit': {\n            id: BuffId['passive:3:crit'],\n            name: 'Passive Type-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:4:poison': {\n        id: BuffId['passive:4:poison'],\n        name: 'Passive Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:4:weak': {\n        id: BuffId['passive:4:weak'],\n        name: 'Passive Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:4:sick': {\n        id: BuffId['passive:4:sick'],\n        name: 'Passive Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:4:injury': {\n        id: BuffId['passive:4:injury'],\n        name: 'Passive Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:4:curse': {\n        id: BuffId['passive:4:curse'],\n        name: 'Passive Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:4:paralysis': {\n        id: BuffId['passive:4:paralysis'],\n        name: 'Passive Paralysis Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:5:fire': {\n        id: BuffId['passive:5:fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:5:water': {\n        id: BuffId['passive:5:water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:5:earth': {\n        id: BuffId['passive:5:earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:5:thunder': {\n        id: BuffId['passive:5:thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:5:light': {\n        id: BuffId['passive:5:light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:5:dark': {\n        id: BuffId['passive:5:dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:5:unknown': {\n        id: BuffId['passive:5:unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:8': {\n        id: BuffId['passive:8'],\n        name: 'Passive Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'UNKNOWN_PROC_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n        name: 'Unknown Proc Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n        name: 'Unknown Proc Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'proc:1': {\n        id: BuffId['proc:1'],\n        name: 'Regular Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:2': {\n        id: BuffId['proc:2'],\n        name: 'Burst Heal',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:3': {\n        id: BuffId['proc:3'],\n        name: 'Gradual Heal',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:4:flat': {\n        id: BuffId['proc:4:flat'],\n        name: 'Burst BB Gauge Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:4:percent': {\n        id: BuffId['proc:4:percent'],\n        name: 'Burst BB Gauge Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:5:atk': {\n            id: BuffId['proc:5:atk'],\n            name: 'Active Regular/Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:5:def': {\n            id: BuffId['proc:5:def'],\n            name: 'Active Regular/Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:5:rec': {\n            id: BuffId['proc:5:rec'],\n            name: 'Active Regular/Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:5:crit': {\n            id: BuffId['proc:5:crit'],\n            name: 'Active Regular/Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'proc:6:bc': {\n        id: BuffId['proc:6:bc'],\n        name: 'Active Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'proc:6:hc': {\n        id: BuffId['proc:6:hc'],\n        name: 'Active Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'proc:6:item': {\n        id: BuffId['proc:6:item'],\n        name: 'Active Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'proc:7': {\n        id: BuffId['proc:7'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:8:flat': {\n        id: BuffId['proc:8:flat'],\n        name: 'Max HP Boost (Flat Amount)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    }, 'proc:8:percent': {\n        id: BuffId['proc:8:percent'],\n        name: 'Max HP Boost (Percentage)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'DOWN'; // default to down since these are reduction buffs\n            if (buff) {\n                if (buff.value && buff.value > 0) {\n                    polarity = 'UP';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:9:atk': {\n            id: BuffId['proc:9:atk'],\n            name: 'Active Regular/Elemental Attack Reduction',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:9:def': {\n            id: BuffId['proc:9:def'],\n            name: 'Active Regular/Elemental Defense Reduction',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:9:rec': {\n            id: BuffId['proc:9:rec'],\n            name: 'Active Regular/Elemental Recovery Reduction',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n    };\n})()));\n","import { BUFF_METADATA } from './buff-metadata';\n/**\n * @description Get the associated metadata entry for a given buff ID.\n * @param id Buff ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","/**\n * @description Get the effects of a given extra skill.\n * @param skill Extra skill to get the effects of.\n * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForExtraSkill(skill) {\n    return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n}\n","/**\n * @description Get the effects of a given item.\n * @param item Item to get the effects of, if any are present,\n * @returns Effects of the given item if they exist, an empty array otherwise.\n */\nexport default function getEffectsForItem(item) {\n    let result = [];\n    if (item && item.effect) {\n        if (Array.isArray(item.effect)) {\n            result = item.effect;\n        }\n        else if (Array.isArray(item.effect.effect)) {\n            const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n            result = effect.map(e => {\n                // apply target data to each effect\n                const fullProcEffect = Object.assign({}, e);\n                fullProcEffect['target area'] = targetArea;\n                fullProcEffect['target type'] = targetType;\n                return fullProcEffect;\n            });\n        }\n    }\n    return result;\n}\n","/**\n * @description Generate a URL to display the image with the given item thumbnail filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents the thumbnail image for a given item.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getItemImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/item/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given leader skill.\n * @param skill Leader skill to get the effects of.\n * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForLeaderSkill(skill) {\n    return skill && Array.isArray(skill.effects) ? skill.effects : [];\n}\n","/**\n * @description Generate the file names for each of the image type for a given unit ID.\n * @param id Unit ID to use to generate the file names.\n * @param suffix Optional parameter that's useful for things like alternate art.\n * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n */\nexport default function getUnitImageFileNames(id, suffix = '') {\n    const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n    return {\n        spritesheet: `unit_anime_${fileNameSuffix}`,\n        battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n        guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n        fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n    };\n}\n","/**\n * @description Generate a URL to display the image with the given unit filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents an image for a given unit.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getUnitImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given SP Enhancement Entry.\n * @param entry SP Enhancement Entry to get the effects of.\n * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n */\nexport default function getEffectsForSpEnhancement(entry) {\n    const result = [];\n    if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n        const effectWrappers = entry.skill.effects;\n        effectWrappers.forEach(effectWrapper => {\n            Object.keys(effectWrapper).forEach(spType => {\n                const originalEffect = effectWrapper[spType];\n                const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                result.push(unwrappedEffect);\n            });\n        });\n    }\n    return result;\n}\n","import { SpCategoryName } from '../datamine-types';\n/**\n * @description Get the associated category name with a given category ID.\n * @param categoryId Category ID to get the name of.\n * @returns Name of the given category ID or the string 'Unknown'.\n */\nexport default function getSpCategoryName(categoryId) {\n    let result;\n    const numericalCategoryId = +categoryId;\n    switch (numericalCategoryId) {\n        case 1:\n            result = SpCategoryName['Parameter Boost'];\n            break;\n        case 2:\n            result = SpCategoryName.Spark;\n            break;\n        case 3:\n            result = SpCategoryName['Critical Hits'];\n            break;\n        case 4:\n            result = SpCategoryName['Attack Boost'];\n            break;\n        case 5:\n            result = SpCategoryName['BB Gauge'];\n            break;\n        case 6:\n            result = SpCategoryName['HP Recovery'];\n            break;\n        case 7:\n            result = SpCategoryName.Drops;\n            break;\n        case 8:\n            result = SpCategoryName['Ailment Resistance'];\n            break;\n        case 9:\n            result = SpCategoryName['Ailment Infliction'];\n            break;\n        case 10:\n            result = SpCategoryName['Damage Reduction'];\n            break;\n        case 11:\n            result = SpCategoryName.Special;\n            break;\n        default:\n            result = SpCategoryName.Unknown;\n            break;\n    }\n    return result;\n}\n","/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding character code for a given index.\n * It expects an index between 0 and 61 inclusive; will return an empty string if\n * the given value is outside of the range.\n * @param index Index of an SP entry in a given skills array.\n * @returns Corresponding single alphanumeric character to the given index\n * or an empty string if the index is invalid.\n */\nexport default function spIndexToCode(index) {\n    let result = '';\n    let correspondingCharacterCode = -1;\n    if (Number.isInteger(index)) {\n        if (index >= 0 && index <= 25) { // A-Z\n            correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (index >= 26 && index <= 51) { // a-z\n            correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n        }\n        else if (index >= 52 && index <= 61) { // 0-9\n            correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n        }\n    }\n    if (correspondingCharacterCode !== -1) {\n        result = String.fromCharCode(correspondingCharacterCode);\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding index for a given character code.\n * It expects an alphanumeric character and will return -1 otherwise.\n * @param code Character code an SP entry in a given skills array.\n * @returns Corresponding index to the given character or -1 if the\n * character is invalid.\n */\nexport default function spCodeToIndex(code) {\n    let result = -1;\n    let characterCodeOffset = -1;\n    if (!!code && typeof code === 'string' && code.length === 1) {\n        if (code >= 'A' && code <= 'Z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (code >= 'a' && code <= 'z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n        }\n        else if (code >= '0' && code <= '9') {\n            characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n        }\n    }\n    if (characterCodeOffset !== -1) {\n        result = code.charCodeAt(0) - characterCodeOffset;\n    }\n    return result;\n}\n","/**\n * @description Extract the ID of a string in the format of `number@actualId`. If there\n * is no value after the @ character or if no @ character is present, the original ID is returned.\n * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n * @param id Original SP Enhancement Entry ID.\n * @returns The ID of a string in the format of `number@actualId`, or the original input if\n * there is no @ character or no value after the @ character.\n */\nexport default function getSpEntryId(id) {\n    return (typeof id === 'string' && id.split('@')[1]) || id;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n * @param id SP Enhancement entry ID.\n * @param entries Collection of SP Enhancement entries to search in.\n * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n */\nexport default function getSpEntryWithId(id, entries) {\n    const spId = getSpEntryId(id);\n    return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n * @param entry SP Entry to get dependencies for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n */\nexport default function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependencies = [];\n    if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n        const dependencyId = getSpEntryId(entry.dependency);\n        const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n        if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n            addedEntries.add(dependencyEntry);\n            const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n            dependencies = [dependencyEntry].concat(subDependencies);\n        }\n    }\n    return dependencies;\n}\n","/**\n * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n * @param entry SP Entry to get dependents for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n */\nexport default function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependents = [];\n    if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n        const entryId = entry.id;\n        dependents = allEntries\n            .filter(s => {\n            return s.dependency &&\n                s.dependency.includes(entryId) &&\n                !addedEntries.has(s);\n        });\n        dependents.forEach(dependent => {\n            addedEntries.add(dependent);\n            const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n            dependents = dependents.concat(subDependents);\n        });\n    }\n    return dependents;\n}\n","/* NOTE: this file is automatically generated; do not edit this file */\nexport default '0.7.0';\n"]}