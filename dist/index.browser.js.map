{"version":3,"sources":["index.browser.js","bursts/getLevelEntryForBurst.js","bursts/getEffectsForBurst.js","buffs/getEffectId.js","buffs/constants.js","buffs/effect-metadata.js","buffs/getMetadataForProc.js","buffs/isAttackingProcId.js","bursts/getExtraAttackDamageFramesEntry.js","buffs/getMetadataForPassive.js","buffs/getNameForProc.js","buffs/getNameForPassive.js","buffs/isProcEffect.js","buffs/isPassiveEffect.js","datamine-types.js","buffs/combineEffectsAndDamageFrames.js","buffs/getEffectName.js","buffs/parsers/buff-types.js","buffs/parsers/_helpers.js","buffs/parsers/proc-effect-mapping.js","buffs/parsers/convertProcEffectToBuffs.js","buffs/parsers/conditional-effect-mapping.js","buffs/parsers/convertConditionalEffectToBuffs.js","buffs/parsers/passive-effect-mapping.js","buffs/parsers/convertPassiveEffectToBuffs.js","buffs/parsers/buff-metadata.js","buffs/parsers/getMetadataForBuff.js","extra-skills/getEffectsForExtraSkill.js","items/getEffectsForItem.js","items/getItemImageUrl.js","leader-skills/getEffectsForLeaderSkill.js","units/getUnitImageFileNames.js","units/getUnitImageUrl.js","sp-enhancements/getEffectsForSpEnhancement.js","sp-enhancements/getSpCategoryName.js","sp-enhancements/_constants.js","sp-enhancements/spIndexToCode.js","sp-enhancements/spCodeToIndex.js","sp-enhancements/getSpEntryId.js","sp-enhancements/getSpEntryWithId.js","sp-enhancements/getAllDependenciesForSpEntry.js","sp-enhancements/getAllEntriesThatDependOnSpEntry.js","version.js"],"names":["bfmtUtilities","exports","getLevelEntryForBurst","burst","level","burstEffectsByLevel","Array","isArray","levels","levelIndex","isNaN","length","getEffectsForBurst","levelEntry","effects","getEffectId","effect","resultId","KNOWN_PROC_ID","KNOWN_PASSIVE_ID","KNOWN_CONDITIONAL_ID","constants","Object","freeze","__proto__","ProcBuffType","PASSIVE_METADATA","PROC_METADATA","getMetadataForProc","id","metadata","hasOwnProperty","call","isAttackingProcId","metadataEntry","Type","Attack","getExtraAttackDamageFramesEntry","damageFrames","effectDelay","inputFrames","relevantFrames","filter","frame","procId","BurstHeal","unifiedFrames","reduce","acc","frameEntry","index","keepFirstFrame","numFrames","damageDistribution","frameTimes","frameIndex","push","damage","time","resultDamageFramesEntry","hits","sort","a","b","forEach","getMetadataForPassive","getNameForProc","Name","getNameForPassive","isProcEffect","isPassiveEffect","Ailment","ArenaCondition","MoveType","TargetArea","TargetAreaShorthand","TargetType","SpPassiveType","SphereTypeName","SphereTypeId","SpCategoryName","SpCategoryId","UnitAnimationKey","UnitElement","UnitGender","UnitGettingType","UnitKind","UnitType","ItemType","MimicUnitIds","MimicMonsterGroupMapping","Mimic","BatMimic","DragonMimic","MetalMimic","datamineTypes","combineEffectsAndDamageFrames","combinedEntries","map","i","correspondingFrameEntry","delay","frames","targetArea","Random","targetType","getEffectName","resultName","effectId","passive","proc","BuffStackType","BuffSource","BuffConditionElement","UnitStat","IconId","BuffId","createSourceEntryFromContext","context","source","sourceId","createSourcesFromContext","resultArray","previousSources","slice","unshift","processExtraSkillConditions","conditions","aggregate","units","Set","items","sphereTypes","unknowns","condition","add","item","unit","type_id","condition_id","result","entries","entry","size","from","getPassiveTargetData","isLeaderSkillEffect","LeaderSkill","sp_type","EnhancePassive","isPartyEffect","Party","Self","Aoe","Single","getProcTargetData","parseNumberOrDefault","value","defaultValue","createUnknownParamsValue","params","startIndex","hasValue","buffSourceIsBurstType","BraveBurst","SuperBraveBurst","UltimateBraveBurst","BondedBraveBurst","BondedSuperBraveBurst","DualBraveBurst","includes","createUnknownParamsEntryFromExtraParams","extraParams","injectionContext","unknownParams","createNoParamsEntry","originalId","sources","NO_PARAMS_SPECIFIED","mapping","getProcEffectToBuffMapping","reload","Map","setMapping","UNKNOWN_PROC_PARAM_EFFECT_KEY","ELEMENT_MAPPING","All","Fire","Water","Earth","Thunder","Light","Dark","AILMENT_MAPPING","Poison","Weak","Sick","Injury","Curse","Paralysis","AttackReduction","DefenseReduction","RecoveryReduction","retrieveCommonInfoForEffects","targetData","splitEffectParams","split","splitEffectWithUnknownProcParamsProperty","rawParams","createUnknownParamsEntry","assign","UNKNOWN_PROC_BUFF_PARAMS","createTurnDurationEntry","buffs","duration","TURN_DURATION_MODIFICATION","handlePostParse","results","isTurnDurationBuff","turnDuration","getAttackInformationFromContext","distribution","parseProcWithSingleNumericalParameterAndTurnDuration","effectValueKey","effectTurnDurationKey","parseParamValue","rawValue","buffId","rawTurnDuration","set","flatAtk","filteredValue","key","keys","healLow","healHigh","recX","recY","rec","hasAnyHealValues","flatFill","percentFill","rawFlatFill","rawPercentFill","element","atk","def","crit","coreStatProperties","rawElement","Unknown","effectElement","statType","effectKey","find","k","startsWith","concat","prop","hasAnyStats","some","statKey","buffEntry","targetElements","bc","hc","dropRateProperties","hasAnyRates","recoveredHpPercent","rawRecoveredHp","flatHpBoost","percentHpBoost","rawFlatBoost","rawPercentBoost","STAT_TYPE_MAPPING","statReductionEntries","statType1","value1","procChance1","statType2","value2","procChance2","rawStatType","rawProcChance","chance","stat","buffKey","hasAnyValues","curedAilments","splitParams","knownParams","p","param","values","ailment","inflictedAilments","numParams","ailmentValue","ailmentType","reviveToHp","rawReviveToHp","rawHits","mitigation","rawMitigation","mitigationKey","e","AILMENTS_ORDER","resistances","poison","weak","sick","injury","curse","paralysis","rawDuration","ailmentKeysInEffect","correspondingKey","fillLow","fillHigh","rawFillLow","rawFillHigh","rawChance","hasAnyFillValues","whenAttacked","coreStatPropertyMapping","effectToCoreStatMapping","attack","defense","recovery","hp","stats","convertedStat","rawConvertedStat","hitIncreasePerHit","extraHitDamage","attackElements","element1","element2","element3","elements","validElements","inputElement","sanitizedElement","flatDrainLow","flatDrainHigh","percentDrainLow","percentDrainHigh","rawFlatLow","rawFlatHigh","rawPercentLow","rawPercentHigh","drainLow","drainHigh","summonGroup","summonId","rawPositionX","rawPositionY","positionX","positionY","effectAilmentsCured","unknownAilmentCount","rawElementsMitigated","rawModLow","rawModHigh","rawFlatAtk","overdriveFill","rawOverdriveFill","damageParams","affectsElement","unitIndex","rawAffectsElement","rawUnitIndex","filteredDamageParams","bb","sbb","ubb","rawBb","rawSbb","rawUbb","type","rawHpLow","rawHpHigh","hpLow","hpHigh","proportionalMode","rawMaxAttackValue","rawProportionalMode","rawBasePercentHpLow","rawBasePercentHpHigh","rawCurrentPercentHpLow","rawCurrentPercentHpHigh","rawFixedDamage","rawIsLethal","basePercentHpLow","basePercentHpHigh","currentPercentHpLow","currentPercentHpHigh","fixedDamage","isLethal","createAttackOfType","valueProperties","rawDamageLow","rawDamageHigh","reflectedDamageLow","reflectedDamageHigh","hasAnyRangeValues","inflictedReductions","debuffTurnDuration","reductionValue","reductionValueKey","chanceKey","inflictionChances","defaultConversionFunction","UNKNOWN_PROC_EFFECT_ID","convertProcEffectToBuffs","TypeError","conversionFunction","reloadMapping","get","getConditionalEffectToBuffMapping","UNKNOWN_CONDITIONAL_BUFF_PARAMS","rawRecoverValue","recoverValue","UNKNOWN_CONDITIONAL_EFFECT_ID","convertConditionalEffectToBuffs","getPassiveEffectToBuffMapping","X","OmniParadigm","TYPE_MAPPING","Lord","Anima","Breaker","Guardian","Oracle","Rex","STATS_ORDER","DROP_TYPES_ORDER","conditionInfo","convertConditionalEffectToBuffsWithInjectionContext","UNKNOWN_PASSIVE_BUFF_PARAMS","ThresholdType","parseThresholdValuesFromParamsProperty","rawThreshold","rawRequireAboveFlag","thresholdType","threshold","requireAbove","parseThresholdValuesFromEffect","suffix","getThresholdConditions","Hp","hpGreaterThanOrEqualTo","hpLessThanOrEqualTo","Bb","bbGaugeGreaterThanOrEqualTo","bbGaugeLessThanOrEqualTo","parsePassiveWithSingleNumericalParameter","typedEffect","parsePassiveWithNumericalValueRangeAndChance","effectKeyLow","effectKeyHigh","effectKeyChance","buffKeyLow","buffKeyHigh","defaultEffectChance","generateBaseConditions","valueLow","valueHigh","rawLowValue","rawHighValue","elementValue","createBaseStatObject","unitType","targetUnitType","elem","thresholdInfo","thresholdConditions","dropRates","zel","karma","dropType","onEnemyDefeat","damageReduction","rawReduction","rawHealLow","rawHealHigh","onBattleWin","sparkDamageBoost","rawSparkDamageBoost","addedRec","rawAddedRec","onNormalAttack","additionalActions","damageModifier","rawAdditionalActions","rawDamageModifier","minimumElements","minumumUniqueElements","GENDER_MAPPING","Other","Male","Female","gender","rawGender","targetGender","baseResist","buffResist","rawBaseResist","rawBuffResist","availableStats","baseValue","addedValue","damageBoost","ResistType","rawBaseCritDamageResist","rawBuffCritDamageResist","rawBaseElementDamageResist","rawBuffElementDamageResist","rawBaseCritChanceResist","rawBuffCritChanceResist","resistType","CriticalDamage","base","buff","ElementDamage","CriticalHitRate","baseKey","triggeredBuffs","UNKNOWN_PASSIVE_EFFECT_ID","convertPassiveEffectToBuffs","BUFF_METADATA","name","turnDurationModification","stackType","Passive","icons","TURN_DURATION_DOWN","TURN_DURATION_UP","UNKNOWN","BUFF_HPDOWN","BUFF_HPUP","BUFF_ATKDOWN","BUFF_ATKUP","BUFF_DEFDOWN","BUFF_DEFUP","BUFF_RECDOWN","BUFF_RECUP","BUFF_CRTRATEDOWN","BUFF_CRTRATEUP","createIconGetterForStat","polarity","iconKey","toUpperCase","poisonResist","BUFF_POISONBLK","weakResist","BUFF_WEAKBLK","sickResist","BUFF_SICKBLK","injuryResist","BUFF_INJURYBLK","curseResist","BUFF_CURSEBLK","paralysisResist","BUFF_PARALYSISBLK","fireMitigation","BUFF_FIREDMGDOWN","waterMitigation","BUFF_WATERDMGDOWN","earthMitigation","BUFF_EARTHDMGDOWN","thunderMitigation","BUFF_THUNDERDMGDOWN","lightMitigation","BUFF_LIGHTDMGDOWN","darkMitigation","BUFF_DARKDMGDOWN","BUFF_ELEMENTDMGDOWN","BUFF_DAMAGECUT","bbGauge","BUFF_BBREC","hcEfficacy","BUFF_HCREC","BUFF_HPTHRESHATKDOWN","BUFF_HPTHRESHATKUP","BUFF_HPTHRESHDEFDOWN","BUFF_HPTHRESHDEFUP","BUFF_HPTHRESHRECDOWN","BUFF_HPTHRESHRECUP","BUFF_HPTHRESHCRTRATEDOWN","BUFF_HPTHRESHCRTRATEUP","bcDropRate","BUFF_HPTHRESHBCDOWN","BUFF_HPTHRESHBCDROP","hcDropRate","BUFF_HPTHRESHHCDOWN","BUFF_HPTHRESHHCDROP","itemDropRate","BUFF_HPTHRESHITEMDOWN","BUFF_HPTHRESHITEMDROP","zelDropRate","BUFF_HPTHRESHZELDOWN","BUFF_HPTHRESHZELDROP","karmaDropRate","BUFF_HPTHRESHKARMADOWN","BUFF_HPTHRESHKARMADROP","hpRecovery","BUFF_HPREC","BUFF_HPABS","BUFF_BCDOWN","BUFF_BCDROP","BUFF_HCDOWN","BUFF_HCDROP","BUFF_ITEMDOWN","BUFF_ITEMDROP","BUFF_ZELDOWN","BUFF_ZELDROP","BUFF_KARMADOWN","BUFF_KARMADROP","poisonInflict","BUFF_ADDPOISON","weakInflict","BUFF_ADDWEAK","sickInflict","BUFF_ADDSICK","injuryInflict","BUFF_ADDINJURY","curseInflict","BUFF_ADDCURSE","paralysisInflict","BUFF_ADDPARA","atkDownInflict","BUFF_ADDATKDOWN","defDownInflict","BUFF_ADDDEFDOWN","recDownInflict","BUFF_ADDRECDOWN","BUFF_ADDAILMENT","ConditionalTimed","BUFF_BEENATK_HPREC","BUFF_DAMAGEBB","damageReflect","BUFF_COUNTERDAMAGE","targetingModification","BUFF_REPENEATT","BUFF_GETENEATT","BUFF_HPTHRESHREPENEATT","BUFF_HPTHRESHGETENEATT","defenseIgnore","BUFF_IGNOREDEF","BUFF_BBGAUGETHRESHATKDOWN","BUFF_BBGAUGETHRESHATKUP","BUFF_BBGAUGETHRESHDEFDOWN","BUFF_BBGAUGETHRESHDEFUP","BUFF_BBGAUGETHRESHRECDOWN","BUFF_BBGAUGETHRESHRECUP","BUFF_BBGAUGETHRESHCRTRATEDOWN","BUFF_BBGAUGETHRESHCRTRATEUP","sparkDamage","BUFF_SPARKDOWN","BUFF_SPARKUP","BUFF_SPARKBC","BUFF_SPARKHC","BUFF_SPARKITEM","BUFF_SPARKZEL","BUFF_SPARKKARMA","bcEfficacy","BUFF_BBFILL","criticalDamage","BUFF_CRTUP","extraAction","BUFF_DBLSTRIKE","hitCountModification","BUFF_HITUP","BUFF_CONVERTATKDOWN","BUFF_CONVERTATKUP","BUFF_CONVERTDEFDOWN","BUFF_CONVERTDEFUP","BUFF_CONVERTRECDOWN","BUFF_CONVERTRECUP","BUFF_UNIQUEELEMENTHPDOWN","BUFF_UNIQUEELEMENTHPUP","BUFF_UNIQUEELEMENTATKDOWN","BUFF_UNIQUEELEMENTATKUP","BUFF_UNIQUEELEMENTDEFDOWN","BUFF_UNIQUEELEMENTDEFUP","BUFF_UNIQUEELEMENTRECDOWN","BUFF_UNIQUEELEMENTRECUP","BUFF_UNIQUEELEMENTCRTRATEDOWN","BUFF_UNIQUEELEMENTCRTRATEUP","reduceDamageToOne","BUFF_DAMAGECUTTOONE","criticalDamageMitigation","BUFF_CRTDOWN","BUFF_HPSCALEDATKDOWN","BUFF_HPSCALEDATKUP","BUFF_HPSCALEDDEFDOWN","BUFF_HPSCALEDDEFUP","BUFF_HPSCALEDRECDOWN","BUFF_HPSCALEDRECUP","BUFF_SPARKBBUP","bcCostReduction","BUFF_BBCOST_REDUCTION","bbGaugeConsumptionReduction","fireElementalDamage","BUFF_FIREDMGUP","waterElementalDamage","BUFF_WATERDMGUP","earthElementalDamage","BUFF_EARTHDMGUP","thunderElementalDamage","BUFF_THUNDERDMGUP","lightElementalDamage","BUFF_LIGHTDMGUP","darkElementalDamage","BUFF_DARKDMGUP","BUFF_ELEMENTDMGUP","elementalWeaknessDamageMitigation","BUFF_ELEMENTDOWN","ATK_ST","ATK_AOE","Burst","Active","hasElement","koResistance","Singleton","BUFF_KOBLK","atkDownResist","BUFF_ATKDOWNBLK","defDownResist","BUFF_DEFDOWNBLK","recDownResist","BUFF_RECDOWNBLK","BUFF_AILMENTBLK","DEBUFF_POISON","DEBUFF_WEAK","DEBUFF_SICK","DEBUFF_INJURY","DEBUFF_CURSE","DEBUFF_PARALYSIS","DEBUFF_AILMENT","ATK_RT","ATK_ST_HPREC","ATK_AOE_HPREC","ATK_ST_PROPORTIONAL","ATK_AOE_PROPORTIONAL","ATK_ST_FIXED","ATK_AOE_FIXED","ATK_ST_MULTIELEMENT","ATK_AOE_MULTIELEMENT","elementModification","BUFF_ADDFIRE","BUFF_ADDWATER","BUFF_ADDEARTH","BUFF_ADDTHUNDER","BUFF_ADDLIGHT","BUFF_ADDDARK","BUFF_ADDELEMENT","BUFF_SHIFTFIRE","BUFF_SHIFTWATER","BUFF_SHIFTEARTH","BUFF_SHIFTTHUNDER","BUFF_SHIFTLIGHT","BUFF_SHIFTDARK","BUFF_SHIFTELEMENT","buffStabilityModification","BUFF_REMOVEBUFF","BUFF_BBFILLDOWN","BUFF_DISABLELS","BUFF_SUMMONUNIT","ATK_ST_SACRIFICIAL","ATK_AOE_SACRIFICIAL","odGauge","BUFF_OVERDRIVEUP","damageOverTime","BUFF_TURNDMG","bbAtk","BUFF_BBATKUP","BUFF_SBBATKUP","BUFF_UBBATKUP","ATK_ST_HPSCALED","ATK_AOE_HPSCALED","ATK_ST_PIERCING_PROPORTIONAL","ATK_AOE_PIERCING_PROPORTIONAL","ATK_ST_PIERCING_FIXED","ATK_AOE_PIERCING_FIXED","BUFF_KO","poisonCounter","BUFF_POISONCOUNTER","weakCounter","BUFF_WEAKCOUNTER","sickCounter","BUFF_SICKCOUNTER","injuryCounter","BUFF_INJCONTER","curseCounter","BUFF_CURSECOUNTER","paralysisCounter","BUFF_PARALYCOUNTER","getMetadataForBuff","index$1","index$2","parsers","getEffectsForExtraSkill","skill","index$3","getEffectsForItem","target_area","target_type","fullProcEffect","getItemImageUrl","baseContentUrl","fileName","index$4","getEffectsForLeaderSkill","index$5","getUnitImageFileNames","fileNameSuffix","spritesheet","battleAvatar","guideAvatar","fullIllustration","getUnitImageUrl","index$6","getEffectsForSpEnhancement","effectWrappers","effectWrapper","spType","originalEffect","unwrappedEffect","getSpCategoryName","categoryId","numericalCategoryId","Spark","Drops","Special","CHARACTER_CODE_FOR_UPPERCASE_A","charCodeAt","CHARACTER_CODE_FOR_LOWERCASE_A","CHARACTER_CODE_FOR_NUMBER_0","spIndexToCode","correspondingCharacterCode","Number","isInteger","String","fromCharCode","spCodeToIndex","code","characterCodeOffset","getSpEntryId","getSpEntryWithId","spId","getAllDependenciesForSpEntry","allEntries","addedEntries","dependencies","dependency","dependencyId","dependencyEntry","s","has","subDependencies","getAllEntriesThatDependOnSpEntry","dependents","entryId","dependent","subDependents","index$7","version","bursts","extraSkills","leaderSkills","spEnhancements"],"mappings":"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","file":"index.browser.js","sourcesContent":["var bfmtUtilities = (function (exports) {\n    'use strict';\n\n    /**\n     * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get level entry from.\n     * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n     * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n     */\n    function getLevelEntryForBurst(burst, level) {\n        const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n        let levelIndex;\n        if (level !== null && !isNaN(level)) {\n            // 1-indexed\n            levelIndex = (+level - 1);\n        }\n        else {\n            // default to last entry in burst\n            levelIndex = burstEffectsByLevel.length - 1;\n        }\n        return burstEffectsByLevel[levelIndex];\n    }\n\n    /**\n     * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get effects from.\n     * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n     * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n     */\n    function getEffectsForBurst(burst, level) {\n        const levelEntry = getLevelEntryForBurst(burst, level);\n        return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n    }\n\n    /**\n     * @description Get the proc/passive ID of a given object.\n     * @param effect Object to get the effect ID from.\n     * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectId(effect) {\n        let resultId = '';\n        if (effect) {\n            resultId = effect['proc id'] || effect['unknown proc id'] ||\n                effect['passive id'] || effect['unknown passive id'] || '';\n        }\n        return resultId;\n    }\n\n    var KNOWN_PROC_ID;\n    (function (KNOWN_PROC_ID) {\n        KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n        KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    })(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\n    var KNOWN_PASSIVE_ID;\n    (function (KNOWN_PASSIVE_ID) {\n        KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n        KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    })(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n    var KNOWN_CONDITIONAL_ID;\n    (function (KNOWN_CONDITIONAL_ID) {\n        KNOWN_CONDITIONAL_ID[\"Unknown\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n    })(KNOWN_CONDITIONAL_ID || (KNOWN_CONDITIONAL_ID = {}));\n\n    var constants = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get KNOWN_PROC_ID () { return KNOWN_PROC_ID; },\n        get KNOWN_PASSIVE_ID () { return KNOWN_PASSIVE_ID; },\n        get KNOWN_CONDITIONAL_ID () { return KNOWN_CONDITIONAL_ID; }\n    });\n\n    var ProcBuffType;\n    (function (ProcBuffType) {\n        ProcBuffType[\"Attack\"] = \"Attack\";\n    })(ProcBuffType || (ProcBuffType = {}));\n    /* eslint-disable */\n    /**\n     * @ignore\n     */\n    const PASSIVE_METADATA = Object.freeze({\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Parameter Boost\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Elemental Parameter Boost\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Type-Based Parameter Boost\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"Status Negation\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Damage Reduction\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Gradual BB Gauge Boost\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"HC Efficacy\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"HP-Conditional Parameter Boost\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"HP-Conditional Drop Rate Boost\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"BC Fill on Enemy Defeat\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Damage Reduction (Chance)\"\n        },\n        \"15\": {\n            \"ID\": \"15\",\n            \"Name\": \"Heal on Enemy Defeat\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Heal on Battle Victory\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"HP Absorption\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Drop Rate Boost\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"Status Infliction\"\n        },\n        \"21\": {\n            \"ID\": \"21\",\n            \"Name\": \"Parameter Boost for First X Turns\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"BC Fill on Battle Victory\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Heal when Attacked (Chance)\"\n        },\n        \"25\": {\n            \"ID\": \"25\",\n            \"Name\": \"BC Fill when Hit (Chance)\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Damage Counter (Chance)\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Increased Target Chance\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Decreased Target Chance\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Defense Ignore (Chance)\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"BB Conditional Parameter Boost\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"BC Efficacy\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Heal over Time\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"Critical Damage Boost\"\n        },\n        \"35\": {\n            \"ID\": \"35\",\n            \"Name\": \"BC Fill when Normal Attacking\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Extra Action\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Hit Count Boost\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Parameter Conversion\"\n        },\n        \"41\": {\n            \"ID\": \"41\",\n            \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"Gender Parameter Boost\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Damage Reduction to 1\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Flat Parameter Boost\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"Critical Damage Negation\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"BC Fill on Spark\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"BC Cost Reduction\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"BB Gauge Consumption Reduction\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Elemental Damage Boost\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Conditional Effect based on HP Threshold\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Damage Reduction when Guarding\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BC Fill when Attacked when Guarding\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BC Fill on Guard\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Elemental Damage Reduction for first X Turns\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"BB Atk Boost\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"BC Fill on Critical\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Add buff to Brave Burst\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"OD Gauge Fill Rate Boost\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"Status Counter\"\n        },\n        \"72\": {\n            \"ID\": \"72\",\n            \"Name\": \"Turn End Effects Activate at Turn Start\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\"\n        },\n        \"74\": {\n            \"ID\": \"74\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Spark Vulnerability\"\n        },\n        \"77\": {\n            \"ID\": \"77\",\n            \"Name\": \"Spark Damage Reduction\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Conditional Effect after Damage Received Threshold\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"BC Fill after Damage Received Threshold\"\n        },\n        \"80\": {\n            \"ID\": \"80\",\n            \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n        },\n        \"81\": {\n            \"ID\": \"81\",\n            \"Name\": \"BC Fill after Damage Dealt Threshold\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"Conditional Effect after BC Received Threshold\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"Conditional Effect after HC Received Threshold\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"BC Fill after HC Received Threshold\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"Conditional Effect after Spark Threshold\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Conditional Effect on Guard\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Conditional Effect on Critical\"\n        },\n        \"90\": {\n            \"ID\": \"90\",\n            \"Name\": \"Status Infliction on Critical\"\n        },\n        \"91\": {\n            \"ID\": \"91\",\n            \"Name\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Negate Defense Ignore\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Added Elements\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Normal Attacks Hit All Foes\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Player EXP Boost\"\n        },\n        \"99\": {\n            \"ID\": \"99\",\n            \"Name\": \"\"\n        },\n        \"100\": {\n            \"ID\": \"100\",\n            \"Name\": \"Spark Critical\"\n        },\n        \"101\": {\n            \"ID\": \"101\",\n            \"Name\": \"Heal on Spark\"\n        },\n        \"102\": {\n            \"ID\": \"102\",\n            \"Name\": \"Added Elements\"\n        },\n        \"103\": {\n            \"ID\": \"103\",\n            \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n        },\n        \"104\": {\n            \"ID\": \"104\",\n            \"Name\": \"Spark Boost when HP Passes Threshold\"\n        },\n        \"105\": {\n            \"ID\": \"105\",\n            \"Name\": \"Turn-Based Parameter Boost\"\n        },\n        \"106\": {\n            \"ID\": \"106\",\n            \"Name\": \"Conditional Effect after Activating Overdrive\"\n        },\n        \"107\": {\n            \"ID\": \"107\",\n            \"Name\": \"Add Effect to Leader Skill\"\n        },\n        \"109\": {\n            \"ID\": \"109\",\n            \"Name\": \"BB Gauge Reduction (Chance)\"\n        },\n        \"110\": {\n            \"ID\": \"110\",\n            \"Name\": \"BC Efficacy Reduction (Chance)\"\n        },\n        \"111\": {\n            \"ID\": \"111\",\n            \"Name\": \"Increase Brave Burst Activation Rate\"\n        },\n        \"112\": {\n            \"ID\": \"112\",\n            \"Name\": \"ABP/CBP Boost\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Conditional Effect after HP Threshold\"\n        },\n        \"114\": {\n            \"ID\": \"114\",\n            \"Name\": \"Inflict Buff when Attacked\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n        },\n        \"128\": {\n            \"ID\": \"128\",\n            \"Name\": \"Damage Reduction from Normal Attacks\"\n        },\n        \"143\": {\n            \"ID\": \"143\",\n            \"Name\": \"Break Atk Parameter Limit\"\n        },\n        \"10008\": {\n            \"ID\": \"10008\",\n            \"Name\": \"Damage Reduction from Specific Sources\"\n        },\n        \"11004\": {\n            \"ID\": \"11004\",\n            \"Name\": \"Elemental Spark Damage Boost\"\n        },\n        \"11005\": {\n            \"ID\": \"11005\",\n            \"Name\": \"Elemental Critical Damage Boost\"\n        },\n        \"11006\": {\n            \"ID\": \"11006\",\n            \"Name\": \"Summoner EXP Boost\"\n        },\n        \"11009\": {\n            \"ID\": \"11009\",\n            \"Name\": \"Effect Duration Boost\"\n        },\n        \"66,1\": {\n            \"ID\": \"66,1\",\n            \"Name\": \"\"\n        }\n    });\n    /**\n     * @ignore\n     */\n    const PROC_METADATA = Object.freeze({\n        \"0\": {\n            \"ID\": \"0\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Regular Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Burst Heal\",\n            \"Type\": \"\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Heal over Time\",\n            \"Type\": \"\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"BB Gauge Refill\",\n            \"Type\": \"\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"Drop Rate\",\n            \"Type\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Parameter Reduction\",\n            \"Type\": \"\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"Status Cleanse\",\n            \"Type\": \"\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"Status Infliction\",\n            \"Type\": \"\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"Revive (Guaranteed)\",\n            \"Type\": \"\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"Random Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Lifesteal Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"Status Negation\",\n            \"Type\": \"\"\n        },\n        \"18\": {\n            \"ID\": \"18\",\n            \"Name\": \"Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Gradual BB Gauge Boost\",\n            \"Type\": \"\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"BC Fill on Hit\",\n            \"Type\": \"\"\n        },\n        \"22\": {\n            \"ID\": \"22\",\n            \"Name\": \"Defense Ignore\",\n            \"Type\": \"\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Hit Count Boost\",\n            \"Type\": \"\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Fixed Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Multi-Element Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"Add Elements\",\n            \"Type\": \"\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Instant BB Gauge Fill\",\n            \"Type\": \"\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"Element Shift\",\n            \"Type\": \"\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Buff Removal (Chance)\",\n            \"Type\": \"\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"BB Gauge Reduction (Chance)\",\n            \"Type\": \"\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Leader Skill Lock (Chance)\",\n            \"Type\": \"\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Summon Unit\",\n            \"Type\": \"\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"Status Cure\",\n            \"Type\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Status Infliction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Instant OD Fill\",\n            \"Type\": \"\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Damage over Time (Additional Damage)\",\n            \"Type\": \"\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"BB Atk Boost\",\n            \"Type\": \"\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Non-Lethal Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"HP Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"Piercing Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"Retire\",\n            \"Type\": \"\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Damage Counter\",\n            \"Type\": \"\"\n        },\n        \"51\": {\n            \"ID\": \"51\",\n            \"Name\": \"Parameter Reduction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"BC Efficacy\",\n            \"Type\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Status Counter\",\n            \"Type\": \"\"\n        },\n        \"54\": {\n            \"ID\": \"54\",\n            \"Name\": \"Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Elemental Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"56\": {\n            \"ID\": \"56\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"57\": {\n            \"ID\": \"57\",\n            \"Name\": \"BC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Spark Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BB Atk Reduction\",\n            \"Type\": \"\"\n        },\n        \"60\": {\n            \"ID\": \"60\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BB-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Barrier\",\n            \"Type\": \"\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Selective Buff Wipe\",\n            \"Type\": \"\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"Consecutive Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\",\n            \"Type\": \"\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Revive (Chance)\",\n            \"Type\": \"\"\n        },\n        \"67\": {\n            \"ID\": \"67\",\n            \"Name\": \"BC Fill on Spark\",\n            \"Type\": \"\"\n        },\n        \"68\": {\n            \"ID\": \"68\",\n            \"Name\": \"Damage Reduction when Guarding\",\n            \"Type\": \"\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"BC Fill on Guard\",\n            \"Type\": \"\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"BB Gauge Fill Rate Debuff\",\n            \"Type\": \"\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\",\n            \"Type\": \"\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Element Squad-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"76\": {\n            \"ID\": \"76\",\n            \"Name\": \"Extra Action\",\n            \"Type\": \"\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Self Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"Player EXP Boost\",\n            \"Type\": \"\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"83\": {\n            \"ID\": \"83\",\n            \"Name\": \"Spark Critical\",\n            \"Type\": \"\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"OD Gauge Fill Rate\",\n            \"Type\": \"\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"Heal when Attacked\",\n            \"Type\": \"\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"HP Absorption\",\n            \"Type\": \"\"\n        },\n        \"87\": {\n            \"ID\": \"87\",\n            \"Name\": \"Heal on Spark\",\n            \"Type\": \"\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Self Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Self Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Self Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"94\": {\n            \"ID\": \"94\",\n            \"Name\": \"Normal Attacks Hit All Foes\",\n            \"Type\": \"\"\n        },\n        \"95\": {\n            \"ID\": \"95\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n            \"Type\": \"\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Element Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Gradual OD Fill\",\n            \"Type\": \"\"\n        },\n        \"119\": {\n            \"ID\": \"119\",\n            \"Name\": \"Gradual BC Drain\",\n            \"Type\": \"\"\n        },\n        \"123\": {\n            \"ID\": \"123\",\n            \"Name\": \"OD Gauge Reduction\",\n            \"Type\": \"\"\n        },\n        \"126\": {\n            \"ID\": \"126\",\n            \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n            \"Type\": \"\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Lock On\",\n            \"Type\": \"\"\n        },\n        \"130\": {\n            \"ID\": \"130\",\n            \"Name\": \"Parameter Reduction Counter\",\n            \"Type\": \"\"\n        },\n        \"131\": {\n            \"ID\": \"131\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"132\": {\n            \"ID\": \"132\",\n            \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"901\": {\n            \"ID\": \"901\",\n            \"Name\": \"Raid Heal (on Map)\",\n            \"Type\": \"\"\n        },\n        \"902\": {\n            \"ID\": \"902\",\n            \"Name\": \"Raid Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"903\": {\n            \"ID\": \"903\",\n            \"Name\": \"Raid Boss Reveal\",\n            \"Type\": \"\"\n        },\n        \"905\": {\n            \"ID\": \"905\",\n            \"Name\": \"Raid Teleport\",\n            \"Type\": \"\"\n        },\n        \"906\": {\n            \"ID\": \"906\",\n            \"Name\": \"Raid Flee\",\n            \"Type\": \"\"\n        },\n        \"907\": {\n            \"ID\": \"907\",\n            \"Name\": \"Raid Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"908\": {\n            \"ID\": \"908\",\n            \"Name\": \"Raid Item Drop Rate Boost\",\n            \"Type\": \"\"\n        },\n        \"10000\": {\n            \"ID\": \"10000\",\n            \"Name\": \"Taunt\",\n            \"Type\": \"\"\n        },\n        \"10001\": {\n            \"ID\": \"10001\",\n            \"Name\": \"Stealth\",\n            \"Type\": \"\"\n        },\n        \"10002\": {\n            \"ID\": \"10002\",\n            \"Name\": \"Shield (old)\",\n            \"Type\": \"\"\n        },\n        \"10003\": {\n            \"ID\": \"10003\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"10004\": {\n            \"ID\": \"10004\",\n            \"Name\": \"Damage Immunity\",\n            \"Type\": \"\"\n        },\n        \"10005\": {\n            \"ID\": \"10005\",\n            \"Name\": \"Turn Skip (short duration)\",\n            \"Type\": \"\"\n        },\n        \"10006\": {\n            \"ID\": \"10006\",\n            \"Name\": \"Turn Skip (long duration)\",\n            \"Type\": \"\"\n        },\n        \"10007\": {\n            \"ID\": \"10007\",\n            \"Name\": \"Evasion\",\n            \"Type\": \"\"\n        },\n        \"10009\": {\n            \"ID\": \"10009\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"10012\": {\n            \"ID\": \"10012\",\n            \"Name\": \"OD Drain\",\n            \"Type\": \"\"\n        },\n        \"10015\": {\n            \"ID\": \"10015\",\n            \"Name\": \"Elemental Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"10016\": {\n            \"ID\": \"10016\",\n            \"Name\": \"Element Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"10017\": {\n            \"ID\": \"10017\",\n            \"Name\": \"Elemental Shield\",\n            \"Type\": \"\"\n        },\n        \"10018\": {\n            \"ID\": \"10018\",\n            \"Name\": \"Max HP Reduction\",\n            \"Type\": \"\"\n        },\n        \"10019\": {\n            \"ID\": \"10019\",\n            \"Name\": \"Effect Purge\",\n            \"Type\": \"\"\n        },\n        \"10020\": {\n            \"ID\": \"10020\",\n            \"Name\": \"Piercing Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"10021\": {\n            \"ID\": \"10021\",\n            \"Name\": \"Active Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10022\": {\n            \"ID\": \"10022\",\n            \"Name\": \"Passive Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10023\": {\n            \"ID\": \"10023\",\n            \"Name\": \"HC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"10025\": {\n            \"ID\": \"10025\",\n            \"Name\": \"KO Resistance Negation\",\n            \"Type\": \"\"\n        },\n        \"10026\": {\n            \"ID\": \"10026\",\n            \"Name\": \"Doom\",\n            \"Type\": \"\"\n        },\n        \"11000\": {\n            \"ID\": \"11000\",\n            \"Name\": \"Negative HP-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"11001\": {\n            \"ID\": \"11001\",\n            \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n            \"Type\": \"\"\n        },\n        \"11002\": {\n            \"ID\": \"11002\",\n            \"Name\": \"HP Limit Break, Convert to HP\",\n            \"Type\": \"\"\n        },\n        \"11003\": {\n            \"ID\": \"11003\",\n            \"Name\": \"Effect Negation\",\n            \"Type\": \"\"\n        },\n        \"70001\": {\n            \"ID\": \"70001\",\n            \"Name\": \"Mana Bubble Shield\",\n            \"Type\": \"\"\n        },\n        \"70002\": {\n            \"ID\": \"70002\",\n            \"Name\": \"Recast\",\n            \"Type\": \"\"\n        },\n        \"2-5\": {\n            \"ID\": \"2-5\",\n            \"Name\": \"Burst Heal and DEF/REC Boost\",\n            \"Type\": \"\"\n        }\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given proc ID.\n     * @param id Proc ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForProc(id, metadata = PROC_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Determine if a given proc ID's type is an attack.\n     * @param id Proc ID to check.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n     */\n    function isAttackingProcId(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n    }\n\n    /**\n     * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n     * @param damageFrames Damage frames that each have their own proc ID.\n     * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Damage frames entry whose frames are based on the input damage frames.\n     */\n    function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n        // relevant frames are all effects for healing or attacking\n        const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n        const relevantFrames = inputFrames.filter(frame => {\n            const procId = getEffectId(frame);\n            return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n        });\n        const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n            const keepFirstFrame = index === 0;\n            const numFrames = frameEntry['frame times'].length;\n            const damageDistribution = frameEntry['hit dmg% distribution'];\n            const frameTimes = frameEntry['frame times'];\n            for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n                acc.push({\n                    damage: damageDistribution[frameIndex],\n                    time: frameTimes[frameIndex],\n                });\n            }\n            return acc;\n        }, []);\n        const resultDamageFramesEntry = {\n            'effect delay time(ms)/frame': effectDelay,\n            'frame times': [],\n            'hit dmg% distribution': [],\n            'hit dmg% distribution (total)': 0,\n            hits: 0,\n        };\n        unifiedFrames.sort((a, b) => a.time - b.time)\n            .forEach(({ time, damage }) => {\n            resultDamageFramesEntry['frame times'].push(time);\n            resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n            resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n        });\n        resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n        return resultDamageFramesEntry;\n    }\n\n    var index = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLevelEntryForBurst: getLevelEntryForBurst,\n        getEffectsForBurst: getEffectsForBurst,\n        getExtraAttackDamageFramesEntry: getExtraAttackDamageFramesEntry\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given passive ID.\n     * @param id Passive ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Get the associated name for a given proc ID.\n     * @param id Proc ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Name of the proc ID if it exists, empty string otherwise.\n     */\n    function getNameForProc(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Get the associated name for a given passive ID.\n     * @param id Passive ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Name of the passive ID if it exists, empty string otherwise.\n     */\n    function getNameForPassive(id, metadata) {\n        const metadataEntry = getMetadataForPassive(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Determine if a given effect object is a proc effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a proc effect based on its properties.\n     */\n    function isProcEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n    }\n\n    /**\n     * @description Determine if a given effect object is a passive effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a passive effect based on its properties.\n     */\n    function isPassiveEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n    }\n\n    var Ailment;\n    (function (Ailment) {\n        Ailment[\"Poison\"] = \"poison\";\n        Ailment[\"Weak\"] = \"weak\";\n        Ailment[\"Sick\"] = \"sick\";\n        Ailment[\"Injury\"] = \"injury\";\n        Ailment[\"Curse\"] = \"curse\";\n        Ailment[\"Paralysis\"] = \"paralysis\";\n        Ailment[\"AttackReduction\"] = \"atk down\";\n        Ailment[\"DefenseReduction\"] = \"def down\";\n        Ailment[\"RecoveryReduction\"] = \"rec down\";\n        Ailment[\"Unknown\"] = \"unknown\";\n    })(Ailment || (Ailment = {}));\n    var ArenaCondition;\n    (function (ArenaCondition) {\n        ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n        ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n        ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n        ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n        ArenaCondition[\"hp_min\"] = \"hp_min\";\n        ArenaCondition[\"hp_max\"] = \"hp_max\";\n        ArenaCondition[\"atk_max\"] = \"atk_max\";\n        ArenaCondition[\"random\"] = \"random\";\n    })(ArenaCondition || (ArenaCondition = {}));\n    var MoveType;\n    (function (MoveType) {\n        MoveType[\"Moving\"] = \"1\";\n        MoveType[\"Teleporting\"] = \"2\";\n        MoveType[\"NonMoving\"] = \"3\";\n    })(MoveType || (MoveType = {}));\n    var TargetArea;\n    (function (TargetArea) {\n        TargetArea[\"Aoe\"] = \"aoe\";\n        TargetArea[\"Single\"] = \"single\";\n        TargetArea[\"Random\"] = \"random\";\n    })(TargetArea || (TargetArea = {}));\n    var TargetAreaShorthand;\n    (function (TargetAreaShorthand) {\n        TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n        TargetAreaShorthand[\"Single\"] = \"ST\";\n        TargetAreaShorthand[\"Random\"] = \"RT\";\n    })(TargetAreaShorthand || (TargetAreaShorthand = {}));\n    var TargetType;\n    (function (TargetType) {\n        TargetType[\"Self\"] = \"self\";\n        TargetType[\"Party\"] = \"party\";\n        TargetType[\"Enemy\"] = \"enemy\";\n    })(TargetType || (TargetType = {}));\n    var SpPassiveType;\n    (function (SpPassiveType) {\n        SpPassiveType[\"AddPassive\"] = \"passive\";\n        SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n        SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n        SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n        SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n    })(SpPassiveType || (SpPassiveType = {}));\n    var SphereTypeName;\n    (function (SphereTypeName) {\n        SphereTypeName[\"None\"] = \"None\";\n        SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n        SphereTypeName[\"Critical\"] = \"Critical\";\n        SphereTypeName[\"Drop\"] = \"Drop\";\n        SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n        SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n        SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n        SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n        SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n        SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n        SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n        SphereTypeName[\"Spark\"] = \"Spark\";\n        SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n        SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n        SphereTypeName[\"Special\"] = \"Special\";\n    })(SphereTypeName || (SphereTypeName = {}));\n    var SphereTypeId;\n    (function (SphereTypeId) {\n        SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n        SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n        SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n        SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n        SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n        SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n        SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n        SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n        SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n        SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n        SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n        SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n        SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n        SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n        SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n    })(SphereTypeId || (SphereTypeId = {}));\n    var SpCategoryName;\n    (function (SpCategoryName) {\n        SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n        SpCategoryName[\"Spark\"] = \"Spark\";\n        SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n        SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n        SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n        SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n        SpCategoryName[\"Drops\"] = \"Drops\";\n        SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n        SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n        SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n        SpCategoryName[\"Special\"] = \"Special\";\n        SpCategoryName[\"Unknown\"] = \"Unknown\";\n    })(SpCategoryName || (SpCategoryName = {}));\n    var SpCategoryId;\n    (function (SpCategoryId) {\n        SpCategoryId[\"Parameter Boost\"] = \"1\";\n        SpCategoryId[\"Spark\"] = \"2\";\n        SpCategoryId[\"Critical Hits\"] = \"3\";\n        SpCategoryId[\"Attack Boost\"] = \"4\";\n        SpCategoryId[\"BB Gauge\"] = \"5\";\n        SpCategoryId[\"HP Recovery\"] = \"6\";\n        SpCategoryId[\"Drops\"] = \"7\";\n        SpCategoryId[\"Ailment Resistance\"] = \"8\";\n        SpCategoryId[\"Ailment Infliction\"] = \"9\";\n        SpCategoryId[\"Damage Reduction\"] = \"10\";\n        SpCategoryId[\"Special\"] = \"11\";\n    })(SpCategoryId || (SpCategoryId = {}));\n    var UnitAnimationKey;\n    (function (UnitAnimationKey) {\n        UnitAnimationKey[\"Attack\"] = \"attack\";\n        UnitAnimationKey[\"Idle\"] = \"idle\";\n        UnitAnimationKey[\"Move\"] = \"move\";\n    })(UnitAnimationKey || (UnitAnimationKey = {}));\n    var UnitElement;\n    (function (UnitElement) {\n        UnitElement[\"Fire\"] = \"fire\";\n        UnitElement[\"Water\"] = \"water\";\n        UnitElement[\"Earth\"] = \"earth\";\n        UnitElement[\"Thunder\"] = \"thunder\";\n        UnitElement[\"Light\"] = \"light\";\n        UnitElement[\"Dark\"] = \"dark\";\n    })(UnitElement || (UnitElement = {}));\n    var UnitGender;\n    (function (UnitGender) {\n        UnitGender[\"Male\"] = \"male\";\n        UnitGender[\"Female\"] = \"female\";\n        UnitGender[\"Other\"] = \"other\";\n    })(UnitGender || (UnitGender = {}));\n    var UnitGettingType;\n    (function (UnitGettingType) {\n        UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n        UnitGettingType[\"Farmable\"] = \"farmable\";\n        UnitGettingType[\"RareSummon\"] = \"rare summon\";\n        UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n    })(UnitGettingType || (UnitGettingType = {}));\n    var UnitKind;\n    (function (UnitKind) {\n        UnitKind[\"Normal\"] = \"normal\";\n        UnitKind[\"Evolution\"] = \"evo\";\n        UnitKind[\"Enhancing\"] = \"enhancing\";\n        UnitKind[\"Sale\"] = \"sale\";\n    })(UnitKind || (UnitKind = {}));\n    var UnitType;\n    (function (UnitType) {\n        UnitType[\"Lord\"] = \"lord\";\n        UnitType[\"Anima\"] = \"anima\";\n        UnitType[\"Breaker\"] = \"breaker\";\n        UnitType[\"Guardian\"] = \"guardian\";\n        UnitType[\"Oracle\"] = \"oracle\";\n        UnitType[\"Rex\"] = \"rex\";\n    })(UnitType || (UnitType = {}));\n    var ItemType;\n    (function (ItemType) {\n        ItemType[\"Consumable\"] = \"consumable\";\n        ItemType[\"Material\"] = \"material\";\n        ItemType[\"Sphere\"] = \"sphere\";\n        ItemType[\"EvolutionMaterial\"] = \"evomat\";\n        ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n        ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n    })(ItemType || (ItemType = {}));\n    var MimicUnitIds;\n    (function (MimicUnitIds) {\n        MimicUnitIds[\"Mimic\"] = \"60142\";\n        MimicUnitIds[\"BatMimic\"] = \"60143\";\n        MimicUnitIds[\"DragonMimic\"] = \"60144\";\n        MimicUnitIds[\"MetalMimic\"] = \"60224\";\n    })(MimicUnitIds || (MimicUnitIds = {}));\n    /**\n     * @description Known values for the monster groups used in {@link IMimicInfo}.\n     */\n    const MimicMonsterGroupMapping = {\n        '1000': MimicUnitIds.Mimic,\n        '1100': MimicUnitIds.BatMimic,\n        '1101': MimicUnitIds.BatMimic,\n        '1200': MimicUnitIds.DragonMimic,\n        '1300': MimicUnitIds.MetalMimic,\n    };\n\n    var datamineTypes = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get Ailment () { return Ailment; },\n        get ArenaCondition () { return ArenaCondition; },\n        get MoveType () { return MoveType; },\n        get TargetArea () { return TargetArea; },\n        get TargetAreaShorthand () { return TargetAreaShorthand; },\n        get TargetType () { return TargetType; },\n        get SpPassiveType () { return SpPassiveType; },\n        get SphereTypeName () { return SphereTypeName; },\n        get SphereTypeId () { return SphereTypeId; },\n        get SpCategoryName () { return SpCategoryName; },\n        get SpCategoryId () { return SpCategoryId; },\n        get UnitAnimationKey () { return UnitAnimationKey; },\n        get UnitElement () { return UnitElement; },\n        get UnitGender () { return UnitGender; },\n        get UnitGettingType () { return UnitGettingType; },\n        get UnitKind () { return UnitKind; },\n        get UnitType () { return UnitType; },\n        get ItemType () { return ItemType; },\n        get MimicUnitIds () { return MimicUnitIds; },\n        MimicMonsterGroupMapping: MimicMonsterGroupMapping\n    });\n\n    /**\n     * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n     * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n     * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n     * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n     */\n    function combineEffectsAndDamageFrames(effects, damageFrames) {\n        let combinedEntries = [];\n        if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n            combinedEntries = effects.map((effect, i) => {\n                const correspondingFrameEntry = damageFrames[i];\n                return {\n                    delay: effect['effect delay time(ms)/frame'],\n                    effect,\n                    frames: correspondingFrameEntry,\n                    id: `${effect['proc id'] || effect['unknown proc id']}`,\n                    targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                    targetType: effect['target type'],\n                };\n            });\n        }\n        return combinedEntries;\n    }\n\n    /**\n     * @description Get the name of a given object.\n     * @param effect Object to get the name from.\n     * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n     * @returns Name of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectName(effect, metadata = {}) {\n        let resultName = '';\n        const effectId = getEffectId(effect);\n        if (isPassiveEffect(effect)) {\n            resultName = getNameForPassive(effectId, metadata && metadata.passive);\n        }\n        else if (isProcEffect(effect)) {\n            resultName = getNameForProc(effectId, metadata && metadata.proc);\n        }\n        return resultName;\n    }\n\n    /**\n     * @description Provides info at a glance regarding a buff's source and how it stacks.\n     */\n    var BuffStackType;\n    (function (BuffStackType) {\n        /**\n         * @description The buff is activated via some skill and lasts for a number of turns.\n         * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n         * from different levels. Two possible levels of sources are:\n         * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n         * 2. Ultimate Brave Burst or Dual Brave Burst\n         */\n        BuffStackType[\"Active\"] = \"active\";\n        /**\n         * @description The buff is always active provided that the source is not nullified.\n         * Most passive buffs can stack with themselves.\n         */\n        BuffStackType[\"Passive\"] = \"passive\";\n        /**\n         * @description The buff is applied for a number of turns once a certain condition is met.\n         * Buffs of the same type are not able to stack.\n         */\n        BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n        /**\n         * @description Only one instance of the buff can be active at a time and can last indefinitely.\n         * A couple examples of this are Barrier and Max HP Boost.\n         */\n        BuffStackType[\"Singleton\"] = \"singleton\";\n        /**\n         * @description The buff's effects immediately apply to the target(s). This differs from singleton\n         * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n         * in the HP bar filling by the sum of those burst heals).\n         */\n        BuffStackType[\"Burst\"] = \"burst\";\n        /**\n         * @description A specific subset of `Burst` type buffs that deal damage to the target.\n         */\n        BuffStackType[\"Attack\"] = \"attack\";\n        /**\n         * @description Only for buffs that cannot be processed by the library yet.\n         */\n        BuffStackType[\"Unknown\"] = \"unknown\";\n    })(BuffStackType || (BuffStackType = {}));\n    var BuffSource;\n    (function (BuffSource) {\n        BuffSource[\"BraveBurst\"] = \"bb\";\n        BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n        BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n        BuffSource[\"DualBraveBurst\"] = \"dbb\";\n        BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n        BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n        BuffSource[\"SpEnhancement\"] = \"sp\";\n        BuffSource[\"Item\"] = \"item\";\n        BuffSource[\"LeaderSkill\"] = \"ls\";\n        BuffSource[\"ExtraSkill\"] = \"es\";\n        /**\n         * @description Buffs that result of having a number of OE+ units in the squad.\n         */\n        BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n        /**\n         * @description Buffs based on a units type. See {@link UnitType}.\n         */\n        BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n        /**\n         * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n         * as well as ambient turn reductions present in some late-game quests.\n         */\n        BuffSource[\"Quest\"] = \"quest\";\n    })(BuffSource || (BuffSource = {}));\n    /**\n     * @description Extra element values that can be used in addition to {@link UnitElement}.\n     */\n    var BuffConditionElement;\n    (function (BuffConditionElement) {\n        BuffConditionElement[\"Unknown\"] = \"unknown\";\n        BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n        BuffConditionElement[\"All\"] = \"all\";\n    })(BuffConditionElement || (BuffConditionElement = {}));\n    /**\n     * @description Stats on a unit that a buff can affect.\n     */\n    var UnitStat;\n    (function (UnitStat) {\n        UnitStat[\"hp\"] = \"hp\";\n        UnitStat[\"atk\"] = \"atk\";\n        UnitStat[\"def\"] = \"def\";\n        UnitStat[\"rec\"] = \"rec\";\n        UnitStat[\"crit\"] = \"crit\";\n        UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n        UnitStat[\"bbGauge\"] = \"bbGauge\";\n        UnitStat[\"odGauge\"] = \"odGauge\";\n        UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n        UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n        UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n        UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n        UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n        UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n        UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n        UnitStat[\"bcCostReduction\"] = \"bcCostReduction\";\n        UnitStat[\"bbGaugeConsumptionReduction\"] = \"bbGaugeConsumptionReduction\";\n        UnitStat[\"poisonResist\"] = \"poisonResist\";\n        UnitStat[\"weakResist\"] = \"weakResist\";\n        UnitStat[\"sickResist\"] = \"sickResist\";\n        UnitStat[\"injuryResist\"] = \"injuryResist\";\n        UnitStat[\"curseResist\"] = \"curseResist\";\n        UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n        UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n        UnitStat[\"weakInflict\"] = \"weakInflict\";\n        UnitStat[\"sickInflict\"] = \"sickInflict\";\n        UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n        UnitStat[\"curseInflict\"] = \"curseInflict\";\n        UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n        UnitStat[\"poisonCounter\"] = \"poisonCounter\";\n        UnitStat[\"weakCounter\"] = \"weakCounter\";\n        UnitStat[\"sickCounter\"] = \"sickCounter\";\n        UnitStat[\"injuryCounter\"] = \"injuryCounter\";\n        UnitStat[\"curseCounter\"] = \"curseCounter\";\n        UnitStat[\"paralysisCounter\"] = \"paralysisCounter\";\n        UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n        UnitStat[\"defDownResist\"] = \"defDownResist\";\n        UnitStat[\"recDownResist\"] = \"recDownResist\";\n        UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n        UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n        UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n        UnitStat[\"mitigation\"] = \"mitigation\";\n        UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n        UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n        UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n        UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n        UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n        UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n        UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n        UnitStat[\"fireElementalDamage\"] = \"fireElementalDamage\";\n        UnitStat[\"waterElementalDamage\"] = \"waterElementalDamage\";\n        UnitStat[\"earthElementalDamage\"] = \"earthElementalDamage\";\n        UnitStat[\"thunderElementalDamage\"] = \"thunderElementalDamage\";\n        UnitStat[\"lightElementalDamage\"] = \"lightElementalDamage\";\n        UnitStat[\"darkElementalDamage\"] = \"darkElementalDamage\";\n        UnitStat[\"elementalWeaknessDamageMitigation\"] = \"elementalWeaknessDamageMitigation\";\n        UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n        UnitStat[\"koResistance\"] = \"koResistance\";\n        UnitStat[\"revive\"] = \"revive\";\n        UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n        UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n        UnitStat[\"criticalDamageMitigation\"] = \"criticalDamageMitigation\";\n        UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n        UnitStat[\"bbAtk\"] = \"bbAtk\";\n        UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n        UnitStat[\"damageReflect\"] = \"damageReflect\";\n        UnitStat[\"targetingModification\"] = \"targetingModification\";\n        UnitStat[\"elementModification\"] = \"elementModification\";\n        UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n        UnitStat[\"extraAction\"] = \"extraAction\";\n        UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n    })(UnitStat || (UnitStat = {}));\n    var IconId;\n    (function (IconId) {\n        IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n        IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n        IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n        IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n        IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n        IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n        IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n        IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n        IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n        IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n        IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n        IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n        IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n        IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n        IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n        IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n        IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n        IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n        IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n        IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n        IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n        IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n        IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n        IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n        IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n        IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n        IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n        IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n        IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n        IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n        IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n        IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n        IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n        IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n        IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n        IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n        IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n        IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n        IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n        IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n        IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n        IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n        IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n        IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n        IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n        IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n        IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n        IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n        IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n        IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n        IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n        IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n        IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n        IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n        IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n        IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n        IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n        IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n        IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n        IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n        IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n        IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n        IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n        IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n        IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n        IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n        IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n        IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n        IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n        IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n        IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n        IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n        IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n        IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n        IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n        IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n        IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n        IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n        IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n        IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n        IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n        IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n        IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n        IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n        IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n        IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n        IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n        IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n        IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n        IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n        IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n        IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n        IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n        IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n        IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n        IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n        IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n        IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n        IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n        IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n        IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n        IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n        IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n        IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n        IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n        IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n        IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n        IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n        IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n        IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n        IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n        IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n        IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n        IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n        IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n        IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n        IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n        IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n        IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n        IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n        IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n        IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n        IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n        IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n        IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n        IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n        IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n        IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n        IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n        IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n        IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n        IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n        IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n        IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n        IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n        IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n        IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n        IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n        IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n        IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n        IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n        IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n        IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n        IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n        IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n        IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n        IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n        IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n        IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n        IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n        IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n        IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n        IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n        IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n        IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n        IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n        IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n        IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n        IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n        IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n        IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n        IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n        IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n        IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n        IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n        IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n        IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n        IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n        IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n        IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n        IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n        IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n        IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n        IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n        IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n        IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n        IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n        IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n        IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n        IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n        IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n        IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n        IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n        IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n        IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n        IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n        IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n        IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n        IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n        IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n        IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n        IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n        IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n        IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n        IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n        IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n        IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n        IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n        IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n        IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n        IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n        IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n        IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n        IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n        IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n        IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n        IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n        IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n        IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n        IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n        IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n        IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n        IconId[\"BUFF_HPSCALEDATKUP\"] = \"BUFF_HPSCALEDATKUP\";\n        IconId[\"BUFF_HPSCALEDATKDOWN\"] = \"BUFF_HPSCALEDATKDOWN\";\n        IconId[\"BUFF_HPSCALEDDEFUP\"] = \"BUFF_HPSCALEDDEFUP\";\n        IconId[\"BUFF_HPSCALEDDEFDOWN\"] = \"BUFF_HPSCALEDDEFDOWN\";\n        IconId[\"BUFF_HPSCALEDRECUP\"] = \"BUFF_HPSCALEDRECUP\";\n        IconId[\"BUFF_HPSCALEDRECDOWN\"] = \"BUFF_HPSCALEDRECDOWN\";\n        IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n        IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n        IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n        IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n        IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n        IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n        IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n        IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n        IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n        IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n        IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n        IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n        IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n        IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n        IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n        IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n        IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n        IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n        IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n        IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n        IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n        IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n        IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n        IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n        IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n        IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n        IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n        IconId[\"BUFF_POISONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n        IconId[\"BUFF_POISIONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n        IconId[\"BUFF_WEAKCOUNTER\"] = \"BUFF_WEAKCOUNTER\";\n        IconId[\"BUFF_SICKCOUNTER\"] = \"BUFF_SICKCOUNTER\";\n        IconId[\"BUFF_INJCONTER\"] = \"BUFF_INJCONTER\";\n        IconId[\"BUFF_CURSECOUNTER\"] = \"BUFF_CURSECOUNTER\";\n        IconId[\"BUFF_PARALYCOUNTER\"] = \"BUFF_PARALYCOUNTER\";\n        IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n        IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n        // elemental damage reduction buffs\n        IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n        IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n        IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n        IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n        IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n        IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n        IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n        // elemental weakness buffs\n        IconId[\"BUFF_FIREDMGUP\"] = \"BUFF_FIREDMGUP\";\n        IconId[\"BUFF_WATERDMGUP\"] = \"BUFF_WATERDMGUP\";\n        IconId[\"BUFF_WATERMDGUP\"] = \"BUFF_WATERDMGUP\";\n        IconId[\"BUFF_EARTHDMGUP\"] = \"BUFF_EARTHDMGUP\";\n        IconId[\"BUFF_THUNDERDMGUP\"] = \"BUFF_THUNDERDMGUP\";\n        IconId[\"BUFF_LIGHTDMGUP\"] = \"BUFF_LIGHTDMGUP\";\n        IconId[\"BUFF_DARKDMGUP\"] = \"BUFF_DARKDMGUP\";\n        IconId[\"BUFF_ELEMENTDMGUP\"] = \"BUFF_ELEMENTDMGUP\";\n        IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n        IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n        IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n        IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n        IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n        IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n        IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n        IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n        IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n        IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n        IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n        IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n        IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n        IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n        IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n        IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n        IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n        IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n        IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n        IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n        IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n        IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n        IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n        IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n        IconId[\"BUFF_KO\"] = \"BUFF_KO\";\n        IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n        IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n        IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n        IconId[\"BUFF_CRTDOWN\"] = \"BUFF_CRTDOWN\";\n        IconId[\"BUFF_ELEMENTDOWN\"] = \"BUFF_ELEMENTDOWN\";\n        IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n        IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n        IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n        IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n        IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n        IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n        IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n        IconId[\"BUFF_SPARKBBUP\"] = \"BUFF_SPARKBBUP\";\n        IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n        IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n        IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n        IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n        IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n        IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n        IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n        IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n        IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n        IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n        IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n        IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n        IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n        IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n        IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n        IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n        IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n        IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n        IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n        IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n        IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n        IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n        IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n        IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n        IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n        IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n        IconId[\"BUFF_BBATKUP\"] = \"BUFF_BBATKUP\";\n        IconId[\"BUFF_SBBATKUP\"] = \"BUFF_SBBATKUP\";\n        IconId[\"BUFF_UBBATKUP\"] = \"BUFF_UBBATKUP\";\n        IconId[\"BUFF_BBCOST_REDUCTION\"] = \"BUFF_BBCOST_REDUCTION\";\n        IconId[\"ATK_ST\"] = \"ATK_ST\";\n        IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n        IconId[\"ATK_RT\"] = \"ATK_RT\";\n        IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n        IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n        IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n        IconId[\"ATK_ST_PIERCING_PROPORTIONAL\"] = \"ATK_ST_PIERCING_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PIERCING_PROPORTIONAL\"] = \"ATK_AOE_PIERCING_PROPORTIONAL\";\n        IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n        IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n        IconId[\"ATK_ST_PIERCING_FIXED\"] = \"ATK_ST_PIERCING_FIXED\";\n        IconId[\"ATK_AOE_PIERCING_FIXED\"] = \"ATK_AOE_PIERCING_FIXED\";\n        IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n        IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n        IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n        IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n        IconId[\"ATK_ST_HPSCALED\"] = \"ATK_ST_HPSCALED\";\n        IconId[\"ATK_AOE_HPSCALED\"] = \"ATK_AOE_HPSCALED\";\n    })(IconId || (IconId = {}));\n    /**\n     * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n     * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n     * source of a given buff.\n     */\n    var BuffId;\n    (function (BuffId) {\n        BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n        BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n        BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n        BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n        BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n        BuffId[\"passive:1:def\"] = \"passive:1:def\";\n        BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n        BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n        BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n        BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n        BuffId[\"passive:2:def\"] = \"passive:2:def\";\n        BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n        BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n        BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n        BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n        BuffId[\"passive:3:def\"] = \"passive:3:def\";\n        BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n        BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n        BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n        BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n        BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n        BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n        BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n        BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n        BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n        BuffId[\"passive:5:water\"] = \"passive:5:water\";\n        BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n        BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n        BuffId[\"passive:5:light\"] = \"passive:5:light\";\n        BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n        BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n        BuffId[\"passive:8\"] = \"passive:8\";\n        BuffId[\"passive:9\"] = \"passive:9\";\n        BuffId[\"passive:10\"] = \"passive:10\";\n        BuffId[\"passive:11:atk\"] = \"passive:11:atk\";\n        BuffId[\"passive:11:def\"] = \"passive:11:def\";\n        BuffId[\"passive:11:rec\"] = \"passive:11:rec\";\n        BuffId[\"passive:11:crit\"] = \"passive:11:crit\";\n        BuffId[\"passive:12:bc\"] = \"passive:12:bc\";\n        BuffId[\"passive:12:hc\"] = \"passive:12:hc\";\n        BuffId[\"passive:12:item\"] = \"passive:12:item\";\n        BuffId[\"passive:12:zel\"] = \"passive:12:zel\";\n        BuffId[\"passive:12:karma\"] = \"passive:12:karma\";\n        BuffId[\"passive:13\"] = \"passive:13\";\n        BuffId[\"passive:14\"] = \"passive:14\";\n        BuffId[\"passive:15\"] = \"passive:15\";\n        BuffId[\"passive:16\"] = \"passive:16\";\n        BuffId[\"passive:17\"] = \"passive:17\";\n        BuffId[\"passive:19:bc\"] = \"passive:19:bc\";\n        BuffId[\"passive:19:hc\"] = \"passive:19:hc\";\n        BuffId[\"passive:19:item\"] = \"passive:19:item\";\n        BuffId[\"passive:19:zel\"] = \"passive:19:zel\";\n        BuffId[\"passive:19:karma\"] = \"passive:19:karma\";\n        BuffId[\"passive:20:poison\"] = \"passive:20:poison\";\n        BuffId[\"passive:20:weak\"] = \"passive:20:weak\";\n        BuffId[\"passive:20:sick\"] = \"passive:20:sick\";\n        BuffId[\"passive:20:injury\"] = \"passive:20:injury\";\n        BuffId[\"passive:20:curse\"] = \"passive:20:curse\";\n        BuffId[\"passive:20:paralysis\"] = \"passive:20:paralysis\";\n        BuffId[\"passive:20:atk down\"] = \"passive:20:atk down\";\n        BuffId[\"passive:20:def down\"] = \"passive:20:def down\";\n        BuffId[\"passive:20:rec down\"] = \"passive:20:rec down\";\n        BuffId[\"passive:20:unknown\"] = \"passive:20:unknown\";\n        BuffId[\"passive:21:atk\"] = \"passive:21:atk\";\n        BuffId[\"passive:21:def\"] = \"passive:21:def\";\n        BuffId[\"passive:21:rec\"] = \"passive:21:rec\";\n        BuffId[\"passive:21:crit\"] = \"passive:21:crit\";\n        BuffId[\"passive:23\"] = \"passive:23\";\n        BuffId[\"passive:24\"] = \"passive:24\";\n        BuffId[\"passive:25\"] = \"passive:25\";\n        BuffId[\"passive:26\"] = \"passive:26\";\n        BuffId[\"passive:27\"] = \"passive:27\";\n        BuffId[\"passive:28\"] = \"passive:28\";\n        BuffId[\"passive:29\"] = \"passive:29\";\n        BuffId[\"passive:30:atk\"] = \"passive:30:atk\";\n        BuffId[\"passive:30:def\"] = \"passive:30:def\";\n        BuffId[\"passive:30:rec\"] = \"passive:30:rec\";\n        BuffId[\"passive:30:crit\"] = \"passive:30:crit\";\n        BuffId[\"passive:31:damage\"] = \"passive:31:damage\";\n        BuffId[\"passive:31:bc\"] = \"passive:31:bc\";\n        BuffId[\"passive:31:hc\"] = \"passive:31:hc\";\n        BuffId[\"passive:31:item\"] = \"passive:31:item\";\n        BuffId[\"passive:31:zel\"] = \"passive:31:zel\";\n        BuffId[\"passive:31:karma\"] = \"passive:31:karma\";\n        BuffId[\"passive:32\"] = \"passive:32\";\n        BuffId[\"passive:33\"] = \"passive:33\";\n        BuffId[\"passive:34\"] = \"passive:34\";\n        BuffId[\"passive:35\"] = \"passive:35\";\n        BuffId[\"passive:36\"] = \"passive:36\";\n        BuffId[\"passive:37\"] = \"passive:37\";\n        BuffId[\"passive:40:atk\"] = \"passive:40:atk\";\n        BuffId[\"passive:40:def\"] = \"passive:40:def\";\n        BuffId[\"passive:40:rec\"] = \"passive:40:rec\";\n        BuffId[\"passive:41:hp\"] = \"passive:41:hp\";\n        BuffId[\"passive:41:atk\"] = \"passive:41:atk\";\n        BuffId[\"passive:41:def\"] = \"passive:41:def\";\n        BuffId[\"passive:41:rec\"] = \"passive:41:rec\";\n        BuffId[\"passive:41:crit\"] = \"passive:41:crit\";\n        BuffId[\"passive:42:hp\"] = \"passive:42:hp\";\n        BuffId[\"passive:42:atk\"] = \"passive:42:atk\";\n        BuffId[\"passive:42:def\"] = \"passive:42:def\";\n        BuffId[\"passive:42:rec\"] = \"passive:42:rec\";\n        BuffId[\"passive:42:crit\"] = \"passive:42:crit\";\n        BuffId[\"passive:43\"] = \"passive:43\";\n        BuffId[\"passive:44:hp\"] = \"passive:44:hp\";\n        BuffId[\"passive:44:atk\"] = \"passive:44:atk\";\n        BuffId[\"passive:44:def\"] = \"passive:44:def\";\n        BuffId[\"passive:44:rec\"] = \"passive:44:rec\";\n        BuffId[\"passive:44:crit\"] = \"passive:44:crit\";\n        BuffId[\"passive:45:base\"] = \"passive:45:base\";\n        BuffId[\"passive:45:buff\"] = \"passive:45:buff\";\n        BuffId[\"passive:46:atk\"] = \"passive:46:atk\";\n        BuffId[\"passive:46:def\"] = \"passive:46:def\";\n        BuffId[\"passive:46:rec\"] = \"passive:46:rec\";\n        BuffId[\"passive:47\"] = \"passive:47\";\n        BuffId[\"passive:48\"] = \"passive:48\";\n        BuffId[\"passive:49\"] = \"passive:49\";\n        BuffId[\"passive:50:fire\"] = \"passive:50:fire\";\n        BuffId[\"passive:50:water\"] = \"passive:50:water\";\n        BuffId[\"passive:50:earth\"] = \"passive:50:earth\";\n        BuffId[\"passive:50:thunder\"] = \"passive:50:thunder\";\n        BuffId[\"passive:50:light\"] = \"passive:50:light\";\n        BuffId[\"passive:50:dark\"] = \"passive:50:dark\";\n        BuffId[\"passive:50:unknown\"] = \"passive:50:unknown\";\n        BuffId[\"passive:53:critical-damage-base\"] = \"passive:53:critical-damage-base\";\n        BuffId[\"passive:53:critical-damage-buff\"] = \"passive:53:critical-damage-buff\";\n        BuffId[\"passive:53:element-damage-base\"] = \"passive:53:element-damage-base\";\n        BuffId[\"passive:53:element-damage-buff\"] = \"passive:53:element-damage-buff\";\n        BuffId[\"passive:53:critical-rate-base\"] = \"passive:53:critical-rate-base\";\n        BuffId[\"passive:53:critical-rate-buff\"] = \"passive:53:critical-rate-buff\";\n        BuffId[\"passive:55:hp condition\"] = \"passive:55:hp condition\";\n        BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n        BuffId[\"proc:1\"] = \"proc:1\";\n        BuffId[\"proc:2\"] = \"proc:2\";\n        BuffId[\"proc:3\"] = \"proc:3\";\n        BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n        BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n        BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n        BuffId[\"proc:5:def\"] = \"proc:5:def\";\n        BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n        BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n        BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n        BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n        BuffId[\"proc:6:item\"] = \"proc:6:item\";\n        BuffId[\"proc:7\"] = \"proc:7\";\n        BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n        BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n        BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n        BuffId[\"proc:9:def\"] = \"proc:9:def\";\n        BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n        BuffId[\"proc:9:unknown\"] = \"proc:9:unknown\";\n        BuffId[\"proc:10:poison\"] = \"proc:10:poison\";\n        BuffId[\"proc:10:weak\"] = \"proc:10:weak\";\n        BuffId[\"proc:10:sick\"] = \"proc:10:sick\";\n        BuffId[\"proc:10:injury\"] = \"proc:10:injury\";\n        BuffId[\"proc:10:curse\"] = \"proc:10:curse\";\n        BuffId[\"proc:10:paralysis\"] = \"proc:10:paralysis\";\n        BuffId[\"proc:10:atk down\"] = \"proc:10:atk down\";\n        BuffId[\"proc:10:def down\"] = \"proc:10:def down\";\n        BuffId[\"proc:10:rec down\"] = \"proc:10:rec down\";\n        BuffId[\"proc:10:unknown\"] = \"proc:10:unknown\";\n        BuffId[\"proc:11:poison\"] = \"proc:11:poison\";\n        BuffId[\"proc:11:weak\"] = \"proc:11:weak\";\n        BuffId[\"proc:11:sick\"] = \"proc:11:sick\";\n        BuffId[\"proc:11:injury\"] = \"proc:11:injury\";\n        BuffId[\"proc:11:curse\"] = \"proc:11:curse\";\n        BuffId[\"proc:11:paralysis\"] = \"proc:11:paralysis\";\n        BuffId[\"proc:11:atk down\"] = \"proc:11:atk down\";\n        BuffId[\"proc:11:def down\"] = \"proc:11:def down\";\n        BuffId[\"proc:11:rec down\"] = \"proc:11:rec down\";\n        BuffId[\"proc:11:unknown\"] = \"proc:11:unknown\";\n        BuffId[\"proc:12\"] = \"proc:12\";\n        BuffId[\"proc:13\"] = \"proc:13\";\n        BuffId[\"proc:14\"] = \"proc:14\";\n        BuffId[\"proc:16:fire\"] = \"proc:16:fire\";\n        BuffId[\"proc:16:water\"] = \"proc:16:water\";\n        BuffId[\"proc:16:earth\"] = \"proc:16:earth\";\n        BuffId[\"proc:16:thunder\"] = \"proc:16:thunder\";\n        BuffId[\"proc:16:light\"] = \"proc:16:light\";\n        BuffId[\"proc:16:dark\"] = \"proc:16:dark\";\n        BuffId[\"proc:16:all\"] = \"proc:16:all\";\n        BuffId[\"proc:16:unknown\"] = \"proc:16:unknown\";\n        BuffId[\"proc:17:poison\"] = \"proc:17:poison\";\n        BuffId[\"proc:17:weak\"] = \"proc:17:weak\";\n        BuffId[\"proc:17:sick\"] = \"proc:17:sick\";\n        BuffId[\"proc:17:injury\"] = \"proc:17:injury\";\n        BuffId[\"proc:17:curse\"] = \"proc:17:curse\";\n        BuffId[\"proc:17:paralysis\"] = \"proc:17:paralysis\";\n        BuffId[\"proc:18\"] = \"proc:18\";\n        BuffId[\"proc:19\"] = \"proc:19\";\n        BuffId[\"proc:20\"] = \"proc:20\";\n        BuffId[\"proc:22\"] = \"proc:22\";\n        BuffId[\"proc:23\"] = \"proc:23\";\n        BuffId[\"proc:24:atk\"] = \"proc:24:atk\";\n        BuffId[\"proc:24:def\"] = \"proc:24:def\";\n        BuffId[\"proc:24:rec\"] = \"proc:24:rec\";\n        BuffId[\"proc:26\"] = \"proc:26\";\n        BuffId[\"proc:27\"] = \"proc:27\";\n        BuffId[\"proc:28\"] = \"proc:28\";\n        BuffId[\"proc:29\"] = \"proc:29\";\n        BuffId[\"proc:30:fire\"] = \"proc:30:fire\";\n        BuffId[\"proc:30:water\"] = \"proc:30:water\";\n        BuffId[\"proc:30:earth\"] = \"proc:30:earth\";\n        BuffId[\"proc:30:thunder\"] = \"proc:30:thunder\";\n        BuffId[\"proc:30:light\"] = \"proc:30:light\";\n        BuffId[\"proc:30:dark\"] = \"proc:30:dark\";\n        BuffId[\"proc:30:unknown\"] = \"proc:30:unknown\";\n        BuffId[\"proc:31:flat\"] = \"proc:31:flat\";\n        BuffId[\"proc:31:percent\"] = \"proc:31:percent\";\n        BuffId[\"proc:32:fire\"] = \"proc:32:fire\";\n        BuffId[\"proc:32:water\"] = \"proc:32:water\";\n        BuffId[\"proc:32:earth\"] = \"proc:32:earth\";\n        BuffId[\"proc:32:thunder\"] = \"proc:32:thunder\";\n        BuffId[\"proc:32:light\"] = \"proc:32:light\";\n        BuffId[\"proc:32:dark\"] = \"proc:32:dark\";\n        BuffId[\"proc:32:unknown\"] = \"proc:32:unknown\";\n        BuffId[\"proc:33\"] = \"proc:33\";\n        BuffId[\"proc:34:flat\"] = \"proc:34:flat\";\n        BuffId[\"proc:34:percent\"] = \"proc:34:percent\";\n        BuffId[\"proc:36\"] = \"proc:36\";\n        BuffId[\"proc:37\"] = \"proc:37\";\n        BuffId[\"proc:38:poison\"] = \"proc:38:poison\";\n        BuffId[\"proc:38:weak\"] = \"proc:38:weak\";\n        BuffId[\"proc:38:sick\"] = \"proc:38:sick\";\n        BuffId[\"proc:38:injury\"] = \"proc:38:injury\";\n        BuffId[\"proc:38:curse\"] = \"proc:38:curse\";\n        BuffId[\"proc:38:paralysis\"] = \"proc:38:paralysis\";\n        BuffId[\"proc:38:atk down\"] = \"proc:38:atk down\";\n        BuffId[\"proc:38:def down\"] = \"proc:38:def down\";\n        BuffId[\"proc:38:rec down\"] = \"proc:38:rec down\";\n        BuffId[\"proc:38:unknown\"] = \"proc:38:unknown\";\n        BuffId[\"proc:39:fire\"] = \"proc:39:fire\";\n        BuffId[\"proc:39:water\"] = \"proc:39:water\";\n        BuffId[\"proc:39:earth\"] = \"proc:39:earth\";\n        BuffId[\"proc:39:thunder\"] = \"proc:39:thunder\";\n        BuffId[\"proc:39:light\"] = \"proc:39:light\";\n        BuffId[\"proc:39:dark\"] = \"proc:39:dark\";\n        BuffId[\"proc:39:unknown\"] = \"proc:39:unknown\";\n        BuffId[\"proc:40:poison\"] = \"proc:40:poison\";\n        BuffId[\"proc:40:weak\"] = \"proc:40:weak\";\n        BuffId[\"proc:40:sick\"] = \"proc:40:sick\";\n        BuffId[\"proc:40:injury\"] = \"proc:40:injury\";\n        BuffId[\"proc:40:curse\"] = \"proc:40:curse\";\n        BuffId[\"proc:40:paralysis\"] = \"proc:40:paralysis\";\n        BuffId[\"proc:40:atk down\"] = \"proc:40:atk down\";\n        BuffId[\"proc:40:def down\"] = \"proc:40:def down\";\n        BuffId[\"proc:40:rec down\"] = \"proc:40:rec down\";\n        BuffId[\"proc:40:unknown\"] = \"proc:40:unknown\";\n        BuffId[\"proc:42\"] = \"proc:42\";\n        BuffId[\"proc:43\"] = \"proc:43\";\n        BuffId[\"proc:44\"] = \"proc:44\";\n        BuffId[\"proc:45:bb\"] = \"proc:45:bb\";\n        BuffId[\"proc:45:sbb\"] = \"proc:45:sbb\";\n        BuffId[\"proc:45:ubb\"] = \"proc:45:ubb\";\n        BuffId[\"proc:46\"] = \"proc:46\";\n        BuffId[\"proc:47\"] = \"proc:47\";\n        BuffId[\"proc:48:base\"] = \"proc:48:base\";\n        BuffId[\"proc:48:current\"] = \"proc:48:current\";\n        BuffId[\"proc:48:fixed\"] = \"proc:48:fixed\";\n        BuffId[\"proc:48:unknown\"] = \"proc:48:unknown\";\n        BuffId[\"proc:49\"] = \"proc:49\";\n        BuffId[\"proc:50\"] = \"proc:50\";\n        BuffId[\"proc:51:atk down\"] = \"proc:51:atk down\";\n        BuffId[\"proc:51:def down\"] = \"proc:51:def down\";\n        BuffId[\"proc:51:rec down\"] = \"proc:51:rec down\";\n        BuffId[\"proc:52\"] = \"proc:52\";\n        BuffId[\"proc:53:poison\"] = \"proc:53:poison\";\n        BuffId[\"proc:53:weak\"] = \"proc:53:weak\";\n        BuffId[\"proc:53:sick\"] = \"proc:53:sick\";\n        BuffId[\"proc:53:injury\"] = \"proc:53:injury\";\n        BuffId[\"proc:53:curse\"] = \"proc:53:curse\";\n        BuffId[\"proc:53:paralysis\"] = \"proc:53:paralysis\";\n        BuffId[\"proc:54\"] = \"proc:54\";\n        BuffId[\"UNKNOWN_CONDITIONAL_EFFECT_ID\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n        BuffId[\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\"] = \"UNKNOWN_CONDITIONAL_BUFF_PARAMS\";\n        BuffId[\"buff:12:ko resistance\"] = \"buff:12:ko resistance\";\n    })(BuffId || (BuffId = {}));\n\n    /**\n     * @description Helper function for creating an entry to be used in the `sources`\n     * property of {@link IBuff}.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourceEntryFromContext(context) {\n        return `${context.source}-${context.sourceId}`;\n    }\n    /**\n     * @description Helper function for creating an entries array to be used in the `sources`\n     * property of {@link IBuff}. It handles setting the order of the sources.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourcesFromContext(context) {\n        const resultArray = Array.isArray(context.previousSources)\n            ? context.previousSources.slice()\n            : [];\n        // Ensure that the current source is at the beginning of the array\n        resultArray.unshift(createSourceEntryFromContext(context));\n        return resultArray;\n    }\n    /**\n     * @description Given the conditions in an extra skill effect, normalize them into\n     * a simpler object containing the IDs of each condition type.\n     * @param effect Extra skill effect to process conditions from.\n     * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n     */\n    function processExtraSkillConditions(effect) {\n        const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n        const aggregate = {\n            units: new Set(),\n            items: new Set(),\n            sphereTypes: new Set(),\n            unknowns: new Set(),\n        };\n        conditions.forEach((condition, index) => {\n            if ('sphere category required (raw)' in condition) {\n                aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n            }\n            else if ('item required' in condition) {\n                condition['item required'].forEach((item) => {\n                    aggregate.items.add(item);\n                });\n            }\n            else if ('unit required' in condition) {\n                condition['unit required'].forEach((unit) => {\n                    aggregate.units.add(`${unit.id}`);\n                });\n            }\n            else {\n                aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n            }\n        });\n        // filter out properties that have no entries\n        const result = Object.entries(aggregate)\n            .filter((entry) => entry[1].size > 0)\n            .reduce((acc, entry) => {\n            acc[entry[0]] = Array.from(entry[1]);\n            return acc;\n        }, {});\n        return result;\n    }\n    /**\n     * @description Extract the target type and target area of a given passive effect.\n     * @param effect Passive effect to extract target data from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns The target data for the given effect and context. There are only two possible values:\n     * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n     */\n    function getPassiveTargetData(effect, context) {\n        const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n            (effect.sp_type === SpPassiveType.EnhancePassive);\n        const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n        return {\n            targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n            targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n        };\n    }\n    /**\n     * @description Extract the target type and target area of a given proc effect.\n     * @param effect Proc effect to extract target data from.\n     * @returns The target data for the given effect and context.\n     */\n    function getProcTargetData(effect) {\n        return {\n            targetArea: effect['target area'],\n            targetType: effect['target type'],\n        };\n    }\n    /**\n     * @description Try to parse the given value into a number or return a value if it is not a number.\n     * @param value Value to parse into a number.\n     * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n     * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n     */\n    function parseNumberOrDefault(value, defaultValue = 0) {\n        return (value !== null && !isNaN(value)) ? +value : defaultValue;\n    }\n    /**\n     * @description Create an object denoting values that cannot be processed yet. To be used\n     * in the `value` property of `IBuff` as needed.\n     * @param params Array of values that cannot be processed yet.\n     * @param startIndex The first index before which we know how to process an effect's values.\n     * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n     */\n    function createUnknownParamsValue(params = [], startIndex = 0) {\n        let hasValue = false;\n        const result = params\n            .reduce((acc, value, index) => {\n            if (value && value !== '0') {\n                acc[`param_${startIndex + index}`] = value;\n                hasValue = true;\n            }\n            return acc;\n        }, {});\n        return hasValue ? result : (void 0);\n    }\n    /**\n     * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n     * @param source Source value to check.\n     * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n     * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n     * bonded super brave burst, or bonded dual brave burst.\n     */\n    function buffSourceIsBurstType(source) {\n        return !!source && [\n            BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n            BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n        ].includes(source);\n    }\n    function createUnknownParamsEntryFromExtraParams(extraParams, startIndex, injectionContext) {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    }\n    function createNoParamsEntry({ originalId, sources }) {\n        return {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        };\n    }\n\n    let mapping;\n    /**\n     * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of proc IDs to functions.\n     */\n    function getProcEffectToBuffMapping(reload) {\n        if (!mapping || reload) {\n            mapping = new Map();\n            setMapping(mapping);\n        }\n        return mapping;\n    }\n    /**\n     * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping(map) {\n        const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const effectDelay = effect['effect delay time(ms)/frame'];\n            return { targetData, sources, effectDelay };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const splitEffectWithUnknownProcParamsProperty = (effect) => {\n            const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n            return splitEffectParams({ params: rawParams });\n        };\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n            effectDelay,\n            sources, value: unknownParams }, targetData));\n        const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n            sources, value: {\n                buffs,\n                duration,\n            } }, targetData));\n        const createNoParamsEntry = ({ originalId, sources, }) => ({\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        });\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n        };\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        /**\n         * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n         * checked if all other known values in the effect are 0.\n         * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n         * @param turnDuration Parsed turn duration value to check.\n         * @param injectionContext Object whose main use is for injecting methods in testing.\n         * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n         */\n        const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n            let result = turnDuration !== 0;\n            if (result) {\n                result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n            }\n            return result;\n        };\n        /**\n         * @description Helper function to get attack information common across most attacks from the conversion context.\n         * @param context Given context that may contain attack information like damage frames.\n         * @returns Extracted attack information from the context (with defaults where applicable).\n         */\n        const getAttackInformationFromContext = (context) => {\n            const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n            const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n            return {\n                hits,\n                distribution,\n            };\n        };\n        const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                value = parseParamValue(rawValue);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect[effectValueKey]);\n                turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [buffId],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:1', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'healerRec%': 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                let recX, recY;\n                let extraParams;\n                [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n                params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['heal low'];\n                params.healHigh = effect['heal high'];\n                params['healerRec%'] = effect['rec added% (from healer)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const results = [];\n            if (params.healHigh !== 0 || params.healLow !== 0) {\n                results.push(Object.assign({ id: 'proc:2', originalId,\n                    sources,\n                    effectDelay, value: params }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'targetRec%': 0,\n                turnDuration: '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let rec;\n                let extraParams;\n                [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['gradual heal low'];\n                params.healHigh = effect['gradual heal high'];\n                params['targetRec%'] = effect['rec added% (from target)'];\n                params.turnDuration = effect['gradual heal turns (8)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n            const results = [];\n            if (hasAnyHealValues) {\n                results.push(Object.assign({ id: 'proc:3', originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: {\n                        healLow: params.healLow,\n                        healHigh: params.healHigh,\n                        'targetRec%': params['targetRec%'],\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:3'],\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('bb bc fill' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill']);\n                }\n                if ('bb bc fill%' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n                }\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                element: BuffConditionElement.All,\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        params[statType] = parseNumberOrDefault(effect[effectKey]);\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData);\n                        if (params.element !== BuffConditionElement.All) {\n                            buffEntry.conditions = {\n                                targetElements: [params.element],\n                            };\n                        }\n                        results.push(buffEntry);\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('6', (effect, context, injectionContext) => {\n            const originalId = '6';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                turnDuration: '0',\n            };\n            const dropRateProperties = ['bc', 'hc', 'item'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.bc = effect['bc drop rate% buff (10)'];\n                params.hc = effect['hc drop rate% buff (9)'];\n                params.item = effect['item drop rate% buff (11)'];\n                params.turnDuration = effect['drop buff rate turns'];\n            }\n            dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n            const results = [];\n            if (hasAnyRates) {\n                dropRateProperties.forEach((key) => {\n                    const value = params[key];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:6:${key}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('7', (effect, context, injectionContext) => {\n            const originalId = '7';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHpPercent = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:7', originalId,\n                    sources,\n                    effectDelay, value: recoveredHpPercent }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const originalId = '8';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatHpBoost = 0;\n            let percentHpBoost = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n                flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n                percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('max hp increase' in effect) {\n                    flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n                }\n                if ('max hp% increase' in effect) {\n                    percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n                }\n            }\n            const results = [];\n            if (flatHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:flat', originalId,\n                    sources,\n                    effectDelay, value: flatHpBoost }, targetData));\n            }\n            if (percentHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:percent', originalId,\n                    sources,\n                    effectDelay, value: percentHpBoost }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            const originalId = '9';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const STAT_TYPE_MAPPING = {\n                0: 'atk',\n                1: 'def',\n                2: 'rec',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const params = {\n                element: BuffConditionElement.All,\n                statReductionEntries: [],\n                turnDuration: 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n                [\n                    [statType1, value1, procChance1],\n                    [statType2, value2, procChance2],\n                ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                    const statType = parseNumberOrDefault(rawStatType) - 1;\n                    const value = parseNumberOrDefault(rawValue);\n                    const chance = parseNumberOrDefault(rawProcChance);\n                    if (statType === 3) { // all stats\n                        params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                            stat,\n                            value,\n                            chance,\n                        })));\n                    }\n                    else {\n                        params.statReductionEntries.push({\n                            stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                            value,\n                            chance,\n                        });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                ['buff #1', 'buff #2'].forEach((buffKey) => {\n                    const entry = effect[buffKey];\n                    if (entry) {\n                        const chance = parseNumberOrDefault(entry['proc chance%']);\n                        const keys = Object.keys(entry);\n                        coreStatProperties.forEach((statType) => {\n                            const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                            if (effectKey) {\n                                params.statReductionEntries.push({\n                                    stat: statType,\n                                    value: parseNumberOrDefault(entry[effectKey]),\n                                    chance,\n                                });\n                            }\n                        });\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            let hasAnyValues = false;\n            params.statReductionEntries.forEach(({ stat, value, chance }) => {\n                if (value !== 0 || chance !== 0) {\n                    hasAnyValues = true;\n                    const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n            if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            const originalId = '10';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 8);\n                const extraParams = splitParams.slice(8);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    if (`remove ${ailment}` in effect) { // mainly for items\n                        curedAilments.push(ailment);\n                    }\n                });\n                if ('remove all status ailments' in effect) {\n                    curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                let params = splitEffectParams(effect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:${ailment}`, originalId,\n                sources,\n                effectDelay, value: chance }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let reviveToHp = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n                reviveToHp = parseNumberOrDefault(rawReviveToHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:12', originalId,\n                    sources,\n                    effectDelay, value: reviveToHp }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const originalId = '13';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hits = 0;\n            const { distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawHits;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n                hits = parseNumberOrDefault(rawHits);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                hits = parseNumberOrDefault(effect.hits);\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push({\n                    id: 'proc:13',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }),\n                    targetType: targetData.targetType,\n                    targetArea: TargetArea.Random,\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n                'drainLow%': '0',\n                'drainHigh%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n                params['drainLow%'] = effect['hp drain% low'];\n                params['drainHigh%'] = effect['hp drain% high'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:14', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let mitigation = 0;\n            let element;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                mitigation = parseNumberOrDefault(rawMitigation);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n                element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n                if (mitigationKey) {\n                    mitigation = parseNumberOrDefault(effect[mitigationKey]);\n                }\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (mitigation !== 0) {\n                results.push(Object.assign({ id: `proc:16:${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            const originalId = '17';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        resistances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:17:${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:17:${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('18', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'dmg% reduction',\n                effectTurnDurationKey: 'dmg% reduction turns (36)',\n                buffId: 'proc:18',\n                originalId: '18',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'increase bb gauge gradual',\n                effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'proc:19',\n                originalId: '19',\n            });\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const originalId = '20';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let fillLow = 0;\n            let fillHigh = 0;\n            let chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFillLow, rawFillHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(effect['bc fill when attacked low']);\n                fillHigh = parseNumberOrDefault(effect['bc fill when attacked high']);\n                chance = parseNumberOrDefault(effect['bc fill when attacked%']);\n                turnDuration = parseNumberOrDefault(effect['bc fill when attacked turns (38)']);\n            }\n            const hasAnyFillValues = fillLow !== 0 || fillHigh !== 0;\n            const results = [];\n            if (hasAnyFillValues) {\n                results.push(Object.assign({ id: 'proc:20', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, conditions: {\n                        whenAttacked: true,\n                    }, value: {\n                        fillLow,\n                        fillHigh,\n                        chance,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:20'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('22', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'defense% ignore',\n                effectTurnDurationKey: 'defense% ignore turns (39)',\n                buffId: 'proc:22',\n                originalId: '22',\n            });\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                value = parseNumberOrDefault(params[0]);\n                turnDuration = parseNumberOrDefault(params[6]);\n                const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'proc:23', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:23'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            const originalId = '24';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let turnDuration = 0;\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawConvertedStat, rawTurnDuration;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                const rawConvertedStat = effect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        stats[statType] = effect[effectKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['% converted turns']);\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:24:${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: {\n                            convertedStat,\n                            value,\n                        } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:24:${statKey}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            const originalId = '26';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n                turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'proc:26', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:26'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            const originalId = '27';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'hpDamageLow%': '0',\n                'hpDamageHigh%': '0',\n                'hpDamageChance%': '0',\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else {\n                params['hpDamageLow%'] = effect['hp% damage low'];\n                params['hpDamageHigh%'] = effect['hp% damage high'];\n                params['hpDamageChance%'] = effect['hp% damage chance%'];\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:27', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            let value = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                value = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['fixed damage']);\n            }\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || value !== 0) {\n                const entry = Object.assign({ id: 'proc:28', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (value !== 0) {\n                    entry.value.value = value;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            const originalId = '29';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let attackElements = [];\n            let unknownParams;\n            if (effect.params) {\n                let element1, element2, element3;\n                let extraParams;\n                [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                [element1, element2, element3].forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                    unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n                });\n            }\n            else {\n                if (Array.isArray(effect['bb elements'])) {\n                    attackElements = effect['bb elements'].slice();\n                }\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n                const entry = Object.assign({ id: 'proc:29', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData);\n                if (attackElements.length > 0) {\n                    entry.value.elements = attackElements;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let elements = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                elements = params\n                    .slice(0, 6)\n                    .filter((p) => p !== '0')\n                    .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n                turnDuration = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                if ('elements added' in effect) {\n                    if (Array.isArray(effect['elements added'])) {\n                        elements = effect['elements added'];\n                    }\n                    else {\n                        elements = [BuffConditionElement.Unknown];\n                    }\n                }\n                turnDuration = parseNumberOrDefault(effect['elements added turns']);\n            }\n            const results = [];\n            const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n            if (elements.length > 0) {\n                elements.forEach((inputElement) => {\n                    const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                    results.push(Object.assign({ id: `proc:30:${sanitizedElement}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration }, targetData));\n                });\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('increase bb gauge' in effect) {\n                    flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n                }\n                // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n                // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            const originalId = '32';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let element;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, ...extraParams] = splitEffectParams(effect);\n                if (rawElement && rawElement !== '0') {\n                    element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                const effectElement = effect['set attack element attribute'];\n                if (effectElement) {\n                    const sanitizedElement = Object.values(ELEMENT_MAPPING).find((e) => effectElement === e);\n                    if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                        element = sanitizedElement;\n                    }\n                    else {\n                        element = BuffConditionElement.Unknown;\n                    }\n                }\n            }\n            const results = [];\n            if (element) {\n                results.push(Object.assign({ id: `proc:32:${element}`, originalId,\n                    sources,\n                    effectDelay, value: true }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                chance = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(effect['clear buff chance%']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:33', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            const originalId = '34';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatDrainLow = 0, flatDrainHigh = 0;\n            let percentDrainLow = 0, percentDrainHigh = 0;\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n                flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n                flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n                percentDrainLow = parseNumberOrDefault(rawPercentLow);\n                percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n                flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n                percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n                percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n                chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n            }\n            const results = [];\n            if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:flat', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: flatDrainLow,\n                        drainHigh: flatDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:percent', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: percentDrainLow,\n                        drainHigh: percentDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'invalidate LS chance%',\n                effectTurnDurationKey: 'invalidate LS turns (60)',\n                buffId: 'proc:36',\n                originalId: '36',\n            });\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const positionX = parseNumberOrDefault(rawPositionX);\n            const positionY = parseNumberOrDefault(rawPositionY);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const results = [];\n            if (summonGroup || summonId) {\n                results.push(Object.assign({ id: 'proc:37', originalId,\n                    sources,\n                    effectDelay, value: {\n                        summonGroup,\n                        summonId,\n                        positionX,\n                        positionY,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('38', (effect, context, injectionContext) => {\n            const originalId = '38';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 9);\n                const extraParams = splitParams.slice(9);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else if (Array.isArray(effect['ailments cured'])) {\n                const effectAilmentsCured = effect['ailments cured'];\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                    if (effectAilmentsCured.includes(effectKey)) {\n                        curedAilments.push(ailment);\n                    }\n                });\n                if (effectAilmentsCured.length > curedAilments.length) {\n                    const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                    for (let i = 0; i < unknownAilmentCount; ++i) {\n                        curedAilments.push(Ailment.Unknown);\n                    }\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('39', (effect, context, injectionContext) => {\n            const originalId = '39';\n            const ELEMENT_MAPPING = {\n                1: UnitElement.Fire,\n                2: UnitElement.Water,\n                3: UnitElement.Earth,\n                4: UnitElement.Thunder,\n                5: UnitElement.Light,\n                6: UnitElement.Dark,\n            };\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const elements = [];\n            let mitigation = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                const rawElementsMitigated = params.slice(0, 6);\n                mitigation = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                rawElementsMitigated.forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        elements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                Object.values(ELEMENT_MAPPING).forEach((element) => {\n                    if (effect[`mitigate ${element} attacks`]) {\n                        elements.push(element);\n                    }\n                });\n                mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n                turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n            }\n            const results = [];\n            if (elements.length > 0) {\n                elements.forEach((element) => {\n                    results.push(Object.assign({ id: `proc:39:${element}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: mitigation }, targetData));\n                });\n            }\n            else if (mitigation !== 0) {\n                results.push(Object.assign({ id: 'proc:39:unknown', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                for (let index = 0; index < 8; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n                turnDuration = parseNumberOrDefault(params[8]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken% buff';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = `${ailment} buff`;\n                    }\n                    else {\n                        effectKey = `${ailment}% buff`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:${ailment}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: chance }, targetData)));\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    duration: turnDuration,\n                    buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:${a}`),\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const params = {\n                'atkLow%': rawModLow,\n                'atkHigh%': rawModHigh,\n                flatAtk: rawFlatAtk,\n            };\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:42', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            const originalId = '43';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let overdriveFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n                overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n            }\n            const results = [];\n            if (overdriveFill !== 0) {\n                results.push(Object.assign({ id: 'proc:43', originalId,\n                    sources,\n                    effectDelay, value: overdriveFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const damageParams = {\n                'atk%': '0',\n                flatAtk: '0',\n                'dmg%': '0',\n            };\n            let affectsElement = false, unitIndex = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n                [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n                unitIndex = parseNumberOrDefault(rawUnitIndex);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                damageParams['atk%'] = effect['dot atk%'];\n                damageParams.flatAtk = effect['dot flat atk'];\n                damageParams['dmg%'] = effect['dot dmg%'];\n                affectsElement = !!(effect['dot element affected']);\n                unitIndex = parseNumberOrDefault(effect['dot unit index']);\n                turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n            }\n            const filteredDamageParams = Object.entries(damageParams)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (Object.keys(filteredDamageParams).length > 0) {\n                results.push(Object.assign({ id: 'proc:44', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                        unitIndex }) }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:44'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('45', (effect, context, injectionContext) => {\n            const originalId = '45';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let bb = 0, sbb = 0, ubb = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                bb = parseNumberOrDefault(rawBb);\n                sbb = parseNumberOrDefault(rawSbb);\n                ubb = parseNumberOrDefault(rawUbb);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                bb = parseNumberOrDefault(effect['bb atk% buff']);\n                sbb = parseNumberOrDefault(effect['sbb atk% buff']);\n                ubb = parseNumberOrDefault(effect['ubb atk% buff']);\n                turnDuration = parseNumberOrDefault(effect['buff turns (72)']);\n            }\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:bb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:sbb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:ubb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: ubb }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:45:${type}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('46', (effect, context, injectionContext) => {\n            const originalId = '46';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawHpLow, rawHpHigh, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const hpLow = parseNumberOrDefault(rawHpLow);\n            const hpHigh = parseNumberOrDefault(rawHpHigh);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (hpLow !== 0 || hpHigh !== 0 || hits !== 0 || distribution !== 0) {\n                const entry = Object.assign({ id: 'proc:46', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (hpLow !== 0 || hpHigh !== 0) {\n                    entry.value = {\n                        'hpDamageLow%': hpLow,\n                        'hpDamageHigh%': hpHigh,\n                        hits,\n                        distribution,\n                    };\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('47', (effect, context, injectionContext) => {\n            const originalId = '47';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'baseAtk%': '0',\n                'addedAtk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let proportionalMode = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawMaxAttackValue, rawProportionalMode;\n                [params['baseAtk%'], rawMaxAttackValue, rawProportionalMode, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                params['addedAtk%'] = parseNumberOrDefault(rawMaxAttackValue) - parseNumberOrDefault(params['baseAtk%']);\n                proportionalMode = rawProportionalMode === '1' ? 'lost' : 'remaining';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['baseAtk%'] = effect['bb base atk%'];\n                params['addedAtk%'] = effect['bb added atk% based on hp'];\n                proportionalMode = effect['bb added atk% proportional to hp'] || 'unknown';\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:47', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { proportionalMode,\n                        hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('48', (effect, context, injectionContext) => {\n            const originalId = '48';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawBasePercentHpLow, rawBasePercentHpHigh, rawCurrentPercentHpLow, rawCurrentPercentHpHigh, rawFixedDamage, rawChance, rawIsLethal, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const basePercentHpLow = parseNumberOrDefault(rawBasePercentHpLow);\n            const basePercentHpHigh = parseNumberOrDefault(rawBasePercentHpHigh);\n            const currentPercentHpLow = parseNumberOrDefault(rawCurrentPercentHpLow);\n            const currentPercentHpHigh = parseNumberOrDefault(rawCurrentPercentHpHigh);\n            const fixedDamage = parseNumberOrDefault(rawFixedDamage);\n            const chance = parseNumberOrDefault(rawChance);\n            const isLethal = rawIsLethal === '1';\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            /**\n             * Current assumption is that each set of parameters results in a separate attack\n             * due to no known skills having more than one of each variant.\n             */\n            const results = [];\n            const createAttackOfType = (type, valueProperties) => (Object.assign({ id: `proc:48:${type}`, originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, valueProperties), { isLethal,\n                    chance,\n                    hits,\n                    distribution }) }, targetData));\n            if (basePercentHpLow !== 0 || basePercentHpHigh !== 0) {\n                results.push(createAttackOfType('base', {\n                    'hpDamageLow%': basePercentHpLow,\n                    'hpDamageHigh%': basePercentHpHigh,\n                }));\n            }\n            if (currentPercentHpLow !== 0 || currentPercentHpHigh !== 0) {\n                results.push(createAttackOfType('current', {\n                    'hpDamageLow%': currentPercentHpLow,\n                    'hpDamageHigh%': currentPercentHpHigh,\n                }));\n            }\n            if (fixedDamage !== 0) {\n                results.push(createAttackOfType('fixed', {\n                    value: fixedDamage,\n                }));\n            }\n            if (results.length === 0 && (hits !== 0 || distribution !== 0)) {\n                results.push(createAttackOfType('unknown', {}));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('49', (effect, context, injectionContext) => {\n            const originalId = '49';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawChance, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const chance = parseNumberOrDefault(rawChance);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:49', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('50', (effect, context, injectionContext) => {\n            const originalId = '50';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawDamageLow, rawDamageHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const reflectedDamageLow = parseNumberOrDefault(rawDamageLow);\n            const reflectedDamageHigh = parseNumberOrDefault(rawDamageHigh);\n            const chance = parseNumberOrDefault(rawChance);\n            const turnDuration = parseNumberOrDefault(rawTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const hasAnyRangeValues = reflectedDamageLow !== 0 || reflectedDamageHigh !== 0;\n            const results = [];\n            if (hasAnyRangeValues) {\n                results.push(Object.assign({ id: 'proc:50', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        'reflectedDamageLow%': reflectedDamageLow,\n                        'reflectedDamageHigh%': reflectedDamageHigh,\n                        chance,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:50'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('51', (effect, context, injectionContext) => {\n            const originalId = '51';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedReductions = [];\n            let debuffTurnDuration = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                [\n                    { type: Ailment.AttackReduction, reductionValue: parseNumberOrDefault(params[0]), chance: parseNumberOrDefault(params[3]) },\n                    { type: Ailment.DefenseReduction, reductionValue: parseNumberOrDefault(params[1]), chance: parseNumberOrDefault(params[4]) },\n                    { type: Ailment.RecoveryReduction, reductionValue: parseNumberOrDefault(params[2]), chance: parseNumberOrDefault(params[5]) },\n                ].forEach(({ type, reductionValue, chance }) => {\n                    if (reductionValue !== 0 || chance !== 0) {\n                        inflictedReductions.push({ type, reductionValue, chance });\n                    }\n                });\n                debuffTurnDuration = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                [\n                    { type: Ailment.AttackReduction, reductionValueKey: 'inflict atk% debuff (2)', chanceKey: 'inflict atk% debuff chance% (74)' },\n                    { type: Ailment.DefenseReduction, reductionValueKey: 'inflict def% debuff (4)', chanceKey: 'inflict def% debuff chance% (75)' },\n                    { type: Ailment.RecoveryReduction, reductionValueKey: 'inflict rec% debuff (6)', chanceKey: 'inflict rec% debuff chance% (76)' },\n                ].forEach(({ type, reductionValueKey, chanceKey }) => {\n                    const reductionValue = parseNumberOrDefault(effect[reductionValueKey]);\n                    const chance = parseNumberOrDefault(effect[chanceKey]);\n                    if (reductionValue !== 0 || chance !== 0) {\n                        inflictedReductions.push({ type, reductionValue, chance });\n                    }\n                });\n                debuffTurnDuration = parseNumberOrDefault(effect['stat% debuff turns']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedReductions.map(({ type, reductionValue, chance }) => (Object.assign({ id: `proc:51:${type}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                } }, targetData)));\n            if (results.length === 0 && (isTurnDurationBuff(context, turnDuration, injectionContext) || isTurnDurationBuff(context, debuffTurnDuration, injectionContext))) {\n                // manually create turn duration buff to account for debuff turn duration\n                results.push(Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n                    sources, value: {\n                        buffs: [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction].map((a) => `proc:51:${a}`),\n                        duration: turnDuration,\n                        debuffTurnDuration: debuffTurnDuration,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('52', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'bb gauge fill rate% buff',\n                effectTurnDurationKey: 'buff turns (77)',\n                buffId: 'proc:52',\n                originalId: '52',\n            });\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            const originalId = '53';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const inflictionChances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        inflictionChances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['counter inflict ailment turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(inflictionChances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:53:${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:53:${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('54', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'crit multiplier%',\n                effectTurnDurationKey: 'buff turns (84)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n                buffId: 'proc:54',\n                originalId: '54',\n            });\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given proc effect.\n     */\n    function defaultConversionFunction(effect, context) {\n        const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n                originalId: id,\n                effectDelay: effect['effect delay time(ms)/frame'],\n                targetType: effect['target type'],\n                targetArea: effect['target area'],\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given proc effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Proc effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given proc effect object.\n     */\n    function convertProcEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isProcEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction(effect, context);\n    }\n\n    let mapping$1;\n    function getConditionalEffectToBuffMapping(reload) {\n        if (!mapping$1 || reload) {\n            mapping$1 = new Map();\n            setMapping$1(mapping$1);\n        }\n        return mapping$1;\n    }\n    function setMapping$1(map) {\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, }) => ({\n            id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n            originalId,\n            sources,\n            value: unknownParams,\n        });\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                }));\n            }\n        };\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const [rawRecoverValue, ...extraParams] = effect.params.split('&');\n            const recoverValue = parseNumberOrDefault(rawRecoverValue);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [{\n                    id: 'buff:12:ko resistance',\n                    originalId,\n                    sources,\n                    duration: effect.turnDuration,\n                    value: recoverValue,\n                }];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n            });\n            return results;\n        });\n    }\n\n    function defaultConversionFunction$1(effect, context) {\n        const id = effect.id || KNOWN_CONDITIONAL_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given conditional effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Conditional effect to extract buffs from\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertConditionalEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const conversionFunction = getConditionalEffectToBuffMapping(context.reloadMapping).get(effect.id);\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$1(effect, context);\n    }\n\n    let mapping$2;\n    /**\n     * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of passive IDs to functions.\n     */\n    function getPassiveEffectToBuffMapping(reload) {\n        if (!mapping$2 || reload) {\n            mapping$2 = new Map();\n            setMapping$2(mapping$2);\n        }\n        return mapping$2;\n    }\n    /**\n     * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$2(map) {\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n            X: BuffConditionElement.OmniParadigm,\n        };\n        const TYPE_MAPPING = {\n            1: UnitType.Lord,\n            2: UnitType.Anima,\n            3: UnitType.Breaker,\n            4: UnitType.Guardian,\n            5: UnitType.Oracle,\n            6: UnitType.Rex,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n        const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n        const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n            const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            return { conditionInfo, targetData, sources };\n        };\n        const convertConditionalEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n            const conversionFunction = (injectionContext && injectionContext.convertConditionalEffectToBuffs) || convertConditionalEffectToBuffs;\n            return conversionFunction(effect, context);\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n            sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n        const createNoParamsEntry = ({ originalId, sources, }) => ({\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        });\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n        };\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        let ThresholdType;\n        (function (ThresholdType) {\n            ThresholdType[\"Hp\"] = \"hp\";\n            ThresholdType[\"Bb\"] = \"bb gauge\";\n        })(ThresholdType || (ThresholdType = {}));\n        const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n            return {\n                threshold: parseNumberOrDefault(rawThreshold),\n                requireAbove: rawRequireAboveFlag === '1',\n                type: thresholdType,\n            };\n        };\n        const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n            let threshold = 0, requireAbove = false;\n            if (`${thresholdType} above % ${suffix}` in effect) {\n                threshold = parseNumberOrDefault(effect[`${thresholdType} above % ${suffix}`]);\n                requireAbove = true;\n            }\n            else {\n                threshold = parseNumberOrDefault(effect[`${thresholdType} below % ${suffix}`]);\n                requireAbove = false;\n            }\n            return { threshold, requireAbove, type: thresholdType };\n        };\n        const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n            let conditions;\n            if (type === ThresholdType.Hp) {\n                if (requireAbove) {\n                    conditions = { hpGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { hpLessThanOrEqualTo: threshold };\n                }\n            }\n            else if (type === ThresholdType.Bb) {\n                if (requireAbove) {\n                    conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { bbGaugeLessThanOrEqualTo: threshold };\n                }\n            }\n            return conditions;\n        };\n        const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let value = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseParamValue(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect[effectKey]);\n            }\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let valueLow, valueHigh, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                valueLow = parseParamValue(rawLowValue);\n                valueHigh = parseParamValue(rawHighValue);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n                valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n                chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n            }\n            const results = [];\n            if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources, value: {\n                        [buffKeyLow]: valueLow,\n                        [buffKeyHigh]: valueHigh,\n                        chance,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                elements: [],\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let element1, element2;\n                [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                [element1, element2].forEach((elementValue) => {\n                    if (elementValue && elementValue !== '0') {\n                        stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                if (Array.isArray(typedEffect['elements buffed'])) {\n                    stats.elements = typedEffect['elements buffed'];\n                }\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId,\n                sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n            if (stats.elements.length > 0) {\n                stats.elements.forEach((element) => {\n                    STATS_ORDER.forEach((stat) => {\n                        const value = parseNumberOrDefault(stats[stat]);\n                        if (value !== 0) {\n                            results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                        }\n                    });\n                });\n            }\n            else {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                    }\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                unitType: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let unitType;\n                [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                if (unitType && unitType !== '0') {\n                    stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.unitType = typedEffect['unit type buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetUnitType = stats.unitType || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:3:${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:4:${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let element;\n            let mitigation = '0';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n                if (element !== BuffConditionElement.Unknown) {\n                    mitigation = typedEffect[`${element} resist%`];\n                }\n            }\n            const value = parseNumberOrDefault(mitigation);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:5:${element}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'dmg% mitigation',\n                buffId: 'passive:8',\n                originalId: '8',\n            });\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bc fill per turn',\n                buffId: 'passive:9',\n                originalId: '9',\n            });\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'hc effectiveness%',\n                buffId: 'passive:10',\n                originalId: '10',\n            });\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:11:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    const entry = Object.assign({ id: `passive:12:${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '13',\n                effectKeyLow: 'bc fill on enemy defeat low',\n                effectKeyHigh: 'bc fill on enemy defeat high',\n                effectKeyChance: 'bc fill on enemy defeat%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                buffId: 'passive:13',\n            });\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageReduction, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                damageReduction = parseNumberOrDefault(rawReduction);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n                chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n            }\n            const results = [];\n            if (damageReduction !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:14', originalId,\n                    sources, value: {\n                        value: damageReduction,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('15', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '15',\n                effectKeyLow: 'hp% recover on enemy defeat low',\n                effectKeyHigh: 'hp% recover on enemy defeat high',\n                effectKeyChance: 'hp% recover on enemy defeat chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                defaultEffectChance: 100,\n                buffId: 'passive:15',\n            });\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n                healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:16', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '17',\n                effectKeyLow: 'hp drain% low',\n                effectKeyHigh: 'hp drain% high',\n                effectKeyChance: 'hp drain chance%',\n                buffKeyLow: 'drainHealLow',\n                buffKeyHigh: 'drainHealHigh',\n                buffId: 'passive:17',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            const originalId = '19';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:19:${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const originalId = '20';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                let params = splitEffectParams(typedEffect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(typedEffect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = [];\n            inflictedAilments.forEach(({ ailment, chance }) => {\n                if (chance !== 0) {\n                    results.push(Object.assign({ id: `passive:20:${ailment}`, originalId,\n                        sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('21', (effect, context, injectionContext) => {\n            const originalId = '21';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let rawDuration, extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['first x turns atk% (1)'];\n                stats.def = typedEffect['first x turns def% (3)'];\n                stats.rec = typedEffect['first x turns rec% (5)'];\n                stats.crit = typedEffect['first x turns crit% (7)'];\n                turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:21:${stat}`, originalId,\n                        sources,\n                        value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let fillLow, fillHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n                fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n            }\n            const results = [];\n            if (fillLow !== 0 || fillHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:23', originalId,\n                    sources, value: {\n                        fillLow,\n                        fillHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '24',\n                effectKeyLow: 'dmg% to hp when attacked low',\n                effectKeyHigh: 'dmg% to hp when attacked high',\n                effectKeyChance: 'dmg% to hp when attacked chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:24',\n            });\n        });\n        map.set('25', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '25',\n                effectKeyLow: 'bc fill when attacked low',\n                effectKeyHigh: 'bc fill when attacked high',\n                effectKeyChance: 'bc fill when attacked%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:25',\n            });\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '26',\n                effectKeyLow: 'dmg% reflect low',\n                effectKeyHigh: 'dmg% reflect high',\n                effectKeyChance: 'dmg% reflect chance%',\n                buffKeyLow: 'damageReflectLow',\n                buffKeyHigh: 'damageReflectHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:26',\n            });\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'target% chance',\n                buffId: 'passive:27',\n                originalId: '27',\n            });\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let value = 0;\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseNumberOrDefault(rawValue);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect['target% chance']);\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n            }\n            const results = [];\n            if (value !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                const entry = Object.assign({ id: 'passive:28', originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'ignore def%',\n                buffId: 'passive:29',\n                originalId: '29',\n            });\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:30:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let sparkDamageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawSparkDamageBoost;\n                [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n                });\n            }\n            const results = [];\n            if (sparkDamageBoost !== 0) {\n                results.push(Object.assign({ id: 'passive:31:damage', originalId,\n                    sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:31:${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bb gauge fill rate%',\n                buffId: 'passive:32',\n                originalId: '32',\n            });\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh, addedRec;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n                healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n                addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:33', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                        'addedRec%': addedRec,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'crit multiplier%',\n                buffId: 'passive:34',\n                originalId: '34',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            });\n        });\n        map.set('35', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '35',\n                effectKeyLow: 'bc fill when attacking low',\n                effectKeyHigh: 'bc fill when attacking high',\n                effectKeyChance: 'bc fill when attacking%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onNormalAttack: true }),\n                buffId: 'passive:35',\n            });\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            const originalId = '36';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let additionalActions = 0, damageModifier = 0, chance = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                additionalActions = parseNumberOrDefault(rawAdditionalActions);\n                damageModifier = parseNumberOrDefault(rawDamageModifier);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n            }\n            const results = [];\n            if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:36', originalId,\n                    sources, value: {\n                        additionalActions,\n                        damageModifier,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let hitIncreasePerHit = 0, extraHitDamage = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'passive:37', originalId,\n                    sources, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawConvertedStat;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const rawConvertedStat = typedEffect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = `${statType}% buff`;\n                    if (effectKey in typedEffect) {\n                        stats[statType] = typedEffect[effectKey];\n                    }\n                });\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:40:${stat}`, originalId,\n                        sources, value: {\n                            convertedStat,\n                            value,\n                        }, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('41', (effect, context, injectionContext) => {\n            const originalId = '41';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                minimumElements: '0',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.minimumElements = typedEffect['unique elements required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const minimumElements = parseNumberOrDefault(stats.minimumElements);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:41:${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minumumUniqueElements: minimumElements }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const GENDER_MAPPING = {\n                0: UnitGender.Other,\n                1: UnitGender.Male,\n                2: UnitGender.Female,\n            };\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                gender: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawGender;\n                [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.gender = typedEffect['gender required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetGender = stats.gender || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:42:${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'take 1 dmg%',\n                buffId: 'passive:43',\n                originalId: '43',\n            });\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp buff'];\n                stats.atk = typedEffect['atk buff'];\n                stats.def = typedEffect['def buff'];\n                stats.rec = typedEffect['rec buff'];\n                stats.crit = typedEffect['crit buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:44:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('45', (effect, context, injectionContext) => {\n            const originalId = '45';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let baseResist = 0, buffResist = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n                baseResist = parseNumberOrDefault(rawBaseResist);\n                buffResist = parseNumberOrDefault(rawBuffResist);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                baseResist = parseNumberOrDefault(typedEffect['base crit% resist']);\n                buffResist = parseNumberOrDefault(typedEffect['buff crit% resist']);\n            }\n            const results = [];\n            if (baseResist !== 0) {\n                results.push(Object.assign({ id: 'passive:45:base', originalId,\n                    sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buffResist !== 0) {\n                results.push(Object.assign({ id: 'passive:45:buff', originalId,\n                    sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('46', (effect, context, injectionContext) => {\n            const originalId = '46';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const availableStats = ['atk', 'def', 'rec'];\n            const stats = [];\n            let proportionalMode = 'unknown';\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                availableStats.forEach((stat, index) => {\n                    const baseValue = parseNumberOrDefault(params[index * 2]);\n                    const addedValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                    if (baseValue !== 0 || addedValue !== 0) {\n                        stats.push({\n                            stat,\n                            baseValue,\n                            addedValue,\n                        });\n                    }\n                });\n                proportionalMode = params[6] === '1' ? 'lost' : 'remaining';\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                availableStats.forEach((stat) => {\n                    const baseValue = parseNumberOrDefault(typedEffect[`${stat}% base buff`]);\n                    const addedValue = parseNumberOrDefault(typedEffect[`${stat}% extra buff based on hp`]);\n                    if (baseValue !== 0 || addedValue !== 0) {\n                        stats.push({\n                            stat,\n                            baseValue,\n                            addedValue,\n                        });\n                    }\n                });\n                proportionalMode = typedEffect['buff proportional to hp'] || 'unknown';\n            }\n            const results = stats.map(({ stat, baseValue, addedValue }) => (Object.assign({ id: `passive:46:${stat}`, originalId,\n                sources, value: {\n                    baseValue,\n                    addedValue,\n                    proportionalMode,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('47', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '47',\n                effectKeyLow: 'bc fill on spark low',\n                effectKeyHigh: 'bc fill on spark high',\n                effectKeyChance: 'bc fill on spark%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'passive:47',\n            });\n        });\n        map.set('48', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'reduced bb bc cost%',\n                buffId: 'passive:48',\n                originalId: '48',\n            });\n        });\n        map.set('49', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '49',\n                effectKeyLow: 'reduced bb bc use% low',\n                effectKeyHigh: 'reduced bb bc use% high',\n                effectKeyChance: 'reduced bb bc use chance%',\n                buffKeyLow: 'reducedUseLow%',\n                buffKeyHigh: 'reducedUseHigh%',\n                buffId: 'passive:49',\n            });\n        });\n        map.set('50', (effect, context, injectionContext) => {\n            const originalId = '50';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let damageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                damageBoost = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`${element} units do extra elemental weakness dmg`]);\n                damageBoost = parseNumberOrDefault(typedEffect['elemental weakness multiplier%']);\n            }\n            let results = [];\n            if (damageBoost !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:50:${element}`, originalId,\n                    sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:50:unknown', originalId,\n                        sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            const originalId = '53';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let ResistType;\n            (function (ResistType) {\n                ResistType[\"CriticalDamage\"] = \"critical-damage\";\n                ResistType[\"ElementDamage\"] = \"element-damage\";\n                ResistType[\"CriticalHitRate\"] = \"critical-rate\";\n            })(ResistType || (ResistType = {}));\n            const resistances = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseCritChanceResist, rawBuffCritChanceResist, ...extraParams] = splitEffectParams(typedEffect);\n                [\n                    { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                    { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                    { resistType: ResistType.CriticalHitRate, base: parseNumberOrDefault(rawBaseCritChanceResist), buff: parseNumberOrDefault(rawBuffCritChanceResist) },\n                ].forEach(({ resistType, base, buff }) => {\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                [\n                    { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist%', buffKey: 'crit dmg buffed damage resist%' },\n                    { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist%', buffKey: 'strong buffed element damage resist%' },\n                    { resistType: ResistType.CriticalHitRate, baseKey: 'crit chance base resist%', buffKey: 'crit chance buffed resist%' },\n                ].forEach(({ resistType, baseKey, buffKey }) => {\n                    const base = parseNumberOrDefault(typedEffect[baseKey]);\n                    const buff = parseNumberOrDefault(typedEffect[buffKey]);\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n            }\n            const results = [];\n            resistances.forEach(({ resistType, base, buff }) => {\n                if (base !== 0) {\n                    results.push(Object.assign({ id: `passive:53:${resistType}-base`, originalId,\n                        sources, value: base, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n                if (buff !== 0) {\n                    results.push(Object.assign({ id: `passive:53:${resistType}-buff`, originalId,\n                        sources, value: buff, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('55', (effect, context, injectionContext) => {\n            const originalId = '55';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const params = splitEffectParams(typedEffect);\n            const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                id: params[0],\n                params: params[1],\n                turnDuration: parseNumberOrDefault(params[5]),\n            }, context, injectionContext);\n            const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], params[4], ThresholdType.Hp);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(['0,0', params[2], '0,0', ...params.slice(5)], 0, injectionContext);\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            const results = [];\n            if (triggeredBuffs.length > 0) {\n                results.push(Object.assign({ id: 'passive:55:hp condition', originalId,\n                    sources, value: triggeredBuffs, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given passive effect.\n     */\n    function defaultConversionFunction$2(effect, context) {\n        const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given passive effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Passive effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertPassiveEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isPassiveEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$2(effect, context);\n    }\n\n    const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'TURN_DURATION_MODIFICATION': {\n            id: BuffId.TURN_DURATION_MODIFICATION,\n            name: 'Passive Turn Duration Modification',\n            stat: UnitStat.turnDurationModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [\n                (buff && buff.value &&\n                    buff.value.duration &&\n                    buff.value.duration < 0) ?\n                    IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n            ],\n        }, 'NO_PARAMS_SPECIFIED': {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            name: 'No Parameters Specified',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PASSIVE_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            name: 'Unknown Passive Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n            name: 'Unknown Passive Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'passive:1:hp': {\n            id: BuffId['passive:1:hp'],\n            name: 'Passive HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:1:atk': {\n            id: BuffId['passive:1:atk'],\n            name: 'Passive Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:1:def': {\n            id: BuffId['passive:1:def'],\n            name: 'Passive Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:1:rec': {\n            id: BuffId['passive:1:rec'],\n            name: 'Passive Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:1:crit': {\n            id: BuffId['passive:1:crit'],\n            name: 'Passive Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        } }, (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:2:hp': {\n                id: BuffId['passive:2:hp'],\n                name: 'Passive Elemental HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:2:atk': {\n                id: BuffId['passive:2:atk'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:2:def': {\n                id: BuffId['passive:2:def'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:2:rec': {\n                id: BuffId['passive:2:rec'],\n                name: 'Passive Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:2:crit': {\n                id: BuffId['passive:2:crit'],\n                name: 'Passive Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let unitType = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        unitType = buff.conditions.targetUnitType || '';\n                    }\n                }\n                if (typeof unitType !== 'string' || !unitType) {\n                    unitType = 'unknown';\n                }\n                let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n                if (!unitType || !(iconKey in IconId)) {\n                    iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:3:hp': {\n                id: BuffId['passive:3:hp'],\n                name: 'Passive Type-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:3:atk': {\n                id: BuffId['passive:3:atk'],\n                name: 'Passive Type-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:3:def': {\n                id: BuffId['passive:3:def'],\n                name: 'Passive Type-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:3:rec': {\n                id: BuffId['passive:3:rec'],\n                name: 'Passive Type-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:3:crit': {\n                id: BuffId['passive:3:crit'],\n                name: 'Passive Type-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:4:poison': {\n            id: BuffId['passive:4:poison'],\n            name: 'Passive Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:4:weak': {\n            id: BuffId['passive:4:weak'],\n            name: 'Passive Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:4:sick': {\n            id: BuffId['passive:4:sick'],\n            name: 'Passive Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:4:injury': {\n            id: BuffId['passive:4:injury'],\n            name: 'Passive Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:4:curse': {\n            id: BuffId['passive:4:curse'],\n            name: 'Passive Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:4:paralysis': {\n            id: BuffId['passive:4:paralysis'],\n            name: 'Passive Paralysis Resist',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:5:fire': {\n            id: BuffId['passive:5:fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:5:water': {\n            id: BuffId['passive:5:water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:5:earth': {\n            id: BuffId['passive:5:earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:5:thunder': {\n            id: BuffId['passive:5:thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:5:light': {\n            id: BuffId['passive:5:light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:5:dark': {\n            id: BuffId['passive:5:dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:5:unknown': {\n            id: BuffId['passive:5:unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:8': {\n            id: BuffId['passive:8'],\n            name: 'Passive Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:9': {\n            id: BuffId['passive:9'],\n            name: 'Passive Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:10': {\n            id: BuffId['passive:10'],\n            name: 'Passive HC Efficacy',\n            stat: UnitStat.hcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HCREC],\n        }, 'passive:11:atk': {\n            id: BuffId['passive:11:atk'],\n            name: 'Passive HP-Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n        }, 'passive:11:def': {\n            id: BuffId['passive:11:def'],\n            name: 'Passive HP-Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n        }, 'passive:11:rec': {\n            id: BuffId['passive:11:rec'],\n            name: 'Passive HP-Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n        }, 'passive:11:crit': {\n            id: BuffId['passive:11:crit'],\n            name: 'Passive HP-Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n        }, 'passive:12:bc': {\n            id: BuffId['passive:12:bc'],\n            name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n        }, 'passive:12:hc': {\n            id: BuffId['passive:12:hc'],\n            name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n        }, 'passive:12:item': {\n            id: BuffId['passive:12:item'],\n            name: 'Passive HP-Conditional Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n        }, 'passive:12:zel': {\n            id: BuffId['passive:12:zel'],\n            name: 'Passive HP-Conditional Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n        }, 'passive:12:karma': {\n            id: BuffId['passive:12:karma'],\n            name: 'Passive HP-Conditional Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n        }, 'passive:13': {\n            id: BuffId['passive:13'],\n            name: 'Passive BC Fill on Enemy Defeat',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:14': {\n            id: BuffId['passive:14'],\n            name: 'Passive Damage Reduction (Chance)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:15': {\n            id: BuffId['passive:15'],\n            name: 'Passive Heal on Enemy Defeat',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:16': {\n            id: BuffId['passive:16'],\n            name: 'Passive Heal on Battle Win',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:17': {\n            id: BuffId['passive:17'],\n            name: 'HP Absorption',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPABS],\n        }, 'passive:19:bc': {\n            id: BuffId['passive:19:bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'passive:19:hc': {\n            id: BuffId['passive:19:hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'passive:19:item': {\n            id: BuffId['passive:19:item'],\n            name: 'Passive Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'passive:19:zel': {\n            id: BuffId['passive:19:zel'],\n            name: 'Passive Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n        }, 'passive:19:karma': {\n            id: BuffId['passive:19:karma'],\n            name: 'Passive Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n        }, 'passive:20:poison': {\n            id: BuffId['passive:20:poison'],\n            name: 'Passive Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'passive:20:weak': {\n            id: BuffId['passive:20:weak'],\n            name: 'Passive Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'passive:20:sick': {\n            id: BuffId['passive:20:sick'],\n            name: 'Passive Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'passive:20:injury': {\n            id: BuffId['passive:20:injury'],\n            name: 'Passive Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'passive:20:curse': {\n            id: BuffId['passive:20:curse'],\n            name: 'Passive Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'passive:20:paralysis': {\n            id: BuffId['passive:20:paralysis'],\n            name: 'Passive Paralysis Infliction',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'passive:20:atk down': {\n            id: BuffId['passive:20:atk down'],\n            name: 'Passive Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'passive:20:def down': {\n            id: BuffId['passive:20:def down'],\n            name: 'Passive Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'passive:20:rec down': {\n            id: BuffId['passive:20:rec down'],\n            name: 'Passive Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'passive:20:unknown': {\n            id: BuffId['passive:20:unknown'],\n            name: 'Passive Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'passive:21:atk': {\n            id: BuffId['passive:21:atk'],\n            name: 'Attack Boost for X Turns',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:21:def': {\n            id: BuffId['passive:21:def'],\n            name: 'Defense Boost for X Turns',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:21:rec': {\n            id: BuffId['passive:21:rec'],\n            name: 'Recovery Boost for X Turns',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:21:crit': {\n            id: BuffId['passive:21:crit'],\n            name: 'Critical Hit Rate Boost for X Turns',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:23': {\n            id: BuffId['passive:23'],\n            name: 'Passive BC Fill on Battle Win',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:24': {\n            id: BuffId['passive:24'],\n            name: 'Passive Heal when Attacked',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'passive:25': {\n            id: BuffId['passive:25'],\n            name: 'Passive BC Fill when Attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:26': {\n            id: BuffId['passive:26'],\n            name: 'Passive Damage Counter (Chance)',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'passive:27': {\n            id: BuffId['passive:27'],\n            name: 'Passive Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n        }, 'passive:28': {\n            id: BuffId['passive:28'],\n            name: 'Passive HP-Conditional Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n        }, 'passive:29': {\n            id: BuffId['passive:29'],\n            name: 'Passive Defense Ignore (Chance)',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'passive:30:atk': {\n            id: BuffId['passive:30:atk'],\n            name: 'Passive BB Gauge Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n        }, 'passive:30:def': {\n            id: BuffId['passive:30:def'],\n            name: 'Passive BB Gauge Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n        }, 'passive:30:rec': {\n            id: BuffId['passive:30:rec'],\n            name: 'Passive BB Gauge Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n        }, 'passive:30:crit': {\n            id: BuffId['passive:30:crit'],\n            name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n        }, 'passive:31:damage': {\n            id: BuffId['passive:31:damage'],\n            name: 'Passive Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'passive:31:bc': {\n            id: BuffId['passive:31:bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n        }, 'passive:31:hc': {\n            id: BuffId['passive:31:hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n        }, 'passive:31:item': {\n            id: BuffId['passive:31:item'],\n            name: 'Passive Item Drop Rate Boost during Spark',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n        }, 'passive:31:zel': {\n            id: BuffId['passive:31:zel'],\n            name: 'Passive Zel Drop Rate Boost during Spark',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n        }, 'passive:31:karma': {\n            id: BuffId['passive:31:karma'],\n            name: 'Passive Karma Drop Rate Boost during Spark',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n        }, 'passive:32': {\n            id: BuffId['passive:32'],\n            name: 'Passive BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'passive:33': {\n            id: BuffId['passive:33'],\n            name: 'Passive Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:34': {\n            id: BuffId['passive:34'],\n            name: 'Passive Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'passive:35': {\n            id: BuffId['passive:35'],\n            name: 'Passive BC Fill when Normal Attacking',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:36': {\n            id: BuffId['passive:36'],\n            name: 'Passive Extra Action',\n            stat: UnitStat.extraAction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DBLSTRIKE],\n        }, 'passive:37': {\n            id: BuffId['passive:37'],\n            name: 'Passive Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'passive:40:atk': {\n            id: BuffId['passive:40:atk'],\n            name: 'Passive Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'passive:40:def': {\n            id: BuffId['passive:40:def'],\n            name: 'Passive Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'passive:40:rec': {\n            id: BuffId['passive:40:rec'],\n            name: 'Passive Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'passive:41:hp': {\n            id: BuffId['passive:41:hp'],\n            name: 'Passive Element Squad-based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n        }, 'passive:41:atk': {\n            id: BuffId['passive:41:atk'],\n            name: 'Passive Element Squad-based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n        }, 'passive:41:def': {\n            id: BuffId['passive:41:def'],\n            name: 'Passive Element Squad-based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n        }, 'passive:41:rec': {\n            id: BuffId['passive:41:rec'],\n            name: 'Passive Element Squad-based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n        }, 'passive:41:crit': {\n            id: BuffId['passive:41:crit'],\n            name: 'Passive Element Squad-based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let gender = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        gender = buff.conditions.targetGender || '';\n                    }\n                }\n                if (typeof gender !== 'string' || !gender) {\n                    gender = 'unknown';\n                }\n                let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n                if (!gender || !(iconKey in IconId)) {\n                    iconKey = `BUFF_GENDER${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:42:hp': {\n                id: BuffId['passive:42:hp'],\n                name: 'Passive Gender-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:42:atk': {\n                id: BuffId['passive:42:atk'],\n                name: 'Passive Gender-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:42:def': {\n                id: BuffId['passive:42:def'],\n                name: 'Passive Gender-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:42:rec': {\n                id: BuffId['passive:42:rec'],\n                name: 'Passive Gender-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:42:crit': {\n                id: BuffId['passive:42:crit'],\n                name: 'Passive Gender-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:43': {\n            id: BuffId['passive:43'],\n            name: 'Passive Damage Reduction To One (Chance)',\n            stat: UnitStat.reduceDamageToOne,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n        }, 'passive:44:hp': {\n            id: BuffId['passive:44:hp'],\n            name: 'Passive Flat HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:44:atk': {\n            id: BuffId['passive:44:atk'],\n            name: 'Passive Flat Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:44:def': {\n            id: BuffId['passive:44:def'],\n            name: 'Passive Flat Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:44:rec': {\n            id: BuffId['passive:44:rec'],\n            name: 'Passive Flat Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:44:crit': {\n            id: BuffId['passive:44:crit'],\n            name: 'Passive Flat Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:45:base': {\n            id: BuffId['passive:45:base'],\n            name: 'Passive Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:45:buff': {\n            id: BuffId['passive:45:buff'],\n            name: 'Passive Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:46:atk': {\n            id: BuffId['passive:46:atk'],\n            name: 'Passive Attack Boost Relative to HP',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDATKDOWN : IconId.BUFF_HPSCALEDATKUP],\n        }, 'passive:46:def': {\n            id: BuffId['passive:46:def'],\n            name: 'Passive Defense Boost Relative to HP',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDDEFDOWN : IconId.BUFF_HPSCALEDDEFUP],\n        }, 'passive:46:rec': {\n            id: BuffId['passive:46:rec'],\n            name: 'Passive Recovery Boost Relative to HP',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDRECDOWN : IconId.BUFF_HPSCALEDRECUP],\n        }, 'passive:47': {\n            id: BuffId['passive:47'],\n            name: 'Passive BC Fill on Spark',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKBBUP],\n        }, 'passive:48': {\n            id: BuffId['passive:48'],\n            name: 'Passive BC Cost Reduction',\n            stat: UnitStat.bcCostReduction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBCOST_REDUCTION],\n        }, 'passive:49': {\n            id: BuffId['passive:49'],\n            name: 'Passive BB Gauge Consumption Reduction',\n            stat: UnitStat.bbGaugeConsumptionReduction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:50:fire': {\n            id: BuffId['passive:50:fire'],\n            name: 'Passive Fire Elemental Damage Boost',\n            stat: UnitStat.fireElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGUP],\n        }, 'passive:50:water': {\n            id: BuffId['passive:50:water'],\n            name: 'Passive Water Elemental Damage Boost',\n            stat: UnitStat.waterElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGUP],\n        }, 'passive:50:earth': {\n            id: BuffId['passive:50:earth'],\n            name: 'Passive Earth Elemental Damage Boost',\n            stat: UnitStat.earthElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGUP],\n        }, 'passive:50:thunder': {\n            id: BuffId['passive:50:thunder'],\n            name: 'Passive Thunder Elemental Damage Boost',\n            stat: UnitStat.thunderElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGUP],\n        }, 'passive:50:light': {\n            id: BuffId['passive:50:light'],\n            name: 'Passive Light Elemental Damage Boost',\n            stat: UnitStat.lightElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGUP],\n        }, 'passive:50:dark': {\n            id: BuffId['passive:50:dark'],\n            name: 'Passive Dark Elemental Damage Boost',\n            stat: UnitStat.darkElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGUP],\n        }, 'passive:50:unknown': {\n            id: BuffId['passive:50:unknown'],\n            name: 'Passive Elemental Damage Boost (Unspecified Element)',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGUP],\n        }, 'passive:53:critical-damage-base': {\n            id: BuffId['passive:53:critical-damage-base'],\n            name: 'Passive Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:critical-damage-buff': {\n            id: BuffId['passive:53:critical-damage-buff'],\n            name: 'Passive Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:element-damage-base': {\n            id: BuffId['passive:53:element-damage-base'],\n            name: 'Passive Base Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'passive:53:element-damage-buff': {\n            id: BuffId['passive:53:element-damage-buff'],\n            name: 'Passive Buffed Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'passive:53:critical-rate-base': {\n            id: BuffId['passive:53:critical-rate-base'],\n            name: 'Passive Base Critical Hit Rate Reduction',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:critical-rate-buff': {\n            id: BuffId['passive:53:critical-rate-buff'],\n            name: 'Passive Buffed Critical Hit Rate Reduction',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:55:hp condition': {\n            id: BuffId['passive:55:hp condition'],\n            name: 'Passive Conditional Effect based on HP Threshold',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'UNKNOWN_PROC_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            name: 'Unknown Proc Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n            name: 'Unknown Proc Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'proc:1': {\n            id: BuffId['proc:1'],\n            name: 'Regular Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:2': {\n            id: BuffId['proc:2'],\n            name: 'Burst Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:3': {\n            id: BuffId['proc:3'],\n            name: 'Active Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:4:flat': {\n            id: BuffId['proc:4:flat'],\n            name: 'Burst BC Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:4:percent': {\n            id: BuffId['proc:4:percent'],\n            name: 'Burst BC Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:5:atk': {\n                id: BuffId['proc:5:atk'],\n                name: 'Active Regular/Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:5:def': {\n                id: BuffId['proc:5:def'],\n                name: 'Active Regular/Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:5:rec': {\n                id: BuffId['proc:5:rec'],\n                name: 'Active Regular/Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:5:crit': {\n                id: BuffId['proc:5:crit'],\n                name: 'Active Regular/Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'proc:6:bc': {\n            id: BuffId['proc:6:bc'],\n            name: 'Active Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'proc:6:hc': {\n            id: BuffId['proc:6:hc'],\n            name: 'Active Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'proc:6:item': {\n            id: BuffId['proc:6:item'],\n            name: 'Active Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'proc:7': {\n            id: BuffId['proc:7'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:8:flat': {\n            id: BuffId['proc:8:flat'],\n            name: 'Max HP Boost (Flat Amount)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        }, 'proc:8:percent': {\n            id: BuffId['proc:8:percent'],\n            name: 'Max HP Boost (Percentage)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'DOWN'; // default to down since these are reduction buffs\n                if (buff) {\n                    if (buff.value && buff.value > 0) {\n                        polarity = 'UP';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:9:atk': {\n                id: BuffId['proc:9:atk'],\n                name: 'Active Regular/Elemental Attack Reduction',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:9:def': {\n                id: BuffId['proc:9:def'],\n                name: 'Active Regular/Elemental Defense Reduction',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:9:rec': {\n                id: BuffId['proc:9:rec'],\n                name: 'Active Regular/Elemental Recovery Reduction',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:9:unknown': {\n                id: BuffId['proc:9:unknown'],\n                name: 'Active Regular/Elemental Unknown Stat Reduction',\n                stackType: BuffStackType.Active,\n                icons: () => [IconId.UNKNOWN],\n            },\n        };\n    })()), { 'proc:10:poison': {\n            id: BuffId['proc:10:poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:10:weak': {\n            id: BuffId['proc:10:weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:10:sick': {\n            id: BuffId['proc:10:sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:10:injury': {\n            id: BuffId['proc:10:injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:10:curse': {\n            id: BuffId['proc:10:curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:10:paralysis': {\n            id: BuffId['proc:10:paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:10:atk down': {\n            id: BuffId['proc:10:atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWNBLK],\n        }, 'proc:10:def down': {\n            id: BuffId['proc:10:def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWNBLK],\n        }, 'proc:10:rec down': {\n            id: BuffId['proc:10:rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWNBLK],\n        }, 'proc:10:unknown': {\n            id: BuffId['proc:10:unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:11:poison': {\n            id: BuffId['proc:11:poison'],\n            name: 'Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_POISON],\n        }, 'proc:11:weak': {\n            id: BuffId['proc:11:weak'],\n            name: 'Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_WEAK],\n        }, 'proc:11:sick': {\n            id: BuffId['proc:11:sick'],\n            name: 'Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_SICK],\n        }, 'proc:11:injury': {\n            id: BuffId['proc:11:injury'],\n            name: 'Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_INJURY],\n        }, 'proc:11:curse': {\n            id: BuffId['proc:11:curse'],\n            name: 'Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_CURSE],\n        }, 'proc:11:paralysis': {\n            id: BuffId['proc:11:paralysis'],\n            name: 'Paralysis Infliction',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_PARALYSIS],\n        }, 'proc:11:atk down': {\n            id: BuffId['proc:11:atk down'],\n            name: 'Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWN],\n        }, 'proc:11:def down': {\n            id: BuffId['proc:11:def down'],\n            name: 'Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWN],\n        }, 'proc:11:rec down': {\n            id: BuffId['proc:11:rec down'],\n            name: 'Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWN],\n        }, 'proc:11:unknown': {\n            id: BuffId['proc:11:unknown'],\n            name: 'Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.DEBUFF_AILMENT],\n        }, 'proc:12': {\n            id: BuffId['proc:12'],\n            name: 'Instant Revive (Guaranteed)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:13': {\n            id: BuffId['proc:13'],\n            name: 'Random Target Damage',\n            stackType: BuffStackType.Attack,\n            icons: () => [IconId.ATK_RT],\n        }, 'proc:14': {\n            id: BuffId['proc:14'],\n            name: 'Lifesteal Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n        }, 'proc:16:fire': {\n            id: BuffId['proc:16:fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:16:water': {\n            id: BuffId['proc:16:water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:16:earth': {\n            id: BuffId['proc:16:earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:16:thunder': {\n            id: BuffId['proc:16:thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:16:light': {\n            id: BuffId['proc:16:light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:16:dark': {\n            id: BuffId['proc:16:dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:16:all': {\n            id: BuffId['proc:16:all'],\n            name: 'Active Elemental Damage Reduction (All Elements)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:16:unknown': {\n            id: BuffId['proc:16:unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:17:poison': {\n            id: BuffId['proc:17:poison'],\n            name: 'Active Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:17:weak': {\n            id: BuffId['proc:17:weak'],\n            name: 'Active Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:17:sick': {\n            id: BuffId['proc:17:sick'],\n            name: 'Active Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:17:injury': {\n            id: BuffId['proc:17:injury'],\n            name: 'Active Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:17:curse': {\n            id: BuffId['proc:17:curse'],\n            name: 'Active Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:17:paralysis': {\n            id: BuffId['proc:17:paralysis'],\n            name: 'Active Paralysis Resist',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:18': {\n            id: BuffId['proc:18'],\n            name: 'Active Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'proc:19': {\n            id: BuffId['proc:19'],\n            name: 'Active Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:20': {\n            id: BuffId['proc:20'],\n            name: 'Active BC Fill when attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'proc:22': {\n            id: BuffId['proc:22'],\n            name: 'Active Defense Ignore',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'proc:23': {\n            id: BuffId['proc:23'],\n            name: 'Active Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'proc:24:atk': {\n            id: BuffId['proc:24:atk'],\n            name: 'Active Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'proc:24:def': {\n            id: BuffId['proc:24:def'],\n            name: 'Active Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'proc:24:rec': {\n            id: BuffId['proc:24:rec'],\n            name: 'Active Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'proc:26': {\n            id: BuffId['proc:26'],\n            name: 'Active Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'proc:27': {\n            id: BuffId['proc:27'],\n            name: 'Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:28': {\n            id: BuffId['proc:28'],\n            name: 'Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n        }, 'proc:29': {\n            id: BuffId['proc:29'],\n            name: 'Multi-Element Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n        }, 'proc:30:fire': {\n            id: BuffId['proc:30:fire'],\n            name: 'Active Added Element to Attack (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDFIRE],\n        }, 'proc:30:water': {\n            id: BuffId['proc:30:water'],\n            name: 'Active Added Element to Attack (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWATER],\n        }, 'proc:30:earth': {\n            id: BuffId['proc:30:earth'],\n            name: 'Active Added Element to Attack (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDEARTH],\n        }, 'proc:30:thunder': {\n            id: BuffId['proc:30:thunder'],\n            name: 'Active Added Element to Attack (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDTHUNDER],\n        }, 'proc:30:light': {\n            id: BuffId['proc:30:light'],\n            name: 'Active Added Element to Attack (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDLIGHT],\n        }, 'proc:30:dark': {\n            id: BuffId['proc:30:dark'],\n            name: 'Active Added Element to Attack (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDARK],\n        }, 'proc:30:unknown': {\n            id: BuffId['proc:30:unknown'],\n            name: 'Active Added Element to Attack (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDELEMENT],\n        }, 'proc:31:flat': {\n            id: BuffId['proc:31:flat'],\n            name: 'Burst BC Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:31:percent': {\n            id: BuffId['proc:31:percent'],\n            name: 'Burst BC Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:32:fire': {\n            id: BuffId['proc:32:fire'],\n            name: 'Element Shift (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTFIRE],\n        }, 'proc:32:water': {\n            id: BuffId['proc:32:water'],\n            name: 'Element Shift (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTWATER],\n        }, 'proc:32:earth': {\n            id: BuffId['proc:32:earth'],\n            name: 'Element Shift (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTEARTH],\n        }, 'proc:32:thunder': {\n            id: BuffId['proc:32:thunder'],\n            name: 'Element Shift (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTTHUNDER],\n        }, 'proc:32:light': {\n            id: BuffId['proc:32:light'],\n            name: 'Element Shift (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTLIGHT],\n        }, 'proc:32:dark': {\n            id: BuffId['proc:32:dark'],\n            name: 'Element Shift (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTDARK],\n        }, 'proc:32:unknown': {\n            id: BuffId['proc:32:unknown'],\n            name: 'Element Shift (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTELEMENT],\n        }, 'proc:33': {\n            id: BuffId['proc:33'],\n            name: 'Buff Removal',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_REMOVEBUFF],\n        }, 'proc:34:flat': {\n            id: BuffId['proc:34:flat'],\n            name: 'Burst BB Gauge Drain (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:34:percent': {\n            id: BuffId['proc:34:percent'],\n            name: 'Burst BB Gauge Drain (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:36': {\n            id: BuffId['proc:36'],\n            name: 'Active Leader Skill Lock',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DISABLELS],\n        }, 'proc:37': {\n            id: BuffId['proc:37'],\n            name: 'Summon Unit',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SUMMONUNIT],\n        }, 'proc:38:poison': {\n            id: BuffId['proc:38:poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:38:weak': {\n            id: BuffId['proc:38:weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:38:sick': {\n            id: BuffId['proc:38:sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:38:injury': {\n            id: BuffId['proc:38:injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:38:curse': {\n            id: BuffId['proc:38:curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:38:paralysis': {\n            id: BuffId['proc:38:paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:38:atk down': {\n            id: BuffId['proc:38:atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWNBLK],\n        }, 'proc:38:def down': {\n            id: BuffId['proc:38:def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWNBLK],\n        }, 'proc:38:rec down': {\n            id: BuffId['proc:38:rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWNBLK],\n        }, 'proc:38:unknown': {\n            id: BuffId['proc:38:unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:39:fire': {\n            id: BuffId['proc:39:fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:39:water': {\n            id: BuffId['proc:39:water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:39:earth': {\n            id: BuffId['proc:39:earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:39:thunder': {\n            id: BuffId['proc:39:thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:39:light': {\n            id: BuffId['proc:39:light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:39:dark': {\n            id: BuffId['proc:39:dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:39:unknown': {\n            id: BuffId['proc:39:unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:40:poison': {\n            id: BuffId['proc:40:poison'],\n            name: 'Active Poison Infliction Added to Attack',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'proc:40:weak': {\n            id: BuffId['proc:40:weak'],\n            name: 'Active Weak Infliction Added to Attack',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'proc:40:sick': {\n            id: BuffId['proc:40:sick'],\n            name: 'Active Sick Infliction Added to Attack',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'proc:40:injury': {\n            id: BuffId['proc:40:injury'],\n            name: 'Active Injury Infliction Added to Attack',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'proc:40:curse': {\n            id: BuffId['proc:40:curse'],\n            name: 'Active Curse Infliction Added to Attack',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'proc:40:paralysis': {\n            id: BuffId['proc:40:paralysis'],\n            name: 'Active Paralysis Infliction Added to Attack',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'proc:40:atk down': {\n            id: BuffId['proc:40:atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:40:def down': {\n            id: BuffId['proc:40:def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:40:rec down': {\n            id: BuffId['proc:40:rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:40:unknown': {\n            id: BuffId['proc:40:unknown'],\n            name: 'Active Unknown Ailment Infliction Added to Attack',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'proc:42': {\n            id: BuffId['proc:42'],\n            name: 'Sacrificial Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n        }, 'proc:43': {\n            id: BuffId['proc:43'],\n            name: 'Burst OD Gauge Fill (Percentage)',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_OVERDRIVEUP],\n        }, 'proc:44': {\n            id: BuffId['proc:44'],\n            name: 'Active Damage over Time',\n            stat: UnitStat.damageOverTime,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_TURNDMG],\n        }, 'proc:45:bb': {\n            id: BuffId['proc:45:bb'],\n            name: 'Active BB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'proc:45:sbb': {\n            id: BuffId['proc:45:sbb'],\n            name: 'Active SBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'proc:45:ubb': {\n            id: BuffId['proc:45:ubb'],\n            name: 'Active UBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'proc:46': {\n            id: BuffId['proc:46'],\n            name: 'Non-Lethal Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:47': {\n            id: BuffId['proc:47'],\n            name: 'HP Scaled Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPSCALED : IconId.ATK_AOE_HPSCALED],\n        }, 'proc:48:base': {\n            id: BuffId['proc:48:base'],\n            name: 'Piercing Proportional Damage (Base HP)',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n        }, 'proc:48:current': {\n            id: BuffId['proc:48:current'],\n            name: 'Piercing Proportional Damage (Current HP)',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n        }, 'proc:48:fixed': {\n            id: BuffId['proc:48:fixed'],\n            name: 'Piercing Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_FIXED : IconId.ATK_AOE_PIERCING_FIXED],\n        }, 'proc:48:unknown': {\n            id: BuffId['proc:48:unknown'],\n            name: 'Unknown Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:49': {\n            id: BuffId['proc:49'],\n            name: 'Instant Death (Chance)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KO],\n        }, 'proc:50': {\n            id: BuffId['proc:50'],\n            name: 'Active Damage Reflect (Chance)',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'proc:51:atk down': {\n            id: BuffId['proc:51:atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:51:def down': {\n            id: BuffId['proc:51:def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:51:rec down': {\n            id: BuffId['proc:51:rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:52': {\n            id: BuffId['proc:52'],\n            name: 'Active BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'proc:53:poison': {\n            id: BuffId['proc:53:poison'],\n            name: 'Active Poison Counter',\n            stat: UnitStat.poisonCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONCOUNTER],\n        }, 'proc:53:weak': {\n            id: BuffId['proc:53:weak'],\n            name: 'Active Weak Counter',\n            stat: UnitStat.weakCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKCOUNTER],\n        }, 'proc:53:sick': {\n            id: BuffId['proc:53:sick'],\n            name: 'Active Sick Counter',\n            stat: UnitStat.sickCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKCOUNTER],\n        }, 'proc:53:injury': {\n            id: BuffId['proc:53:injury'],\n            name: 'Active Injury Counter',\n            stat: UnitStat.injuryCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJCONTER],\n        }, 'proc:53:curse': {\n            id: BuffId['proc:53:curse'],\n            name: 'Active Curse Counter',\n            stat: UnitStat.curseCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSECOUNTER],\n        }, 'proc:53:paralysis': {\n            id: BuffId['proc:53:paralysis'],\n            name: 'Active Paralysis Counter',\n            stat: UnitStat.paralysisCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYCOUNTER],\n        }, 'proc:54': {\n            id: BuffId['proc:54'],\n            name: 'Active Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'UNKNOWN_CONDITIONAL_EFFECT_ID': {\n            id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n            name: 'Unknown Conditional Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_CONDITIONAL_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n            name: 'Unknown Conditional Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'buff:12:ko resistance': {\n            id: BuffId['buff:12:ko resistance'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        } }));\n\n    /**\n     * @description Get the associated metadata entry for a given buff ID.\n     * @param id Buff ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n     * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    var index$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        convertProcEffectToBuffs: convertProcEffectToBuffs,\n        convertPassiveEffectToBuffs: convertPassiveEffectToBuffs,\n        convertConditionalEffectToBuffs: convertConditionalEffectToBuffs,\n        get BuffSource () { return BuffSource; },\n        get BuffStackType () { return BuffStackType; },\n        BUFF_METADATA: BUFF_METADATA,\n        getMetadataForBuff: getMetadataForBuff\n    });\n\n    var index$2 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        constants: constants,\n        parsers: index$1,\n        getMetadataForProc: getMetadataForProc,\n        getMetadataForPassive: getMetadataForPassive,\n        isAttackingProcId: isAttackingProcId,\n        getNameForProc: getNameForProc,\n        getNameForPassive: getNameForPassive,\n        isProcEffect: isProcEffect,\n        isPassiveEffect: isPassiveEffect,\n        combineEffectsAndDamageFrames: combineEffectsAndDamageFrames,\n        getEffectId: getEffectId,\n        getEffectName: getEffectName,\n        get ProcBuffType () { return ProcBuffType; },\n        PASSIVE_METADATA: PASSIVE_METADATA,\n        PROC_METADATA: PROC_METADATA\n    });\n\n    /**\n     * @description Get the effects of a given extra skill.\n     * @param skill Extra skill to get the effects of.\n     * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForExtraSkill(skill) {\n        return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n    }\n\n    var index$3 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForExtraSkill: getEffectsForExtraSkill\n    });\n\n    /**\n     * @description Get the effects of a given item.\n     * @param item Item to get the effects of, if any are present,\n     * @returns Effects of the given item if they exist, an empty array otherwise.\n     */\n    function getEffectsForItem(item) {\n        let result = [];\n        if (item && item.effect) {\n            if (Array.isArray(item.effect)) {\n                result = item.effect;\n            }\n            else if (Array.isArray(item.effect.effect)) {\n                const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n                result = effect.map(e => {\n                    // apply target data to each effect\n                    const fullProcEffect = Object.assign({}, e);\n                    fullProcEffect['target area'] = targetArea;\n                    fullProcEffect['target type'] = targetType;\n                    return fullProcEffect;\n                });\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given item thumbnail filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents the thumbnail image for a given item.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getItemImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/item/${fileName || ''}`;\n    }\n\n    var index$4 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForItem: getEffectsForItem,\n        getItemImageUrl: getItemImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given leader skill.\n     * @param skill Leader skill to get the effects of.\n     * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForLeaderSkill(skill) {\n        return skill && Array.isArray(skill.effects) ? skill.effects : [];\n    }\n\n    var index$5 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForLeaderSkill: getEffectsForLeaderSkill\n    });\n\n    /**\n     * @description Generate the file names for each of the image type for a given unit ID.\n     * @param id Unit ID to use to generate the file names.\n     * @param suffix Optional parameter that's useful for things like alternate art.\n     * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n     */\n    function getUnitImageFileNames(id, suffix = '') {\n        const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n        return {\n            spritesheet: `unit_anime_${fileNameSuffix}`,\n            battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n            guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n            fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n        };\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given unit filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents an image for a given unit.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getUnitImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n    }\n\n    var index$6 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getUnitImageFileNames: getUnitImageFileNames,\n        getUnitImageUrl: getUnitImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given SP Enhancement Entry.\n     * @param entry SP Enhancement Entry to get the effects of.\n     * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n     */\n    function getEffectsForSpEnhancement(entry) {\n        const result = [];\n        if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n            const effectWrappers = entry.skill.effects;\n            effectWrappers.forEach(effectWrapper => {\n                Object.keys(effectWrapper).forEach(spType => {\n                    const originalEffect = effectWrapper[spType];\n                    const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                    result.push(unwrappedEffect);\n                });\n            });\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the associated category name with a given category ID.\n     * @param categoryId Category ID to get the name of.\n     * @returns Name of the given category ID or the string 'Unknown'.\n     */\n    function getSpCategoryName(categoryId) {\n        let result;\n        const numericalCategoryId = +categoryId;\n        switch (numericalCategoryId) {\n            case 1:\n                result = SpCategoryName['Parameter Boost'];\n                break;\n            case 2:\n                result = SpCategoryName.Spark;\n                break;\n            case 3:\n                result = SpCategoryName['Critical Hits'];\n                break;\n            case 4:\n                result = SpCategoryName['Attack Boost'];\n                break;\n            case 5:\n                result = SpCategoryName['BB Gauge'];\n                break;\n            case 6:\n                result = SpCategoryName['HP Recovery'];\n                break;\n            case 7:\n                result = SpCategoryName.Drops;\n                break;\n            case 8:\n                result = SpCategoryName['Ailment Resistance'];\n                break;\n            case 9:\n                result = SpCategoryName['Ailment Infliction'];\n                break;\n            case 10:\n                result = SpCategoryName['Damage Reduction'];\n                break;\n            case 11:\n                result = SpCategoryName.Special;\n                break;\n            default:\n                result = SpCategoryName.Unknown;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n\n    /**\n     * @description Get the corresponding character code for a given index.\n     * It expects an index between 0 and 61 inclusive; will return an empty string if\n     * the given value is outside of the range.\n     * @param index Index of an SP entry in a given skills array.\n     * @returns Corresponding single alphanumeric character to the given index\n     * or an empty string if the index is invalid.\n     */\n    function spIndexToCode(index) {\n        let result = '';\n        let correspondingCharacterCode = -1;\n        if (Number.isInteger(index)) {\n            if (index >= 0 && index <= 25) { // A-Z\n                correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (index >= 26 && index <= 51) { // a-z\n                correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n            }\n            else if (index >= 52 && index <= 61) { // 0-9\n                correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n            }\n        }\n        if (correspondingCharacterCode !== -1) {\n            result = String.fromCharCode(correspondingCharacterCode);\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the corresponding index for a given character code.\n     * It expects an alphanumeric character and will return -1 otherwise.\n     * @param code Character code an SP entry in a given skills array.\n     * @returns Corresponding index to the given character or -1 if the\n     * character is invalid.\n     */\n    function spCodeToIndex(code) {\n        let result = -1;\n        let characterCodeOffset = -1;\n        if (!!code && typeof code === 'string' && code.length === 1) {\n            if (code >= 'A' && code <= 'Z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (code >= 'a' && code <= 'z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n            }\n            else if (code >= '0' && code <= '9') {\n                characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n            }\n        }\n        if (characterCodeOffset !== -1) {\n            result = code.charCodeAt(0) - characterCodeOffset;\n        }\n        return result;\n    }\n\n    /**\n     * @description Extract the ID of a string in the format of `number@actualId`. If there\n     * is no value after the @ character or if no @ character is present, the original ID is returned.\n     * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n     * @param id Original SP Enhancement Entry ID.\n     * @returns The ID of a string in the format of `number@actualId`, or the original input if\n     * there is no @ character or no value after the @ character.\n     */\n    function getSpEntryId(id) {\n        return (typeof id === 'string' && id.split('@')[1]) || id;\n    }\n\n    /**\n     * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n     * @param id SP Enhancement entry ID.\n     * @param entries Collection of SP Enhancement entries to search in.\n     * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n     */\n    function getSpEntryWithId(id, entries) {\n        const spId = getSpEntryId(id);\n        return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n     * @param entry SP Entry to get dependencies for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n     */\n    function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependencies = [];\n        if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n            const dependencyId = getSpEntryId(entry.dependency);\n            const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n            if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n                addedEntries.add(dependencyEntry);\n                const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n                dependencies = [dependencyEntry].concat(subDependencies);\n            }\n        }\n        return dependencies;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n     * @param entry SP Entry to get dependents for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n     */\n    function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependents = [];\n        if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n            const entryId = entry.id;\n            dependents = allEntries\n                .filter(s => {\n                return s.dependency &&\n                    s.dependency.includes(entryId) &&\n                    !addedEntries.has(s);\n            });\n            dependents.forEach(dependent => {\n                addedEntries.add(dependent);\n                const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n                dependents = dependents.concat(subDependents);\n            });\n        }\n        return dependents;\n    }\n\n    var index$7 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForSpEnhancement: getEffectsForSpEnhancement,\n        getSpCategoryName: getSpCategoryName,\n        spIndexToCode: spIndexToCode,\n        spCodeToIndex: spCodeToIndex,\n        getSpEntryId: getSpEntryId,\n        getSpEntryWithId: getSpEntryWithId,\n        getAllDependenciesForSpEntry: getAllDependenciesForSpEntry,\n        getAllEntriesThatDependOnSpEntry: getAllEntriesThatDependOnSpEntry\n    });\n\n    /* NOTE: this file is automatically generated; do not edit this file */\n    var version = '0.7.0';\n\n    exports.buffs = index$2;\n    exports.bursts = index;\n    exports.datamineTypes = datamineTypes;\n    exports.extraSkills = index$3;\n    exports.items = index$4;\n    exports.leaderSkills = index$5;\n    exports.spEnhancements = index$7;\n    exports.units = index$6;\n    exports.version = version;\n\n    return exports;\n\n}({}));\n\n","/**\n * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get level entry from.\n * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n */\nexport default function getLevelEntryForBurst(burst, level) {\n    const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n    let levelIndex;\n    if (level !== null && !isNaN(level)) {\n        // 1-indexed\n        levelIndex = (+level - 1);\n    }\n    else {\n        // default to last entry in burst\n        levelIndex = burstEffectsByLevel.length - 1;\n    }\n    return burstEffectsByLevel[levelIndex];\n}\n","import getLevelEntryForBurst from './getLevelEntryForBurst';\n/**\n * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get effects from.\n * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n */\nexport default function getEffectsForBurst(burst, level) {\n    const levelEntry = getLevelEntryForBurst(burst, level);\n    return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n}\n","/**\n * @description Get the proc/passive ID of a given object.\n * @param effect Object to get the effect ID from.\n * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectId(effect) {\n    let resultId = '';\n    if (effect) {\n        resultId = effect['proc id'] || effect['unknown proc id'] ||\n            effect['passive id'] || effect['unknown passive id'] || '';\n    }\n    return resultId;\n}\n","export var KNOWN_PROC_ID;\n(function (KNOWN_PROC_ID) {\n    KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n    KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n})(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\nexport var KNOWN_PASSIVE_ID;\n(function (KNOWN_PASSIVE_ID) {\n    KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n    KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n})(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\nexport var KNOWN_CONDITIONAL_ID;\n(function (KNOWN_CONDITIONAL_ID) {\n    KNOWN_CONDITIONAL_ID[\"Unknown\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n})(KNOWN_CONDITIONAL_ID || (KNOWN_CONDITIONAL_ID = {}));\n","export var ProcBuffType;\n(function (ProcBuffType) {\n    ProcBuffType[\"Attack\"] = \"Attack\";\n})(ProcBuffType || (ProcBuffType = {}));\n/* eslint-disable */\n/**\n * @ignore\n */\nexport const PASSIVE_METADATA = Object.freeze({\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Parameter Boost\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Elemental Parameter Boost\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Type-Based Parameter Boost\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"Status Negation\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Damage Reduction\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Gradual BB Gauge Boost\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"HC Efficacy\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"HP-Conditional Parameter Boost\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"HP-Conditional Drop Rate Boost\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"BC Fill on Enemy Defeat\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Damage Reduction (Chance)\"\n    },\n    \"15\": {\n        \"ID\": \"15\",\n        \"Name\": \"Heal on Enemy Defeat\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Heal on Battle Victory\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"HP Absorption\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Drop Rate Boost\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"Status Infliction\"\n    },\n    \"21\": {\n        \"ID\": \"21\",\n        \"Name\": \"Parameter Boost for First X Turns\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"BC Fill on Battle Victory\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Heal when Attacked (Chance)\"\n    },\n    \"25\": {\n        \"ID\": \"25\",\n        \"Name\": \"BC Fill when Hit (Chance)\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Damage Counter (Chance)\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Increased Target Chance\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Decreased Target Chance\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Defense Ignore (Chance)\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"BB Conditional Parameter Boost\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"BC Efficacy\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Heal over Time\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"Critical Damage Boost\"\n    },\n    \"35\": {\n        \"ID\": \"35\",\n        \"Name\": \"BC Fill when Normal Attacking\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Extra Action\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Hit Count Boost\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Parameter Conversion\"\n    },\n    \"41\": {\n        \"ID\": \"41\",\n        \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"Gender Parameter Boost\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Damage Reduction to 1\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Flat Parameter Boost\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"Critical Damage Negation\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"BC Fill on Spark\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"BC Cost Reduction\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"BB Gauge Consumption Reduction\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Elemental Damage Boost\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Conditional Effect based on HP Threshold\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Damage Reduction when Guarding\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BC Fill when Attacked when Guarding\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BC Fill on Guard\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Elemental Damage Reduction for first X Turns\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"BB Atk Boost\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"BC Fill on Critical\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Add buff to Brave Burst\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"OD Gauge Fill Rate Boost\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"Status Counter\"\n    },\n    \"72\": {\n        \"ID\": \"72\",\n        \"Name\": \"Turn End Effects Activate at Turn Start\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\"\n    },\n    \"74\": {\n        \"ID\": \"74\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Spark Vulnerability\"\n    },\n    \"77\": {\n        \"ID\": \"77\",\n        \"Name\": \"Spark Damage Reduction\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Conditional Effect after Damage Received Threshold\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"BC Fill after Damage Received Threshold\"\n    },\n    \"80\": {\n        \"ID\": \"80\",\n        \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n    },\n    \"81\": {\n        \"ID\": \"81\",\n        \"Name\": \"BC Fill after Damage Dealt Threshold\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"Conditional Effect after BC Received Threshold\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"Conditional Effect after HC Received Threshold\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"BC Fill after HC Received Threshold\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"Conditional Effect after Spark Threshold\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Conditional Effect on Guard\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Conditional Effect on Critical\"\n    },\n    \"90\": {\n        \"ID\": \"90\",\n        \"Name\": \"Status Infliction on Critical\"\n    },\n    \"91\": {\n        \"ID\": \"91\",\n        \"Name\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Negate Defense Ignore\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Added Elements\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Normal Attacks Hit All Foes\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Player EXP Boost\"\n    },\n    \"99\": {\n        \"ID\": \"99\",\n        \"Name\": \"\"\n    },\n    \"100\": {\n        \"ID\": \"100\",\n        \"Name\": \"Spark Critical\"\n    },\n    \"101\": {\n        \"ID\": \"101\",\n        \"Name\": \"Heal on Spark\"\n    },\n    \"102\": {\n        \"ID\": \"102\",\n        \"Name\": \"Added Elements\"\n    },\n    \"103\": {\n        \"ID\": \"103\",\n        \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n    },\n    \"104\": {\n        \"ID\": \"104\",\n        \"Name\": \"Spark Boost when HP Passes Threshold\"\n    },\n    \"105\": {\n        \"ID\": \"105\",\n        \"Name\": \"Turn-Based Parameter Boost\"\n    },\n    \"106\": {\n        \"ID\": \"106\",\n        \"Name\": \"Conditional Effect after Activating Overdrive\"\n    },\n    \"107\": {\n        \"ID\": \"107\",\n        \"Name\": \"Add Effect to Leader Skill\"\n    },\n    \"109\": {\n        \"ID\": \"109\",\n        \"Name\": \"BB Gauge Reduction (Chance)\"\n    },\n    \"110\": {\n        \"ID\": \"110\",\n        \"Name\": \"BC Efficacy Reduction (Chance)\"\n    },\n    \"111\": {\n        \"ID\": \"111\",\n        \"Name\": \"Increase Brave Burst Activation Rate\"\n    },\n    \"112\": {\n        \"ID\": \"112\",\n        \"Name\": \"ABP/CBP Boost\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Conditional Effect after HP Threshold\"\n    },\n    \"114\": {\n        \"ID\": \"114\",\n        \"Name\": \"Inflict Buff when Attacked\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n    },\n    \"128\": {\n        \"ID\": \"128\",\n        \"Name\": \"Damage Reduction from Normal Attacks\"\n    },\n    \"143\": {\n        \"ID\": \"143\",\n        \"Name\": \"Break Atk Parameter Limit\"\n    },\n    \"10008\": {\n        \"ID\": \"10008\",\n        \"Name\": \"Damage Reduction from Specific Sources\"\n    },\n    \"11004\": {\n        \"ID\": \"11004\",\n        \"Name\": \"Elemental Spark Damage Boost\"\n    },\n    \"11005\": {\n        \"ID\": \"11005\",\n        \"Name\": \"Elemental Critical Damage Boost\"\n    },\n    \"11006\": {\n        \"ID\": \"11006\",\n        \"Name\": \"Summoner EXP Boost\"\n    },\n    \"11009\": {\n        \"ID\": \"11009\",\n        \"Name\": \"Effect Duration Boost\"\n    },\n    \"66,1\": {\n        \"ID\": \"66,1\",\n        \"Name\": \"\"\n    }\n});\n/**\n * @ignore\n */\nexport const PROC_METADATA = Object.freeze({\n    \"0\": {\n        \"ID\": \"0\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Regular Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Burst Heal\",\n        \"Type\": \"\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Heal over Time\",\n        \"Type\": \"\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"BB Gauge Refill\",\n        \"Type\": \"\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"Drop Rate\",\n        \"Type\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Parameter Reduction\",\n        \"Type\": \"\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"Status Cleanse\",\n        \"Type\": \"\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"Status Infliction\",\n        \"Type\": \"\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"Revive (Guaranteed)\",\n        \"Type\": \"\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"Random Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Lifesteal Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"Status Negation\",\n        \"Type\": \"\"\n    },\n    \"18\": {\n        \"ID\": \"18\",\n        \"Name\": \"Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Gradual BB Gauge Boost\",\n        \"Type\": \"\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"BC Fill on Hit\",\n        \"Type\": \"\"\n    },\n    \"22\": {\n        \"ID\": \"22\",\n        \"Name\": \"Defense Ignore\",\n        \"Type\": \"\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Hit Count Boost\",\n        \"Type\": \"\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Fixed Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Multi-Element Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"Add Elements\",\n        \"Type\": \"\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Instant BB Gauge Fill\",\n        \"Type\": \"\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"Element Shift\",\n        \"Type\": \"\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Buff Removal (Chance)\",\n        \"Type\": \"\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"BB Gauge Reduction (Chance)\",\n        \"Type\": \"\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Leader Skill Lock (Chance)\",\n        \"Type\": \"\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Summon Unit\",\n        \"Type\": \"\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"Status Cure\",\n        \"Type\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Status Infliction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Instant OD Fill\",\n        \"Type\": \"\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Damage over Time (Additional Damage)\",\n        \"Type\": \"\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"BB Atk Boost\",\n        \"Type\": \"\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Non-Lethal Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"HP Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"Piercing Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"Retire\",\n        \"Type\": \"\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Damage Counter\",\n        \"Type\": \"\"\n    },\n    \"51\": {\n        \"ID\": \"51\",\n        \"Name\": \"Parameter Reduction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"BC Efficacy\",\n        \"Type\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Status Counter\",\n        \"Type\": \"\"\n    },\n    \"54\": {\n        \"ID\": \"54\",\n        \"Name\": \"Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Elemental Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"56\": {\n        \"ID\": \"56\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"57\": {\n        \"ID\": \"57\",\n        \"Name\": \"BC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Spark Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BB Atk Reduction\",\n        \"Type\": \"\"\n    },\n    \"60\": {\n        \"ID\": \"60\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BB-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Barrier\",\n        \"Type\": \"\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Selective Buff Wipe\",\n        \"Type\": \"\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"Consecutive Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\",\n        \"Type\": \"\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Revive (Chance)\",\n        \"Type\": \"\"\n    },\n    \"67\": {\n        \"ID\": \"67\",\n        \"Name\": \"BC Fill on Spark\",\n        \"Type\": \"\"\n    },\n    \"68\": {\n        \"ID\": \"68\",\n        \"Name\": \"Damage Reduction when Guarding\",\n        \"Type\": \"\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"BC Fill on Guard\",\n        \"Type\": \"\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"BB Gauge Fill Rate Debuff\",\n        \"Type\": \"\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\",\n        \"Type\": \"\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Element Squad-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"76\": {\n        \"ID\": \"76\",\n        \"Name\": \"Extra Action\",\n        \"Type\": \"\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Self Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"Player EXP Boost\",\n        \"Type\": \"\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"83\": {\n        \"ID\": \"83\",\n        \"Name\": \"Spark Critical\",\n        \"Type\": \"\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"OD Gauge Fill Rate\",\n        \"Type\": \"\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"Heal when Attacked\",\n        \"Type\": \"\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"HP Absorption\",\n        \"Type\": \"\"\n    },\n    \"87\": {\n        \"ID\": \"87\",\n        \"Name\": \"Heal on Spark\",\n        \"Type\": \"\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Self Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Self Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Self Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"94\": {\n        \"ID\": \"94\",\n        \"Name\": \"Normal Attacks Hit All Foes\",\n        \"Type\": \"\"\n    },\n    \"95\": {\n        \"ID\": \"95\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n        \"Type\": \"\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Element Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Gradual OD Fill\",\n        \"Type\": \"\"\n    },\n    \"119\": {\n        \"ID\": \"119\",\n        \"Name\": \"Gradual BC Drain\",\n        \"Type\": \"\"\n    },\n    \"123\": {\n        \"ID\": \"123\",\n        \"Name\": \"OD Gauge Reduction\",\n        \"Type\": \"\"\n    },\n    \"126\": {\n        \"ID\": \"126\",\n        \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n        \"Type\": \"\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Lock On\",\n        \"Type\": \"\"\n    },\n    \"130\": {\n        \"ID\": \"130\",\n        \"Name\": \"Parameter Reduction Counter\",\n        \"Type\": \"\"\n    },\n    \"131\": {\n        \"ID\": \"131\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"132\": {\n        \"ID\": \"132\",\n        \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"901\": {\n        \"ID\": \"901\",\n        \"Name\": \"Raid Heal (on Map)\",\n        \"Type\": \"\"\n    },\n    \"902\": {\n        \"ID\": \"902\",\n        \"Name\": \"Raid Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"903\": {\n        \"ID\": \"903\",\n        \"Name\": \"Raid Boss Reveal\",\n        \"Type\": \"\"\n    },\n    \"905\": {\n        \"ID\": \"905\",\n        \"Name\": \"Raid Teleport\",\n        \"Type\": \"\"\n    },\n    \"906\": {\n        \"ID\": \"906\",\n        \"Name\": \"Raid Flee\",\n        \"Type\": \"\"\n    },\n    \"907\": {\n        \"ID\": \"907\",\n        \"Name\": \"Raid Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"908\": {\n        \"ID\": \"908\",\n        \"Name\": \"Raid Item Drop Rate Boost\",\n        \"Type\": \"\"\n    },\n    \"10000\": {\n        \"ID\": \"10000\",\n        \"Name\": \"Taunt\",\n        \"Type\": \"\"\n    },\n    \"10001\": {\n        \"ID\": \"10001\",\n        \"Name\": \"Stealth\",\n        \"Type\": \"\"\n    },\n    \"10002\": {\n        \"ID\": \"10002\",\n        \"Name\": \"Shield (old)\",\n        \"Type\": \"\"\n    },\n    \"10003\": {\n        \"ID\": \"10003\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"10004\": {\n        \"ID\": \"10004\",\n        \"Name\": \"Damage Immunity\",\n        \"Type\": \"\"\n    },\n    \"10005\": {\n        \"ID\": \"10005\",\n        \"Name\": \"Turn Skip (short duration)\",\n        \"Type\": \"\"\n    },\n    \"10006\": {\n        \"ID\": \"10006\",\n        \"Name\": \"Turn Skip (long duration)\",\n        \"Type\": \"\"\n    },\n    \"10007\": {\n        \"ID\": \"10007\",\n        \"Name\": \"Evasion\",\n        \"Type\": \"\"\n    },\n    \"10009\": {\n        \"ID\": \"10009\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"10012\": {\n        \"ID\": \"10012\",\n        \"Name\": \"OD Drain\",\n        \"Type\": \"\"\n    },\n    \"10015\": {\n        \"ID\": \"10015\",\n        \"Name\": \"Elemental Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"10016\": {\n        \"ID\": \"10016\",\n        \"Name\": \"Element Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"10017\": {\n        \"ID\": \"10017\",\n        \"Name\": \"Elemental Shield\",\n        \"Type\": \"\"\n    },\n    \"10018\": {\n        \"ID\": \"10018\",\n        \"Name\": \"Max HP Reduction\",\n        \"Type\": \"\"\n    },\n    \"10019\": {\n        \"ID\": \"10019\",\n        \"Name\": \"Effect Purge\",\n        \"Type\": \"\"\n    },\n    \"10020\": {\n        \"ID\": \"10020\",\n        \"Name\": \"Piercing Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"10021\": {\n        \"ID\": \"10021\",\n        \"Name\": \"Active Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10022\": {\n        \"ID\": \"10022\",\n        \"Name\": \"Passive Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10023\": {\n        \"ID\": \"10023\",\n        \"Name\": \"HC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"10025\": {\n        \"ID\": \"10025\",\n        \"Name\": \"KO Resistance Negation\",\n        \"Type\": \"\"\n    },\n    \"10026\": {\n        \"ID\": \"10026\",\n        \"Name\": \"Doom\",\n        \"Type\": \"\"\n    },\n    \"11000\": {\n        \"ID\": \"11000\",\n        \"Name\": \"Negative HP-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"11001\": {\n        \"ID\": \"11001\",\n        \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n        \"Type\": \"\"\n    },\n    \"11002\": {\n        \"ID\": \"11002\",\n        \"Name\": \"HP Limit Break, Convert to HP\",\n        \"Type\": \"\"\n    },\n    \"11003\": {\n        \"ID\": \"11003\",\n        \"Name\": \"Effect Negation\",\n        \"Type\": \"\"\n    },\n    \"70001\": {\n        \"ID\": \"70001\",\n        \"Name\": \"Mana Bubble Shield\",\n        \"Type\": \"\"\n    },\n    \"70002\": {\n        \"ID\": \"70002\",\n        \"Name\": \"Recast\",\n        \"Type\": \"\"\n    },\n    \"2-5\": {\n        \"ID\": \"2-5\",\n        \"Name\": \"Burst Heal and DEF/REC Boost\",\n        \"Type\": \"\"\n    }\n});\n","import { PROC_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given proc ID.\n * @param id Proc ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForProc(id, metadata = PROC_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\nimport { ProcBuffType } from './effect-metadata';\n/**\n * @description Determine if a given proc ID's type is an attack.\n * @param id Proc ID to check.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n */\nexport default function isAttackingProcId(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n}\n","import getEffectId from '../buffs/getEffectId';\nimport { KNOWN_PROC_ID } from '../buffs/constants';\nimport isAttackingProcId from '../buffs/isAttackingProcId';\n/**\n * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n * @param damageFrames Damage frames that each have their own proc ID.\n * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Damage frames entry whose frames are based on the input damage frames.\n */\nexport default function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n    // relevant frames are all effects for healing or attacking\n    const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n    const relevantFrames = inputFrames.filter(frame => {\n        const procId = getEffectId(frame);\n        return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n    });\n    const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n        const keepFirstFrame = index === 0;\n        const numFrames = frameEntry['frame times'].length;\n        const damageDistribution = frameEntry['hit dmg% distribution'];\n        const frameTimes = frameEntry['frame times'];\n        for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n            acc.push({\n                damage: damageDistribution[frameIndex],\n                time: frameTimes[frameIndex],\n            });\n        }\n        return acc;\n    }, []);\n    const resultDamageFramesEntry = {\n        'effect delay time(ms)/frame': effectDelay,\n        'frame times': [],\n        'hit dmg% distribution': [],\n        'hit dmg% distribution (total)': 0,\n        hits: 0,\n    };\n    unifiedFrames.sort((a, b) => a.time - b.time)\n        .forEach(({ time, damage }) => {\n        resultDamageFramesEntry['frame times'].push(time);\n        resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n        resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n    });\n    resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n    return resultDamageFramesEntry;\n}\n","import { PASSIVE_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given passive ID.\n * @param id Passive ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\n/**\n * @description Get the associated name for a given proc ID.\n * @param id Proc ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Name of the proc ID if it exists, empty string otherwise.\n */\nexport default function getNameForProc(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","import getMetadataForPassive from './getMetadataForPassive';\n/**\n * @description Get the associated name for a given passive ID.\n * @param id Passive ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Name of the passive ID if it exists, empty string otherwise.\n */\nexport default function getNameForPassive(id, metadata) {\n    const metadataEntry = getMetadataForPassive(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","/**\n * @description Determine if a given effect object is a proc effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a proc effect based on its properties.\n */\nexport default function isProcEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n}\n","/**\n * @description Determine if a given effect object is a passive effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a passive effect based on its properties.\n */\nexport default function isPassiveEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n}\n","export var Ailment;\n(function (Ailment) {\n    Ailment[\"Poison\"] = \"poison\";\n    Ailment[\"Weak\"] = \"weak\";\n    Ailment[\"Sick\"] = \"sick\";\n    Ailment[\"Injury\"] = \"injury\";\n    Ailment[\"Curse\"] = \"curse\";\n    Ailment[\"Paralysis\"] = \"paralysis\";\n    Ailment[\"AttackReduction\"] = \"atk down\";\n    Ailment[\"DefenseReduction\"] = \"def down\";\n    Ailment[\"RecoveryReduction\"] = \"rec down\";\n    Ailment[\"Unknown\"] = \"unknown\";\n})(Ailment || (Ailment = {}));\nexport var ArenaCondition;\n(function (ArenaCondition) {\n    ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n    ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n    ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n    ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n    ArenaCondition[\"hp_min\"] = \"hp_min\";\n    ArenaCondition[\"hp_max\"] = \"hp_max\";\n    ArenaCondition[\"atk_max\"] = \"atk_max\";\n    ArenaCondition[\"random\"] = \"random\";\n})(ArenaCondition || (ArenaCondition = {}));\nexport var MoveType;\n(function (MoveType) {\n    MoveType[\"Moving\"] = \"1\";\n    MoveType[\"Teleporting\"] = \"2\";\n    MoveType[\"NonMoving\"] = \"3\";\n})(MoveType || (MoveType = {}));\nexport var TargetArea;\n(function (TargetArea) {\n    TargetArea[\"Aoe\"] = \"aoe\";\n    TargetArea[\"Single\"] = \"single\";\n    TargetArea[\"Random\"] = \"random\";\n})(TargetArea || (TargetArea = {}));\nexport var TargetAreaShorthand;\n(function (TargetAreaShorthand) {\n    TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n    TargetAreaShorthand[\"Single\"] = \"ST\";\n    TargetAreaShorthand[\"Random\"] = \"RT\";\n})(TargetAreaShorthand || (TargetAreaShorthand = {}));\nexport var TargetType;\n(function (TargetType) {\n    TargetType[\"Self\"] = \"self\";\n    TargetType[\"Party\"] = \"party\";\n    TargetType[\"Enemy\"] = \"enemy\";\n})(TargetType || (TargetType = {}));\nexport var SpPassiveType;\n(function (SpPassiveType) {\n    SpPassiveType[\"AddPassive\"] = \"passive\";\n    SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n    SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n    SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n    SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n})(SpPassiveType || (SpPassiveType = {}));\nexport var SphereTypeName;\n(function (SphereTypeName) {\n    SphereTypeName[\"None\"] = \"None\";\n    SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n    SphereTypeName[\"Critical\"] = \"Critical\";\n    SphereTypeName[\"Drop\"] = \"Drop\";\n    SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n    SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n    SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n    SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n    SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n    SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n    SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n    SphereTypeName[\"Spark\"] = \"Spark\";\n    SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n    SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n    SphereTypeName[\"Special\"] = \"Special\";\n})(SphereTypeName || (SphereTypeName = {}));\nexport var SphereTypeId;\n(function (SphereTypeId) {\n    SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n    SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n    SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n    SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n    SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n    SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n    SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n    SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n    SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n    SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n    SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n    SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n    SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n    SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n    SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n})(SphereTypeId || (SphereTypeId = {}));\nexport var SpCategoryName;\n(function (SpCategoryName) {\n    SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n    SpCategoryName[\"Spark\"] = \"Spark\";\n    SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n    SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n    SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n    SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n    SpCategoryName[\"Drops\"] = \"Drops\";\n    SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n    SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n    SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n    SpCategoryName[\"Special\"] = \"Special\";\n    SpCategoryName[\"Unknown\"] = \"Unknown\";\n})(SpCategoryName || (SpCategoryName = {}));\nexport var SpCategoryId;\n(function (SpCategoryId) {\n    SpCategoryId[\"Parameter Boost\"] = \"1\";\n    SpCategoryId[\"Spark\"] = \"2\";\n    SpCategoryId[\"Critical Hits\"] = \"3\";\n    SpCategoryId[\"Attack Boost\"] = \"4\";\n    SpCategoryId[\"BB Gauge\"] = \"5\";\n    SpCategoryId[\"HP Recovery\"] = \"6\";\n    SpCategoryId[\"Drops\"] = \"7\";\n    SpCategoryId[\"Ailment Resistance\"] = \"8\";\n    SpCategoryId[\"Ailment Infliction\"] = \"9\";\n    SpCategoryId[\"Damage Reduction\"] = \"10\";\n    SpCategoryId[\"Special\"] = \"11\";\n})(SpCategoryId || (SpCategoryId = {}));\nexport var UnitAnimationKey;\n(function (UnitAnimationKey) {\n    UnitAnimationKey[\"Attack\"] = \"attack\";\n    UnitAnimationKey[\"Idle\"] = \"idle\";\n    UnitAnimationKey[\"Move\"] = \"move\";\n})(UnitAnimationKey || (UnitAnimationKey = {}));\nexport var UnitElement;\n(function (UnitElement) {\n    UnitElement[\"Fire\"] = \"fire\";\n    UnitElement[\"Water\"] = \"water\";\n    UnitElement[\"Earth\"] = \"earth\";\n    UnitElement[\"Thunder\"] = \"thunder\";\n    UnitElement[\"Light\"] = \"light\";\n    UnitElement[\"Dark\"] = \"dark\";\n})(UnitElement || (UnitElement = {}));\nexport var UnitGender;\n(function (UnitGender) {\n    UnitGender[\"Male\"] = \"male\";\n    UnitGender[\"Female\"] = \"female\";\n    UnitGender[\"Other\"] = \"other\";\n})(UnitGender || (UnitGender = {}));\nexport var UnitGettingType;\n(function (UnitGettingType) {\n    UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n    UnitGettingType[\"Farmable\"] = \"farmable\";\n    UnitGettingType[\"RareSummon\"] = \"rare summon\";\n    UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n})(UnitGettingType || (UnitGettingType = {}));\nexport var UnitKind;\n(function (UnitKind) {\n    UnitKind[\"Normal\"] = \"normal\";\n    UnitKind[\"Evolution\"] = \"evo\";\n    UnitKind[\"Enhancing\"] = \"enhancing\";\n    UnitKind[\"Sale\"] = \"sale\";\n})(UnitKind || (UnitKind = {}));\nexport var UnitType;\n(function (UnitType) {\n    UnitType[\"Lord\"] = \"lord\";\n    UnitType[\"Anima\"] = \"anima\";\n    UnitType[\"Breaker\"] = \"breaker\";\n    UnitType[\"Guardian\"] = \"guardian\";\n    UnitType[\"Oracle\"] = \"oracle\";\n    UnitType[\"Rex\"] = \"rex\";\n})(UnitType || (UnitType = {}));\nexport var ItemType;\n(function (ItemType) {\n    ItemType[\"Consumable\"] = \"consumable\";\n    ItemType[\"Material\"] = \"material\";\n    ItemType[\"Sphere\"] = \"sphere\";\n    ItemType[\"EvolutionMaterial\"] = \"evomat\";\n    ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n    ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n})(ItemType || (ItemType = {}));\nexport var MimicUnitIds;\n(function (MimicUnitIds) {\n    MimicUnitIds[\"Mimic\"] = \"60142\";\n    MimicUnitIds[\"BatMimic\"] = \"60143\";\n    MimicUnitIds[\"DragonMimic\"] = \"60144\";\n    MimicUnitIds[\"MetalMimic\"] = \"60224\";\n})(MimicUnitIds || (MimicUnitIds = {}));\n/**\n * @description Known values for the monster groups used in {@link IMimicInfo}.\n */\nexport const MimicMonsterGroupMapping = {\n    '1000': MimicUnitIds.Mimic,\n    '1100': MimicUnitIds.BatMimic,\n    '1101': MimicUnitIds.BatMimic,\n    '1200': MimicUnitIds.DragonMimic,\n    '1300': MimicUnitIds.MetalMimic,\n};\n","import { TargetArea, } from '../datamine-types';\n/**\n * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n */\nexport default function combineEffectsAndDamageFrames(effects, damageFrames) {\n    let combinedEntries = [];\n    if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n        combinedEntries = effects.map((effect, i) => {\n            const correspondingFrameEntry = damageFrames[i];\n            return {\n                delay: effect['effect delay time(ms)/frame'],\n                effect,\n                frames: correspondingFrameEntry,\n                id: `${effect['proc id'] || effect['unknown proc id']}`,\n                targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                targetType: effect['target type'],\n            };\n        });\n    }\n    return combinedEntries;\n}\n","import getEffectId from './getEffectId';\nimport isPassiveEffect from './isPassiveEffect';\nimport getNameForPassive from './getNameForPassive';\nimport isProcEffect from './isProcEffect';\nimport getNameForProc from './getNameForProc';\n/**\n * @description Get the name of a given object.\n * @param effect Object to get the name from.\n * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n * @returns Name of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectName(effect, metadata = {}) {\n    let resultName = '';\n    const effectId = getEffectId(effect);\n    if (isPassiveEffect(effect)) {\n        resultName = getNameForPassive(effectId, metadata && metadata.passive);\n    }\n    else if (isProcEffect(effect)) {\n        resultName = getNameForProc(effectId, metadata && metadata.proc);\n    }\n    return resultName;\n}\n","/**\n * @description Provides info at a glance regarding a buff's source and how it stacks.\n */\nexport var BuffStackType;\n(function (BuffStackType) {\n    /**\n     * @description The buff is activated via some skill and lasts for a number of turns.\n     * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n     * from different levels. Two possible levels of sources are:\n     * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n     * 2. Ultimate Brave Burst or Dual Brave Burst\n     */\n    BuffStackType[\"Active\"] = \"active\";\n    /**\n     * @description The buff is always active provided that the source is not nullified.\n     * Most passive buffs can stack with themselves.\n     */\n    BuffStackType[\"Passive\"] = \"passive\";\n    /**\n     * @description The buff is applied for a number of turns once a certain condition is met.\n     * Buffs of the same type are not able to stack.\n     */\n    BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n    /**\n     * @description Only one instance of the buff can be active at a time and can last indefinitely.\n     * A couple examples of this are Barrier and Max HP Boost.\n     */\n    BuffStackType[\"Singleton\"] = \"singleton\";\n    /**\n     * @description The buff's effects immediately apply to the target(s). This differs from singleton\n     * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n     * in the HP bar filling by the sum of those burst heals).\n     */\n    BuffStackType[\"Burst\"] = \"burst\";\n    /**\n     * @description A specific subset of `Burst` type buffs that deal damage to the target.\n     */\n    BuffStackType[\"Attack\"] = \"attack\";\n    /**\n     * @description Only for buffs that cannot be processed by the library yet.\n     */\n    BuffStackType[\"Unknown\"] = \"unknown\";\n})(BuffStackType || (BuffStackType = {}));\nexport var BuffSource;\n(function (BuffSource) {\n    BuffSource[\"BraveBurst\"] = \"bb\";\n    BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n    BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n    BuffSource[\"DualBraveBurst\"] = \"dbb\";\n    BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n    BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n    BuffSource[\"SpEnhancement\"] = \"sp\";\n    BuffSource[\"Item\"] = \"item\";\n    BuffSource[\"LeaderSkill\"] = \"ls\";\n    BuffSource[\"ExtraSkill\"] = \"es\";\n    /**\n     * @description Buffs that result of having a number of OE+ units in the squad.\n     */\n    BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n    /**\n     * @description Buffs based on a units type. See {@link UnitType}.\n     */\n    BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n    /**\n     * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n     * as well as ambient turn reductions present in some late-game quests.\n     */\n    BuffSource[\"Quest\"] = \"quest\";\n})(BuffSource || (BuffSource = {}));\n/**\n * @description Extra element values that can be used in addition to {@link UnitElement}.\n */\nexport var BuffConditionElement;\n(function (BuffConditionElement) {\n    BuffConditionElement[\"Unknown\"] = \"unknown\";\n    BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n    BuffConditionElement[\"All\"] = \"all\";\n})(BuffConditionElement || (BuffConditionElement = {}));\n/**\n * @description Stats on a unit that a buff can affect.\n */\nexport var UnitStat;\n(function (UnitStat) {\n    UnitStat[\"hp\"] = \"hp\";\n    UnitStat[\"atk\"] = \"atk\";\n    UnitStat[\"def\"] = \"def\";\n    UnitStat[\"rec\"] = \"rec\";\n    UnitStat[\"crit\"] = \"crit\";\n    UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n    UnitStat[\"bbGauge\"] = \"bbGauge\";\n    UnitStat[\"odGauge\"] = \"odGauge\";\n    UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n    UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n    UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n    UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n    UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n    UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n    UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n    UnitStat[\"bcCostReduction\"] = \"bcCostReduction\";\n    UnitStat[\"bbGaugeConsumptionReduction\"] = \"bbGaugeConsumptionReduction\";\n    UnitStat[\"poisonResist\"] = \"poisonResist\";\n    UnitStat[\"weakResist\"] = \"weakResist\";\n    UnitStat[\"sickResist\"] = \"sickResist\";\n    UnitStat[\"injuryResist\"] = \"injuryResist\";\n    UnitStat[\"curseResist\"] = \"curseResist\";\n    UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n    UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n    UnitStat[\"weakInflict\"] = \"weakInflict\";\n    UnitStat[\"sickInflict\"] = \"sickInflict\";\n    UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n    UnitStat[\"curseInflict\"] = \"curseInflict\";\n    UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n    UnitStat[\"poisonCounter\"] = \"poisonCounter\";\n    UnitStat[\"weakCounter\"] = \"weakCounter\";\n    UnitStat[\"sickCounter\"] = \"sickCounter\";\n    UnitStat[\"injuryCounter\"] = \"injuryCounter\";\n    UnitStat[\"curseCounter\"] = \"curseCounter\";\n    UnitStat[\"paralysisCounter\"] = \"paralysisCounter\";\n    UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n    UnitStat[\"defDownResist\"] = \"defDownResist\";\n    UnitStat[\"recDownResist\"] = \"recDownResist\";\n    UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n    UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n    UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n    UnitStat[\"mitigation\"] = \"mitigation\";\n    UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n    UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n    UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n    UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n    UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n    UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n    UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n    UnitStat[\"fireElementalDamage\"] = \"fireElementalDamage\";\n    UnitStat[\"waterElementalDamage\"] = \"waterElementalDamage\";\n    UnitStat[\"earthElementalDamage\"] = \"earthElementalDamage\";\n    UnitStat[\"thunderElementalDamage\"] = \"thunderElementalDamage\";\n    UnitStat[\"lightElementalDamage\"] = \"lightElementalDamage\";\n    UnitStat[\"darkElementalDamage\"] = \"darkElementalDamage\";\n    UnitStat[\"elementalWeaknessDamageMitigation\"] = \"elementalWeaknessDamageMitigation\";\n    UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n    UnitStat[\"koResistance\"] = \"koResistance\";\n    UnitStat[\"revive\"] = \"revive\";\n    UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n    UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n    UnitStat[\"criticalDamageMitigation\"] = \"criticalDamageMitigation\";\n    UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n    UnitStat[\"bbAtk\"] = \"bbAtk\";\n    UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n    UnitStat[\"damageReflect\"] = \"damageReflect\";\n    UnitStat[\"targetingModification\"] = \"targetingModification\";\n    UnitStat[\"elementModification\"] = \"elementModification\";\n    UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n    UnitStat[\"extraAction\"] = \"extraAction\";\n    UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n})(UnitStat || (UnitStat = {}));\nexport var IconId;\n(function (IconId) {\n    IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n    IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n    IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n    IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n    IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n    IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n    IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n    IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n    IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n    IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n    IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n    IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n    IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n    IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n    IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n    IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n    IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n    IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n    IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n    IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n    IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n    IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n    IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n    IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n    IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n    IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n    IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n    IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n    IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n    IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n    IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n    IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n    IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n    IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n    IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n    IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n    IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n    IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n    IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n    IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n    IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n    IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n    IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n    IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n    IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n    IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n    IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n    IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n    IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n    IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n    IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n    IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n    IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n    IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n    IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n    IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n    IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n    IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n    IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n    IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n    IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n    IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n    IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n    IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n    IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n    IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n    IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n    IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n    IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n    IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n    IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n    IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n    IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n    IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n    IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n    IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n    IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n    IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n    IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n    IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n    IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n    IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n    IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n    IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n    IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n    IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n    IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n    IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n    IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n    IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n    IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n    IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n    IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n    IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n    IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n    IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n    IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n    IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n    IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n    IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n    IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n    IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n    IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n    IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n    IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n    IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n    IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n    IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n    IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n    IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n    IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n    IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n    IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n    IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n    IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n    IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n    IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n    IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n    IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n    IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n    IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n    IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n    IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n    IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n    IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n    IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n    IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n    IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n    IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n    IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n    IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n    IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n    IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n    IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n    IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n    IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n    IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n    IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n    IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n    IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n    IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n    IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n    IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n    IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n    IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n    IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n    IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n    IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n    IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n    IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n    IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n    IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n    IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n    IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n    IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n    IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n    IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n    IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n    IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n    IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n    IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n    IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n    IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n    IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n    IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n    IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n    IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n    IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n    IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n    IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n    IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n    IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n    IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n    IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n    IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n    IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n    IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n    IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n    IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n    IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n    IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n    IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n    IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n    IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n    IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n    IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n    IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n    IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n    IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n    IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n    IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n    IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n    IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n    IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n    IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n    IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n    IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n    IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n    IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n    IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n    IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n    IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n    IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n    IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n    IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n    IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n    IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n    IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n    IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n    IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n    IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n    IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n    IconId[\"BUFF_HPSCALEDATKUP\"] = \"BUFF_HPSCALEDATKUP\";\n    IconId[\"BUFF_HPSCALEDATKDOWN\"] = \"BUFF_HPSCALEDATKDOWN\";\n    IconId[\"BUFF_HPSCALEDDEFUP\"] = \"BUFF_HPSCALEDDEFUP\";\n    IconId[\"BUFF_HPSCALEDDEFDOWN\"] = \"BUFF_HPSCALEDDEFDOWN\";\n    IconId[\"BUFF_HPSCALEDRECUP\"] = \"BUFF_HPSCALEDRECUP\";\n    IconId[\"BUFF_HPSCALEDRECDOWN\"] = \"BUFF_HPSCALEDRECDOWN\";\n    IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n    IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n    IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n    IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n    IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n    IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n    IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n    IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n    IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n    IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n    IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n    IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n    IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n    IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n    IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n    IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n    IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n    IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n    IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n    IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n    IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n    IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n    IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n    IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n    IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n    IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n    IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n    IconId[\"BUFF_POISONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n    IconId[\"BUFF_POISIONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n    IconId[\"BUFF_WEAKCOUNTER\"] = \"BUFF_WEAKCOUNTER\";\n    IconId[\"BUFF_SICKCOUNTER\"] = \"BUFF_SICKCOUNTER\";\n    IconId[\"BUFF_INJCONTER\"] = \"BUFF_INJCONTER\";\n    IconId[\"BUFF_CURSECOUNTER\"] = \"BUFF_CURSECOUNTER\";\n    IconId[\"BUFF_PARALYCOUNTER\"] = \"BUFF_PARALYCOUNTER\";\n    IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n    IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n    // elemental damage reduction buffs\n    IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n    IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n    IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n    IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n    IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n    IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n    IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n    // elemental weakness buffs\n    IconId[\"BUFF_FIREDMGUP\"] = \"BUFF_FIREDMGUP\";\n    IconId[\"BUFF_WATERDMGUP\"] = \"BUFF_WATERDMGUP\";\n    IconId[\"BUFF_WATERMDGUP\"] = \"BUFF_WATERDMGUP\";\n    IconId[\"BUFF_EARTHDMGUP\"] = \"BUFF_EARTHDMGUP\";\n    IconId[\"BUFF_THUNDERDMGUP\"] = \"BUFF_THUNDERDMGUP\";\n    IconId[\"BUFF_LIGHTDMGUP\"] = \"BUFF_LIGHTDMGUP\";\n    IconId[\"BUFF_DARKDMGUP\"] = \"BUFF_DARKDMGUP\";\n    IconId[\"BUFF_ELEMENTDMGUP\"] = \"BUFF_ELEMENTDMGUP\";\n    IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n    IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n    IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n    IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n    IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n    IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n    IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n    IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n    IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n    IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n    IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n    IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n    IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n    IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n    IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n    IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n    IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n    IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n    IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n    IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n    IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n    IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n    IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n    IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n    IconId[\"BUFF_KO\"] = \"BUFF_KO\";\n    IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n    IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n    IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n    IconId[\"BUFF_CRTDOWN\"] = \"BUFF_CRTDOWN\";\n    IconId[\"BUFF_ELEMENTDOWN\"] = \"BUFF_ELEMENTDOWN\";\n    IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n    IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n    IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n    IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n    IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n    IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n    IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n    IconId[\"BUFF_SPARKBBUP\"] = \"BUFF_SPARKBBUP\";\n    IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n    IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n    IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n    IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n    IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n    IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n    IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n    IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n    IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n    IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n    IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n    IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n    IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n    IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n    IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n    IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n    IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n    IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n    IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n    IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n    IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n    IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n    IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n    IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n    IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n    IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n    IconId[\"BUFF_BBATKUP\"] = \"BUFF_BBATKUP\";\n    IconId[\"BUFF_SBBATKUP\"] = \"BUFF_SBBATKUP\";\n    IconId[\"BUFF_UBBATKUP\"] = \"BUFF_UBBATKUP\";\n    IconId[\"BUFF_BBCOST_REDUCTION\"] = \"BUFF_BBCOST_REDUCTION\";\n    IconId[\"ATK_ST\"] = \"ATK_ST\";\n    IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n    IconId[\"ATK_RT\"] = \"ATK_RT\";\n    IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n    IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n    IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n    IconId[\"ATK_ST_PIERCING_PROPORTIONAL\"] = \"ATK_ST_PIERCING_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PIERCING_PROPORTIONAL\"] = \"ATK_AOE_PIERCING_PROPORTIONAL\";\n    IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n    IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n    IconId[\"ATK_ST_PIERCING_FIXED\"] = \"ATK_ST_PIERCING_FIXED\";\n    IconId[\"ATK_AOE_PIERCING_FIXED\"] = \"ATK_AOE_PIERCING_FIXED\";\n    IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n    IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n    IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n    IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n    IconId[\"ATK_ST_HPSCALED\"] = \"ATK_ST_HPSCALED\";\n    IconId[\"ATK_AOE_HPSCALED\"] = \"ATK_AOE_HPSCALED\";\n})(IconId || (IconId = {}));\n/**\n * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n * source of a given buff.\n */\nexport var BuffId;\n(function (BuffId) {\n    BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n    BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n    BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n    BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n    BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n    BuffId[\"passive:1:def\"] = \"passive:1:def\";\n    BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n    BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n    BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n    BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n    BuffId[\"passive:2:def\"] = \"passive:2:def\";\n    BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n    BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n    BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n    BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n    BuffId[\"passive:3:def\"] = \"passive:3:def\";\n    BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n    BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n    BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n    BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n    BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n    BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n    BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n    BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n    BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n    BuffId[\"passive:5:water\"] = \"passive:5:water\";\n    BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n    BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n    BuffId[\"passive:5:light\"] = \"passive:5:light\";\n    BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n    BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n    BuffId[\"passive:8\"] = \"passive:8\";\n    BuffId[\"passive:9\"] = \"passive:9\";\n    BuffId[\"passive:10\"] = \"passive:10\";\n    BuffId[\"passive:11:atk\"] = \"passive:11:atk\";\n    BuffId[\"passive:11:def\"] = \"passive:11:def\";\n    BuffId[\"passive:11:rec\"] = \"passive:11:rec\";\n    BuffId[\"passive:11:crit\"] = \"passive:11:crit\";\n    BuffId[\"passive:12:bc\"] = \"passive:12:bc\";\n    BuffId[\"passive:12:hc\"] = \"passive:12:hc\";\n    BuffId[\"passive:12:item\"] = \"passive:12:item\";\n    BuffId[\"passive:12:zel\"] = \"passive:12:zel\";\n    BuffId[\"passive:12:karma\"] = \"passive:12:karma\";\n    BuffId[\"passive:13\"] = \"passive:13\";\n    BuffId[\"passive:14\"] = \"passive:14\";\n    BuffId[\"passive:15\"] = \"passive:15\";\n    BuffId[\"passive:16\"] = \"passive:16\";\n    BuffId[\"passive:17\"] = \"passive:17\";\n    BuffId[\"passive:19:bc\"] = \"passive:19:bc\";\n    BuffId[\"passive:19:hc\"] = \"passive:19:hc\";\n    BuffId[\"passive:19:item\"] = \"passive:19:item\";\n    BuffId[\"passive:19:zel\"] = \"passive:19:zel\";\n    BuffId[\"passive:19:karma\"] = \"passive:19:karma\";\n    BuffId[\"passive:20:poison\"] = \"passive:20:poison\";\n    BuffId[\"passive:20:weak\"] = \"passive:20:weak\";\n    BuffId[\"passive:20:sick\"] = \"passive:20:sick\";\n    BuffId[\"passive:20:injury\"] = \"passive:20:injury\";\n    BuffId[\"passive:20:curse\"] = \"passive:20:curse\";\n    BuffId[\"passive:20:paralysis\"] = \"passive:20:paralysis\";\n    BuffId[\"passive:20:atk down\"] = \"passive:20:atk down\";\n    BuffId[\"passive:20:def down\"] = \"passive:20:def down\";\n    BuffId[\"passive:20:rec down\"] = \"passive:20:rec down\";\n    BuffId[\"passive:20:unknown\"] = \"passive:20:unknown\";\n    BuffId[\"passive:21:atk\"] = \"passive:21:atk\";\n    BuffId[\"passive:21:def\"] = \"passive:21:def\";\n    BuffId[\"passive:21:rec\"] = \"passive:21:rec\";\n    BuffId[\"passive:21:crit\"] = \"passive:21:crit\";\n    BuffId[\"passive:23\"] = \"passive:23\";\n    BuffId[\"passive:24\"] = \"passive:24\";\n    BuffId[\"passive:25\"] = \"passive:25\";\n    BuffId[\"passive:26\"] = \"passive:26\";\n    BuffId[\"passive:27\"] = \"passive:27\";\n    BuffId[\"passive:28\"] = \"passive:28\";\n    BuffId[\"passive:29\"] = \"passive:29\";\n    BuffId[\"passive:30:atk\"] = \"passive:30:atk\";\n    BuffId[\"passive:30:def\"] = \"passive:30:def\";\n    BuffId[\"passive:30:rec\"] = \"passive:30:rec\";\n    BuffId[\"passive:30:crit\"] = \"passive:30:crit\";\n    BuffId[\"passive:31:damage\"] = \"passive:31:damage\";\n    BuffId[\"passive:31:bc\"] = \"passive:31:bc\";\n    BuffId[\"passive:31:hc\"] = \"passive:31:hc\";\n    BuffId[\"passive:31:item\"] = \"passive:31:item\";\n    BuffId[\"passive:31:zel\"] = \"passive:31:zel\";\n    BuffId[\"passive:31:karma\"] = \"passive:31:karma\";\n    BuffId[\"passive:32\"] = \"passive:32\";\n    BuffId[\"passive:33\"] = \"passive:33\";\n    BuffId[\"passive:34\"] = \"passive:34\";\n    BuffId[\"passive:35\"] = \"passive:35\";\n    BuffId[\"passive:36\"] = \"passive:36\";\n    BuffId[\"passive:37\"] = \"passive:37\";\n    BuffId[\"passive:40:atk\"] = \"passive:40:atk\";\n    BuffId[\"passive:40:def\"] = \"passive:40:def\";\n    BuffId[\"passive:40:rec\"] = \"passive:40:rec\";\n    BuffId[\"passive:41:hp\"] = \"passive:41:hp\";\n    BuffId[\"passive:41:atk\"] = \"passive:41:atk\";\n    BuffId[\"passive:41:def\"] = \"passive:41:def\";\n    BuffId[\"passive:41:rec\"] = \"passive:41:rec\";\n    BuffId[\"passive:41:crit\"] = \"passive:41:crit\";\n    BuffId[\"passive:42:hp\"] = \"passive:42:hp\";\n    BuffId[\"passive:42:atk\"] = \"passive:42:atk\";\n    BuffId[\"passive:42:def\"] = \"passive:42:def\";\n    BuffId[\"passive:42:rec\"] = \"passive:42:rec\";\n    BuffId[\"passive:42:crit\"] = \"passive:42:crit\";\n    BuffId[\"passive:43\"] = \"passive:43\";\n    BuffId[\"passive:44:hp\"] = \"passive:44:hp\";\n    BuffId[\"passive:44:atk\"] = \"passive:44:atk\";\n    BuffId[\"passive:44:def\"] = \"passive:44:def\";\n    BuffId[\"passive:44:rec\"] = \"passive:44:rec\";\n    BuffId[\"passive:44:crit\"] = \"passive:44:crit\";\n    BuffId[\"passive:45:base\"] = \"passive:45:base\";\n    BuffId[\"passive:45:buff\"] = \"passive:45:buff\";\n    BuffId[\"passive:46:atk\"] = \"passive:46:atk\";\n    BuffId[\"passive:46:def\"] = \"passive:46:def\";\n    BuffId[\"passive:46:rec\"] = \"passive:46:rec\";\n    BuffId[\"passive:47\"] = \"passive:47\";\n    BuffId[\"passive:48\"] = \"passive:48\";\n    BuffId[\"passive:49\"] = \"passive:49\";\n    BuffId[\"passive:50:fire\"] = \"passive:50:fire\";\n    BuffId[\"passive:50:water\"] = \"passive:50:water\";\n    BuffId[\"passive:50:earth\"] = \"passive:50:earth\";\n    BuffId[\"passive:50:thunder\"] = \"passive:50:thunder\";\n    BuffId[\"passive:50:light\"] = \"passive:50:light\";\n    BuffId[\"passive:50:dark\"] = \"passive:50:dark\";\n    BuffId[\"passive:50:unknown\"] = \"passive:50:unknown\";\n    BuffId[\"passive:53:critical-damage-base\"] = \"passive:53:critical-damage-base\";\n    BuffId[\"passive:53:critical-damage-buff\"] = \"passive:53:critical-damage-buff\";\n    BuffId[\"passive:53:element-damage-base\"] = \"passive:53:element-damage-base\";\n    BuffId[\"passive:53:element-damage-buff\"] = \"passive:53:element-damage-buff\";\n    BuffId[\"passive:53:critical-rate-base\"] = \"passive:53:critical-rate-base\";\n    BuffId[\"passive:53:critical-rate-buff\"] = \"passive:53:critical-rate-buff\";\n    BuffId[\"passive:55:hp condition\"] = \"passive:55:hp condition\";\n    BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n    BuffId[\"proc:1\"] = \"proc:1\";\n    BuffId[\"proc:2\"] = \"proc:2\";\n    BuffId[\"proc:3\"] = \"proc:3\";\n    BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n    BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n    BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n    BuffId[\"proc:5:def\"] = \"proc:5:def\";\n    BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n    BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n    BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n    BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n    BuffId[\"proc:6:item\"] = \"proc:6:item\";\n    BuffId[\"proc:7\"] = \"proc:7\";\n    BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n    BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n    BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n    BuffId[\"proc:9:def\"] = \"proc:9:def\";\n    BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n    BuffId[\"proc:9:unknown\"] = \"proc:9:unknown\";\n    BuffId[\"proc:10:poison\"] = \"proc:10:poison\";\n    BuffId[\"proc:10:weak\"] = \"proc:10:weak\";\n    BuffId[\"proc:10:sick\"] = \"proc:10:sick\";\n    BuffId[\"proc:10:injury\"] = \"proc:10:injury\";\n    BuffId[\"proc:10:curse\"] = \"proc:10:curse\";\n    BuffId[\"proc:10:paralysis\"] = \"proc:10:paralysis\";\n    BuffId[\"proc:10:atk down\"] = \"proc:10:atk down\";\n    BuffId[\"proc:10:def down\"] = \"proc:10:def down\";\n    BuffId[\"proc:10:rec down\"] = \"proc:10:rec down\";\n    BuffId[\"proc:10:unknown\"] = \"proc:10:unknown\";\n    BuffId[\"proc:11:poison\"] = \"proc:11:poison\";\n    BuffId[\"proc:11:weak\"] = \"proc:11:weak\";\n    BuffId[\"proc:11:sick\"] = \"proc:11:sick\";\n    BuffId[\"proc:11:injury\"] = \"proc:11:injury\";\n    BuffId[\"proc:11:curse\"] = \"proc:11:curse\";\n    BuffId[\"proc:11:paralysis\"] = \"proc:11:paralysis\";\n    BuffId[\"proc:11:atk down\"] = \"proc:11:atk down\";\n    BuffId[\"proc:11:def down\"] = \"proc:11:def down\";\n    BuffId[\"proc:11:rec down\"] = \"proc:11:rec down\";\n    BuffId[\"proc:11:unknown\"] = \"proc:11:unknown\";\n    BuffId[\"proc:12\"] = \"proc:12\";\n    BuffId[\"proc:13\"] = \"proc:13\";\n    BuffId[\"proc:14\"] = \"proc:14\";\n    BuffId[\"proc:16:fire\"] = \"proc:16:fire\";\n    BuffId[\"proc:16:water\"] = \"proc:16:water\";\n    BuffId[\"proc:16:earth\"] = \"proc:16:earth\";\n    BuffId[\"proc:16:thunder\"] = \"proc:16:thunder\";\n    BuffId[\"proc:16:light\"] = \"proc:16:light\";\n    BuffId[\"proc:16:dark\"] = \"proc:16:dark\";\n    BuffId[\"proc:16:all\"] = \"proc:16:all\";\n    BuffId[\"proc:16:unknown\"] = \"proc:16:unknown\";\n    BuffId[\"proc:17:poison\"] = \"proc:17:poison\";\n    BuffId[\"proc:17:weak\"] = \"proc:17:weak\";\n    BuffId[\"proc:17:sick\"] = \"proc:17:sick\";\n    BuffId[\"proc:17:injury\"] = \"proc:17:injury\";\n    BuffId[\"proc:17:curse\"] = \"proc:17:curse\";\n    BuffId[\"proc:17:paralysis\"] = \"proc:17:paralysis\";\n    BuffId[\"proc:18\"] = \"proc:18\";\n    BuffId[\"proc:19\"] = \"proc:19\";\n    BuffId[\"proc:20\"] = \"proc:20\";\n    BuffId[\"proc:22\"] = \"proc:22\";\n    BuffId[\"proc:23\"] = \"proc:23\";\n    BuffId[\"proc:24:atk\"] = \"proc:24:atk\";\n    BuffId[\"proc:24:def\"] = \"proc:24:def\";\n    BuffId[\"proc:24:rec\"] = \"proc:24:rec\";\n    BuffId[\"proc:26\"] = \"proc:26\";\n    BuffId[\"proc:27\"] = \"proc:27\";\n    BuffId[\"proc:28\"] = \"proc:28\";\n    BuffId[\"proc:29\"] = \"proc:29\";\n    BuffId[\"proc:30:fire\"] = \"proc:30:fire\";\n    BuffId[\"proc:30:water\"] = \"proc:30:water\";\n    BuffId[\"proc:30:earth\"] = \"proc:30:earth\";\n    BuffId[\"proc:30:thunder\"] = \"proc:30:thunder\";\n    BuffId[\"proc:30:light\"] = \"proc:30:light\";\n    BuffId[\"proc:30:dark\"] = \"proc:30:dark\";\n    BuffId[\"proc:30:unknown\"] = \"proc:30:unknown\";\n    BuffId[\"proc:31:flat\"] = \"proc:31:flat\";\n    BuffId[\"proc:31:percent\"] = \"proc:31:percent\";\n    BuffId[\"proc:32:fire\"] = \"proc:32:fire\";\n    BuffId[\"proc:32:water\"] = \"proc:32:water\";\n    BuffId[\"proc:32:earth\"] = \"proc:32:earth\";\n    BuffId[\"proc:32:thunder\"] = \"proc:32:thunder\";\n    BuffId[\"proc:32:light\"] = \"proc:32:light\";\n    BuffId[\"proc:32:dark\"] = \"proc:32:dark\";\n    BuffId[\"proc:32:unknown\"] = \"proc:32:unknown\";\n    BuffId[\"proc:33\"] = \"proc:33\";\n    BuffId[\"proc:34:flat\"] = \"proc:34:flat\";\n    BuffId[\"proc:34:percent\"] = \"proc:34:percent\";\n    BuffId[\"proc:36\"] = \"proc:36\";\n    BuffId[\"proc:37\"] = \"proc:37\";\n    BuffId[\"proc:38:poison\"] = \"proc:38:poison\";\n    BuffId[\"proc:38:weak\"] = \"proc:38:weak\";\n    BuffId[\"proc:38:sick\"] = \"proc:38:sick\";\n    BuffId[\"proc:38:injury\"] = \"proc:38:injury\";\n    BuffId[\"proc:38:curse\"] = \"proc:38:curse\";\n    BuffId[\"proc:38:paralysis\"] = \"proc:38:paralysis\";\n    BuffId[\"proc:38:atk down\"] = \"proc:38:atk down\";\n    BuffId[\"proc:38:def down\"] = \"proc:38:def down\";\n    BuffId[\"proc:38:rec down\"] = \"proc:38:rec down\";\n    BuffId[\"proc:38:unknown\"] = \"proc:38:unknown\";\n    BuffId[\"proc:39:fire\"] = \"proc:39:fire\";\n    BuffId[\"proc:39:water\"] = \"proc:39:water\";\n    BuffId[\"proc:39:earth\"] = \"proc:39:earth\";\n    BuffId[\"proc:39:thunder\"] = \"proc:39:thunder\";\n    BuffId[\"proc:39:light\"] = \"proc:39:light\";\n    BuffId[\"proc:39:dark\"] = \"proc:39:dark\";\n    BuffId[\"proc:39:unknown\"] = \"proc:39:unknown\";\n    BuffId[\"proc:40:poison\"] = \"proc:40:poison\";\n    BuffId[\"proc:40:weak\"] = \"proc:40:weak\";\n    BuffId[\"proc:40:sick\"] = \"proc:40:sick\";\n    BuffId[\"proc:40:injury\"] = \"proc:40:injury\";\n    BuffId[\"proc:40:curse\"] = \"proc:40:curse\";\n    BuffId[\"proc:40:paralysis\"] = \"proc:40:paralysis\";\n    BuffId[\"proc:40:atk down\"] = \"proc:40:atk down\";\n    BuffId[\"proc:40:def down\"] = \"proc:40:def down\";\n    BuffId[\"proc:40:rec down\"] = \"proc:40:rec down\";\n    BuffId[\"proc:40:unknown\"] = \"proc:40:unknown\";\n    BuffId[\"proc:42\"] = \"proc:42\";\n    BuffId[\"proc:43\"] = \"proc:43\";\n    BuffId[\"proc:44\"] = \"proc:44\";\n    BuffId[\"proc:45:bb\"] = \"proc:45:bb\";\n    BuffId[\"proc:45:sbb\"] = \"proc:45:sbb\";\n    BuffId[\"proc:45:ubb\"] = \"proc:45:ubb\";\n    BuffId[\"proc:46\"] = \"proc:46\";\n    BuffId[\"proc:47\"] = \"proc:47\";\n    BuffId[\"proc:48:base\"] = \"proc:48:base\";\n    BuffId[\"proc:48:current\"] = \"proc:48:current\";\n    BuffId[\"proc:48:fixed\"] = \"proc:48:fixed\";\n    BuffId[\"proc:48:unknown\"] = \"proc:48:unknown\";\n    BuffId[\"proc:49\"] = \"proc:49\";\n    BuffId[\"proc:50\"] = \"proc:50\";\n    BuffId[\"proc:51:atk down\"] = \"proc:51:atk down\";\n    BuffId[\"proc:51:def down\"] = \"proc:51:def down\";\n    BuffId[\"proc:51:rec down\"] = \"proc:51:rec down\";\n    BuffId[\"proc:52\"] = \"proc:52\";\n    BuffId[\"proc:53:poison\"] = \"proc:53:poison\";\n    BuffId[\"proc:53:weak\"] = \"proc:53:weak\";\n    BuffId[\"proc:53:sick\"] = \"proc:53:sick\";\n    BuffId[\"proc:53:injury\"] = \"proc:53:injury\";\n    BuffId[\"proc:53:curse\"] = \"proc:53:curse\";\n    BuffId[\"proc:53:paralysis\"] = \"proc:53:paralysis\";\n    BuffId[\"proc:54\"] = \"proc:54\";\n    BuffId[\"UNKNOWN_CONDITIONAL_EFFECT_ID\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n    BuffId[\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\"] = \"UNKNOWN_CONDITIONAL_BUFF_PARAMS\";\n    BuffId[\"buff:12:ko resistance\"] = \"buff:12:ko resistance\";\n})(BuffId || (BuffId = {}));\n","import { BuffSource, BuffId, } from './buff-types';\nimport { SpPassiveType, TargetType, TargetArea, } from '../../datamine-types';\n/**\n * @description Helper function for creating an entry to be used in the `sources`\n * property of {@link IBuff}.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourceEntryFromContext(context) {\n    return `${context.source}-${context.sourceId}`;\n}\n/**\n * @description Helper function for creating an entries array to be used in the `sources`\n * property of {@link IBuff}. It handles setting the order of the sources.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourcesFromContext(context) {\n    const resultArray = Array.isArray(context.previousSources)\n        ? context.previousSources.slice()\n        : [];\n    // Ensure that the current source is at the beginning of the array\n    resultArray.unshift(createSourceEntryFromContext(context));\n    return resultArray;\n}\n/**\n * @description Given the conditions in an extra skill effect, normalize them into\n * a simpler object containing the IDs of each condition type.\n * @param effect Extra skill effect to process conditions from.\n * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n */\nexport function processExtraSkillConditions(effect) {\n    const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n    const aggregate = {\n        units: new Set(),\n        items: new Set(),\n        sphereTypes: new Set(),\n        unknowns: new Set(),\n    };\n    conditions.forEach((condition, index) => {\n        if ('sphere category required (raw)' in condition) {\n            aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n        }\n        else if ('item required' in condition) {\n            condition['item required'].forEach((item) => {\n                aggregate.items.add(item);\n            });\n        }\n        else if ('unit required' in condition) {\n            condition['unit required'].forEach((unit) => {\n                aggregate.units.add(`${unit.id}`);\n            });\n        }\n        else {\n            aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n        }\n    });\n    // filter out properties that have no entries\n    const result = Object.entries(aggregate)\n        .filter((entry) => entry[1].size > 0)\n        .reduce((acc, entry) => {\n        acc[entry[0]] = Array.from(entry[1]);\n        return acc;\n    }, {});\n    return result;\n}\n/**\n * @description Extract the target type and target area of a given passive effect.\n * @param effect Passive effect to extract target data from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns The target data for the given effect and context. There are only two possible values:\n * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n */\nexport function getPassiveTargetData(effect, context) {\n    const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n        (effect.sp_type === SpPassiveType.EnhancePassive);\n    const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n    return {\n        targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n        targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n    };\n}\n/**\n * @description Extract the target type and target area of a given proc effect.\n * @param effect Proc effect to extract target data from.\n * @returns The target data for the given effect and context.\n */\nexport function getProcTargetData(effect) {\n    return {\n        targetArea: effect['target area'],\n        targetType: effect['target type'],\n    };\n}\n/**\n * @description Try to parse the given value into a number or return a value if it is not a number.\n * @param value Value to parse into a number.\n * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n */\nexport function parseNumberOrDefault(value, defaultValue = 0) {\n    return (value !== null && !isNaN(value)) ? +value : defaultValue;\n}\n/**\n * @description Create an object denoting values that cannot be processed yet. To be used\n * in the `value` property of `IBuff` as needed.\n * @param params Array of values that cannot be processed yet.\n * @param startIndex The first index before which we know how to process an effect's values.\n * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n */\nexport function createUnknownParamsValue(params = [], startIndex = 0) {\n    let hasValue = false;\n    const result = params\n        .reduce((acc, value, index) => {\n        if (value && value !== '0') {\n            acc[`param_${startIndex + index}`] = value;\n            hasValue = true;\n        }\n        return acc;\n    }, {});\n    return hasValue ? result : (void 0);\n}\n/**\n * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n * @param source Source value to check.\n * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n * bonded super brave burst, or bonded dual brave burst.\n */\nexport function buffSourceIsBurstType(source) {\n    return !!source && [\n        BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n        BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n    ].includes(source);\n}\nexport function createUnknownParamsEntryFromExtraParams(extraParams, startIndex, injectionContext) {\n    let unknownParams;\n    if (extraParams && extraParams.length > 0) {\n        unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n    }\n    return unknownParams;\n}\nexport function createNoParamsEntry({ originalId, sources }) {\n    return {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    };\n}\n","import { UnitElement, Ailment, TargetArea } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { getProcTargetData, createSourcesFromContext, parseNumberOrDefault, createUnknownParamsValue, buffSourceIsBurstType } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of proc IDs to functions.\n */\nexport function getProcEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const effectDelay = effect['effect delay time(ms)/frame'];\n        return { targetData, sources, effectDelay };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const splitEffectWithUnknownProcParamsProperty = (effect) => {\n        const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n        return splitEffectParams({ params: rawParams });\n    };\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n        effectDelay,\n        sources, value: unknownParams }, targetData));\n    const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n        sources, value: {\n            buffs,\n            duration,\n        } }, targetData));\n    const createNoParamsEntry = ({ originalId, sources, }) => ({\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    });\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n    };\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    /**\n     * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n     * checked if all other known values in the effect are 0.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @param turnDuration Parsed turn duration value to check.\n     * @param injectionContext Object whose main use is for injecting methods in testing.\n     * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n     */\n    const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n        let result = turnDuration !== 0;\n        if (result) {\n            result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n        }\n        return result;\n    };\n    /**\n     * @description Helper function to get attack information common across most attacks from the conversion context.\n     * @param context Given context that may contain attack information like damage frames.\n     * @returns Extracted attack information from the context (with defaults where applicable).\n     */\n    const getAttackInformationFromContext = (context) => {\n        const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n        const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n        return {\n            hits,\n            distribution,\n        };\n    };\n    const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            value = parseParamValue(rawValue);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect[effectValueKey]);\n            turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [buffId],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:1', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'healerRec%': 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            let recX, recY;\n            let extraParams;\n            [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n            params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['heal low'];\n            params.healHigh = effect['heal high'];\n            params['healerRec%'] = effect['rec added% (from healer)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const results = [];\n        if (params.healHigh !== 0 || params.healLow !== 0) {\n            results.push(Object.assign({ id: 'proc:2', originalId,\n                sources,\n                effectDelay, value: params }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'targetRec%': 0,\n            turnDuration: '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let rec;\n            let extraParams;\n            [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['gradual heal low'];\n            params.healHigh = effect['gradual heal high'];\n            params['targetRec%'] = effect['rec added% (from target)'];\n            params.turnDuration = effect['gradual heal turns (8)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n        const results = [];\n        if (hasAnyHealValues) {\n            results.push(Object.assign({ id: 'proc:3', originalId,\n                sources,\n                effectDelay, duration: params.turnDuration, value: {\n                    healLow: params.healLow,\n                    healHigh: params.healHigh,\n                    'targetRec%': params['targetRec%'],\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:3'],\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('bb bc fill' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill']);\n            }\n            if ('bb bc fill%' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n            }\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            element: BuffConditionElement.All,\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    params[statType] = parseNumberOrDefault(effect[effectKey]);\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('6', (effect, context, injectionContext) => {\n        const originalId = '6';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            turnDuration: '0',\n        };\n        const dropRateProperties = ['bc', 'hc', 'item'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.bc = effect['bc drop rate% buff (10)'];\n            params.hc = effect['hc drop rate% buff (9)'];\n            params.item = effect['item drop rate% buff (11)'];\n            params.turnDuration = effect['drop buff rate turns'];\n        }\n        dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n        const results = [];\n        if (hasAnyRates) {\n            dropRateProperties.forEach((key) => {\n                const value = params[key];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:6:${key}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('7', (effect, context, injectionContext) => {\n        const originalId = '7';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHpPercent = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:7', originalId,\n                sources,\n                effectDelay, value: recoveredHpPercent }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const originalId = '8';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatHpBoost = 0;\n        let percentHpBoost = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n            flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n            percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('max hp increase' in effect) {\n                flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n            }\n            if ('max hp% increase' in effect) {\n                percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n            }\n        }\n        const results = [];\n        if (flatHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:flat', originalId,\n                sources,\n                effectDelay, value: flatHpBoost }, targetData));\n        }\n        if (percentHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:percent', originalId,\n                sources,\n                effectDelay, value: percentHpBoost }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        const originalId = '9';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const STAT_TYPE_MAPPING = {\n            0: 'atk',\n            1: 'def',\n            2: 'rec',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const params = {\n            element: BuffConditionElement.All,\n            statReductionEntries: [],\n            turnDuration: 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n            [\n                [statType1, value1, procChance1],\n                [statType2, value2, procChance2],\n            ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                const statType = parseNumberOrDefault(rawStatType) - 1;\n                const value = parseNumberOrDefault(rawValue);\n                const chance = parseNumberOrDefault(rawProcChance);\n                if (statType === 3) { // all stats\n                    params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                        stat,\n                        value,\n                        chance,\n                    })));\n                }\n                else {\n                    params.statReductionEntries.push({\n                        stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                        value,\n                        chance,\n                    });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            ['buff #1', 'buff #2'].forEach((buffKey) => {\n                const entry = effect[buffKey];\n                if (entry) {\n                    const chance = parseNumberOrDefault(entry['proc chance%']);\n                    const keys = Object.keys(entry);\n                    coreStatProperties.forEach((statType) => {\n                        const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                        if (effectKey) {\n                            params.statReductionEntries.push({\n                                stat: statType,\n                                value: parseNumberOrDefault(entry[effectKey]),\n                                chance,\n                            });\n                        }\n                    });\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        let hasAnyValues = false;\n        params.statReductionEntries.forEach(({ stat, value, chance }) => {\n            if (value !== 0 || chance !== 0) {\n                hasAnyValues = true;\n                const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                if (params.element !== BuffConditionElement.All) {\n                    buffEntry.conditions = {\n                        targetElements: [params.element],\n                    };\n                }\n                results.push(buffEntry);\n            }\n        });\n        if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        const originalId = '10';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 8);\n            const extraParams = splitParams.slice(8);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                if (`remove ${ailment}` in effect) { // mainly for items\n                    curedAilments.push(ailment);\n                }\n            });\n            if ('remove all status ailments' in effect) {\n                curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            let params = splitEffectParams(effect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:${ailment}`, originalId,\n            sources,\n            effectDelay, value: chance }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let reviveToHp = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n            reviveToHp = parseNumberOrDefault(rawReviveToHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:12', originalId,\n                sources,\n                effectDelay, value: reviveToHp }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const originalId = '13';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hits = 0;\n        const { distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawHits;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n            hits = parseNumberOrDefault(rawHits);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            hits = parseNumberOrDefault(effect.hits);\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push({\n                id: 'proc:13',\n                originalId,\n                sources,\n                effectDelay,\n                value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }),\n                targetType: targetData.targetType,\n                targetArea: TargetArea.Random,\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n            'drainLow%': '0',\n            'drainHigh%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n            params['drainLow%'] = effect['hp drain% low'];\n            params['drainHigh%'] = effect['hp drain% high'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:14', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let mitigation = 0;\n        let element;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            mitigation = parseNumberOrDefault(rawMitigation);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n            element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n            if (mitigationKey) {\n                mitigation = parseNumberOrDefault(effect[mitigationKey]);\n            }\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (mitigation !== 0) {\n            results.push(Object.assign({ id: `proc:16:${element}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        const originalId = '17';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    resistances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:17:${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:17:${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('18', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'dmg% reduction',\n            effectTurnDurationKey: 'dmg% reduction turns (36)',\n            buffId: 'proc:18',\n            originalId: '18',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'increase bb gauge gradual',\n            effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'proc:19',\n            originalId: '19',\n        });\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const originalId = '20';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let fillLow = 0;\n        let fillHigh = 0;\n        let chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFillLow, rawFillHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(effect['bc fill when attacked low']);\n            fillHigh = parseNumberOrDefault(effect['bc fill when attacked high']);\n            chance = parseNumberOrDefault(effect['bc fill when attacked%']);\n            turnDuration = parseNumberOrDefault(effect['bc fill when attacked turns (38)']);\n        }\n        const hasAnyFillValues = fillLow !== 0 || fillHigh !== 0;\n        const results = [];\n        if (hasAnyFillValues) {\n            results.push(Object.assign({ id: 'proc:20', originalId,\n                sources,\n                effectDelay, duration: turnDuration, conditions: {\n                    whenAttacked: true,\n                }, value: {\n                    fillLow,\n                    fillHigh,\n                    chance,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:20'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('22', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'defense% ignore',\n            effectTurnDurationKey: 'defense% ignore turns (39)',\n            buffId: 'proc:22',\n            originalId: '22',\n        });\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            value = parseNumberOrDefault(params[0]);\n            turnDuration = parseNumberOrDefault(params[6]);\n            const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'proc:23', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:23'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        const originalId = '24';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let turnDuration = 0;\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawConvertedStat, rawTurnDuration;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            const rawConvertedStat = effect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    stats[statType] = effect[effectKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['% converted turns']);\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:24:${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        convertedStat,\n                        value,\n                    } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:24:${statKey}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        const originalId = '26';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n            turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'proc:26', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:26'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        const originalId = '27';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'hpDamageLow%': '0',\n            'hpDamageHigh%': '0',\n            'hpDamageChance%': '0',\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else {\n            params['hpDamageLow%'] = effect['hp% damage low'];\n            params['hpDamageHigh%'] = effect['hp% damage high'];\n            params['hpDamageChance%'] = effect['hp% damage chance%'];\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:27', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        let value = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            value = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['fixed damage']);\n        }\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || value !== 0) {\n            const entry = Object.assign({ id: 'proc:28', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (value !== 0) {\n                entry.value.value = value;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        const originalId = '29';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let attackElements = [];\n        let unknownParams;\n        if (effect.params) {\n            let element1, element2, element3;\n            let extraParams;\n            [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            [element1, element2, element3].forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            });\n        }\n        else {\n            if (Array.isArray(effect['bb elements'])) {\n                attackElements = effect['bb elements'].slice();\n            }\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n            const entry = Object.assign({ id: 'proc:29', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData);\n            if (attackElements.length > 0) {\n                entry.value.elements = attackElements;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let elements = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            elements = params\n                .slice(0, 6)\n                .filter((p) => p !== '0')\n                .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n            turnDuration = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            if ('elements added' in effect) {\n                if (Array.isArray(effect['elements added'])) {\n                    elements = effect['elements added'];\n                }\n                else {\n                    elements = [BuffConditionElement.Unknown];\n                }\n            }\n            turnDuration = parseNumberOrDefault(effect['elements added turns']);\n        }\n        const results = [];\n        const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n        if (elements.length > 0) {\n            elements.forEach((inputElement) => {\n                const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                results.push(Object.assign({ id: `proc:30:${sanitizedElement}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration }, targetData));\n            });\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('increase bb gauge' in effect) {\n                flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n            }\n            // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n            // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        const originalId = '32';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let element;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, ...extraParams] = splitEffectParams(effect);\n            if (rawElement && rawElement !== '0') {\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            const effectElement = effect['set attack element attribute'];\n            if (effectElement) {\n                const sanitizedElement = Object.values(ELEMENT_MAPPING).find((e) => effectElement === e);\n                if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                    element = sanitizedElement;\n                }\n                else {\n                    element = BuffConditionElement.Unknown;\n                }\n            }\n        }\n        const results = [];\n        if (element) {\n            results.push(Object.assign({ id: `proc:32:${element}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            chance = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(effect['clear buff chance%']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:33', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        const originalId = '34';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatDrainLow = 0, flatDrainHigh = 0;\n        let percentDrainLow = 0, percentDrainHigh = 0;\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n            flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n            flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n            percentDrainLow = parseNumberOrDefault(rawPercentLow);\n            percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n            flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n            percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n            percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n            chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n        }\n        const results = [];\n        if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:flat', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: flatDrainLow,\n                    drainHigh: flatDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:percent', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: percentDrainLow,\n                    drainHigh: percentDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'invalidate LS chance%',\n            effectTurnDurationKey: 'invalidate LS turns (60)',\n            buffId: 'proc:36',\n            originalId: '36',\n        });\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const positionX = parseNumberOrDefault(rawPositionX);\n        const positionY = parseNumberOrDefault(rawPositionY);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const results = [];\n        if (summonGroup || summonId) {\n            results.push(Object.assign({ id: 'proc:37', originalId,\n                sources,\n                effectDelay, value: {\n                    summonGroup,\n                    summonId,\n                    positionX,\n                    positionY,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('38', (effect, context, injectionContext) => {\n        const originalId = '38';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 9);\n            const extraParams = splitParams.slice(9);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else if (Array.isArray(effect['ailments cured'])) {\n            const effectAilmentsCured = effect['ailments cured'];\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                if (effectAilmentsCured.includes(effectKey)) {\n                    curedAilments.push(ailment);\n                }\n            });\n            if (effectAilmentsCured.length > curedAilments.length) {\n                const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                for (let i = 0; i < unknownAilmentCount; ++i) {\n                    curedAilments.push(Ailment.Unknown);\n                }\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('39', (effect, context, injectionContext) => {\n        const originalId = '39';\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const elements = [];\n        let mitigation = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            const rawElementsMitigated = params.slice(0, 6);\n            mitigation = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            rawElementsMitigated.forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    elements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            Object.values(ELEMENT_MAPPING).forEach((element) => {\n                if (effect[`mitigate ${element} attacks`]) {\n                    elements.push(element);\n                }\n            });\n            mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n            turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n        }\n        const results = [];\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                results.push(Object.assign({ id: `proc:39:${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            });\n        }\n        else if (mitigation !== 0) {\n            results.push(Object.assign({ id: 'proc:39:unknown', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            for (let index = 0; index < 8; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n            turnDuration = parseNumberOrDefault(params[8]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken% buff';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = `${ailment} buff`;\n                }\n                else {\n                    effectKey = `${ailment}% buff`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:${ailment}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: chance }, targetData)));\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                duration: turnDuration,\n                buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:${a}`),\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const params = {\n            'atkLow%': rawModLow,\n            'atkHigh%': rawModHigh,\n            flatAtk: rawFlatAtk,\n        };\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:42', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        const originalId = '43';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let overdriveFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n            overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n        }\n        const results = [];\n        if (overdriveFill !== 0) {\n            results.push(Object.assign({ id: 'proc:43', originalId,\n                sources,\n                effectDelay, value: overdriveFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const damageParams = {\n            'atk%': '0',\n            flatAtk: '0',\n            'dmg%': '0',\n        };\n        let affectsElement = false, unitIndex = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n            [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n            unitIndex = parseNumberOrDefault(rawUnitIndex);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            damageParams['atk%'] = effect['dot atk%'];\n            damageParams.flatAtk = effect['dot flat atk'];\n            damageParams['dmg%'] = effect['dot dmg%'];\n            affectsElement = !!(effect['dot element affected']);\n            unitIndex = parseNumberOrDefault(effect['dot unit index']);\n            turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n        }\n        const filteredDamageParams = Object.entries(damageParams)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (Object.keys(filteredDamageParams).length > 0) {\n            results.push(Object.assign({ id: 'proc:44', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                    unitIndex }) }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:44'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('45', (effect, context, injectionContext) => {\n        const originalId = '45';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let bb = 0, sbb = 0, ubb = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            bb = parseNumberOrDefault(rawBb);\n            sbb = parseNumberOrDefault(rawSbb);\n            ubb = parseNumberOrDefault(rawUbb);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            bb = parseNumberOrDefault(effect['bb atk% buff']);\n            sbb = parseNumberOrDefault(effect['sbb atk% buff']);\n            ubb = parseNumberOrDefault(effect['ubb atk% buff']);\n            turnDuration = parseNumberOrDefault(effect['buff turns (72)']);\n        }\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:bb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:sbb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:ubb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: ubb }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:45:${type}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('46', (effect, context, injectionContext) => {\n        const originalId = '46';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawHpLow, rawHpHigh, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const hpLow = parseNumberOrDefault(rawHpLow);\n        const hpHigh = parseNumberOrDefault(rawHpHigh);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (hpLow !== 0 || hpHigh !== 0 || hits !== 0 || distribution !== 0) {\n            const entry = Object.assign({ id: 'proc:46', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (hpLow !== 0 || hpHigh !== 0) {\n                entry.value = {\n                    'hpDamageLow%': hpLow,\n                    'hpDamageHigh%': hpHigh,\n                    hits,\n                    distribution,\n                };\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('47', (effect, context, injectionContext) => {\n        const originalId = '47';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'baseAtk%': '0',\n            'addedAtk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let proportionalMode = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawMaxAttackValue, rawProportionalMode;\n            [params['baseAtk%'], rawMaxAttackValue, rawProportionalMode, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            params['addedAtk%'] = parseNumberOrDefault(rawMaxAttackValue) - parseNumberOrDefault(params['baseAtk%']);\n            proportionalMode = rawProportionalMode === '1' ? 'lost' : 'remaining';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['baseAtk%'] = effect['bb base atk%'];\n            params['addedAtk%'] = effect['bb added atk% based on hp'];\n            proportionalMode = effect['bb added atk% proportional to hp'] || 'unknown';\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:47', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { proportionalMode,\n                    hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('48', (effect, context, injectionContext) => {\n        const originalId = '48';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawBasePercentHpLow, rawBasePercentHpHigh, rawCurrentPercentHpLow, rawCurrentPercentHpHigh, rawFixedDamage, rawChance, rawIsLethal, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const basePercentHpLow = parseNumberOrDefault(rawBasePercentHpLow);\n        const basePercentHpHigh = parseNumberOrDefault(rawBasePercentHpHigh);\n        const currentPercentHpLow = parseNumberOrDefault(rawCurrentPercentHpLow);\n        const currentPercentHpHigh = parseNumberOrDefault(rawCurrentPercentHpHigh);\n        const fixedDamage = parseNumberOrDefault(rawFixedDamage);\n        const chance = parseNumberOrDefault(rawChance);\n        const isLethal = rawIsLethal === '1';\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        /**\n         * Current assumption is that each set of parameters results in a separate attack\n         * due to no known skills having more than one of each variant.\n         */\n        const results = [];\n        const createAttackOfType = (type, valueProperties) => (Object.assign({ id: `proc:48:${type}`, originalId,\n            sources,\n            effectDelay, value: Object.assign(Object.assign({}, valueProperties), { isLethal,\n                chance,\n                hits,\n                distribution }) }, targetData));\n        if (basePercentHpLow !== 0 || basePercentHpHigh !== 0) {\n            results.push(createAttackOfType('base', {\n                'hpDamageLow%': basePercentHpLow,\n                'hpDamageHigh%': basePercentHpHigh,\n            }));\n        }\n        if (currentPercentHpLow !== 0 || currentPercentHpHigh !== 0) {\n            results.push(createAttackOfType('current', {\n                'hpDamageLow%': currentPercentHpLow,\n                'hpDamageHigh%': currentPercentHpHigh,\n            }));\n        }\n        if (fixedDamage !== 0) {\n            results.push(createAttackOfType('fixed', {\n                value: fixedDamage,\n            }));\n        }\n        if (results.length === 0 && (hits !== 0 || distribution !== 0)) {\n            results.push(createAttackOfType('unknown', {}));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('49', (effect, context, injectionContext) => {\n        const originalId = '49';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawChance, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const chance = parseNumberOrDefault(rawChance);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:49', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('50', (effect, context, injectionContext) => {\n        const originalId = '50';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawDamageLow, rawDamageHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const reflectedDamageLow = parseNumberOrDefault(rawDamageLow);\n        const reflectedDamageHigh = parseNumberOrDefault(rawDamageHigh);\n        const chance = parseNumberOrDefault(rawChance);\n        const turnDuration = parseNumberOrDefault(rawTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const hasAnyRangeValues = reflectedDamageLow !== 0 || reflectedDamageHigh !== 0;\n        const results = [];\n        if (hasAnyRangeValues) {\n            results.push(Object.assign({ id: 'proc:50', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    'reflectedDamageLow%': reflectedDamageLow,\n                    'reflectedDamageHigh%': reflectedDamageHigh,\n                    chance,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:50'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('51', (effect, context, injectionContext) => {\n        const originalId = '51';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedReductions = [];\n        let debuffTurnDuration = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            [\n                { type: Ailment.AttackReduction, reductionValue: parseNumberOrDefault(params[0]), chance: parseNumberOrDefault(params[3]) },\n                { type: Ailment.DefenseReduction, reductionValue: parseNumberOrDefault(params[1]), chance: parseNumberOrDefault(params[4]) },\n                { type: Ailment.RecoveryReduction, reductionValue: parseNumberOrDefault(params[2]), chance: parseNumberOrDefault(params[5]) },\n            ].forEach(({ type, reductionValue, chance }) => {\n                if (reductionValue !== 0 || chance !== 0) {\n                    inflictedReductions.push({ type, reductionValue, chance });\n                }\n            });\n            debuffTurnDuration = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            [\n                { type: Ailment.AttackReduction, reductionValueKey: 'inflict atk% debuff (2)', chanceKey: 'inflict atk% debuff chance% (74)' },\n                { type: Ailment.DefenseReduction, reductionValueKey: 'inflict def% debuff (4)', chanceKey: 'inflict def% debuff chance% (75)' },\n                { type: Ailment.RecoveryReduction, reductionValueKey: 'inflict rec% debuff (6)', chanceKey: 'inflict rec% debuff chance% (76)' },\n            ].forEach(({ type, reductionValueKey, chanceKey }) => {\n                const reductionValue = parseNumberOrDefault(effect[reductionValueKey]);\n                const chance = parseNumberOrDefault(effect[chanceKey]);\n                if (reductionValue !== 0 || chance !== 0) {\n                    inflictedReductions.push({ type, reductionValue, chance });\n                }\n            });\n            debuffTurnDuration = parseNumberOrDefault(effect['stat% debuff turns']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedReductions.map(({ type, reductionValue, chance }) => (Object.assign({ id: `proc:51:${type}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: {\n                reductionValue,\n                chance,\n                debuffTurnDuration,\n            } }, targetData)));\n        if (results.length === 0 && (isTurnDurationBuff(context, turnDuration, injectionContext) || isTurnDurationBuff(context, debuffTurnDuration, injectionContext))) {\n            // manually create turn duration buff to account for debuff turn duration\n            results.push(Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n                sources, value: {\n                    buffs: [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction].map((a) => `proc:51:${a}`),\n                    duration: turnDuration,\n                    debuffTurnDuration: debuffTurnDuration,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('52', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'bb gauge fill rate% buff',\n            effectTurnDurationKey: 'buff turns (77)',\n            buffId: 'proc:52',\n            originalId: '52',\n        });\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        const originalId = '53';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const inflictionChances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    inflictionChances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['counter inflict ailment turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(inflictionChances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:53:${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:53:${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('54', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'crit multiplier%',\n            effectTurnDurationKey: 'buff turns (84)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            buffId: 'proc:54',\n            originalId: '54',\n        });\n    });\n}\n","import { BuffId } from './buff-types';\nimport { getProcEffectToBuffMapping } from './proc-effect-mapping';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PROC_ID } from '../constants';\nimport isProcEffect from '../isProcEffect';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given proc effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            originalId: id,\n            effectDelay: effect['effect delay time(ms)/frame'],\n            targetType: effect['target type'],\n            targetArea: effect['target area'],\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given proc effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Proc effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given proc effect object.\n */\nexport default function convertProcEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isProcEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId } from \"./buff-types\";\nimport { createSourcesFromContext, parseNumberOrDefault, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from \"./_helpers\";\nlet mapping;\nexport function getConditionalEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\nfunction setMapping(map) {\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, }) => ({\n        id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n        originalId,\n        sources,\n        value: unknownParams,\n    });\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n            }));\n        }\n    };\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const [rawRecoverValue, ...extraParams] = effect.params.split('&');\n        const recoverValue = parseNumberOrDefault(rawRecoverValue);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [{\n                id: 'buff:12:ko resistance',\n                originalId,\n                sources,\n                duration: effect.turnDuration,\n                value: recoverValue,\n            }];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n        });\n        return results;\n    });\n}\n","import { BuffId } from \"./buff-types\";\nimport { getConditionalEffectToBuffMapping } from \"./conditional-effect-mapping\";\nimport { KNOWN_CONDITIONAL_ID } from \"../constants\";\nimport { createSourcesFromContext } from \"./_helpers\";\nfunction defaultConversionFunction(effect, context) {\n    const id = effect.id || KNOWN_CONDITIONAL_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given conditional effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Conditional effect to extract buffs from\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertConditionalEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const conversionFunction = getConditionalEffectToBuffMapping(context.reloadMapping).get(effect.id);\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { UnitElement, UnitType, Ailment, UnitGender } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { createSourcesFromContext, processExtraSkillConditions, getPassiveTargetData, createUnknownParamsValue, parseNumberOrDefault } from './_helpers';\nimport convertConditionalEffectToBuffs from './convertConditionalEffectToBuffs';\nlet mapping;\n/**\n * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of passive IDs to functions.\n */\nexport function getPassiveEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n        X: BuffConditionElement.OmniParadigm,\n    };\n    const TYPE_MAPPING = {\n        1: UnitType.Lord,\n        2: UnitType.Anima,\n        3: UnitType.Breaker,\n        4: UnitType.Guardian,\n        5: UnitType.Oracle,\n        6: UnitType.Rex,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n    const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n    const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n        const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        return { conditionInfo, targetData, sources };\n    };\n    const convertConditionalEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n        const conversionFunction = (injectionContext && injectionContext.convertConditionalEffectToBuffs) || convertConditionalEffectToBuffs;\n        return conversionFunction(effect, context);\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n        sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n    const createNoParamsEntry = ({ originalId, sources, }) => ({\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    });\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n    };\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    let ThresholdType;\n    (function (ThresholdType) {\n        ThresholdType[\"Hp\"] = \"hp\";\n        ThresholdType[\"Bb\"] = \"bb gauge\";\n    })(ThresholdType || (ThresholdType = {}));\n    const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n        return {\n            threshold: parseNumberOrDefault(rawThreshold),\n            requireAbove: rawRequireAboveFlag === '1',\n            type: thresholdType,\n        };\n    };\n    const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n        let threshold = 0, requireAbove = false;\n        if (`${thresholdType} above % ${suffix}` in effect) {\n            threshold = parseNumberOrDefault(effect[`${thresholdType} above % ${suffix}`]);\n            requireAbove = true;\n        }\n        else {\n            threshold = parseNumberOrDefault(effect[`${thresholdType} below % ${suffix}`]);\n            requireAbove = false;\n        }\n        return { threshold, requireAbove, type: thresholdType };\n    };\n    const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n        let conditions;\n        if (type === ThresholdType.Hp) {\n            if (requireAbove) {\n                conditions = { hpGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { hpLessThanOrEqualTo: threshold };\n            }\n        }\n        else if (type === ThresholdType.Bb) {\n            if (requireAbove) {\n                conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { bbGaugeLessThanOrEqualTo: threshold };\n            }\n        }\n        return conditions;\n    };\n    const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let value = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseParamValue(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect[effectKey]);\n        }\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let valueLow, valueHigh, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            valueLow = parseParamValue(rawLowValue);\n            valueHigh = parseParamValue(rawHighValue);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n            valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n            chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n        }\n        const results = [];\n        if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources, value: {\n                    [buffKeyLow]: valueLow,\n                    [buffKeyHigh]: valueHigh,\n                    chance,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            elements: [],\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let element1, element2;\n            [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            [element1, element2].forEach((elementValue) => {\n                if (elementValue && elementValue !== '0') {\n                    stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            if (Array.isArray(typedEffect['elements buffed'])) {\n                stats.elements = typedEffect['elements buffed'];\n            }\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId,\n            sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n        if (stats.elements.length > 0) {\n            stats.elements.forEach((element) => {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                    }\n                });\n            });\n        }\n        else {\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                }\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            unitType: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let unitType;\n            [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            if (unitType && unitType !== '0') {\n                stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.unitType = typedEffect['unit type buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetUnitType = stats.unitType || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:3:${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:4:${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let element;\n        let mitigation = '0';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n            if (element !== BuffConditionElement.Unknown) {\n                mitigation = typedEffect[`${element} resist%`];\n            }\n        }\n        const value = parseNumberOrDefault(mitigation);\n        if (value !== 0) {\n            results.push(Object.assign({ id: `passive:5:${element}`, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'dmg% mitigation',\n            buffId: 'passive:8',\n            originalId: '8',\n        });\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bc fill per turn',\n            buffId: 'passive:9',\n            originalId: '9',\n        });\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'hc effectiveness%',\n            buffId: 'passive:10',\n            originalId: '10',\n        });\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:11:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                const entry = Object.assign({ id: `passive:12:${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '13',\n            effectKeyLow: 'bc fill on enemy defeat low',\n            effectKeyHigh: 'bc fill on enemy defeat high',\n            effectKeyChance: 'bc fill on enemy defeat%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            buffId: 'passive:13',\n        });\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageReduction, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            damageReduction = parseNumberOrDefault(rawReduction);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n            chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n        }\n        const results = [];\n        if (damageReduction !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:14', originalId,\n                sources, value: {\n                    value: damageReduction,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('15', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '15',\n            effectKeyLow: 'hp% recover on enemy defeat low',\n            effectKeyHigh: 'hp% recover on enemy defeat high',\n            effectKeyChance: 'hp% recover on enemy defeat chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            defaultEffectChance: 100,\n            buffId: 'passive:15',\n        });\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n            healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:16', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '17',\n            effectKeyLow: 'hp drain% low',\n            effectKeyHigh: 'hp drain% high',\n            effectKeyChance: 'hp drain chance%',\n            buffKeyLow: 'drainHealLow',\n            buffKeyHigh: 'drainHealHigh',\n            buffId: 'passive:17',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        const originalId = '19';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:19:${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const originalId = '20';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            let params = splitEffectParams(typedEffect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(typedEffect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = [];\n        inflictedAilments.forEach(({ ailment, chance }) => {\n            if (chance !== 0) {\n                results.push(Object.assign({ id: `passive:20:${ailment}`, originalId,\n                    sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('21', (effect, context, injectionContext) => {\n        const originalId = '21';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let rawDuration, extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['first x turns atk% (1)'];\n            stats.def = typedEffect['first x turns def% (3)'];\n            stats.rec = typedEffect['first x turns rec% (5)'];\n            stats.crit = typedEffect['first x turns crit% (7)'];\n            turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:21:${stat}`, originalId,\n                    sources,\n                    value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let fillLow, fillHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n            fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n        }\n        const results = [];\n        if (fillLow !== 0 || fillHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:23', originalId,\n                sources, value: {\n                    fillLow,\n                    fillHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '24',\n            effectKeyLow: 'dmg% to hp when attacked low',\n            effectKeyHigh: 'dmg% to hp when attacked high',\n            effectKeyChance: 'dmg% to hp when attacked chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:24',\n        });\n    });\n    map.set('25', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '25',\n            effectKeyLow: 'bc fill when attacked low',\n            effectKeyHigh: 'bc fill when attacked high',\n            effectKeyChance: 'bc fill when attacked%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:25',\n        });\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '26',\n            effectKeyLow: 'dmg% reflect low',\n            effectKeyHigh: 'dmg% reflect high',\n            effectKeyChance: 'dmg% reflect chance%',\n            buffKeyLow: 'damageReflectLow',\n            buffKeyHigh: 'damageReflectHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:26',\n        });\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'target% chance',\n            buffId: 'passive:27',\n            originalId: '27',\n        });\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let value = 0;\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseNumberOrDefault(rawValue);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect['target% chance']);\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n        }\n        const results = [];\n        if (value !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            const entry = Object.assign({ id: 'passive:28', originalId,\n                sources,\n                value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'ignore def%',\n            buffId: 'passive:29',\n            originalId: '29',\n        });\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:30:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let sparkDamageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawSparkDamageBoost;\n            [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n            });\n        }\n        const results = [];\n        if (sparkDamageBoost !== 0) {\n            results.push(Object.assign({ id: 'passive:31:damage', originalId,\n                sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:31:${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bb gauge fill rate%',\n            buffId: 'passive:32',\n            originalId: '32',\n        });\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh, addedRec;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n            healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n            addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:33', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                    'addedRec%': addedRec,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'crit multiplier%',\n            buffId: 'passive:34',\n            originalId: '34',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n        });\n    });\n    map.set('35', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '35',\n            effectKeyLow: 'bc fill when attacking low',\n            effectKeyHigh: 'bc fill when attacking high',\n            effectKeyChance: 'bc fill when attacking%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onNormalAttack: true }),\n            buffId: 'passive:35',\n        });\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        const originalId = '36';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let additionalActions = 0, damageModifier = 0, chance = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            additionalActions = parseNumberOrDefault(rawAdditionalActions);\n            damageModifier = parseNumberOrDefault(rawDamageModifier);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n        }\n        const results = [];\n        if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:36', originalId,\n                sources, value: {\n                    additionalActions,\n                    damageModifier,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let hitIncreasePerHit = 0, extraHitDamage = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'passive:37', originalId,\n                sources, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawConvertedStat;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const rawConvertedStat = typedEffect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            coreStatProperties.forEach((statType) => {\n                const effectKey = `${statType}% buff`;\n                if (effectKey in typedEffect) {\n                    stats[statType] = typedEffect[effectKey];\n                }\n            });\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:40:${stat}`, originalId,\n                    sources, value: {\n                        convertedStat,\n                        value,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('41', (effect, context, injectionContext) => {\n        const originalId = '41';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            minimumElements: '0',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.minimumElements = typedEffect['unique elements required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const minimumElements = parseNumberOrDefault(stats.minimumElements);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:41:${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minumumUniqueElements: minimumElements }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const GENDER_MAPPING = {\n            0: UnitGender.Other,\n            1: UnitGender.Male,\n            2: UnitGender.Female,\n        };\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            gender: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawGender;\n            [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.gender = typedEffect['gender required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetGender = stats.gender || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:42:${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'take 1 dmg%',\n            buffId: 'passive:43',\n            originalId: '43',\n        });\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp buff'];\n            stats.atk = typedEffect['atk buff'];\n            stats.def = typedEffect['def buff'];\n            stats.rec = typedEffect['rec buff'];\n            stats.crit = typedEffect['crit buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:44:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('45', (effect, context, injectionContext) => {\n        const originalId = '45';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let baseResist = 0, buffResist = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n            baseResist = parseNumberOrDefault(rawBaseResist);\n            buffResist = parseNumberOrDefault(rawBuffResist);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            baseResist = parseNumberOrDefault(typedEffect['base crit% resist']);\n            buffResist = parseNumberOrDefault(typedEffect['buff crit% resist']);\n        }\n        const results = [];\n        if (baseResist !== 0) {\n            results.push(Object.assign({ id: 'passive:45:base', originalId,\n                sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (buffResist !== 0) {\n            results.push(Object.assign({ id: 'passive:45:buff', originalId,\n                sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('46', (effect, context, injectionContext) => {\n        const originalId = '46';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const availableStats = ['atk', 'def', 'rec'];\n        const stats = [];\n        let proportionalMode = 'unknown';\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            availableStats.forEach((stat, index) => {\n                const baseValue = parseNumberOrDefault(params[index * 2]);\n                const addedValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                if (baseValue !== 0 || addedValue !== 0) {\n                    stats.push({\n                        stat,\n                        baseValue,\n                        addedValue,\n                    });\n                }\n            });\n            proportionalMode = params[6] === '1' ? 'lost' : 'remaining';\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            availableStats.forEach((stat) => {\n                const baseValue = parseNumberOrDefault(typedEffect[`${stat}% base buff`]);\n                const addedValue = parseNumberOrDefault(typedEffect[`${stat}% extra buff based on hp`]);\n                if (baseValue !== 0 || addedValue !== 0) {\n                    stats.push({\n                        stat,\n                        baseValue,\n                        addedValue,\n                    });\n                }\n            });\n            proportionalMode = typedEffect['buff proportional to hp'] || 'unknown';\n        }\n        const results = stats.map(({ stat, baseValue, addedValue }) => (Object.assign({ id: `passive:46:${stat}`, originalId,\n            sources, value: {\n                baseValue,\n                addedValue,\n                proportionalMode,\n            }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('47', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '47',\n            effectKeyLow: 'bc fill on spark low',\n            effectKeyHigh: 'bc fill on spark high',\n            effectKeyChance: 'bc fill on spark%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'passive:47',\n        });\n    });\n    map.set('48', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'reduced bb bc cost%',\n            buffId: 'passive:48',\n            originalId: '48',\n        });\n    });\n    map.set('49', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '49',\n            effectKeyLow: 'reduced bb bc use% low',\n            effectKeyHigh: 'reduced bb bc use% high',\n            effectKeyChance: 'reduced bb bc use chance%',\n            buffKeyLow: 'reducedUseLow%',\n            buffKeyHigh: 'reducedUseHigh%',\n            buffId: 'passive:49',\n        });\n    });\n    map.set('50', (effect, context, injectionContext) => {\n        const originalId = '50';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let damageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            damageBoost = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`${element} units do extra elemental weakness dmg`]);\n            damageBoost = parseNumberOrDefault(typedEffect['elemental weakness multiplier%']);\n        }\n        let results = [];\n        if (damageBoost !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:50:${element}`, originalId,\n                sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:50:unknown', originalId,\n                    sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        const originalId = '53';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let ResistType;\n        (function (ResistType) {\n            ResistType[\"CriticalDamage\"] = \"critical-damage\";\n            ResistType[\"ElementDamage\"] = \"element-damage\";\n            ResistType[\"CriticalHitRate\"] = \"critical-rate\";\n        })(ResistType || (ResistType = {}));\n        const resistances = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseCritChanceResist, rawBuffCritChanceResist, ...extraParams] = splitEffectParams(typedEffect);\n            [\n                { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                { resistType: ResistType.CriticalHitRate, base: parseNumberOrDefault(rawBaseCritChanceResist), buff: parseNumberOrDefault(rawBuffCritChanceResist) },\n            ].forEach(({ resistType, base, buff }) => {\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            [\n                { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist%', buffKey: 'crit dmg buffed damage resist%' },\n                { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist%', buffKey: 'strong buffed element damage resist%' },\n                { resistType: ResistType.CriticalHitRate, baseKey: 'crit chance base resist%', buffKey: 'crit chance buffed resist%' },\n            ].forEach(({ resistType, baseKey, buffKey }) => {\n                const base = parseNumberOrDefault(typedEffect[baseKey]);\n                const buff = parseNumberOrDefault(typedEffect[buffKey]);\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n        }\n        const results = [];\n        resistances.forEach(({ resistType, base, buff }) => {\n            if (base !== 0) {\n                results.push(Object.assign({ id: `passive:53:${resistType}-base`, originalId,\n                    sources, value: base, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buff !== 0) {\n                results.push(Object.assign({ id: `passive:53:${resistType}-buff`, originalId,\n                    sources, value: buff, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('55', (effect, context, injectionContext) => {\n        const originalId = '55';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const params = splitEffectParams(typedEffect);\n        const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n            id: params[0],\n            params: params[1],\n            turnDuration: parseNumberOrDefault(params[5]),\n        }, context, injectionContext);\n        const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], params[4], ThresholdType.Hp);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(['0,0', params[2], '0,0', ...params.slice(5)], 0, injectionContext);\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        const results = [];\n        if (triggeredBuffs.length > 0) {\n            results.push(Object.assign({ id: 'passive:55:hp condition', originalId,\n                sources, value: triggeredBuffs, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport isPassiveEffect from '../isPassiveEffect';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PASSIVE_ID } from '../constants';\nimport { getPassiveEffectToBuffMapping } from './passive-effect-mapping';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given passive effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given passive effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Passive effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertPassiveEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isPassiveEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId, UnitStat, BuffStackType, IconId, } from './buff-types';\nimport { TargetArea } from '../../datamine-types';\nexport const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'TURN_DURATION_MODIFICATION': {\n        id: BuffId.TURN_DURATION_MODIFICATION,\n        name: 'Passive Turn Duration Modification',\n        stat: UnitStat.turnDurationModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [\n            (buff && buff.value &&\n                buff.value.duration &&\n                buff.value.duration < 0) ?\n                IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n        ],\n    }, 'NO_PARAMS_SPECIFIED': {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        name: 'No Parameters Specified',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PASSIVE_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n        name: 'Unknown Passive Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n        name: 'Unknown Passive Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'passive:1:hp': {\n        id: BuffId['passive:1:hp'],\n        name: 'Passive HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:1:atk': {\n        id: BuffId['passive:1:atk'],\n        name: 'Passive Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:1:def': {\n        id: BuffId['passive:1:def'],\n        name: 'Passive Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:1:rec': {\n        id: BuffId['passive:1:rec'],\n        name: 'Passive Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:1:crit': {\n        id: BuffId['passive:1:crit'],\n        name: 'Passive Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    } }, (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:2:hp': {\n            id: BuffId['passive:2:hp'],\n            name: 'Passive Elemental HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:2:atk': {\n            id: BuffId['passive:2:atk'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:2:def': {\n            id: BuffId['passive:2:def'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:2:rec': {\n            id: BuffId['passive:2:rec'],\n            name: 'Passive Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:2:crit': {\n            id: BuffId['passive:2:crit'],\n            name: 'Passive Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let unitType = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    unitType = buff.conditions.targetUnitType || '';\n                }\n            }\n            if (typeof unitType !== 'string' || !unitType) {\n                unitType = 'unknown';\n            }\n            let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n            if (!unitType || !(iconKey in IconId)) {\n                iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:3:hp': {\n            id: BuffId['passive:3:hp'],\n            name: 'Passive Type-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:3:atk': {\n            id: BuffId['passive:3:atk'],\n            name: 'Passive Type-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:3:def': {\n            id: BuffId['passive:3:def'],\n            name: 'Passive Type-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:3:rec': {\n            id: BuffId['passive:3:rec'],\n            name: 'Passive Type-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:3:crit': {\n            id: BuffId['passive:3:crit'],\n            name: 'Passive Type-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:4:poison': {\n        id: BuffId['passive:4:poison'],\n        name: 'Passive Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:4:weak': {\n        id: BuffId['passive:4:weak'],\n        name: 'Passive Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:4:sick': {\n        id: BuffId['passive:4:sick'],\n        name: 'Passive Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:4:injury': {\n        id: BuffId['passive:4:injury'],\n        name: 'Passive Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:4:curse': {\n        id: BuffId['passive:4:curse'],\n        name: 'Passive Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:4:paralysis': {\n        id: BuffId['passive:4:paralysis'],\n        name: 'Passive Paralysis Resist',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:5:fire': {\n        id: BuffId['passive:5:fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:5:water': {\n        id: BuffId['passive:5:water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:5:earth': {\n        id: BuffId['passive:5:earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:5:thunder': {\n        id: BuffId['passive:5:thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:5:light': {\n        id: BuffId['passive:5:light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:5:dark': {\n        id: BuffId['passive:5:dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:5:unknown': {\n        id: BuffId['passive:5:unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:8': {\n        id: BuffId['passive:8'],\n        name: 'Passive Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:9': {\n        id: BuffId['passive:9'],\n        name: 'Passive Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:10': {\n        id: BuffId['passive:10'],\n        name: 'Passive HC Efficacy',\n        stat: UnitStat.hcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HCREC],\n    }, 'passive:11:atk': {\n        id: BuffId['passive:11:atk'],\n        name: 'Passive HP-Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n    }, 'passive:11:def': {\n        id: BuffId['passive:11:def'],\n        name: 'Passive HP-Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n    }, 'passive:11:rec': {\n        id: BuffId['passive:11:rec'],\n        name: 'Passive HP-Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n    }, 'passive:11:crit': {\n        id: BuffId['passive:11:crit'],\n        name: 'Passive HP-Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n    }, 'passive:12:bc': {\n        id: BuffId['passive:12:bc'],\n        name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n    }, 'passive:12:hc': {\n        id: BuffId['passive:12:hc'],\n        name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n    }, 'passive:12:item': {\n        id: BuffId['passive:12:item'],\n        name: 'Passive HP-Conditional Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n    }, 'passive:12:zel': {\n        id: BuffId['passive:12:zel'],\n        name: 'Passive HP-Conditional Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n    }, 'passive:12:karma': {\n        id: BuffId['passive:12:karma'],\n        name: 'Passive HP-Conditional Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n    }, 'passive:13': {\n        id: BuffId['passive:13'],\n        name: 'Passive BC Fill on Enemy Defeat',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:14': {\n        id: BuffId['passive:14'],\n        name: 'Passive Damage Reduction (Chance)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:15': {\n        id: BuffId['passive:15'],\n        name: 'Passive Heal on Enemy Defeat',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:16': {\n        id: BuffId['passive:16'],\n        name: 'Passive Heal on Battle Win',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:17': {\n        id: BuffId['passive:17'],\n        name: 'HP Absorption',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPABS],\n    }, 'passive:19:bc': {\n        id: BuffId['passive:19:bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'passive:19:hc': {\n        id: BuffId['passive:19:hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'passive:19:item': {\n        id: BuffId['passive:19:item'],\n        name: 'Passive Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'passive:19:zel': {\n        id: BuffId['passive:19:zel'],\n        name: 'Passive Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n    }, 'passive:19:karma': {\n        id: BuffId['passive:19:karma'],\n        name: 'Passive Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n    }, 'passive:20:poison': {\n        id: BuffId['passive:20:poison'],\n        name: 'Passive Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'passive:20:weak': {\n        id: BuffId['passive:20:weak'],\n        name: 'Passive Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'passive:20:sick': {\n        id: BuffId['passive:20:sick'],\n        name: 'Passive Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'passive:20:injury': {\n        id: BuffId['passive:20:injury'],\n        name: 'Passive Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'passive:20:curse': {\n        id: BuffId['passive:20:curse'],\n        name: 'Passive Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'passive:20:paralysis': {\n        id: BuffId['passive:20:paralysis'],\n        name: 'Passive Paralysis Infliction',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'passive:20:atk down': {\n        id: BuffId['passive:20:atk down'],\n        name: 'Passive Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'passive:20:def down': {\n        id: BuffId['passive:20:def down'],\n        name: 'Passive Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'passive:20:rec down': {\n        id: BuffId['passive:20:rec down'],\n        name: 'Passive Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'passive:20:unknown': {\n        id: BuffId['passive:20:unknown'],\n        name: 'Passive Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'passive:21:atk': {\n        id: BuffId['passive:21:atk'],\n        name: 'Attack Boost for X Turns',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:21:def': {\n        id: BuffId['passive:21:def'],\n        name: 'Defense Boost for X Turns',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:21:rec': {\n        id: BuffId['passive:21:rec'],\n        name: 'Recovery Boost for X Turns',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:21:crit': {\n        id: BuffId['passive:21:crit'],\n        name: 'Critical Hit Rate Boost for X Turns',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:23': {\n        id: BuffId['passive:23'],\n        name: 'Passive BC Fill on Battle Win',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:24': {\n        id: BuffId['passive:24'],\n        name: 'Passive Heal when Attacked',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'passive:25': {\n        id: BuffId['passive:25'],\n        name: 'Passive BC Fill when Attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:26': {\n        id: BuffId['passive:26'],\n        name: 'Passive Damage Counter (Chance)',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'passive:27': {\n        id: BuffId['passive:27'],\n        name: 'Passive Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n    }, 'passive:28': {\n        id: BuffId['passive:28'],\n        name: 'Passive HP-Conditional Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n    }, 'passive:29': {\n        id: BuffId['passive:29'],\n        name: 'Passive Defense Ignore (Chance)',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'passive:30:atk': {\n        id: BuffId['passive:30:atk'],\n        name: 'Passive BB Gauge Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n    }, 'passive:30:def': {\n        id: BuffId['passive:30:def'],\n        name: 'Passive BB Gauge Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n    }, 'passive:30:rec': {\n        id: BuffId['passive:30:rec'],\n        name: 'Passive BB Gauge Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n    }, 'passive:30:crit': {\n        id: BuffId['passive:30:crit'],\n        name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n    }, 'passive:31:damage': {\n        id: BuffId['passive:31:damage'],\n        name: 'Passive Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'passive:31:bc': {\n        id: BuffId['passive:31:bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n    }, 'passive:31:hc': {\n        id: BuffId['passive:31:hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n    }, 'passive:31:item': {\n        id: BuffId['passive:31:item'],\n        name: 'Passive Item Drop Rate Boost during Spark',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n    }, 'passive:31:zel': {\n        id: BuffId['passive:31:zel'],\n        name: 'Passive Zel Drop Rate Boost during Spark',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n    }, 'passive:31:karma': {\n        id: BuffId['passive:31:karma'],\n        name: 'Passive Karma Drop Rate Boost during Spark',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n    }, 'passive:32': {\n        id: BuffId['passive:32'],\n        name: 'Passive BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'passive:33': {\n        id: BuffId['passive:33'],\n        name: 'Passive Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:34': {\n        id: BuffId['passive:34'],\n        name: 'Passive Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'passive:35': {\n        id: BuffId['passive:35'],\n        name: 'Passive BC Fill when Normal Attacking',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:36': {\n        id: BuffId['passive:36'],\n        name: 'Passive Extra Action',\n        stat: UnitStat.extraAction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DBLSTRIKE],\n    }, 'passive:37': {\n        id: BuffId['passive:37'],\n        name: 'Passive Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'passive:40:atk': {\n        id: BuffId['passive:40:atk'],\n        name: 'Passive Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'passive:40:def': {\n        id: BuffId['passive:40:def'],\n        name: 'Passive Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'passive:40:rec': {\n        id: BuffId['passive:40:rec'],\n        name: 'Passive Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'passive:41:hp': {\n        id: BuffId['passive:41:hp'],\n        name: 'Passive Element Squad-based HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n    }, 'passive:41:atk': {\n        id: BuffId['passive:41:atk'],\n        name: 'Passive Element Squad-based Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n    }, 'passive:41:def': {\n        id: BuffId['passive:41:def'],\n        name: 'Passive Element Squad-based Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n    }, 'passive:41:rec': {\n        id: BuffId['passive:41:rec'],\n        name: 'Passive Element Squad-based Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n    }, 'passive:41:crit': {\n        id: BuffId['passive:41:crit'],\n        name: 'Passive Element Squad-based Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let gender = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    gender = buff.conditions.targetGender || '';\n                }\n            }\n            if (typeof gender !== 'string' || !gender) {\n                gender = 'unknown';\n            }\n            let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n            if (!gender || !(iconKey in IconId)) {\n                iconKey = `BUFF_GENDER${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:42:hp': {\n            id: BuffId['passive:42:hp'],\n            name: 'Passive Gender-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:42:atk': {\n            id: BuffId['passive:42:atk'],\n            name: 'Passive Gender-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:42:def': {\n            id: BuffId['passive:42:def'],\n            name: 'Passive Gender-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:42:rec': {\n            id: BuffId['passive:42:rec'],\n            name: 'Passive Gender-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:42:crit': {\n            id: BuffId['passive:42:crit'],\n            name: 'Passive Gender-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:43': {\n        id: BuffId['passive:43'],\n        name: 'Passive Damage Reduction To One (Chance)',\n        stat: UnitStat.reduceDamageToOne,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n    }, 'passive:44:hp': {\n        id: BuffId['passive:44:hp'],\n        name: 'Passive Flat HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:44:atk': {\n        id: BuffId['passive:44:atk'],\n        name: 'Passive Flat Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:44:def': {\n        id: BuffId['passive:44:def'],\n        name: 'Passive Flat Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:44:rec': {\n        id: BuffId['passive:44:rec'],\n        name: 'Passive Flat Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:44:crit': {\n        id: BuffId['passive:44:crit'],\n        name: 'Passive Flat Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:45:base': {\n        id: BuffId['passive:45:base'],\n        name: 'Passive Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:45:buff': {\n        id: BuffId['passive:45:buff'],\n        name: 'Passive Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:46:atk': {\n        id: BuffId['passive:46:atk'],\n        name: 'Passive Attack Boost Relative to HP',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDATKDOWN : IconId.BUFF_HPSCALEDATKUP],\n    }, 'passive:46:def': {\n        id: BuffId['passive:46:def'],\n        name: 'Passive Defense Boost Relative to HP',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDDEFDOWN : IconId.BUFF_HPSCALEDDEFUP],\n    }, 'passive:46:rec': {\n        id: BuffId['passive:46:rec'],\n        name: 'Passive Recovery Boost Relative to HP',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDRECDOWN : IconId.BUFF_HPSCALEDRECUP],\n    }, 'passive:47': {\n        id: BuffId['passive:47'],\n        name: 'Passive BC Fill on Spark',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKBBUP],\n    }, 'passive:48': {\n        id: BuffId['passive:48'],\n        name: 'Passive BC Cost Reduction',\n        stat: UnitStat.bcCostReduction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBCOST_REDUCTION],\n    }, 'passive:49': {\n        id: BuffId['passive:49'],\n        name: 'Passive BB Gauge Consumption Reduction',\n        stat: UnitStat.bbGaugeConsumptionReduction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:50:fire': {\n        id: BuffId['passive:50:fire'],\n        name: 'Passive Fire Elemental Damage Boost',\n        stat: UnitStat.fireElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGUP],\n    }, 'passive:50:water': {\n        id: BuffId['passive:50:water'],\n        name: 'Passive Water Elemental Damage Boost',\n        stat: UnitStat.waterElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGUP],\n    }, 'passive:50:earth': {\n        id: BuffId['passive:50:earth'],\n        name: 'Passive Earth Elemental Damage Boost',\n        stat: UnitStat.earthElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGUP],\n    }, 'passive:50:thunder': {\n        id: BuffId['passive:50:thunder'],\n        name: 'Passive Thunder Elemental Damage Boost',\n        stat: UnitStat.thunderElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGUP],\n    }, 'passive:50:light': {\n        id: BuffId['passive:50:light'],\n        name: 'Passive Light Elemental Damage Boost',\n        stat: UnitStat.lightElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGUP],\n    }, 'passive:50:dark': {\n        id: BuffId['passive:50:dark'],\n        name: 'Passive Dark Elemental Damage Boost',\n        stat: UnitStat.darkElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGUP],\n    }, 'passive:50:unknown': {\n        id: BuffId['passive:50:unknown'],\n        name: 'Passive Elemental Damage Boost (Unspecified Element)',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGUP],\n    }, 'passive:53:critical-damage-base': {\n        id: BuffId['passive:53:critical-damage-base'],\n        name: 'Passive Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:critical-damage-buff': {\n        id: BuffId['passive:53:critical-damage-buff'],\n        name: 'Passive Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:element-damage-base': {\n        id: BuffId['passive:53:element-damage-base'],\n        name: 'Passive Base Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'passive:53:element-damage-buff': {\n        id: BuffId['passive:53:element-damage-buff'],\n        name: 'Passive Buffed Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'passive:53:critical-rate-base': {\n        id: BuffId['passive:53:critical-rate-base'],\n        name: 'Passive Base Critical Hit Rate Reduction',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:critical-rate-buff': {\n        id: BuffId['passive:53:critical-rate-buff'],\n        name: 'Passive Buffed Critical Hit Rate Reduction',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:55:hp condition': {\n        id: BuffId['passive:55:hp condition'],\n        name: 'Passive Conditional Effect based on HP Threshold',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'UNKNOWN_PROC_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n        name: 'Unknown Proc Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n        name: 'Unknown Proc Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'proc:1': {\n        id: BuffId['proc:1'],\n        name: 'Regular Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:2': {\n        id: BuffId['proc:2'],\n        name: 'Burst Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:3': {\n        id: BuffId['proc:3'],\n        name: 'Active Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:4:flat': {\n        id: BuffId['proc:4:flat'],\n        name: 'Burst BC Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:4:percent': {\n        id: BuffId['proc:4:percent'],\n        name: 'Burst BC Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:5:atk': {\n            id: BuffId['proc:5:atk'],\n            name: 'Active Regular/Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:5:def': {\n            id: BuffId['proc:5:def'],\n            name: 'Active Regular/Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:5:rec': {\n            id: BuffId['proc:5:rec'],\n            name: 'Active Regular/Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:5:crit': {\n            id: BuffId['proc:5:crit'],\n            name: 'Active Regular/Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'proc:6:bc': {\n        id: BuffId['proc:6:bc'],\n        name: 'Active Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'proc:6:hc': {\n        id: BuffId['proc:6:hc'],\n        name: 'Active Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'proc:6:item': {\n        id: BuffId['proc:6:item'],\n        name: 'Active Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'proc:7': {\n        id: BuffId['proc:7'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:8:flat': {\n        id: BuffId['proc:8:flat'],\n        name: 'Max HP Boost (Flat Amount)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    }, 'proc:8:percent': {\n        id: BuffId['proc:8:percent'],\n        name: 'Max HP Boost (Percentage)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'DOWN'; // default to down since these are reduction buffs\n            if (buff) {\n                if (buff.value && buff.value > 0) {\n                    polarity = 'UP';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:9:atk': {\n            id: BuffId['proc:9:atk'],\n            name: 'Active Regular/Elemental Attack Reduction',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:9:def': {\n            id: BuffId['proc:9:def'],\n            name: 'Active Regular/Elemental Defense Reduction',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:9:rec': {\n            id: BuffId['proc:9:rec'],\n            name: 'Active Regular/Elemental Recovery Reduction',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:9:unknown': {\n            id: BuffId['proc:9:unknown'],\n            name: 'Active Regular/Elemental Unknown Stat Reduction',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.UNKNOWN],\n        },\n    };\n})()), { 'proc:10:poison': {\n        id: BuffId['proc:10:poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:10:weak': {\n        id: BuffId['proc:10:weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:10:sick': {\n        id: BuffId['proc:10:sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:10:injury': {\n        id: BuffId['proc:10:injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:10:curse': {\n        id: BuffId['proc:10:curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:10:paralysis': {\n        id: BuffId['proc:10:paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:10:atk down': {\n        id: BuffId['proc:10:atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWNBLK],\n    }, 'proc:10:def down': {\n        id: BuffId['proc:10:def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWNBLK],\n    }, 'proc:10:rec down': {\n        id: BuffId['proc:10:rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWNBLK],\n    }, 'proc:10:unknown': {\n        id: BuffId['proc:10:unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:11:poison': {\n        id: BuffId['proc:11:poison'],\n        name: 'Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_POISON],\n    }, 'proc:11:weak': {\n        id: BuffId['proc:11:weak'],\n        name: 'Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_WEAK],\n    }, 'proc:11:sick': {\n        id: BuffId['proc:11:sick'],\n        name: 'Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_SICK],\n    }, 'proc:11:injury': {\n        id: BuffId['proc:11:injury'],\n        name: 'Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_INJURY],\n    }, 'proc:11:curse': {\n        id: BuffId['proc:11:curse'],\n        name: 'Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_CURSE],\n    }, 'proc:11:paralysis': {\n        id: BuffId['proc:11:paralysis'],\n        name: 'Paralysis Infliction',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_PARALYSIS],\n    }, 'proc:11:atk down': {\n        id: BuffId['proc:11:atk down'],\n        name: 'Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWN],\n    }, 'proc:11:def down': {\n        id: BuffId['proc:11:def down'],\n        name: 'Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWN],\n    }, 'proc:11:rec down': {\n        id: BuffId['proc:11:rec down'],\n        name: 'Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWN],\n    }, 'proc:11:unknown': {\n        id: BuffId['proc:11:unknown'],\n        name: 'Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.DEBUFF_AILMENT],\n    }, 'proc:12': {\n        id: BuffId['proc:12'],\n        name: 'Instant Revive (Guaranteed)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:13': {\n        id: BuffId['proc:13'],\n        name: 'Random Target Damage',\n        stackType: BuffStackType.Attack,\n        icons: () => [IconId.ATK_RT],\n    }, 'proc:14': {\n        id: BuffId['proc:14'],\n        name: 'Lifesteal Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n    }, 'proc:16:fire': {\n        id: BuffId['proc:16:fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:16:water': {\n        id: BuffId['proc:16:water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:16:earth': {\n        id: BuffId['proc:16:earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:16:thunder': {\n        id: BuffId['proc:16:thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:16:light': {\n        id: BuffId['proc:16:light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:16:dark': {\n        id: BuffId['proc:16:dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:16:all': {\n        id: BuffId['proc:16:all'],\n        name: 'Active Elemental Damage Reduction (All Elements)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:16:unknown': {\n        id: BuffId['proc:16:unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:17:poison': {\n        id: BuffId['proc:17:poison'],\n        name: 'Active Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:17:weak': {\n        id: BuffId['proc:17:weak'],\n        name: 'Active Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:17:sick': {\n        id: BuffId['proc:17:sick'],\n        name: 'Active Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:17:injury': {\n        id: BuffId['proc:17:injury'],\n        name: 'Active Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:17:curse': {\n        id: BuffId['proc:17:curse'],\n        name: 'Active Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:17:paralysis': {\n        id: BuffId['proc:17:paralysis'],\n        name: 'Active Paralysis Resist',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:18': {\n        id: BuffId['proc:18'],\n        name: 'Active Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'proc:19': {\n        id: BuffId['proc:19'],\n        name: 'Active Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:20': {\n        id: BuffId['proc:20'],\n        name: 'Active BC Fill when attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'proc:22': {\n        id: BuffId['proc:22'],\n        name: 'Active Defense Ignore',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'proc:23': {\n        id: BuffId['proc:23'],\n        name: 'Active Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'proc:24:atk': {\n        id: BuffId['proc:24:atk'],\n        name: 'Active Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'proc:24:def': {\n        id: BuffId['proc:24:def'],\n        name: 'Active Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'proc:24:rec': {\n        id: BuffId['proc:24:rec'],\n        name: 'Active Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'proc:26': {\n        id: BuffId['proc:26'],\n        name: 'Active Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'proc:27': {\n        id: BuffId['proc:27'],\n        name: 'Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:28': {\n        id: BuffId['proc:28'],\n        name: 'Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n    }, 'proc:29': {\n        id: BuffId['proc:29'],\n        name: 'Multi-Element Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n    }, 'proc:30:fire': {\n        id: BuffId['proc:30:fire'],\n        name: 'Active Added Element to Attack (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDFIRE],\n    }, 'proc:30:water': {\n        id: BuffId['proc:30:water'],\n        name: 'Active Added Element to Attack (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWATER],\n    }, 'proc:30:earth': {\n        id: BuffId['proc:30:earth'],\n        name: 'Active Added Element to Attack (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDEARTH],\n    }, 'proc:30:thunder': {\n        id: BuffId['proc:30:thunder'],\n        name: 'Active Added Element to Attack (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDTHUNDER],\n    }, 'proc:30:light': {\n        id: BuffId['proc:30:light'],\n        name: 'Active Added Element to Attack (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDLIGHT],\n    }, 'proc:30:dark': {\n        id: BuffId['proc:30:dark'],\n        name: 'Active Added Element to Attack (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDARK],\n    }, 'proc:30:unknown': {\n        id: BuffId['proc:30:unknown'],\n        name: 'Active Added Element to Attack (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDELEMENT],\n    }, 'proc:31:flat': {\n        id: BuffId['proc:31:flat'],\n        name: 'Burst BC Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:31:percent': {\n        id: BuffId['proc:31:percent'],\n        name: 'Burst BC Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:32:fire': {\n        id: BuffId['proc:32:fire'],\n        name: 'Element Shift (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTFIRE],\n    }, 'proc:32:water': {\n        id: BuffId['proc:32:water'],\n        name: 'Element Shift (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTWATER],\n    }, 'proc:32:earth': {\n        id: BuffId['proc:32:earth'],\n        name: 'Element Shift (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTEARTH],\n    }, 'proc:32:thunder': {\n        id: BuffId['proc:32:thunder'],\n        name: 'Element Shift (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTTHUNDER],\n    }, 'proc:32:light': {\n        id: BuffId['proc:32:light'],\n        name: 'Element Shift (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTLIGHT],\n    }, 'proc:32:dark': {\n        id: BuffId['proc:32:dark'],\n        name: 'Element Shift (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTDARK],\n    }, 'proc:32:unknown': {\n        id: BuffId['proc:32:unknown'],\n        name: 'Element Shift (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTELEMENT],\n    }, 'proc:33': {\n        id: BuffId['proc:33'],\n        name: 'Buff Removal',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_REMOVEBUFF],\n    }, 'proc:34:flat': {\n        id: BuffId['proc:34:flat'],\n        name: 'Burst BB Gauge Drain (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:34:percent': {\n        id: BuffId['proc:34:percent'],\n        name: 'Burst BB Gauge Drain (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:36': {\n        id: BuffId['proc:36'],\n        name: 'Active Leader Skill Lock',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DISABLELS],\n    }, 'proc:37': {\n        id: BuffId['proc:37'],\n        name: 'Summon Unit',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SUMMONUNIT],\n    }, 'proc:38:poison': {\n        id: BuffId['proc:38:poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:38:weak': {\n        id: BuffId['proc:38:weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:38:sick': {\n        id: BuffId['proc:38:sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:38:injury': {\n        id: BuffId['proc:38:injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:38:curse': {\n        id: BuffId['proc:38:curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:38:paralysis': {\n        id: BuffId['proc:38:paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:38:atk down': {\n        id: BuffId['proc:38:atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWNBLK],\n    }, 'proc:38:def down': {\n        id: BuffId['proc:38:def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWNBLK],\n    }, 'proc:38:rec down': {\n        id: BuffId['proc:38:rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWNBLK],\n    }, 'proc:38:unknown': {\n        id: BuffId['proc:38:unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:39:fire': {\n        id: BuffId['proc:39:fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:39:water': {\n        id: BuffId['proc:39:water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:39:earth': {\n        id: BuffId['proc:39:earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:39:thunder': {\n        id: BuffId['proc:39:thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:39:light': {\n        id: BuffId['proc:39:light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:39:dark': {\n        id: BuffId['proc:39:dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:39:unknown': {\n        id: BuffId['proc:39:unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:40:poison': {\n        id: BuffId['proc:40:poison'],\n        name: 'Active Poison Infliction Added to Attack',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'proc:40:weak': {\n        id: BuffId['proc:40:weak'],\n        name: 'Active Weak Infliction Added to Attack',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'proc:40:sick': {\n        id: BuffId['proc:40:sick'],\n        name: 'Active Sick Infliction Added to Attack',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'proc:40:injury': {\n        id: BuffId['proc:40:injury'],\n        name: 'Active Injury Infliction Added to Attack',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'proc:40:curse': {\n        id: BuffId['proc:40:curse'],\n        name: 'Active Curse Infliction Added to Attack',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'proc:40:paralysis': {\n        id: BuffId['proc:40:paralysis'],\n        name: 'Active Paralysis Infliction Added to Attack',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'proc:40:atk down': {\n        id: BuffId['proc:40:atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:40:def down': {\n        id: BuffId['proc:40:def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:40:rec down': {\n        id: BuffId['proc:40:rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:40:unknown': {\n        id: BuffId['proc:40:unknown'],\n        name: 'Active Unknown Ailment Infliction Added to Attack',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'proc:42': {\n        id: BuffId['proc:42'],\n        name: 'Sacrificial Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n    }, 'proc:43': {\n        id: BuffId['proc:43'],\n        name: 'Burst OD Gauge Fill (Percentage)',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_OVERDRIVEUP],\n    }, 'proc:44': {\n        id: BuffId['proc:44'],\n        name: 'Active Damage over Time',\n        stat: UnitStat.damageOverTime,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_TURNDMG],\n    }, 'proc:45:bb': {\n        id: BuffId['proc:45:bb'],\n        name: 'Active BB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'proc:45:sbb': {\n        id: BuffId['proc:45:sbb'],\n        name: 'Active SBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'proc:45:ubb': {\n        id: BuffId['proc:45:ubb'],\n        name: 'Active UBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'proc:46': {\n        id: BuffId['proc:46'],\n        name: 'Non-Lethal Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:47': {\n        id: BuffId['proc:47'],\n        name: 'HP Scaled Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPSCALED : IconId.ATK_AOE_HPSCALED],\n    }, 'proc:48:base': {\n        id: BuffId['proc:48:base'],\n        name: 'Piercing Proportional Damage (Base HP)',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n    }, 'proc:48:current': {\n        id: BuffId['proc:48:current'],\n        name: 'Piercing Proportional Damage (Current HP)',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n    }, 'proc:48:fixed': {\n        id: BuffId['proc:48:fixed'],\n        name: 'Piercing Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_FIXED : IconId.ATK_AOE_PIERCING_FIXED],\n    }, 'proc:48:unknown': {\n        id: BuffId['proc:48:unknown'],\n        name: 'Unknown Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:49': {\n        id: BuffId['proc:49'],\n        name: 'Instant Death (Chance)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KO],\n    }, 'proc:50': {\n        id: BuffId['proc:50'],\n        name: 'Active Damage Reflect (Chance)',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'proc:51:atk down': {\n        id: BuffId['proc:51:atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:51:def down': {\n        id: BuffId['proc:51:def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:51:rec down': {\n        id: BuffId['proc:51:rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:52': {\n        id: BuffId['proc:52'],\n        name: 'Active BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'proc:53:poison': {\n        id: BuffId['proc:53:poison'],\n        name: 'Active Poison Counter',\n        stat: UnitStat.poisonCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONCOUNTER],\n    }, 'proc:53:weak': {\n        id: BuffId['proc:53:weak'],\n        name: 'Active Weak Counter',\n        stat: UnitStat.weakCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKCOUNTER],\n    }, 'proc:53:sick': {\n        id: BuffId['proc:53:sick'],\n        name: 'Active Sick Counter',\n        stat: UnitStat.sickCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKCOUNTER],\n    }, 'proc:53:injury': {\n        id: BuffId['proc:53:injury'],\n        name: 'Active Injury Counter',\n        stat: UnitStat.injuryCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJCONTER],\n    }, 'proc:53:curse': {\n        id: BuffId['proc:53:curse'],\n        name: 'Active Curse Counter',\n        stat: UnitStat.curseCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSECOUNTER],\n    }, 'proc:53:paralysis': {\n        id: BuffId['proc:53:paralysis'],\n        name: 'Active Paralysis Counter',\n        stat: UnitStat.paralysisCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYCOUNTER],\n    }, 'proc:54': {\n        id: BuffId['proc:54'],\n        name: 'Active Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'UNKNOWN_CONDITIONAL_EFFECT_ID': {\n        id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n        name: 'Unknown Conditional Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_CONDITIONAL_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n        name: 'Unknown Conditional Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'buff:12:ko resistance': {\n        id: BuffId['buff:12:ko resistance'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    } }));\n","import { BUFF_METADATA } from './buff-metadata';\n/**\n * @description Get the associated metadata entry for a given buff ID.\n * @param id Buff ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","/**\n * @description Get the effects of a given extra skill.\n * @param skill Extra skill to get the effects of.\n * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForExtraSkill(skill) {\n    return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n}\n","/**\n * @description Get the effects of a given item.\n * @param item Item to get the effects of, if any are present,\n * @returns Effects of the given item if they exist, an empty array otherwise.\n */\nexport default function getEffectsForItem(item) {\n    let result = [];\n    if (item && item.effect) {\n        if (Array.isArray(item.effect)) {\n            result = item.effect;\n        }\n        else if (Array.isArray(item.effect.effect)) {\n            const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n            result = effect.map(e => {\n                // apply target data to each effect\n                const fullProcEffect = Object.assign({}, e);\n                fullProcEffect['target area'] = targetArea;\n                fullProcEffect['target type'] = targetType;\n                return fullProcEffect;\n            });\n        }\n    }\n    return result;\n}\n","/**\n * @description Generate a URL to display the image with the given item thumbnail filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents the thumbnail image for a given item.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getItemImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/item/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given leader skill.\n * @param skill Leader skill to get the effects of.\n * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForLeaderSkill(skill) {\n    return skill && Array.isArray(skill.effects) ? skill.effects : [];\n}\n","/**\n * @description Generate the file names for each of the image type for a given unit ID.\n * @param id Unit ID to use to generate the file names.\n * @param suffix Optional parameter that's useful for things like alternate art.\n * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n */\nexport default function getUnitImageFileNames(id, suffix = '') {\n    const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n    return {\n        spritesheet: `unit_anime_${fileNameSuffix}`,\n        battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n        guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n        fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n    };\n}\n","/**\n * @description Generate a URL to display the image with the given unit filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents an image for a given unit.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getUnitImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given SP Enhancement Entry.\n * @param entry SP Enhancement Entry to get the effects of.\n * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n */\nexport default function getEffectsForSpEnhancement(entry) {\n    const result = [];\n    if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n        const effectWrappers = entry.skill.effects;\n        effectWrappers.forEach(effectWrapper => {\n            Object.keys(effectWrapper).forEach(spType => {\n                const originalEffect = effectWrapper[spType];\n                const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                result.push(unwrappedEffect);\n            });\n        });\n    }\n    return result;\n}\n","import { SpCategoryName } from '../datamine-types';\n/**\n * @description Get the associated category name with a given category ID.\n * @param categoryId Category ID to get the name of.\n * @returns Name of the given category ID or the string 'Unknown'.\n */\nexport default function getSpCategoryName(categoryId) {\n    let result;\n    const numericalCategoryId = +categoryId;\n    switch (numericalCategoryId) {\n        case 1:\n            result = SpCategoryName['Parameter Boost'];\n            break;\n        case 2:\n            result = SpCategoryName.Spark;\n            break;\n        case 3:\n            result = SpCategoryName['Critical Hits'];\n            break;\n        case 4:\n            result = SpCategoryName['Attack Boost'];\n            break;\n        case 5:\n            result = SpCategoryName['BB Gauge'];\n            break;\n        case 6:\n            result = SpCategoryName['HP Recovery'];\n            break;\n        case 7:\n            result = SpCategoryName.Drops;\n            break;\n        case 8:\n            result = SpCategoryName['Ailment Resistance'];\n            break;\n        case 9:\n            result = SpCategoryName['Ailment Infliction'];\n            break;\n        case 10:\n            result = SpCategoryName['Damage Reduction'];\n            break;\n        case 11:\n            result = SpCategoryName.Special;\n            break;\n        default:\n            result = SpCategoryName.Unknown;\n            break;\n    }\n    return result;\n}\n","/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding character code for a given index.\n * It expects an index between 0 and 61 inclusive; will return an empty string if\n * the given value is outside of the range.\n * @param index Index of an SP entry in a given skills array.\n * @returns Corresponding single alphanumeric character to the given index\n * or an empty string if the index is invalid.\n */\nexport default function spIndexToCode(index) {\n    let result = '';\n    let correspondingCharacterCode = -1;\n    if (Number.isInteger(index)) {\n        if (index >= 0 && index <= 25) { // A-Z\n            correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (index >= 26 && index <= 51) { // a-z\n            correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n        }\n        else if (index >= 52 && index <= 61) { // 0-9\n            correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n        }\n    }\n    if (correspondingCharacterCode !== -1) {\n        result = String.fromCharCode(correspondingCharacterCode);\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding index for a given character code.\n * It expects an alphanumeric character and will return -1 otherwise.\n * @param code Character code an SP entry in a given skills array.\n * @returns Corresponding index to the given character or -1 if the\n * character is invalid.\n */\nexport default function spCodeToIndex(code) {\n    let result = -1;\n    let characterCodeOffset = -1;\n    if (!!code && typeof code === 'string' && code.length === 1) {\n        if (code >= 'A' && code <= 'Z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (code >= 'a' && code <= 'z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n        }\n        else if (code >= '0' && code <= '9') {\n            characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n        }\n    }\n    if (characterCodeOffset !== -1) {\n        result = code.charCodeAt(0) - characterCodeOffset;\n    }\n    return result;\n}\n","/**\n * @description Extract the ID of a string in the format of `number@actualId`. If there\n * is no value after the @ character or if no @ character is present, the original ID is returned.\n * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n * @param id Original SP Enhancement Entry ID.\n * @returns The ID of a string in the format of `number@actualId`, or the original input if\n * there is no @ character or no value after the @ character.\n */\nexport default function getSpEntryId(id) {\n    return (typeof id === 'string' && id.split('@')[1]) || id;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n * @param id SP Enhancement entry ID.\n * @param entries Collection of SP Enhancement entries to search in.\n * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n */\nexport default function getSpEntryWithId(id, entries) {\n    const spId = getSpEntryId(id);\n    return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n * @param entry SP Entry to get dependencies for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n */\nexport default function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependencies = [];\n    if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n        const dependencyId = getSpEntryId(entry.dependency);\n        const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n        if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n            addedEntries.add(dependencyEntry);\n            const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n            dependencies = [dependencyEntry].concat(subDependencies);\n        }\n    }\n    return dependencies;\n}\n","/**\n * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n * @param entry SP Entry to get dependents for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n */\nexport default function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependents = [];\n    if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n        const entryId = entry.id;\n        dependents = allEntries\n            .filter(s => {\n            return s.dependency &&\n                s.dependency.includes(entryId) &&\n                !addedEntries.has(s);\n        });\n        dependents.forEach(dependent => {\n            addedEntries.add(dependent);\n            const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n            dependents = dependents.concat(subDependents);\n        });\n    }\n    return dependents;\n}\n","/* NOTE: this file is automatically generated; do not edit this file */\nexport default '0.7.0';\n"]}