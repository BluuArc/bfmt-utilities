{"version":3,"sources":["index.browser.js","bursts/getLevelEntryForBurst.js","bursts/getEffectsForBurst.js","buffs/getEffectId.js","buffs/constants.js","buffs/effect-metadata.js","buffs/getMetadataForProc.js","buffs/isAttackingProcId.js","bursts/getExtraAttackDamageFramesEntry.js","buffs/getMetadataForPassive.js","buffs/getNameForProc.js","buffs/getNameForPassive.js","buffs/isProcEffect.js","buffs/isPassiveEffect.js","datamine-types.js","buffs/combineEffectsAndDamageFrames.js","buffs/getEffectName.js","buffs/parsers/buff-types.js","buffs/parsers/_helpers.js","buffs/parsers/proc-effect-mapping.js","buffs/parsers/convertProcEffectToBuffs.js","buffs/parsers/conditional-effect-mapping.js","buffs/parsers/convertConditionalEffectToBuffs.js","buffs/parsers/passive-effect-mapping.js","buffs/parsers/convertPassiveEffectToBuffs.js","buffs/parsers/buff-metadata.js","buffs/parsers/getMetadataForBuff.js","extra-skills/getEffectsForExtraSkill.js","items/getEffectsForItem.js","items/getItemImageUrl.js","leader-skills/getEffectsForLeaderSkill.js","units/getUnitImageFileNames.js","units/getUnitImageUrl.js","sp-enhancements/getEffectsForSpEnhancement.js","sp-enhancements/getSpCategoryName.js","sp-enhancements/_constants.js","sp-enhancements/spIndexToCode.js","sp-enhancements/spCodeToIndex.js","sp-enhancements/getSpEntryId.js","sp-enhancements/getSpEntryWithId.js","sp-enhancements/getAllDependenciesForSpEntry.js","sp-enhancements/getAllEntriesThatDependOnSpEntry.js","version.js"],"names":["bfmtUtilities","exports","getLevelEntryForBurst","burst","level","burstEffectsByLevel","Array","isArray","levels","levelIndex","isNaN","length","getEffectsForBurst","levelEntry","effects","getEffectId","effect","resultId","KNOWN_PROC_ID","KNOWN_PASSIVE_ID","KNOWN_CONDITIONAL_ID","constants","Object","freeze","__proto__","ProcBuffType","PASSIVE_METADATA","PROC_METADATA","getMetadataForProc","id","metadata","hasOwnProperty","call","isAttackingProcId","metadataEntry","Type","Attack","getExtraAttackDamageFramesEntry","damageFrames","effectDelay","inputFrames","relevantFrames","filter","frame","procId","BurstHeal","unifiedFrames","reduce","acc","frameEntry","index","keepFirstFrame","numFrames","damageDistribution","frameTimes","frameIndex","push","damage","time","resultDamageFramesEntry","hits","sort","a","b","forEach","getMetadataForPassive","getNameForProc","Name","getNameForPassive","isProcEffect","isPassiveEffect","Ailment","ArenaCondition","MoveType","TargetArea","TargetAreaShorthand","TargetType","SpPassiveType","SphereTypeName","SphereTypeId","SpCategoryName","SpCategoryId","UnitAnimationKey","UnitElement","UnitGender","UnitGettingType","UnitKind","UnitType","ItemType","MimicUnitIds","MimicMonsterGroupMapping","Mimic","BatMimic","DragonMimic","MetalMimic","datamineTypes","combineEffectsAndDamageFrames","combinedEntries","map","i","correspondingFrameEntry","delay","frames","targetArea","Random","targetType","getEffectName","resultName","effectId","passive","proc","BuffStackType","BuffSource","BuffConditionElement","UnitStat","IconId","BuffId","createSourceEntryFromContext","context","source","sourceId","createSourcesFromContext","resultArray","previousSources","slice","unshift","processExtraSkillConditions","conditions","aggregate","units","Set","items","sphereTypes","unknowns","condition","add","item","unit","type_id","condition_id","result","entries","entry","size","from","getPassiveTargetData","isLeaderSkillEffect","LeaderSkill","sp_type","EnhancePassive","isPartyEffect","Party","Self","Aoe","Single","getProcTargetData","parseNumberOrDefault","value","defaultValue","createUnknownParamsValue","params","startIndex","hasValue","buffSourceIsBurstType","BraveBurst","SuperBraveBurst","UltimateBraveBurst","BondedBraveBurst","BondedSuperBraveBurst","DualBraveBurst","includes","createUnknownParamsEntryFromExtraParams","extraParams","injectionContext","unknownParams","createNoParamsEntry","originalId","sources","NO_PARAMS_SPECIFIED","mapping","getProcEffectToBuffMapping","reload","Map","setMapping","UNKNOWN_PROC_PARAM_EFFECT_KEY","ELEMENT_MAPPING","All","Fire","Water","Earth","Thunder","Light","Dark","NON_ZERO_ELEMENT_MAPPING","AILMENT_MAPPING","Poison","Weak","Sick","Injury","Curse","Paralysis","AttackReduction","DefenseReduction","RecoveryReduction","retrieveCommonInfoForEffects","targetData","splitEffectParams","split","splitEffectWithUnknownProcParamsProperty","rawParams","createUnknownParamsEntry","assign","UNKNOWN_PROC_BUFF_PARAMS","createTurnDurationEntry","buffs","duration","TURN_DURATION_MODIFICATION","handlePostParse","results","isTurnDurationBuff","turnDuration","getAttackInformationFromContext","distribution","parseProcWithSingleNumericalParameterAndTurnDuration","effectValueKey","effectTurnDurationKey","parseParamValue","rawValue","buffId","rawTurnDuration","set","flatAtk","filteredValue","key","keys","healLow","healHigh","recX","recY","rec","hasAnyHealValues","flatFill","percentFill","rawFlatFill","rawPercentFill","element","atk","def","crit","coreStatProperties","rawElement","Unknown","effectElement","statType","effectKey","find","k","startsWith","concat","prop","hasAnyStats","some","statKey","buffEntry","targetElements","bc","hc","dropRateProperties","hasAnyRates","recoveredHpPercent","rawRecoveredHp","flatHpBoost","percentHpBoost","rawFlatBoost","rawPercentBoost","STAT_TYPE_MAPPING","statReductionEntries","statType1","value1","procChance1","statType2","value2","procChance2","rawStatType","rawProcChance","chance","stat","buffKey","hasAnyValues","curedAilments","splitParams","knownParams","p","param","values","ailment","inflictedAilments","numParams","ailmentValue","ailmentType","reviveToHp","rawReviveToHp","rawHits","mitigation","rawMitigation","mitigationKey","e","AILMENTS_ORDER","resistances","poison","weak","sick","injury","curse","paralysis","rawDuration","ailmentKeysInEffect","correspondingKey","fillLow","fillHigh","rawFillLow","rawFillHigh","rawChance","hasAnyFillValues","whenAttacked","coreStatPropertyMapping","effectToCoreStatMapping","attack","defense","recovery","hp","stats","convertedStat","rawConvertedStat","hitIncreasePerHit","extraHitDamage","attackElements","element1","element2","element3","elements","validElements","inputElement","sanitizedElement","flatDrainLow","flatDrainHigh","percentDrainLow","percentDrainHigh","rawFlatLow","rawFlatHigh","rawPercentLow","rawPercentHigh","drainLow","drainHigh","summonGroup","summonId","rawPositionX","rawPositionY","positionX","positionY","effectAilmentsCured","unknownAilmentCount","rawElementsMitigated","rawModLow","rawModHigh","rawFlatAtk","overdriveFill","rawOverdriveFill","damageParams","affectsElement","unitIndex","rawAffectsElement","rawUnitIndex","filteredDamageParams","bb","sbb","ubb","rawBb","rawSbb","rawUbb","type","rawHpLow","rawHpHigh","hpLow","hpHigh","proportionalMode","rawMaxAttackValue","rawProportionalMode","rawBasePercentHpLow","rawBasePercentHpHigh","rawCurrentPercentHpLow","rawCurrentPercentHpHigh","rawFixedDamage","rawIsLethal","basePercentHpLow","basePercentHpHigh","currentPercentHpLow","currentPercentHpHigh","fixedDamage","isLethal","createAttackOfType","valueProperties","rawDamageLow","rawDamageHigh","reflectedDamageLow","reflectedDamageHigh","hasAnyRangeValues","inflictedReductions","debuffTurnDuration","reductionValue","reductionValueKey","chanceKey","inflictionChances","damageBoost","rawRecoverHp","bcBaseResist","bcBuffResist","hcBaseResist","hcBuffResist","rawBcBaseResist","rawBcBuffResist","rawHcBaseResist","rawHcBuffResist","damageIncrease","rawDamageIncrease","damageAbsorption","rawHp","rawDefense","rawDamageAbsorption","maxIncreases","recoveredHp","defaultConversionFunction","UNKNOWN_PROC_EFFECT_ID","convertProcEffectToBuffs","TypeError","conversionFunction","reloadMapping","get","getConditionalEffectToBuffMapping","UNKNOWN_CONDITIONAL_BUFF_PARAMS","getDefaultTargetData","rawHealLow","rawHealHigh","rawAddedRec","addedRec","rawRecoverValue","recoverValue","rawMitigationValue","mitigationValue","rawHpRecover","hpRecover","rawReductionValue","rawDebuffTurnDuration","UNKNOWN_CONDITIONAL_EFFECT_ID","convertConditionalEffectToBuffs","getPassiveEffectToBuffMapping","X","OmniParadigm","TYPE_MAPPING","Lord","Anima","Breaker","Guardian","Oracle","Rex","TARGET_TYPE_MAPPING","Enemy","TARGET_AREA_MAPPING","STATS_ORDER","DROP_TYPES_ORDER","conditionInfo","convertConditionalEffectToBuffsWithInjectionContext","convertProcEffectToBuffsWithInjectionContext","UNKNOWN_PASSIVE_BUFF_PARAMS","ThresholdType","parseThresholdValuesFromParamsProperty","rawThreshold","rawRequireAboveFlag","thresholdType","threshold","requireAbove","parseThresholdValuesFromEffect","suffix","getThresholdConditions","Hp","hpGreaterThanOrEqualTo","hpLessThanOrEqualTo","Bb","bbGaugeGreaterThanOrEqualTo","bbGaugeLessThanOrEqualTo","parsePassiveWithSingleNumericalParameter","typedEffect","parsePassiveWithNumericalValueRangeAndChance","effectKeyLow","effectKeyHigh","effectKeyChance","buffKeyLow","buffKeyHigh","defaultEffectChance","generateBaseConditions","valueLow","valueHigh","rawLowValue","rawHighValue","elementValue","createBaseStatObject","unitType","targetUnitType","elem","thresholdInfo","thresholdConditions","dropRates","zel","karma","dropType","onEnemyDefeat","damageReduction","rawReduction","onBattleWin","sparkDamageBoost","rawSparkDamageBoost","onNormalAttack","additionalActions","damageModifier","rawAdditionalActions","rawDamageModifier","minimumElements","minumumUniqueElements","GENDER_MAPPING","Other","Male","Female","gender","rawGender","targetGender","baseResist","buffResist","rawBaseResist","rawBuffResist","availableStats","baseValue","addedValue","ResistType","rawBaseCritDamageResist","rawBuffCritDamageResist","rawBaseElementDamageResist","rawBuffElementDamageResist","rawBaseCritChanceResist","rawBuffCritChanceResist","resistType","CriticalDamage","base","buff","ElementDamage","CriticalHitRate","baseKey","triggeredBuffs","maxTriggerCount","onGuard","onCriticalHit","triggerOnBb","triggerOnSbb","triggerOnUbb","rawProcIds","rawTargetTypes","rawTargetAreas","rawStartFrames","rawTriggerOnBb","rawTriggerOnSbb","rawTriggerOnUbb","allProcIds","allProcParams","allTargetTypes","allTargetAreas","allStartFrames","FRAME_IN_MS","startFrame","replace","effectDelayInMs","toFixed","procEffect","procBuffs","triggeredEffects","addBuffOfBurstType","burstType","UNKNOWN_PASSIVE_EFFECT_ID","convertPassiveEffectToBuffs","BUFF_METADATA","name","turnDurationModification","stackType","Passive","icons","TURN_DURATION_DOWN","TURN_DURATION_UP","UNKNOWN","BUFF_HPDOWN","BUFF_HPUP","BUFF_ATKDOWN","BUFF_ATKUP","BUFF_DEFDOWN","BUFF_DEFUP","BUFF_RECDOWN","BUFF_RECUP","BUFF_CRTRATEDOWN","BUFF_CRTRATEUP","createIconGetterForStat","polarity","iconKey","toUpperCase","poisonResist","BUFF_POISONBLK","weakResist","BUFF_WEAKBLK","sickResist","BUFF_SICKBLK","injuryResist","BUFF_INJURYBLK","curseResist","BUFF_CURSEBLK","paralysisResist","BUFF_PARALYSISBLK","fireMitigation","BUFF_FIREDMGDOWN","waterMitigation","BUFF_WATERDMGDOWN","earthMitigation","BUFF_EARTHDMGDOWN","thunderMitigation","BUFF_THUNDERDMGDOWN","lightMitigation","BUFF_LIGHTDMGDOWN","darkMitigation","BUFF_DARKDMGDOWN","BUFF_ELEMENTDMGDOWN","BUFF_DAMAGECUT","bbGauge","BUFF_BBREC","hcEfficacy","BUFF_HCREC","BUFF_HPTHRESHATKDOWN","BUFF_HPTHRESHATKUP","BUFF_HPTHRESHDEFDOWN","BUFF_HPTHRESHDEFUP","BUFF_HPTHRESHRECDOWN","BUFF_HPTHRESHRECUP","BUFF_HPTHRESHCRTRATEDOWN","BUFF_HPTHRESHCRTRATEUP","bcDropRate","BUFF_HPTHRESHBCDOWN","BUFF_HPTHRESHBCDROP","hcDropRate","BUFF_HPTHRESHHCDOWN","BUFF_HPTHRESHHCDROP","itemDropRate","BUFF_HPTHRESHITEMDOWN","BUFF_HPTHRESHITEMDROP","zelDropRate","BUFF_HPTHRESHZELDOWN","BUFF_HPTHRESHZELDROP","karmaDropRate","BUFF_HPTHRESHKARMADOWN","BUFF_HPTHRESHKARMADROP","hpRecovery","BUFF_HPREC","BUFF_HPABS","BUFF_BCDOWN","BUFF_BCDROP","BUFF_HCDOWN","BUFF_HCDROP","BUFF_ITEMDOWN","BUFF_ITEMDROP","BUFF_ZELDOWN","BUFF_ZELDROP","BUFF_KARMADOWN","BUFF_KARMADROP","poisonInflict","BUFF_ADDPOISON","weakInflict","BUFF_ADDWEAK","sickInflict","BUFF_ADDSICK","injuryInflict","BUFF_ADDINJURY","curseInflict","BUFF_ADDCURSE","paralysisInflict","BUFF_ADDPARA","atkDownInflict","BUFF_ADDATKDOWN","defDownInflict","BUFF_ADDDEFDOWN","recDownInflict","BUFF_ADDRECDOWN","BUFF_ADDAILMENT","ConditionalTimed","BUFF_BEENATK_HPREC","BUFF_DAMAGEBB","damageReflect","BUFF_COUNTERDAMAGE","targetingModification","BUFF_REPENEATT","BUFF_GETENEATT","BUFF_HPTHRESHREPENEATT","BUFF_HPTHRESHGETENEATT","defenseIgnore","BUFF_IGNOREDEF","BUFF_BBGAUGETHRESHATKDOWN","BUFF_BBGAUGETHRESHATKUP","BUFF_BBGAUGETHRESHDEFDOWN","BUFF_BBGAUGETHRESHDEFUP","BUFF_BBGAUGETHRESHRECDOWN","BUFF_BBGAUGETHRESHRECUP","BUFF_BBGAUGETHRESHCRTRATEDOWN","BUFF_BBGAUGETHRESHCRTRATEUP","sparkDamage","BUFF_SPARKDOWN","BUFF_SPARKUP","BUFF_SPARKBC","BUFF_SPARKHC","BUFF_SPARKITEM","BUFF_SPARKZEL","BUFF_SPARKKARMA","bcEfficacy","BUFF_BBFILL","criticalDamage","BUFF_CRTUP","extraAction","BUFF_DBLSTRIKE","hitCountModification","BUFF_HITUP","BUFF_CONVERTATKDOWN","BUFF_CONVERTATKUP","BUFF_CONVERTDEFDOWN","BUFF_CONVERTDEFUP","BUFF_CONVERTRECDOWN","BUFF_CONVERTRECUP","BUFF_UNIQUEELEMENTHPDOWN","BUFF_UNIQUEELEMENTHPUP","BUFF_UNIQUEELEMENTATKDOWN","BUFF_UNIQUEELEMENTATKUP","BUFF_UNIQUEELEMENTDEFDOWN","BUFF_UNIQUEELEMENTDEFUP","BUFF_UNIQUEELEMENTRECDOWN","BUFF_UNIQUEELEMENTRECUP","BUFF_UNIQUEELEMENTCRTRATEDOWN","BUFF_UNIQUEELEMENTCRTRATEUP","reduceDamageToOne","BUFF_DAMAGECUTTOONE","criticalDamageMitigation","BUFF_CRTDOWN","BUFF_HPSCALEDATKDOWN","BUFF_HPSCALEDATKUP","BUFF_HPSCALEDDEFDOWN","BUFF_HPSCALEDDEFUP","BUFF_HPSCALEDRECDOWN","BUFF_HPSCALEDRECUP","BUFF_SPARKBBUP","bcCostReduction","BUFF_BBCOST_REDUCTION","bbGaugeConsumptionReduction","fireElementalDamage","BUFF_FIREDMGUP","waterElementalDamage","BUFF_WATERDMGUP","earthElementalDamage","BUFF_EARTHDMGUP","thunderElementalDamage","BUFF_THUNDERDMGUP","lightElementalDamage","BUFF_LIGHTDMGUP","darkElementalDamage","BUFF_DARKDMGUP","BUFF_ELEMENTDMGUP","elementalWeaknessDamageMitigation","BUFF_ELEMENTDOWN","CONDITIONALBUFF_HPTHRESH","BUFF_GUARDCUT","BUFF_GUARDBBUP","bbAtk","BUFF_BBATKUP","BUFF_SBBATKUP","BUFF_UBBATKUP","BUFF_ADDTO_BB","BUFF_ADDTO_SBB","BUFF_ADDTO_UBB","ATK_ST","ATK_AOE","Burst","Active","hasElement","koResistance","Singleton","BUFF_KOBLK","atkDownResist","BUFF_ATKDOWNBLK","defDownResist","BUFF_DEFDOWNBLK","recDownResist","BUFF_RECDOWNBLK","BUFF_AILMENTBLK","DEBUFF_POISON","DEBUFF_WEAK","DEBUFF_SICK","DEBUFF_INJURY","DEBUFF_CURSE","DEBUFF_PARALYSIS","DEBUFF_AILMENT","ATK_RT","ATK_ST_HPREC","ATK_AOE_HPREC","ATK_ST_PROPORTIONAL","ATK_AOE_PROPORTIONAL","ATK_ST_FIXED","ATK_AOE_FIXED","ATK_ST_MULTIELEMENT","ATK_AOE_MULTIELEMENT","elementModification","BUFF_ADDFIRE","BUFF_ADDWATER","BUFF_ADDEARTH","BUFF_ADDTHUNDER","BUFF_ADDLIGHT","BUFF_ADDDARK","BUFF_ADDELEMENT","BUFF_SHIFTFIRE","BUFF_SHIFTWATER","BUFF_SHIFTEARTH","BUFF_SHIFTTHUNDER","BUFF_SHIFTLIGHT","BUFF_SHIFTDARK","BUFF_SHIFTELEMENT","buffStabilityModification","BUFF_REMOVEBUFF","BUFF_BBFILLDOWN","BUFF_DISABLELS","BUFF_SUMMONUNIT","ATK_ST_SACRIFICIAL","ATK_AOE_SACRIFICIAL","BUFF_KO","odGauge","BUFF_OVERDRIVEUP","damageOverTime","BUFF_TURNDMG","ATK_ST_HPSCALED","ATK_AOE_HPSCALED","ATK_ST_PIERCING_PROPORTIONAL","ATK_AOE_PIERCING_PROPORTIONAL","ATK_ST_PIERCING_FIXED","ATK_AOE_PIERCING_FIXED","poisonCounter","BUFF_POISONCOUNTER","weakCounter","BUFF_WEAKCOUNTER","sickCounter","BUFF_SICKCOUNTER","injuryCounter","BUFF_INJCONTER","curseCounter","BUFF_CURSECOUNTER","paralysisCounter","BUFF_PARALYCOUNTER","BUFF_KOBLOCK","BUFF_SPARKDMGUP","BUFF_BBATKDOWN","BUFF_SBBATKDOWN","BUFF_UBBATKDOWN","ATK_ST_BBGAUGESCALED","ATK_AOE_BBGAUGESCALED","barrier","BUFF_FIRESHIELD","BUFF_WATERSHIELD","BUFF_EARTHSHIELD","BUFF_THUNDERSHIELD","BUFF_LIGHTSHIELD","BUFF_DARKSHIELD","BUFF_ELEMENTSHIELD","ATK_ST_USAGESCALED","ATK_AOE_USAGESCALED","ailmentAttackBoost","BUFF_AILDMGUP","atkDownCounter","BUFF_PROB_ATKREDUC","getMetadataForBuff","index$1","index$2","parsers","getEffectsForExtraSkill","skill","index$3","getEffectsForItem","target_area","target_type","fullProcEffect","getItemImageUrl","baseContentUrl","fileName","index$4","getEffectsForLeaderSkill","index$5","getUnitImageFileNames","fileNameSuffix","spritesheet","battleAvatar","guideAvatar","fullIllustration","getUnitImageUrl","index$6","getEffectsForSpEnhancement","effectWrappers","effectWrapper","spType","originalEffect","unwrappedEffect","getSpCategoryName","categoryId","numericalCategoryId","Spark","Drops","Special","CHARACTER_CODE_FOR_UPPERCASE_A","charCodeAt","CHARACTER_CODE_FOR_LOWERCASE_A","CHARACTER_CODE_FOR_NUMBER_0","spIndexToCode","correspondingCharacterCode","Number","isInteger","String","fromCharCode","spCodeToIndex","code","characterCodeOffset","getSpEntryId","getSpEntryWithId","spId","getAllDependenciesForSpEntry","allEntries","addedEntries","dependencies","dependency","dependencyId","dependencyEntry","s","has","subDependencies","getAllEntriesThatDependOnSpEntry","dependents","entryId","dependent","subDependents","index$7","version","bursts","extraSkills","leaderSkills","spEnhancements"],"mappings":"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","file":"index.browser.js","sourcesContent":["var bfmtUtilities = (function (exports) {\n    'use strict';\n\n    /**\n     * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get level entry from.\n     * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n     * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n     */\n    function getLevelEntryForBurst(burst, level) {\n        const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n        let levelIndex;\n        if (level !== null && !isNaN(level)) {\n            // 1-indexed\n            levelIndex = (+level - 1);\n        }\n        else {\n            // default to last entry in burst\n            levelIndex = burstEffectsByLevel.length - 1;\n        }\n        return burstEffectsByLevel[levelIndex];\n    }\n\n    /**\n     * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get effects from.\n     * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n     * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n     */\n    function getEffectsForBurst(burst, level) {\n        const levelEntry = getLevelEntryForBurst(burst, level);\n        return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n    }\n\n    /**\n     * @description Get the proc/passive ID of a given object.\n     * @param effect Object to get the effect ID from.\n     * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectId(effect) {\n        let resultId = '';\n        if (effect) {\n            resultId = effect['proc id'] || effect['unknown proc id'] ||\n                effect['passive id'] || effect['unknown passive id'] || '';\n        }\n        return resultId;\n    }\n\n    var KNOWN_PROC_ID;\n    (function (KNOWN_PROC_ID) {\n        KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n        KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    })(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\n    var KNOWN_PASSIVE_ID;\n    (function (KNOWN_PASSIVE_ID) {\n        KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n        KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    })(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n    var KNOWN_CONDITIONAL_ID;\n    (function (KNOWN_CONDITIONAL_ID) {\n        KNOWN_CONDITIONAL_ID[\"Unknown\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n    })(KNOWN_CONDITIONAL_ID || (KNOWN_CONDITIONAL_ID = {}));\n\n    var constants = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get KNOWN_PROC_ID () { return KNOWN_PROC_ID; },\n        get KNOWN_PASSIVE_ID () { return KNOWN_PASSIVE_ID; },\n        get KNOWN_CONDITIONAL_ID () { return KNOWN_CONDITIONAL_ID; }\n    });\n\n    var ProcBuffType;\n    (function (ProcBuffType) {\n        ProcBuffType[\"Attack\"] = \"Attack\";\n    })(ProcBuffType || (ProcBuffType = {}));\n    /* eslint-disable */\n    /**\n     * @ignore\n     */\n    const PASSIVE_METADATA = Object.freeze({\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Parameter Boost\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Elemental Parameter Boost\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Type-Based Parameter Boost\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"Status Negation\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Damage Reduction\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Gradual BB Gauge Boost\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"HC Efficacy\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"HP-Conditional Parameter Boost\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"HP-Conditional Drop Rate Boost\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"BC Fill on Enemy Defeat\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Damage Reduction (Chance)\"\n        },\n        \"15\": {\n            \"ID\": \"15\",\n            \"Name\": \"Heal on Enemy Defeat\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Heal on Battle Victory\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"HP Absorption\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Drop Rate Boost\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"Status Infliction\"\n        },\n        \"21\": {\n            \"ID\": \"21\",\n            \"Name\": \"Parameter Boost for First X Turns\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"BC Fill on Battle Victory\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Heal when Attacked (Chance)\"\n        },\n        \"25\": {\n            \"ID\": \"25\",\n            \"Name\": \"BC Fill when Hit (Chance)\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Damage Counter (Chance)\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Increased Target Chance\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Decreased Target Chance\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Defense Ignore (Chance)\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"BB Conditional Parameter Boost\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"BC Efficacy\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Heal over Time\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"Critical Damage Boost\"\n        },\n        \"35\": {\n            \"ID\": \"35\",\n            \"Name\": \"BC Fill when Normal Attacking\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Extra Action\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Hit Count Boost\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Parameter Conversion\"\n        },\n        \"41\": {\n            \"ID\": \"41\",\n            \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"Gender Parameter Boost\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Damage Reduction to 1\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Flat Parameter Boost\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"Critical Damage Negation\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"BC Fill on Spark\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"BC Cost Reduction\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"BB Gauge Consumption Reduction\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Elemental Damage Boost\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Conditional Effect based on HP Threshold\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Damage Reduction when Guarding\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BC Fill when Attacked when Guarding\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BC Fill on Guard\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Elemental Damage Reduction for first X Turns\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"BB Atk Boost\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"BC Fill on Critical\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Add buff to Brave Burst\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"OD Gauge Fill Rate Boost\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"Status Counter\"\n        },\n        \"72\": {\n            \"ID\": \"72\",\n            \"Name\": \"Turn End Effects Activate at Turn Start\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\"\n        },\n        \"74\": {\n            \"ID\": \"74\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Spark Vulnerability\"\n        },\n        \"77\": {\n            \"ID\": \"77\",\n            \"Name\": \"Spark Damage Reduction\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Conditional Effect after Damage Received Threshold\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"BC Fill after Damage Received Threshold\"\n        },\n        \"80\": {\n            \"ID\": \"80\",\n            \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n        },\n        \"81\": {\n            \"ID\": \"81\",\n            \"Name\": \"BC Fill after Damage Dealt Threshold\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"Conditional Effect after BC Received Threshold\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"Conditional Effect after HC Received Threshold\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"BC Fill after HC Received Threshold\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"Conditional Effect after Spark Threshold\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Conditional Effect on Guard\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Conditional Effect on Critical\"\n        },\n        \"90\": {\n            \"ID\": \"90\",\n            \"Name\": \"Status Infliction on Critical\"\n        },\n        \"91\": {\n            \"ID\": \"91\",\n            \"Name\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Negate Defense Ignore\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Added Elements\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Normal Attacks Hit All Foes\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Player EXP Boost\"\n        },\n        \"99\": {\n            \"ID\": \"99\",\n            \"Name\": \"\"\n        },\n        \"100\": {\n            \"ID\": \"100\",\n            \"Name\": \"Spark Critical\"\n        },\n        \"101\": {\n            \"ID\": \"101\",\n            \"Name\": \"Heal on Spark\"\n        },\n        \"102\": {\n            \"ID\": \"102\",\n            \"Name\": \"Added Elements\"\n        },\n        \"103\": {\n            \"ID\": \"103\",\n            \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n        },\n        \"104\": {\n            \"ID\": \"104\",\n            \"Name\": \"Spark Boost when HP Passes Threshold\"\n        },\n        \"105\": {\n            \"ID\": \"105\",\n            \"Name\": \"Turn-Based Parameter Boost\"\n        },\n        \"106\": {\n            \"ID\": \"106\",\n            \"Name\": \"Conditional Effect after Activating Overdrive\"\n        },\n        \"107\": {\n            \"ID\": \"107\",\n            \"Name\": \"Add Effect to Leader Skill\"\n        },\n        \"109\": {\n            \"ID\": \"109\",\n            \"Name\": \"BB Gauge Reduction (Chance)\"\n        },\n        \"110\": {\n            \"ID\": \"110\",\n            \"Name\": \"BC Efficacy Reduction (Chance)\"\n        },\n        \"111\": {\n            \"ID\": \"111\",\n            \"Name\": \"Increase Brave Burst Activation Rate\"\n        },\n        \"112\": {\n            \"ID\": \"112\",\n            \"Name\": \"ABP/CBP Boost\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Conditional Effect after HP Threshold\"\n        },\n        \"114\": {\n            \"ID\": \"114\",\n            \"Name\": \"Inflict Buff when Attacked\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n        },\n        \"128\": {\n            \"ID\": \"128\",\n            \"Name\": \"Damage Reduction from Normal Attacks\"\n        },\n        \"143\": {\n            \"ID\": \"143\",\n            \"Name\": \"Break Atk Parameter Limit\"\n        },\n        \"10008\": {\n            \"ID\": \"10008\",\n            \"Name\": \"Damage Reduction from Specific Sources\"\n        },\n        \"11004\": {\n            \"ID\": \"11004\",\n            \"Name\": \"Elemental Spark Damage Boost\"\n        },\n        \"11005\": {\n            \"ID\": \"11005\",\n            \"Name\": \"Elemental Critical Damage Boost\"\n        },\n        \"11006\": {\n            \"ID\": \"11006\",\n            \"Name\": \"Summoner EXP Boost\"\n        },\n        \"11009\": {\n            \"ID\": \"11009\",\n            \"Name\": \"Effect Duration Boost\"\n        },\n        \"66,1\": {\n            \"ID\": \"66,1\",\n            \"Name\": \"\"\n        }\n    });\n    /**\n     * @ignore\n     */\n    const PROC_METADATA = Object.freeze({\n        \"0\": {\n            \"ID\": \"0\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Regular Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Burst Heal\",\n            \"Type\": \"\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Heal over Time\",\n            \"Type\": \"\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"BB Gauge Refill\",\n            \"Type\": \"\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"Drop Rate\",\n            \"Type\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Parameter Reduction\",\n            \"Type\": \"\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"Status Cleanse\",\n            \"Type\": \"\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"Status Infliction\",\n            \"Type\": \"\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"Revive (Guaranteed)\",\n            \"Type\": \"\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"Random Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Lifesteal Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"Status Negation\",\n            \"Type\": \"\"\n        },\n        \"18\": {\n            \"ID\": \"18\",\n            \"Name\": \"Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Gradual BB Gauge Boost\",\n            \"Type\": \"\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"BC Fill on Hit\",\n            \"Type\": \"\"\n        },\n        \"22\": {\n            \"ID\": \"22\",\n            \"Name\": \"Defense Ignore\",\n            \"Type\": \"\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Hit Count Boost\",\n            \"Type\": \"\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Fixed Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Multi-Element Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"Add Elements\",\n            \"Type\": \"\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Instant BB Gauge Fill\",\n            \"Type\": \"\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"Element Shift\",\n            \"Type\": \"\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Buff Removal (Chance)\",\n            \"Type\": \"\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"BB Gauge Reduction (Chance)\",\n            \"Type\": \"\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Leader Skill Lock (Chance)\",\n            \"Type\": \"\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Summon Unit\",\n            \"Type\": \"\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"Status Cure\",\n            \"Type\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Status Infliction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Instant OD Fill\",\n            \"Type\": \"\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Damage over Time (Additional Damage)\",\n            \"Type\": \"\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"BB Atk Boost\",\n            \"Type\": \"\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Non-Lethal Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"HP Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"Piercing Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"Retire\",\n            \"Type\": \"\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Damage Counter\",\n            \"Type\": \"\"\n        },\n        \"51\": {\n            \"ID\": \"51\",\n            \"Name\": \"Parameter Reduction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"BC Efficacy\",\n            \"Type\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Status Counter\",\n            \"Type\": \"\"\n        },\n        \"54\": {\n            \"ID\": \"54\",\n            \"Name\": \"Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Elemental Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"56\": {\n            \"ID\": \"56\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"57\": {\n            \"ID\": \"57\",\n            \"Name\": \"BC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Spark Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BB Atk Reduction\",\n            \"Type\": \"\"\n        },\n        \"60\": {\n            \"ID\": \"60\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BB-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Barrier\",\n            \"Type\": \"\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Selective Buff Wipe\",\n            \"Type\": \"\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"Consecutive Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\",\n            \"Type\": \"\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Revive (Chance)\",\n            \"Type\": \"\"\n        },\n        \"67\": {\n            \"ID\": \"67\",\n            \"Name\": \"BC Fill on Spark\",\n            \"Type\": \"\"\n        },\n        \"68\": {\n            \"ID\": \"68\",\n            \"Name\": \"Damage Reduction when Guarding\",\n            \"Type\": \"\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"BC Fill on Guard\",\n            \"Type\": \"\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"BB Gauge Fill Rate Debuff\",\n            \"Type\": \"\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\",\n            \"Type\": \"\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Element Squad-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"76\": {\n            \"ID\": \"76\",\n            \"Name\": \"Extra Action\",\n            \"Type\": \"\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Self Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"Player EXP Boost\",\n            \"Type\": \"\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"83\": {\n            \"ID\": \"83\",\n            \"Name\": \"Spark Critical\",\n            \"Type\": \"\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"OD Gauge Fill Rate\",\n            \"Type\": \"\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"Heal when Attacked\",\n            \"Type\": \"\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"HP Absorption\",\n            \"Type\": \"\"\n        },\n        \"87\": {\n            \"ID\": \"87\",\n            \"Name\": \"Heal on Spark\",\n            \"Type\": \"\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Self Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Self Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Self Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"94\": {\n            \"ID\": \"94\",\n            \"Name\": \"Normal Attacks Hit All Foes\",\n            \"Type\": \"\"\n        },\n        \"95\": {\n            \"ID\": \"95\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n            \"Type\": \"\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Element Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Gradual OD Fill\",\n            \"Type\": \"\"\n        },\n        \"119\": {\n            \"ID\": \"119\",\n            \"Name\": \"Gradual BC Drain\",\n            \"Type\": \"\"\n        },\n        \"123\": {\n            \"ID\": \"123\",\n            \"Name\": \"OD Gauge Reduction\",\n            \"Type\": \"\"\n        },\n        \"126\": {\n            \"ID\": \"126\",\n            \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n            \"Type\": \"\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Lock On\",\n            \"Type\": \"\"\n        },\n        \"130\": {\n            \"ID\": \"130\",\n            \"Name\": \"Parameter Reduction Counter\",\n            \"Type\": \"\"\n        },\n        \"131\": {\n            \"ID\": \"131\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"132\": {\n            \"ID\": \"132\",\n            \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"901\": {\n            \"ID\": \"901\",\n            \"Name\": \"Raid Heal (on Map)\",\n            \"Type\": \"\"\n        },\n        \"902\": {\n            \"ID\": \"902\",\n            \"Name\": \"Raid Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"903\": {\n            \"ID\": \"903\",\n            \"Name\": \"Raid Boss Reveal\",\n            \"Type\": \"\"\n        },\n        \"905\": {\n            \"ID\": \"905\",\n            \"Name\": \"Raid Teleport\",\n            \"Type\": \"\"\n        },\n        \"906\": {\n            \"ID\": \"906\",\n            \"Name\": \"Raid Flee\",\n            \"Type\": \"\"\n        },\n        \"907\": {\n            \"ID\": \"907\",\n            \"Name\": \"Raid Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"908\": {\n            \"ID\": \"908\",\n            \"Name\": \"Raid Item Drop Rate Boost\",\n            \"Type\": \"\"\n        },\n        \"10000\": {\n            \"ID\": \"10000\",\n            \"Name\": \"Taunt\",\n            \"Type\": \"\"\n        },\n        \"10001\": {\n            \"ID\": \"10001\",\n            \"Name\": \"Stealth\",\n            \"Type\": \"\"\n        },\n        \"10002\": {\n            \"ID\": \"10002\",\n            \"Name\": \"Shield (old)\",\n            \"Type\": \"\"\n        },\n        \"10003\": {\n            \"ID\": \"10003\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"10004\": {\n            \"ID\": \"10004\",\n            \"Name\": \"Damage Immunity\",\n            \"Type\": \"\"\n        },\n        \"10005\": {\n            \"ID\": \"10005\",\n            \"Name\": \"Turn Skip (short duration)\",\n            \"Type\": \"\"\n        },\n        \"10006\": {\n            \"ID\": \"10006\",\n            \"Name\": \"Turn Skip (long duration)\",\n            \"Type\": \"\"\n        },\n        \"10007\": {\n            \"ID\": \"10007\",\n            \"Name\": \"Evasion\",\n            \"Type\": \"\"\n        },\n        \"10009\": {\n            \"ID\": \"10009\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"10012\": {\n            \"ID\": \"10012\",\n            \"Name\": \"OD Drain\",\n            \"Type\": \"\"\n        },\n        \"10015\": {\n            \"ID\": \"10015\",\n            \"Name\": \"Elemental Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"10016\": {\n            \"ID\": \"10016\",\n            \"Name\": \"Element Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"10017\": {\n            \"ID\": \"10017\",\n            \"Name\": \"Elemental Shield\",\n            \"Type\": \"\"\n        },\n        \"10018\": {\n            \"ID\": \"10018\",\n            \"Name\": \"Max HP Reduction\",\n            \"Type\": \"\"\n        },\n        \"10019\": {\n            \"ID\": \"10019\",\n            \"Name\": \"Effect Purge\",\n            \"Type\": \"\"\n        },\n        \"10020\": {\n            \"ID\": \"10020\",\n            \"Name\": \"Piercing Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"10021\": {\n            \"ID\": \"10021\",\n            \"Name\": \"Active Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10022\": {\n            \"ID\": \"10022\",\n            \"Name\": \"Passive Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10023\": {\n            \"ID\": \"10023\",\n            \"Name\": \"HC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"10025\": {\n            \"ID\": \"10025\",\n            \"Name\": \"KO Resistance Negation\",\n            \"Type\": \"\"\n        },\n        \"10026\": {\n            \"ID\": \"10026\",\n            \"Name\": \"Doom\",\n            \"Type\": \"\"\n        },\n        \"11000\": {\n            \"ID\": \"11000\",\n            \"Name\": \"Negative HP-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"11001\": {\n            \"ID\": \"11001\",\n            \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n            \"Type\": \"\"\n        },\n        \"11002\": {\n            \"ID\": \"11002\",\n            \"Name\": \"HP Limit Break, Convert to HP\",\n            \"Type\": \"\"\n        },\n        \"11003\": {\n            \"ID\": \"11003\",\n            \"Name\": \"Effect Negation\",\n            \"Type\": \"\"\n        },\n        \"70001\": {\n            \"ID\": \"70001\",\n            \"Name\": \"Mana Bubble Shield\",\n            \"Type\": \"\"\n        },\n        \"70002\": {\n            \"ID\": \"70002\",\n            \"Name\": \"Recast\",\n            \"Type\": \"\"\n        },\n        \"2-5\": {\n            \"ID\": \"2-5\",\n            \"Name\": \"Burst Heal and DEF/REC Boost\",\n            \"Type\": \"\"\n        }\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given proc ID.\n     * @param id Proc ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForProc(id, metadata = PROC_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Determine if a given proc ID's type is an attack.\n     * @param id Proc ID to check.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n     */\n    function isAttackingProcId(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n    }\n\n    /**\n     * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n     * @param damageFrames Damage frames that each have their own proc ID.\n     * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Damage frames entry whose frames are based on the input damage frames.\n     */\n    function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n        // relevant frames are all effects for healing or attacking\n        const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n        const relevantFrames = inputFrames.filter(frame => {\n            const procId = getEffectId(frame);\n            return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n        });\n        const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n            const keepFirstFrame = index === 0;\n            const numFrames = frameEntry['frame times'].length;\n            const damageDistribution = frameEntry['hit dmg% distribution'];\n            const frameTimes = frameEntry['frame times'];\n            for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n                acc.push({\n                    damage: damageDistribution[frameIndex],\n                    time: frameTimes[frameIndex],\n                });\n            }\n            return acc;\n        }, []);\n        const resultDamageFramesEntry = {\n            'effect delay time(ms)/frame': effectDelay,\n            'frame times': [],\n            'hit dmg% distribution': [],\n            'hit dmg% distribution (total)': 0,\n            hits: 0,\n        };\n        unifiedFrames.sort((a, b) => a.time - b.time)\n            .forEach(({ time, damage }) => {\n            resultDamageFramesEntry['frame times'].push(time);\n            resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n            resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n        });\n        resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n        return resultDamageFramesEntry;\n    }\n\n    var index = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLevelEntryForBurst: getLevelEntryForBurst,\n        getEffectsForBurst: getEffectsForBurst,\n        getExtraAttackDamageFramesEntry: getExtraAttackDamageFramesEntry\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given passive ID.\n     * @param id Passive ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Get the associated name for a given proc ID.\n     * @param id Proc ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Name of the proc ID if it exists, empty string otherwise.\n     */\n    function getNameForProc(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Get the associated name for a given passive ID.\n     * @param id Passive ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Name of the passive ID if it exists, empty string otherwise.\n     */\n    function getNameForPassive(id, metadata) {\n        const metadataEntry = getMetadataForPassive(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Determine if a given effect object is a proc effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a proc effect based on its properties.\n     */\n    function isProcEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n    }\n\n    /**\n     * @description Determine if a given effect object is a passive effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a passive effect based on its properties.\n     */\n    function isPassiveEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n    }\n\n    var Ailment;\n    (function (Ailment) {\n        Ailment[\"Poison\"] = \"poison\";\n        Ailment[\"Weak\"] = \"weak\";\n        Ailment[\"Sick\"] = \"sick\";\n        Ailment[\"Injury\"] = \"injury\";\n        Ailment[\"Curse\"] = \"curse\";\n        Ailment[\"Paralysis\"] = \"paralysis\";\n        Ailment[\"AttackReduction\"] = \"atk down\";\n        Ailment[\"DefenseReduction\"] = \"def down\";\n        Ailment[\"RecoveryReduction\"] = \"rec down\";\n        Ailment[\"Unknown\"] = \"unknown\";\n    })(Ailment || (Ailment = {}));\n    var ArenaCondition;\n    (function (ArenaCondition) {\n        ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n        ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n        ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n        ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n        ArenaCondition[\"hp_min\"] = \"hp_min\";\n        ArenaCondition[\"hp_max\"] = \"hp_max\";\n        ArenaCondition[\"atk_max\"] = \"atk_max\";\n        ArenaCondition[\"random\"] = \"random\";\n    })(ArenaCondition || (ArenaCondition = {}));\n    var MoveType;\n    (function (MoveType) {\n        MoveType[\"Moving\"] = \"1\";\n        MoveType[\"Teleporting\"] = \"2\";\n        MoveType[\"NonMoving\"] = \"3\";\n    })(MoveType || (MoveType = {}));\n    var TargetArea;\n    (function (TargetArea) {\n        TargetArea[\"Aoe\"] = \"aoe\";\n        TargetArea[\"Single\"] = \"single\";\n        TargetArea[\"Random\"] = \"random\";\n    })(TargetArea || (TargetArea = {}));\n    var TargetAreaShorthand;\n    (function (TargetAreaShorthand) {\n        TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n        TargetAreaShorthand[\"Single\"] = \"ST\";\n        TargetAreaShorthand[\"Random\"] = \"RT\";\n    })(TargetAreaShorthand || (TargetAreaShorthand = {}));\n    var TargetType;\n    (function (TargetType) {\n        TargetType[\"Self\"] = \"self\";\n        TargetType[\"Party\"] = \"party\";\n        TargetType[\"Enemy\"] = \"enemy\";\n    })(TargetType || (TargetType = {}));\n    var SpPassiveType;\n    (function (SpPassiveType) {\n        SpPassiveType[\"AddPassive\"] = \"passive\";\n        SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n        SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n        SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n        SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n    })(SpPassiveType || (SpPassiveType = {}));\n    var SphereTypeName;\n    (function (SphereTypeName) {\n        SphereTypeName[\"None\"] = \"None\";\n        SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n        SphereTypeName[\"Critical\"] = \"Critical\";\n        SphereTypeName[\"Drop\"] = \"Drop\";\n        SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n        SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n        SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n        SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n        SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n        SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n        SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n        SphereTypeName[\"Spark\"] = \"Spark\";\n        SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n        SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n        SphereTypeName[\"Special\"] = \"Special\";\n    })(SphereTypeName || (SphereTypeName = {}));\n    var SphereTypeId;\n    (function (SphereTypeId) {\n        SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n        SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n        SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n        SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n        SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n        SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n        SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n        SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n        SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n        SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n        SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n        SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n        SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n        SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n        SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n    })(SphereTypeId || (SphereTypeId = {}));\n    var SpCategoryName;\n    (function (SpCategoryName) {\n        SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n        SpCategoryName[\"Spark\"] = \"Spark\";\n        SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n        SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n        SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n        SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n        SpCategoryName[\"Drops\"] = \"Drops\";\n        SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n        SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n        SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n        SpCategoryName[\"Special\"] = \"Special\";\n        SpCategoryName[\"Unknown\"] = \"Unknown\";\n    })(SpCategoryName || (SpCategoryName = {}));\n    var SpCategoryId;\n    (function (SpCategoryId) {\n        SpCategoryId[\"Parameter Boost\"] = \"1\";\n        SpCategoryId[\"Spark\"] = \"2\";\n        SpCategoryId[\"Critical Hits\"] = \"3\";\n        SpCategoryId[\"Attack Boost\"] = \"4\";\n        SpCategoryId[\"BB Gauge\"] = \"5\";\n        SpCategoryId[\"HP Recovery\"] = \"6\";\n        SpCategoryId[\"Drops\"] = \"7\";\n        SpCategoryId[\"Ailment Resistance\"] = \"8\";\n        SpCategoryId[\"Ailment Infliction\"] = \"9\";\n        SpCategoryId[\"Damage Reduction\"] = \"10\";\n        SpCategoryId[\"Special\"] = \"11\";\n    })(SpCategoryId || (SpCategoryId = {}));\n    var UnitAnimationKey;\n    (function (UnitAnimationKey) {\n        UnitAnimationKey[\"Attack\"] = \"attack\";\n        UnitAnimationKey[\"Idle\"] = \"idle\";\n        UnitAnimationKey[\"Move\"] = \"move\";\n    })(UnitAnimationKey || (UnitAnimationKey = {}));\n    var UnitElement;\n    (function (UnitElement) {\n        UnitElement[\"Fire\"] = \"fire\";\n        UnitElement[\"Water\"] = \"water\";\n        UnitElement[\"Earth\"] = \"earth\";\n        UnitElement[\"Thunder\"] = \"thunder\";\n        UnitElement[\"Light\"] = \"light\";\n        UnitElement[\"Dark\"] = \"dark\";\n    })(UnitElement || (UnitElement = {}));\n    var UnitGender;\n    (function (UnitGender) {\n        UnitGender[\"Male\"] = \"male\";\n        UnitGender[\"Female\"] = \"female\";\n        UnitGender[\"Other\"] = \"other\";\n    })(UnitGender || (UnitGender = {}));\n    var UnitGettingType;\n    (function (UnitGettingType) {\n        UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n        UnitGettingType[\"Farmable\"] = \"farmable\";\n        UnitGettingType[\"RareSummon\"] = \"rare summon\";\n        UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n    })(UnitGettingType || (UnitGettingType = {}));\n    var UnitKind;\n    (function (UnitKind) {\n        UnitKind[\"Normal\"] = \"normal\";\n        UnitKind[\"Evolution\"] = \"evo\";\n        UnitKind[\"Enhancing\"] = \"enhancing\";\n        UnitKind[\"Sale\"] = \"sale\";\n    })(UnitKind || (UnitKind = {}));\n    var UnitType;\n    (function (UnitType) {\n        UnitType[\"Lord\"] = \"lord\";\n        UnitType[\"Anima\"] = \"anima\";\n        UnitType[\"Breaker\"] = \"breaker\";\n        UnitType[\"Guardian\"] = \"guardian\";\n        UnitType[\"Oracle\"] = \"oracle\";\n        UnitType[\"Rex\"] = \"rex\";\n    })(UnitType || (UnitType = {}));\n    var ItemType;\n    (function (ItemType) {\n        ItemType[\"Consumable\"] = \"consumable\";\n        ItemType[\"Material\"] = \"material\";\n        ItemType[\"Sphere\"] = \"sphere\";\n        ItemType[\"EvolutionMaterial\"] = \"evomat\";\n        ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n        ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n    })(ItemType || (ItemType = {}));\n    var MimicUnitIds;\n    (function (MimicUnitIds) {\n        MimicUnitIds[\"Mimic\"] = \"60142\";\n        MimicUnitIds[\"BatMimic\"] = \"60143\";\n        MimicUnitIds[\"DragonMimic\"] = \"60144\";\n        MimicUnitIds[\"MetalMimic\"] = \"60224\";\n    })(MimicUnitIds || (MimicUnitIds = {}));\n    /**\n     * @description Known values for the monster groups used in {@link IMimicInfo}.\n     */\n    const MimicMonsterGroupMapping = {\n        '1000': MimicUnitIds.Mimic,\n        '1100': MimicUnitIds.BatMimic,\n        '1101': MimicUnitIds.BatMimic,\n        '1200': MimicUnitIds.DragonMimic,\n        '1300': MimicUnitIds.MetalMimic,\n    };\n\n    var datamineTypes = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get Ailment () { return Ailment; },\n        get ArenaCondition () { return ArenaCondition; },\n        get MoveType () { return MoveType; },\n        get TargetArea () { return TargetArea; },\n        get TargetAreaShorthand () { return TargetAreaShorthand; },\n        get TargetType () { return TargetType; },\n        get SpPassiveType () { return SpPassiveType; },\n        get SphereTypeName () { return SphereTypeName; },\n        get SphereTypeId () { return SphereTypeId; },\n        get SpCategoryName () { return SpCategoryName; },\n        get SpCategoryId () { return SpCategoryId; },\n        get UnitAnimationKey () { return UnitAnimationKey; },\n        get UnitElement () { return UnitElement; },\n        get UnitGender () { return UnitGender; },\n        get UnitGettingType () { return UnitGettingType; },\n        get UnitKind () { return UnitKind; },\n        get UnitType () { return UnitType; },\n        get ItemType () { return ItemType; },\n        get MimicUnitIds () { return MimicUnitIds; },\n        MimicMonsterGroupMapping: MimicMonsterGroupMapping\n    });\n\n    /**\n     * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n     * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n     * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n     * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n     */\n    function combineEffectsAndDamageFrames(effects, damageFrames) {\n        let combinedEntries = [];\n        if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n            combinedEntries = effects.map((effect, i) => {\n                const correspondingFrameEntry = damageFrames[i];\n                return {\n                    delay: effect['effect delay time(ms)/frame'],\n                    effect,\n                    frames: correspondingFrameEntry,\n                    id: `${effect['proc id'] || effect['unknown proc id']}`,\n                    targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                    targetType: effect['target type'],\n                };\n            });\n        }\n        return combinedEntries;\n    }\n\n    /**\n     * @description Get the name of a given object.\n     * @param effect Object to get the name from.\n     * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n     * @returns Name of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectName(effect, metadata = {}) {\n        let resultName = '';\n        const effectId = getEffectId(effect);\n        if (isPassiveEffect(effect)) {\n            resultName = getNameForPassive(effectId, metadata && metadata.passive);\n        }\n        else if (isProcEffect(effect)) {\n            resultName = getNameForProc(effectId, metadata && metadata.proc);\n        }\n        return resultName;\n    }\n\n    /**\n     * @description Provides info at a glance regarding a buff's source and how it stacks.\n     */\n    var BuffStackType;\n    (function (BuffStackType) {\n        /**\n         * @description The buff is activated via some skill and lasts for a number of turns.\n         * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n         * from different levels. Two possible levels of sources are:\n         * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n         * 2. Ultimate Brave Burst or Dual Brave Burst\n         */\n        BuffStackType[\"Active\"] = \"active\";\n        /**\n         * @description The buff is always active provided that the source is not nullified.\n         * Most passive buffs can stack with themselves.\n         */\n        BuffStackType[\"Passive\"] = \"passive\";\n        /**\n         * @description The buff is applied for a number of turns once a certain condition is met.\n         * Buffs of the same type are not able to stack.\n         */\n        BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n        /**\n         * @description Only one instance of the buff can be active at a time and can last indefinitely.\n         * A couple examples of this are Barrier and Max HP Boost.\n         */\n        BuffStackType[\"Singleton\"] = \"singleton\";\n        /**\n         * @description The buff's effects immediately apply to the target(s). This differs from singleton\n         * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n         * in the HP bar filling by the sum of those burst heals).\n         */\n        BuffStackType[\"Burst\"] = \"burst\";\n        /**\n         * @description A specific subset of `Burst` type buffs that deal damage to the target.\n         */\n        BuffStackType[\"Attack\"] = \"attack\";\n        /**\n         * @description Only for buffs that cannot be processed by the library yet.\n         */\n        BuffStackType[\"Unknown\"] = \"unknown\";\n    })(BuffStackType || (BuffStackType = {}));\n    var BuffSource;\n    (function (BuffSource) {\n        BuffSource[\"BraveBurst\"] = \"bb\";\n        BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n        BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n        BuffSource[\"DualBraveBurst\"] = \"dbb\";\n        BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n        BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n        BuffSource[\"SpEnhancement\"] = \"sp\";\n        BuffSource[\"Item\"] = \"item\";\n        BuffSource[\"LeaderSkill\"] = \"ls\";\n        BuffSource[\"ExtraSkill\"] = \"es\";\n        /**\n         * @description Buffs that result of having a number of OE+ units in the squad.\n         */\n        BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n        /**\n         * @description Buffs based on a units type. See {@link UnitType}.\n         */\n        BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n        /**\n         * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n         * as well as ambient turn reductions present in some late-game quests.\n         */\n        BuffSource[\"Quest\"] = \"quest\";\n    })(BuffSource || (BuffSource = {}));\n    /**\n     * @description Extra element values that can be used in addition to {@link UnitElement}.\n     */\n    var BuffConditionElement;\n    (function (BuffConditionElement) {\n        BuffConditionElement[\"Unknown\"] = \"unknown\";\n        BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n        BuffConditionElement[\"All\"] = \"all\";\n    })(BuffConditionElement || (BuffConditionElement = {}));\n    /**\n     * @description Stats on a unit that a buff can affect.\n     */\n    var UnitStat;\n    (function (UnitStat) {\n        UnitStat[\"hp\"] = \"hp\";\n        UnitStat[\"atk\"] = \"atk\";\n        UnitStat[\"def\"] = \"def\";\n        UnitStat[\"rec\"] = \"rec\";\n        UnitStat[\"crit\"] = \"crit\";\n        UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n        UnitStat[\"bbGauge\"] = \"bbGauge\";\n        UnitStat[\"odGauge\"] = \"odGauge\";\n        UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n        UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n        UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n        UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n        UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n        UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n        UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n        UnitStat[\"bcCostReduction\"] = \"bcCostReduction\";\n        UnitStat[\"bbGaugeConsumptionReduction\"] = \"bbGaugeConsumptionReduction\";\n        UnitStat[\"ailmentAttackBoost\"] = \"ailmentAttackBoost\";\n        UnitStat[\"poisonResist\"] = \"poisonResist\";\n        UnitStat[\"weakResist\"] = \"weakResist\";\n        UnitStat[\"sickResist\"] = \"sickResist\";\n        UnitStat[\"injuryResist\"] = \"injuryResist\";\n        UnitStat[\"curseResist\"] = \"curseResist\";\n        UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n        UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n        UnitStat[\"weakInflict\"] = \"weakInflict\";\n        UnitStat[\"sickInflict\"] = \"sickInflict\";\n        UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n        UnitStat[\"curseInflict\"] = \"curseInflict\";\n        UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n        UnitStat[\"poisonCounter\"] = \"poisonCounter\";\n        UnitStat[\"weakCounter\"] = \"weakCounter\";\n        UnitStat[\"sickCounter\"] = \"sickCounter\";\n        UnitStat[\"injuryCounter\"] = \"injuryCounter\";\n        UnitStat[\"curseCounter\"] = \"curseCounter\";\n        UnitStat[\"paralysisCounter\"] = \"paralysisCounter\";\n        UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n        UnitStat[\"defDownResist\"] = \"defDownResist\";\n        UnitStat[\"recDownResist\"] = \"recDownResist\";\n        UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n        UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n        UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n        UnitStat[\"atkDownCounter\"] = \"atkDownCounter\";\n        UnitStat[\"defDownCounter\"] = \"defDownCounter\";\n        UnitStat[\"recDownCounter\"] = \"recDownCounter\";\n        UnitStat[\"mitigation\"] = \"mitigation\";\n        UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n        UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n        UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n        UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n        UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n        UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n        UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n        UnitStat[\"guardMitigation\"] = \"guardMitigation\";\n        UnitStat[\"barrier\"] = \"barrier\";\n        UnitStat[\"fireElementalDamage\"] = \"fireElementalDamage\";\n        UnitStat[\"waterElementalDamage\"] = \"waterElementalDamage\";\n        UnitStat[\"earthElementalDamage\"] = \"earthElementalDamage\";\n        UnitStat[\"thunderElementalDamage\"] = \"thunderElementalDamage\";\n        UnitStat[\"lightElementalDamage\"] = \"lightElementalDamage\";\n        UnitStat[\"darkElementalDamage\"] = \"darkElementalDamage\";\n        UnitStat[\"elementalWeaknessDamageMitigation\"] = \"elementalWeaknessDamageMitigation\";\n        UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n        UnitStat[\"koResistance\"] = \"koResistance\";\n        UnitStat[\"revive\"] = \"revive\";\n        UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n        UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n        UnitStat[\"criticalDamageMitigation\"] = \"criticalDamageMitigation\";\n        UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n        UnitStat[\"bbAtk\"] = \"bbAtk\";\n        UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n        UnitStat[\"damageReflect\"] = \"damageReflect\";\n        UnitStat[\"targetingModification\"] = \"targetingModification\";\n        UnitStat[\"elementModification\"] = \"elementModification\";\n        UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n        UnitStat[\"extraAction\"] = \"extraAction\";\n        UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n    })(UnitStat || (UnitStat = {}));\n    var IconId;\n    (function (IconId) {\n        IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n        IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n        IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n        IconId[\"CONDITIONALBUFF_HPTHRESH\"] = \"CONDITIONALBUFF_HPTHRESH\";\n        IconId[\"BUFF_ADDTO_BB\"] = \"BUFF_ADDTO_BB\";\n        IconId[\"BUFF_ADDTO_SBB\"] = \"BUFF_ADDTO_SBB\";\n        IconId[\"BUFF_ADDTO_UBB\"] = \"BUFF_ADDTO_UBB\";\n        IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n        IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n        IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n        IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n        IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n        IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n        IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n        IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n        IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n        IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n        IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n        IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n        IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n        IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n        IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n        IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n        IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n        IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n        IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n        IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n        IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n        IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n        IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n        IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n        IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n        IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n        IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n        IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n        IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n        IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n        IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n        IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n        IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n        IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n        IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n        IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n        IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n        IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n        IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n        IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n        IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n        IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n        IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n        IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n        IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n        IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n        IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n        IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n        IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n        IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n        IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n        IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n        IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n        IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n        IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n        IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n        IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n        IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n        IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n        IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n        IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n        IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n        IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n        IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n        IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n        IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n        IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n        IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n        IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n        IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n        IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n        IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n        IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n        IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n        IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n        IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n        IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n        IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n        IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n        IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n        IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n        IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n        IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n        IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n        IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n        IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n        IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n        IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n        IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n        IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n        IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n        IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n        IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n        IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n        IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n        IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n        IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n        IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n        IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n        IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n        IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n        IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n        IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n        IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n        IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n        IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n        IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n        IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n        IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n        IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n        IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n        IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n        IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n        IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n        IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n        IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n        IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n        IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n        IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n        IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n        IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n        IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n        IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n        IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n        IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n        IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n        IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n        IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n        IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n        IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n        IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n        IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n        IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n        IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n        IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n        IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n        IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n        IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n        IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n        IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n        IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n        IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n        IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n        IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n        IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n        IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n        IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n        IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n        IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n        IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n        IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n        IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n        IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n        IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n        IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n        IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n        IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n        IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n        IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n        IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n        IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n        IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n        IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n        IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n        IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n        IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n        IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n        IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n        IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n        IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n        IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n        IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n        IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n        IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n        IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n        IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n        IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n        IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n        IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n        IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n        IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n        IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n        IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n        IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n        IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n        IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n        IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n        IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n        IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n        IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n        IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n        IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n        IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n        IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n        IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n        IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n        IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n        IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n        IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n        IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n        IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n        IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n        IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n        IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n        IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n        IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n        IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n        IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n        IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n        IconId[\"BUFF_HPSCALEDATKUP\"] = \"BUFF_HPSCALEDATKUP\";\n        IconId[\"BUFF_HPSCALEDATKDOWN\"] = \"BUFF_HPSCALEDATKDOWN\";\n        IconId[\"BUFF_HPSCALEDDEFUP\"] = \"BUFF_HPSCALEDDEFUP\";\n        IconId[\"BUFF_HPSCALEDDEFDOWN\"] = \"BUFF_HPSCALEDDEFDOWN\";\n        IconId[\"BUFF_HPSCALEDRECUP\"] = \"BUFF_HPSCALEDRECUP\";\n        IconId[\"BUFF_HPSCALEDRECDOWN\"] = \"BUFF_HPSCALEDRECDOWN\";\n        IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n        IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n        IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n        IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n        IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n        IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n        IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n        IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n        IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n        IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n        IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n        IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n        IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n        IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n        IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n        IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n        IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n        IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n        IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n        IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n        IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n        IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n        IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n        IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n        IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n        IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n        IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n        IconId[\"BUFF_POISONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n        IconId[\"BUFF_POISIONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n        IconId[\"BUFF_WEAKCOUNTER\"] = \"BUFF_WEAKCOUNTER\";\n        IconId[\"BUFF_SICKCOUNTER\"] = \"BUFF_SICKCOUNTER\";\n        IconId[\"BUFF_INJCONTER\"] = \"BUFF_INJCONTER\";\n        IconId[\"BUFF_CURSECOUNTER\"] = \"BUFF_CURSECOUNTER\";\n        IconId[\"BUFF_PARALYCOUNTER\"] = \"BUFF_PARALYCOUNTER\";\n        IconId[\"BUFF_PROB_ATKREDUC\"] = \"BUFF_PROB_ATKREDUC\";\n        IconId[\"BUFF_PROB_DEFREDUC\"] = \"BUFF_PROB_DEFREDUC\";\n        IconId[\"BUFF_PROB_RECREDUC\"] = \"BUFF_PROB_RECREDUC\";\n        IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n        IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n        // elemental damage reduction buffs\n        IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n        IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n        IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n        IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n        IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n        IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n        IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n        // elemental weakness buffs\n        IconId[\"BUFF_FIREDMGUP\"] = \"BUFF_FIREDMGUP\";\n        IconId[\"BUFF_WATERDMGUP\"] = \"BUFF_WATERDMGUP\";\n        IconId[\"BUFF_WATERMDGUP\"] = \"BUFF_WATERDMGUP\";\n        IconId[\"BUFF_EARTHDMGUP\"] = \"BUFF_EARTHDMGUP\";\n        IconId[\"BUFF_THUNDERDMGUP\"] = \"BUFF_THUNDERDMGUP\";\n        IconId[\"BUFF_LIGHTDMGUP\"] = \"BUFF_LIGHTDMGUP\";\n        IconId[\"BUFF_DARKDMGUP\"] = \"BUFF_DARKDMGUP\";\n        IconId[\"BUFF_ELEMENTDMGUP\"] = \"BUFF_ELEMENTDMGUP\";\n        IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n        IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n        IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n        IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n        IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n        IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n        IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n        IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n        IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n        IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n        IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n        IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n        IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n        IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n        IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n        IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n        IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n        IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n        IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n        IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n        IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n        IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n        IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n        IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n        IconId[\"BUFF_KO\"] = \"BUFF_KO\";\n        IconId[\"BUFF_KOBLOCK\"] = \"BUFF_KOBLOCK\";\n        IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n        IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n        IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n        IconId[\"BUFF_CRTDOWN\"] = \"BUFF_CRTDOWN\";\n        IconId[\"BUFF_ELEMENTDOWN\"] = \"BUFF_ELEMENTDOWN\";\n        IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n        IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n        IconId[\"BUFF_SPARKDMGUP\"] = \"BUFF_SPARKDMGUP\";\n        IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n        IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n        IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n        IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n        IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n        IconId[\"BUFF_SPARKBBUP\"] = \"BUFF_SPARKBBUP\";\n        IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n        IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n        IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n        IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n        IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n        IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n        IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n        IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n        IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n        IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n        IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n        IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n        IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n        IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n        IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n        IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n        IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n        IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n        IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n        IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n        IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n        IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n        IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n        IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n        IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n        IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n        IconId[\"BUFF_BBATKUP\"] = \"BUFF_BBATKUP\";\n        IconId[\"BUFF_SBBATKUP\"] = \"BUFF_SBBATKUP\";\n        IconId[\"BUFF_UBBATKUP\"] = \"BUFF_UBBATKUP\";\n        IconId[\"BUFF_BBATKDOWN\"] = \"BUFF_BBATKDOWN\";\n        IconId[\"BUFF_SBBATKDOWN\"] = \"BUFF_SBBATKDOWN\";\n        IconId[\"BUFF_UBBATKDOWN\"] = \"BUFF_UBBATKDOWN\";\n        IconId[\"BUFF_BBCOST_REDUCTION\"] = \"BUFF_BBCOST_REDUCTION\";\n        IconId[\"BUFF_GUARDCUT\"] = \"BUFF_GUARDCUT\";\n        IconId[\"BUFF_GUARDBBUP\"] = \"BUFF_GUARDBBUP\";\n        IconId[\"BUFF_FIRESHIELD\"] = \"BUFF_FIRESHIELD\";\n        IconId[\"BUFF_WATERSHIELD\"] = \"BUFF_WATERSHIELD\";\n        IconId[\"BUFF_EARTHSHIELD\"] = \"BUFF_EARTHSHIELD\";\n        IconId[\"BUFF_THUNDERSHIELD\"] = \"BUFF_THUNDERSHIELD\";\n        IconId[\"BUFF_LIGHTSHIELD\"] = \"BUFF_LIGHTSHIELD\";\n        IconId[\"BUFF_DARKSHIELD\"] = \"BUFF_DARKSHIELD\";\n        IconId[\"BUFF_ELEMENTSHIELD\"] = \"BUFF_ELEMENTSHIELD\";\n        IconId[\"BUFF_AILDMGUP\"] = \"BUFF_AILDMGUP\";\n        IconId[\"ATK_ST\"] = \"ATK_ST\";\n        IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n        IconId[\"ATK_RT\"] = \"ATK_RT\";\n        IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n        IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n        IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n        IconId[\"ATK_ST_PIERCING_PROPORTIONAL\"] = \"ATK_ST_PIERCING_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PIERCING_PROPORTIONAL\"] = \"ATK_AOE_PIERCING_PROPORTIONAL\";\n        IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n        IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n        IconId[\"ATK_ST_PIERCING_FIXED\"] = \"ATK_ST_PIERCING_FIXED\";\n        IconId[\"ATK_AOE_PIERCING_FIXED\"] = \"ATK_AOE_PIERCING_FIXED\";\n        IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n        IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n        IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n        IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n        IconId[\"ATK_ST_HPSCALED\"] = \"ATK_ST_HPSCALED\";\n        IconId[\"ATK_AOE_HPSCALED\"] = \"ATK_AOE_HPSCALED\";\n        IconId[\"ATK_ST_BBGAUGESCALED\"] = \"ATK_ST_BBGAUGESCALED\";\n        IconId[\"ATK_AOE_BBGAUGESCALED\"] = \"ATK_AOE_BBGAUGESCALED\";\n        IconId[\"ATK_ST_USAGESCALED\"] = \"ATK_ST_USAGESCALED\";\n        IconId[\"ATK_AOE_USAGESCALED\"] = \"ATK_AOE_USAGESCALED\";\n    })(IconId || (IconId = {}));\n    /**\n     * @description Format of these IDs are `<passive|proc|conditional>:<original effect ID>:<stat>`.\n     * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n     * source of a given buff.\n     */\n    var BuffId;\n    (function (BuffId) {\n        BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n        BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n        BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n        BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n        BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n        BuffId[\"passive:1:def\"] = \"passive:1:def\";\n        BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n        BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n        BuffId[\"passive:2:elemental-hp\"] = \"passive:2:elemental-hp\";\n        BuffId[\"passive:2:elemental-atk\"] = \"passive:2:elemental-atk\";\n        BuffId[\"passive:2:elemental-def\"] = \"passive:2:elemental-def\";\n        BuffId[\"passive:2:elemental-rec\"] = \"passive:2:elemental-rec\";\n        BuffId[\"passive:2:elemental-crit\"] = \"passive:2:elemental-crit\";\n        BuffId[\"passive:3:type based-hp\"] = \"passive:3:type based-hp\";\n        BuffId[\"passive:3:type based-atk\"] = \"passive:3:type based-atk\";\n        BuffId[\"passive:3:type based-def\"] = \"passive:3:type based-def\";\n        BuffId[\"passive:3:type based-rec\"] = \"passive:3:type based-rec\";\n        BuffId[\"passive:3:type based-crit\"] = \"passive:3:type based-crit\";\n        BuffId[\"passive:4:resist-poison\"] = \"passive:4:resist-poison\";\n        BuffId[\"passive:4:resist-weak\"] = \"passive:4:resist-weak\";\n        BuffId[\"passive:4:resist-sick\"] = \"passive:4:resist-sick\";\n        BuffId[\"passive:4:resist-injury\"] = \"passive:4:resist-injury\";\n        BuffId[\"passive:4:resist-curse\"] = \"passive:4:resist-curse\";\n        BuffId[\"passive:4:resist-paralysis\"] = \"passive:4:resist-paralysis\";\n        BuffId[\"passive:5:mitigate-fire\"] = \"passive:5:mitigate-fire\";\n        BuffId[\"passive:5:mitigate-water\"] = \"passive:5:mitigate-water\";\n        BuffId[\"passive:5:mitigate-earth\"] = \"passive:5:mitigate-earth\";\n        BuffId[\"passive:5:mitigate-thunder\"] = \"passive:5:mitigate-thunder\";\n        BuffId[\"passive:5:mitigate-light\"] = \"passive:5:mitigate-light\";\n        BuffId[\"passive:5:mitigate-dark\"] = \"passive:5:mitigate-dark\";\n        BuffId[\"passive:5:mitigate-unknown\"] = \"passive:5:mitigate-unknown\";\n        BuffId[\"passive:8:mitigation\"] = \"passive:8:mitigation\";\n        BuffId[\"passive:9:gradual bc fill\"] = \"passive:9:gradual bc fill\";\n        BuffId[\"passive:10:hc efficacy\"] = \"passive:10:hc efficacy\";\n        BuffId[\"passive:11:hp conditional-atk\"] = \"passive:11:hp conditional-atk\";\n        BuffId[\"passive:11:hp conditional-def\"] = \"passive:11:hp conditional-def\";\n        BuffId[\"passive:11:hp conditional-rec\"] = \"passive:11:hp conditional-rec\";\n        BuffId[\"passive:11:hp conditional-crit\"] = \"passive:11:hp conditional-crit\";\n        BuffId[\"passive:12:hp conditional drop boost-bc\"] = \"passive:12:hp conditional drop boost-bc\";\n        BuffId[\"passive:12:hp conditional drop boost-hc\"] = \"passive:12:hp conditional drop boost-hc\";\n        BuffId[\"passive:12:hp conditional drop boost-item\"] = \"passive:12:hp conditional drop boost-item\";\n        BuffId[\"passive:12:hp conditional drop boost-zel\"] = \"passive:12:hp conditional drop boost-zel\";\n        BuffId[\"passive:12:hp conditional drop boost-karma\"] = \"passive:12:hp conditional drop boost-karma\";\n        BuffId[\"passive:13:bc fill on enemy defeat\"] = \"passive:13:bc fill on enemy defeat\";\n        BuffId[\"passive:14:chance mitigation\"] = \"passive:14:chance mitigation\";\n        BuffId[\"passive:15:heal on enemy defeat\"] = \"passive:15:heal on enemy defeat\";\n        BuffId[\"passive:16:heal on win\"] = \"passive:16:heal on win\";\n        BuffId[\"passive:17:hp absorb\"] = \"passive:17:hp absorb\";\n        BuffId[\"passive:19:drop boost-bc\"] = \"passive:19:drop boost-bc\";\n        BuffId[\"passive:19:drop boost-hc\"] = \"passive:19:drop boost-hc\";\n        BuffId[\"passive:19:drop boost-item\"] = \"passive:19:drop boost-item\";\n        BuffId[\"passive:19:drop boost-zel\"] = \"passive:19:drop boost-zel\";\n        BuffId[\"passive:19:drop boost-karma\"] = \"passive:19:drop boost-karma\";\n        BuffId[\"passive:20:chance inflict-poison\"] = \"passive:20:chance inflict-poison\";\n        BuffId[\"passive:20:chance inflict-weak\"] = \"passive:20:chance inflict-weak\";\n        BuffId[\"passive:20:chance inflict-sick\"] = \"passive:20:chance inflict-sick\";\n        BuffId[\"passive:20:chance inflict-injury\"] = \"passive:20:chance inflict-injury\";\n        BuffId[\"passive:20:chance inflict-curse\"] = \"passive:20:chance inflict-curse\";\n        BuffId[\"passive:20:chance inflict-paralysis\"] = \"passive:20:chance inflict-paralysis\";\n        BuffId[\"passive:20:chance inflict-atk down\"] = \"passive:20:chance inflict-atk down\";\n        BuffId[\"passive:20:chance inflict-def down\"] = \"passive:20:chance inflict-def down\";\n        BuffId[\"passive:20:chance inflict-rec down\"] = \"passive:20:chance inflict-rec down\";\n        BuffId[\"passive:20:chance inflict-unknown\"] = \"passive:20:chance inflict-unknown\";\n        BuffId[\"passive:21:first turn-atk\"] = \"passive:21:first turn-atk\";\n        BuffId[\"passive:21:first turn-def\"] = \"passive:21:first turn-def\";\n        BuffId[\"passive:21:first turn-rec\"] = \"passive:21:first turn-rec\";\n        BuffId[\"passive:21:first turn-crit\"] = \"passive:21:first turn-crit\";\n        BuffId[\"passive:23:bc fill on win\"] = \"passive:23:bc fill on win\";\n        BuffId[\"passive:24:heal on hit\"] = \"passive:24:heal on hit\";\n        BuffId[\"passive:25:bc fill on hit\"] = \"passive:25:bc fill on hit\";\n        BuffId[\"passive:26:chance damage reflect\"] = \"passive:26:chance damage reflect\";\n        BuffId[\"passive:27:target chance change\"] = \"passive:27:target chance change\";\n        BuffId[\"passive:28:hp conditional target chance change\"] = \"passive:28:hp conditional target chance change\";\n        BuffId[\"passive:29:chance def ignore\"] = \"passive:29:chance def ignore\";\n        BuffId[\"passive:30:bb gauge conditional-atk\"] = \"passive:30:bb gauge conditional-atk\";\n        BuffId[\"passive:30:bb gauge conditional-def\"] = \"passive:30:bb gauge conditional-def\";\n        BuffId[\"passive:30:bb gauge conditional-rec\"] = \"passive:30:bb gauge conditional-rec\";\n        BuffId[\"passive:30:bb gauge conditional-crit\"] = \"passive:30:bb gauge conditional-crit\";\n        BuffId[\"passive:31:spark-damage\"] = \"passive:31:spark-damage\";\n        BuffId[\"passive:31:spark-bc\"] = \"passive:31:spark-bc\";\n        BuffId[\"passive:31:spark-hc\"] = \"passive:31:spark-hc\";\n        BuffId[\"passive:31:spark-item\"] = \"passive:31:spark-item\";\n        BuffId[\"passive:31:spark-zel\"] = \"passive:31:spark-zel\";\n        BuffId[\"passive:31:spark-karma\"] = \"passive:31:spark-karma\";\n        BuffId[\"passive:32:bc efficacy\"] = \"passive:32:bc efficacy\";\n        BuffId[\"passive:33:gradual heal\"] = \"passive:33:gradual heal\";\n        BuffId[\"passive:34:critical damage\"] = \"passive:34:critical damage\";\n        BuffId[\"passive:35:bc fill on normal attack\"] = \"passive:35:bc fill on normal attack\";\n        BuffId[\"passive:36:extra action\"] = \"passive:36:extra action\";\n        BuffId[\"passive:37:hit count boost\"] = \"passive:37:hit count boost\";\n        BuffId[\"passive:40:converted-atk\"] = \"passive:40:converted-atk\";\n        BuffId[\"passive:40:converted-def\"] = \"passive:40:converted-def\";\n        BuffId[\"passive:40:converted-rec\"] = \"passive:40:converted-rec\";\n        BuffId[\"passive:41:unique element count-hp\"] = \"passive:41:unique element count-hp\";\n        BuffId[\"passive:41:unique element count-atk\"] = \"passive:41:unique element count-atk\";\n        BuffId[\"passive:41:unique element count-def\"] = \"passive:41:unique element count-def\";\n        BuffId[\"passive:41:unique element count-rec\"] = \"passive:41:unique element count-rec\";\n        BuffId[\"passive:41:unique element count-crit\"] = \"passive:41:unique element count-crit\";\n        BuffId[\"passive:42:gender-hp\"] = \"passive:42:gender-hp\";\n        BuffId[\"passive:42:gender-atk\"] = \"passive:42:gender-atk\";\n        BuffId[\"passive:42:gender-def\"] = \"passive:42:gender-def\";\n        BuffId[\"passive:42:gender-rec\"] = \"passive:42:gender-rec\";\n        BuffId[\"passive:42:gender-crit\"] = \"passive:42:gender-crit\";\n        BuffId[\"passive:43:chance damage to one\"] = \"passive:43:chance damage to one\";\n        BuffId[\"passive:44:flat-hp\"] = \"passive:44:flat-hp\";\n        BuffId[\"passive:44:flat-atk\"] = \"passive:44:flat-atk\";\n        BuffId[\"passive:44:flat-def\"] = \"passive:44:flat-def\";\n        BuffId[\"passive:44:flat-rec\"] = \"passive:44:flat-rec\";\n        BuffId[\"passive:44:flat-crit\"] = \"passive:44:flat-crit\";\n        BuffId[\"passive:45:critical damage reduction-base\"] = \"passive:45:critical damage reduction-base\";\n        BuffId[\"passive:45:critical damage reduction-buff\"] = \"passive:45:critical damage reduction-buff\";\n        BuffId[\"passive:46:hp scaled-atk\"] = \"passive:46:hp scaled-atk\";\n        BuffId[\"passive:46:hp scaled-def\"] = \"passive:46:hp scaled-def\";\n        BuffId[\"passive:46:hp scaled-rec\"] = \"passive:46:hp scaled-rec\";\n        BuffId[\"passive:47:bc fill on spark\"] = \"passive:47:bc fill on spark\";\n        BuffId[\"passive:48:bc cost reduction\"] = \"passive:48:bc cost reduction\";\n        BuffId[\"passive:49:bb gauge consumption reduction\"] = \"passive:49:bb gauge consumption reduction\";\n        BuffId[\"passive:50:elemental weakness damage-fire\"] = \"passive:50:elemental weakness damage-fire\";\n        BuffId[\"passive:50:elemental weakness damage-water\"] = \"passive:50:elemental weakness damage-water\";\n        BuffId[\"passive:50:elemental weakness damage-earth\"] = \"passive:50:elemental weakness damage-earth\";\n        BuffId[\"passive:50:elemental weakness damage-thunder\"] = \"passive:50:elemental weakness damage-thunder\";\n        BuffId[\"passive:50:elemental weakness damage-light\"] = \"passive:50:elemental weakness damage-light\";\n        BuffId[\"passive:50:elemental weakness damage-dark\"] = \"passive:50:elemental weakness damage-dark\";\n        BuffId[\"passive:50:elemental weakness damage-unknown\"] = \"passive:50:elemental weakness damage-unknown\";\n        BuffId[\"passive:53:critical damage-base\"] = \"passive:53:critical damage-base\";\n        BuffId[\"passive:53:critical damage-buff\"] = \"passive:53:critical damage-buff\";\n        BuffId[\"passive:53:element damage-base\"] = \"passive:53:element damage-base\";\n        BuffId[\"passive:53:element damage-buff\"] = \"passive:53:element damage-buff\";\n        BuffId[\"passive:53:critical rate-base\"] = \"passive:53:critical rate-base\";\n        BuffId[\"passive:53:critical rate-buff\"] = \"passive:53:critical rate-buff\";\n        BuffId[\"passive:55:hp conditional\"] = \"passive:55:hp conditional\";\n        BuffId[\"passive:58:guard mitigation\"] = \"passive:58:guard mitigation\";\n        BuffId[\"passive:59:bc fill when attacked on guard-percent\"] = \"passive:59:bc fill when attacked on guard-percent\";\n        BuffId[\"passive:59:bc fill when attacked on guard-flat\"] = \"passive:59:bc fill when attacked on guard-flat\";\n        BuffId[\"passive:61:bc fill on guard-percent\"] = \"passive:61:bc fill on guard-percent\";\n        BuffId[\"passive:61:bc fill on guard-flat\"] = \"passive:61:bc fill on guard-flat\";\n        BuffId[\"passive:62:mitigate-fire\"] = \"passive:62:mitigate-fire\";\n        BuffId[\"passive:62:mitigate-water\"] = \"passive:62:mitigate-water\";\n        BuffId[\"passive:62:mitigate-earth\"] = \"passive:62:mitigate-earth\";\n        BuffId[\"passive:62:mitigate-thunder\"] = \"passive:62:mitigate-thunder\";\n        BuffId[\"passive:62:mitigate-light\"] = \"passive:62:mitigate-light\";\n        BuffId[\"passive:62:mitigate-dark\"] = \"passive:62:mitigate-dark\";\n        BuffId[\"passive:62:mitigate-unknown\"] = \"passive:62:mitigate-unknown\";\n        BuffId[\"passive:63:first turn mitigate-fire\"] = \"passive:63:first turn mitigate-fire\";\n        BuffId[\"passive:63:first turn mitigate-water\"] = \"passive:63:first turn mitigate-water\";\n        BuffId[\"passive:63:first turn mitigate-earth\"] = \"passive:63:first turn mitigate-earth\";\n        BuffId[\"passive:63:first turn mitigate-thunder\"] = \"passive:63:first turn mitigate-thunder\";\n        BuffId[\"passive:63:first turn mitigate-light\"] = \"passive:63:first turn mitigate-light\";\n        BuffId[\"passive:63:first turn mitigate-dark\"] = \"passive:63:first turn mitigate-dark\";\n        BuffId[\"passive:63:first turn mitigate-unknown\"] = \"passive:63:first turn mitigate-unknown\";\n        BuffId[\"passive:64:attack boost-bb\"] = \"passive:64:attack boost-bb\";\n        BuffId[\"passive:64:attack boost-sbb\"] = \"passive:64:attack boost-sbb\";\n        BuffId[\"passive:64:attack boost-ubb\"] = \"passive:64:attack boost-ubb\";\n        BuffId[\"passive:65:bc fill on crit\"] = \"passive:65:bc fill on crit\";\n        BuffId[\"passive:66:add effect to skill-bb\"] = \"passive:66:add effect to skill-bb\";\n        BuffId[\"passive:66:add effect to skill-sbb\"] = \"passive:66:add effect to skill-sbb\";\n        BuffId[\"passive:66:add effect to skill-ubb\"] = \"passive:66:add effect to skill-ubb\";\n        BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n        BuffId[\"proc:1:attack\"] = \"proc:1:attack\";\n        BuffId[\"proc:2:burst heal\"] = \"proc:2:burst heal\";\n        BuffId[\"proc:3:gradual heal\"] = \"proc:3:gradual heal\";\n        BuffId[\"proc:4:bc fill-flat\"] = \"proc:4:bc fill-flat\";\n        BuffId[\"proc:4:bc fill-percent\"] = \"proc:4:bc fill-percent\";\n        BuffId[\"proc:5:regular or elemental-atk\"] = \"proc:5:regular or elemental-atk\";\n        BuffId[\"proc:5:regular or elemental-def\"] = \"proc:5:regular or elemental-def\";\n        BuffId[\"proc:5:regular or elemental-rec\"] = \"proc:5:regular or elemental-rec\";\n        BuffId[\"proc:5:regular or elemental-crit\"] = \"proc:5:regular or elemental-crit\";\n        BuffId[\"proc:6:drop boost-bc\"] = \"proc:6:drop boost-bc\";\n        BuffId[\"proc:6:drop boost-hc\"] = \"proc:6:drop boost-hc\";\n        BuffId[\"proc:6:drop boost-item\"] = \"proc:6:drop boost-item\";\n        BuffId[\"proc:7:guaranteed ko resistance\"] = \"proc:7:guaranteed ko resistance\";\n        BuffId[\"proc:8:max hp boost-flat\"] = \"proc:8:max hp boost-flat\";\n        BuffId[\"proc:8:max hp boost-percent\"] = \"proc:8:max hp boost-percent\";\n        BuffId[\"proc:9:regular or elemental reduction-atk\"] = \"proc:9:regular or elemental reduction-atk\";\n        BuffId[\"proc:9:regular or elemental reduction-def\"] = \"proc:9:regular or elemental reduction-def\";\n        BuffId[\"proc:9:regular or elemental reduction-rec\"] = \"proc:9:regular or elemental reduction-rec\";\n        BuffId[\"proc:9:regular or elemental reduction-unknown\"] = \"proc:9:regular or elemental reduction-unknown\";\n        BuffId[\"proc:10:cleanse-poison\"] = \"proc:10:cleanse-poison\";\n        BuffId[\"proc:10:cleanse-weak\"] = \"proc:10:cleanse-weak\";\n        BuffId[\"proc:10:cleanse-sick\"] = \"proc:10:cleanse-sick\";\n        BuffId[\"proc:10:cleanse-injury\"] = \"proc:10:cleanse-injury\";\n        BuffId[\"proc:10:cleanse-curse\"] = \"proc:10:cleanse-curse\";\n        BuffId[\"proc:10:cleanse-paralysis\"] = \"proc:10:cleanse-paralysis\";\n        BuffId[\"proc:10:cleanse-atk down\"] = \"proc:10:cleanse-atk down\";\n        BuffId[\"proc:10:cleanse-def down\"] = \"proc:10:cleanse-def down\";\n        BuffId[\"proc:10:cleanse-rec down\"] = \"proc:10:cleanse-rec down\";\n        BuffId[\"proc:10:cleanse-unknown\"] = \"proc:10:cleanse-unknown\";\n        BuffId[\"proc:11:chance inflict-poison\"] = \"proc:11:chance inflict-poison\";\n        BuffId[\"proc:11:chance inflict-weak\"] = \"proc:11:chance inflict-weak\";\n        BuffId[\"proc:11:chance inflict-sick\"] = \"proc:11:chance inflict-sick\";\n        BuffId[\"proc:11:chance inflict-injury\"] = \"proc:11:chance inflict-injury\";\n        BuffId[\"proc:11:chance inflict-curse\"] = \"proc:11:chance inflict-curse\";\n        BuffId[\"proc:11:chance inflict-paralysis\"] = \"proc:11:chance inflict-paralysis\";\n        BuffId[\"proc:11:chance inflict-atk down\"] = \"proc:11:chance inflict-atk down\";\n        BuffId[\"proc:11:chance inflict-def down\"] = \"proc:11:chance inflict-def down\";\n        BuffId[\"proc:11:chance inflict-rec down\"] = \"proc:11:chance inflict-rec down\";\n        BuffId[\"proc:11:chance inflict-unknown\"] = \"proc:11:chance inflict-unknown\";\n        BuffId[\"proc:12:guaranteed revive\"] = \"proc:12:guaranteed revive\";\n        BuffId[\"proc:13:random attack\"] = \"proc:13:random attack\";\n        BuffId[\"proc:14:hp absorb attack\"] = \"proc:14:hp absorb attack\";\n        BuffId[\"proc:16:mitigate-fire\"] = \"proc:16:mitigate-fire\";\n        BuffId[\"proc:16:mitigate-water\"] = \"proc:16:mitigate-water\";\n        BuffId[\"proc:16:mitigate-earth\"] = \"proc:16:mitigate-earth\";\n        BuffId[\"proc:16:mitigate-thunder\"] = \"proc:16:mitigate-thunder\";\n        BuffId[\"proc:16:mitigate-light\"] = \"proc:16:mitigate-light\";\n        BuffId[\"proc:16:mitigate-dark\"] = \"proc:16:mitigate-dark\";\n        BuffId[\"proc:16:mitigate-all\"] = \"proc:16:mitigate-all\";\n        BuffId[\"proc:16:mitigate-unknown\"] = \"proc:16:mitigate-unknown\";\n        BuffId[\"proc:17:resist-poison\"] = \"proc:17:resist-poison\";\n        BuffId[\"proc:17:resist-weak\"] = \"proc:17:resist-weak\";\n        BuffId[\"proc:17:resist-sick\"] = \"proc:17:resist-sick\";\n        BuffId[\"proc:17:resist-injury\"] = \"proc:17:resist-injury\";\n        BuffId[\"proc:17:resist-curse\"] = \"proc:17:resist-curse\";\n        BuffId[\"proc:17:resist-paralysis\"] = \"proc:17:resist-paralysis\";\n        BuffId[\"proc:18:mitigation\"] = \"proc:18:mitigation\";\n        BuffId[\"proc:19:gradual bc fill\"] = \"proc:19:gradual bc fill\";\n        BuffId[\"proc:20:bc fill on hit\"] = \"proc:20:bc fill on hit\";\n        BuffId[\"proc:22:defense ignore\"] = \"proc:22:defense ignore\";\n        BuffId[\"proc:23:spark damage\"] = \"proc:23:spark damage\";\n        BuffId[\"proc:24:converted-atk\"] = \"proc:24:converted-atk\";\n        BuffId[\"proc:24:converted-def\"] = \"proc:24:converted-def\";\n        BuffId[\"proc:24:converted-rec\"] = \"proc:24:converted-rec\";\n        BuffId[\"proc:26:hit count boost\"] = \"proc:26:hit count boost\";\n        BuffId[\"proc:27:proportional attack\"] = \"proc:27:proportional attack\";\n        BuffId[\"proc:28:fixed attack\"] = \"proc:28:fixed attack\";\n        BuffId[\"proc:29:multi-element attack\"] = \"proc:29:multi-element attack\";\n        BuffId[\"proc:30:add element-fire\"] = \"proc:30:add element-fire\";\n        BuffId[\"proc:30:add element-water\"] = \"proc:30:add element-water\";\n        BuffId[\"proc:30:add element-earth\"] = \"proc:30:add element-earth\";\n        BuffId[\"proc:30:add element-thunder\"] = \"proc:30:add element-thunder\";\n        BuffId[\"proc:30:add element-light\"] = \"proc:30:add element-light\";\n        BuffId[\"proc:30:add element-dark\"] = \"proc:30:add element-dark\";\n        BuffId[\"proc:30:add element-unknown\"] = \"proc:30:add element-unknown\";\n        BuffId[\"proc:31:bc fill-flat\"] = \"proc:31:bc fill-flat\";\n        BuffId[\"proc:31:bc fill-percent\"] = \"proc:31:bc fill-percent\";\n        BuffId[\"proc:32:element shift-fire\"] = \"proc:32:element shift-fire\";\n        BuffId[\"proc:32:element shift-water\"] = \"proc:32:element shift-water\";\n        BuffId[\"proc:32:element shift-earth\"] = \"proc:32:element shift-earth\";\n        BuffId[\"proc:32:element shift-thunder\"] = \"proc:32:element shift-thunder\";\n        BuffId[\"proc:32:element shift-light\"] = \"proc:32:element shift-light\";\n        BuffId[\"proc:32:element shift-dark\"] = \"proc:32:element shift-dark\";\n        BuffId[\"proc:32:element shift-unknown\"] = \"proc:32:element shift-unknown\";\n        BuffId[\"proc:33:buff wipe\"] = \"proc:33:buff wipe\";\n        BuffId[\"proc:34:bc drain-flat\"] = \"proc:34:bc drain-flat\";\n        BuffId[\"proc:34:bc drain-percent\"] = \"proc:34:bc drain-percent\";\n        BuffId[\"proc:36:ls lock\"] = \"proc:36:ls lock\";\n        BuffId[\"proc:37:summon\"] = \"proc:37:summon\";\n        BuffId[\"proc:38:cleanse-poison\"] = \"proc:38:cleanse-poison\";\n        BuffId[\"proc:38:cleanse-weak\"] = \"proc:38:cleanse-weak\";\n        BuffId[\"proc:38:cleanse-sick\"] = \"proc:38:cleanse-sick\";\n        BuffId[\"proc:38:cleanse-injury\"] = \"proc:38:cleanse-injury\";\n        BuffId[\"proc:38:cleanse-curse\"] = \"proc:38:cleanse-curse\";\n        BuffId[\"proc:38:cleanse-paralysis\"] = \"proc:38:cleanse-paralysis\";\n        BuffId[\"proc:38:cleanse-atk down\"] = \"proc:38:cleanse-atk down\";\n        BuffId[\"proc:38:cleanse-def down\"] = \"proc:38:cleanse-def down\";\n        BuffId[\"proc:38:cleanse-rec down\"] = \"proc:38:cleanse-rec down\";\n        BuffId[\"proc:38:cleanse-unknown\"] = \"proc:38:cleanse-unknown\";\n        BuffId[\"proc:39:mitigate-fire\"] = \"proc:39:mitigate-fire\";\n        BuffId[\"proc:39:mitigate-water\"] = \"proc:39:mitigate-water\";\n        BuffId[\"proc:39:mitigate-earth\"] = \"proc:39:mitigate-earth\";\n        BuffId[\"proc:39:mitigate-thunder\"] = \"proc:39:mitigate-thunder\";\n        BuffId[\"proc:39:mitigate-light\"] = \"proc:39:mitigate-light\";\n        BuffId[\"proc:39:mitigate-dark\"] = \"proc:39:mitigate-dark\";\n        BuffId[\"proc:39:mitigate-unknown\"] = \"proc:39:mitigate-unknown\";\n        BuffId[\"proc:40:add ailment-poison\"] = \"proc:40:add ailment-poison\";\n        BuffId[\"proc:40:add ailment-weak\"] = \"proc:40:add ailment-weak\";\n        BuffId[\"proc:40:add ailment-sick\"] = \"proc:40:add ailment-sick\";\n        BuffId[\"proc:40:add ailment-injury\"] = \"proc:40:add ailment-injury\";\n        BuffId[\"proc:40:add ailment-curse\"] = \"proc:40:add ailment-curse\";\n        BuffId[\"proc:40:add ailment-paralysis\"] = \"proc:40:add ailment-paralysis\";\n        BuffId[\"proc:40:add ailment-atk down\"] = \"proc:40:add ailment-atk down\";\n        BuffId[\"proc:40:add ailment-def down\"] = \"proc:40:add ailment-def down\";\n        BuffId[\"proc:40:add ailment-rec down\"] = \"proc:40:add ailment-rec down\";\n        BuffId[\"proc:40:add ailment-unknown\"] = \"proc:40:add ailment-unknown\";\n        BuffId[\"proc:42:sacrificial attack\"] = \"proc:42:sacrificial attack\";\n        BuffId[\"proc:42:instant death\"] = \"proc:42:instant death\";\n        BuffId[\"proc:43:burst od fill\"] = \"proc:43:burst od fill\";\n        BuffId[\"proc:44:damage over time\"] = \"proc:44:damage over time\";\n        BuffId[\"proc:45:attack boost-bb\"] = \"proc:45:attack boost-bb\";\n        BuffId[\"proc:45:attack boost-sbb\"] = \"proc:45:attack boost-sbb\";\n        BuffId[\"proc:45:attack boost-ubb\"] = \"proc:45:attack boost-ubb\";\n        BuffId[\"proc:46:non-lethal proportional attack\"] = \"proc:46:non-lethal proportional attack\";\n        BuffId[\"proc:47:hp scaled attack\"] = \"proc:47:hp scaled attack\";\n        BuffId[\"proc:48:piercing attack-base\"] = \"proc:48:piercing attack-base\";\n        BuffId[\"proc:48:piercing attack-current\"] = \"proc:48:piercing attack-current\";\n        BuffId[\"proc:48:piercing attack-fixed\"] = \"proc:48:piercing attack-fixed\";\n        BuffId[\"proc:48:piercing attack-unknown\"] = \"proc:48:piercing attack-unknown\";\n        BuffId[\"proc:49:chance instant death\"] = \"proc:49:chance instant death\";\n        BuffId[\"proc:50:chance damage reflect\"] = \"proc:50:chance damage reflect\";\n        BuffId[\"proc:51:add to attack-atk down\"] = \"proc:51:add to attack-atk down\";\n        BuffId[\"proc:51:add to attack-def down\"] = \"proc:51:add to attack-def down\";\n        BuffId[\"proc:51:add to attack-rec down\"] = \"proc:51:add to attack-rec down\";\n        BuffId[\"proc:52:bc efficacy\"] = \"proc:52:bc efficacy\";\n        BuffId[\"proc:53:inflict on hit-poison\"] = \"proc:53:inflict on hit-poison\";\n        BuffId[\"proc:53:inflict on hit-weak\"] = \"proc:53:inflict on hit-weak\";\n        BuffId[\"proc:53:inflict on hit-sick\"] = \"proc:53:inflict on hit-sick\";\n        BuffId[\"proc:53:inflict on hit-injury\"] = \"proc:53:inflict on hit-injury\";\n        BuffId[\"proc:53:inflict on hit-curse\"] = \"proc:53:inflict on hit-curse\";\n        BuffId[\"proc:53:inflict on hit-paralysis\"] = \"proc:53:inflict on hit-paralysis\";\n        BuffId[\"proc:54:critical damage boost\"] = \"proc:54:critical damage boost\";\n        BuffId[\"proc:55:elemental weakness damage-fire\"] = \"proc:55:elemental weakness damage-fire\";\n        BuffId[\"proc:55:elemental weakness damage-water\"] = \"proc:55:elemental weakness damage-water\";\n        BuffId[\"proc:55:elemental weakness damage-earth\"] = \"proc:55:elemental weakness damage-earth\";\n        BuffId[\"proc:55:elemental weakness damage-thunder\"] = \"proc:55:elemental weakness damage-thunder\";\n        BuffId[\"proc:55:elemental weakness damage-light\"] = \"proc:55:elemental weakness damage-light\";\n        BuffId[\"proc:55:elemental weakness damage-dark\"] = \"proc:55:elemental weakness damage-dark\";\n        BuffId[\"proc:55:elemental weakness damage-unknown\"] = \"proc:55:elemental weakness damage-unknown\";\n        BuffId[\"proc:56:chance ko resistance\"] = \"proc:56:chance ko resistance\";\n        BuffId[\"proc:57:bc drop resistance-base\"] = \"proc:57:bc drop resistance-base\";\n        BuffId[\"proc:57:bc drop resistance-buff\"] = \"proc:57:bc drop resistance-buff\";\n        BuffId[\"proc:57:hc drop resistance-base\"] = \"proc:57:hc drop resistance-base\";\n        BuffId[\"proc:57:hc drop resistance-buff\"] = \"proc:57:hc drop resistance-buff\";\n        BuffId[\"proc:58:spark vulnerability\"] = \"proc:58:spark vulnerability\";\n        BuffId[\"proc:59:attack reduction-bb\"] = \"proc:59:attack reduction-bb\";\n        BuffId[\"proc:59:attack reduction-sbb\"] = \"proc:59:attack reduction-sbb\";\n        BuffId[\"proc:59:attack reduction-ubb\"] = \"proc:59:attack reduction-ubb\";\n        BuffId[\"proc:61:party bb gauge-scaled attack\"] = \"proc:61:party bb gauge-scaled attack\";\n        BuffId[\"proc:61:party bc drain\"] = \"proc:61:party bc drain\";\n        BuffId[\"proc:62:barrier-all\"] = \"proc:62:barrier-all\";\n        BuffId[\"proc:62:barrier-fire\"] = \"proc:62:barrier-fire\";\n        BuffId[\"proc:62:barrier-water\"] = \"proc:62:barrier-water\";\n        BuffId[\"proc:62:barrier-earth\"] = \"proc:62:barrier-earth\";\n        BuffId[\"proc:62:barrier-thunder\"] = \"proc:62:barrier-thunder\";\n        BuffId[\"proc:62:barrier-light\"] = \"proc:62:barrier-light\";\n        BuffId[\"proc:62:barrier-dark\"] = \"proc:62:barrier-dark\";\n        BuffId[\"proc:62:barrier-unknown\"] = \"proc:62:barrier-unknown\";\n        BuffId[\"proc:64:consecutive usage attack\"] = \"proc:64:consecutive usage attack\";\n        BuffId[\"proc:65:ailment attack boost\"] = \"proc:65:ailment attack boost\";\n        BuffId[\"proc:66:chance revive\"] = \"proc:66:chance revive\";\n        BuffId[\"UNKNOWN_CONDITIONAL_EFFECT_ID\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n        BuffId[\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\"] = \"UNKNOWN_CONDITIONAL_BUFF_PARAMS\";\n        BuffId[\"conditional:8:gradual heal\"] = \"conditional:8:gradual heal\";\n        BuffId[\"conditional:12:guaranteed ko resistance\"] = \"conditional:12:guaranteed ko resistance\";\n        BuffId[\"conditional:36:mitigation\"] = \"conditional:36:mitigation\";\n        BuffId[\"conditional:91:chance ko resistance\"] = \"conditional:91:chance ko resistance\";\n        BuffId[\"conditional:133:heal on hit\"] = \"conditional:133:heal on hit\";\n        BuffId[\"conditional:153:chance inflict atk down on hit\"] = \"conditional:153:chance inflict atk down on hit\";\n    })(BuffId || (BuffId = {}));\n\n    /**\n     * @description Helper function for creating an entry to be used in the `sources`\n     * property of {@link IBuff}.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourceEntryFromContext(context) {\n        return `${context.source}-${context.sourceId}`;\n    }\n    /**\n     * @description Helper function for creating an entries array to be used in the `sources`\n     * property of {@link IBuff}. It handles setting the order of the sources.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourcesFromContext(context) {\n        const resultArray = Array.isArray(context.previousSources)\n            ? context.previousSources.slice()\n            : [];\n        // Ensure that the current source is at the beginning of the array\n        resultArray.unshift(createSourceEntryFromContext(context));\n        return resultArray;\n    }\n    /**\n     * @description Given the conditions in an extra skill effect, normalize them into\n     * a simpler object containing the IDs of each condition type.\n     * @param effect Extra skill effect to process conditions from.\n     * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n     */\n    function processExtraSkillConditions(effect) {\n        const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n        const aggregate = {\n            units: new Set(),\n            items: new Set(),\n            sphereTypes: new Set(),\n            unknowns: new Set(),\n        };\n        conditions.forEach((condition, index) => {\n            if ('sphere category required (raw)' in condition) {\n                aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n            }\n            else if ('item required' in condition) {\n                condition['item required'].forEach((item) => {\n                    aggregate.items.add(item);\n                });\n            }\n            else if ('unit required' in condition) {\n                condition['unit required'].forEach((unit) => {\n                    aggregate.units.add(`${unit.id}`);\n                });\n            }\n            else {\n                aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n            }\n        });\n        // filter out properties that have no entries\n        const result = Object.entries(aggregate)\n            .filter((entry) => entry[1].size > 0)\n            .reduce((acc, entry) => {\n            acc[entry[0]] = Array.from(entry[1]);\n            return acc;\n        }, {});\n        return result;\n    }\n    /**\n     * @description Extract the target type and target area of a given passive effect.\n     * @param effect Passive effect to extract target data from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns The target data for the given effect and context. There are only two possible values:\n     * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n     */\n    function getPassiveTargetData(effect, context) {\n        const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n            (effect.sp_type === SpPassiveType.EnhancePassive);\n        const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n        return {\n            targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n            targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n        };\n    }\n    /**\n     * @description Extract the target type and target area of a given proc effect.\n     * @param effect Proc effect to extract target data from.\n     * @returns The target data for the given effect and context.\n     */\n    function getProcTargetData(effect) {\n        return {\n            targetArea: effect['target area'],\n            targetType: effect['target type'],\n        };\n    }\n    /**\n     * @description Try to parse the given value into a number or return a value if it is not a number.\n     * @param value Value to parse into a number.\n     * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n     * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n     */\n    function parseNumberOrDefault(value, defaultValue = 0) {\n        return (value !== null && !isNaN(value)) ? +value : defaultValue;\n    }\n    /**\n     * @description Create an object denoting values that cannot be processed yet. To be used\n     * in the `value` property of `IBuff` as needed.\n     * @param params Array of values that cannot be processed yet.\n     * @param startIndex The first index before which we know how to process an effect's values.\n     * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n     */\n    function createUnknownParamsValue(params = [], startIndex = 0) {\n        let hasValue = false;\n        const result = params\n            .reduce((acc, value, index) => {\n            if (value && value !== '0') {\n                acc[`param_${startIndex + index}`] = value;\n                hasValue = true;\n            }\n            return acc;\n        }, {});\n        return hasValue ? result : (void 0);\n    }\n    /**\n     * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n     * @param source Source value to check.\n     * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n     * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n     * bonded super brave burst, or bonded dual brave burst.\n     */\n    function buffSourceIsBurstType(source) {\n        return !!source && [\n            BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n            BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n        ].includes(source);\n    }\n    /**\n     * @description Given an array of parameters, conditionally creata an unknown params value entry.\n     * @param extraParams Array of string parameters from an effect.\n     * @param startIndex Index to use when generating entries for the unknown params value entry.\n     * @param injectionContext Object whose main use is for injecting methods in testing.\n     * @returns An unknown params entry if there are extra parameters, undefined otherwise.\n     */\n    function createUnknownParamsEntryFromExtraParams(extraParams, startIndex, injectionContext) {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    }\n    /**\n     * @description Helper function for creating a `NO_PARAMS_SPECIFIED` entry from a given context.\n     * @param context An effect processing context containing information created while parsing an effect.\n     * @returns A single buff denoting a `NO_PARAMS_SPECIFIED` entry.\n     */\n    function createNoParamsEntry({ originalId, sources }) {\n        return {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        };\n    }\n\n    let mapping;\n    /**\n     * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of proc IDs to functions.\n     */\n    function getProcEffectToBuffMapping(reload) {\n        if (!mapping || reload) {\n            mapping = new Map();\n            setMapping(mapping);\n        }\n        return mapping;\n    }\n    /**\n     * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping(map) {\n        const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const NON_ZERO_ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const effectDelay = effect['effect delay time(ms)/frame'];\n            return { targetData, sources, effectDelay };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const splitEffectWithUnknownProcParamsProperty = (effect) => {\n            const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n            return splitEffectParams({ params: rawParams });\n        };\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n            effectDelay,\n            sources, value: unknownParams }, targetData));\n        const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n            sources, value: {\n                buffs,\n                duration,\n            } }, targetData));\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n        };\n        /**\n         * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n         * checked if all other known values in the effect are 0.\n         * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n         * @param turnDuration Parsed turn duration value to check.\n         * @param injectionContext Object whose main use is for injecting methods in testing.\n         * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n         */\n        const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n            let result = turnDuration !== 0;\n            if (result) {\n                result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n            }\n            return result;\n        };\n        /**\n         * @description Helper function to get attack information common across most attacks from the conversion context.\n         * @param context Given context that may contain attack information like damage frames.\n         * @returns Extracted attack information from the context (with defaults where applicable).\n         */\n        const getAttackInformationFromContext = (context) => {\n            const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n            const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n            return {\n                hits,\n                distribution,\n            };\n        };\n        const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                value = parseParamValue(rawValue);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect[effectValueKey]);\n                turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [buffId],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:1:attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'healerRec%': 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                let recX, recY;\n                let extraParams;\n                [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n                params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['heal low'];\n                params.healHigh = effect['heal high'];\n                params['healerRec%'] = effect['rec added% (from healer)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const results = [];\n            if (params.healHigh !== 0 || params.healLow !== 0) {\n                results.push(Object.assign({ id: 'proc:2:burst heal', originalId,\n                    sources,\n                    effectDelay, value: params }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'targetRec%': 0,\n                turnDuration: '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let rec;\n                let extraParams;\n                [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['gradual heal low'];\n                params.healHigh = effect['gradual heal high'];\n                params['targetRec%'] = effect['rec added% (from target)'];\n                params.turnDuration = effect['gradual heal turns (8)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n            const results = [];\n            if (hasAnyHealValues) {\n                results.push(Object.assign({ id: 'proc:3:gradual heal', originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: {\n                        healLow: params.healLow,\n                        healHigh: params.healHigh,\n                        'targetRec%': params['targetRec%'],\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:3:gradual heal'],\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('bb bc fill' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill']);\n                }\n                if ('bb bc fill%' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n                }\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:bc fill-flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:bc fill-percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                element: BuffConditionElement.All,\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        params[statType] = parseNumberOrDefault(effect[effectKey]);\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        const buffEntry = Object.assign({ id: `proc:5:regular or elemental-${statKey}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData);\n                        if (params.element !== BuffConditionElement.All) {\n                            buffEntry.conditions = {\n                                targetElements: [params.element],\n                            };\n                        }\n                        results.push(buffEntry);\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:5:regular or elemental-${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('6', (effect, context, injectionContext) => {\n            const originalId = '6';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                turnDuration: '0',\n            };\n            const dropRateProperties = ['bc', 'hc', 'item'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.bc = effect['bc drop rate% buff (10)'];\n                params.hc = effect['hc drop rate% buff (9)'];\n                params.item = effect['item drop rate% buff (11)'];\n                params.turnDuration = effect['drop buff rate turns'];\n            }\n            dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n            const results = [];\n            if (hasAnyRates) {\n                dropRateProperties.forEach((key) => {\n                    const value = params[key];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:6:drop boost-${key}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: dropRateProperties.map((key) => `proc:6:drop boost-${key}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('7', (effect, context, injectionContext) => {\n            const originalId = '7';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHpPercent = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:7:guaranteed ko resistance', originalId,\n                    sources,\n                    effectDelay, value: recoveredHpPercent }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const originalId = '8';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatHpBoost = 0;\n            let percentHpBoost = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n                flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n                percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('max hp increase' in effect) {\n                    flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n                }\n                if ('max hp% increase' in effect) {\n                    percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n                }\n            }\n            const results = [];\n            if (flatHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:max hp boost-flat', originalId,\n                    sources,\n                    effectDelay, value: flatHpBoost }, targetData));\n            }\n            if (percentHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:max hp boost-percent', originalId,\n                    sources,\n                    effectDelay, value: percentHpBoost }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            const originalId = '9';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const STAT_TYPE_MAPPING = {\n                0: 'atk',\n                1: 'def',\n                2: 'rec',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const params = {\n                element: BuffConditionElement.All,\n                statReductionEntries: [],\n                turnDuration: 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n                [\n                    [statType1, value1, procChance1],\n                    [statType2, value2, procChance2],\n                ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                    const statType = parseNumberOrDefault(rawStatType) - 1;\n                    const value = parseNumberOrDefault(rawValue);\n                    const chance = parseNumberOrDefault(rawProcChance);\n                    if (statType === 3) { // all stats\n                        params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                            stat,\n                            value,\n                            chance,\n                        })));\n                    }\n                    else {\n                        params.statReductionEntries.push({\n                            stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                            value,\n                            chance,\n                        });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                ['buff #1', 'buff #2'].forEach((buffKey) => {\n                    const entry = effect[buffKey];\n                    if (entry) {\n                        const chance = parseNumberOrDefault(entry['proc chance%']);\n                        const keys = Object.keys(entry);\n                        coreStatProperties.forEach((statType) => {\n                            const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                            if (effectKey) {\n                                params.statReductionEntries.push({\n                                    stat: statType,\n                                    value: parseNumberOrDefault(entry[effectKey]),\n                                    chance,\n                                });\n                            }\n                        });\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            let hasAnyValues = false;\n            params.statReductionEntries.forEach(({ stat, value, chance }) => {\n                if (value !== 0 || chance !== 0) {\n                    hasAnyValues = true;\n                    const buffEntry = Object.assign({ id: `proc:9:regular or elemental reduction-${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n            if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:9:regular or elemental reduction-${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            const originalId = '10';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 8);\n                const extraParams = splitParams.slice(8);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    if (`remove ${ailment}` in effect) { // mainly for items\n                        curedAilments.push(ailment);\n                    }\n                });\n                if ('remove all status ailments' in effect) {\n                    curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:cleanse-${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                let params = splitEffectParams(effect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:chance inflict-${ailment}`, originalId,\n                sources,\n                effectDelay, value: chance }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let reviveToHp = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n                reviveToHp = parseNumberOrDefault(rawReviveToHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:12:guaranteed revive', originalId,\n                    sources,\n                    effectDelay, value: reviveToHp }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const originalId = '13';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hits = 0;\n            const { distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawHits;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n                hits = parseNumberOrDefault(rawHits);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                hits = parseNumberOrDefault(effect.hits);\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push({\n                    id: 'proc:13:random attack',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }),\n                    targetType: targetData.targetType,\n                    targetArea: TargetArea.Random,\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n                'drainLow%': '0',\n                'drainHigh%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n                params['drainLow%'] = effect['hp drain% low'];\n                params['drainHigh%'] = effect['hp drain% high'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:14:hp absorb attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let mitigation = 0;\n            let element;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                mitigation = parseNumberOrDefault(rawMitigation);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n                element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n                if (mitigationKey) {\n                    mitigation = parseNumberOrDefault(effect[mitigationKey]);\n                }\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (mitigation !== 0) {\n                results.push(Object.assign({ id: `proc:16:mitigate-${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:mitigate-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            const originalId = '17';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        resistances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:17:resist-${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:17:resist-${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('18', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'dmg% reduction',\n                effectTurnDurationKey: 'dmg% reduction turns (36)',\n                buffId: 'proc:18:mitigation',\n                originalId: '18',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'increase bb gauge gradual',\n                effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'proc:19:gradual bc fill',\n                originalId: '19',\n            });\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const originalId = '20';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let fillLow = 0;\n            let fillHigh = 0;\n            let chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFillLow, rawFillHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(effect['bc fill when attacked low']);\n                fillHigh = parseNumberOrDefault(effect['bc fill when attacked high']);\n                chance = parseNumberOrDefault(effect['bc fill when attacked%']);\n                turnDuration = parseNumberOrDefault(effect['bc fill when attacked turns (38)']);\n            }\n            const hasAnyFillValues = fillLow !== 0 || fillHigh !== 0;\n            const results = [];\n            if (hasAnyFillValues) {\n                results.push(Object.assign({ id: 'proc:20:bc fill on hit', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, conditions: {\n                        whenAttacked: true,\n                    }, value: {\n                        fillLow,\n                        fillHigh,\n                        chance,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:20:bc fill on hit'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('22', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'defense% ignore',\n                effectTurnDurationKey: 'defense% ignore turns (39)',\n                buffId: 'proc:22:defense ignore',\n                originalId: '22',\n            });\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                value = parseNumberOrDefault(params[0]);\n                turnDuration = parseNumberOrDefault(params[6]);\n                const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'proc:23:spark damage', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:23:spark damage'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            const originalId = '24';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let turnDuration = 0;\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawConvertedStat, rawTurnDuration;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                const rawConvertedStat = effect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        stats[statType] = effect[effectKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['% converted turns']);\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:24:converted-${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: {\n                            convertedStat,\n                            value,\n                        } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:24:converted-${statKey}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            const originalId = '26';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n                turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'proc:26:hit count boost', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:26:hit count boost'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            const originalId = '27';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'hpDamageLow%': '0',\n                'hpDamageHigh%': '0',\n                'hpDamageChance%': '0',\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else {\n                params['hpDamageLow%'] = effect['hp% damage low'];\n                params['hpDamageHigh%'] = effect['hp% damage high'];\n                params['hpDamageChance%'] = effect['hp% damage chance%'];\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:27:proportional attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            let value = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                value = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['fixed damage']);\n            }\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || value !== 0) {\n                const entry = Object.assign({ id: 'proc:28:fixed attack', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (value !== 0) {\n                    entry.value.value = value;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            const originalId = '29';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let attackElements = [];\n            let unknownParams;\n            if (effect.params) {\n                let element1, element2, element3;\n                let extraParams;\n                [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                [element1, element2, element3].forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                    unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n                });\n            }\n            else {\n                if (Array.isArray(effect['bb elements'])) {\n                    attackElements = effect['bb elements'].slice();\n                }\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n                const entry = Object.assign({ id: 'proc:29:multi-element attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData);\n                if (attackElements.length > 0) {\n                    entry.value.elements = attackElements;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let elements = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                elements = params\n                    .slice(0, 6)\n                    .filter((p) => p !== '0')\n                    .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n                turnDuration = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                if ('elements added' in effect) {\n                    if (Array.isArray(effect['elements added'])) {\n                        elements = effect['elements added'];\n                    }\n                    else {\n                        elements = [BuffConditionElement.Unknown];\n                    }\n                }\n                turnDuration = parseNumberOrDefault(effect['elements added turns']);\n            }\n            const results = [];\n            const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n            if (elements.length > 0) {\n                elements.forEach((inputElement) => {\n                    const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                    results.push(Object.assign({ id: `proc:30:add element-${sanitizedElement}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration }, targetData));\n                });\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:add element-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('increase bb gauge' in effect) {\n                    flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n                }\n                // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n                // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:bc fill-flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:bc fill-percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            const originalId = '32';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let element;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, ...extraParams] = splitEffectParams(effect);\n                if (rawElement && rawElement !== '0') {\n                    element = NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                const effectElement = effect['set attack element attribute'];\n                if (effectElement) {\n                    const sanitizedElement = Object.values(NON_ZERO_ELEMENT_MAPPING).find((e) => effectElement === e);\n                    if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                        element = sanitizedElement;\n                    }\n                    else {\n                        element = BuffConditionElement.Unknown;\n                    }\n                }\n            }\n            const results = [];\n            if (element) {\n                results.push(Object.assign({ id: `proc:32:element shift-${element}`, originalId,\n                    sources,\n                    effectDelay, value: true }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                chance = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(effect['clear buff chance%']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:33:buff wipe', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            const originalId = '34';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatDrainLow = 0, flatDrainHigh = 0;\n            let percentDrainLow = 0, percentDrainHigh = 0;\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n                flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n                flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n                percentDrainLow = parseNumberOrDefault(rawPercentLow);\n                percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n                flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n                percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n                percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n                chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n            }\n            const results = [];\n            if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:bc drain-flat', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: flatDrainLow,\n                        drainHigh: flatDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:bc drain-percent', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: percentDrainLow,\n                        drainHigh: percentDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'invalidate LS chance%',\n                effectTurnDurationKey: 'invalidate LS turns (60)',\n                buffId: 'proc:36:ls lock',\n                originalId: '36',\n            });\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const positionX = parseNumberOrDefault(rawPositionX);\n            const positionY = parseNumberOrDefault(rawPositionY);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const results = [];\n            if (summonGroup || summonId) {\n                results.push(Object.assign({ id: 'proc:37:summon', originalId,\n                    sources,\n                    effectDelay, value: {\n                        summonGroup,\n                        summonId,\n                        positionX,\n                        positionY,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('38', (effect, context, injectionContext) => {\n            const originalId = '38';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 9);\n                const extraParams = splitParams.slice(9);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else if (Array.isArray(effect['ailments cured'])) {\n                const effectAilmentsCured = effect['ailments cured'];\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                    if (effectAilmentsCured.includes(effectKey)) {\n                        curedAilments.push(ailment);\n                    }\n                });\n                if (effectAilmentsCured.length > curedAilments.length) {\n                    const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                    for (let i = 0; i < unknownAilmentCount; ++i) {\n                        curedAilments.push(Ailment.Unknown);\n                    }\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:cleanse-${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('39', (effect, context, injectionContext) => {\n            const originalId = '39';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const elements = [];\n            let mitigation = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                const rawElementsMitigated = params.slice(0, 6);\n                mitigation = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                rawElementsMitigated.forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        elements.push(NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                Object.values(NON_ZERO_ELEMENT_MAPPING).forEach((element) => {\n                    if (effect[`mitigate ${element} attacks`]) {\n                        elements.push(element);\n                    }\n                });\n                mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n                turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n            }\n            const results = [];\n            if (elements.length > 0) {\n                elements.forEach((element) => {\n                    results.push(Object.assign({ id: `proc:39:mitigate-${element}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: mitigation }, targetData));\n                });\n            }\n            else if (mitigation !== 0) {\n                results.push(Object.assign({ id: 'proc:39:mitigate-unknown', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:mitigate-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                for (let index = 0; index < 8; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n                turnDuration = parseNumberOrDefault(params[8]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken% buff';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = `${ailment} buff`;\n                    }\n                    else {\n                        effectKey = `${ailment}% buff`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:add ailment-${ailment}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: chance }, targetData)));\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    duration: turnDuration,\n                    buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:add ailment-${a}`),\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const params = {\n                'atkLow%': rawModLow,\n                'atkHigh%': rawModHigh,\n                flatAtk: rawFlatAtk,\n            };\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            let results;\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results = [\n                    Object.assign({ id: 'proc:42:sacrificial attack', originalId,\n                        sources,\n                        effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                            distribution }) }, targetData),\n                    {\n                        id: 'proc:42:instant death',\n                        originalId,\n                        sources,\n                        effectDelay,\n                        value: true,\n                        targetArea: TargetArea.Single,\n                        targetType: TargetType.Self,\n                    },\n                ];\n            }\n            else {\n                results = [];\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            const originalId = '43';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let overdriveFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n                overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n            }\n            const results = [];\n            if (overdriveFill !== 0) {\n                results.push(Object.assign({ id: 'proc:43:burst od fill', originalId,\n                    sources,\n                    effectDelay, value: overdriveFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const damageParams = {\n                'atk%': '0',\n                flatAtk: '0',\n                'dmg%': '0',\n            };\n            let affectsElement = false, unitIndex = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n                [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n                unitIndex = parseNumberOrDefault(rawUnitIndex);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                damageParams['atk%'] = effect['dot atk%'];\n                damageParams.flatAtk = effect['dot flat atk'];\n                damageParams['dmg%'] = effect['dot dmg%'];\n                affectsElement = !!(effect['dot element affected']);\n                unitIndex = parseNumberOrDefault(effect['dot unit index']);\n                turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n            }\n            const filteredDamageParams = Object.entries(damageParams)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (Object.keys(filteredDamageParams).length > 0) {\n                results.push(Object.assign({ id: 'proc:44:damage over time', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                        unitIndex }) }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:44:damage over time'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('45', (effect, context, injectionContext) => {\n            const originalId = '45';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let bb = 0, sbb = 0, ubb = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                bb = parseNumberOrDefault(rawBb);\n                sbb = parseNumberOrDefault(rawSbb);\n                ubb = parseNumberOrDefault(rawUbb);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                bb = parseNumberOrDefault(effect['bb atk% buff']);\n                sbb = parseNumberOrDefault(effect['sbb atk% buff']);\n                ubb = parseNumberOrDefault(effect['ubb atk% buff']);\n                turnDuration = parseNumberOrDefault(effect['buff turns (72)']);\n            }\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:attack boost-bb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:attack boost-sbb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:attack boost-ubb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: ubb }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:45:attack boost-${type}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('46', (effect, context, injectionContext) => {\n            const originalId = '46';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawHpLow, rawHpHigh, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const hpLow = parseNumberOrDefault(rawHpLow);\n            const hpHigh = parseNumberOrDefault(rawHpHigh);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (hpLow !== 0 || hpHigh !== 0 || hits !== 0 || distribution !== 0) {\n                const entry = Object.assign({ id: 'proc:46:non-lethal proportional attack', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (hpLow !== 0 || hpHigh !== 0) {\n                    entry.value = {\n                        'hpDamageLow%': hpLow,\n                        'hpDamageHigh%': hpHigh,\n                        hits,\n                        distribution,\n                    };\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('47', (effect, context, injectionContext) => {\n            const originalId = '47';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'baseAtk%': '0',\n                'maxAddedAtk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let proportionalMode = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawMaxAttackValue, rawProportionalMode;\n                [params['baseAtk%'], rawMaxAttackValue, rawProportionalMode, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue) - parseNumberOrDefault(params['baseAtk%']);\n                proportionalMode = rawProportionalMode === '1' ? 'lost' : 'remaining';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['baseAtk%'] = effect['bb base atk%'];\n                params['maxAddedAtk%'] = effect['bb added atk% based on hp'];\n                proportionalMode = effect['bb added atk% proportional to hp'] || 'unknown';\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:47:hp scaled attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { proportionalMode,\n                        hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('48', (effect, context, injectionContext) => {\n            const originalId = '48';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawBasePercentHpLow, rawBasePercentHpHigh, rawCurrentPercentHpLow, rawCurrentPercentHpHigh, rawFixedDamage, rawChance, rawIsLethal, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const basePercentHpLow = parseNumberOrDefault(rawBasePercentHpLow);\n            const basePercentHpHigh = parseNumberOrDefault(rawBasePercentHpHigh);\n            const currentPercentHpLow = parseNumberOrDefault(rawCurrentPercentHpLow);\n            const currentPercentHpHigh = parseNumberOrDefault(rawCurrentPercentHpHigh);\n            const fixedDamage = parseNumberOrDefault(rawFixedDamage);\n            const chance = parseNumberOrDefault(rawChance);\n            const isLethal = rawIsLethal === '1';\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            /**\n             * Current assumption is that each set of parameters results in a separate attack\n             * due to no known skills having more than one of each variant.\n             */\n            const results = [];\n            const createAttackOfType = (type, valueProperties) => (Object.assign({ id: `proc:48:piercing attack-${type}`, originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, valueProperties), { isLethal,\n                    chance,\n                    hits,\n                    distribution }) }, targetData));\n            if (basePercentHpLow !== 0 || basePercentHpHigh !== 0) {\n                results.push(createAttackOfType('base', {\n                    'hpDamageLow%': basePercentHpLow,\n                    'hpDamageHigh%': basePercentHpHigh,\n                }));\n            }\n            if (currentPercentHpLow !== 0 || currentPercentHpHigh !== 0) {\n                results.push(createAttackOfType('current', {\n                    'hpDamageLow%': currentPercentHpLow,\n                    'hpDamageHigh%': currentPercentHpHigh,\n                }));\n            }\n            if (fixedDamage !== 0) {\n                results.push(createAttackOfType('fixed', {\n                    value: fixedDamage,\n                }));\n            }\n            if (results.length === 0 && (hits !== 0 || distribution !== 0)) {\n                results.push(createAttackOfType('unknown', {}));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('49', (effect, context, injectionContext) => {\n            const originalId = '49';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawChance, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const chance = parseNumberOrDefault(rawChance);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:49:chance instant death', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('50', (effect, context, injectionContext) => {\n            const originalId = '50';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawDamageLow, rawDamageHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const reflectedDamageLow = parseNumberOrDefault(rawDamageLow);\n            const reflectedDamageHigh = parseNumberOrDefault(rawDamageHigh);\n            const chance = parseNumberOrDefault(rawChance);\n            const turnDuration = parseNumberOrDefault(rawTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const hasAnyRangeValues = reflectedDamageLow !== 0 || reflectedDamageHigh !== 0;\n            const results = [];\n            if (hasAnyRangeValues) {\n                results.push(Object.assign({ id: 'proc:50:chance damage reflect', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        'reflectedDamageLow%': reflectedDamageLow,\n                        'reflectedDamageHigh%': reflectedDamageHigh,\n                        chance,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:50:chance damage reflect'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('51', (effect, context, injectionContext) => {\n            const originalId = '51';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedReductions = [];\n            let debuffTurnDuration = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                [\n                    { type: Ailment.AttackReduction, reductionValue: parseNumberOrDefault(params[0]), chance: parseNumberOrDefault(params[3]) },\n                    { type: Ailment.DefenseReduction, reductionValue: parseNumberOrDefault(params[1]), chance: parseNumberOrDefault(params[4]) },\n                    { type: Ailment.RecoveryReduction, reductionValue: parseNumberOrDefault(params[2]), chance: parseNumberOrDefault(params[5]) },\n                ].forEach(({ type, reductionValue, chance }) => {\n                    if (reductionValue !== 0 || chance !== 0) {\n                        inflictedReductions.push({ type, reductionValue, chance });\n                    }\n                });\n                debuffTurnDuration = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                [\n                    { type: Ailment.AttackReduction, reductionValueKey: 'inflict atk% debuff (2)', chanceKey: 'inflict atk% debuff chance% (74)' },\n                    { type: Ailment.DefenseReduction, reductionValueKey: 'inflict def% debuff (4)', chanceKey: 'inflict def% debuff chance% (75)' },\n                    { type: Ailment.RecoveryReduction, reductionValueKey: 'inflict rec% debuff (6)', chanceKey: 'inflict rec% debuff chance% (76)' },\n                ].forEach(({ type, reductionValueKey, chanceKey }) => {\n                    const reductionValue = parseNumberOrDefault(effect[reductionValueKey]);\n                    const chance = parseNumberOrDefault(effect[chanceKey]);\n                    if (reductionValue !== 0 || chance !== 0) {\n                        inflictedReductions.push({ type, reductionValue, chance });\n                    }\n                });\n                debuffTurnDuration = parseNumberOrDefault(effect['stat% debuff turns']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedReductions.map(({ type, reductionValue, chance }) => (Object.assign({ id: `proc:51:add to attack-${type}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                } }, targetData)));\n            if (results.length === 0 && (isTurnDurationBuff(context, turnDuration, injectionContext) || isTurnDurationBuff(context, debuffTurnDuration, injectionContext))) {\n                // manually create turn duration buff to account for debuff turn duration\n                results.push(Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n                    sources, value: {\n                        buffs: [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction].map((a) => `proc:51:add to attack-${a}`),\n                        duration: turnDuration,\n                        debuffTurnDuration: debuffTurnDuration,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('52', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'bb gauge fill rate% buff',\n                effectTurnDurationKey: 'buff turns (77)',\n                buffId: 'proc:52:bc efficacy',\n                originalId: '52',\n            });\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            const originalId = '53';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const inflictionChances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        inflictionChances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['counter inflict ailment turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(inflictionChances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:53:inflict on hit-${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration, conditions: { whenAttacked: true } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:53:inflict on hit-${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('54', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'crit multiplier%',\n                effectTurnDurationKey: 'buff turns (84)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n                buffId: 'proc:54:critical damage boost',\n                originalId: '54',\n            });\n        });\n        map.set('55', (effect, context, injectionContext) => {\n            const originalId = '55';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let elements;\n            let damageBoost = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => NON_ZERO_ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                damageBoost = parseNumberOrDefault(params[6]) * 100;\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                elements = Object.values(NON_ZERO_ELEMENT_MAPPING).filter((element) => !!effect[`${element} units do extra elemental weakness dmg`]);\n                damageBoost = parseNumberOrDefault(effect['elemental weakness multiplier%']);\n                turnDuration = parseNumberOrDefault(effect['elemental weakness buff turns']);\n            }\n            let results = [];\n            if (damageBoost !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `proc:55:elemental weakness damage-${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: damageBoost }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'proc:55:elemental weakness damage-unknown', originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: damageBoost }, targetData));\n                }\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:55:elemental weakness damage-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('56', (effect, context, injectionContext) => {\n            const originalId = '56';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let chance = 0, recoveredHpPercent = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawChance, rawRecoverHp, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                chance = parseNumberOrDefault(rawChance);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoverHp);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(effect['angel idol recover chance%']);\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n                turnDuration = parseNumberOrDefault(effect['angel idol buff turns (91)']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:56:chance ko resistance', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: { 'recoveredHp%': recoveredHpPercent, chance } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:56:chance ko resistance'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('57', (effect, context, injectionContext) => {\n            const originalId = '57';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let bcBaseResist = 0, bcBuffResist = 0;\n            let hcBaseResist = 0, hcBuffResist = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawBcBaseResist, rawBcBuffResist, rawHcBaseResist, rawHcBuffResist, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                bcBaseResist = parseNumberOrDefault(rawBcBaseResist);\n                bcBuffResist = parseNumberOrDefault(rawBcBuffResist);\n                hcBaseResist = parseNumberOrDefault(rawHcBaseResist);\n                hcBuffResist = parseNumberOrDefault(rawHcBuffResist);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                // Deathmax's datamine doesn't parse HC drop resistance\n                bcBaseResist = parseNumberOrDefault(effect['base bc drop% resist buff']);\n                bcBuffResist = parseNumberOrDefault(effect['buffed bc drop% resist buff']);\n                turnDuration = parseNumberOrDefault(effect['bc drop% resist buff turns (92)']);\n            }\n            const results = [];\n            if (bcBaseResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:bc drop resistance-base', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bcBaseResist }, targetData));\n            }\n            if (bcBuffResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:bc drop resistance-buff', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bcBuffResist }, targetData));\n            }\n            if (hcBaseResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:hc drop resistance-base', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: hcBaseResist }, targetData));\n            }\n            if (hcBuffResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:hc drop resistance-buff', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: hcBuffResist }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [\n                        'proc:57:bc drop resistance-base',\n                        'proc:57:bc drop resistance-buff',\n                        'proc:57:hc drop resistance-base',\n                        'proc:57:hc drop resistance-buff',\n                    ],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('58', (effect, context, injectionContext) => {\n            const originalId = '58';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let damageIncrease = 0, chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                damageIncrease = parseNumberOrDefault(effect['spark dmg% received']);\n                chance = parseNumberOrDefault(effect['spark dmg received apply%']);\n                turnDuration = parseNumberOrDefault(effect['spark dmg received debuff turns (94)']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:58:spark vulnerability', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: { 'sparkDamage%': damageIncrease, chance } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:58:spark vulnerability'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('59', (effect, context, injectionContext) => {\n            const originalId = '59';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const bb = parseNumberOrDefault(rawBb);\n            const sbb = parseNumberOrDefault(rawSbb);\n            const ubb = parseNumberOrDefault(rawUbb);\n            const turnDuration = parseNumberOrDefault(rawTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'proc:59:attack reduction-bb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'proc:59:attack reduction-sbb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'proc:59:attack reduction-ubb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: ubb }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:59:attack reduction-${type}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('61', (effect, context, injectionContext) => {\n            const originalId = '61';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'baseAtk%': '0',\n                'maxAddedAtk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawMaxAttackValue;\n                [params['baseAtk%'], rawMaxAttackValue, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                params['baseAtk%'] = effect['bb base atk%'];\n                params['maxAddedAtk%'] = effect['bb max atk% based on ally bb gauge and clear bb gauges'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            let results;\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results = [\n                    Object.assign({ id: 'proc:61:party bb gauge-scaled attack', originalId,\n                        sources,\n                        effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                            distribution }) }, targetData),\n                    {\n                        id: 'proc:61:party bc drain',\n                        originalId,\n                        sources,\n                        effectDelay,\n                        value: true,\n                        targetArea: TargetArea.Aoe,\n                        targetType: TargetType.Party,\n                    },\n                ];\n            }\n            else {\n                results = [];\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('62', (effect, context, injectionContext) => {\n            const originalId = '62';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let element;\n            let hp = 0, defense = 0, damageAbsorption = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawHp, rawDefense, rawDamageAbsorption, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                hp = parseNumberOrDefault(rawHp);\n                defense = parseNumberOrDefault(rawDefense);\n                damageAbsorption = parseNumberOrDefault(rawDamageAbsorption);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const effectElement = effect['elemental barrier element'];\n                element = (effectElement && Object.values(ELEMENT_MAPPING).find((e) => e === effectElement)) || BuffConditionElement.Unknown;\n                hp = parseNumberOrDefault(effect['elemental barrier hp']);\n                defense = parseNumberOrDefault(effect['elemental barrier def']);\n                damageAbsorption = parseNumberOrDefault(effect['elemental barrier absorb dmg%']);\n            }\n            const results = [];\n            if (hp !== 0 || defense !== 0 || damageAbsorption !== 0) {\n                results.push(Object.assign({ id: `proc:62:barrier-${element}`, originalId,\n                    sources,\n                    effectDelay, value: {\n                        hp,\n                        defense,\n                        'damageAbsorption%': damageAbsorption,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('64', (effect, context, injectionContext) => {\n            const originalId = '64';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                'addedAtkPerUse%': '0',\n                maxIncreases: '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params['addedAtkPerUse%'], params.maxIncreases, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params['addedAtkPerUse%'] = effect['bb atk% inc per use'];\n                params.maxIncreases = effect['bb atk% max number of inc'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:64:consecutive usage attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('65', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'atk% buff when enemy has ailment',\n                effectTurnDurationKey: 'atk% buff turns (110)',\n                buffId: 'proc:65:ailment attack boost',\n                originalId: '65',\n            });\n        });\n        map.set('66', (effect, context, injectionContext) => {\n            const originalId = '66';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHp = 0, chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, rawChance, ...extraParams] = splitEffectParams(effect);\n                recoveredHp = parseNumberOrDefault(rawRecoveredHp);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                recoveredHp = parseNumberOrDefault(effect['revive unit hp%']);\n                chance = parseNumberOrDefault(effect['revive unit chance%']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:66:chance revive', originalId,\n                    sources,\n                    effectDelay, value: { 'reviveToHp%': recoveredHp, chance } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to {@link IBuff} format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given proc effect.\n     */\n    function defaultConversionFunction(effect, context) {\n        const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n                originalId: id,\n                effectDelay: effect['effect delay time(ms)/frame'],\n                targetType: effect['target type'],\n                targetArea: effect['target area'],\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given proc effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Proc effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given proc effect object.\n     */\n    function convertProcEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isProcEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction(effect, context);\n    }\n\n    let mapping$1;\n    /**\n     * @description Retrieve the conditional-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of conditional IDs to functions.\n     */\n    function getConditionalEffectToBuffMapping(reload) {\n        if (!mapping$1 || reload) {\n            mapping$1 = new Map();\n            setMapping$1(mapping$1);\n        }\n        return mapping$1;\n    }\n    /**\n     * @description Apply the mapping of conditional effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$1(map) {\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, }) => (Object.assign({ id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS, originalId,\n            sources, value: unknownParams }, targetData));\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                }));\n            }\n        };\n        const getDefaultTargetData = () => ({ targetType: TargetType.Self, targetArea: TargetArea.Single });\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const splitParams = typeof effect.params === 'string' ? effect.params.split('&') : [];\n            const targetData = getDefaultTargetData();\n            const turnDuration = parseNumberOrDefault(effect.turnDuration);\n            return { targetData, sources, splitParams, turnDuration };\n        };\n        map.set('8', (effect, context, injectionContext) => {\n            const originalId = '8';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitParams;\n            const healLow = parseNumberOrDefault(rawHealLow);\n            const healHigh = parseNumberOrDefault(rawHealHigh);\n            const addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'conditional:8:gradual heal', originalId,\n                    sources, duration: turnDuration, value: {\n                        healLow,\n                        healHigh,\n                        'addedRec%': addedRec,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawRecoverValue, ...extraParams] = splitParams;\n            const recoverValue = parseNumberOrDefault(rawRecoverValue);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [Object.assign({ id: 'conditional:12:guaranteed ko resistance', originalId,\n                    sources, duration: turnDuration, value: recoverValue }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            const originalId = '36';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawMitigationValue, ...extraParams] = splitParams;\n            const mitigationValue = parseNumberOrDefault(rawMitigationValue);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [];\n            if (mitigationValue !== 0) {\n                results.push(Object.assign({ id: 'conditional:36:mitigation', originalId,\n                    sources, duration: turnDuration, value: mitigationValue }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('91', (effect, context, injectionContext) => {\n            const originalId = '91';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawChance, rawHpRecover, ...extraParams] = splitParams;\n            const chance = parseNumberOrDefault(rawChance);\n            const hpRecover = parseNumberOrDefault(rawHpRecover);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'conditional:91:chance ko resistance', originalId,\n                    sources, duration: turnDuration, value: {\n                        'hpRecover%': hpRecover,\n                        chance,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('133', (effect, context, injectionContext) => {\n            const originalId = '133';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawHealLow, rawHealHigh, rawChance, ...extraParams] = splitParams;\n            const healLow = parseNumberOrDefault(rawHealLow);\n            const healHigh = parseNumberOrDefault(rawHealHigh);\n            const chance = parseNumberOrDefault(rawChance);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'conditional:133:heal on hit', originalId,\n                    sources, duration: turnDuration, value: {\n                        healLow,\n                        healHigh,\n                        chance,\n                    }, conditions: { whenAttacked: true } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('153', (effect, context, injectionContext) => {\n            const originalId = '153';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawReductionValue, rawChance, rawDebuffTurnDuration, ...extraParams] = splitParams;\n            const reductionValue = parseNumberOrDefault(rawReductionValue);\n            const chance = parseNumberOrDefault(rawChance);\n            const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (reductionValue !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'conditional:153:chance inflict atk down on hit', originalId,\n                    sources, duration: turnDuration, value: {\n                        reductionValue,\n                        chance,\n                        debuffTurnDuration,\n                    }, conditions: { whenAttacked: true } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to {@link IBuff} format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given conditional effect.\n     */\n    function defaultConversionFunction$1(effect, context) {\n        const id = effect.id || KNOWN_CONDITIONAL_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given conditional effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Conditional effect to extract buffs from\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertConditionalEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const conversionFunction = getConditionalEffectToBuffMapping(context.reloadMapping).get(effect.id);\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$1(effect, context);\n    }\n\n    let mapping$2;\n    /**\n     * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of passive IDs to functions.\n     */\n    function getPassiveEffectToBuffMapping(reload) {\n        if (!mapping$2 || reload) {\n            mapping$2 = new Map();\n            setMapping$2(mapping$2);\n        }\n        return mapping$2;\n    }\n    /**\n     * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$2(map) {\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n            X: BuffConditionElement.OmniParadigm,\n        };\n        const TYPE_MAPPING = {\n            1: UnitType.Lord,\n            2: UnitType.Anima,\n            3: UnitType.Breaker,\n            4: UnitType.Guardian,\n            5: UnitType.Oracle,\n            6: UnitType.Rex,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const TARGET_TYPE_MAPPING = {\n            1: TargetType.Party,\n            2: TargetType.Enemy,\n            3: TargetType.Self,\n        };\n        const TARGET_AREA_MAPPING = {\n            1: TargetArea.Single,\n            2: TargetArea.Aoe,\n        };\n        const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n        const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n        const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n            const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            return { conditionInfo, targetData, sources };\n        };\n        const convertConditionalEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n            const conversionFunction = (injectionContext && injectionContext.convertConditionalEffectToBuffs) || convertConditionalEffectToBuffs;\n            return conversionFunction(effect, context);\n        };\n        const convertProcEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n            const conversionFunction = (injectionContext && injectionContext.convertProcEffectToBuffs) || convertProcEffectToBuffs;\n            return conversionFunction(effect, context);\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n            sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n        };\n        let ThresholdType;\n        (function (ThresholdType) {\n            ThresholdType[\"Hp\"] = \"hp\";\n            ThresholdType[\"Bb\"] = \"bb gauge\";\n        })(ThresholdType || (ThresholdType = {}));\n        const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n            return {\n                threshold: parseNumberOrDefault(rawThreshold),\n                requireAbove: rawRequireAboveFlag === '1',\n                type: thresholdType,\n            };\n        };\n        const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n            let threshold = 0, requireAbove = false;\n            if (`${thresholdType} above % ${suffix}` in effect) {\n                threshold = parseNumberOrDefault(effect[`${thresholdType} above % ${suffix}`]);\n                requireAbove = true;\n            }\n            else {\n                threshold = parseNumberOrDefault(effect[`${thresholdType} below % ${suffix}`]);\n                requireAbove = false;\n            }\n            return { threshold, requireAbove, type: thresholdType };\n        };\n        const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n            let conditions;\n            if (type === ThresholdType.Hp) {\n                if (requireAbove) {\n                    conditions = { hpGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { hpLessThanOrEqualTo: threshold };\n                }\n            }\n            else if (type === ThresholdType.Bb) {\n                if (requireAbove) {\n                    conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { bbGaugeLessThanOrEqualTo: threshold };\n                }\n            }\n            return conditions;\n        };\n        const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let value = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseParamValue(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect[effectKey]);\n            }\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let valueLow, valueHigh, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                valueLow = parseParamValue(rawLowValue);\n                valueHigh = parseParamValue(rawHighValue);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n                valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n                chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n            }\n            const results = [];\n            if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources, value: {\n                        [buffKeyLow]: valueLow,\n                        [buffKeyHigh]: valueHigh,\n                        chance,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                elements: [],\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let element1, element2;\n                [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                [element1, element2].forEach((elementValue) => {\n                    if (elementValue && elementValue !== '0') {\n                        stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                if (Array.isArray(typedEffect['elements buffed'])) {\n                    stats.elements = typedEffect['elements buffed'];\n                }\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:elemental-${stat}`, originalId,\n                sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n            if (stats.elements.length > 0) {\n                stats.elements.forEach((element) => {\n                    STATS_ORDER.forEach((stat) => {\n                        const value = parseNumberOrDefault(stats[stat]);\n                        if (value !== 0) {\n                            results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                        }\n                    });\n                });\n            }\n            else {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                    }\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                unitType: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let unitType;\n                [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                if (unitType && unitType !== '0') {\n                    stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.unitType = typedEffect['unit type buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetUnitType = stats.unitType || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:3:type based-${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:4:resist-${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let element;\n            let mitigation = '0';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n                if (element !== BuffConditionElement.Unknown) {\n                    mitigation = typedEffect[`${element} resist%`];\n                }\n            }\n            const value = parseNumberOrDefault(mitigation);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:5:mitigate-${element}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'dmg% mitigation',\n                buffId: 'passive:8:mitigation',\n                originalId: '8',\n            });\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bc fill per turn',\n                buffId: 'passive:9:gradual bc fill',\n                originalId: '9',\n            });\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'hc effectiveness%',\n                buffId: 'passive:10:hc efficacy',\n                originalId: '10',\n            });\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:11:hp conditional-${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    const entry = Object.assign({ id: `passive:12:hp conditional drop boost-${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '13',\n                effectKeyLow: 'bc fill on enemy defeat low',\n                effectKeyHigh: 'bc fill on enemy defeat high',\n                effectKeyChance: 'bc fill on enemy defeat%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                buffId: 'passive:13:bc fill on enemy defeat',\n            });\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageReduction, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                damageReduction = parseNumberOrDefault(rawReduction);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n                chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n            }\n            const results = [];\n            if (damageReduction !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:14:chance mitigation', originalId,\n                    sources, value: {\n                        value: damageReduction,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('15', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '15',\n                effectKeyLow: 'hp% recover on enemy defeat low',\n                effectKeyHigh: 'hp% recover on enemy defeat high',\n                effectKeyChance: 'hp% recover on enemy defeat chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                defaultEffectChance: 100,\n                buffId: 'passive:15:heal on enemy defeat',\n            });\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n                healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:16:heal on win', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '17',\n                effectKeyLow: 'hp drain% low',\n                effectKeyHigh: 'hp drain% high',\n                effectKeyChance: 'hp drain chance%',\n                buffKeyLow: 'drainHealLow',\n                buffKeyHigh: 'drainHealHigh',\n                buffId: 'passive:17:hp absorb',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            const originalId = '19';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:19:drop boost-${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const originalId = '20';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                let params = splitEffectParams(typedEffect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(typedEffect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = [];\n            inflictedAilments.forEach(({ ailment, chance }) => {\n                if (chance !== 0) {\n                    results.push(Object.assign({ id: `passive:20:chance inflict-${ailment}`, originalId,\n                        sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('21', (effect, context, injectionContext) => {\n            const originalId = '21';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let rawDuration, extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['first x turns atk% (1)'];\n                stats.def = typedEffect['first x turns def% (3)'];\n                stats.rec = typedEffect['first x turns rec% (5)'];\n                stats.crit = typedEffect['first x turns crit% (7)'];\n                turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:21:first turn-${stat}`, originalId,\n                        sources,\n                        value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let fillLow, fillHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n                fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n            }\n            const results = [];\n            if (fillLow !== 0 || fillHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:23:bc fill on win', originalId,\n                    sources, value: {\n                        fillLow,\n                        fillHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '24',\n                effectKeyLow: 'dmg% to hp when attacked low',\n                effectKeyHigh: 'dmg% to hp when attacked high',\n                effectKeyChance: 'dmg% to hp when attacked chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:24:heal on hit',\n            });\n        });\n        map.set('25', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '25',\n                effectKeyLow: 'bc fill when attacked low',\n                effectKeyHigh: 'bc fill when attacked high',\n                effectKeyChance: 'bc fill when attacked%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:25:bc fill on hit',\n            });\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '26',\n                effectKeyLow: 'dmg% reflect low',\n                effectKeyHigh: 'dmg% reflect high',\n                effectKeyChance: 'dmg% reflect chance%',\n                buffKeyLow: 'damageReflectLow',\n                buffKeyHigh: 'damageReflectHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:26:chance damage reflect',\n            });\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'target% chance',\n                buffId: 'passive:27:target chance change',\n                originalId: '27',\n            });\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let value = 0;\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseNumberOrDefault(rawValue);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect['target% chance']);\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n            }\n            const results = [];\n            if (value !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                const entry = Object.assign({ id: 'passive:28:hp conditional target chance change', originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'ignore def%',\n                buffId: 'passive:29:chance def ignore',\n                originalId: '29',\n            });\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:30:bb gauge conditional-${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let sparkDamageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawSparkDamageBoost;\n                [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n                });\n            }\n            const results = [];\n            if (sparkDamageBoost !== 0) {\n                results.push(Object.assign({ id: 'passive:31:spark-damage', originalId,\n                    sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:31:spark-${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bb gauge fill rate%',\n                buffId: 'passive:32:bc efficacy',\n                originalId: '32',\n            });\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh, addedRec;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n                healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n                addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:33:gradual heal', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                        'addedRec%': addedRec,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'crit multiplier%',\n                buffId: 'passive:34:critical damage',\n                originalId: '34',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            });\n        });\n        map.set('35', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '35',\n                effectKeyLow: 'bc fill when attacking low',\n                effectKeyHigh: 'bc fill when attacking high',\n                effectKeyChance: 'bc fill when attacking%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onNormalAttack: true }),\n                buffId: 'passive:35:bc fill on normal attack',\n            });\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            const originalId = '36';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let additionalActions = 0, damageModifier = 0, chance = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                additionalActions = parseNumberOrDefault(rawAdditionalActions);\n                damageModifier = parseNumberOrDefault(rawDamageModifier);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n            }\n            const results = [];\n            if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:36:extra action', originalId,\n                    sources, value: {\n                        additionalActions,\n                        damageModifier,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let hitIncreasePerHit = 0, extraHitDamage = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'passive:37:hit count boost', originalId,\n                    sources, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawConvertedStat;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const rawConvertedStat = typedEffect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = `${statType}% buff`;\n                    if (effectKey in typedEffect) {\n                        stats[statType] = typedEffect[effectKey];\n                    }\n                });\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:40:converted-${stat}`, originalId,\n                        sources, value: {\n                            convertedStat,\n                            value,\n                        }, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('41', (effect, context, injectionContext) => {\n            const originalId = '41';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                minimumElements: '0',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.minimumElements = typedEffect['unique elements required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const minimumElements = parseNumberOrDefault(stats.minimumElements);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:41:unique element count-${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minumumUniqueElements: minimumElements }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const GENDER_MAPPING = {\n                0: UnitGender.Other,\n                1: UnitGender.Male,\n                2: UnitGender.Female,\n            };\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                gender: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawGender;\n                [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.gender = typedEffect['gender required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetGender = stats.gender || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:42:gender-${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'take 1 dmg%',\n                buffId: 'passive:43:chance damage to one',\n                originalId: '43',\n            });\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp buff'];\n                stats.atk = typedEffect['atk buff'];\n                stats.def = typedEffect['def buff'];\n                stats.rec = typedEffect['rec buff'];\n                stats.crit = typedEffect['crit buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:44:flat-${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('45', (effect, context, injectionContext) => {\n            const originalId = '45';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let baseResist = 0, buffResist = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n                baseResist = parseNumberOrDefault(rawBaseResist);\n                buffResist = parseNumberOrDefault(rawBuffResist);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                baseResist = parseNumberOrDefault(typedEffect['base crit% resist']);\n                buffResist = parseNumberOrDefault(typedEffect['buff crit% resist']);\n            }\n            const results = [];\n            if (baseResist !== 0) {\n                results.push(Object.assign({ id: 'passive:45:critical damage reduction-base', originalId,\n                    sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buffResist !== 0) {\n                results.push(Object.assign({ id: 'passive:45:critical damage reduction-buff', originalId,\n                    sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('46', (effect, context, injectionContext) => {\n            const originalId = '46';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const availableStats = ['atk', 'def', 'rec'];\n            const stats = [];\n            let proportionalMode = 'unknown';\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                availableStats.forEach((stat, index) => {\n                    const baseValue = parseNumberOrDefault(params[index * 2]);\n                    const addedValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                    if (baseValue !== 0 || addedValue !== 0) {\n                        stats.push({\n                            stat,\n                            baseValue,\n                            addedValue,\n                        });\n                    }\n                });\n                proportionalMode = params[6] === '1' ? 'lost' : 'remaining';\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                availableStats.forEach((stat) => {\n                    const baseValue = parseNumberOrDefault(typedEffect[`${stat}% base buff`]);\n                    const addedValue = parseNumberOrDefault(typedEffect[`${stat}% extra buff based on hp`]);\n                    if (baseValue !== 0 || addedValue !== 0) {\n                        stats.push({\n                            stat,\n                            baseValue,\n                            addedValue,\n                        });\n                    }\n                });\n                proportionalMode = typedEffect['buff proportional to hp'] || 'unknown';\n            }\n            const results = stats.map(({ stat, baseValue, addedValue }) => (Object.assign({ id: `passive:46:hp scaled-${stat}`, originalId,\n                sources, value: {\n                    baseValue,\n                    addedValue,\n                    proportionalMode,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('47', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '47',\n                effectKeyLow: 'bc fill on spark low',\n                effectKeyHigh: 'bc fill on spark high',\n                effectKeyChance: 'bc fill on spark%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'passive:47:bc fill on spark',\n            });\n        });\n        map.set('48', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'reduced bb bc cost%',\n                buffId: 'passive:48:bc cost reduction',\n                originalId: '48',\n            });\n        });\n        map.set('49', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '49',\n                effectKeyLow: 'reduced bb bc use% low',\n                effectKeyHigh: 'reduced bb bc use% high',\n                effectKeyChance: 'reduced bb bc use chance%',\n                buffKeyLow: 'reducedUseLow%',\n                buffKeyHigh: 'reducedUseHigh%',\n                buffId: 'passive:49:bb gauge consumption reduction',\n            });\n        });\n        map.set('50', (effect, context, injectionContext) => {\n            const originalId = '50';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let damageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                damageBoost = parseNumberOrDefault(params[6]) * 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`${element} units do extra elemental weakness dmg`]);\n                damageBoost = parseNumberOrDefault(typedEffect['elemental weakness multiplier%']);\n            }\n            let results = [];\n            if (damageBoost !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:50:elemental weakness damage-${element}`, originalId,\n                    sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:50:elemental weakness damage-unknown', originalId,\n                        sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            const originalId = '53';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let ResistType;\n            (function (ResistType) {\n                ResistType[\"CriticalDamage\"] = \"critical damage\";\n                ResistType[\"ElementDamage\"] = \"element damage\";\n                ResistType[\"CriticalHitRate\"] = \"critical rate\";\n            })(ResistType || (ResistType = {}));\n            const resistances = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseCritChanceResist, rawBuffCritChanceResist, ...extraParams] = splitEffectParams(typedEffect);\n                [\n                    { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                    { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                    { resistType: ResistType.CriticalHitRate, base: parseNumberOrDefault(rawBaseCritChanceResist), buff: parseNumberOrDefault(rawBuffCritChanceResist) },\n                ].forEach(({ resistType, base, buff }) => {\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                [\n                    { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist%', buffKey: 'crit dmg buffed damage resist%' },\n                    { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist%', buffKey: 'strong buffed element damage resist%' },\n                    { resistType: ResistType.CriticalHitRate, baseKey: 'crit chance base resist%', buffKey: 'crit chance buffed resist%' },\n                ].forEach(({ resistType, baseKey, buffKey }) => {\n                    const base = parseNumberOrDefault(typedEffect[baseKey]);\n                    const buff = parseNumberOrDefault(typedEffect[buffKey]);\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n            }\n            const results = [];\n            resistances.forEach(({ resistType, base, buff }) => {\n                if (base !== 0) {\n                    results.push(Object.assign({ id: `passive:53:${resistType}-base`, originalId,\n                        sources, value: base, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n                if (buff !== 0) {\n                    results.push(Object.assign({ id: `passive:53:${resistType}-buff`, originalId,\n                        sources, value: buff, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('55', (effect, context, injectionContext) => {\n            const originalId = '55';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                    id: params[0],\n                    params: params[1],\n                    turnDuration: parseNumberOrDefault(params[5]),\n                }, context, injectionContext);\n                const maxTriggerCount = parseNumberOrDefault(params[2]);\n                const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], params[4], ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(6), 6, injectionContext);\n                if (triggeredBuffs.length > 0) {\n                    const thresholdConditions = getThresholdConditions(thresholdInfo);\n                    results.push(Object.assign({ id: 'passive:55:hp conditional', originalId,\n                        sources, value: {\n                            triggeredBuffs,\n                            maxTriggerCount,\n                        }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('58', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'guard increase mitigation%',\n                buffId: 'passive:58:guard mitigation',\n                originalId: '58',\n            });\n        });\n        map.set('59', (effect, context, injectionContext) => {\n            const originalId = '59';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let percentFill, flatFill;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled when attacked while guarded']);\n                flatFill = parseNumberOrDefault(typedEffect['bc filled when attacked while guarded']);\n            }\n            const results = [];\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-percent', originalId,\n                    sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n            }\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-flat', originalId,\n                    sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('61', (effect, context, injectionContext) => {\n            const originalId = '61';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let percentFill, flatFill;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled on guard']);\n                flatFill = parseNumberOrDefault(typedEffect['bc filled on guard']);\n            }\n            const results = [];\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'passive:61:bc fill on guard-percent', originalId,\n                    sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n            }\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'passive:61:bc fill on guard-flat', originalId,\n                    sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('62', (effect, context, injectionContext) => {\n            const originalId = '62';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let mitigation = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                mitigation = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n                mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n            }\n            let results = [];\n            if (mitigation !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:62:mitigate-${element}`, originalId,\n                    sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:62:mitigate-unknown', originalId,\n                        sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('63', (effect, context, injectionContext) => {\n            const originalId = '63';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let mitigation = 0, turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                mitigation = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n                mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n                turnDuration = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks buff for first x turns']);\n            }\n            let results = [];\n            if (mitigation !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:63:first turn mitigate-${element}`, originalId,\n                    sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:63:first turn mitigate-unknown', originalId,\n                        sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('64', (effect, context, injectionContext) => {\n            const originalId = '64';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let bb = 0, sbb = 0, ubb = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBb, rawSbb, rawUbb, ...extraParams] = splitEffectParams(typedEffect);\n                bb = parseNumberOrDefault(rawBb);\n                sbb = parseNumberOrDefault(rawSbb);\n                ubb = parseNumberOrDefault(rawUbb);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                bb = parseNumberOrDefault(typedEffect['bb atk% buff']);\n                sbb = parseNumberOrDefault(typedEffect['sbb atk% buff']);\n                ubb = parseNumberOrDefault(typedEffect['ubb atk% buff']);\n            }\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'passive:64:attack boost-bb', originalId,\n                    sources, conditions: Object.assign({}, conditionInfo), value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'passive:64:attack boost-sbb', originalId,\n                    sources, conditions: Object.assign({}, conditionInfo), value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'passive:64:attack boost-ubb', originalId,\n                    sources, conditions: Object.assign({}, conditionInfo), value: ubb }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('65', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '65',\n                effectKeyLow: 'bc fill on crit min',\n                effectKeyHigh: 'bc fill on crit max',\n                effectKeyChance: 'bc fill on crit%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onCriticalHit: true }),\n                buffId: 'passive:65:bc fill on crit',\n            });\n        });\n        map.set('66', (effect, context, injectionContext) => {\n            const originalId = '66';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let triggeredBuffs = [];\n            let triggerOnBb = false, triggerOnSbb = false, triggerOnUbb = false;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawProcIds = '', rawParams = '', rawTargetTypes = '', rawTargetAreas = '', rawStartFrames = '', rawTriggerOnBb, rawTriggerOnSbb, rawTriggerOnUbb, ...extraParams] = splitEffectParams(typedEffect);\n                const allProcIds = rawProcIds.split('~');\n                const allProcParams = rawParams.split('~');\n                const allTargetTypes = rawTargetTypes.split('~');\n                const allTargetAreas = rawTargetAreas.split('~');\n                const allStartFrames = rawStartFrames.split('~');\n                const FRAME_IN_MS = (16 + (2 / 3));\n                allProcIds.forEach((procId, index) => {\n                    const startFrame = allStartFrames[index];\n                    const targetArea = allTargetAreas[index];\n                    const targetType = allTargetTypes[index];\n                    const params = (allProcParams[index] || '').replace(/&/g, ',');\n                    const effectDelayInMs = (parseNumberOrDefault(startFrame) * FRAME_IN_MS).toFixed(1);\n                    const procEffect = {\n                        'proc id': procId,\n                        params,\n                        'effect delay time(ms)/frame': `${effectDelayInMs}/${startFrame}`,\n                        'target area': TARGET_AREA_MAPPING[targetArea] || targetArea,\n                        'target type': TARGET_TYPE_MAPPING[targetType] || targetType,\n                    };\n                    const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                    triggeredBuffs = triggeredBuffs.concat(procBuffs);\n                });\n                triggerOnBb = rawTriggerOnBb === '1';\n                triggerOnSbb = rawTriggerOnSbb === '1';\n                triggerOnUbb = rawTriggerOnUbb === '1';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const triggeredEffects = typedEffect['triggered effect'];\n                if (Array.isArray(triggeredEffects)) {\n                    triggeredEffects.forEach((procEffect) => {\n                        const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                        triggeredBuffs = triggeredBuffs.concat(procBuffs);\n                    });\n                }\n                triggerOnBb = !!typedEffect['trigger on bb'];\n                triggerOnSbb = !!typedEffect['trigger on sbb'];\n                triggerOnUbb = !!typedEffect['trigger on ubb'];\n            }\n            const results = [];\n            if ((triggerOnBb || triggerOnSbb || triggerOnUbb) && triggeredBuffs.length > 0) {\n                const addBuffOfBurstType = (burstType) => {\n                    results.push(Object.assign({ id: `passive:66:add effect to skill-${burstType}`, originalId,\n                        sources, value: triggeredBuffs, conditions: Object.assign({}, conditionInfo) }, targetData));\n                };\n                if (triggerOnBb) {\n                    addBuffOfBurstType('bb');\n                }\n                if (triggerOnSbb) {\n                    addBuffOfBurstType('sbb');\n                }\n                if (triggerOnUbb) {\n                    addBuffOfBurstType('ubb');\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to {@link IBuff} format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given passive effect.\n     */\n    function defaultConversionFunction$2(effect, context) {\n        const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given passive effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Passive effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertPassiveEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isPassiveEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$2(effect, context);\n    }\n\n    const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ TURN_DURATION_MODIFICATION: {\n            id: BuffId.TURN_DURATION_MODIFICATION,\n            name: 'Passive Turn Duration Modification',\n            stat: UnitStat.turnDurationModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [\n                (buff && buff.value &&\n                    buff.value.duration &&\n                    buff.value.duration < 0) ?\n                    IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n            ],\n        }, NO_PARAMS_SPECIFIED: {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            name: 'No Parameters Specified',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_PASSIVE_EFFECT_ID: {\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            name: 'Unknown Passive Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_PASSIVE_BUFF_PARAMS: {\n            id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n            name: 'Unknown Passive Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'passive:1:hp': {\n            id: BuffId['passive:1:hp'],\n            name: 'Passive HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:1:atk': {\n            id: BuffId['passive:1:atk'],\n            name: 'Passive Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:1:def': {\n            id: BuffId['passive:1:def'],\n            name: 'Passive Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:1:rec': {\n            id: BuffId['passive:1:rec'],\n            name: 'Passive Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:1:crit': {\n            id: BuffId['passive:1:crit'],\n            name: 'Passive Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        } }, (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:2:elemental-hp': {\n                id: BuffId['passive:2:elemental-hp'],\n                name: 'Passive Elemental HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:2:elemental-atk': {\n                id: BuffId['passive:2:elemental-atk'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:2:elemental-def': {\n                id: BuffId['passive:2:elemental-def'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:2:elemental-rec': {\n                id: BuffId['passive:2:elemental-rec'],\n                name: 'Passive Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:2:elemental-crit': {\n                id: BuffId['passive:2:elemental-crit'],\n                name: 'Passive Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let unitType = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        unitType = buff.conditions.targetUnitType || '';\n                    }\n                }\n                if (typeof unitType !== 'string' || !unitType) {\n                    unitType = 'unknown';\n                }\n                let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n                if (!unitType || !(iconKey in IconId)) {\n                    iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:3:type based-hp': {\n                id: BuffId['passive:3:type based-hp'],\n                name: 'Passive Type-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:3:type based-atk': {\n                id: BuffId['passive:3:type based-atk'],\n                name: 'Passive Type-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:3:type based-def': {\n                id: BuffId['passive:3:type based-def'],\n                name: 'Passive Type-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:3:type based-rec': {\n                id: BuffId['passive:3:type based-rec'],\n                name: 'Passive Type-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:3:type based-crit': {\n                id: BuffId['passive:3:type based-crit'],\n                name: 'Passive Type-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:4:resist-poison': {\n            id: BuffId['passive:4:resist-poison'],\n            name: 'Passive Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:4:resist-weak': {\n            id: BuffId['passive:4:resist-weak'],\n            name: 'Passive Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:4:resist-sick': {\n            id: BuffId['passive:4:resist-sick'],\n            name: 'Passive Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:4:resist-injury': {\n            id: BuffId['passive:4:resist-injury'],\n            name: 'Passive Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:4:resist-curse': {\n            id: BuffId['passive:4:resist-curse'],\n            name: 'Passive Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:4:resist-paralysis': {\n            id: BuffId['passive:4:resist-paralysis'],\n            name: 'Passive Paralysis Resist',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:5:mitigate-fire': {\n            id: BuffId['passive:5:mitigate-fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:5:mitigate-water': {\n            id: BuffId['passive:5:mitigate-water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:5:mitigate-earth': {\n            id: BuffId['passive:5:mitigate-earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:5:mitigate-thunder': {\n            id: BuffId['passive:5:mitigate-thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:5:mitigate-light': {\n            id: BuffId['passive:5:mitigate-light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:5:mitigate-dark': {\n            id: BuffId['passive:5:mitigate-dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:5:mitigate-unknown': {\n            id: BuffId['passive:5:mitigate-unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:8:mitigation': {\n            id: BuffId['passive:8:mitigation'],\n            name: 'Passive Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:9:gradual bc fill': {\n            id: BuffId['passive:9:gradual bc fill'],\n            name: 'Passive Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:10:hc efficacy': {\n            id: BuffId['passive:10:hc efficacy'],\n            name: 'Passive HC Efficacy',\n            stat: UnitStat.hcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HCREC],\n        }, 'passive:11:hp conditional-atk': {\n            id: BuffId['passive:11:hp conditional-atk'],\n            name: 'Passive HP-Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n        }, 'passive:11:hp conditional-def': {\n            id: BuffId['passive:11:hp conditional-def'],\n            name: 'Passive HP-Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n        }, 'passive:11:hp conditional-rec': {\n            id: BuffId['passive:11:hp conditional-rec'],\n            name: 'Passive HP-Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n        }, 'passive:11:hp conditional-crit': {\n            id: BuffId['passive:11:hp conditional-crit'],\n            name: 'Passive HP-Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n        }, 'passive:12:hp conditional drop boost-bc': {\n            id: BuffId['passive:12:hp conditional drop boost-bc'],\n            name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n        }, 'passive:12:hp conditional drop boost-hc': {\n            id: BuffId['passive:12:hp conditional drop boost-hc'],\n            name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n        }, 'passive:12:hp conditional drop boost-item': {\n            id: BuffId['passive:12:hp conditional drop boost-item'],\n            name: 'Passive HP-Conditional Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n        }, 'passive:12:hp conditional drop boost-zel': {\n            id: BuffId['passive:12:hp conditional drop boost-zel'],\n            name: 'Passive HP-Conditional Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n        }, 'passive:12:hp conditional drop boost-karma': {\n            id: BuffId['passive:12:hp conditional drop boost-karma'],\n            name: 'Passive HP-Conditional Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n        }, 'passive:13:bc fill on enemy defeat': {\n            id: BuffId['passive:13:bc fill on enemy defeat'],\n            name: 'Passive BC Fill on Enemy Defeat',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:14:chance mitigation': {\n            id: BuffId['passive:14:chance mitigation'],\n            name: 'Passive Damage Reduction (Chance)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:15:heal on enemy defeat': {\n            id: BuffId['passive:15:heal on enemy defeat'],\n            name: 'Passive Heal on Enemy Defeat',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:16:heal on win': {\n            id: BuffId['passive:16:heal on win'],\n            name: 'Passive Heal on Battle Win',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:17:hp absorb': {\n            id: BuffId['passive:17:hp absorb'],\n            name: 'HP Absorption',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPABS],\n        }, 'passive:19:drop boost-bc': {\n            id: BuffId['passive:19:drop boost-bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'passive:19:drop boost-hc': {\n            id: BuffId['passive:19:drop boost-hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'passive:19:drop boost-item': {\n            id: BuffId['passive:19:drop boost-item'],\n            name: 'Passive Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'passive:19:drop boost-zel': {\n            id: BuffId['passive:19:drop boost-zel'],\n            name: 'Passive Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n        }, 'passive:19:drop boost-karma': {\n            id: BuffId['passive:19:drop boost-karma'],\n            name: 'Passive Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n        }, 'passive:20:chance inflict-poison': {\n            id: BuffId['passive:20:chance inflict-poison'],\n            name: 'Passive Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'passive:20:chance inflict-weak': {\n            id: BuffId['passive:20:chance inflict-weak'],\n            name: 'Passive Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'passive:20:chance inflict-sick': {\n            id: BuffId['passive:20:chance inflict-sick'],\n            name: 'Passive Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'passive:20:chance inflict-injury': {\n            id: BuffId['passive:20:chance inflict-injury'],\n            name: 'Passive Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'passive:20:chance inflict-curse': {\n            id: BuffId['passive:20:chance inflict-curse'],\n            name: 'Passive Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'passive:20:chance inflict-paralysis': {\n            id: BuffId['passive:20:chance inflict-paralysis'],\n            name: 'Passive Paralysis Infliction',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'passive:20:chance inflict-atk down': {\n            id: BuffId['passive:20:chance inflict-atk down'],\n            name: 'Passive Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'passive:20:chance inflict-def down': {\n            id: BuffId['passive:20:chance inflict-def down'],\n            name: 'Passive Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'passive:20:chance inflict-rec down': {\n            id: BuffId['passive:20:chance inflict-rec down'],\n            name: 'Passive Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'passive:20:chance inflict-unknown': {\n            id: BuffId['passive:20:chance inflict-unknown'],\n            name: 'Passive Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'passive:21:first turn-atk': {\n            id: BuffId['passive:21:first turn-atk'],\n            name: 'Attack Boost for X Turns',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:21:first turn-def': {\n            id: BuffId['passive:21:first turn-def'],\n            name: 'Defense Boost for X Turns',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:21:first turn-rec': {\n            id: BuffId['passive:21:first turn-rec'],\n            name: 'Recovery Boost for X Turns',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:21:first turn-crit': {\n            id: BuffId['passive:21:first turn-crit'],\n            name: 'Critical Hit Rate Boost for X Turns',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:23:bc fill on win': {\n            id: BuffId['passive:23:bc fill on win'],\n            name: 'Passive BC Fill on Battle Win',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:24:heal on hit': {\n            id: BuffId['passive:24:heal on hit'],\n            name: 'Passive Heal when Attacked (Chance)',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'passive:25:bc fill on hit': {\n            id: BuffId['passive:25:bc fill on hit'],\n            name: 'Passive BC Fill when Attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:26:chance damage reflect': {\n            id: BuffId['passive:26:chance damage reflect'],\n            name: 'Passive Damage Counter (Chance)',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'passive:27:target chance change': {\n            id: BuffId['passive:27:target chance change'],\n            name: 'Passive Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n        }, 'passive:28:hp conditional target chance change': {\n            id: BuffId['passive:28:hp conditional target chance change'],\n            name: 'Passive HP-Conditional Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n        }, 'passive:29:chance def ignore': {\n            id: BuffId['passive:29:chance def ignore'],\n            name: 'Passive Defense Ignore (Chance)',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'passive:30:bb gauge conditional-atk': {\n            id: BuffId['passive:30:bb gauge conditional-atk'],\n            name: 'Passive BB Gauge Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n        }, 'passive:30:bb gauge conditional-def': {\n            id: BuffId['passive:30:bb gauge conditional-def'],\n            name: 'Passive BB Gauge Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n        }, 'passive:30:bb gauge conditional-rec': {\n            id: BuffId['passive:30:bb gauge conditional-rec'],\n            name: 'Passive BB Gauge Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n        }, 'passive:30:bb gauge conditional-crit': {\n            id: BuffId['passive:30:bb gauge conditional-crit'],\n            name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n        }, 'passive:31:spark-damage': {\n            id: BuffId['passive:31:spark-damage'],\n            name: 'Passive Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'passive:31:spark-bc': {\n            id: BuffId['passive:31:spark-bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n        }, 'passive:31:spark-hc': {\n            id: BuffId['passive:31:spark-hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n        }, 'passive:31:spark-item': {\n            id: BuffId['passive:31:spark-item'],\n            name: 'Passive Item Drop Rate Boost during Spark',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n        }, 'passive:31:spark-zel': {\n            id: BuffId['passive:31:spark-zel'],\n            name: 'Passive Zel Drop Rate Boost during Spark',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n        }, 'passive:31:spark-karma': {\n            id: BuffId['passive:31:spark-karma'],\n            name: 'Passive Karma Drop Rate Boost during Spark',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n        }, 'passive:32:bc efficacy': {\n            id: BuffId['passive:32:bc efficacy'],\n            name: 'Passive BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'passive:33:gradual heal': {\n            id: BuffId['passive:33:gradual heal'],\n            name: 'Passive Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:34:critical damage': {\n            id: BuffId['passive:34:critical damage'],\n            name: 'Passive Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'passive:35:bc fill on normal attack': {\n            id: BuffId['passive:35:bc fill on normal attack'],\n            name: 'Passive BC Fill when Normal Attacking',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:36:extra action': {\n            id: BuffId['passive:36:extra action'],\n            name: 'Passive Extra Action',\n            stat: UnitStat.extraAction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DBLSTRIKE],\n        }, 'passive:37:hit count boost': {\n            id: BuffId['passive:37:hit count boost'],\n            name: 'Passive Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'passive:40:converted-atk': {\n            id: BuffId['passive:40:converted-atk'],\n            name: 'Passive Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'passive:40:converted-def': {\n            id: BuffId['passive:40:converted-def'],\n            name: 'Passive Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'passive:40:converted-rec': {\n            id: BuffId['passive:40:converted-rec'],\n            name: 'Passive Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'passive:41:unique element count-hp': {\n            id: BuffId['passive:41:unique element count-hp'],\n            name: 'Passive Element Squad-based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n        }, 'passive:41:unique element count-atk': {\n            id: BuffId['passive:41:unique element count-atk'],\n            name: 'Passive Element Squad-based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n        }, 'passive:41:unique element count-def': {\n            id: BuffId['passive:41:unique element count-def'],\n            name: 'Passive Element Squad-based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n        }, 'passive:41:unique element count-rec': {\n            id: BuffId['passive:41:unique element count-rec'],\n            name: 'Passive Element Squad-based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n        }, 'passive:41:unique element count-crit': {\n            id: BuffId['passive:41:unique element count-crit'],\n            name: 'Passive Element Squad-based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let gender = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        gender = buff.conditions.targetGender || '';\n                    }\n                }\n                if (typeof gender !== 'string' || !gender) {\n                    gender = 'unknown';\n                }\n                let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n                if (!gender || !(iconKey in IconId)) {\n                    iconKey = `BUFF_GENDER${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:42:gender-hp': {\n                id: BuffId['passive:42:gender-hp'],\n                name: 'Passive Gender-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:42:gender-atk': {\n                id: BuffId['passive:42:gender-atk'],\n                name: 'Passive Gender-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:42:gender-def': {\n                id: BuffId['passive:42:gender-def'],\n                name: 'Passive Gender-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:42:gender-rec': {\n                id: BuffId['passive:42:gender-rec'],\n                name: 'Passive Gender-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:42:gender-crit': {\n                id: BuffId['passive:42:gender-crit'],\n                name: 'Passive Gender-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:43:chance damage to one': {\n            id: BuffId['passive:43:chance damage to one'],\n            name: 'Passive Damage Reduction To One (Chance)',\n            stat: UnitStat.reduceDamageToOne,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n        }, 'passive:44:flat-hp': {\n            id: BuffId['passive:44:flat-hp'],\n            name: 'Passive Flat HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:44:flat-atk': {\n            id: BuffId['passive:44:flat-atk'],\n            name: 'Passive Flat Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:44:flat-def': {\n            id: BuffId['passive:44:flat-def'],\n            name: 'Passive Flat Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:44:flat-rec': {\n            id: BuffId['passive:44:flat-rec'],\n            name: 'Passive Flat Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:44:flat-crit': {\n            id: BuffId['passive:44:flat-crit'],\n            name: 'Passive Flat Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:45:critical damage reduction-base': {\n            id: BuffId['passive:45:critical damage reduction-base'],\n            name: 'Passive Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:45:critical damage reduction-buff': {\n            id: BuffId['passive:45:critical damage reduction-buff'],\n            name: 'Passive Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:46:hp scaled-atk': {\n            id: BuffId['passive:46:hp scaled-atk'],\n            name: 'Passive Attack Boost Relative to HP',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDATKDOWN : IconId.BUFF_HPSCALEDATKUP],\n        }, 'passive:46:hp scaled-def': {\n            id: BuffId['passive:46:hp scaled-def'],\n            name: 'Passive Defense Boost Relative to HP',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDDEFDOWN : IconId.BUFF_HPSCALEDDEFUP],\n        }, 'passive:46:hp scaled-rec': {\n            id: BuffId['passive:46:hp scaled-rec'],\n            name: 'Passive Recovery Boost Relative to HP',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDRECDOWN : IconId.BUFF_HPSCALEDRECUP],\n        }, 'passive:47:bc fill on spark': {\n            id: BuffId['passive:47:bc fill on spark'],\n            name: 'Passive BC Fill on Spark',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKBBUP],\n        }, 'passive:48:bc cost reduction': {\n            id: BuffId['passive:48:bc cost reduction'],\n            name: 'Passive BC Cost Reduction',\n            stat: UnitStat.bcCostReduction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBCOST_REDUCTION],\n        }, 'passive:49:bb gauge consumption reduction': {\n            id: BuffId['passive:49:bb gauge consumption reduction'],\n            name: 'Passive BB Gauge Consumption Reduction',\n            stat: UnitStat.bbGaugeConsumptionReduction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:50:elemental weakness damage-fire': {\n            id: BuffId['passive:50:elemental weakness damage-fire'],\n            name: 'Passive Fire Elemental Damage Boost',\n            stat: UnitStat.fireElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGUP],\n        }, 'passive:50:elemental weakness damage-water': {\n            id: BuffId['passive:50:elemental weakness damage-water'],\n            name: 'Passive Water Elemental Damage Boost',\n            stat: UnitStat.waterElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGUP],\n        }, 'passive:50:elemental weakness damage-earth': {\n            id: BuffId['passive:50:elemental weakness damage-earth'],\n            name: 'Passive Earth Elemental Damage Boost',\n            stat: UnitStat.earthElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGUP],\n        }, 'passive:50:elemental weakness damage-thunder': {\n            id: BuffId['passive:50:elemental weakness damage-thunder'],\n            name: 'Passive Thunder Elemental Damage Boost',\n            stat: UnitStat.thunderElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGUP],\n        }, 'passive:50:elemental weakness damage-light': {\n            id: BuffId['passive:50:elemental weakness damage-light'],\n            name: 'Passive Light Elemental Damage Boost',\n            stat: UnitStat.lightElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGUP],\n        }, 'passive:50:elemental weakness damage-dark': {\n            id: BuffId['passive:50:elemental weakness damage-dark'],\n            name: 'Passive Dark Elemental Damage Boost',\n            stat: UnitStat.darkElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGUP],\n        }, 'passive:50:elemental weakness damage-unknown': {\n            id: BuffId['passive:50:elemental weakness damage-unknown'],\n            name: 'Passive Elemental Damage Boost (Unspecified Element)',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGUP],\n        }, 'passive:53:critical damage-base': {\n            id: BuffId['passive:53:critical damage-base'],\n            name: 'Passive Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:critical damage-buff': {\n            id: BuffId['passive:53:critical damage-buff'],\n            name: 'Passive Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:element damage-base': {\n            id: BuffId['passive:53:element damage-base'],\n            name: 'Passive Base Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'passive:53:element damage-buff': {\n            id: BuffId['passive:53:element damage-buff'],\n            name: 'Passive Buffed Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'passive:53:critical rate-base': {\n            id: BuffId['passive:53:critical rate-base'],\n            name: 'Passive Base Critical Hit Rate Reduction',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:critical rate-buff': {\n            id: BuffId['passive:53:critical rate-buff'],\n            name: 'Passive Buffed Critical Hit Rate Reduction',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:55:hp conditional': {\n            id: BuffId['passive:55:hp conditional'],\n            name: 'Passive Conditional Effect based on HP Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_HPTHRESH],\n        }, 'passive:58:guard mitigation': {\n            id: BuffId['passive:58:guard mitigation'],\n            name: 'Passive Guard Damage Reduction',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDCUT],\n        }, 'passive:59:bc fill when attacked on guard-percent': {\n            id: BuffId['passive:59:bc fill when attacked on guard-percent'],\n            name: 'Passive BC Fill when Attacked and Guarding (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:59:bc fill when attacked on guard-flat': {\n            id: BuffId['passive:59:bc fill when attacked on guard-flat'],\n            name: 'Passive BC Fill when Attacked and Guarding (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:61:bc fill on guard-percent': {\n            id: BuffId['passive:61:bc fill on guard-percent'],\n            name: 'Passive BC Fill on Guard (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:61:bc fill on guard-flat': {\n            id: BuffId['passive:61:bc fill on guard-flat'],\n            name: 'Passive BC Fill on Guard (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:62:mitigate-fire': {\n            id: BuffId['passive:62:mitigate-fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:62:mitigate-water': {\n            id: BuffId['passive:62:mitigate-water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:62:mitigate-earth': {\n            id: BuffId['passive:62:mitigate-earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:62:mitigate-thunder': {\n            id: BuffId['passive:62:mitigate-thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:62:mitigate-light': {\n            id: BuffId['passive:62:mitigate-light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:62:mitigate-dark': {\n            id: BuffId['passive:62:mitigate-dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:62:mitigate-unknown': {\n            id: BuffId['passive:62:mitigate-unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:63:first turn mitigate-fire': {\n            id: BuffId['passive:63:first turn mitigate-fire'],\n            name: 'Fire Damage Reduction for First X Turns',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:63:first turn mitigate-water': {\n            id: BuffId['passive:63:first turn mitigate-water'],\n            name: 'Water Damage Reduction for First X Turns',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:63:first turn mitigate-earth': {\n            id: BuffId['passive:63:first turn mitigate-earth'],\n            name: 'Earth Damage Reduction for First X Turns',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:63:first turn mitigate-thunder': {\n            id: BuffId['passive:63:first turn mitigate-thunder'],\n            name: 'Thunder Damage Reduction for First X Turns',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:63:first turn mitigate-light': {\n            id: BuffId['passive:63:first turn mitigate-light'],\n            name: 'Light Damage Reduction for First X Turns',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:63:first turn mitigate-dark': {\n            id: BuffId['passive:63:first turn mitigate-dark'],\n            name: 'Dark Damage Reduction for First X Turns',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:63:first turn mitigate-unknown': {\n            id: BuffId['passive:63:first turn mitigate-unknown'],\n            name: 'Elemental Damage Reduction (Unspecified Element) for First X Turns',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:64:attack boost-bb': {\n            id: BuffId['passive:64:attack boost-bb'],\n            name: 'Passive BB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'passive:64:attack boost-sbb': {\n            id: BuffId['passive:64:attack boost-sbb'],\n            name: 'Passive SBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'passive:64:attack boost-ubb': {\n            id: BuffId['passive:64:attack boost-ubb'],\n            name: 'Passive UBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'passive:65:bc fill on crit': {\n            id: BuffId['passive:65:bc fill on crit'],\n            name: 'Passive BC Fill on Critical Hit',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:66:add effect to skill-bb': {\n            id: BuffId['passive:66:add effect to skill-bb'],\n            name: 'Passive Added Effect to Brave Burst',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTO_BB],\n        }, 'passive:66:add effect to skill-sbb': {\n            id: BuffId['passive:66:add effect to skill-sbb'],\n            name: 'Passive Added Effect to Super Brave Burst',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTO_SBB],\n        }, 'passive:66:add effect to skill-ubb': {\n            id: BuffId['passive:66:add effect to skill-ubb'],\n            name: 'Passive Added Effect to Ultimate Brave Burst',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTO_UBB],\n        }, UNKNOWN_PROC_EFFECT_ID: {\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            name: 'Unknown Proc Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_PROC_BUFF_PARAMS: {\n            id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n            name: 'Unknown Proc Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'proc:1:attack': {\n            id: BuffId['proc:1:attack'],\n            name: 'Regular Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:2:burst heal': {\n            id: BuffId['proc:2:burst heal'],\n            name: 'Burst Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:3:gradual heal': {\n            id: BuffId['proc:3:gradual heal'],\n            name: 'Active Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:4:bc fill-flat': {\n            id: BuffId['proc:4:bc fill-flat'],\n            name: 'Burst BC Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:4:bc fill-percent': {\n            id: BuffId['proc:4:bc fill-percent'],\n            name: 'Burst BC Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:5:regular or elemental-atk': {\n                id: BuffId['proc:5:regular or elemental-atk'],\n                name: 'Active Regular/Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:5:regular or elemental-def': {\n                id: BuffId['proc:5:regular or elemental-def'],\n                name: 'Active Regular/Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:5:regular or elemental-rec': {\n                id: BuffId['proc:5:regular or elemental-rec'],\n                name: 'Active Regular/Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:5:regular or elemental-crit': {\n                id: BuffId['proc:5:regular or elemental-crit'],\n                name: 'Active Regular/Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'proc:6:drop boost-bc': {\n            id: BuffId['proc:6:drop boost-bc'],\n            name: 'Active Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'proc:6:drop boost-hc': {\n            id: BuffId['proc:6:drop boost-hc'],\n            name: 'Active Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'proc:6:drop boost-item': {\n            id: BuffId['proc:6:drop boost-item'],\n            name: 'Active Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'proc:7:guaranteed ko resistance': {\n            id: BuffId['proc:7:guaranteed ko resistance'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:8:max hp boost-flat': {\n            id: BuffId['proc:8:max hp boost-flat'],\n            name: 'Max HP Boost (Flat Amount)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        }, 'proc:8:max hp boost-percent': {\n            id: BuffId['proc:8:max hp boost-percent'],\n            name: 'Max HP Boost (Percentage)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'DOWN'; // default to down since these are reduction buffs\n                if (buff) {\n                    if (buff.value && buff.value > 0) {\n                        polarity = 'UP';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:9:regular or elemental reduction-atk': {\n                id: BuffId['proc:9:regular or elemental reduction-atk'],\n                name: 'Active Regular/Elemental Attack Reduction',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:9:regular or elemental reduction-def': {\n                id: BuffId['proc:9:regular or elemental reduction-def'],\n                name: 'Active Regular/Elemental Defense Reduction',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:9:regular or elemental reduction-rec': {\n                id: BuffId['proc:9:regular or elemental reduction-rec'],\n                name: 'Active Regular/Elemental Recovery Reduction',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:9:regular or elemental reduction-unknown': {\n                id: BuffId['proc:9:regular or elemental reduction-unknown'],\n                name: 'Active Regular/Elemental Unknown Stat Reduction',\n                stackType: BuffStackType.Active,\n                icons: () => [IconId.UNKNOWN],\n            },\n        };\n    })()), { 'proc:10:cleanse-poison': {\n            id: BuffId['proc:10:cleanse-poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:10:cleanse-weak': {\n            id: BuffId['proc:10:cleanse-weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:10:cleanse-sick': {\n            id: BuffId['proc:10:cleanse-sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:10:cleanse-injury': {\n            id: BuffId['proc:10:cleanse-injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:10:cleanse-curse': {\n            id: BuffId['proc:10:cleanse-curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:10:cleanse-paralysis': {\n            id: BuffId['proc:10:cleanse-paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:10:cleanse-atk down': {\n            id: BuffId['proc:10:cleanse-atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWNBLK],\n        }, 'proc:10:cleanse-def down': {\n            id: BuffId['proc:10:cleanse-def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWNBLK],\n        }, 'proc:10:cleanse-rec down': {\n            id: BuffId['proc:10:cleanse-rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWNBLK],\n        }, 'proc:10:cleanse-unknown': {\n            id: BuffId['proc:10:cleanse-unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:11:chance inflict-poison': {\n            id: BuffId['proc:11:chance inflict-poison'],\n            name: 'Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_POISON],\n        }, 'proc:11:chance inflict-weak': {\n            id: BuffId['proc:11:chance inflict-weak'],\n            name: 'Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_WEAK],\n        }, 'proc:11:chance inflict-sick': {\n            id: BuffId['proc:11:chance inflict-sick'],\n            name: 'Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_SICK],\n        }, 'proc:11:chance inflict-injury': {\n            id: BuffId['proc:11:chance inflict-injury'],\n            name: 'Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_INJURY],\n        }, 'proc:11:chance inflict-curse': {\n            id: BuffId['proc:11:chance inflict-curse'],\n            name: 'Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_CURSE],\n        }, 'proc:11:chance inflict-paralysis': {\n            id: BuffId['proc:11:chance inflict-paralysis'],\n            name: 'Paralysis Infliction',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_PARALYSIS],\n        }, 'proc:11:chance inflict-atk down': {\n            id: BuffId['proc:11:chance inflict-atk down'],\n            name: 'Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWN],\n        }, 'proc:11:chance inflict-def down': {\n            id: BuffId['proc:11:chance inflict-def down'],\n            name: 'Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWN],\n        }, 'proc:11:chance inflict-rec down': {\n            id: BuffId['proc:11:chance inflict-rec down'],\n            name: 'Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWN],\n        }, 'proc:11:chance inflict-unknown': {\n            id: BuffId['proc:11:chance inflict-unknown'],\n            name: 'Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.DEBUFF_AILMENT],\n        }, 'proc:12:guaranteed revive': {\n            id: BuffId['proc:12:guaranteed revive'],\n            name: 'Instant Revive (Guaranteed)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:13:random attack': {\n            id: BuffId['proc:13:random attack'],\n            name: 'Random Target Damage',\n            stackType: BuffStackType.Attack,\n            icons: () => [IconId.ATK_RT],\n        }, 'proc:14:hp absorb attack': {\n            id: BuffId['proc:14:hp absorb attack'],\n            name: 'Lifesteal Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n        }, 'proc:16:mitigate-fire': {\n            id: BuffId['proc:16:mitigate-fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:16:mitigate-water': {\n            id: BuffId['proc:16:mitigate-water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:16:mitigate-earth': {\n            id: BuffId['proc:16:mitigate-earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:16:mitigate-thunder': {\n            id: BuffId['proc:16:mitigate-thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:16:mitigate-light': {\n            id: BuffId['proc:16:mitigate-light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:16:mitigate-dark': {\n            id: BuffId['proc:16:mitigate-dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:16:mitigate-all': {\n            id: BuffId['proc:16:mitigate-all'],\n            name: 'Active Elemental Damage Reduction (All Elements)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:16:mitigate-unknown': {\n            id: BuffId['proc:16:mitigate-unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:17:resist-poison': {\n            id: BuffId['proc:17:resist-poison'],\n            name: 'Active Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:17:resist-weak': {\n            id: BuffId['proc:17:resist-weak'],\n            name: 'Active Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:17:resist-sick': {\n            id: BuffId['proc:17:resist-sick'],\n            name: 'Active Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:17:resist-injury': {\n            id: BuffId['proc:17:resist-injury'],\n            name: 'Active Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:17:resist-curse': {\n            id: BuffId['proc:17:resist-curse'],\n            name: 'Active Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:17:resist-paralysis': {\n            id: BuffId['proc:17:resist-paralysis'],\n            name: 'Active Paralysis Resist',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:18:mitigation': {\n            id: BuffId['proc:18:mitigation'],\n            name: 'Active Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'proc:19:gradual bc fill': {\n            id: BuffId['proc:19:gradual bc fill'],\n            name: 'Active Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:20:bc fill on hit': {\n            id: BuffId['proc:20:bc fill on hit'],\n            name: 'Active BC Fill when attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'proc:22:defense ignore': {\n            id: BuffId['proc:22:defense ignore'],\n            name: 'Active Defense Ignore',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'proc:23:spark damage': {\n            id: BuffId['proc:23:spark damage'],\n            name: 'Active Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'proc:24:converted-atk': {\n            id: BuffId['proc:24:converted-atk'],\n            name: 'Active Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'proc:24:converted-def': {\n            id: BuffId['proc:24:converted-def'],\n            name: 'Active Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'proc:24:converted-rec': {\n            id: BuffId['proc:24:converted-rec'],\n            name: 'Active Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'proc:26:hit count boost': {\n            id: BuffId['proc:26:hit count boost'],\n            name: 'Active Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'proc:27:proportional attack': {\n            id: BuffId['proc:27:proportional attack'],\n            name: 'Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:28:fixed attack': {\n            id: BuffId['proc:28:fixed attack'],\n            name: 'Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n        }, 'proc:29:multi-element attack': {\n            id: BuffId['proc:29:multi-element attack'],\n            name: 'Multi-Element Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n        }, 'proc:30:add element-fire': {\n            id: BuffId['proc:30:add element-fire'],\n            name: 'Active Added Element to Attack (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDFIRE],\n        }, 'proc:30:add element-water': {\n            id: BuffId['proc:30:add element-water'],\n            name: 'Active Added Element to Attack (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWATER],\n        }, 'proc:30:add element-earth': {\n            id: BuffId['proc:30:add element-earth'],\n            name: 'Active Added Element to Attack (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDEARTH],\n        }, 'proc:30:add element-thunder': {\n            id: BuffId['proc:30:add element-thunder'],\n            name: 'Active Added Element to Attack (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDTHUNDER],\n        }, 'proc:30:add element-light': {\n            id: BuffId['proc:30:add element-light'],\n            name: 'Active Added Element to Attack (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDLIGHT],\n        }, 'proc:30:add element-dark': {\n            id: BuffId['proc:30:add element-dark'],\n            name: 'Active Added Element to Attack (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDARK],\n        }, 'proc:30:add element-unknown': {\n            id: BuffId['proc:30:add element-unknown'],\n            name: 'Active Added Element to Attack (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDELEMENT],\n        }, 'proc:31:bc fill-flat': {\n            id: BuffId['proc:31:bc fill-flat'],\n            name: 'Burst BC Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:31:bc fill-percent': {\n            id: BuffId['proc:31:bc fill-percent'],\n            name: 'Burst BC Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:32:element shift-fire': {\n            id: BuffId['proc:32:element shift-fire'],\n            name: 'Element Shift (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTFIRE],\n        }, 'proc:32:element shift-water': {\n            id: BuffId['proc:32:element shift-water'],\n            name: 'Element Shift (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTWATER],\n        }, 'proc:32:element shift-earth': {\n            id: BuffId['proc:32:element shift-earth'],\n            name: 'Element Shift (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTEARTH],\n        }, 'proc:32:element shift-thunder': {\n            id: BuffId['proc:32:element shift-thunder'],\n            name: 'Element Shift (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTTHUNDER],\n        }, 'proc:32:element shift-light': {\n            id: BuffId['proc:32:element shift-light'],\n            name: 'Element Shift (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTLIGHT],\n        }, 'proc:32:element shift-dark': {\n            id: BuffId['proc:32:element shift-dark'],\n            name: 'Element Shift (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTDARK],\n        }, 'proc:32:element shift-unknown': {\n            id: BuffId['proc:32:element shift-unknown'],\n            name: 'Element Shift (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTELEMENT],\n        }, 'proc:33:buff wipe': {\n            id: BuffId['proc:33:buff wipe'],\n            name: 'Buff Removal',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_REMOVEBUFF],\n        }, 'proc:34:bc drain-flat': {\n            id: BuffId['proc:34:bc drain-flat'],\n            name: 'Burst BB Gauge Drain (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:34:bc drain-percent': {\n            id: BuffId['proc:34:bc drain-percent'],\n            name: 'Burst BB Gauge Drain (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:36:ls lock': {\n            id: BuffId['proc:36:ls lock'],\n            name: 'Active Leader Skill Lock',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DISABLELS],\n        }, 'proc:37:summon': {\n            id: BuffId['proc:37:summon'],\n            name: 'Summon Unit',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SUMMONUNIT],\n        }, 'proc:38:cleanse-poison': {\n            id: BuffId['proc:38:cleanse-poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:38:cleanse-weak': {\n            id: BuffId['proc:38:cleanse-weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:38:cleanse-sick': {\n            id: BuffId['proc:38:cleanse-sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:38:cleanse-injury': {\n            id: BuffId['proc:38:cleanse-injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:38:cleanse-curse': {\n            id: BuffId['proc:38:cleanse-curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:38:cleanse-paralysis': {\n            id: BuffId['proc:38:cleanse-paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:38:cleanse-atk down': {\n            id: BuffId['proc:38:cleanse-atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWNBLK],\n        }, 'proc:38:cleanse-def down': {\n            id: BuffId['proc:38:cleanse-def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWNBLK],\n        }, 'proc:38:cleanse-rec down': {\n            id: BuffId['proc:38:cleanse-rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWNBLK],\n        }, 'proc:38:cleanse-unknown': {\n            id: BuffId['proc:38:cleanse-unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:39:mitigate-fire': {\n            id: BuffId['proc:39:mitigate-fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:39:mitigate-water': {\n            id: BuffId['proc:39:mitigate-water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:39:mitigate-earth': {\n            id: BuffId['proc:39:mitigate-earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:39:mitigate-thunder': {\n            id: BuffId['proc:39:mitigate-thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:39:mitigate-light': {\n            id: BuffId['proc:39:mitigate-light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:39:mitigate-dark': {\n            id: BuffId['proc:39:mitigate-dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:39:mitigate-unknown': {\n            id: BuffId['proc:39:mitigate-unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:40:add ailment-poison': {\n            id: BuffId['proc:40:add ailment-poison'],\n            name: 'Active Poison Infliction Added to Attack',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'proc:40:add ailment-weak': {\n            id: BuffId['proc:40:add ailment-weak'],\n            name: 'Active Weak Infliction Added to Attack',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'proc:40:add ailment-sick': {\n            id: BuffId['proc:40:add ailment-sick'],\n            name: 'Active Sick Infliction Added to Attack',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'proc:40:add ailment-injury': {\n            id: BuffId['proc:40:add ailment-injury'],\n            name: 'Active Injury Infliction Added to Attack',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'proc:40:add ailment-curse': {\n            id: BuffId['proc:40:add ailment-curse'],\n            name: 'Active Curse Infliction Added to Attack',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'proc:40:add ailment-paralysis': {\n            id: BuffId['proc:40:add ailment-paralysis'],\n            name: 'Active Paralysis Infliction Added to Attack',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'proc:40:add ailment-atk down': {\n            id: BuffId['proc:40:add ailment-atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:40:add ailment-def down': {\n            id: BuffId['proc:40:add ailment-def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:40:add ailment-rec down': {\n            id: BuffId['proc:40:add ailment-rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:40:add ailment-unknown': {\n            id: BuffId['proc:40:add ailment-unknown'],\n            name: 'Active Unknown Ailment Infliction Added to Attack',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'proc:42:sacrificial attack': {\n            id: BuffId['proc:42:sacrificial attack'],\n            name: 'Sacrificial Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n        }, 'proc:42:instant death': {\n            id: BuffId['proc:42:instant death'],\n            name: 'Instant Death to Self (Post-Attack)',\n            stackType: BuffStackType.Burst,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL, IconId.BUFF_KO],\n        }, 'proc:43:burst od fill': {\n            id: BuffId['proc:43:burst od fill'],\n            name: 'Burst OD Gauge Fill (Percentage)',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_OVERDRIVEUP],\n        }, 'proc:44:damage over time': {\n            id: BuffId['proc:44:damage over time'],\n            name: 'Active Damage over Time',\n            stat: UnitStat.damageOverTime,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_TURNDMG],\n        }, 'proc:45:attack boost-bb': {\n            id: BuffId['proc:45:attack boost-bb'],\n            name: 'Active BB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'proc:45:attack boost-sbb': {\n            id: BuffId['proc:45:attack boost-sbb'],\n            name: 'Active SBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'proc:45:attack boost-ubb': {\n            id: BuffId['proc:45:attack boost-ubb'],\n            name: 'Active UBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'proc:46:non-lethal proportional attack': {\n            id: BuffId['proc:46:non-lethal proportional attack'],\n            name: 'Non-Lethal Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:47:hp scaled attack': {\n            id: BuffId['proc:47:hp scaled attack'],\n            name: 'HP Scaled Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPSCALED : IconId.ATK_AOE_HPSCALED],\n        }, 'proc:48:piercing attack-base': {\n            id: BuffId['proc:48:piercing attack-base'],\n            name: 'Piercing Proportional Damage (Base HP)',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n        }, 'proc:48:piercing attack-current': {\n            id: BuffId['proc:48:piercing attack-current'],\n            name: 'Piercing Proportional Damage (Current HP)',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n        }, 'proc:48:piercing attack-fixed': {\n            id: BuffId['proc:48:piercing attack-fixed'],\n            name: 'Piercing Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_FIXED : IconId.ATK_AOE_PIERCING_FIXED],\n        }, 'proc:48:piercing attack-unknown': {\n            id: BuffId['proc:48:piercing attack-unknown'],\n            name: 'Unknown Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:49:chance instant death': {\n            id: BuffId['proc:49:chance instant death'],\n            name: 'Instant Death (Chance)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KO],\n        }, 'proc:50:chance damage reflect': {\n            id: BuffId['proc:50:chance damage reflect'],\n            name: 'Active Damage Reflect (Chance)',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'proc:51:add to attack-atk down': {\n            id: BuffId['proc:51:add to attack-atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:51:add to attack-def down': {\n            id: BuffId['proc:51:add to attack-def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:51:add to attack-rec down': {\n            id: BuffId['proc:51:add to attack-rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:52:bc efficacy': {\n            id: BuffId['proc:52:bc efficacy'],\n            name: 'Active BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'proc:53:inflict on hit-poison': {\n            id: BuffId['proc:53:inflict on hit-poison'],\n            name: 'Active Poison Counter',\n            stat: UnitStat.poisonCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONCOUNTER],\n        }, 'proc:53:inflict on hit-weak': {\n            id: BuffId['proc:53:inflict on hit-weak'],\n            name: 'Active Weak Counter',\n            stat: UnitStat.weakCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKCOUNTER],\n        }, 'proc:53:inflict on hit-sick': {\n            id: BuffId['proc:53:inflict on hit-sick'],\n            name: 'Active Sick Counter',\n            stat: UnitStat.sickCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKCOUNTER],\n        }, 'proc:53:inflict on hit-injury': {\n            id: BuffId['proc:53:inflict on hit-injury'],\n            name: 'Active Injury Counter',\n            stat: UnitStat.injuryCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJCONTER],\n        }, 'proc:53:inflict on hit-curse': {\n            id: BuffId['proc:53:inflict on hit-curse'],\n            name: 'Active Curse Counter',\n            stat: UnitStat.curseCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSECOUNTER],\n        }, 'proc:53:inflict on hit-paralysis': {\n            id: BuffId['proc:53:inflict on hit-paralysis'],\n            name: 'Active Paralysis Counter',\n            stat: UnitStat.paralysisCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYCOUNTER],\n        }, 'proc:54:critical damage boost': {\n            id: BuffId['proc:54:critical damage boost'],\n            name: 'Active Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'proc:55:elemental weakness damage-fire': {\n            id: BuffId['proc:55:elemental weakness damage-fire'],\n            name: 'Active Fire Elemental Damage Boost',\n            stat: UnitStat.fireElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGUP],\n        }, 'proc:55:elemental weakness damage-water': {\n            id: BuffId['proc:55:elemental weakness damage-water'],\n            name: 'Active Water Elemental Damage Boost',\n            stat: UnitStat.waterElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGUP],\n        }, 'proc:55:elemental weakness damage-earth': {\n            id: BuffId['proc:55:elemental weakness damage-earth'],\n            name: 'Active Earth Elemental Damage Boost',\n            stat: UnitStat.earthElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGUP],\n        }, 'proc:55:elemental weakness damage-thunder': {\n            id: BuffId['proc:55:elemental weakness damage-thunder'],\n            name: 'Active Thunder Elemental Damage Boost',\n            stat: UnitStat.thunderElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGUP],\n        }, 'proc:55:elemental weakness damage-light': {\n            id: BuffId['proc:55:elemental weakness damage-light'],\n            name: 'Active Light Elemental Damage Boost',\n            stat: UnitStat.lightElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGUP],\n        }, 'proc:55:elemental weakness damage-dark': {\n            id: BuffId['proc:55:elemental weakness damage-dark'],\n            name: 'Active Dark Elemental Damage Boost',\n            stat: UnitStat.darkElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGUP],\n        }, 'proc:55:elemental weakness damage-unknown': {\n            id: BuffId['proc:55:elemental weakness damage-unknown'],\n            name: 'Active Elemental Damage Boost (Unspecified Element)',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGUP],\n        }, 'proc:56:chance ko resistance': {\n            id: BuffId['proc:56:chance ko resistance'],\n            name: 'KO Resistance (Chance)',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, 'proc:57:bc drop resistance-base': {\n            id: BuffId['proc:57:bc drop resistance-base'],\n            name: 'Active Base Battle Crystal Drop Rate Reduction',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BCDOWN],\n        }, 'proc:57:bc drop resistance-buff': {\n            id: BuffId['proc:57:bc drop resistance-buff'],\n            name: 'Active Buffed Battle Crystal Drop Rate Reduction',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BCDOWN],\n        }, 'proc:57:hc drop resistance-base': {\n            id: BuffId['proc:57:hc drop resistance-base'],\n            name: 'Active Base Heart Crystal Drop Rate Reduction',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HCDOWN],\n        }, 'proc:57:hc drop resistance-buff': {\n            id: BuffId['proc:57:hc drop resistance-buff'],\n            name: 'Active Buffed Heart Crystal Drop Rate Reduction',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HCDOWN],\n        }, 'proc:58:spark vulnerability': {\n            id: BuffId['proc:58:spark vulnerability'],\n            name: 'Active Spark Vulnerability',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SPARKDMGUP],\n        }, 'proc:59:attack reduction-bb': {\n            id: BuffId['proc:59:attack reduction-bb'],\n            name: 'Active BB ATK Reduction',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBATKDOWN],\n        }, 'proc:59:attack reduction-sbb': {\n            id: BuffId['proc:59:attack reduction-sbb'],\n            name: 'Active SBB ATK Reduction',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SBBATKDOWN],\n        }, 'proc:59:attack reduction-ubb': {\n            id: BuffId['proc:59:attack reduction-ubb'],\n            name: 'Active UBB ATK Reduction',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_UBBATKDOWN],\n        }, 'proc:61:party bb gauge-scaled attack': {\n            id: BuffId['proc:61:party bb gauge-scaled attack'],\n            name: 'Party BB Gauge-Scaled Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED],\n        }, 'proc:61:party bc drain': {\n            id: BuffId['proc:61:party bc drain'],\n            name: 'Party BB Gauge Drain (Post-Attack)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED, IconId.BUFF_BBFILLDOWN],\n        }, 'proc:62:barrier-fire': {\n            id: BuffId['proc:62:barrier-fire'],\n            name: 'Fire Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_FIRESHIELD],\n        }, 'proc:62:barrier-water': {\n            id: BuffId['proc:62:barrier-water'],\n            name: 'Water Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_WATERSHIELD],\n        }, 'proc:62:barrier-earth': {\n            id: BuffId['proc:62:barrier-earth'],\n            name: 'Earth Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_EARTHSHIELD],\n        }, 'proc:62:barrier-thunder': {\n            id: BuffId['proc:62:barrier-thunder'],\n            name: 'Thunder Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_THUNDERSHIELD],\n        }, 'proc:62:barrier-light': {\n            id: BuffId['proc:62:barrier-light'],\n            name: 'Light Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_LIGHTSHIELD],\n        }, 'proc:62:barrier-dark': {\n            id: BuffId['proc:62:barrier-dark'],\n            name: 'Dark Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_DARKSHIELD],\n        }, 'proc:62:barrier-all': {\n            id: BuffId['proc:62:barrier-all'],\n            name: 'Barrier (All Elements)',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_ELEMENTSHIELD],\n        }, 'proc:62:barrier-unknown': {\n            id: BuffId['proc:62:barrier-unknown'],\n            name: 'Barrier (Unspecified Element)',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_ELEMENTSHIELD],\n        }, 'proc:64:consecutive usage attack': {\n            id: BuffId['proc:64:consecutive usage attack'],\n            name: 'Consecutive Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_USAGESCALED : IconId.ATK_AOE_USAGESCALED],\n        }, 'proc:65:ailment attack boost': {\n            id: BuffId['proc:65:ailment attack boost'],\n            name: 'Active Attack Boost on Status Afflicted Foes',\n            stat: UnitStat.ailmentAttackBoost,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_AILDMGUP],\n        }, 'proc:66:chance revive': {\n            id: BuffId['proc:66:chance revive'],\n            name: 'Instant Revive (Chance)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, UNKNOWN_CONDITIONAL_EFFECT_ID: {\n            id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n            name: 'Unknown Conditional Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_CONDITIONAL_BUFF_PARAMS: {\n            id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n            name: 'Unknown Conditional Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'conditional:8:gradual heal': {\n            id: BuffId['conditional:8:gradual heal'],\n            name: 'Conditional Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'conditional:12:guaranteed ko resistance': {\n            id: BuffId['conditional:12:guaranteed ko resistance'],\n            name: 'Conditional Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'conditional:36:mitigation': {\n            id: BuffId['conditional:36:mitigation'],\n            name: 'Conditional Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'conditional:91:chance ko resistance': {\n            id: BuffId['conditional:91:chance ko resistance'],\n            name: 'Conditional KO Resistance (Chance)',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, 'conditional:133:heal on hit': {\n            id: BuffId['conditional:133:heal on hit'],\n            name: 'Conditional Heal when Attacked (Chance)',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'conditional:153:chance inflict atk down on hit': {\n            id: BuffId['conditional:153:chance inflict atk down on hit'],\n            name: 'Conditional Attack Reduction Counter (Chance)',\n            stat: UnitStat.atkDownCounter,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_PROB_ATKREDUC],\n        } }));\n\n    /**\n     * @description Get the associated metadata entry for a given buff ID.\n     * @param id Buff ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n     * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    var index$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        convertProcEffectToBuffs: convertProcEffectToBuffs,\n        convertPassiveEffectToBuffs: convertPassiveEffectToBuffs,\n        convertConditionalEffectToBuffs: convertConditionalEffectToBuffs,\n        get BuffSource () { return BuffSource; },\n        get BuffStackType () { return BuffStackType; },\n        BUFF_METADATA: BUFF_METADATA,\n        getMetadataForBuff: getMetadataForBuff\n    });\n\n    var index$2 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        constants: constants,\n        parsers: index$1,\n        getMetadataForProc: getMetadataForProc,\n        getMetadataForPassive: getMetadataForPassive,\n        isAttackingProcId: isAttackingProcId,\n        getNameForProc: getNameForProc,\n        getNameForPassive: getNameForPassive,\n        isProcEffect: isProcEffect,\n        isPassiveEffect: isPassiveEffect,\n        combineEffectsAndDamageFrames: combineEffectsAndDamageFrames,\n        getEffectId: getEffectId,\n        getEffectName: getEffectName,\n        get ProcBuffType () { return ProcBuffType; },\n        PASSIVE_METADATA: PASSIVE_METADATA,\n        PROC_METADATA: PROC_METADATA\n    });\n\n    /**\n     * @description Get the effects of a given extra skill.\n     * @param skill Extra skill to get the effects of.\n     * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForExtraSkill(skill) {\n        return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n    }\n\n    var index$3 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForExtraSkill: getEffectsForExtraSkill\n    });\n\n    /**\n     * @description Get the effects of a given item.\n     * @param item Item to get the effects of, if any are present,\n     * @returns Effects of the given item if they exist, an empty array otherwise.\n     */\n    function getEffectsForItem(item) {\n        let result = [];\n        if (item && item.effect) {\n            if (Array.isArray(item.effect)) {\n                result = item.effect;\n            }\n            else if (Array.isArray(item.effect.effect)) {\n                const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n                result = effect.map(e => {\n                    // apply target data to each effect\n                    const fullProcEffect = Object.assign({}, e);\n                    fullProcEffect['target area'] = targetArea;\n                    fullProcEffect['target type'] = targetType;\n                    return fullProcEffect;\n                });\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given item thumbnail filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents the thumbnail image for a given item.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getItemImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/item/${fileName || ''}`;\n    }\n\n    var index$4 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForItem: getEffectsForItem,\n        getItemImageUrl: getItemImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given leader skill.\n     * @param skill Leader skill to get the effects of.\n     * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForLeaderSkill(skill) {\n        return skill && Array.isArray(skill.effects) ? skill.effects : [];\n    }\n\n    var index$5 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForLeaderSkill: getEffectsForLeaderSkill\n    });\n\n    /**\n     * @description Generate the file names for each of the image type for a given unit ID.\n     * @param id Unit ID to use to generate the file names.\n     * @param suffix Optional parameter that's useful for things like alternate art.\n     * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n     */\n    function getUnitImageFileNames(id, suffix = '') {\n        const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n        return {\n            spritesheet: `unit_anime_${fileNameSuffix}`,\n            battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n            guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n            fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n        };\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given unit filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents an image for a given unit.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getUnitImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n    }\n\n    var index$6 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getUnitImageFileNames: getUnitImageFileNames,\n        getUnitImageUrl: getUnitImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given SP Enhancement Entry.\n     * @param entry SP Enhancement Entry to get the effects of.\n     * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n     */\n    function getEffectsForSpEnhancement(entry) {\n        const result = [];\n        if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n            const effectWrappers = entry.skill.effects;\n            effectWrappers.forEach(effectWrapper => {\n                Object.keys(effectWrapper).forEach(spType => {\n                    const originalEffect = effectWrapper[spType];\n                    const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                    result.push(unwrappedEffect);\n                });\n            });\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the associated category name with a given category ID.\n     * @param categoryId Category ID to get the name of.\n     * @returns Name of the given category ID or the string 'Unknown'.\n     */\n    function getSpCategoryName(categoryId) {\n        let result;\n        const numericalCategoryId = +categoryId;\n        switch (numericalCategoryId) {\n            case 1:\n                result = SpCategoryName['Parameter Boost'];\n                break;\n            case 2:\n                result = SpCategoryName.Spark;\n                break;\n            case 3:\n                result = SpCategoryName['Critical Hits'];\n                break;\n            case 4:\n                result = SpCategoryName['Attack Boost'];\n                break;\n            case 5:\n                result = SpCategoryName['BB Gauge'];\n                break;\n            case 6:\n                result = SpCategoryName['HP Recovery'];\n                break;\n            case 7:\n                result = SpCategoryName.Drops;\n                break;\n            case 8:\n                result = SpCategoryName['Ailment Resistance'];\n                break;\n            case 9:\n                result = SpCategoryName['Ailment Infliction'];\n                break;\n            case 10:\n                result = SpCategoryName['Damage Reduction'];\n                break;\n            case 11:\n                result = SpCategoryName.Special;\n                break;\n            default:\n                result = SpCategoryName.Unknown;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n\n    /**\n     * @description Get the corresponding character code for a given index.\n     * It expects an index between 0 and 61 inclusive; will return an empty string if\n     * the given value is outside of the range.\n     * @param index Index of an SP entry in a given skills array.\n     * @returns Corresponding single alphanumeric character to the given index\n     * or an empty string if the index is invalid.\n     */\n    function spIndexToCode(index) {\n        let result = '';\n        let correspondingCharacterCode = -1;\n        if (Number.isInteger(index)) {\n            if (index >= 0 && index <= 25) { // A-Z\n                correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (index >= 26 && index <= 51) { // a-z\n                correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n            }\n            else if (index >= 52 && index <= 61) { // 0-9\n                correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n            }\n        }\n        if (correspondingCharacterCode !== -1) {\n            result = String.fromCharCode(correspondingCharacterCode);\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the corresponding index for a given character code.\n     * It expects an alphanumeric character and will return -1 otherwise.\n     * @param code Character code an SP entry in a given skills array.\n     * @returns Corresponding index to the given character or -1 if the\n     * character is invalid.\n     */\n    function spCodeToIndex(code) {\n        let result = -1;\n        let characterCodeOffset = -1;\n        if (!!code && typeof code === 'string' && code.length === 1) {\n            if (code >= 'A' && code <= 'Z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (code >= 'a' && code <= 'z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n            }\n            else if (code >= '0' && code <= '9') {\n                characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n            }\n        }\n        if (characterCodeOffset !== -1) {\n            result = code.charCodeAt(0) - characterCodeOffset;\n        }\n        return result;\n    }\n\n    /**\n     * @description Extract the ID of a string in the format of `number@actualId`. If there\n     * is no value after the @ character or if no @ character is present, the original ID is returned.\n     * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n     * @param id Original SP Enhancement Entry ID.\n     * @returns The ID of a string in the format of `number@actualId`, or the original input if\n     * there is no @ character or no value after the @ character.\n     */\n    function getSpEntryId(id) {\n        return (typeof id === 'string' && id.split('@')[1]) || id;\n    }\n\n    /**\n     * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n     * @param id SP Enhancement entry ID.\n     * @param entries Collection of SP Enhancement entries to search in.\n     * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n     */\n    function getSpEntryWithId(id, entries) {\n        const spId = getSpEntryId(id);\n        return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n     * @param entry SP Entry to get dependencies for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n     */\n    function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependencies = [];\n        if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n            const dependencyId = getSpEntryId(entry.dependency);\n            const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n            if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n                addedEntries.add(dependencyEntry);\n                const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n                dependencies = [dependencyEntry].concat(subDependencies);\n            }\n        }\n        return dependencies;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n     * @param entry SP Entry to get dependents for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n     */\n    function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependents = [];\n        if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n            const entryId = entry.id;\n            dependents = allEntries\n                .filter(s => {\n                return s.dependency &&\n                    s.dependency.includes(entryId) &&\n                    !addedEntries.has(s);\n            });\n            dependents.forEach(dependent => {\n                addedEntries.add(dependent);\n                const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n                dependents = dependents.concat(subDependents);\n            });\n        }\n        return dependents;\n    }\n\n    var index$7 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForSpEnhancement: getEffectsForSpEnhancement,\n        getSpCategoryName: getSpCategoryName,\n        spIndexToCode: spIndexToCode,\n        spCodeToIndex: spCodeToIndex,\n        getSpEntryId: getSpEntryId,\n        getSpEntryWithId: getSpEntryWithId,\n        getAllDependenciesForSpEntry: getAllDependenciesForSpEntry,\n        getAllEntriesThatDependOnSpEntry: getAllEntriesThatDependOnSpEntry\n    });\n\n    /* NOTE: this file is automatically generated; do not edit this file */\n    var version = '0.7.0';\n\n    exports.buffs = index$2;\n    exports.bursts = index;\n    exports.datamineTypes = datamineTypes;\n    exports.extraSkills = index$3;\n    exports.items = index$4;\n    exports.leaderSkills = index$5;\n    exports.spEnhancements = index$7;\n    exports.units = index$6;\n    exports.version = version;\n\n    return exports;\n\n}({}));\n\n","/**\n * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get level entry from.\n * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n */\nexport default function getLevelEntryForBurst(burst, level) {\n    const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n    let levelIndex;\n    if (level !== null && !isNaN(level)) {\n        // 1-indexed\n        levelIndex = (+level - 1);\n    }\n    else {\n        // default to last entry in burst\n        levelIndex = burstEffectsByLevel.length - 1;\n    }\n    return burstEffectsByLevel[levelIndex];\n}\n","import getLevelEntryForBurst from './getLevelEntryForBurst';\n/**\n * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get effects from.\n * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n */\nexport default function getEffectsForBurst(burst, level) {\n    const levelEntry = getLevelEntryForBurst(burst, level);\n    return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n}\n","/**\n * @description Get the proc/passive ID of a given object.\n * @param effect Object to get the effect ID from.\n * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectId(effect) {\n    let resultId = '';\n    if (effect) {\n        resultId = effect['proc id'] || effect['unknown proc id'] ||\n            effect['passive id'] || effect['unknown passive id'] || '';\n    }\n    return resultId;\n}\n","export var KNOWN_PROC_ID;\n(function (KNOWN_PROC_ID) {\n    KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n    KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n})(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\nexport var KNOWN_PASSIVE_ID;\n(function (KNOWN_PASSIVE_ID) {\n    KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n    KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n})(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\nexport var KNOWN_CONDITIONAL_ID;\n(function (KNOWN_CONDITIONAL_ID) {\n    KNOWN_CONDITIONAL_ID[\"Unknown\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n})(KNOWN_CONDITIONAL_ID || (KNOWN_CONDITIONAL_ID = {}));\n","export var ProcBuffType;\n(function (ProcBuffType) {\n    ProcBuffType[\"Attack\"] = \"Attack\";\n})(ProcBuffType || (ProcBuffType = {}));\n/* eslint-disable */\n/**\n * @ignore\n */\nexport const PASSIVE_METADATA = Object.freeze({\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Parameter Boost\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Elemental Parameter Boost\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Type-Based Parameter Boost\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"Status Negation\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Damage Reduction\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Gradual BB Gauge Boost\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"HC Efficacy\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"HP-Conditional Parameter Boost\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"HP-Conditional Drop Rate Boost\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"BC Fill on Enemy Defeat\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Damage Reduction (Chance)\"\n    },\n    \"15\": {\n        \"ID\": \"15\",\n        \"Name\": \"Heal on Enemy Defeat\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Heal on Battle Victory\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"HP Absorption\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Drop Rate Boost\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"Status Infliction\"\n    },\n    \"21\": {\n        \"ID\": \"21\",\n        \"Name\": \"Parameter Boost for First X Turns\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"BC Fill on Battle Victory\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Heal when Attacked (Chance)\"\n    },\n    \"25\": {\n        \"ID\": \"25\",\n        \"Name\": \"BC Fill when Hit (Chance)\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Damage Counter (Chance)\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Increased Target Chance\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Decreased Target Chance\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Defense Ignore (Chance)\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"BB Conditional Parameter Boost\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"BC Efficacy\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Heal over Time\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"Critical Damage Boost\"\n    },\n    \"35\": {\n        \"ID\": \"35\",\n        \"Name\": \"BC Fill when Normal Attacking\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Extra Action\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Hit Count Boost\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Parameter Conversion\"\n    },\n    \"41\": {\n        \"ID\": \"41\",\n        \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"Gender Parameter Boost\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Damage Reduction to 1\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Flat Parameter Boost\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"Critical Damage Negation\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"BC Fill on Spark\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"BC Cost Reduction\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"BB Gauge Consumption Reduction\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Elemental Damage Boost\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Conditional Effect based on HP Threshold\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Damage Reduction when Guarding\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BC Fill when Attacked when Guarding\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BC Fill on Guard\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Elemental Damage Reduction for first X Turns\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"BB Atk Boost\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"BC Fill on Critical\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Add buff to Brave Burst\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"OD Gauge Fill Rate Boost\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"Status Counter\"\n    },\n    \"72\": {\n        \"ID\": \"72\",\n        \"Name\": \"Turn End Effects Activate at Turn Start\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\"\n    },\n    \"74\": {\n        \"ID\": \"74\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Spark Vulnerability\"\n    },\n    \"77\": {\n        \"ID\": \"77\",\n        \"Name\": \"Spark Damage Reduction\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Conditional Effect after Damage Received Threshold\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"BC Fill after Damage Received Threshold\"\n    },\n    \"80\": {\n        \"ID\": \"80\",\n        \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n    },\n    \"81\": {\n        \"ID\": \"81\",\n        \"Name\": \"BC Fill after Damage Dealt Threshold\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"Conditional Effect after BC Received Threshold\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"Conditional Effect after HC Received Threshold\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"BC Fill after HC Received Threshold\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"Conditional Effect after Spark Threshold\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Conditional Effect on Guard\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Conditional Effect on Critical\"\n    },\n    \"90\": {\n        \"ID\": \"90\",\n        \"Name\": \"Status Infliction on Critical\"\n    },\n    \"91\": {\n        \"ID\": \"91\",\n        \"Name\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Negate Defense Ignore\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Added Elements\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Normal Attacks Hit All Foes\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Player EXP Boost\"\n    },\n    \"99\": {\n        \"ID\": \"99\",\n        \"Name\": \"\"\n    },\n    \"100\": {\n        \"ID\": \"100\",\n        \"Name\": \"Spark Critical\"\n    },\n    \"101\": {\n        \"ID\": \"101\",\n        \"Name\": \"Heal on Spark\"\n    },\n    \"102\": {\n        \"ID\": \"102\",\n        \"Name\": \"Added Elements\"\n    },\n    \"103\": {\n        \"ID\": \"103\",\n        \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n    },\n    \"104\": {\n        \"ID\": \"104\",\n        \"Name\": \"Spark Boost when HP Passes Threshold\"\n    },\n    \"105\": {\n        \"ID\": \"105\",\n        \"Name\": \"Turn-Based Parameter Boost\"\n    },\n    \"106\": {\n        \"ID\": \"106\",\n        \"Name\": \"Conditional Effect after Activating Overdrive\"\n    },\n    \"107\": {\n        \"ID\": \"107\",\n        \"Name\": \"Add Effect to Leader Skill\"\n    },\n    \"109\": {\n        \"ID\": \"109\",\n        \"Name\": \"BB Gauge Reduction (Chance)\"\n    },\n    \"110\": {\n        \"ID\": \"110\",\n        \"Name\": \"BC Efficacy Reduction (Chance)\"\n    },\n    \"111\": {\n        \"ID\": \"111\",\n        \"Name\": \"Increase Brave Burst Activation Rate\"\n    },\n    \"112\": {\n        \"ID\": \"112\",\n        \"Name\": \"ABP/CBP Boost\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Conditional Effect after HP Threshold\"\n    },\n    \"114\": {\n        \"ID\": \"114\",\n        \"Name\": \"Inflict Buff when Attacked\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n    },\n    \"128\": {\n        \"ID\": \"128\",\n        \"Name\": \"Damage Reduction from Normal Attacks\"\n    },\n    \"143\": {\n        \"ID\": \"143\",\n        \"Name\": \"Break Atk Parameter Limit\"\n    },\n    \"10008\": {\n        \"ID\": \"10008\",\n        \"Name\": \"Damage Reduction from Specific Sources\"\n    },\n    \"11004\": {\n        \"ID\": \"11004\",\n        \"Name\": \"Elemental Spark Damage Boost\"\n    },\n    \"11005\": {\n        \"ID\": \"11005\",\n        \"Name\": \"Elemental Critical Damage Boost\"\n    },\n    \"11006\": {\n        \"ID\": \"11006\",\n        \"Name\": \"Summoner EXP Boost\"\n    },\n    \"11009\": {\n        \"ID\": \"11009\",\n        \"Name\": \"Effect Duration Boost\"\n    },\n    \"66,1\": {\n        \"ID\": \"66,1\",\n        \"Name\": \"\"\n    }\n});\n/**\n * @ignore\n */\nexport const PROC_METADATA = Object.freeze({\n    \"0\": {\n        \"ID\": \"0\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Regular Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Burst Heal\",\n        \"Type\": \"\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Heal over Time\",\n        \"Type\": \"\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"BB Gauge Refill\",\n        \"Type\": \"\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"Drop Rate\",\n        \"Type\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Parameter Reduction\",\n        \"Type\": \"\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"Status Cleanse\",\n        \"Type\": \"\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"Status Infliction\",\n        \"Type\": \"\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"Revive (Guaranteed)\",\n        \"Type\": \"\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"Random Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Lifesteal Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"Status Negation\",\n        \"Type\": \"\"\n    },\n    \"18\": {\n        \"ID\": \"18\",\n        \"Name\": \"Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Gradual BB Gauge Boost\",\n        \"Type\": \"\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"BC Fill on Hit\",\n        \"Type\": \"\"\n    },\n    \"22\": {\n        \"ID\": \"22\",\n        \"Name\": \"Defense Ignore\",\n        \"Type\": \"\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Hit Count Boost\",\n        \"Type\": \"\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Fixed Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Multi-Element Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"Add Elements\",\n        \"Type\": \"\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Instant BB Gauge Fill\",\n        \"Type\": \"\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"Element Shift\",\n        \"Type\": \"\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Buff Removal (Chance)\",\n        \"Type\": \"\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"BB Gauge Reduction (Chance)\",\n        \"Type\": \"\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Leader Skill Lock (Chance)\",\n        \"Type\": \"\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Summon Unit\",\n        \"Type\": \"\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"Status Cure\",\n        \"Type\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Status Infliction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Instant OD Fill\",\n        \"Type\": \"\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Damage over Time (Additional Damage)\",\n        \"Type\": \"\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"BB Atk Boost\",\n        \"Type\": \"\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Non-Lethal Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"HP Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"Piercing Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"Retire\",\n        \"Type\": \"\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Damage Counter\",\n        \"Type\": \"\"\n    },\n    \"51\": {\n        \"ID\": \"51\",\n        \"Name\": \"Parameter Reduction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"BC Efficacy\",\n        \"Type\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Status Counter\",\n        \"Type\": \"\"\n    },\n    \"54\": {\n        \"ID\": \"54\",\n        \"Name\": \"Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Elemental Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"56\": {\n        \"ID\": \"56\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"57\": {\n        \"ID\": \"57\",\n        \"Name\": \"BC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Spark Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BB Atk Reduction\",\n        \"Type\": \"\"\n    },\n    \"60\": {\n        \"ID\": \"60\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BB-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Barrier\",\n        \"Type\": \"\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Selective Buff Wipe\",\n        \"Type\": \"\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"Consecutive Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\",\n        \"Type\": \"\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Revive (Chance)\",\n        \"Type\": \"\"\n    },\n    \"67\": {\n        \"ID\": \"67\",\n        \"Name\": \"BC Fill on Spark\",\n        \"Type\": \"\"\n    },\n    \"68\": {\n        \"ID\": \"68\",\n        \"Name\": \"Damage Reduction when Guarding\",\n        \"Type\": \"\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"BC Fill on Guard\",\n        \"Type\": \"\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"BB Gauge Fill Rate Debuff\",\n        \"Type\": \"\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\",\n        \"Type\": \"\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Element Squad-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"76\": {\n        \"ID\": \"76\",\n        \"Name\": \"Extra Action\",\n        \"Type\": \"\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Self Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"Player EXP Boost\",\n        \"Type\": \"\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"83\": {\n        \"ID\": \"83\",\n        \"Name\": \"Spark Critical\",\n        \"Type\": \"\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"OD Gauge Fill Rate\",\n        \"Type\": \"\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"Heal when Attacked\",\n        \"Type\": \"\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"HP Absorption\",\n        \"Type\": \"\"\n    },\n    \"87\": {\n        \"ID\": \"87\",\n        \"Name\": \"Heal on Spark\",\n        \"Type\": \"\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Self Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Self Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Self Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"94\": {\n        \"ID\": \"94\",\n        \"Name\": \"Normal Attacks Hit All Foes\",\n        \"Type\": \"\"\n    },\n    \"95\": {\n        \"ID\": \"95\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n        \"Type\": \"\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Element Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Gradual OD Fill\",\n        \"Type\": \"\"\n    },\n    \"119\": {\n        \"ID\": \"119\",\n        \"Name\": \"Gradual BC Drain\",\n        \"Type\": \"\"\n    },\n    \"123\": {\n        \"ID\": \"123\",\n        \"Name\": \"OD Gauge Reduction\",\n        \"Type\": \"\"\n    },\n    \"126\": {\n        \"ID\": \"126\",\n        \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n        \"Type\": \"\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Lock On\",\n        \"Type\": \"\"\n    },\n    \"130\": {\n        \"ID\": \"130\",\n        \"Name\": \"Parameter Reduction Counter\",\n        \"Type\": \"\"\n    },\n    \"131\": {\n        \"ID\": \"131\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"132\": {\n        \"ID\": \"132\",\n        \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"901\": {\n        \"ID\": \"901\",\n        \"Name\": \"Raid Heal (on Map)\",\n        \"Type\": \"\"\n    },\n    \"902\": {\n        \"ID\": \"902\",\n        \"Name\": \"Raid Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"903\": {\n        \"ID\": \"903\",\n        \"Name\": \"Raid Boss Reveal\",\n        \"Type\": \"\"\n    },\n    \"905\": {\n        \"ID\": \"905\",\n        \"Name\": \"Raid Teleport\",\n        \"Type\": \"\"\n    },\n    \"906\": {\n        \"ID\": \"906\",\n        \"Name\": \"Raid Flee\",\n        \"Type\": \"\"\n    },\n    \"907\": {\n        \"ID\": \"907\",\n        \"Name\": \"Raid Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"908\": {\n        \"ID\": \"908\",\n        \"Name\": \"Raid Item Drop Rate Boost\",\n        \"Type\": \"\"\n    },\n    \"10000\": {\n        \"ID\": \"10000\",\n        \"Name\": \"Taunt\",\n        \"Type\": \"\"\n    },\n    \"10001\": {\n        \"ID\": \"10001\",\n        \"Name\": \"Stealth\",\n        \"Type\": \"\"\n    },\n    \"10002\": {\n        \"ID\": \"10002\",\n        \"Name\": \"Shield (old)\",\n        \"Type\": \"\"\n    },\n    \"10003\": {\n        \"ID\": \"10003\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"10004\": {\n        \"ID\": \"10004\",\n        \"Name\": \"Damage Immunity\",\n        \"Type\": \"\"\n    },\n    \"10005\": {\n        \"ID\": \"10005\",\n        \"Name\": \"Turn Skip (short duration)\",\n        \"Type\": \"\"\n    },\n    \"10006\": {\n        \"ID\": \"10006\",\n        \"Name\": \"Turn Skip (long duration)\",\n        \"Type\": \"\"\n    },\n    \"10007\": {\n        \"ID\": \"10007\",\n        \"Name\": \"Evasion\",\n        \"Type\": \"\"\n    },\n    \"10009\": {\n        \"ID\": \"10009\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"10012\": {\n        \"ID\": \"10012\",\n        \"Name\": \"OD Drain\",\n        \"Type\": \"\"\n    },\n    \"10015\": {\n        \"ID\": \"10015\",\n        \"Name\": \"Elemental Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"10016\": {\n        \"ID\": \"10016\",\n        \"Name\": \"Element Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"10017\": {\n        \"ID\": \"10017\",\n        \"Name\": \"Elemental Shield\",\n        \"Type\": \"\"\n    },\n    \"10018\": {\n        \"ID\": \"10018\",\n        \"Name\": \"Max HP Reduction\",\n        \"Type\": \"\"\n    },\n    \"10019\": {\n        \"ID\": \"10019\",\n        \"Name\": \"Effect Purge\",\n        \"Type\": \"\"\n    },\n    \"10020\": {\n        \"ID\": \"10020\",\n        \"Name\": \"Piercing Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"10021\": {\n        \"ID\": \"10021\",\n        \"Name\": \"Active Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10022\": {\n        \"ID\": \"10022\",\n        \"Name\": \"Passive Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10023\": {\n        \"ID\": \"10023\",\n        \"Name\": \"HC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"10025\": {\n        \"ID\": \"10025\",\n        \"Name\": \"KO Resistance Negation\",\n        \"Type\": \"\"\n    },\n    \"10026\": {\n        \"ID\": \"10026\",\n        \"Name\": \"Doom\",\n        \"Type\": \"\"\n    },\n    \"11000\": {\n        \"ID\": \"11000\",\n        \"Name\": \"Negative HP-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"11001\": {\n        \"ID\": \"11001\",\n        \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n        \"Type\": \"\"\n    },\n    \"11002\": {\n        \"ID\": \"11002\",\n        \"Name\": \"HP Limit Break, Convert to HP\",\n        \"Type\": \"\"\n    },\n    \"11003\": {\n        \"ID\": \"11003\",\n        \"Name\": \"Effect Negation\",\n        \"Type\": \"\"\n    },\n    \"70001\": {\n        \"ID\": \"70001\",\n        \"Name\": \"Mana Bubble Shield\",\n        \"Type\": \"\"\n    },\n    \"70002\": {\n        \"ID\": \"70002\",\n        \"Name\": \"Recast\",\n        \"Type\": \"\"\n    },\n    \"2-5\": {\n        \"ID\": \"2-5\",\n        \"Name\": \"Burst Heal and DEF/REC Boost\",\n        \"Type\": \"\"\n    }\n});\n","import { PROC_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given proc ID.\n * @param id Proc ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForProc(id, metadata = PROC_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\nimport { ProcBuffType } from './effect-metadata';\n/**\n * @description Determine if a given proc ID's type is an attack.\n * @param id Proc ID to check.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n */\nexport default function isAttackingProcId(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n}\n","import getEffectId from '../buffs/getEffectId';\nimport { KNOWN_PROC_ID } from '../buffs/constants';\nimport isAttackingProcId from '../buffs/isAttackingProcId';\n/**\n * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n * @param damageFrames Damage frames that each have their own proc ID.\n * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Damage frames entry whose frames are based on the input damage frames.\n */\nexport default function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n    // relevant frames are all effects for healing or attacking\n    const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n    const relevantFrames = inputFrames.filter(frame => {\n        const procId = getEffectId(frame);\n        return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n    });\n    const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n        const keepFirstFrame = index === 0;\n        const numFrames = frameEntry['frame times'].length;\n        const damageDistribution = frameEntry['hit dmg% distribution'];\n        const frameTimes = frameEntry['frame times'];\n        for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n            acc.push({\n                damage: damageDistribution[frameIndex],\n                time: frameTimes[frameIndex],\n            });\n        }\n        return acc;\n    }, []);\n    const resultDamageFramesEntry = {\n        'effect delay time(ms)/frame': effectDelay,\n        'frame times': [],\n        'hit dmg% distribution': [],\n        'hit dmg% distribution (total)': 0,\n        hits: 0,\n    };\n    unifiedFrames.sort((a, b) => a.time - b.time)\n        .forEach(({ time, damage }) => {\n        resultDamageFramesEntry['frame times'].push(time);\n        resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n        resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n    });\n    resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n    return resultDamageFramesEntry;\n}\n","import { PASSIVE_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given passive ID.\n * @param id Passive ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\n/**\n * @description Get the associated name for a given proc ID.\n * @param id Proc ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Name of the proc ID if it exists, empty string otherwise.\n */\nexport default function getNameForProc(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","import getMetadataForPassive from './getMetadataForPassive';\n/**\n * @description Get the associated name for a given passive ID.\n * @param id Passive ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Name of the passive ID if it exists, empty string otherwise.\n */\nexport default function getNameForPassive(id, metadata) {\n    const metadataEntry = getMetadataForPassive(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","/**\n * @description Determine if a given effect object is a proc effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a proc effect based on its properties.\n */\nexport default function isProcEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n}\n","/**\n * @description Determine if a given effect object is a passive effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a passive effect based on its properties.\n */\nexport default function isPassiveEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n}\n","export var Ailment;\n(function (Ailment) {\n    Ailment[\"Poison\"] = \"poison\";\n    Ailment[\"Weak\"] = \"weak\";\n    Ailment[\"Sick\"] = \"sick\";\n    Ailment[\"Injury\"] = \"injury\";\n    Ailment[\"Curse\"] = \"curse\";\n    Ailment[\"Paralysis\"] = \"paralysis\";\n    Ailment[\"AttackReduction\"] = \"atk down\";\n    Ailment[\"DefenseReduction\"] = \"def down\";\n    Ailment[\"RecoveryReduction\"] = \"rec down\";\n    Ailment[\"Unknown\"] = \"unknown\";\n})(Ailment || (Ailment = {}));\nexport var ArenaCondition;\n(function (ArenaCondition) {\n    ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n    ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n    ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n    ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n    ArenaCondition[\"hp_min\"] = \"hp_min\";\n    ArenaCondition[\"hp_max\"] = \"hp_max\";\n    ArenaCondition[\"atk_max\"] = \"atk_max\";\n    ArenaCondition[\"random\"] = \"random\";\n})(ArenaCondition || (ArenaCondition = {}));\nexport var MoveType;\n(function (MoveType) {\n    MoveType[\"Moving\"] = \"1\";\n    MoveType[\"Teleporting\"] = \"2\";\n    MoveType[\"NonMoving\"] = \"3\";\n})(MoveType || (MoveType = {}));\nexport var TargetArea;\n(function (TargetArea) {\n    TargetArea[\"Aoe\"] = \"aoe\";\n    TargetArea[\"Single\"] = \"single\";\n    TargetArea[\"Random\"] = \"random\";\n})(TargetArea || (TargetArea = {}));\nexport var TargetAreaShorthand;\n(function (TargetAreaShorthand) {\n    TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n    TargetAreaShorthand[\"Single\"] = \"ST\";\n    TargetAreaShorthand[\"Random\"] = \"RT\";\n})(TargetAreaShorthand || (TargetAreaShorthand = {}));\nexport var TargetType;\n(function (TargetType) {\n    TargetType[\"Self\"] = \"self\";\n    TargetType[\"Party\"] = \"party\";\n    TargetType[\"Enemy\"] = \"enemy\";\n})(TargetType || (TargetType = {}));\nexport var SpPassiveType;\n(function (SpPassiveType) {\n    SpPassiveType[\"AddPassive\"] = \"passive\";\n    SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n    SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n    SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n    SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n})(SpPassiveType || (SpPassiveType = {}));\nexport var SphereTypeName;\n(function (SphereTypeName) {\n    SphereTypeName[\"None\"] = \"None\";\n    SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n    SphereTypeName[\"Critical\"] = \"Critical\";\n    SphereTypeName[\"Drop\"] = \"Drop\";\n    SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n    SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n    SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n    SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n    SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n    SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n    SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n    SphereTypeName[\"Spark\"] = \"Spark\";\n    SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n    SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n    SphereTypeName[\"Special\"] = \"Special\";\n})(SphereTypeName || (SphereTypeName = {}));\nexport var SphereTypeId;\n(function (SphereTypeId) {\n    SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n    SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n    SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n    SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n    SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n    SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n    SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n    SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n    SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n    SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n    SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n    SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n    SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n    SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n    SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n})(SphereTypeId || (SphereTypeId = {}));\nexport var SpCategoryName;\n(function (SpCategoryName) {\n    SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n    SpCategoryName[\"Spark\"] = \"Spark\";\n    SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n    SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n    SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n    SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n    SpCategoryName[\"Drops\"] = \"Drops\";\n    SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n    SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n    SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n    SpCategoryName[\"Special\"] = \"Special\";\n    SpCategoryName[\"Unknown\"] = \"Unknown\";\n})(SpCategoryName || (SpCategoryName = {}));\nexport var SpCategoryId;\n(function (SpCategoryId) {\n    SpCategoryId[\"Parameter Boost\"] = \"1\";\n    SpCategoryId[\"Spark\"] = \"2\";\n    SpCategoryId[\"Critical Hits\"] = \"3\";\n    SpCategoryId[\"Attack Boost\"] = \"4\";\n    SpCategoryId[\"BB Gauge\"] = \"5\";\n    SpCategoryId[\"HP Recovery\"] = \"6\";\n    SpCategoryId[\"Drops\"] = \"7\";\n    SpCategoryId[\"Ailment Resistance\"] = \"8\";\n    SpCategoryId[\"Ailment Infliction\"] = \"9\";\n    SpCategoryId[\"Damage Reduction\"] = \"10\";\n    SpCategoryId[\"Special\"] = \"11\";\n})(SpCategoryId || (SpCategoryId = {}));\nexport var UnitAnimationKey;\n(function (UnitAnimationKey) {\n    UnitAnimationKey[\"Attack\"] = \"attack\";\n    UnitAnimationKey[\"Idle\"] = \"idle\";\n    UnitAnimationKey[\"Move\"] = \"move\";\n})(UnitAnimationKey || (UnitAnimationKey = {}));\nexport var UnitElement;\n(function (UnitElement) {\n    UnitElement[\"Fire\"] = \"fire\";\n    UnitElement[\"Water\"] = \"water\";\n    UnitElement[\"Earth\"] = \"earth\";\n    UnitElement[\"Thunder\"] = \"thunder\";\n    UnitElement[\"Light\"] = \"light\";\n    UnitElement[\"Dark\"] = \"dark\";\n})(UnitElement || (UnitElement = {}));\nexport var UnitGender;\n(function (UnitGender) {\n    UnitGender[\"Male\"] = \"male\";\n    UnitGender[\"Female\"] = \"female\";\n    UnitGender[\"Other\"] = \"other\";\n})(UnitGender || (UnitGender = {}));\nexport var UnitGettingType;\n(function (UnitGettingType) {\n    UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n    UnitGettingType[\"Farmable\"] = \"farmable\";\n    UnitGettingType[\"RareSummon\"] = \"rare summon\";\n    UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n})(UnitGettingType || (UnitGettingType = {}));\nexport var UnitKind;\n(function (UnitKind) {\n    UnitKind[\"Normal\"] = \"normal\";\n    UnitKind[\"Evolution\"] = \"evo\";\n    UnitKind[\"Enhancing\"] = \"enhancing\";\n    UnitKind[\"Sale\"] = \"sale\";\n})(UnitKind || (UnitKind = {}));\nexport var UnitType;\n(function (UnitType) {\n    UnitType[\"Lord\"] = \"lord\";\n    UnitType[\"Anima\"] = \"anima\";\n    UnitType[\"Breaker\"] = \"breaker\";\n    UnitType[\"Guardian\"] = \"guardian\";\n    UnitType[\"Oracle\"] = \"oracle\";\n    UnitType[\"Rex\"] = \"rex\";\n})(UnitType || (UnitType = {}));\nexport var ItemType;\n(function (ItemType) {\n    ItemType[\"Consumable\"] = \"consumable\";\n    ItemType[\"Material\"] = \"material\";\n    ItemType[\"Sphere\"] = \"sphere\";\n    ItemType[\"EvolutionMaterial\"] = \"evomat\";\n    ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n    ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n})(ItemType || (ItemType = {}));\nexport var MimicUnitIds;\n(function (MimicUnitIds) {\n    MimicUnitIds[\"Mimic\"] = \"60142\";\n    MimicUnitIds[\"BatMimic\"] = \"60143\";\n    MimicUnitIds[\"DragonMimic\"] = \"60144\";\n    MimicUnitIds[\"MetalMimic\"] = \"60224\";\n})(MimicUnitIds || (MimicUnitIds = {}));\n/**\n * @description Known values for the monster groups used in {@link IMimicInfo}.\n */\nexport const MimicMonsterGroupMapping = {\n    '1000': MimicUnitIds.Mimic,\n    '1100': MimicUnitIds.BatMimic,\n    '1101': MimicUnitIds.BatMimic,\n    '1200': MimicUnitIds.DragonMimic,\n    '1300': MimicUnitIds.MetalMimic,\n};\n","import { TargetArea, } from '../datamine-types';\n/**\n * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n */\nexport default function combineEffectsAndDamageFrames(effects, damageFrames) {\n    let combinedEntries = [];\n    if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n        combinedEntries = effects.map((effect, i) => {\n            const correspondingFrameEntry = damageFrames[i];\n            return {\n                delay: effect['effect delay time(ms)/frame'],\n                effect,\n                frames: correspondingFrameEntry,\n                id: `${effect['proc id'] || effect['unknown proc id']}`,\n                targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                targetType: effect['target type'],\n            };\n        });\n    }\n    return combinedEntries;\n}\n","import getEffectId from './getEffectId';\nimport isPassiveEffect from './isPassiveEffect';\nimport getNameForPassive from './getNameForPassive';\nimport isProcEffect from './isProcEffect';\nimport getNameForProc from './getNameForProc';\n/**\n * @description Get the name of a given object.\n * @param effect Object to get the name from.\n * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n * @returns Name of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectName(effect, metadata = {}) {\n    let resultName = '';\n    const effectId = getEffectId(effect);\n    if (isPassiveEffect(effect)) {\n        resultName = getNameForPassive(effectId, metadata && metadata.passive);\n    }\n    else if (isProcEffect(effect)) {\n        resultName = getNameForProc(effectId, metadata && metadata.proc);\n    }\n    return resultName;\n}\n","/**\n * @description Provides info at a glance regarding a buff's source and how it stacks.\n */\nexport var BuffStackType;\n(function (BuffStackType) {\n    /**\n     * @description The buff is activated via some skill and lasts for a number of turns.\n     * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n     * from different levels. Two possible levels of sources are:\n     * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n     * 2. Ultimate Brave Burst or Dual Brave Burst\n     */\n    BuffStackType[\"Active\"] = \"active\";\n    /**\n     * @description The buff is always active provided that the source is not nullified.\n     * Most passive buffs can stack with themselves.\n     */\n    BuffStackType[\"Passive\"] = \"passive\";\n    /**\n     * @description The buff is applied for a number of turns once a certain condition is met.\n     * Buffs of the same type are not able to stack.\n     */\n    BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n    /**\n     * @description Only one instance of the buff can be active at a time and can last indefinitely.\n     * A couple examples of this are Barrier and Max HP Boost.\n     */\n    BuffStackType[\"Singleton\"] = \"singleton\";\n    /**\n     * @description The buff's effects immediately apply to the target(s). This differs from singleton\n     * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n     * in the HP bar filling by the sum of those burst heals).\n     */\n    BuffStackType[\"Burst\"] = \"burst\";\n    /**\n     * @description A specific subset of `Burst` type buffs that deal damage to the target.\n     */\n    BuffStackType[\"Attack\"] = \"attack\";\n    /**\n     * @description Only for buffs that cannot be processed by the library yet.\n     */\n    BuffStackType[\"Unknown\"] = \"unknown\";\n})(BuffStackType || (BuffStackType = {}));\nexport var BuffSource;\n(function (BuffSource) {\n    BuffSource[\"BraveBurst\"] = \"bb\";\n    BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n    BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n    BuffSource[\"DualBraveBurst\"] = \"dbb\";\n    BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n    BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n    BuffSource[\"SpEnhancement\"] = \"sp\";\n    BuffSource[\"Item\"] = \"item\";\n    BuffSource[\"LeaderSkill\"] = \"ls\";\n    BuffSource[\"ExtraSkill\"] = \"es\";\n    /**\n     * @description Buffs that result of having a number of OE+ units in the squad.\n     */\n    BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n    /**\n     * @description Buffs based on a units type. See {@link UnitType}.\n     */\n    BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n    /**\n     * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n     * as well as ambient turn reductions present in some late-game quests.\n     */\n    BuffSource[\"Quest\"] = \"quest\";\n})(BuffSource || (BuffSource = {}));\n/**\n * @description Extra element values that can be used in addition to {@link UnitElement}.\n */\nexport var BuffConditionElement;\n(function (BuffConditionElement) {\n    BuffConditionElement[\"Unknown\"] = \"unknown\";\n    BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n    BuffConditionElement[\"All\"] = \"all\";\n})(BuffConditionElement || (BuffConditionElement = {}));\n/**\n * @description Stats on a unit that a buff can affect.\n */\nexport var UnitStat;\n(function (UnitStat) {\n    UnitStat[\"hp\"] = \"hp\";\n    UnitStat[\"atk\"] = \"atk\";\n    UnitStat[\"def\"] = \"def\";\n    UnitStat[\"rec\"] = \"rec\";\n    UnitStat[\"crit\"] = \"crit\";\n    UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n    UnitStat[\"bbGauge\"] = \"bbGauge\";\n    UnitStat[\"odGauge\"] = \"odGauge\";\n    UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n    UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n    UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n    UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n    UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n    UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n    UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n    UnitStat[\"bcCostReduction\"] = \"bcCostReduction\";\n    UnitStat[\"bbGaugeConsumptionReduction\"] = \"bbGaugeConsumptionReduction\";\n    UnitStat[\"ailmentAttackBoost\"] = \"ailmentAttackBoost\";\n    UnitStat[\"poisonResist\"] = \"poisonResist\";\n    UnitStat[\"weakResist\"] = \"weakResist\";\n    UnitStat[\"sickResist\"] = \"sickResist\";\n    UnitStat[\"injuryResist\"] = \"injuryResist\";\n    UnitStat[\"curseResist\"] = \"curseResist\";\n    UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n    UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n    UnitStat[\"weakInflict\"] = \"weakInflict\";\n    UnitStat[\"sickInflict\"] = \"sickInflict\";\n    UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n    UnitStat[\"curseInflict\"] = \"curseInflict\";\n    UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n    UnitStat[\"poisonCounter\"] = \"poisonCounter\";\n    UnitStat[\"weakCounter\"] = \"weakCounter\";\n    UnitStat[\"sickCounter\"] = \"sickCounter\";\n    UnitStat[\"injuryCounter\"] = \"injuryCounter\";\n    UnitStat[\"curseCounter\"] = \"curseCounter\";\n    UnitStat[\"paralysisCounter\"] = \"paralysisCounter\";\n    UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n    UnitStat[\"defDownResist\"] = \"defDownResist\";\n    UnitStat[\"recDownResist\"] = \"recDownResist\";\n    UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n    UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n    UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n    UnitStat[\"atkDownCounter\"] = \"atkDownCounter\";\n    UnitStat[\"defDownCounter\"] = \"defDownCounter\";\n    UnitStat[\"recDownCounter\"] = \"recDownCounter\";\n    UnitStat[\"mitigation\"] = \"mitigation\";\n    UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n    UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n    UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n    UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n    UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n    UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n    UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n    UnitStat[\"guardMitigation\"] = \"guardMitigation\";\n    UnitStat[\"barrier\"] = \"barrier\";\n    UnitStat[\"fireElementalDamage\"] = \"fireElementalDamage\";\n    UnitStat[\"waterElementalDamage\"] = \"waterElementalDamage\";\n    UnitStat[\"earthElementalDamage\"] = \"earthElementalDamage\";\n    UnitStat[\"thunderElementalDamage\"] = \"thunderElementalDamage\";\n    UnitStat[\"lightElementalDamage\"] = \"lightElementalDamage\";\n    UnitStat[\"darkElementalDamage\"] = \"darkElementalDamage\";\n    UnitStat[\"elementalWeaknessDamageMitigation\"] = \"elementalWeaknessDamageMitigation\";\n    UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n    UnitStat[\"koResistance\"] = \"koResistance\";\n    UnitStat[\"revive\"] = \"revive\";\n    UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n    UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n    UnitStat[\"criticalDamageMitigation\"] = \"criticalDamageMitigation\";\n    UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n    UnitStat[\"bbAtk\"] = \"bbAtk\";\n    UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n    UnitStat[\"damageReflect\"] = \"damageReflect\";\n    UnitStat[\"targetingModification\"] = \"targetingModification\";\n    UnitStat[\"elementModification\"] = \"elementModification\";\n    UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n    UnitStat[\"extraAction\"] = \"extraAction\";\n    UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n})(UnitStat || (UnitStat = {}));\nexport var IconId;\n(function (IconId) {\n    IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n    IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n    IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n    IconId[\"CONDITIONALBUFF_HPTHRESH\"] = \"CONDITIONALBUFF_HPTHRESH\";\n    IconId[\"BUFF_ADDTO_BB\"] = \"BUFF_ADDTO_BB\";\n    IconId[\"BUFF_ADDTO_SBB\"] = \"BUFF_ADDTO_SBB\";\n    IconId[\"BUFF_ADDTO_UBB\"] = \"BUFF_ADDTO_UBB\";\n    IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n    IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n    IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n    IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n    IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n    IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n    IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n    IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n    IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n    IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n    IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n    IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n    IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n    IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n    IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n    IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n    IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n    IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n    IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n    IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n    IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n    IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n    IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n    IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n    IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n    IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n    IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n    IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n    IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n    IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n    IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n    IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n    IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n    IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n    IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n    IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n    IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n    IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n    IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n    IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n    IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n    IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n    IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n    IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n    IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n    IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n    IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n    IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n    IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n    IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n    IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n    IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n    IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n    IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n    IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n    IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n    IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n    IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n    IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n    IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n    IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n    IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n    IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n    IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n    IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n    IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n    IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n    IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n    IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n    IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n    IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n    IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n    IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n    IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n    IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n    IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n    IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n    IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n    IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n    IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n    IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n    IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n    IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n    IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n    IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n    IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n    IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n    IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n    IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n    IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n    IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n    IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n    IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n    IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n    IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n    IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n    IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n    IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n    IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n    IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n    IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n    IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n    IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n    IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n    IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n    IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n    IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n    IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n    IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n    IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n    IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n    IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n    IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n    IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n    IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n    IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n    IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n    IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n    IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n    IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n    IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n    IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n    IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n    IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n    IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n    IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n    IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n    IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n    IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n    IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n    IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n    IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n    IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n    IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n    IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n    IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n    IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n    IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n    IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n    IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n    IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n    IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n    IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n    IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n    IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n    IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n    IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n    IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n    IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n    IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n    IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n    IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n    IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n    IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n    IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n    IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n    IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n    IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n    IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n    IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n    IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n    IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n    IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n    IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n    IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n    IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n    IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n    IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n    IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n    IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n    IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n    IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n    IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n    IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n    IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n    IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n    IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n    IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n    IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n    IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n    IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n    IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n    IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n    IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n    IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n    IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n    IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n    IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n    IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n    IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n    IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n    IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n    IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n    IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n    IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n    IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n    IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n    IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n    IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n    IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n    IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n    IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n    IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n    IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n    IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n    IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n    IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n    IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n    IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n    IconId[\"BUFF_HPSCALEDATKUP\"] = \"BUFF_HPSCALEDATKUP\";\n    IconId[\"BUFF_HPSCALEDATKDOWN\"] = \"BUFF_HPSCALEDATKDOWN\";\n    IconId[\"BUFF_HPSCALEDDEFUP\"] = \"BUFF_HPSCALEDDEFUP\";\n    IconId[\"BUFF_HPSCALEDDEFDOWN\"] = \"BUFF_HPSCALEDDEFDOWN\";\n    IconId[\"BUFF_HPSCALEDRECUP\"] = \"BUFF_HPSCALEDRECUP\";\n    IconId[\"BUFF_HPSCALEDRECDOWN\"] = \"BUFF_HPSCALEDRECDOWN\";\n    IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n    IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n    IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n    IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n    IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n    IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n    IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n    IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n    IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n    IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n    IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n    IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n    IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n    IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n    IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n    IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n    IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n    IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n    IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n    IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n    IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n    IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n    IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n    IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n    IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n    IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n    IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n    IconId[\"BUFF_POISONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n    IconId[\"BUFF_POISIONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n    IconId[\"BUFF_WEAKCOUNTER\"] = \"BUFF_WEAKCOUNTER\";\n    IconId[\"BUFF_SICKCOUNTER\"] = \"BUFF_SICKCOUNTER\";\n    IconId[\"BUFF_INJCONTER\"] = \"BUFF_INJCONTER\";\n    IconId[\"BUFF_CURSECOUNTER\"] = \"BUFF_CURSECOUNTER\";\n    IconId[\"BUFF_PARALYCOUNTER\"] = \"BUFF_PARALYCOUNTER\";\n    IconId[\"BUFF_PROB_ATKREDUC\"] = \"BUFF_PROB_ATKREDUC\";\n    IconId[\"BUFF_PROB_DEFREDUC\"] = \"BUFF_PROB_DEFREDUC\";\n    IconId[\"BUFF_PROB_RECREDUC\"] = \"BUFF_PROB_RECREDUC\";\n    IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n    IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n    // elemental damage reduction buffs\n    IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n    IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n    IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n    IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n    IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n    IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n    IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n    // elemental weakness buffs\n    IconId[\"BUFF_FIREDMGUP\"] = \"BUFF_FIREDMGUP\";\n    IconId[\"BUFF_WATERDMGUP\"] = \"BUFF_WATERDMGUP\";\n    IconId[\"BUFF_WATERMDGUP\"] = \"BUFF_WATERDMGUP\";\n    IconId[\"BUFF_EARTHDMGUP\"] = \"BUFF_EARTHDMGUP\";\n    IconId[\"BUFF_THUNDERDMGUP\"] = \"BUFF_THUNDERDMGUP\";\n    IconId[\"BUFF_LIGHTDMGUP\"] = \"BUFF_LIGHTDMGUP\";\n    IconId[\"BUFF_DARKDMGUP\"] = \"BUFF_DARKDMGUP\";\n    IconId[\"BUFF_ELEMENTDMGUP\"] = \"BUFF_ELEMENTDMGUP\";\n    IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n    IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n    IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n    IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n    IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n    IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n    IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n    IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n    IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n    IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n    IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n    IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n    IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n    IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n    IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n    IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n    IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n    IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n    IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n    IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n    IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n    IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n    IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n    IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n    IconId[\"BUFF_KO\"] = \"BUFF_KO\";\n    IconId[\"BUFF_KOBLOCK\"] = \"BUFF_KOBLOCK\";\n    IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n    IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n    IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n    IconId[\"BUFF_CRTDOWN\"] = \"BUFF_CRTDOWN\";\n    IconId[\"BUFF_ELEMENTDOWN\"] = \"BUFF_ELEMENTDOWN\";\n    IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n    IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n    IconId[\"BUFF_SPARKDMGUP\"] = \"BUFF_SPARKDMGUP\";\n    IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n    IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n    IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n    IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n    IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n    IconId[\"BUFF_SPARKBBUP\"] = \"BUFF_SPARKBBUP\";\n    IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n    IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n    IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n    IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n    IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n    IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n    IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n    IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n    IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n    IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n    IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n    IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n    IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n    IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n    IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n    IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n    IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n    IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n    IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n    IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n    IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n    IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n    IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n    IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n    IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n    IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n    IconId[\"BUFF_BBATKUP\"] = \"BUFF_BBATKUP\";\n    IconId[\"BUFF_SBBATKUP\"] = \"BUFF_SBBATKUP\";\n    IconId[\"BUFF_UBBATKUP\"] = \"BUFF_UBBATKUP\";\n    IconId[\"BUFF_BBATKDOWN\"] = \"BUFF_BBATKDOWN\";\n    IconId[\"BUFF_SBBATKDOWN\"] = \"BUFF_SBBATKDOWN\";\n    IconId[\"BUFF_UBBATKDOWN\"] = \"BUFF_UBBATKDOWN\";\n    IconId[\"BUFF_BBCOST_REDUCTION\"] = \"BUFF_BBCOST_REDUCTION\";\n    IconId[\"BUFF_GUARDCUT\"] = \"BUFF_GUARDCUT\";\n    IconId[\"BUFF_GUARDBBUP\"] = \"BUFF_GUARDBBUP\";\n    IconId[\"BUFF_FIRESHIELD\"] = \"BUFF_FIRESHIELD\";\n    IconId[\"BUFF_WATERSHIELD\"] = \"BUFF_WATERSHIELD\";\n    IconId[\"BUFF_EARTHSHIELD\"] = \"BUFF_EARTHSHIELD\";\n    IconId[\"BUFF_THUNDERSHIELD\"] = \"BUFF_THUNDERSHIELD\";\n    IconId[\"BUFF_LIGHTSHIELD\"] = \"BUFF_LIGHTSHIELD\";\n    IconId[\"BUFF_DARKSHIELD\"] = \"BUFF_DARKSHIELD\";\n    IconId[\"BUFF_ELEMENTSHIELD\"] = \"BUFF_ELEMENTSHIELD\";\n    IconId[\"BUFF_AILDMGUP\"] = \"BUFF_AILDMGUP\";\n    IconId[\"ATK_ST\"] = \"ATK_ST\";\n    IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n    IconId[\"ATK_RT\"] = \"ATK_RT\";\n    IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n    IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n    IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n    IconId[\"ATK_ST_PIERCING_PROPORTIONAL\"] = \"ATK_ST_PIERCING_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PIERCING_PROPORTIONAL\"] = \"ATK_AOE_PIERCING_PROPORTIONAL\";\n    IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n    IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n    IconId[\"ATK_ST_PIERCING_FIXED\"] = \"ATK_ST_PIERCING_FIXED\";\n    IconId[\"ATK_AOE_PIERCING_FIXED\"] = \"ATK_AOE_PIERCING_FIXED\";\n    IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n    IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n    IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n    IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n    IconId[\"ATK_ST_HPSCALED\"] = \"ATK_ST_HPSCALED\";\n    IconId[\"ATK_AOE_HPSCALED\"] = \"ATK_AOE_HPSCALED\";\n    IconId[\"ATK_ST_BBGAUGESCALED\"] = \"ATK_ST_BBGAUGESCALED\";\n    IconId[\"ATK_AOE_BBGAUGESCALED\"] = \"ATK_AOE_BBGAUGESCALED\";\n    IconId[\"ATK_ST_USAGESCALED\"] = \"ATK_ST_USAGESCALED\";\n    IconId[\"ATK_AOE_USAGESCALED\"] = \"ATK_AOE_USAGESCALED\";\n})(IconId || (IconId = {}));\n/**\n * @description Format of these IDs are `<passive|proc|conditional>:<original effect ID>:<stat>`.\n * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n * source of a given buff.\n */\nexport var BuffId;\n(function (BuffId) {\n    BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n    BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n    BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n    BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n    BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n    BuffId[\"passive:1:def\"] = \"passive:1:def\";\n    BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n    BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n    BuffId[\"passive:2:elemental-hp\"] = \"passive:2:elemental-hp\";\n    BuffId[\"passive:2:elemental-atk\"] = \"passive:2:elemental-atk\";\n    BuffId[\"passive:2:elemental-def\"] = \"passive:2:elemental-def\";\n    BuffId[\"passive:2:elemental-rec\"] = \"passive:2:elemental-rec\";\n    BuffId[\"passive:2:elemental-crit\"] = \"passive:2:elemental-crit\";\n    BuffId[\"passive:3:type based-hp\"] = \"passive:3:type based-hp\";\n    BuffId[\"passive:3:type based-atk\"] = \"passive:3:type based-atk\";\n    BuffId[\"passive:3:type based-def\"] = \"passive:3:type based-def\";\n    BuffId[\"passive:3:type based-rec\"] = \"passive:3:type based-rec\";\n    BuffId[\"passive:3:type based-crit\"] = \"passive:3:type based-crit\";\n    BuffId[\"passive:4:resist-poison\"] = \"passive:4:resist-poison\";\n    BuffId[\"passive:4:resist-weak\"] = \"passive:4:resist-weak\";\n    BuffId[\"passive:4:resist-sick\"] = \"passive:4:resist-sick\";\n    BuffId[\"passive:4:resist-injury\"] = \"passive:4:resist-injury\";\n    BuffId[\"passive:4:resist-curse\"] = \"passive:4:resist-curse\";\n    BuffId[\"passive:4:resist-paralysis\"] = \"passive:4:resist-paralysis\";\n    BuffId[\"passive:5:mitigate-fire\"] = \"passive:5:mitigate-fire\";\n    BuffId[\"passive:5:mitigate-water\"] = \"passive:5:mitigate-water\";\n    BuffId[\"passive:5:mitigate-earth\"] = \"passive:5:mitigate-earth\";\n    BuffId[\"passive:5:mitigate-thunder\"] = \"passive:5:mitigate-thunder\";\n    BuffId[\"passive:5:mitigate-light\"] = \"passive:5:mitigate-light\";\n    BuffId[\"passive:5:mitigate-dark\"] = \"passive:5:mitigate-dark\";\n    BuffId[\"passive:5:mitigate-unknown\"] = \"passive:5:mitigate-unknown\";\n    BuffId[\"passive:8:mitigation\"] = \"passive:8:mitigation\";\n    BuffId[\"passive:9:gradual bc fill\"] = \"passive:9:gradual bc fill\";\n    BuffId[\"passive:10:hc efficacy\"] = \"passive:10:hc efficacy\";\n    BuffId[\"passive:11:hp conditional-atk\"] = \"passive:11:hp conditional-atk\";\n    BuffId[\"passive:11:hp conditional-def\"] = \"passive:11:hp conditional-def\";\n    BuffId[\"passive:11:hp conditional-rec\"] = \"passive:11:hp conditional-rec\";\n    BuffId[\"passive:11:hp conditional-crit\"] = \"passive:11:hp conditional-crit\";\n    BuffId[\"passive:12:hp conditional drop boost-bc\"] = \"passive:12:hp conditional drop boost-bc\";\n    BuffId[\"passive:12:hp conditional drop boost-hc\"] = \"passive:12:hp conditional drop boost-hc\";\n    BuffId[\"passive:12:hp conditional drop boost-item\"] = \"passive:12:hp conditional drop boost-item\";\n    BuffId[\"passive:12:hp conditional drop boost-zel\"] = \"passive:12:hp conditional drop boost-zel\";\n    BuffId[\"passive:12:hp conditional drop boost-karma\"] = \"passive:12:hp conditional drop boost-karma\";\n    BuffId[\"passive:13:bc fill on enemy defeat\"] = \"passive:13:bc fill on enemy defeat\";\n    BuffId[\"passive:14:chance mitigation\"] = \"passive:14:chance mitigation\";\n    BuffId[\"passive:15:heal on enemy defeat\"] = \"passive:15:heal on enemy defeat\";\n    BuffId[\"passive:16:heal on win\"] = \"passive:16:heal on win\";\n    BuffId[\"passive:17:hp absorb\"] = \"passive:17:hp absorb\";\n    BuffId[\"passive:19:drop boost-bc\"] = \"passive:19:drop boost-bc\";\n    BuffId[\"passive:19:drop boost-hc\"] = \"passive:19:drop boost-hc\";\n    BuffId[\"passive:19:drop boost-item\"] = \"passive:19:drop boost-item\";\n    BuffId[\"passive:19:drop boost-zel\"] = \"passive:19:drop boost-zel\";\n    BuffId[\"passive:19:drop boost-karma\"] = \"passive:19:drop boost-karma\";\n    BuffId[\"passive:20:chance inflict-poison\"] = \"passive:20:chance inflict-poison\";\n    BuffId[\"passive:20:chance inflict-weak\"] = \"passive:20:chance inflict-weak\";\n    BuffId[\"passive:20:chance inflict-sick\"] = \"passive:20:chance inflict-sick\";\n    BuffId[\"passive:20:chance inflict-injury\"] = \"passive:20:chance inflict-injury\";\n    BuffId[\"passive:20:chance inflict-curse\"] = \"passive:20:chance inflict-curse\";\n    BuffId[\"passive:20:chance inflict-paralysis\"] = \"passive:20:chance inflict-paralysis\";\n    BuffId[\"passive:20:chance inflict-atk down\"] = \"passive:20:chance inflict-atk down\";\n    BuffId[\"passive:20:chance inflict-def down\"] = \"passive:20:chance inflict-def down\";\n    BuffId[\"passive:20:chance inflict-rec down\"] = \"passive:20:chance inflict-rec down\";\n    BuffId[\"passive:20:chance inflict-unknown\"] = \"passive:20:chance inflict-unknown\";\n    BuffId[\"passive:21:first turn-atk\"] = \"passive:21:first turn-atk\";\n    BuffId[\"passive:21:first turn-def\"] = \"passive:21:first turn-def\";\n    BuffId[\"passive:21:first turn-rec\"] = \"passive:21:first turn-rec\";\n    BuffId[\"passive:21:first turn-crit\"] = \"passive:21:first turn-crit\";\n    BuffId[\"passive:23:bc fill on win\"] = \"passive:23:bc fill on win\";\n    BuffId[\"passive:24:heal on hit\"] = \"passive:24:heal on hit\";\n    BuffId[\"passive:25:bc fill on hit\"] = \"passive:25:bc fill on hit\";\n    BuffId[\"passive:26:chance damage reflect\"] = \"passive:26:chance damage reflect\";\n    BuffId[\"passive:27:target chance change\"] = \"passive:27:target chance change\";\n    BuffId[\"passive:28:hp conditional target chance change\"] = \"passive:28:hp conditional target chance change\";\n    BuffId[\"passive:29:chance def ignore\"] = \"passive:29:chance def ignore\";\n    BuffId[\"passive:30:bb gauge conditional-atk\"] = \"passive:30:bb gauge conditional-atk\";\n    BuffId[\"passive:30:bb gauge conditional-def\"] = \"passive:30:bb gauge conditional-def\";\n    BuffId[\"passive:30:bb gauge conditional-rec\"] = \"passive:30:bb gauge conditional-rec\";\n    BuffId[\"passive:30:bb gauge conditional-crit\"] = \"passive:30:bb gauge conditional-crit\";\n    BuffId[\"passive:31:spark-damage\"] = \"passive:31:spark-damage\";\n    BuffId[\"passive:31:spark-bc\"] = \"passive:31:spark-bc\";\n    BuffId[\"passive:31:spark-hc\"] = \"passive:31:spark-hc\";\n    BuffId[\"passive:31:spark-item\"] = \"passive:31:spark-item\";\n    BuffId[\"passive:31:spark-zel\"] = \"passive:31:spark-zel\";\n    BuffId[\"passive:31:spark-karma\"] = \"passive:31:spark-karma\";\n    BuffId[\"passive:32:bc efficacy\"] = \"passive:32:bc efficacy\";\n    BuffId[\"passive:33:gradual heal\"] = \"passive:33:gradual heal\";\n    BuffId[\"passive:34:critical damage\"] = \"passive:34:critical damage\";\n    BuffId[\"passive:35:bc fill on normal attack\"] = \"passive:35:bc fill on normal attack\";\n    BuffId[\"passive:36:extra action\"] = \"passive:36:extra action\";\n    BuffId[\"passive:37:hit count boost\"] = \"passive:37:hit count boost\";\n    BuffId[\"passive:40:converted-atk\"] = \"passive:40:converted-atk\";\n    BuffId[\"passive:40:converted-def\"] = \"passive:40:converted-def\";\n    BuffId[\"passive:40:converted-rec\"] = \"passive:40:converted-rec\";\n    BuffId[\"passive:41:unique element count-hp\"] = \"passive:41:unique element count-hp\";\n    BuffId[\"passive:41:unique element count-atk\"] = \"passive:41:unique element count-atk\";\n    BuffId[\"passive:41:unique element count-def\"] = \"passive:41:unique element count-def\";\n    BuffId[\"passive:41:unique element count-rec\"] = \"passive:41:unique element count-rec\";\n    BuffId[\"passive:41:unique element count-crit\"] = \"passive:41:unique element count-crit\";\n    BuffId[\"passive:42:gender-hp\"] = \"passive:42:gender-hp\";\n    BuffId[\"passive:42:gender-atk\"] = \"passive:42:gender-atk\";\n    BuffId[\"passive:42:gender-def\"] = \"passive:42:gender-def\";\n    BuffId[\"passive:42:gender-rec\"] = \"passive:42:gender-rec\";\n    BuffId[\"passive:42:gender-crit\"] = \"passive:42:gender-crit\";\n    BuffId[\"passive:43:chance damage to one\"] = \"passive:43:chance damage to one\";\n    BuffId[\"passive:44:flat-hp\"] = \"passive:44:flat-hp\";\n    BuffId[\"passive:44:flat-atk\"] = \"passive:44:flat-atk\";\n    BuffId[\"passive:44:flat-def\"] = \"passive:44:flat-def\";\n    BuffId[\"passive:44:flat-rec\"] = \"passive:44:flat-rec\";\n    BuffId[\"passive:44:flat-crit\"] = \"passive:44:flat-crit\";\n    BuffId[\"passive:45:critical damage reduction-base\"] = \"passive:45:critical damage reduction-base\";\n    BuffId[\"passive:45:critical damage reduction-buff\"] = \"passive:45:critical damage reduction-buff\";\n    BuffId[\"passive:46:hp scaled-atk\"] = \"passive:46:hp scaled-atk\";\n    BuffId[\"passive:46:hp scaled-def\"] = \"passive:46:hp scaled-def\";\n    BuffId[\"passive:46:hp scaled-rec\"] = \"passive:46:hp scaled-rec\";\n    BuffId[\"passive:47:bc fill on spark\"] = \"passive:47:bc fill on spark\";\n    BuffId[\"passive:48:bc cost reduction\"] = \"passive:48:bc cost reduction\";\n    BuffId[\"passive:49:bb gauge consumption reduction\"] = \"passive:49:bb gauge consumption reduction\";\n    BuffId[\"passive:50:elemental weakness damage-fire\"] = \"passive:50:elemental weakness damage-fire\";\n    BuffId[\"passive:50:elemental weakness damage-water\"] = \"passive:50:elemental weakness damage-water\";\n    BuffId[\"passive:50:elemental weakness damage-earth\"] = \"passive:50:elemental weakness damage-earth\";\n    BuffId[\"passive:50:elemental weakness damage-thunder\"] = \"passive:50:elemental weakness damage-thunder\";\n    BuffId[\"passive:50:elemental weakness damage-light\"] = \"passive:50:elemental weakness damage-light\";\n    BuffId[\"passive:50:elemental weakness damage-dark\"] = \"passive:50:elemental weakness damage-dark\";\n    BuffId[\"passive:50:elemental weakness damage-unknown\"] = \"passive:50:elemental weakness damage-unknown\";\n    BuffId[\"passive:53:critical damage-base\"] = \"passive:53:critical damage-base\";\n    BuffId[\"passive:53:critical damage-buff\"] = \"passive:53:critical damage-buff\";\n    BuffId[\"passive:53:element damage-base\"] = \"passive:53:element damage-base\";\n    BuffId[\"passive:53:element damage-buff\"] = \"passive:53:element damage-buff\";\n    BuffId[\"passive:53:critical rate-base\"] = \"passive:53:critical rate-base\";\n    BuffId[\"passive:53:critical rate-buff\"] = \"passive:53:critical rate-buff\";\n    BuffId[\"passive:55:hp conditional\"] = \"passive:55:hp conditional\";\n    BuffId[\"passive:58:guard mitigation\"] = \"passive:58:guard mitigation\";\n    BuffId[\"passive:59:bc fill when attacked on guard-percent\"] = \"passive:59:bc fill when attacked on guard-percent\";\n    BuffId[\"passive:59:bc fill when attacked on guard-flat\"] = \"passive:59:bc fill when attacked on guard-flat\";\n    BuffId[\"passive:61:bc fill on guard-percent\"] = \"passive:61:bc fill on guard-percent\";\n    BuffId[\"passive:61:bc fill on guard-flat\"] = \"passive:61:bc fill on guard-flat\";\n    BuffId[\"passive:62:mitigate-fire\"] = \"passive:62:mitigate-fire\";\n    BuffId[\"passive:62:mitigate-water\"] = \"passive:62:mitigate-water\";\n    BuffId[\"passive:62:mitigate-earth\"] = \"passive:62:mitigate-earth\";\n    BuffId[\"passive:62:mitigate-thunder\"] = \"passive:62:mitigate-thunder\";\n    BuffId[\"passive:62:mitigate-light\"] = \"passive:62:mitigate-light\";\n    BuffId[\"passive:62:mitigate-dark\"] = \"passive:62:mitigate-dark\";\n    BuffId[\"passive:62:mitigate-unknown\"] = \"passive:62:mitigate-unknown\";\n    BuffId[\"passive:63:first turn mitigate-fire\"] = \"passive:63:first turn mitigate-fire\";\n    BuffId[\"passive:63:first turn mitigate-water\"] = \"passive:63:first turn mitigate-water\";\n    BuffId[\"passive:63:first turn mitigate-earth\"] = \"passive:63:first turn mitigate-earth\";\n    BuffId[\"passive:63:first turn mitigate-thunder\"] = \"passive:63:first turn mitigate-thunder\";\n    BuffId[\"passive:63:first turn mitigate-light\"] = \"passive:63:first turn mitigate-light\";\n    BuffId[\"passive:63:first turn mitigate-dark\"] = \"passive:63:first turn mitigate-dark\";\n    BuffId[\"passive:63:first turn mitigate-unknown\"] = \"passive:63:first turn mitigate-unknown\";\n    BuffId[\"passive:64:attack boost-bb\"] = \"passive:64:attack boost-bb\";\n    BuffId[\"passive:64:attack boost-sbb\"] = \"passive:64:attack boost-sbb\";\n    BuffId[\"passive:64:attack boost-ubb\"] = \"passive:64:attack boost-ubb\";\n    BuffId[\"passive:65:bc fill on crit\"] = \"passive:65:bc fill on crit\";\n    BuffId[\"passive:66:add effect to skill-bb\"] = \"passive:66:add effect to skill-bb\";\n    BuffId[\"passive:66:add effect to skill-sbb\"] = \"passive:66:add effect to skill-sbb\";\n    BuffId[\"passive:66:add effect to skill-ubb\"] = \"passive:66:add effect to skill-ubb\";\n    BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n    BuffId[\"proc:1:attack\"] = \"proc:1:attack\";\n    BuffId[\"proc:2:burst heal\"] = \"proc:2:burst heal\";\n    BuffId[\"proc:3:gradual heal\"] = \"proc:3:gradual heal\";\n    BuffId[\"proc:4:bc fill-flat\"] = \"proc:4:bc fill-flat\";\n    BuffId[\"proc:4:bc fill-percent\"] = \"proc:4:bc fill-percent\";\n    BuffId[\"proc:5:regular or elemental-atk\"] = \"proc:5:regular or elemental-atk\";\n    BuffId[\"proc:5:regular or elemental-def\"] = \"proc:5:regular or elemental-def\";\n    BuffId[\"proc:5:regular or elemental-rec\"] = \"proc:5:regular or elemental-rec\";\n    BuffId[\"proc:5:regular or elemental-crit\"] = \"proc:5:regular or elemental-crit\";\n    BuffId[\"proc:6:drop boost-bc\"] = \"proc:6:drop boost-bc\";\n    BuffId[\"proc:6:drop boost-hc\"] = \"proc:6:drop boost-hc\";\n    BuffId[\"proc:6:drop boost-item\"] = \"proc:6:drop boost-item\";\n    BuffId[\"proc:7:guaranteed ko resistance\"] = \"proc:7:guaranteed ko resistance\";\n    BuffId[\"proc:8:max hp boost-flat\"] = \"proc:8:max hp boost-flat\";\n    BuffId[\"proc:8:max hp boost-percent\"] = \"proc:8:max hp boost-percent\";\n    BuffId[\"proc:9:regular or elemental reduction-atk\"] = \"proc:9:regular or elemental reduction-atk\";\n    BuffId[\"proc:9:regular or elemental reduction-def\"] = \"proc:9:regular or elemental reduction-def\";\n    BuffId[\"proc:9:regular or elemental reduction-rec\"] = \"proc:9:regular or elemental reduction-rec\";\n    BuffId[\"proc:9:regular or elemental reduction-unknown\"] = \"proc:9:regular or elemental reduction-unknown\";\n    BuffId[\"proc:10:cleanse-poison\"] = \"proc:10:cleanse-poison\";\n    BuffId[\"proc:10:cleanse-weak\"] = \"proc:10:cleanse-weak\";\n    BuffId[\"proc:10:cleanse-sick\"] = \"proc:10:cleanse-sick\";\n    BuffId[\"proc:10:cleanse-injury\"] = \"proc:10:cleanse-injury\";\n    BuffId[\"proc:10:cleanse-curse\"] = \"proc:10:cleanse-curse\";\n    BuffId[\"proc:10:cleanse-paralysis\"] = \"proc:10:cleanse-paralysis\";\n    BuffId[\"proc:10:cleanse-atk down\"] = \"proc:10:cleanse-atk down\";\n    BuffId[\"proc:10:cleanse-def down\"] = \"proc:10:cleanse-def down\";\n    BuffId[\"proc:10:cleanse-rec down\"] = \"proc:10:cleanse-rec down\";\n    BuffId[\"proc:10:cleanse-unknown\"] = \"proc:10:cleanse-unknown\";\n    BuffId[\"proc:11:chance inflict-poison\"] = \"proc:11:chance inflict-poison\";\n    BuffId[\"proc:11:chance inflict-weak\"] = \"proc:11:chance inflict-weak\";\n    BuffId[\"proc:11:chance inflict-sick\"] = \"proc:11:chance inflict-sick\";\n    BuffId[\"proc:11:chance inflict-injury\"] = \"proc:11:chance inflict-injury\";\n    BuffId[\"proc:11:chance inflict-curse\"] = \"proc:11:chance inflict-curse\";\n    BuffId[\"proc:11:chance inflict-paralysis\"] = \"proc:11:chance inflict-paralysis\";\n    BuffId[\"proc:11:chance inflict-atk down\"] = \"proc:11:chance inflict-atk down\";\n    BuffId[\"proc:11:chance inflict-def down\"] = \"proc:11:chance inflict-def down\";\n    BuffId[\"proc:11:chance inflict-rec down\"] = \"proc:11:chance inflict-rec down\";\n    BuffId[\"proc:11:chance inflict-unknown\"] = \"proc:11:chance inflict-unknown\";\n    BuffId[\"proc:12:guaranteed revive\"] = \"proc:12:guaranteed revive\";\n    BuffId[\"proc:13:random attack\"] = \"proc:13:random attack\";\n    BuffId[\"proc:14:hp absorb attack\"] = \"proc:14:hp absorb attack\";\n    BuffId[\"proc:16:mitigate-fire\"] = \"proc:16:mitigate-fire\";\n    BuffId[\"proc:16:mitigate-water\"] = \"proc:16:mitigate-water\";\n    BuffId[\"proc:16:mitigate-earth\"] = \"proc:16:mitigate-earth\";\n    BuffId[\"proc:16:mitigate-thunder\"] = \"proc:16:mitigate-thunder\";\n    BuffId[\"proc:16:mitigate-light\"] = \"proc:16:mitigate-light\";\n    BuffId[\"proc:16:mitigate-dark\"] = \"proc:16:mitigate-dark\";\n    BuffId[\"proc:16:mitigate-all\"] = \"proc:16:mitigate-all\";\n    BuffId[\"proc:16:mitigate-unknown\"] = \"proc:16:mitigate-unknown\";\n    BuffId[\"proc:17:resist-poison\"] = \"proc:17:resist-poison\";\n    BuffId[\"proc:17:resist-weak\"] = \"proc:17:resist-weak\";\n    BuffId[\"proc:17:resist-sick\"] = \"proc:17:resist-sick\";\n    BuffId[\"proc:17:resist-injury\"] = \"proc:17:resist-injury\";\n    BuffId[\"proc:17:resist-curse\"] = \"proc:17:resist-curse\";\n    BuffId[\"proc:17:resist-paralysis\"] = \"proc:17:resist-paralysis\";\n    BuffId[\"proc:18:mitigation\"] = \"proc:18:mitigation\";\n    BuffId[\"proc:19:gradual bc fill\"] = \"proc:19:gradual bc fill\";\n    BuffId[\"proc:20:bc fill on hit\"] = \"proc:20:bc fill on hit\";\n    BuffId[\"proc:22:defense ignore\"] = \"proc:22:defense ignore\";\n    BuffId[\"proc:23:spark damage\"] = \"proc:23:spark damage\";\n    BuffId[\"proc:24:converted-atk\"] = \"proc:24:converted-atk\";\n    BuffId[\"proc:24:converted-def\"] = \"proc:24:converted-def\";\n    BuffId[\"proc:24:converted-rec\"] = \"proc:24:converted-rec\";\n    BuffId[\"proc:26:hit count boost\"] = \"proc:26:hit count boost\";\n    BuffId[\"proc:27:proportional attack\"] = \"proc:27:proportional attack\";\n    BuffId[\"proc:28:fixed attack\"] = \"proc:28:fixed attack\";\n    BuffId[\"proc:29:multi-element attack\"] = \"proc:29:multi-element attack\";\n    BuffId[\"proc:30:add element-fire\"] = \"proc:30:add element-fire\";\n    BuffId[\"proc:30:add element-water\"] = \"proc:30:add element-water\";\n    BuffId[\"proc:30:add element-earth\"] = \"proc:30:add element-earth\";\n    BuffId[\"proc:30:add element-thunder\"] = \"proc:30:add element-thunder\";\n    BuffId[\"proc:30:add element-light\"] = \"proc:30:add element-light\";\n    BuffId[\"proc:30:add element-dark\"] = \"proc:30:add element-dark\";\n    BuffId[\"proc:30:add element-unknown\"] = \"proc:30:add element-unknown\";\n    BuffId[\"proc:31:bc fill-flat\"] = \"proc:31:bc fill-flat\";\n    BuffId[\"proc:31:bc fill-percent\"] = \"proc:31:bc fill-percent\";\n    BuffId[\"proc:32:element shift-fire\"] = \"proc:32:element shift-fire\";\n    BuffId[\"proc:32:element shift-water\"] = \"proc:32:element shift-water\";\n    BuffId[\"proc:32:element shift-earth\"] = \"proc:32:element shift-earth\";\n    BuffId[\"proc:32:element shift-thunder\"] = \"proc:32:element shift-thunder\";\n    BuffId[\"proc:32:element shift-light\"] = \"proc:32:element shift-light\";\n    BuffId[\"proc:32:element shift-dark\"] = \"proc:32:element shift-dark\";\n    BuffId[\"proc:32:element shift-unknown\"] = \"proc:32:element shift-unknown\";\n    BuffId[\"proc:33:buff wipe\"] = \"proc:33:buff wipe\";\n    BuffId[\"proc:34:bc drain-flat\"] = \"proc:34:bc drain-flat\";\n    BuffId[\"proc:34:bc drain-percent\"] = \"proc:34:bc drain-percent\";\n    BuffId[\"proc:36:ls lock\"] = \"proc:36:ls lock\";\n    BuffId[\"proc:37:summon\"] = \"proc:37:summon\";\n    BuffId[\"proc:38:cleanse-poison\"] = \"proc:38:cleanse-poison\";\n    BuffId[\"proc:38:cleanse-weak\"] = \"proc:38:cleanse-weak\";\n    BuffId[\"proc:38:cleanse-sick\"] = \"proc:38:cleanse-sick\";\n    BuffId[\"proc:38:cleanse-injury\"] = \"proc:38:cleanse-injury\";\n    BuffId[\"proc:38:cleanse-curse\"] = \"proc:38:cleanse-curse\";\n    BuffId[\"proc:38:cleanse-paralysis\"] = \"proc:38:cleanse-paralysis\";\n    BuffId[\"proc:38:cleanse-atk down\"] = \"proc:38:cleanse-atk down\";\n    BuffId[\"proc:38:cleanse-def down\"] = \"proc:38:cleanse-def down\";\n    BuffId[\"proc:38:cleanse-rec down\"] = \"proc:38:cleanse-rec down\";\n    BuffId[\"proc:38:cleanse-unknown\"] = \"proc:38:cleanse-unknown\";\n    BuffId[\"proc:39:mitigate-fire\"] = \"proc:39:mitigate-fire\";\n    BuffId[\"proc:39:mitigate-water\"] = \"proc:39:mitigate-water\";\n    BuffId[\"proc:39:mitigate-earth\"] = \"proc:39:mitigate-earth\";\n    BuffId[\"proc:39:mitigate-thunder\"] = \"proc:39:mitigate-thunder\";\n    BuffId[\"proc:39:mitigate-light\"] = \"proc:39:mitigate-light\";\n    BuffId[\"proc:39:mitigate-dark\"] = \"proc:39:mitigate-dark\";\n    BuffId[\"proc:39:mitigate-unknown\"] = \"proc:39:mitigate-unknown\";\n    BuffId[\"proc:40:add ailment-poison\"] = \"proc:40:add ailment-poison\";\n    BuffId[\"proc:40:add ailment-weak\"] = \"proc:40:add ailment-weak\";\n    BuffId[\"proc:40:add ailment-sick\"] = \"proc:40:add ailment-sick\";\n    BuffId[\"proc:40:add ailment-injury\"] = \"proc:40:add ailment-injury\";\n    BuffId[\"proc:40:add ailment-curse\"] = \"proc:40:add ailment-curse\";\n    BuffId[\"proc:40:add ailment-paralysis\"] = \"proc:40:add ailment-paralysis\";\n    BuffId[\"proc:40:add ailment-atk down\"] = \"proc:40:add ailment-atk down\";\n    BuffId[\"proc:40:add ailment-def down\"] = \"proc:40:add ailment-def down\";\n    BuffId[\"proc:40:add ailment-rec down\"] = \"proc:40:add ailment-rec down\";\n    BuffId[\"proc:40:add ailment-unknown\"] = \"proc:40:add ailment-unknown\";\n    BuffId[\"proc:42:sacrificial attack\"] = \"proc:42:sacrificial attack\";\n    BuffId[\"proc:42:instant death\"] = \"proc:42:instant death\";\n    BuffId[\"proc:43:burst od fill\"] = \"proc:43:burst od fill\";\n    BuffId[\"proc:44:damage over time\"] = \"proc:44:damage over time\";\n    BuffId[\"proc:45:attack boost-bb\"] = \"proc:45:attack boost-bb\";\n    BuffId[\"proc:45:attack boost-sbb\"] = \"proc:45:attack boost-sbb\";\n    BuffId[\"proc:45:attack boost-ubb\"] = \"proc:45:attack boost-ubb\";\n    BuffId[\"proc:46:non-lethal proportional attack\"] = \"proc:46:non-lethal proportional attack\";\n    BuffId[\"proc:47:hp scaled attack\"] = \"proc:47:hp scaled attack\";\n    BuffId[\"proc:48:piercing attack-base\"] = \"proc:48:piercing attack-base\";\n    BuffId[\"proc:48:piercing attack-current\"] = \"proc:48:piercing attack-current\";\n    BuffId[\"proc:48:piercing attack-fixed\"] = \"proc:48:piercing attack-fixed\";\n    BuffId[\"proc:48:piercing attack-unknown\"] = \"proc:48:piercing attack-unknown\";\n    BuffId[\"proc:49:chance instant death\"] = \"proc:49:chance instant death\";\n    BuffId[\"proc:50:chance damage reflect\"] = \"proc:50:chance damage reflect\";\n    BuffId[\"proc:51:add to attack-atk down\"] = \"proc:51:add to attack-atk down\";\n    BuffId[\"proc:51:add to attack-def down\"] = \"proc:51:add to attack-def down\";\n    BuffId[\"proc:51:add to attack-rec down\"] = \"proc:51:add to attack-rec down\";\n    BuffId[\"proc:52:bc efficacy\"] = \"proc:52:bc efficacy\";\n    BuffId[\"proc:53:inflict on hit-poison\"] = \"proc:53:inflict on hit-poison\";\n    BuffId[\"proc:53:inflict on hit-weak\"] = \"proc:53:inflict on hit-weak\";\n    BuffId[\"proc:53:inflict on hit-sick\"] = \"proc:53:inflict on hit-sick\";\n    BuffId[\"proc:53:inflict on hit-injury\"] = \"proc:53:inflict on hit-injury\";\n    BuffId[\"proc:53:inflict on hit-curse\"] = \"proc:53:inflict on hit-curse\";\n    BuffId[\"proc:53:inflict on hit-paralysis\"] = \"proc:53:inflict on hit-paralysis\";\n    BuffId[\"proc:54:critical damage boost\"] = \"proc:54:critical damage boost\";\n    BuffId[\"proc:55:elemental weakness damage-fire\"] = \"proc:55:elemental weakness damage-fire\";\n    BuffId[\"proc:55:elemental weakness damage-water\"] = \"proc:55:elemental weakness damage-water\";\n    BuffId[\"proc:55:elemental weakness damage-earth\"] = \"proc:55:elemental weakness damage-earth\";\n    BuffId[\"proc:55:elemental weakness damage-thunder\"] = \"proc:55:elemental weakness damage-thunder\";\n    BuffId[\"proc:55:elemental weakness damage-light\"] = \"proc:55:elemental weakness damage-light\";\n    BuffId[\"proc:55:elemental weakness damage-dark\"] = \"proc:55:elemental weakness damage-dark\";\n    BuffId[\"proc:55:elemental weakness damage-unknown\"] = \"proc:55:elemental weakness damage-unknown\";\n    BuffId[\"proc:56:chance ko resistance\"] = \"proc:56:chance ko resistance\";\n    BuffId[\"proc:57:bc drop resistance-base\"] = \"proc:57:bc drop resistance-base\";\n    BuffId[\"proc:57:bc drop resistance-buff\"] = \"proc:57:bc drop resistance-buff\";\n    BuffId[\"proc:57:hc drop resistance-base\"] = \"proc:57:hc drop resistance-base\";\n    BuffId[\"proc:57:hc drop resistance-buff\"] = \"proc:57:hc drop resistance-buff\";\n    BuffId[\"proc:58:spark vulnerability\"] = \"proc:58:spark vulnerability\";\n    BuffId[\"proc:59:attack reduction-bb\"] = \"proc:59:attack reduction-bb\";\n    BuffId[\"proc:59:attack reduction-sbb\"] = \"proc:59:attack reduction-sbb\";\n    BuffId[\"proc:59:attack reduction-ubb\"] = \"proc:59:attack reduction-ubb\";\n    BuffId[\"proc:61:party bb gauge-scaled attack\"] = \"proc:61:party bb gauge-scaled attack\";\n    BuffId[\"proc:61:party bc drain\"] = \"proc:61:party bc drain\";\n    BuffId[\"proc:62:barrier-all\"] = \"proc:62:barrier-all\";\n    BuffId[\"proc:62:barrier-fire\"] = \"proc:62:barrier-fire\";\n    BuffId[\"proc:62:barrier-water\"] = \"proc:62:barrier-water\";\n    BuffId[\"proc:62:barrier-earth\"] = \"proc:62:barrier-earth\";\n    BuffId[\"proc:62:barrier-thunder\"] = \"proc:62:barrier-thunder\";\n    BuffId[\"proc:62:barrier-light\"] = \"proc:62:barrier-light\";\n    BuffId[\"proc:62:barrier-dark\"] = \"proc:62:barrier-dark\";\n    BuffId[\"proc:62:barrier-unknown\"] = \"proc:62:barrier-unknown\";\n    BuffId[\"proc:64:consecutive usage attack\"] = \"proc:64:consecutive usage attack\";\n    BuffId[\"proc:65:ailment attack boost\"] = \"proc:65:ailment attack boost\";\n    BuffId[\"proc:66:chance revive\"] = \"proc:66:chance revive\";\n    BuffId[\"UNKNOWN_CONDITIONAL_EFFECT_ID\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n    BuffId[\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\"] = \"UNKNOWN_CONDITIONAL_BUFF_PARAMS\";\n    BuffId[\"conditional:8:gradual heal\"] = \"conditional:8:gradual heal\";\n    BuffId[\"conditional:12:guaranteed ko resistance\"] = \"conditional:12:guaranteed ko resistance\";\n    BuffId[\"conditional:36:mitigation\"] = \"conditional:36:mitigation\";\n    BuffId[\"conditional:91:chance ko resistance\"] = \"conditional:91:chance ko resistance\";\n    BuffId[\"conditional:133:heal on hit\"] = \"conditional:133:heal on hit\";\n    BuffId[\"conditional:153:chance inflict atk down on hit\"] = \"conditional:153:chance inflict atk down on hit\";\n})(BuffId || (BuffId = {}));\n","import { BuffSource, BuffId, } from './buff-types';\nimport { SpPassiveType, TargetType, TargetArea, } from '../../datamine-types';\n/**\n * @description Helper function for creating an entry to be used in the `sources`\n * property of {@link IBuff}.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourceEntryFromContext(context) {\n    return `${context.source}-${context.sourceId}`;\n}\n/**\n * @description Helper function for creating an entries array to be used in the `sources`\n * property of {@link IBuff}. It handles setting the order of the sources.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourcesFromContext(context) {\n    const resultArray = Array.isArray(context.previousSources)\n        ? context.previousSources.slice()\n        : [];\n    // Ensure that the current source is at the beginning of the array\n    resultArray.unshift(createSourceEntryFromContext(context));\n    return resultArray;\n}\n/**\n * @description Given the conditions in an extra skill effect, normalize them into\n * a simpler object containing the IDs of each condition type.\n * @param effect Extra skill effect to process conditions from.\n * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n */\nexport function processExtraSkillConditions(effect) {\n    const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n    const aggregate = {\n        units: new Set(),\n        items: new Set(),\n        sphereTypes: new Set(),\n        unknowns: new Set(),\n    };\n    conditions.forEach((condition, index) => {\n        if ('sphere category required (raw)' in condition) {\n            aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n        }\n        else if ('item required' in condition) {\n            condition['item required'].forEach((item) => {\n                aggregate.items.add(item);\n            });\n        }\n        else if ('unit required' in condition) {\n            condition['unit required'].forEach((unit) => {\n                aggregate.units.add(`${unit.id}`);\n            });\n        }\n        else {\n            aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n        }\n    });\n    // filter out properties that have no entries\n    const result = Object.entries(aggregate)\n        .filter((entry) => entry[1].size > 0)\n        .reduce((acc, entry) => {\n        acc[entry[0]] = Array.from(entry[1]);\n        return acc;\n    }, {});\n    return result;\n}\n/**\n * @description Extract the target type and target area of a given passive effect.\n * @param effect Passive effect to extract target data from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns The target data for the given effect and context. There are only two possible values:\n * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n */\nexport function getPassiveTargetData(effect, context) {\n    const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n        (effect.sp_type === SpPassiveType.EnhancePassive);\n    const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n    return {\n        targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n        targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n    };\n}\n/**\n * @description Extract the target type and target area of a given proc effect.\n * @param effect Proc effect to extract target data from.\n * @returns The target data for the given effect and context.\n */\nexport function getProcTargetData(effect) {\n    return {\n        targetArea: effect['target area'],\n        targetType: effect['target type'],\n    };\n}\n/**\n * @description Try to parse the given value into a number or return a value if it is not a number.\n * @param value Value to parse into a number.\n * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n */\nexport function parseNumberOrDefault(value, defaultValue = 0) {\n    return (value !== null && !isNaN(value)) ? +value : defaultValue;\n}\n/**\n * @description Create an object denoting values that cannot be processed yet. To be used\n * in the `value` property of `IBuff` as needed.\n * @param params Array of values that cannot be processed yet.\n * @param startIndex The first index before which we know how to process an effect's values.\n * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n */\nexport function createUnknownParamsValue(params = [], startIndex = 0) {\n    let hasValue = false;\n    const result = params\n        .reduce((acc, value, index) => {\n        if (value && value !== '0') {\n            acc[`param_${startIndex + index}`] = value;\n            hasValue = true;\n        }\n        return acc;\n    }, {});\n    return hasValue ? result : (void 0);\n}\n/**\n * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n * @param source Source value to check.\n * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n * bonded super brave burst, or bonded dual brave burst.\n */\nexport function buffSourceIsBurstType(source) {\n    return !!source && [\n        BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n        BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n    ].includes(source);\n}\n/**\n * @description Given an array of parameters, conditionally creata an unknown params value entry.\n * @param extraParams Array of string parameters from an effect.\n * @param startIndex Index to use when generating entries for the unknown params value entry.\n * @param injectionContext Object whose main use is for injecting methods in testing.\n * @returns An unknown params entry if there are extra parameters, undefined otherwise.\n */\nexport function createUnknownParamsEntryFromExtraParams(extraParams, startIndex, injectionContext) {\n    let unknownParams;\n    if (extraParams && extraParams.length > 0) {\n        unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n    }\n    return unknownParams;\n}\n/**\n * @description Helper function for creating a `NO_PARAMS_SPECIFIED` entry from a given context.\n * @param context An effect processing context containing information created while parsing an effect.\n * @returns A single buff denoting a `NO_PARAMS_SPECIFIED` entry.\n */\nexport function createNoParamsEntry({ originalId, sources }) {\n    return {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    };\n}\n","import { UnitElement, Ailment, TargetArea, TargetType } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { getProcTargetData, createSourcesFromContext, parseNumberOrDefault, buffSourceIsBurstType, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of proc IDs to functions.\n */\nexport function getProcEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const NON_ZERO_ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const effectDelay = effect['effect delay time(ms)/frame'];\n        return { targetData, sources, effectDelay };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const splitEffectWithUnknownProcParamsProperty = (effect) => {\n        const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n        return splitEffectParams({ params: rawParams });\n    };\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n        effectDelay,\n        sources, value: unknownParams }, targetData));\n    const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n        sources, value: {\n            buffs,\n            duration,\n        } }, targetData));\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n    };\n    /**\n     * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n     * checked if all other known values in the effect are 0.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @param turnDuration Parsed turn duration value to check.\n     * @param injectionContext Object whose main use is for injecting methods in testing.\n     * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n     */\n    const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n        let result = turnDuration !== 0;\n        if (result) {\n            result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n        }\n        return result;\n    };\n    /**\n     * @description Helper function to get attack information common across most attacks from the conversion context.\n     * @param context Given context that may contain attack information like damage frames.\n     * @returns Extracted attack information from the context (with defaults where applicable).\n     */\n    const getAttackInformationFromContext = (context) => {\n        const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n        const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n        return {\n            hits,\n            distribution,\n        };\n    };\n    const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            value = parseParamValue(rawValue);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect[effectValueKey]);\n            turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [buffId],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:1:attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'healerRec%': 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            let recX, recY;\n            let extraParams;\n            [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n            params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['heal low'];\n            params.healHigh = effect['heal high'];\n            params['healerRec%'] = effect['rec added% (from healer)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const results = [];\n        if (params.healHigh !== 0 || params.healLow !== 0) {\n            results.push(Object.assign({ id: 'proc:2:burst heal', originalId,\n                sources,\n                effectDelay, value: params }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'targetRec%': 0,\n            turnDuration: '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let rec;\n            let extraParams;\n            [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['gradual heal low'];\n            params.healHigh = effect['gradual heal high'];\n            params['targetRec%'] = effect['rec added% (from target)'];\n            params.turnDuration = effect['gradual heal turns (8)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n        const results = [];\n        if (hasAnyHealValues) {\n            results.push(Object.assign({ id: 'proc:3:gradual heal', originalId,\n                sources,\n                effectDelay, duration: params.turnDuration, value: {\n                    healLow: params.healLow,\n                    healHigh: params.healHigh,\n                    'targetRec%': params['targetRec%'],\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:3:gradual heal'],\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('bb bc fill' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill']);\n            }\n            if ('bb bc fill%' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n            }\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:bc fill-flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:bc fill-percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            element: BuffConditionElement.All,\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    params[statType] = parseNumberOrDefault(effect[effectKey]);\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    const buffEntry = Object.assign({ id: `proc:5:regular or elemental-${statKey}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:5:regular or elemental-${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('6', (effect, context, injectionContext) => {\n        const originalId = '6';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            turnDuration: '0',\n        };\n        const dropRateProperties = ['bc', 'hc', 'item'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.bc = effect['bc drop rate% buff (10)'];\n            params.hc = effect['hc drop rate% buff (9)'];\n            params.item = effect['item drop rate% buff (11)'];\n            params.turnDuration = effect['drop buff rate turns'];\n        }\n        dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n        const results = [];\n        if (hasAnyRates) {\n            dropRateProperties.forEach((key) => {\n                const value = params[key];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:6:drop boost-${key}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: dropRateProperties.map((key) => `proc:6:drop boost-${key}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('7', (effect, context, injectionContext) => {\n        const originalId = '7';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHpPercent = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:7:guaranteed ko resistance', originalId,\n                sources,\n                effectDelay, value: recoveredHpPercent }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const originalId = '8';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatHpBoost = 0;\n        let percentHpBoost = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n            flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n            percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('max hp increase' in effect) {\n                flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n            }\n            if ('max hp% increase' in effect) {\n                percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n            }\n        }\n        const results = [];\n        if (flatHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:max hp boost-flat', originalId,\n                sources,\n                effectDelay, value: flatHpBoost }, targetData));\n        }\n        if (percentHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:max hp boost-percent', originalId,\n                sources,\n                effectDelay, value: percentHpBoost }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        const originalId = '9';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const STAT_TYPE_MAPPING = {\n            0: 'atk',\n            1: 'def',\n            2: 'rec',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const params = {\n            element: BuffConditionElement.All,\n            statReductionEntries: [],\n            turnDuration: 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n            [\n                [statType1, value1, procChance1],\n                [statType2, value2, procChance2],\n            ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                const statType = parseNumberOrDefault(rawStatType) - 1;\n                const value = parseNumberOrDefault(rawValue);\n                const chance = parseNumberOrDefault(rawProcChance);\n                if (statType === 3) { // all stats\n                    params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                        stat,\n                        value,\n                        chance,\n                    })));\n                }\n                else {\n                    params.statReductionEntries.push({\n                        stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                        value,\n                        chance,\n                    });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            ['buff #1', 'buff #2'].forEach((buffKey) => {\n                const entry = effect[buffKey];\n                if (entry) {\n                    const chance = parseNumberOrDefault(entry['proc chance%']);\n                    const keys = Object.keys(entry);\n                    coreStatProperties.forEach((statType) => {\n                        const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                        if (effectKey) {\n                            params.statReductionEntries.push({\n                                stat: statType,\n                                value: parseNumberOrDefault(entry[effectKey]),\n                                chance,\n                            });\n                        }\n                    });\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        let hasAnyValues = false;\n        params.statReductionEntries.forEach(({ stat, value, chance }) => {\n            if (value !== 0 || chance !== 0) {\n                hasAnyValues = true;\n                const buffEntry = Object.assign({ id: `proc:9:regular or elemental reduction-${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                if (params.element !== BuffConditionElement.All) {\n                    buffEntry.conditions = {\n                        targetElements: [params.element],\n                    };\n                }\n                results.push(buffEntry);\n            }\n        });\n        if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:9:regular or elemental reduction-${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        const originalId = '10';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 8);\n            const extraParams = splitParams.slice(8);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                if (`remove ${ailment}` in effect) { // mainly for items\n                    curedAilments.push(ailment);\n                }\n            });\n            if ('remove all status ailments' in effect) {\n                curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:cleanse-${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            let params = splitEffectParams(effect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:chance inflict-${ailment}`, originalId,\n            sources,\n            effectDelay, value: chance }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let reviveToHp = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n            reviveToHp = parseNumberOrDefault(rawReviveToHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:12:guaranteed revive', originalId,\n                sources,\n                effectDelay, value: reviveToHp }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const originalId = '13';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hits = 0;\n        const { distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawHits;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n            hits = parseNumberOrDefault(rawHits);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            hits = parseNumberOrDefault(effect.hits);\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push({\n                id: 'proc:13:random attack',\n                originalId,\n                sources,\n                effectDelay,\n                value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }),\n                targetType: targetData.targetType,\n                targetArea: TargetArea.Random,\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n            'drainLow%': '0',\n            'drainHigh%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n            params['drainLow%'] = effect['hp drain% low'];\n            params['drainHigh%'] = effect['hp drain% high'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:14:hp absorb attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let mitigation = 0;\n        let element;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            mitigation = parseNumberOrDefault(rawMitigation);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n            element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n            if (mitigationKey) {\n                mitigation = parseNumberOrDefault(effect[mitigationKey]);\n            }\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (mitigation !== 0) {\n            results.push(Object.assign({ id: `proc:16:mitigate-${element}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:mitigate-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        const originalId = '17';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    resistances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:17:resist-${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:17:resist-${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('18', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'dmg% reduction',\n            effectTurnDurationKey: 'dmg% reduction turns (36)',\n            buffId: 'proc:18:mitigation',\n            originalId: '18',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'increase bb gauge gradual',\n            effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'proc:19:gradual bc fill',\n            originalId: '19',\n        });\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const originalId = '20';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let fillLow = 0;\n        let fillHigh = 0;\n        let chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFillLow, rawFillHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(effect['bc fill when attacked low']);\n            fillHigh = parseNumberOrDefault(effect['bc fill when attacked high']);\n            chance = parseNumberOrDefault(effect['bc fill when attacked%']);\n            turnDuration = parseNumberOrDefault(effect['bc fill when attacked turns (38)']);\n        }\n        const hasAnyFillValues = fillLow !== 0 || fillHigh !== 0;\n        const results = [];\n        if (hasAnyFillValues) {\n            results.push(Object.assign({ id: 'proc:20:bc fill on hit', originalId,\n                sources,\n                effectDelay, duration: turnDuration, conditions: {\n                    whenAttacked: true,\n                }, value: {\n                    fillLow,\n                    fillHigh,\n                    chance,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:20:bc fill on hit'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('22', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'defense% ignore',\n            effectTurnDurationKey: 'defense% ignore turns (39)',\n            buffId: 'proc:22:defense ignore',\n            originalId: '22',\n        });\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            value = parseNumberOrDefault(params[0]);\n            turnDuration = parseNumberOrDefault(params[6]);\n            const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'proc:23:spark damage', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:23:spark damage'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        const originalId = '24';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let turnDuration = 0;\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawConvertedStat, rawTurnDuration;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            const rawConvertedStat = effect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    stats[statType] = effect[effectKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['% converted turns']);\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:24:converted-${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        convertedStat,\n                        value,\n                    } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:24:converted-${statKey}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        const originalId = '26';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n            turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'proc:26:hit count boost', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:26:hit count boost'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        const originalId = '27';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'hpDamageLow%': '0',\n            'hpDamageHigh%': '0',\n            'hpDamageChance%': '0',\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else {\n            params['hpDamageLow%'] = effect['hp% damage low'];\n            params['hpDamageHigh%'] = effect['hp% damage high'];\n            params['hpDamageChance%'] = effect['hp% damage chance%'];\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:27:proportional attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        let value = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            value = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['fixed damage']);\n        }\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || value !== 0) {\n            const entry = Object.assign({ id: 'proc:28:fixed attack', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (value !== 0) {\n                entry.value.value = value;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        const originalId = '29';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let attackElements = [];\n        let unknownParams;\n        if (effect.params) {\n            let element1, element2, element3;\n            let extraParams;\n            [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            [element1, element2, element3].forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            });\n        }\n        else {\n            if (Array.isArray(effect['bb elements'])) {\n                attackElements = effect['bb elements'].slice();\n            }\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n            const entry = Object.assign({ id: 'proc:29:multi-element attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData);\n            if (attackElements.length > 0) {\n                entry.value.elements = attackElements;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let elements = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            elements = params\n                .slice(0, 6)\n                .filter((p) => p !== '0')\n                .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n            turnDuration = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            if ('elements added' in effect) {\n                if (Array.isArray(effect['elements added'])) {\n                    elements = effect['elements added'];\n                }\n                else {\n                    elements = [BuffConditionElement.Unknown];\n                }\n            }\n            turnDuration = parseNumberOrDefault(effect['elements added turns']);\n        }\n        const results = [];\n        const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n        if (elements.length > 0) {\n            elements.forEach((inputElement) => {\n                const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                results.push(Object.assign({ id: `proc:30:add element-${sanitizedElement}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration }, targetData));\n            });\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:add element-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('increase bb gauge' in effect) {\n                flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n            }\n            // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n            // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:bc fill-flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:bc fill-percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        const originalId = '32';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let element;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, ...extraParams] = splitEffectParams(effect);\n            if (rawElement && rawElement !== '0') {\n                element = NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            const effectElement = effect['set attack element attribute'];\n            if (effectElement) {\n                const sanitizedElement = Object.values(NON_ZERO_ELEMENT_MAPPING).find((e) => effectElement === e);\n                if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                    element = sanitizedElement;\n                }\n                else {\n                    element = BuffConditionElement.Unknown;\n                }\n            }\n        }\n        const results = [];\n        if (element) {\n            results.push(Object.assign({ id: `proc:32:element shift-${element}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            chance = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(effect['clear buff chance%']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:33:buff wipe', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        const originalId = '34';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatDrainLow = 0, flatDrainHigh = 0;\n        let percentDrainLow = 0, percentDrainHigh = 0;\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n            flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n            flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n            percentDrainLow = parseNumberOrDefault(rawPercentLow);\n            percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n            flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n            percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n            percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n            chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n        }\n        const results = [];\n        if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:bc drain-flat', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: flatDrainLow,\n                    drainHigh: flatDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:bc drain-percent', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: percentDrainLow,\n                    drainHigh: percentDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'invalidate LS chance%',\n            effectTurnDurationKey: 'invalidate LS turns (60)',\n            buffId: 'proc:36:ls lock',\n            originalId: '36',\n        });\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const positionX = parseNumberOrDefault(rawPositionX);\n        const positionY = parseNumberOrDefault(rawPositionY);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const results = [];\n        if (summonGroup || summonId) {\n            results.push(Object.assign({ id: 'proc:37:summon', originalId,\n                sources,\n                effectDelay, value: {\n                    summonGroup,\n                    summonId,\n                    positionX,\n                    positionY,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('38', (effect, context, injectionContext) => {\n        const originalId = '38';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 9);\n            const extraParams = splitParams.slice(9);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else if (Array.isArray(effect['ailments cured'])) {\n            const effectAilmentsCured = effect['ailments cured'];\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                if (effectAilmentsCured.includes(effectKey)) {\n                    curedAilments.push(ailment);\n                }\n            });\n            if (effectAilmentsCured.length > curedAilments.length) {\n                const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                for (let i = 0; i < unknownAilmentCount; ++i) {\n                    curedAilments.push(Ailment.Unknown);\n                }\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:cleanse-${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('39', (effect, context, injectionContext) => {\n        const originalId = '39';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const elements = [];\n        let mitigation = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            const rawElementsMitigated = params.slice(0, 6);\n            mitigation = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            rawElementsMitigated.forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    elements.push(NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            Object.values(NON_ZERO_ELEMENT_MAPPING).forEach((element) => {\n                if (effect[`mitigate ${element} attacks`]) {\n                    elements.push(element);\n                }\n            });\n            mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n            turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n        }\n        const results = [];\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                results.push(Object.assign({ id: `proc:39:mitigate-${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            });\n        }\n        else if (mitigation !== 0) {\n            results.push(Object.assign({ id: 'proc:39:mitigate-unknown', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:mitigate-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            for (let index = 0; index < 8; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n            turnDuration = parseNumberOrDefault(params[8]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken% buff';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = `${ailment} buff`;\n                }\n                else {\n                    effectKey = `${ailment}% buff`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:add ailment-${ailment}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: chance }, targetData)));\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                duration: turnDuration,\n                buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:add ailment-${a}`),\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const params = {\n            'atkLow%': rawModLow,\n            'atkHigh%': rawModHigh,\n            flatAtk: rawFlatAtk,\n        };\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        let results;\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results = [\n                Object.assign({ id: 'proc:42:sacrificial attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData),\n                {\n                    id: 'proc:42:instant death',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: true,\n                    targetArea: TargetArea.Single,\n                    targetType: TargetType.Self,\n                },\n            ];\n        }\n        else {\n            results = [];\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        const originalId = '43';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let overdriveFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n            overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n        }\n        const results = [];\n        if (overdriveFill !== 0) {\n            results.push(Object.assign({ id: 'proc:43:burst od fill', originalId,\n                sources,\n                effectDelay, value: overdriveFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const damageParams = {\n            'atk%': '0',\n            flatAtk: '0',\n            'dmg%': '0',\n        };\n        let affectsElement = false, unitIndex = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n            [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n            unitIndex = parseNumberOrDefault(rawUnitIndex);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            damageParams['atk%'] = effect['dot atk%'];\n            damageParams.flatAtk = effect['dot flat atk'];\n            damageParams['dmg%'] = effect['dot dmg%'];\n            affectsElement = !!(effect['dot element affected']);\n            unitIndex = parseNumberOrDefault(effect['dot unit index']);\n            turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n        }\n        const filteredDamageParams = Object.entries(damageParams)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (Object.keys(filteredDamageParams).length > 0) {\n            results.push(Object.assign({ id: 'proc:44:damage over time', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                    unitIndex }) }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:44:damage over time'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('45', (effect, context, injectionContext) => {\n        const originalId = '45';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let bb = 0, sbb = 0, ubb = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            bb = parseNumberOrDefault(rawBb);\n            sbb = parseNumberOrDefault(rawSbb);\n            ubb = parseNumberOrDefault(rawUbb);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            bb = parseNumberOrDefault(effect['bb atk% buff']);\n            sbb = parseNumberOrDefault(effect['sbb atk% buff']);\n            ubb = parseNumberOrDefault(effect['ubb atk% buff']);\n            turnDuration = parseNumberOrDefault(effect['buff turns (72)']);\n        }\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:attack boost-bb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:attack boost-sbb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:attack boost-ubb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: ubb }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:45:attack boost-${type}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('46', (effect, context, injectionContext) => {\n        const originalId = '46';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawHpLow, rawHpHigh, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const hpLow = parseNumberOrDefault(rawHpLow);\n        const hpHigh = parseNumberOrDefault(rawHpHigh);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (hpLow !== 0 || hpHigh !== 0 || hits !== 0 || distribution !== 0) {\n            const entry = Object.assign({ id: 'proc:46:non-lethal proportional attack', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (hpLow !== 0 || hpHigh !== 0) {\n                entry.value = {\n                    'hpDamageLow%': hpLow,\n                    'hpDamageHigh%': hpHigh,\n                    hits,\n                    distribution,\n                };\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('47', (effect, context, injectionContext) => {\n        const originalId = '47';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'baseAtk%': '0',\n            'maxAddedAtk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let proportionalMode = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawMaxAttackValue, rawProportionalMode;\n            [params['baseAtk%'], rawMaxAttackValue, rawProportionalMode, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue) - parseNumberOrDefault(params['baseAtk%']);\n            proportionalMode = rawProportionalMode === '1' ? 'lost' : 'remaining';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['baseAtk%'] = effect['bb base atk%'];\n            params['maxAddedAtk%'] = effect['bb added atk% based on hp'];\n            proportionalMode = effect['bb added atk% proportional to hp'] || 'unknown';\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:47:hp scaled attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { proportionalMode,\n                    hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('48', (effect, context, injectionContext) => {\n        const originalId = '48';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawBasePercentHpLow, rawBasePercentHpHigh, rawCurrentPercentHpLow, rawCurrentPercentHpHigh, rawFixedDamage, rawChance, rawIsLethal, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const basePercentHpLow = parseNumberOrDefault(rawBasePercentHpLow);\n        const basePercentHpHigh = parseNumberOrDefault(rawBasePercentHpHigh);\n        const currentPercentHpLow = parseNumberOrDefault(rawCurrentPercentHpLow);\n        const currentPercentHpHigh = parseNumberOrDefault(rawCurrentPercentHpHigh);\n        const fixedDamage = parseNumberOrDefault(rawFixedDamage);\n        const chance = parseNumberOrDefault(rawChance);\n        const isLethal = rawIsLethal === '1';\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        /**\n         * Current assumption is that each set of parameters results in a separate attack\n         * due to no known skills having more than one of each variant.\n         */\n        const results = [];\n        const createAttackOfType = (type, valueProperties) => (Object.assign({ id: `proc:48:piercing attack-${type}`, originalId,\n            sources,\n            effectDelay, value: Object.assign(Object.assign({}, valueProperties), { isLethal,\n                chance,\n                hits,\n                distribution }) }, targetData));\n        if (basePercentHpLow !== 0 || basePercentHpHigh !== 0) {\n            results.push(createAttackOfType('base', {\n                'hpDamageLow%': basePercentHpLow,\n                'hpDamageHigh%': basePercentHpHigh,\n            }));\n        }\n        if (currentPercentHpLow !== 0 || currentPercentHpHigh !== 0) {\n            results.push(createAttackOfType('current', {\n                'hpDamageLow%': currentPercentHpLow,\n                'hpDamageHigh%': currentPercentHpHigh,\n            }));\n        }\n        if (fixedDamage !== 0) {\n            results.push(createAttackOfType('fixed', {\n                value: fixedDamage,\n            }));\n        }\n        if (results.length === 0 && (hits !== 0 || distribution !== 0)) {\n            results.push(createAttackOfType('unknown', {}));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('49', (effect, context, injectionContext) => {\n        const originalId = '49';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawChance, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const chance = parseNumberOrDefault(rawChance);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:49:chance instant death', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('50', (effect, context, injectionContext) => {\n        const originalId = '50';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawDamageLow, rawDamageHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const reflectedDamageLow = parseNumberOrDefault(rawDamageLow);\n        const reflectedDamageHigh = parseNumberOrDefault(rawDamageHigh);\n        const chance = parseNumberOrDefault(rawChance);\n        const turnDuration = parseNumberOrDefault(rawTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const hasAnyRangeValues = reflectedDamageLow !== 0 || reflectedDamageHigh !== 0;\n        const results = [];\n        if (hasAnyRangeValues) {\n            results.push(Object.assign({ id: 'proc:50:chance damage reflect', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    'reflectedDamageLow%': reflectedDamageLow,\n                    'reflectedDamageHigh%': reflectedDamageHigh,\n                    chance,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:50:chance damage reflect'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('51', (effect, context, injectionContext) => {\n        const originalId = '51';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedReductions = [];\n        let debuffTurnDuration = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            [\n                { type: Ailment.AttackReduction, reductionValue: parseNumberOrDefault(params[0]), chance: parseNumberOrDefault(params[3]) },\n                { type: Ailment.DefenseReduction, reductionValue: parseNumberOrDefault(params[1]), chance: parseNumberOrDefault(params[4]) },\n                { type: Ailment.RecoveryReduction, reductionValue: parseNumberOrDefault(params[2]), chance: parseNumberOrDefault(params[5]) },\n            ].forEach(({ type, reductionValue, chance }) => {\n                if (reductionValue !== 0 || chance !== 0) {\n                    inflictedReductions.push({ type, reductionValue, chance });\n                }\n            });\n            debuffTurnDuration = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            [\n                { type: Ailment.AttackReduction, reductionValueKey: 'inflict atk% debuff (2)', chanceKey: 'inflict atk% debuff chance% (74)' },\n                { type: Ailment.DefenseReduction, reductionValueKey: 'inflict def% debuff (4)', chanceKey: 'inflict def% debuff chance% (75)' },\n                { type: Ailment.RecoveryReduction, reductionValueKey: 'inflict rec% debuff (6)', chanceKey: 'inflict rec% debuff chance% (76)' },\n            ].forEach(({ type, reductionValueKey, chanceKey }) => {\n                const reductionValue = parseNumberOrDefault(effect[reductionValueKey]);\n                const chance = parseNumberOrDefault(effect[chanceKey]);\n                if (reductionValue !== 0 || chance !== 0) {\n                    inflictedReductions.push({ type, reductionValue, chance });\n                }\n            });\n            debuffTurnDuration = parseNumberOrDefault(effect['stat% debuff turns']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedReductions.map(({ type, reductionValue, chance }) => (Object.assign({ id: `proc:51:add to attack-${type}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: {\n                reductionValue,\n                chance,\n                debuffTurnDuration,\n            } }, targetData)));\n        if (results.length === 0 && (isTurnDurationBuff(context, turnDuration, injectionContext) || isTurnDurationBuff(context, debuffTurnDuration, injectionContext))) {\n            // manually create turn duration buff to account for debuff turn duration\n            results.push(Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n                sources, value: {\n                    buffs: [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction].map((a) => `proc:51:add to attack-${a}`),\n                    duration: turnDuration,\n                    debuffTurnDuration: debuffTurnDuration,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('52', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'bb gauge fill rate% buff',\n            effectTurnDurationKey: 'buff turns (77)',\n            buffId: 'proc:52:bc efficacy',\n            originalId: '52',\n        });\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        const originalId = '53';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const inflictionChances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    inflictionChances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['counter inflict ailment turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(inflictionChances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:53:inflict on hit-${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration, conditions: { whenAttacked: true } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:53:inflict on hit-${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('54', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'crit multiplier%',\n            effectTurnDurationKey: 'buff turns (84)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            buffId: 'proc:54:critical damage boost',\n            originalId: '54',\n        });\n    });\n    map.set('55', (effect, context, injectionContext) => {\n        const originalId = '55';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let elements;\n        let damageBoost = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => NON_ZERO_ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            damageBoost = parseNumberOrDefault(params[6]) * 100;\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            elements = Object.values(NON_ZERO_ELEMENT_MAPPING).filter((element) => !!effect[`${element} units do extra elemental weakness dmg`]);\n            damageBoost = parseNumberOrDefault(effect['elemental weakness multiplier%']);\n            turnDuration = parseNumberOrDefault(effect['elemental weakness buff turns']);\n        }\n        let results = [];\n        if (damageBoost !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `proc:55:elemental weakness damage-${element}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: damageBoost }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'proc:55:elemental weakness damage-unknown', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: damageBoost }, targetData));\n            }\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:55:elemental weakness damage-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('56', (effect, context, injectionContext) => {\n        const originalId = '56';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let chance = 0, recoveredHpPercent = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawChance, rawRecoverHp, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            chance = parseNumberOrDefault(rawChance);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoverHp);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(effect['angel idol recover chance%']);\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            turnDuration = parseNumberOrDefault(effect['angel idol buff turns (91)']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:56:chance ko resistance', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: { 'recoveredHp%': recoveredHpPercent, chance } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:56:chance ko resistance'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('57', (effect, context, injectionContext) => {\n        const originalId = '57';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let bcBaseResist = 0, bcBuffResist = 0;\n        let hcBaseResist = 0, hcBuffResist = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawBcBaseResist, rawBcBuffResist, rawHcBaseResist, rawHcBuffResist, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            bcBaseResist = parseNumberOrDefault(rawBcBaseResist);\n            bcBuffResist = parseNumberOrDefault(rawBcBuffResist);\n            hcBaseResist = parseNumberOrDefault(rawHcBaseResist);\n            hcBuffResist = parseNumberOrDefault(rawHcBuffResist);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            // Deathmax's datamine doesn't parse HC drop resistance\n            bcBaseResist = parseNumberOrDefault(effect['base bc drop% resist buff']);\n            bcBuffResist = parseNumberOrDefault(effect['buffed bc drop% resist buff']);\n            turnDuration = parseNumberOrDefault(effect['bc drop% resist buff turns (92)']);\n        }\n        const results = [];\n        if (bcBaseResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:bc drop resistance-base', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bcBaseResist }, targetData));\n        }\n        if (bcBuffResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:bc drop resistance-buff', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bcBuffResist }, targetData));\n        }\n        if (hcBaseResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:hc drop resistance-base', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: hcBaseResist }, targetData));\n        }\n        if (hcBuffResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:hc drop resistance-buff', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: hcBuffResist }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [\n                    'proc:57:bc drop resistance-base',\n                    'proc:57:bc drop resistance-buff',\n                    'proc:57:hc drop resistance-base',\n                    'proc:57:hc drop resistance-buff',\n                ],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('58', (effect, context, injectionContext) => {\n        const originalId = '58';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let damageIncrease = 0, chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            damageIncrease = parseNumberOrDefault(effect['spark dmg% received']);\n            chance = parseNumberOrDefault(effect['spark dmg received apply%']);\n            turnDuration = parseNumberOrDefault(effect['spark dmg received debuff turns (94)']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:58:spark vulnerability', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: { 'sparkDamage%': damageIncrease, chance } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:58:spark vulnerability'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('59', (effect, context, injectionContext) => {\n        const originalId = '59';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const bb = parseNumberOrDefault(rawBb);\n        const sbb = parseNumberOrDefault(rawSbb);\n        const ubb = parseNumberOrDefault(rawUbb);\n        const turnDuration = parseNumberOrDefault(rawTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'proc:59:attack reduction-bb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'proc:59:attack reduction-sbb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'proc:59:attack reduction-ubb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: ubb }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:59:attack reduction-${type}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('61', (effect, context, injectionContext) => {\n        const originalId = '61';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'baseAtk%': '0',\n            'maxAddedAtk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawMaxAttackValue;\n            [params['baseAtk%'], rawMaxAttackValue, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            params['baseAtk%'] = effect['bb base atk%'];\n            params['maxAddedAtk%'] = effect['bb max atk% based on ally bb gauge and clear bb gauges'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        let results;\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results = [\n                Object.assign({ id: 'proc:61:party bb gauge-scaled attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData),\n                {\n                    id: 'proc:61:party bc drain',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: true,\n                    targetArea: TargetArea.Aoe,\n                    targetType: TargetType.Party,\n                },\n            ];\n        }\n        else {\n            results = [];\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('62', (effect, context, injectionContext) => {\n        const originalId = '62';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let element;\n        let hp = 0, defense = 0, damageAbsorption = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawHp, rawDefense, rawDamageAbsorption, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            hp = parseNumberOrDefault(rawHp);\n            defense = parseNumberOrDefault(rawDefense);\n            damageAbsorption = parseNumberOrDefault(rawDamageAbsorption);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const effectElement = effect['elemental barrier element'];\n            element = (effectElement && Object.values(ELEMENT_MAPPING).find((e) => e === effectElement)) || BuffConditionElement.Unknown;\n            hp = parseNumberOrDefault(effect['elemental barrier hp']);\n            defense = parseNumberOrDefault(effect['elemental barrier def']);\n            damageAbsorption = parseNumberOrDefault(effect['elemental barrier absorb dmg%']);\n        }\n        const results = [];\n        if (hp !== 0 || defense !== 0 || damageAbsorption !== 0) {\n            results.push(Object.assign({ id: `proc:62:barrier-${element}`, originalId,\n                sources,\n                effectDelay, value: {\n                    hp,\n                    defense,\n                    'damageAbsorption%': damageAbsorption,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('64', (effect, context, injectionContext) => {\n        const originalId = '64';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            'addedAtkPerUse%': '0',\n            maxIncreases: '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params['addedAtkPerUse%'], params.maxIncreases, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params['addedAtkPerUse%'] = effect['bb atk% inc per use'];\n            params.maxIncreases = effect['bb atk% max number of inc'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:64:consecutive usage attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('65', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'atk% buff when enemy has ailment',\n            effectTurnDurationKey: 'atk% buff turns (110)',\n            buffId: 'proc:65:ailment attack boost',\n            originalId: '65',\n        });\n    });\n    map.set('66', (effect, context, injectionContext) => {\n        const originalId = '66';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHp = 0, chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, rawChance, ...extraParams] = splitEffectParams(effect);\n            recoveredHp = parseNumberOrDefault(rawRecoveredHp);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            recoveredHp = parseNumberOrDefault(effect['revive unit hp%']);\n            chance = parseNumberOrDefault(effect['revive unit chance%']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:66:chance revive', originalId,\n                sources,\n                effectDelay, value: { 'reviveToHp%': recoveredHp, chance } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport { getProcEffectToBuffMapping } from './proc-effect-mapping';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PROC_ID } from '../constants';\nimport isProcEffect from '../isProcEffect';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to {@link IBuff} format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given proc effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            originalId: id,\n            effectDelay: effect['effect delay time(ms)/frame'],\n            targetType: effect['target type'],\n            targetArea: effect['target area'],\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given proc effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Proc effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given proc effect object.\n */\nexport default function convertProcEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isProcEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId } from './buff-types';\nimport { createSourcesFromContext, parseNumberOrDefault, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from './_helpers';\nimport { TargetType, TargetArea } from '../../datamine-types';\nlet mapping;\n/**\n * @description Retrieve the conditional-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of conditional IDs to functions.\n */\nexport function getConditionalEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of conditional effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, }) => (Object.assign({ id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS, originalId,\n        sources, value: unknownParams }, targetData));\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            }));\n        }\n    };\n    const getDefaultTargetData = () => ({ targetType: TargetType.Self, targetArea: TargetArea.Single });\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const splitParams = typeof effect.params === 'string' ? effect.params.split('&') : [];\n        const targetData = getDefaultTargetData();\n        const turnDuration = parseNumberOrDefault(effect.turnDuration);\n        return { targetData, sources, splitParams, turnDuration };\n    };\n    map.set('8', (effect, context, injectionContext) => {\n        const originalId = '8';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitParams;\n        const healLow = parseNumberOrDefault(rawHealLow);\n        const healHigh = parseNumberOrDefault(rawHealHigh);\n        const addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'conditional:8:gradual heal', originalId,\n                sources, duration: turnDuration, value: {\n                    healLow,\n                    healHigh,\n                    'addedRec%': addedRec,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawRecoverValue, ...extraParams] = splitParams;\n        const recoverValue = parseNumberOrDefault(rawRecoverValue);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [Object.assign({ id: 'conditional:12:guaranteed ko resistance', originalId,\n                sources, duration: turnDuration, value: recoverValue }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        const originalId = '36';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawMitigationValue, ...extraParams] = splitParams;\n        const mitigationValue = parseNumberOrDefault(rawMitigationValue);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [];\n        if (mitigationValue !== 0) {\n            results.push(Object.assign({ id: 'conditional:36:mitigation', originalId,\n                sources, duration: turnDuration, value: mitigationValue }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('91', (effect, context, injectionContext) => {\n        const originalId = '91';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawChance, rawHpRecover, ...extraParams] = splitParams;\n        const chance = parseNumberOrDefault(rawChance);\n        const hpRecover = parseNumberOrDefault(rawHpRecover);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'conditional:91:chance ko resistance', originalId,\n                sources, duration: turnDuration, value: {\n                    'hpRecover%': hpRecover,\n                    chance,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('133', (effect, context, injectionContext) => {\n        const originalId = '133';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawHealLow, rawHealHigh, rawChance, ...extraParams] = splitParams;\n        const healLow = parseNumberOrDefault(rawHealLow);\n        const healHigh = parseNumberOrDefault(rawHealHigh);\n        const chance = parseNumberOrDefault(rawChance);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'conditional:133:heal on hit', originalId,\n                sources, duration: turnDuration, value: {\n                    healLow,\n                    healHigh,\n                    chance,\n                }, conditions: { whenAttacked: true } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('153', (effect, context, injectionContext) => {\n        const originalId = '153';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawReductionValue, rawChance, rawDebuffTurnDuration, ...extraParams] = splitParams;\n        const reductionValue = parseNumberOrDefault(rawReductionValue);\n        const chance = parseNumberOrDefault(rawChance);\n        const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (reductionValue !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'conditional:153:chance inflict atk down on hit', originalId,\n                sources, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                }, conditions: { whenAttacked: true } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport { getConditionalEffectToBuffMapping } from './conditional-effect-mapping';\nimport { KNOWN_CONDITIONAL_ID } from '../constants';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to {@link IBuff} format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given conditional effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = effect.id || KNOWN_CONDITIONAL_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given conditional effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Conditional effect to extract buffs from\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertConditionalEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const conversionFunction = getConditionalEffectToBuffMapping(context.reloadMapping).get(effect.id);\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { UnitElement, UnitType, Ailment, UnitGender, TargetType, TargetArea } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { createSourcesFromContext, processExtraSkillConditions, getPassiveTargetData, parseNumberOrDefault, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from './_helpers';\nimport convertConditionalEffectToBuffs from './convertConditionalEffectToBuffs';\nimport convertProcEffectToBuffs from './convertProcEffectToBuffs';\nlet mapping;\n/**\n * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of passive IDs to functions.\n */\nexport function getPassiveEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n        X: BuffConditionElement.OmniParadigm,\n    };\n    const TYPE_MAPPING = {\n        1: UnitType.Lord,\n        2: UnitType.Anima,\n        3: UnitType.Breaker,\n        4: UnitType.Guardian,\n        5: UnitType.Oracle,\n        6: UnitType.Rex,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const TARGET_TYPE_MAPPING = {\n        1: TargetType.Party,\n        2: TargetType.Enemy,\n        3: TargetType.Self,\n    };\n    const TARGET_AREA_MAPPING = {\n        1: TargetArea.Single,\n        2: TargetArea.Aoe,\n    };\n    const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n    const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n    const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n        const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        return { conditionInfo, targetData, sources };\n    };\n    const convertConditionalEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n        const conversionFunction = (injectionContext && injectionContext.convertConditionalEffectToBuffs) || convertConditionalEffectToBuffs;\n        return conversionFunction(effect, context);\n    };\n    const convertProcEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n        const conversionFunction = (injectionContext && injectionContext.convertProcEffectToBuffs) || convertProcEffectToBuffs;\n        return conversionFunction(effect, context);\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n        sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n    };\n    let ThresholdType;\n    (function (ThresholdType) {\n        ThresholdType[\"Hp\"] = \"hp\";\n        ThresholdType[\"Bb\"] = \"bb gauge\";\n    })(ThresholdType || (ThresholdType = {}));\n    const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n        return {\n            threshold: parseNumberOrDefault(rawThreshold),\n            requireAbove: rawRequireAboveFlag === '1',\n            type: thresholdType,\n        };\n    };\n    const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n        let threshold = 0, requireAbove = false;\n        if (`${thresholdType} above % ${suffix}` in effect) {\n            threshold = parseNumberOrDefault(effect[`${thresholdType} above % ${suffix}`]);\n            requireAbove = true;\n        }\n        else {\n            threshold = parseNumberOrDefault(effect[`${thresholdType} below % ${suffix}`]);\n            requireAbove = false;\n        }\n        return { threshold, requireAbove, type: thresholdType };\n    };\n    const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n        let conditions;\n        if (type === ThresholdType.Hp) {\n            if (requireAbove) {\n                conditions = { hpGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { hpLessThanOrEqualTo: threshold };\n            }\n        }\n        else if (type === ThresholdType.Bb) {\n            if (requireAbove) {\n                conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { bbGaugeLessThanOrEqualTo: threshold };\n            }\n        }\n        return conditions;\n    };\n    const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let value = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseParamValue(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect[effectKey]);\n        }\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let valueLow, valueHigh, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            valueLow = parseParamValue(rawLowValue);\n            valueHigh = parseParamValue(rawHighValue);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n            valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n            chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n        }\n        const results = [];\n        if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources, value: {\n                    [buffKeyLow]: valueLow,\n                    [buffKeyHigh]: valueHigh,\n                    chance,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            elements: [],\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let element1, element2;\n            [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            [element1, element2].forEach((elementValue) => {\n                if (elementValue && elementValue !== '0') {\n                    stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            if (Array.isArray(typedEffect['elements buffed'])) {\n                stats.elements = typedEffect['elements buffed'];\n            }\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:elemental-${stat}`, originalId,\n            sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n        if (stats.elements.length > 0) {\n            stats.elements.forEach((element) => {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                    }\n                });\n            });\n        }\n        else {\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                }\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            unitType: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let unitType;\n            [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            if (unitType && unitType !== '0') {\n                stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.unitType = typedEffect['unit type buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetUnitType = stats.unitType || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:3:type based-${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:4:resist-${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let element;\n        let mitigation = '0';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n            if (element !== BuffConditionElement.Unknown) {\n                mitigation = typedEffect[`${element} resist%`];\n            }\n        }\n        const value = parseNumberOrDefault(mitigation);\n        if (value !== 0) {\n            results.push(Object.assign({ id: `passive:5:mitigate-${element}`, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'dmg% mitigation',\n            buffId: 'passive:8:mitigation',\n            originalId: '8',\n        });\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bc fill per turn',\n            buffId: 'passive:9:gradual bc fill',\n            originalId: '9',\n        });\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'hc effectiveness%',\n            buffId: 'passive:10:hc efficacy',\n            originalId: '10',\n        });\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:11:hp conditional-${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                const entry = Object.assign({ id: `passive:12:hp conditional drop boost-${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '13',\n            effectKeyLow: 'bc fill on enemy defeat low',\n            effectKeyHigh: 'bc fill on enemy defeat high',\n            effectKeyChance: 'bc fill on enemy defeat%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            buffId: 'passive:13:bc fill on enemy defeat',\n        });\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageReduction, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            damageReduction = parseNumberOrDefault(rawReduction);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n            chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n        }\n        const results = [];\n        if (damageReduction !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:14:chance mitigation', originalId,\n                sources, value: {\n                    value: damageReduction,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('15', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '15',\n            effectKeyLow: 'hp% recover on enemy defeat low',\n            effectKeyHigh: 'hp% recover on enemy defeat high',\n            effectKeyChance: 'hp% recover on enemy defeat chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            defaultEffectChance: 100,\n            buffId: 'passive:15:heal on enemy defeat',\n        });\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n            healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:16:heal on win', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '17',\n            effectKeyLow: 'hp drain% low',\n            effectKeyHigh: 'hp drain% high',\n            effectKeyChance: 'hp drain chance%',\n            buffKeyLow: 'drainHealLow',\n            buffKeyHigh: 'drainHealHigh',\n            buffId: 'passive:17:hp absorb',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        const originalId = '19';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:19:drop boost-${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const originalId = '20';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            let params = splitEffectParams(typedEffect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(typedEffect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = [];\n        inflictedAilments.forEach(({ ailment, chance }) => {\n            if (chance !== 0) {\n                results.push(Object.assign({ id: `passive:20:chance inflict-${ailment}`, originalId,\n                    sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('21', (effect, context, injectionContext) => {\n        const originalId = '21';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let rawDuration, extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['first x turns atk% (1)'];\n            stats.def = typedEffect['first x turns def% (3)'];\n            stats.rec = typedEffect['first x turns rec% (5)'];\n            stats.crit = typedEffect['first x turns crit% (7)'];\n            turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:21:first turn-${stat}`, originalId,\n                    sources,\n                    value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let fillLow, fillHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n            fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n        }\n        const results = [];\n        if (fillLow !== 0 || fillHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:23:bc fill on win', originalId,\n                sources, value: {\n                    fillLow,\n                    fillHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '24',\n            effectKeyLow: 'dmg% to hp when attacked low',\n            effectKeyHigh: 'dmg% to hp when attacked high',\n            effectKeyChance: 'dmg% to hp when attacked chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:24:heal on hit',\n        });\n    });\n    map.set('25', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '25',\n            effectKeyLow: 'bc fill when attacked low',\n            effectKeyHigh: 'bc fill when attacked high',\n            effectKeyChance: 'bc fill when attacked%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:25:bc fill on hit',\n        });\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '26',\n            effectKeyLow: 'dmg% reflect low',\n            effectKeyHigh: 'dmg% reflect high',\n            effectKeyChance: 'dmg% reflect chance%',\n            buffKeyLow: 'damageReflectLow',\n            buffKeyHigh: 'damageReflectHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:26:chance damage reflect',\n        });\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'target% chance',\n            buffId: 'passive:27:target chance change',\n            originalId: '27',\n        });\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let value = 0;\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseNumberOrDefault(rawValue);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect['target% chance']);\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n        }\n        const results = [];\n        if (value !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            const entry = Object.assign({ id: 'passive:28:hp conditional target chance change', originalId,\n                sources,\n                value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'ignore def%',\n            buffId: 'passive:29:chance def ignore',\n            originalId: '29',\n        });\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:30:bb gauge conditional-${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let sparkDamageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawSparkDamageBoost;\n            [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n            });\n        }\n        const results = [];\n        if (sparkDamageBoost !== 0) {\n            results.push(Object.assign({ id: 'passive:31:spark-damage', originalId,\n                sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:31:spark-${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bb gauge fill rate%',\n            buffId: 'passive:32:bc efficacy',\n            originalId: '32',\n        });\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh, addedRec;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n            healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n            addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:33:gradual heal', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                    'addedRec%': addedRec,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'crit multiplier%',\n            buffId: 'passive:34:critical damage',\n            originalId: '34',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n        });\n    });\n    map.set('35', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '35',\n            effectKeyLow: 'bc fill when attacking low',\n            effectKeyHigh: 'bc fill when attacking high',\n            effectKeyChance: 'bc fill when attacking%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onNormalAttack: true }),\n            buffId: 'passive:35:bc fill on normal attack',\n        });\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        const originalId = '36';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let additionalActions = 0, damageModifier = 0, chance = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            additionalActions = parseNumberOrDefault(rawAdditionalActions);\n            damageModifier = parseNumberOrDefault(rawDamageModifier);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n        }\n        const results = [];\n        if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:36:extra action', originalId,\n                sources, value: {\n                    additionalActions,\n                    damageModifier,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let hitIncreasePerHit = 0, extraHitDamage = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'passive:37:hit count boost', originalId,\n                sources, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawConvertedStat;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const rawConvertedStat = typedEffect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            coreStatProperties.forEach((statType) => {\n                const effectKey = `${statType}% buff`;\n                if (effectKey in typedEffect) {\n                    stats[statType] = typedEffect[effectKey];\n                }\n            });\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:40:converted-${stat}`, originalId,\n                    sources, value: {\n                        convertedStat,\n                        value,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('41', (effect, context, injectionContext) => {\n        const originalId = '41';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            minimumElements: '0',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.minimumElements = typedEffect['unique elements required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const minimumElements = parseNumberOrDefault(stats.minimumElements);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:41:unique element count-${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minumumUniqueElements: minimumElements }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const GENDER_MAPPING = {\n            0: UnitGender.Other,\n            1: UnitGender.Male,\n            2: UnitGender.Female,\n        };\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            gender: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawGender;\n            [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.gender = typedEffect['gender required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetGender = stats.gender || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:42:gender-${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'take 1 dmg%',\n            buffId: 'passive:43:chance damage to one',\n            originalId: '43',\n        });\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp buff'];\n            stats.atk = typedEffect['atk buff'];\n            stats.def = typedEffect['def buff'];\n            stats.rec = typedEffect['rec buff'];\n            stats.crit = typedEffect['crit buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:44:flat-${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('45', (effect, context, injectionContext) => {\n        const originalId = '45';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let baseResist = 0, buffResist = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n            baseResist = parseNumberOrDefault(rawBaseResist);\n            buffResist = parseNumberOrDefault(rawBuffResist);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            baseResist = parseNumberOrDefault(typedEffect['base crit% resist']);\n            buffResist = parseNumberOrDefault(typedEffect['buff crit% resist']);\n        }\n        const results = [];\n        if (baseResist !== 0) {\n            results.push(Object.assign({ id: 'passive:45:critical damage reduction-base', originalId,\n                sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (buffResist !== 0) {\n            results.push(Object.assign({ id: 'passive:45:critical damage reduction-buff', originalId,\n                sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('46', (effect, context, injectionContext) => {\n        const originalId = '46';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const availableStats = ['atk', 'def', 'rec'];\n        const stats = [];\n        let proportionalMode = 'unknown';\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            availableStats.forEach((stat, index) => {\n                const baseValue = parseNumberOrDefault(params[index * 2]);\n                const addedValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                if (baseValue !== 0 || addedValue !== 0) {\n                    stats.push({\n                        stat,\n                        baseValue,\n                        addedValue,\n                    });\n                }\n            });\n            proportionalMode = params[6] === '1' ? 'lost' : 'remaining';\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            availableStats.forEach((stat) => {\n                const baseValue = parseNumberOrDefault(typedEffect[`${stat}% base buff`]);\n                const addedValue = parseNumberOrDefault(typedEffect[`${stat}% extra buff based on hp`]);\n                if (baseValue !== 0 || addedValue !== 0) {\n                    stats.push({\n                        stat,\n                        baseValue,\n                        addedValue,\n                    });\n                }\n            });\n            proportionalMode = typedEffect['buff proportional to hp'] || 'unknown';\n        }\n        const results = stats.map(({ stat, baseValue, addedValue }) => (Object.assign({ id: `passive:46:hp scaled-${stat}`, originalId,\n            sources, value: {\n                baseValue,\n                addedValue,\n                proportionalMode,\n            }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('47', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '47',\n            effectKeyLow: 'bc fill on spark low',\n            effectKeyHigh: 'bc fill on spark high',\n            effectKeyChance: 'bc fill on spark%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'passive:47:bc fill on spark',\n        });\n    });\n    map.set('48', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'reduced bb bc cost%',\n            buffId: 'passive:48:bc cost reduction',\n            originalId: '48',\n        });\n    });\n    map.set('49', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '49',\n            effectKeyLow: 'reduced bb bc use% low',\n            effectKeyHigh: 'reduced bb bc use% high',\n            effectKeyChance: 'reduced bb bc use chance%',\n            buffKeyLow: 'reducedUseLow%',\n            buffKeyHigh: 'reducedUseHigh%',\n            buffId: 'passive:49:bb gauge consumption reduction',\n        });\n    });\n    map.set('50', (effect, context, injectionContext) => {\n        const originalId = '50';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let damageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            damageBoost = parseNumberOrDefault(params[6]) * 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`${element} units do extra elemental weakness dmg`]);\n            damageBoost = parseNumberOrDefault(typedEffect['elemental weakness multiplier%']);\n        }\n        let results = [];\n        if (damageBoost !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:50:elemental weakness damage-${element}`, originalId,\n                sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:50:elemental weakness damage-unknown', originalId,\n                    sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        const originalId = '53';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let ResistType;\n        (function (ResistType) {\n            ResistType[\"CriticalDamage\"] = \"critical damage\";\n            ResistType[\"ElementDamage\"] = \"element damage\";\n            ResistType[\"CriticalHitRate\"] = \"critical rate\";\n        })(ResistType || (ResistType = {}));\n        const resistances = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseCritChanceResist, rawBuffCritChanceResist, ...extraParams] = splitEffectParams(typedEffect);\n            [\n                { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                { resistType: ResistType.CriticalHitRate, base: parseNumberOrDefault(rawBaseCritChanceResist), buff: parseNumberOrDefault(rawBuffCritChanceResist) },\n            ].forEach(({ resistType, base, buff }) => {\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            [\n                { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist%', buffKey: 'crit dmg buffed damage resist%' },\n                { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist%', buffKey: 'strong buffed element damage resist%' },\n                { resistType: ResistType.CriticalHitRate, baseKey: 'crit chance base resist%', buffKey: 'crit chance buffed resist%' },\n            ].forEach(({ resistType, baseKey, buffKey }) => {\n                const base = parseNumberOrDefault(typedEffect[baseKey]);\n                const buff = parseNumberOrDefault(typedEffect[buffKey]);\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n        }\n        const results = [];\n        resistances.forEach(({ resistType, base, buff }) => {\n            if (base !== 0) {\n                results.push(Object.assign({ id: `passive:53:${resistType}-base`, originalId,\n                    sources, value: base, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buff !== 0) {\n                results.push(Object.assign({ id: `passive:53:${resistType}-buff`, originalId,\n                    sources, value: buff, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('55', (effect, context, injectionContext) => {\n        const originalId = '55';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                id: params[0],\n                params: params[1],\n                turnDuration: parseNumberOrDefault(params[5]),\n            }, context, injectionContext);\n            const maxTriggerCount = parseNumberOrDefault(params[2]);\n            const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], params[4], ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(6), 6, injectionContext);\n            if (triggeredBuffs.length > 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: 'passive:55:hp conditional', originalId,\n                    sources, value: {\n                        triggeredBuffs,\n                        maxTriggerCount,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('58', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'guard increase mitigation%',\n            buffId: 'passive:58:guard mitigation',\n            originalId: '58',\n        });\n    });\n    map.set('59', (effect, context, injectionContext) => {\n        const originalId = '59';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let percentFill, flatFill;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled when attacked while guarded']);\n            flatFill = parseNumberOrDefault(typedEffect['bc filled when attacked while guarded']);\n        }\n        const results = [];\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-percent', originalId,\n                sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n        }\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-flat', originalId,\n                sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('61', (effect, context, injectionContext) => {\n        const originalId = '61';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let percentFill, flatFill;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled on guard']);\n            flatFill = parseNumberOrDefault(typedEffect['bc filled on guard']);\n        }\n        const results = [];\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'passive:61:bc fill on guard-percent', originalId,\n                sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n        }\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'passive:61:bc fill on guard-flat', originalId,\n                sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('62', (effect, context, injectionContext) => {\n        const originalId = '62';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let mitigation = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            mitigation = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n            mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n        }\n        let results = [];\n        if (mitigation !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:62:mitigate-${element}`, originalId,\n                sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:62:mitigate-unknown', originalId,\n                    sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('63', (effect, context, injectionContext) => {\n        const originalId = '63';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let mitigation = 0, turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            mitigation = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n            mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n            turnDuration = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks buff for first x turns']);\n        }\n        let results = [];\n        if (mitigation !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:63:first turn mitigate-${element}`, originalId,\n                sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:63:first turn mitigate-unknown', originalId,\n                    sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('64', (effect, context, injectionContext) => {\n        const originalId = '64';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let bb = 0, sbb = 0, ubb = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBb, rawSbb, rawUbb, ...extraParams] = splitEffectParams(typedEffect);\n            bb = parseNumberOrDefault(rawBb);\n            sbb = parseNumberOrDefault(rawSbb);\n            ubb = parseNumberOrDefault(rawUbb);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            bb = parseNumberOrDefault(typedEffect['bb atk% buff']);\n            sbb = parseNumberOrDefault(typedEffect['sbb atk% buff']);\n            ubb = parseNumberOrDefault(typedEffect['ubb atk% buff']);\n        }\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'passive:64:attack boost-bb', originalId,\n                sources, conditions: Object.assign({}, conditionInfo), value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'passive:64:attack boost-sbb', originalId,\n                sources, conditions: Object.assign({}, conditionInfo), value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'passive:64:attack boost-ubb', originalId,\n                sources, conditions: Object.assign({}, conditionInfo), value: ubb }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('65', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '65',\n            effectKeyLow: 'bc fill on crit min',\n            effectKeyHigh: 'bc fill on crit max',\n            effectKeyChance: 'bc fill on crit%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onCriticalHit: true }),\n            buffId: 'passive:65:bc fill on crit',\n        });\n    });\n    map.set('66', (effect, context, injectionContext) => {\n        const originalId = '66';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let triggeredBuffs = [];\n        let triggerOnBb = false, triggerOnSbb = false, triggerOnUbb = false;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawProcIds = '', rawParams = '', rawTargetTypes = '', rawTargetAreas = '', rawStartFrames = '', rawTriggerOnBb, rawTriggerOnSbb, rawTriggerOnUbb, ...extraParams] = splitEffectParams(typedEffect);\n            const allProcIds = rawProcIds.split('~');\n            const allProcParams = rawParams.split('~');\n            const allTargetTypes = rawTargetTypes.split('~');\n            const allTargetAreas = rawTargetAreas.split('~');\n            const allStartFrames = rawStartFrames.split('~');\n            const FRAME_IN_MS = (16 + (2 / 3));\n            allProcIds.forEach((procId, index) => {\n                const startFrame = allStartFrames[index];\n                const targetArea = allTargetAreas[index];\n                const targetType = allTargetTypes[index];\n                const params = (allProcParams[index] || '').replace(/&/g, ',');\n                const effectDelayInMs = (parseNumberOrDefault(startFrame) * FRAME_IN_MS).toFixed(1);\n                const procEffect = {\n                    'proc id': procId,\n                    params,\n                    'effect delay time(ms)/frame': `${effectDelayInMs}/${startFrame}`,\n                    'target area': TARGET_AREA_MAPPING[targetArea] || targetArea,\n                    'target type': TARGET_TYPE_MAPPING[targetType] || targetType,\n                };\n                const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                triggeredBuffs = triggeredBuffs.concat(procBuffs);\n            });\n            triggerOnBb = rawTriggerOnBb === '1';\n            triggerOnSbb = rawTriggerOnSbb === '1';\n            triggerOnUbb = rawTriggerOnUbb === '1';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const triggeredEffects = typedEffect['triggered effect'];\n            if (Array.isArray(triggeredEffects)) {\n                triggeredEffects.forEach((procEffect) => {\n                    const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                    triggeredBuffs = triggeredBuffs.concat(procBuffs);\n                });\n            }\n            triggerOnBb = !!typedEffect['trigger on bb'];\n            triggerOnSbb = !!typedEffect['trigger on sbb'];\n            triggerOnUbb = !!typedEffect['trigger on ubb'];\n        }\n        const results = [];\n        if ((triggerOnBb || triggerOnSbb || triggerOnUbb) && triggeredBuffs.length > 0) {\n            const addBuffOfBurstType = (burstType) => {\n                results.push(Object.assign({ id: `passive:66:add effect to skill-${burstType}`, originalId,\n                    sources, value: triggeredBuffs, conditions: Object.assign({}, conditionInfo) }, targetData));\n            };\n            if (triggerOnBb) {\n                addBuffOfBurstType('bb');\n            }\n            if (triggerOnSbb) {\n                addBuffOfBurstType('sbb');\n            }\n            if (triggerOnUbb) {\n                addBuffOfBurstType('ubb');\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport isPassiveEffect from '../isPassiveEffect';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PASSIVE_ID } from '../constants';\nimport { getPassiveEffectToBuffMapping } from './passive-effect-mapping';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to {@link IBuff} format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given passive effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given passive effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Passive effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertPassiveEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isPassiveEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId, UnitStat, BuffStackType, IconId, } from './buff-types';\nimport { TargetArea } from '../../datamine-types';\nexport const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ TURN_DURATION_MODIFICATION: {\n        id: BuffId.TURN_DURATION_MODIFICATION,\n        name: 'Passive Turn Duration Modification',\n        stat: UnitStat.turnDurationModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [\n            (buff && buff.value &&\n                buff.value.duration &&\n                buff.value.duration < 0) ?\n                IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n        ],\n    }, NO_PARAMS_SPECIFIED: {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        name: 'No Parameters Specified',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_PASSIVE_EFFECT_ID: {\n        id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n        name: 'Unknown Passive Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_PASSIVE_BUFF_PARAMS: {\n        id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n        name: 'Unknown Passive Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'passive:1:hp': {\n        id: BuffId['passive:1:hp'],\n        name: 'Passive HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:1:atk': {\n        id: BuffId['passive:1:atk'],\n        name: 'Passive Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:1:def': {\n        id: BuffId['passive:1:def'],\n        name: 'Passive Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:1:rec': {\n        id: BuffId['passive:1:rec'],\n        name: 'Passive Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:1:crit': {\n        id: BuffId['passive:1:crit'],\n        name: 'Passive Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    } }, (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:2:elemental-hp': {\n            id: BuffId['passive:2:elemental-hp'],\n            name: 'Passive Elemental HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:2:elemental-atk': {\n            id: BuffId['passive:2:elemental-atk'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:2:elemental-def': {\n            id: BuffId['passive:2:elemental-def'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:2:elemental-rec': {\n            id: BuffId['passive:2:elemental-rec'],\n            name: 'Passive Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:2:elemental-crit': {\n            id: BuffId['passive:2:elemental-crit'],\n            name: 'Passive Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let unitType = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    unitType = buff.conditions.targetUnitType || '';\n                }\n            }\n            if (typeof unitType !== 'string' || !unitType) {\n                unitType = 'unknown';\n            }\n            let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n            if (!unitType || !(iconKey in IconId)) {\n                iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:3:type based-hp': {\n            id: BuffId['passive:3:type based-hp'],\n            name: 'Passive Type-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:3:type based-atk': {\n            id: BuffId['passive:3:type based-atk'],\n            name: 'Passive Type-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:3:type based-def': {\n            id: BuffId['passive:3:type based-def'],\n            name: 'Passive Type-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:3:type based-rec': {\n            id: BuffId['passive:3:type based-rec'],\n            name: 'Passive Type-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:3:type based-crit': {\n            id: BuffId['passive:3:type based-crit'],\n            name: 'Passive Type-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:4:resist-poison': {\n        id: BuffId['passive:4:resist-poison'],\n        name: 'Passive Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:4:resist-weak': {\n        id: BuffId['passive:4:resist-weak'],\n        name: 'Passive Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:4:resist-sick': {\n        id: BuffId['passive:4:resist-sick'],\n        name: 'Passive Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:4:resist-injury': {\n        id: BuffId['passive:4:resist-injury'],\n        name: 'Passive Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:4:resist-curse': {\n        id: BuffId['passive:4:resist-curse'],\n        name: 'Passive Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:4:resist-paralysis': {\n        id: BuffId['passive:4:resist-paralysis'],\n        name: 'Passive Paralysis Resist',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:5:mitigate-fire': {\n        id: BuffId['passive:5:mitigate-fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:5:mitigate-water': {\n        id: BuffId['passive:5:mitigate-water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:5:mitigate-earth': {\n        id: BuffId['passive:5:mitigate-earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:5:mitigate-thunder': {\n        id: BuffId['passive:5:mitigate-thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:5:mitigate-light': {\n        id: BuffId['passive:5:mitigate-light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:5:mitigate-dark': {\n        id: BuffId['passive:5:mitigate-dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:5:mitigate-unknown': {\n        id: BuffId['passive:5:mitigate-unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:8:mitigation': {\n        id: BuffId['passive:8:mitigation'],\n        name: 'Passive Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:9:gradual bc fill': {\n        id: BuffId['passive:9:gradual bc fill'],\n        name: 'Passive Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:10:hc efficacy': {\n        id: BuffId['passive:10:hc efficacy'],\n        name: 'Passive HC Efficacy',\n        stat: UnitStat.hcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HCREC],\n    }, 'passive:11:hp conditional-atk': {\n        id: BuffId['passive:11:hp conditional-atk'],\n        name: 'Passive HP-Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n    }, 'passive:11:hp conditional-def': {\n        id: BuffId['passive:11:hp conditional-def'],\n        name: 'Passive HP-Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n    }, 'passive:11:hp conditional-rec': {\n        id: BuffId['passive:11:hp conditional-rec'],\n        name: 'Passive HP-Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n    }, 'passive:11:hp conditional-crit': {\n        id: BuffId['passive:11:hp conditional-crit'],\n        name: 'Passive HP-Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n    }, 'passive:12:hp conditional drop boost-bc': {\n        id: BuffId['passive:12:hp conditional drop boost-bc'],\n        name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n    }, 'passive:12:hp conditional drop boost-hc': {\n        id: BuffId['passive:12:hp conditional drop boost-hc'],\n        name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n    }, 'passive:12:hp conditional drop boost-item': {\n        id: BuffId['passive:12:hp conditional drop boost-item'],\n        name: 'Passive HP-Conditional Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n    }, 'passive:12:hp conditional drop boost-zel': {\n        id: BuffId['passive:12:hp conditional drop boost-zel'],\n        name: 'Passive HP-Conditional Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n    }, 'passive:12:hp conditional drop boost-karma': {\n        id: BuffId['passive:12:hp conditional drop boost-karma'],\n        name: 'Passive HP-Conditional Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n    }, 'passive:13:bc fill on enemy defeat': {\n        id: BuffId['passive:13:bc fill on enemy defeat'],\n        name: 'Passive BC Fill on Enemy Defeat',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:14:chance mitigation': {\n        id: BuffId['passive:14:chance mitigation'],\n        name: 'Passive Damage Reduction (Chance)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:15:heal on enemy defeat': {\n        id: BuffId['passive:15:heal on enemy defeat'],\n        name: 'Passive Heal on Enemy Defeat',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:16:heal on win': {\n        id: BuffId['passive:16:heal on win'],\n        name: 'Passive Heal on Battle Win',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:17:hp absorb': {\n        id: BuffId['passive:17:hp absorb'],\n        name: 'HP Absorption',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPABS],\n    }, 'passive:19:drop boost-bc': {\n        id: BuffId['passive:19:drop boost-bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'passive:19:drop boost-hc': {\n        id: BuffId['passive:19:drop boost-hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'passive:19:drop boost-item': {\n        id: BuffId['passive:19:drop boost-item'],\n        name: 'Passive Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'passive:19:drop boost-zel': {\n        id: BuffId['passive:19:drop boost-zel'],\n        name: 'Passive Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n    }, 'passive:19:drop boost-karma': {\n        id: BuffId['passive:19:drop boost-karma'],\n        name: 'Passive Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n    }, 'passive:20:chance inflict-poison': {\n        id: BuffId['passive:20:chance inflict-poison'],\n        name: 'Passive Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'passive:20:chance inflict-weak': {\n        id: BuffId['passive:20:chance inflict-weak'],\n        name: 'Passive Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'passive:20:chance inflict-sick': {\n        id: BuffId['passive:20:chance inflict-sick'],\n        name: 'Passive Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'passive:20:chance inflict-injury': {\n        id: BuffId['passive:20:chance inflict-injury'],\n        name: 'Passive Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'passive:20:chance inflict-curse': {\n        id: BuffId['passive:20:chance inflict-curse'],\n        name: 'Passive Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'passive:20:chance inflict-paralysis': {\n        id: BuffId['passive:20:chance inflict-paralysis'],\n        name: 'Passive Paralysis Infliction',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'passive:20:chance inflict-atk down': {\n        id: BuffId['passive:20:chance inflict-atk down'],\n        name: 'Passive Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'passive:20:chance inflict-def down': {\n        id: BuffId['passive:20:chance inflict-def down'],\n        name: 'Passive Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'passive:20:chance inflict-rec down': {\n        id: BuffId['passive:20:chance inflict-rec down'],\n        name: 'Passive Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'passive:20:chance inflict-unknown': {\n        id: BuffId['passive:20:chance inflict-unknown'],\n        name: 'Passive Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'passive:21:first turn-atk': {\n        id: BuffId['passive:21:first turn-atk'],\n        name: 'Attack Boost for X Turns',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:21:first turn-def': {\n        id: BuffId['passive:21:first turn-def'],\n        name: 'Defense Boost for X Turns',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:21:first turn-rec': {\n        id: BuffId['passive:21:first turn-rec'],\n        name: 'Recovery Boost for X Turns',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:21:first turn-crit': {\n        id: BuffId['passive:21:first turn-crit'],\n        name: 'Critical Hit Rate Boost for X Turns',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:23:bc fill on win': {\n        id: BuffId['passive:23:bc fill on win'],\n        name: 'Passive BC Fill on Battle Win',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:24:heal on hit': {\n        id: BuffId['passive:24:heal on hit'],\n        name: 'Passive Heal when Attacked (Chance)',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'passive:25:bc fill on hit': {\n        id: BuffId['passive:25:bc fill on hit'],\n        name: 'Passive BC Fill when Attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:26:chance damage reflect': {\n        id: BuffId['passive:26:chance damage reflect'],\n        name: 'Passive Damage Counter (Chance)',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'passive:27:target chance change': {\n        id: BuffId['passive:27:target chance change'],\n        name: 'Passive Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n    }, 'passive:28:hp conditional target chance change': {\n        id: BuffId['passive:28:hp conditional target chance change'],\n        name: 'Passive HP-Conditional Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n    }, 'passive:29:chance def ignore': {\n        id: BuffId['passive:29:chance def ignore'],\n        name: 'Passive Defense Ignore (Chance)',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'passive:30:bb gauge conditional-atk': {\n        id: BuffId['passive:30:bb gauge conditional-atk'],\n        name: 'Passive BB Gauge Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n    }, 'passive:30:bb gauge conditional-def': {\n        id: BuffId['passive:30:bb gauge conditional-def'],\n        name: 'Passive BB Gauge Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n    }, 'passive:30:bb gauge conditional-rec': {\n        id: BuffId['passive:30:bb gauge conditional-rec'],\n        name: 'Passive BB Gauge Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n    }, 'passive:30:bb gauge conditional-crit': {\n        id: BuffId['passive:30:bb gauge conditional-crit'],\n        name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n    }, 'passive:31:spark-damage': {\n        id: BuffId['passive:31:spark-damage'],\n        name: 'Passive Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'passive:31:spark-bc': {\n        id: BuffId['passive:31:spark-bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n    }, 'passive:31:spark-hc': {\n        id: BuffId['passive:31:spark-hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n    }, 'passive:31:spark-item': {\n        id: BuffId['passive:31:spark-item'],\n        name: 'Passive Item Drop Rate Boost during Spark',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n    }, 'passive:31:spark-zel': {\n        id: BuffId['passive:31:spark-zel'],\n        name: 'Passive Zel Drop Rate Boost during Spark',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n    }, 'passive:31:spark-karma': {\n        id: BuffId['passive:31:spark-karma'],\n        name: 'Passive Karma Drop Rate Boost during Spark',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n    }, 'passive:32:bc efficacy': {\n        id: BuffId['passive:32:bc efficacy'],\n        name: 'Passive BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'passive:33:gradual heal': {\n        id: BuffId['passive:33:gradual heal'],\n        name: 'Passive Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:34:critical damage': {\n        id: BuffId['passive:34:critical damage'],\n        name: 'Passive Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'passive:35:bc fill on normal attack': {\n        id: BuffId['passive:35:bc fill on normal attack'],\n        name: 'Passive BC Fill when Normal Attacking',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:36:extra action': {\n        id: BuffId['passive:36:extra action'],\n        name: 'Passive Extra Action',\n        stat: UnitStat.extraAction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DBLSTRIKE],\n    }, 'passive:37:hit count boost': {\n        id: BuffId['passive:37:hit count boost'],\n        name: 'Passive Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'passive:40:converted-atk': {\n        id: BuffId['passive:40:converted-atk'],\n        name: 'Passive Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'passive:40:converted-def': {\n        id: BuffId['passive:40:converted-def'],\n        name: 'Passive Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'passive:40:converted-rec': {\n        id: BuffId['passive:40:converted-rec'],\n        name: 'Passive Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'passive:41:unique element count-hp': {\n        id: BuffId['passive:41:unique element count-hp'],\n        name: 'Passive Element Squad-based HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n    }, 'passive:41:unique element count-atk': {\n        id: BuffId['passive:41:unique element count-atk'],\n        name: 'Passive Element Squad-based Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n    }, 'passive:41:unique element count-def': {\n        id: BuffId['passive:41:unique element count-def'],\n        name: 'Passive Element Squad-based Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n    }, 'passive:41:unique element count-rec': {\n        id: BuffId['passive:41:unique element count-rec'],\n        name: 'Passive Element Squad-based Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n    }, 'passive:41:unique element count-crit': {\n        id: BuffId['passive:41:unique element count-crit'],\n        name: 'Passive Element Squad-based Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let gender = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    gender = buff.conditions.targetGender || '';\n                }\n            }\n            if (typeof gender !== 'string' || !gender) {\n                gender = 'unknown';\n            }\n            let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n            if (!gender || !(iconKey in IconId)) {\n                iconKey = `BUFF_GENDER${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:42:gender-hp': {\n            id: BuffId['passive:42:gender-hp'],\n            name: 'Passive Gender-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:42:gender-atk': {\n            id: BuffId['passive:42:gender-atk'],\n            name: 'Passive Gender-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:42:gender-def': {\n            id: BuffId['passive:42:gender-def'],\n            name: 'Passive Gender-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:42:gender-rec': {\n            id: BuffId['passive:42:gender-rec'],\n            name: 'Passive Gender-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:42:gender-crit': {\n            id: BuffId['passive:42:gender-crit'],\n            name: 'Passive Gender-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:43:chance damage to one': {\n        id: BuffId['passive:43:chance damage to one'],\n        name: 'Passive Damage Reduction To One (Chance)',\n        stat: UnitStat.reduceDamageToOne,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n    }, 'passive:44:flat-hp': {\n        id: BuffId['passive:44:flat-hp'],\n        name: 'Passive Flat HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:44:flat-atk': {\n        id: BuffId['passive:44:flat-atk'],\n        name: 'Passive Flat Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:44:flat-def': {\n        id: BuffId['passive:44:flat-def'],\n        name: 'Passive Flat Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:44:flat-rec': {\n        id: BuffId['passive:44:flat-rec'],\n        name: 'Passive Flat Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:44:flat-crit': {\n        id: BuffId['passive:44:flat-crit'],\n        name: 'Passive Flat Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:45:critical damage reduction-base': {\n        id: BuffId['passive:45:critical damage reduction-base'],\n        name: 'Passive Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:45:critical damage reduction-buff': {\n        id: BuffId['passive:45:critical damage reduction-buff'],\n        name: 'Passive Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:46:hp scaled-atk': {\n        id: BuffId['passive:46:hp scaled-atk'],\n        name: 'Passive Attack Boost Relative to HP',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDATKDOWN : IconId.BUFF_HPSCALEDATKUP],\n    }, 'passive:46:hp scaled-def': {\n        id: BuffId['passive:46:hp scaled-def'],\n        name: 'Passive Defense Boost Relative to HP',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDDEFDOWN : IconId.BUFF_HPSCALEDDEFUP],\n    }, 'passive:46:hp scaled-rec': {\n        id: BuffId['passive:46:hp scaled-rec'],\n        name: 'Passive Recovery Boost Relative to HP',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDRECDOWN : IconId.BUFF_HPSCALEDRECUP],\n    }, 'passive:47:bc fill on spark': {\n        id: BuffId['passive:47:bc fill on spark'],\n        name: 'Passive BC Fill on Spark',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKBBUP],\n    }, 'passive:48:bc cost reduction': {\n        id: BuffId['passive:48:bc cost reduction'],\n        name: 'Passive BC Cost Reduction',\n        stat: UnitStat.bcCostReduction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBCOST_REDUCTION],\n    }, 'passive:49:bb gauge consumption reduction': {\n        id: BuffId['passive:49:bb gauge consumption reduction'],\n        name: 'Passive BB Gauge Consumption Reduction',\n        stat: UnitStat.bbGaugeConsumptionReduction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:50:elemental weakness damage-fire': {\n        id: BuffId['passive:50:elemental weakness damage-fire'],\n        name: 'Passive Fire Elemental Damage Boost',\n        stat: UnitStat.fireElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGUP],\n    }, 'passive:50:elemental weakness damage-water': {\n        id: BuffId['passive:50:elemental weakness damage-water'],\n        name: 'Passive Water Elemental Damage Boost',\n        stat: UnitStat.waterElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGUP],\n    }, 'passive:50:elemental weakness damage-earth': {\n        id: BuffId['passive:50:elemental weakness damage-earth'],\n        name: 'Passive Earth Elemental Damage Boost',\n        stat: UnitStat.earthElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGUP],\n    }, 'passive:50:elemental weakness damage-thunder': {\n        id: BuffId['passive:50:elemental weakness damage-thunder'],\n        name: 'Passive Thunder Elemental Damage Boost',\n        stat: UnitStat.thunderElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGUP],\n    }, 'passive:50:elemental weakness damage-light': {\n        id: BuffId['passive:50:elemental weakness damage-light'],\n        name: 'Passive Light Elemental Damage Boost',\n        stat: UnitStat.lightElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGUP],\n    }, 'passive:50:elemental weakness damage-dark': {\n        id: BuffId['passive:50:elemental weakness damage-dark'],\n        name: 'Passive Dark Elemental Damage Boost',\n        stat: UnitStat.darkElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGUP],\n    }, 'passive:50:elemental weakness damage-unknown': {\n        id: BuffId['passive:50:elemental weakness damage-unknown'],\n        name: 'Passive Elemental Damage Boost (Unspecified Element)',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGUP],\n    }, 'passive:53:critical damage-base': {\n        id: BuffId['passive:53:critical damage-base'],\n        name: 'Passive Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:critical damage-buff': {\n        id: BuffId['passive:53:critical damage-buff'],\n        name: 'Passive Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:element damage-base': {\n        id: BuffId['passive:53:element damage-base'],\n        name: 'Passive Base Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'passive:53:element damage-buff': {\n        id: BuffId['passive:53:element damage-buff'],\n        name: 'Passive Buffed Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'passive:53:critical rate-base': {\n        id: BuffId['passive:53:critical rate-base'],\n        name: 'Passive Base Critical Hit Rate Reduction',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:critical rate-buff': {\n        id: BuffId['passive:53:critical rate-buff'],\n        name: 'Passive Buffed Critical Hit Rate Reduction',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:55:hp conditional': {\n        id: BuffId['passive:55:hp conditional'],\n        name: 'Passive Conditional Effect based on HP Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_HPTHRESH],\n    }, 'passive:58:guard mitigation': {\n        id: BuffId['passive:58:guard mitigation'],\n        name: 'Passive Guard Damage Reduction',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDCUT],\n    }, 'passive:59:bc fill when attacked on guard-percent': {\n        id: BuffId['passive:59:bc fill when attacked on guard-percent'],\n        name: 'Passive BC Fill when Attacked and Guarding (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:59:bc fill when attacked on guard-flat': {\n        id: BuffId['passive:59:bc fill when attacked on guard-flat'],\n        name: 'Passive BC Fill when Attacked and Guarding (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:61:bc fill on guard-percent': {\n        id: BuffId['passive:61:bc fill on guard-percent'],\n        name: 'Passive BC Fill on Guard (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:61:bc fill on guard-flat': {\n        id: BuffId['passive:61:bc fill on guard-flat'],\n        name: 'Passive BC Fill on Guard (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:62:mitigate-fire': {\n        id: BuffId['passive:62:mitigate-fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:62:mitigate-water': {\n        id: BuffId['passive:62:mitigate-water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:62:mitigate-earth': {\n        id: BuffId['passive:62:mitigate-earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:62:mitigate-thunder': {\n        id: BuffId['passive:62:mitigate-thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:62:mitigate-light': {\n        id: BuffId['passive:62:mitigate-light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:62:mitigate-dark': {\n        id: BuffId['passive:62:mitigate-dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:62:mitigate-unknown': {\n        id: BuffId['passive:62:mitigate-unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:63:first turn mitigate-fire': {\n        id: BuffId['passive:63:first turn mitigate-fire'],\n        name: 'Fire Damage Reduction for First X Turns',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:63:first turn mitigate-water': {\n        id: BuffId['passive:63:first turn mitigate-water'],\n        name: 'Water Damage Reduction for First X Turns',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:63:first turn mitigate-earth': {\n        id: BuffId['passive:63:first turn mitigate-earth'],\n        name: 'Earth Damage Reduction for First X Turns',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:63:first turn mitigate-thunder': {\n        id: BuffId['passive:63:first turn mitigate-thunder'],\n        name: 'Thunder Damage Reduction for First X Turns',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:63:first turn mitigate-light': {\n        id: BuffId['passive:63:first turn mitigate-light'],\n        name: 'Light Damage Reduction for First X Turns',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:63:first turn mitigate-dark': {\n        id: BuffId['passive:63:first turn mitigate-dark'],\n        name: 'Dark Damage Reduction for First X Turns',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:63:first turn mitigate-unknown': {\n        id: BuffId['passive:63:first turn mitigate-unknown'],\n        name: 'Elemental Damage Reduction (Unspecified Element) for First X Turns',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:64:attack boost-bb': {\n        id: BuffId['passive:64:attack boost-bb'],\n        name: 'Passive BB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'passive:64:attack boost-sbb': {\n        id: BuffId['passive:64:attack boost-sbb'],\n        name: 'Passive SBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'passive:64:attack boost-ubb': {\n        id: BuffId['passive:64:attack boost-ubb'],\n        name: 'Passive UBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'passive:65:bc fill on crit': {\n        id: BuffId['passive:65:bc fill on crit'],\n        name: 'Passive BC Fill on Critical Hit',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:66:add effect to skill-bb': {\n        id: BuffId['passive:66:add effect to skill-bb'],\n        name: 'Passive Added Effect to Brave Burst',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTO_BB],\n    }, 'passive:66:add effect to skill-sbb': {\n        id: BuffId['passive:66:add effect to skill-sbb'],\n        name: 'Passive Added Effect to Super Brave Burst',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTO_SBB],\n    }, 'passive:66:add effect to skill-ubb': {\n        id: BuffId['passive:66:add effect to skill-ubb'],\n        name: 'Passive Added Effect to Ultimate Brave Burst',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTO_UBB],\n    }, UNKNOWN_PROC_EFFECT_ID: {\n        id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n        name: 'Unknown Proc Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_PROC_BUFF_PARAMS: {\n        id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n        name: 'Unknown Proc Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'proc:1:attack': {\n        id: BuffId['proc:1:attack'],\n        name: 'Regular Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:2:burst heal': {\n        id: BuffId['proc:2:burst heal'],\n        name: 'Burst Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:3:gradual heal': {\n        id: BuffId['proc:3:gradual heal'],\n        name: 'Active Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:4:bc fill-flat': {\n        id: BuffId['proc:4:bc fill-flat'],\n        name: 'Burst BC Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:4:bc fill-percent': {\n        id: BuffId['proc:4:bc fill-percent'],\n        name: 'Burst BC Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:5:regular or elemental-atk': {\n            id: BuffId['proc:5:regular or elemental-atk'],\n            name: 'Active Regular/Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:5:regular or elemental-def': {\n            id: BuffId['proc:5:regular or elemental-def'],\n            name: 'Active Regular/Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:5:regular or elemental-rec': {\n            id: BuffId['proc:5:regular or elemental-rec'],\n            name: 'Active Regular/Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:5:regular or elemental-crit': {\n            id: BuffId['proc:5:regular or elemental-crit'],\n            name: 'Active Regular/Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'proc:6:drop boost-bc': {\n        id: BuffId['proc:6:drop boost-bc'],\n        name: 'Active Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'proc:6:drop boost-hc': {\n        id: BuffId['proc:6:drop boost-hc'],\n        name: 'Active Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'proc:6:drop boost-item': {\n        id: BuffId['proc:6:drop boost-item'],\n        name: 'Active Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'proc:7:guaranteed ko resistance': {\n        id: BuffId['proc:7:guaranteed ko resistance'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:8:max hp boost-flat': {\n        id: BuffId['proc:8:max hp boost-flat'],\n        name: 'Max HP Boost (Flat Amount)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    }, 'proc:8:max hp boost-percent': {\n        id: BuffId['proc:8:max hp boost-percent'],\n        name: 'Max HP Boost (Percentage)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'DOWN'; // default to down since these are reduction buffs\n            if (buff) {\n                if (buff.value && buff.value > 0) {\n                    polarity = 'UP';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:9:regular or elemental reduction-atk': {\n            id: BuffId['proc:9:regular or elemental reduction-atk'],\n            name: 'Active Regular/Elemental Attack Reduction',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:9:regular or elemental reduction-def': {\n            id: BuffId['proc:9:regular or elemental reduction-def'],\n            name: 'Active Regular/Elemental Defense Reduction',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:9:regular or elemental reduction-rec': {\n            id: BuffId['proc:9:regular or elemental reduction-rec'],\n            name: 'Active Regular/Elemental Recovery Reduction',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:9:regular or elemental reduction-unknown': {\n            id: BuffId['proc:9:regular or elemental reduction-unknown'],\n            name: 'Active Regular/Elemental Unknown Stat Reduction',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.UNKNOWN],\n        },\n    };\n})()), { 'proc:10:cleanse-poison': {\n        id: BuffId['proc:10:cleanse-poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:10:cleanse-weak': {\n        id: BuffId['proc:10:cleanse-weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:10:cleanse-sick': {\n        id: BuffId['proc:10:cleanse-sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:10:cleanse-injury': {\n        id: BuffId['proc:10:cleanse-injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:10:cleanse-curse': {\n        id: BuffId['proc:10:cleanse-curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:10:cleanse-paralysis': {\n        id: BuffId['proc:10:cleanse-paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:10:cleanse-atk down': {\n        id: BuffId['proc:10:cleanse-atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWNBLK],\n    }, 'proc:10:cleanse-def down': {\n        id: BuffId['proc:10:cleanse-def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWNBLK],\n    }, 'proc:10:cleanse-rec down': {\n        id: BuffId['proc:10:cleanse-rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWNBLK],\n    }, 'proc:10:cleanse-unknown': {\n        id: BuffId['proc:10:cleanse-unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:11:chance inflict-poison': {\n        id: BuffId['proc:11:chance inflict-poison'],\n        name: 'Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_POISON],\n    }, 'proc:11:chance inflict-weak': {\n        id: BuffId['proc:11:chance inflict-weak'],\n        name: 'Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_WEAK],\n    }, 'proc:11:chance inflict-sick': {\n        id: BuffId['proc:11:chance inflict-sick'],\n        name: 'Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_SICK],\n    }, 'proc:11:chance inflict-injury': {\n        id: BuffId['proc:11:chance inflict-injury'],\n        name: 'Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_INJURY],\n    }, 'proc:11:chance inflict-curse': {\n        id: BuffId['proc:11:chance inflict-curse'],\n        name: 'Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_CURSE],\n    }, 'proc:11:chance inflict-paralysis': {\n        id: BuffId['proc:11:chance inflict-paralysis'],\n        name: 'Paralysis Infliction',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_PARALYSIS],\n    }, 'proc:11:chance inflict-atk down': {\n        id: BuffId['proc:11:chance inflict-atk down'],\n        name: 'Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWN],\n    }, 'proc:11:chance inflict-def down': {\n        id: BuffId['proc:11:chance inflict-def down'],\n        name: 'Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWN],\n    }, 'proc:11:chance inflict-rec down': {\n        id: BuffId['proc:11:chance inflict-rec down'],\n        name: 'Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWN],\n    }, 'proc:11:chance inflict-unknown': {\n        id: BuffId['proc:11:chance inflict-unknown'],\n        name: 'Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.DEBUFF_AILMENT],\n    }, 'proc:12:guaranteed revive': {\n        id: BuffId['proc:12:guaranteed revive'],\n        name: 'Instant Revive (Guaranteed)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:13:random attack': {\n        id: BuffId['proc:13:random attack'],\n        name: 'Random Target Damage',\n        stackType: BuffStackType.Attack,\n        icons: () => [IconId.ATK_RT],\n    }, 'proc:14:hp absorb attack': {\n        id: BuffId['proc:14:hp absorb attack'],\n        name: 'Lifesteal Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n    }, 'proc:16:mitigate-fire': {\n        id: BuffId['proc:16:mitigate-fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:16:mitigate-water': {\n        id: BuffId['proc:16:mitigate-water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:16:mitigate-earth': {\n        id: BuffId['proc:16:mitigate-earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:16:mitigate-thunder': {\n        id: BuffId['proc:16:mitigate-thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:16:mitigate-light': {\n        id: BuffId['proc:16:mitigate-light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:16:mitigate-dark': {\n        id: BuffId['proc:16:mitigate-dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:16:mitigate-all': {\n        id: BuffId['proc:16:mitigate-all'],\n        name: 'Active Elemental Damage Reduction (All Elements)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:16:mitigate-unknown': {\n        id: BuffId['proc:16:mitigate-unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:17:resist-poison': {\n        id: BuffId['proc:17:resist-poison'],\n        name: 'Active Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:17:resist-weak': {\n        id: BuffId['proc:17:resist-weak'],\n        name: 'Active Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:17:resist-sick': {\n        id: BuffId['proc:17:resist-sick'],\n        name: 'Active Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:17:resist-injury': {\n        id: BuffId['proc:17:resist-injury'],\n        name: 'Active Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:17:resist-curse': {\n        id: BuffId['proc:17:resist-curse'],\n        name: 'Active Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:17:resist-paralysis': {\n        id: BuffId['proc:17:resist-paralysis'],\n        name: 'Active Paralysis Resist',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:18:mitigation': {\n        id: BuffId['proc:18:mitigation'],\n        name: 'Active Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'proc:19:gradual bc fill': {\n        id: BuffId['proc:19:gradual bc fill'],\n        name: 'Active Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:20:bc fill on hit': {\n        id: BuffId['proc:20:bc fill on hit'],\n        name: 'Active BC Fill when attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'proc:22:defense ignore': {\n        id: BuffId['proc:22:defense ignore'],\n        name: 'Active Defense Ignore',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'proc:23:spark damage': {\n        id: BuffId['proc:23:spark damage'],\n        name: 'Active Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'proc:24:converted-atk': {\n        id: BuffId['proc:24:converted-atk'],\n        name: 'Active Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'proc:24:converted-def': {\n        id: BuffId['proc:24:converted-def'],\n        name: 'Active Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'proc:24:converted-rec': {\n        id: BuffId['proc:24:converted-rec'],\n        name: 'Active Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'proc:26:hit count boost': {\n        id: BuffId['proc:26:hit count boost'],\n        name: 'Active Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'proc:27:proportional attack': {\n        id: BuffId['proc:27:proportional attack'],\n        name: 'Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:28:fixed attack': {\n        id: BuffId['proc:28:fixed attack'],\n        name: 'Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n    }, 'proc:29:multi-element attack': {\n        id: BuffId['proc:29:multi-element attack'],\n        name: 'Multi-Element Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n    }, 'proc:30:add element-fire': {\n        id: BuffId['proc:30:add element-fire'],\n        name: 'Active Added Element to Attack (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDFIRE],\n    }, 'proc:30:add element-water': {\n        id: BuffId['proc:30:add element-water'],\n        name: 'Active Added Element to Attack (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWATER],\n    }, 'proc:30:add element-earth': {\n        id: BuffId['proc:30:add element-earth'],\n        name: 'Active Added Element to Attack (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDEARTH],\n    }, 'proc:30:add element-thunder': {\n        id: BuffId['proc:30:add element-thunder'],\n        name: 'Active Added Element to Attack (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDTHUNDER],\n    }, 'proc:30:add element-light': {\n        id: BuffId['proc:30:add element-light'],\n        name: 'Active Added Element to Attack (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDLIGHT],\n    }, 'proc:30:add element-dark': {\n        id: BuffId['proc:30:add element-dark'],\n        name: 'Active Added Element to Attack (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDARK],\n    }, 'proc:30:add element-unknown': {\n        id: BuffId['proc:30:add element-unknown'],\n        name: 'Active Added Element to Attack (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDELEMENT],\n    }, 'proc:31:bc fill-flat': {\n        id: BuffId['proc:31:bc fill-flat'],\n        name: 'Burst BC Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:31:bc fill-percent': {\n        id: BuffId['proc:31:bc fill-percent'],\n        name: 'Burst BC Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:32:element shift-fire': {\n        id: BuffId['proc:32:element shift-fire'],\n        name: 'Element Shift (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTFIRE],\n    }, 'proc:32:element shift-water': {\n        id: BuffId['proc:32:element shift-water'],\n        name: 'Element Shift (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTWATER],\n    }, 'proc:32:element shift-earth': {\n        id: BuffId['proc:32:element shift-earth'],\n        name: 'Element Shift (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTEARTH],\n    }, 'proc:32:element shift-thunder': {\n        id: BuffId['proc:32:element shift-thunder'],\n        name: 'Element Shift (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTTHUNDER],\n    }, 'proc:32:element shift-light': {\n        id: BuffId['proc:32:element shift-light'],\n        name: 'Element Shift (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTLIGHT],\n    }, 'proc:32:element shift-dark': {\n        id: BuffId['proc:32:element shift-dark'],\n        name: 'Element Shift (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTDARK],\n    }, 'proc:32:element shift-unknown': {\n        id: BuffId['proc:32:element shift-unknown'],\n        name: 'Element Shift (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTELEMENT],\n    }, 'proc:33:buff wipe': {\n        id: BuffId['proc:33:buff wipe'],\n        name: 'Buff Removal',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_REMOVEBUFF],\n    }, 'proc:34:bc drain-flat': {\n        id: BuffId['proc:34:bc drain-flat'],\n        name: 'Burst BB Gauge Drain (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:34:bc drain-percent': {\n        id: BuffId['proc:34:bc drain-percent'],\n        name: 'Burst BB Gauge Drain (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:36:ls lock': {\n        id: BuffId['proc:36:ls lock'],\n        name: 'Active Leader Skill Lock',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DISABLELS],\n    }, 'proc:37:summon': {\n        id: BuffId['proc:37:summon'],\n        name: 'Summon Unit',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SUMMONUNIT],\n    }, 'proc:38:cleanse-poison': {\n        id: BuffId['proc:38:cleanse-poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:38:cleanse-weak': {\n        id: BuffId['proc:38:cleanse-weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:38:cleanse-sick': {\n        id: BuffId['proc:38:cleanse-sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:38:cleanse-injury': {\n        id: BuffId['proc:38:cleanse-injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:38:cleanse-curse': {\n        id: BuffId['proc:38:cleanse-curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:38:cleanse-paralysis': {\n        id: BuffId['proc:38:cleanse-paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:38:cleanse-atk down': {\n        id: BuffId['proc:38:cleanse-atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWNBLK],\n    }, 'proc:38:cleanse-def down': {\n        id: BuffId['proc:38:cleanse-def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWNBLK],\n    }, 'proc:38:cleanse-rec down': {\n        id: BuffId['proc:38:cleanse-rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWNBLK],\n    }, 'proc:38:cleanse-unknown': {\n        id: BuffId['proc:38:cleanse-unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:39:mitigate-fire': {\n        id: BuffId['proc:39:mitigate-fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:39:mitigate-water': {\n        id: BuffId['proc:39:mitigate-water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:39:mitigate-earth': {\n        id: BuffId['proc:39:mitigate-earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:39:mitigate-thunder': {\n        id: BuffId['proc:39:mitigate-thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:39:mitigate-light': {\n        id: BuffId['proc:39:mitigate-light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:39:mitigate-dark': {\n        id: BuffId['proc:39:mitigate-dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:39:mitigate-unknown': {\n        id: BuffId['proc:39:mitigate-unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:40:add ailment-poison': {\n        id: BuffId['proc:40:add ailment-poison'],\n        name: 'Active Poison Infliction Added to Attack',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'proc:40:add ailment-weak': {\n        id: BuffId['proc:40:add ailment-weak'],\n        name: 'Active Weak Infliction Added to Attack',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'proc:40:add ailment-sick': {\n        id: BuffId['proc:40:add ailment-sick'],\n        name: 'Active Sick Infliction Added to Attack',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'proc:40:add ailment-injury': {\n        id: BuffId['proc:40:add ailment-injury'],\n        name: 'Active Injury Infliction Added to Attack',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'proc:40:add ailment-curse': {\n        id: BuffId['proc:40:add ailment-curse'],\n        name: 'Active Curse Infliction Added to Attack',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'proc:40:add ailment-paralysis': {\n        id: BuffId['proc:40:add ailment-paralysis'],\n        name: 'Active Paralysis Infliction Added to Attack',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'proc:40:add ailment-atk down': {\n        id: BuffId['proc:40:add ailment-atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:40:add ailment-def down': {\n        id: BuffId['proc:40:add ailment-def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:40:add ailment-rec down': {\n        id: BuffId['proc:40:add ailment-rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:40:add ailment-unknown': {\n        id: BuffId['proc:40:add ailment-unknown'],\n        name: 'Active Unknown Ailment Infliction Added to Attack',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'proc:42:sacrificial attack': {\n        id: BuffId['proc:42:sacrificial attack'],\n        name: 'Sacrificial Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n    }, 'proc:42:instant death': {\n        id: BuffId['proc:42:instant death'],\n        name: 'Instant Death to Self (Post-Attack)',\n        stackType: BuffStackType.Burst,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL, IconId.BUFF_KO],\n    }, 'proc:43:burst od fill': {\n        id: BuffId['proc:43:burst od fill'],\n        name: 'Burst OD Gauge Fill (Percentage)',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_OVERDRIVEUP],\n    }, 'proc:44:damage over time': {\n        id: BuffId['proc:44:damage over time'],\n        name: 'Active Damage over Time',\n        stat: UnitStat.damageOverTime,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_TURNDMG],\n    }, 'proc:45:attack boost-bb': {\n        id: BuffId['proc:45:attack boost-bb'],\n        name: 'Active BB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'proc:45:attack boost-sbb': {\n        id: BuffId['proc:45:attack boost-sbb'],\n        name: 'Active SBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'proc:45:attack boost-ubb': {\n        id: BuffId['proc:45:attack boost-ubb'],\n        name: 'Active UBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'proc:46:non-lethal proportional attack': {\n        id: BuffId['proc:46:non-lethal proportional attack'],\n        name: 'Non-Lethal Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:47:hp scaled attack': {\n        id: BuffId['proc:47:hp scaled attack'],\n        name: 'HP Scaled Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPSCALED : IconId.ATK_AOE_HPSCALED],\n    }, 'proc:48:piercing attack-base': {\n        id: BuffId['proc:48:piercing attack-base'],\n        name: 'Piercing Proportional Damage (Base HP)',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n    }, 'proc:48:piercing attack-current': {\n        id: BuffId['proc:48:piercing attack-current'],\n        name: 'Piercing Proportional Damage (Current HP)',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n    }, 'proc:48:piercing attack-fixed': {\n        id: BuffId['proc:48:piercing attack-fixed'],\n        name: 'Piercing Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_FIXED : IconId.ATK_AOE_PIERCING_FIXED],\n    }, 'proc:48:piercing attack-unknown': {\n        id: BuffId['proc:48:piercing attack-unknown'],\n        name: 'Unknown Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:49:chance instant death': {\n        id: BuffId['proc:49:chance instant death'],\n        name: 'Instant Death (Chance)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KO],\n    }, 'proc:50:chance damage reflect': {\n        id: BuffId['proc:50:chance damage reflect'],\n        name: 'Active Damage Reflect (Chance)',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'proc:51:add to attack-atk down': {\n        id: BuffId['proc:51:add to attack-atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:51:add to attack-def down': {\n        id: BuffId['proc:51:add to attack-def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:51:add to attack-rec down': {\n        id: BuffId['proc:51:add to attack-rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:52:bc efficacy': {\n        id: BuffId['proc:52:bc efficacy'],\n        name: 'Active BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'proc:53:inflict on hit-poison': {\n        id: BuffId['proc:53:inflict on hit-poison'],\n        name: 'Active Poison Counter',\n        stat: UnitStat.poisonCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONCOUNTER],\n    }, 'proc:53:inflict on hit-weak': {\n        id: BuffId['proc:53:inflict on hit-weak'],\n        name: 'Active Weak Counter',\n        stat: UnitStat.weakCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKCOUNTER],\n    }, 'proc:53:inflict on hit-sick': {\n        id: BuffId['proc:53:inflict on hit-sick'],\n        name: 'Active Sick Counter',\n        stat: UnitStat.sickCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKCOUNTER],\n    }, 'proc:53:inflict on hit-injury': {\n        id: BuffId['proc:53:inflict on hit-injury'],\n        name: 'Active Injury Counter',\n        stat: UnitStat.injuryCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJCONTER],\n    }, 'proc:53:inflict on hit-curse': {\n        id: BuffId['proc:53:inflict on hit-curse'],\n        name: 'Active Curse Counter',\n        stat: UnitStat.curseCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSECOUNTER],\n    }, 'proc:53:inflict on hit-paralysis': {\n        id: BuffId['proc:53:inflict on hit-paralysis'],\n        name: 'Active Paralysis Counter',\n        stat: UnitStat.paralysisCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYCOUNTER],\n    }, 'proc:54:critical damage boost': {\n        id: BuffId['proc:54:critical damage boost'],\n        name: 'Active Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'proc:55:elemental weakness damage-fire': {\n        id: BuffId['proc:55:elemental weakness damage-fire'],\n        name: 'Active Fire Elemental Damage Boost',\n        stat: UnitStat.fireElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGUP],\n    }, 'proc:55:elemental weakness damage-water': {\n        id: BuffId['proc:55:elemental weakness damage-water'],\n        name: 'Active Water Elemental Damage Boost',\n        stat: UnitStat.waterElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGUP],\n    }, 'proc:55:elemental weakness damage-earth': {\n        id: BuffId['proc:55:elemental weakness damage-earth'],\n        name: 'Active Earth Elemental Damage Boost',\n        stat: UnitStat.earthElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGUP],\n    }, 'proc:55:elemental weakness damage-thunder': {\n        id: BuffId['proc:55:elemental weakness damage-thunder'],\n        name: 'Active Thunder Elemental Damage Boost',\n        stat: UnitStat.thunderElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGUP],\n    }, 'proc:55:elemental weakness damage-light': {\n        id: BuffId['proc:55:elemental weakness damage-light'],\n        name: 'Active Light Elemental Damage Boost',\n        stat: UnitStat.lightElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGUP],\n    }, 'proc:55:elemental weakness damage-dark': {\n        id: BuffId['proc:55:elemental weakness damage-dark'],\n        name: 'Active Dark Elemental Damage Boost',\n        stat: UnitStat.darkElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGUP],\n    }, 'proc:55:elemental weakness damage-unknown': {\n        id: BuffId['proc:55:elemental weakness damage-unknown'],\n        name: 'Active Elemental Damage Boost (Unspecified Element)',\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGUP],\n    }, 'proc:56:chance ko resistance': {\n        id: BuffId['proc:56:chance ko resistance'],\n        name: 'KO Resistance (Chance)',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, 'proc:57:bc drop resistance-base': {\n        id: BuffId['proc:57:bc drop resistance-base'],\n        name: 'Active Base Battle Crystal Drop Rate Reduction',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BCDOWN],\n    }, 'proc:57:bc drop resistance-buff': {\n        id: BuffId['proc:57:bc drop resistance-buff'],\n        name: 'Active Buffed Battle Crystal Drop Rate Reduction',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BCDOWN],\n    }, 'proc:57:hc drop resistance-base': {\n        id: BuffId['proc:57:hc drop resistance-base'],\n        name: 'Active Base Heart Crystal Drop Rate Reduction',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HCDOWN],\n    }, 'proc:57:hc drop resistance-buff': {\n        id: BuffId['proc:57:hc drop resistance-buff'],\n        name: 'Active Buffed Heart Crystal Drop Rate Reduction',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HCDOWN],\n    }, 'proc:58:spark vulnerability': {\n        id: BuffId['proc:58:spark vulnerability'],\n        name: 'Active Spark Vulnerability',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SPARKDMGUP],\n    }, 'proc:59:attack reduction-bb': {\n        id: BuffId['proc:59:attack reduction-bb'],\n        name: 'Active BB ATK Reduction',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBATKDOWN],\n    }, 'proc:59:attack reduction-sbb': {\n        id: BuffId['proc:59:attack reduction-sbb'],\n        name: 'Active SBB ATK Reduction',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SBBATKDOWN],\n    }, 'proc:59:attack reduction-ubb': {\n        id: BuffId['proc:59:attack reduction-ubb'],\n        name: 'Active UBB ATK Reduction',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_UBBATKDOWN],\n    }, 'proc:61:party bb gauge-scaled attack': {\n        id: BuffId['proc:61:party bb gauge-scaled attack'],\n        name: 'Party BB Gauge-Scaled Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED],\n    }, 'proc:61:party bc drain': {\n        id: BuffId['proc:61:party bc drain'],\n        name: 'Party BB Gauge Drain (Post-Attack)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED, IconId.BUFF_BBFILLDOWN],\n    }, 'proc:62:barrier-fire': {\n        id: BuffId['proc:62:barrier-fire'],\n        name: 'Fire Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_FIRESHIELD],\n    }, 'proc:62:barrier-water': {\n        id: BuffId['proc:62:barrier-water'],\n        name: 'Water Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_WATERSHIELD],\n    }, 'proc:62:barrier-earth': {\n        id: BuffId['proc:62:barrier-earth'],\n        name: 'Earth Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_EARTHSHIELD],\n    }, 'proc:62:barrier-thunder': {\n        id: BuffId['proc:62:barrier-thunder'],\n        name: 'Thunder Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_THUNDERSHIELD],\n    }, 'proc:62:barrier-light': {\n        id: BuffId['proc:62:barrier-light'],\n        name: 'Light Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_LIGHTSHIELD],\n    }, 'proc:62:barrier-dark': {\n        id: BuffId['proc:62:barrier-dark'],\n        name: 'Dark Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_DARKSHIELD],\n    }, 'proc:62:barrier-all': {\n        id: BuffId['proc:62:barrier-all'],\n        name: 'Barrier (All Elements)',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_ELEMENTSHIELD],\n    }, 'proc:62:barrier-unknown': {\n        id: BuffId['proc:62:barrier-unknown'],\n        name: 'Barrier (Unspecified Element)',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_ELEMENTSHIELD],\n    }, 'proc:64:consecutive usage attack': {\n        id: BuffId['proc:64:consecutive usage attack'],\n        name: 'Consecutive Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_USAGESCALED : IconId.ATK_AOE_USAGESCALED],\n    }, 'proc:65:ailment attack boost': {\n        id: BuffId['proc:65:ailment attack boost'],\n        name: 'Active Attack Boost on Status Afflicted Foes',\n        stat: UnitStat.ailmentAttackBoost,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_AILDMGUP],\n    }, 'proc:66:chance revive': {\n        id: BuffId['proc:66:chance revive'],\n        name: 'Instant Revive (Chance)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, UNKNOWN_CONDITIONAL_EFFECT_ID: {\n        id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n        name: 'Unknown Conditional Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_CONDITIONAL_BUFF_PARAMS: {\n        id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n        name: 'Unknown Conditional Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'conditional:8:gradual heal': {\n        id: BuffId['conditional:8:gradual heal'],\n        name: 'Conditional Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'conditional:12:guaranteed ko resistance': {\n        id: BuffId['conditional:12:guaranteed ko resistance'],\n        name: 'Conditional Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'conditional:36:mitigation': {\n        id: BuffId['conditional:36:mitigation'],\n        name: 'Conditional Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'conditional:91:chance ko resistance': {\n        id: BuffId['conditional:91:chance ko resistance'],\n        name: 'Conditional KO Resistance (Chance)',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, 'conditional:133:heal on hit': {\n        id: BuffId['conditional:133:heal on hit'],\n        name: 'Conditional Heal when Attacked (Chance)',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'conditional:153:chance inflict atk down on hit': {\n        id: BuffId['conditional:153:chance inflict atk down on hit'],\n        name: 'Conditional Attack Reduction Counter (Chance)',\n        stat: UnitStat.atkDownCounter,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_PROB_ATKREDUC],\n    } }));\n","import { BUFF_METADATA } from './buff-metadata';\n/**\n * @description Get the associated metadata entry for a given buff ID.\n * @param id Buff ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","/**\n * @description Get the effects of a given extra skill.\n * @param skill Extra skill to get the effects of.\n * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForExtraSkill(skill) {\n    return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n}\n","/**\n * @description Get the effects of a given item.\n * @param item Item to get the effects of, if any are present,\n * @returns Effects of the given item if they exist, an empty array otherwise.\n */\nexport default function getEffectsForItem(item) {\n    let result = [];\n    if (item && item.effect) {\n        if (Array.isArray(item.effect)) {\n            result = item.effect;\n        }\n        else if (Array.isArray(item.effect.effect)) {\n            const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n            result = effect.map(e => {\n                // apply target data to each effect\n                const fullProcEffect = Object.assign({}, e);\n                fullProcEffect['target area'] = targetArea;\n                fullProcEffect['target type'] = targetType;\n                return fullProcEffect;\n            });\n        }\n    }\n    return result;\n}\n","/**\n * @description Generate a URL to display the image with the given item thumbnail filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents the thumbnail image for a given item.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getItemImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/item/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given leader skill.\n * @param skill Leader skill to get the effects of.\n * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForLeaderSkill(skill) {\n    return skill && Array.isArray(skill.effects) ? skill.effects : [];\n}\n","/**\n * @description Generate the file names for each of the image type for a given unit ID.\n * @param id Unit ID to use to generate the file names.\n * @param suffix Optional parameter that's useful for things like alternate art.\n * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n */\nexport default function getUnitImageFileNames(id, suffix = '') {\n    const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n    return {\n        spritesheet: `unit_anime_${fileNameSuffix}`,\n        battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n        guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n        fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n    };\n}\n","/**\n * @description Generate a URL to display the image with the given unit filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents an image for a given unit.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getUnitImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given SP Enhancement Entry.\n * @param entry SP Enhancement Entry to get the effects of.\n * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n */\nexport default function getEffectsForSpEnhancement(entry) {\n    const result = [];\n    if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n        const effectWrappers = entry.skill.effects;\n        effectWrappers.forEach(effectWrapper => {\n            Object.keys(effectWrapper).forEach(spType => {\n                const originalEffect = effectWrapper[spType];\n                const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                result.push(unwrappedEffect);\n            });\n        });\n    }\n    return result;\n}\n","import { SpCategoryName } from '../datamine-types';\n/**\n * @description Get the associated category name with a given category ID.\n * @param categoryId Category ID to get the name of.\n * @returns Name of the given category ID or the string 'Unknown'.\n */\nexport default function getSpCategoryName(categoryId) {\n    let result;\n    const numericalCategoryId = +categoryId;\n    switch (numericalCategoryId) {\n        case 1:\n            result = SpCategoryName['Parameter Boost'];\n            break;\n        case 2:\n            result = SpCategoryName.Spark;\n            break;\n        case 3:\n            result = SpCategoryName['Critical Hits'];\n            break;\n        case 4:\n            result = SpCategoryName['Attack Boost'];\n            break;\n        case 5:\n            result = SpCategoryName['BB Gauge'];\n            break;\n        case 6:\n            result = SpCategoryName['HP Recovery'];\n            break;\n        case 7:\n            result = SpCategoryName.Drops;\n            break;\n        case 8:\n            result = SpCategoryName['Ailment Resistance'];\n            break;\n        case 9:\n            result = SpCategoryName['Ailment Infliction'];\n            break;\n        case 10:\n            result = SpCategoryName['Damage Reduction'];\n            break;\n        case 11:\n            result = SpCategoryName.Special;\n            break;\n        default:\n            result = SpCategoryName.Unknown;\n            break;\n    }\n    return result;\n}\n","/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding character code for a given index.\n * It expects an index between 0 and 61 inclusive; will return an empty string if\n * the given value is outside of the range.\n * @param index Index of an SP entry in a given skills array.\n * @returns Corresponding single alphanumeric character to the given index\n * or an empty string if the index is invalid.\n */\nexport default function spIndexToCode(index) {\n    let result = '';\n    let correspondingCharacterCode = -1;\n    if (Number.isInteger(index)) {\n        if (index >= 0 && index <= 25) { // A-Z\n            correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (index >= 26 && index <= 51) { // a-z\n            correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n        }\n        else if (index >= 52 && index <= 61) { // 0-9\n            correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n        }\n    }\n    if (correspondingCharacterCode !== -1) {\n        result = String.fromCharCode(correspondingCharacterCode);\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding index for a given character code.\n * It expects an alphanumeric character and will return -1 otherwise.\n * @param code Character code an SP entry in a given skills array.\n * @returns Corresponding index to the given character or -1 if the\n * character is invalid.\n */\nexport default function spCodeToIndex(code) {\n    let result = -1;\n    let characterCodeOffset = -1;\n    if (!!code && typeof code === 'string' && code.length === 1) {\n        if (code >= 'A' && code <= 'Z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (code >= 'a' && code <= 'z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n        }\n        else if (code >= '0' && code <= '9') {\n            characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n        }\n    }\n    if (characterCodeOffset !== -1) {\n        result = code.charCodeAt(0) - characterCodeOffset;\n    }\n    return result;\n}\n","/**\n * @description Extract the ID of a string in the format of `number@actualId`. If there\n * is no value after the @ character or if no @ character is present, the original ID is returned.\n * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n * @param id Original SP Enhancement Entry ID.\n * @returns The ID of a string in the format of `number@actualId`, or the original input if\n * there is no @ character or no value after the @ character.\n */\nexport default function getSpEntryId(id) {\n    return (typeof id === 'string' && id.split('@')[1]) || id;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n * @param id SP Enhancement entry ID.\n * @param entries Collection of SP Enhancement entries to search in.\n * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n */\nexport default function getSpEntryWithId(id, entries) {\n    const spId = getSpEntryId(id);\n    return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n * @param entry SP Entry to get dependencies for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n */\nexport default function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependencies = [];\n    if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n        const dependencyId = getSpEntryId(entry.dependency);\n        const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n        if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n            addedEntries.add(dependencyEntry);\n            const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n            dependencies = [dependencyEntry].concat(subDependencies);\n        }\n    }\n    return dependencies;\n}\n","/**\n * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n * @param entry SP Entry to get dependents for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n */\nexport default function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependents = [];\n    if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n        const entryId = entry.id;\n        dependents = allEntries\n            .filter(s => {\n            return s.dependency &&\n                s.dependency.includes(entryId) &&\n                !addedEntries.has(s);\n        });\n        dependents.forEach(dependent => {\n            addedEntries.add(dependent);\n            const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n            dependents = dependents.concat(subDependents);\n        });\n    }\n    return dependents;\n}\n","/* NOTE: this file is automatically generated; do not edit this file */\nexport default '0.7.0';\n"]}