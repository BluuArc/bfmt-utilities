{"version":3,"sources":["index.browser.min.js","index.browser.js","bursts/getLevelEntryForBurst.js","buffs/getEffectId.js","buffs/constants.js","buffs/effect-metadata.js","buffs/getMetadataForProc.js","buffs/isAttackingProcId.js","datamine-types.js","bursts/getEffectsForBurst.js","bursts/getExtraAttackDamageFramesEntry.js","buffs/getMetadataForPassive.js","buffs/getNameForProc.js","buffs/getNameForPassive.js","buffs/isProcEffect.js","buffs/isPassiveEffect.js","buffs/parsers/buff-types.js","buffs/parsers/_helpers.js","buffs/parsers/proc-effect-mapping.js","buffs/parsers/conditional-effect-mapping.js","buffs/parsers/passive-effect-mapping.js","buffs/parsers/convertConditionalEffectToBuffs.js","buffs/parsers/buff-metadata.js","buffs/parsers/convertProcEffectToBuffs.js","buffs/parsers/convertPassiveEffectToBuffs.js","buffs/parsers/getMetadataForBuff.js","buffs/combineEffectsAndDamageFrames.js","buffs/getEffectName.js","extra-skills/getEffectsForExtraSkill.js","items/getEffectsForItem.js","items/getItemImageUrl.js","leader-skills/getEffectsForLeaderSkill.js","units/getUnitImageFileNames.js","units/getUnitImageUrl.js","sp-enhancements/_constants.js","sp-enhancements/getSpEntryId.js","sp-enhancements/getEffectsForSpEnhancement.js","sp-enhancements/getSpCategoryName.js","sp-enhancements/spIndexToCode.js","sp-enhancements/spCodeToIndex.js","sp-enhancements/getSpEntryWithId.js","sp-enhancements/getAllDependenciesForSpEntry.js","sp-enhancements/getAllEntriesThatDependOnSpEntry.js","version.js"],"names":["bfmtUtilities","exports","getLevelEntryForBurst","burst","level","burstEffectsByLevel","Array","isArray","levels","levelIndex","isNaN","length","getEffectId","effect","resultId","KNOWN_PROC_ID","KNOWN_PASSIVE_ID","KNOWN_CONDITIONAL_ID","ProcBuffType","constants","Object","freeze","__proto__","PASSIVE_METADATA","1","ID","Name","2","3","4","5","6","8","9","10","11","12","13","14","15","16","17","19","20","21","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","52","53","55","58","59","61","62","63","64","65","66","69","70","71","72","73","74","75","77","78","79","80","81","82","84","85","86","88","89","90","91","92","93","96","97","99","100","101","102","103","104","105","106","107","109","110","111","112","113","114","127","128","143","10008","11004","11005","11006","11009","66,1","PROC_METADATA","0","Type","7","18","22","51","54","56","57","60","67","68","76","83","87","94","95","119","123","126","130","131","132","901","902","903","905","906","907","908","10000","10001","10002","10003","10004","10005","10006","10007","10009","10012","10015","10016","10017","10018","10019","10020","10021","10022","10023","10025","10026","11000","11001","11002","11003","70001","70002","2-5","getMetadataForProc","id","metadata","hasOwnProperty","call","isAttackingProcId","metadataEntry","Attack","Ailment","ArenaCondition","MoveType","TargetArea","TargetAreaShorthand","TargetType","SpPassiveType","SphereTypeName","SphereTypeId","SpCategoryName","SpCategoryId","UnitAnimationKey","UnitElement","UnitGender","UnitGettingType","UnitKind","UnitType","ItemType","MimicUnitIds","index","getEffectsForBurst","levelEntry","effects","getExtraAttackDamageFramesEntry","damageFrames","effectDelay","unifiedFrames","filter","frame","procId","BurstHeal","reduce","acc","frameEntry","keepFirstFrame","numFrames","damageDistribution","frameTimes","frameIndex","push","damage","time","resultDamageFramesEntry","effect delay time(ms)/frame","frame times","hit dmg% distribution","hit dmg% distribution (total)","hits","sort","a","b","forEach","getMetadataForPassive","getNameForProc","getNameForPassive","isProcEffect","isPassiveEffect","MimicMonsterGroupMapping","1000","Mimic","1100","BatMimic","1101","1200","DragonMimic","1300","MetalMimic","BuffStackType","BuffSource","BuffConditionElement","UnitStat","IconId","BuffId","datamineTypes","createSourcesFromContext","context","resultArray","previousSources","slice","unshift","source","sourceId","createSourceEntryFromContext","processExtraSkillConditions","conditions","aggregate","units","Set","items","sphereTypes","unknowns","condition","add","item","unit","type_id","condition_id","entries","entry","size","from","getPassiveTargetData","isPartyEffect","LeaderSkill","sp_type","EnhancePassive","Party","targetType","Self","targetArea","Aoe","Single","getProcTargetData","parseNumberOrDefault","value","defaultValue","createUnknownParamsValue","params","startIndex","hasValue","result","buffSourceIsBurstType","BraveBurst","SuperBraveBurst","UltimateBraveBurst","BondedBraveBurst","BondedSuperBraveBurst","DualBraveBurst","includes","mapping","getProcEffectToBuffMapping","reload","Map","map","UNKNOWN_PROC_PARAM_EFFECT_KEY","ELEMENT_MAPPING","All","Fire","Water","Earth","Thunder","Light","Dark","AILMENT_MAPPING","Poison","Weak","Sick","Injury","Curse","Paralysis","AttackReduction","DefenseReduction","RecoveryReduction","retrieveCommonInfoForEffects","injectionContext","targetData","sources","splitEffectParams","split","splitEffectWithUnknownProcParamsProperty","rawParams","createUnknownParamsEntry","unknownParams","originalId","assign","UNKNOWN_PROC_BUFF_PARAMS","createTurnDurationEntry","buffs","duration","TURN_DURATION_MODIFICATION","createNoParamsEntry","NO_PARAMS_SPECIFIED","handlePostParse","results","createUnknownParamsEntryFromExtraParams","extraParams","isTurnDurationBuff","turnDuration","getAttackInformationFromContext","distribution","parseProcWithSingleNumericalParameterAndTurnDuration","effectValueKey","effectTurnDurationKey","parseParamValue","rawValue","buffId","rawTurnDuration","set","atk%","flatAtk","crit%","bc%","hc%","dmg%","filteredValue","key","keys","healLow","healHigh","healerRec%","recX","recY","targetRec%","rec","flatFill","percentFill","rawFlatFill","rawPercentFill","element","atk","def","crit","coreStatProperties","rawElement","Unknown","effectElement","statType","effectKey","find","k","startsWith","concat","prop","hasAnyStats","some","statKey","buffEntry","targetElements","bc","hc","dropRateProperties","hasAnyRates","recoveredHpPercent","rawRecoveredHp","flatHpBoost","percentHpBoost","rawFlatBoost","rawPercentBoost","STAT_TYPE_MAPPING","statReductionEntries","statType1","value1","procChance1","statType2","value2","procChance2","rawStatType","rawProcChance","chance","stat","buffKey","hasAnyValues","curedAilments","splitParams","knownParams","p","param","values","ailment","inflictedAilments","numParams","ailmentValue","ailmentType","reviveToHp","rawReviveToHp","rawHits","Random","drainLow%","drainHigh%","mitigation","rawMitigation","mitigationKey","e","AILMENTS_ORDER","resistances","poison","weak","sick","injury","curse","paralysis","rawDuration","ailmentKeysInEffect","correspondingKey","fillLow","fillHigh","rawFillLow","rawFillHigh","rawChance","whenAttacked","coreStatPropertyMapping","effectToCoreStatMapping","attack","defense","recovery","hp","stats","convertedStat","rawConvertedStat","hitIncreasePerHit","extraHitDamage","hpDamageLow%","hpDamageHigh%","hpDamageChance%","attackElements","element1","element2","element3","elements","validElements","inputElement","sanitizedElement","flatDrainLow","flatDrainHigh","percentDrainLow","percentDrainHigh","rawFlatLow","rawFlatHigh","rawPercentLow","rawPercentHigh","drainLow","drainHigh","summonGroup","summonId","rawPositionX","rawPositionY","positionX","positionY","effectAilmentsCured","unknownAilmentCount","i","rawElementsMitigated","rawModLow","rawModHigh","rawFlatAtk","atkLow%","atkHigh%","overdriveFill","rawOverdriveFill","damageParams","affectsElement","unitIndex","rawAffectsElement","rawUnitIndex","filteredDamageParams","bb","sbb","ubb","rawBb","rawSbb","rawUbb","type","rawHpLow","rawHpHigh","hpLow","hpHigh","baseAtk%","addedAtk%","proportionalMode","rawMaxAttackValue","rawProportionalMode","rawBasePercentHpLow","rawBasePercentHpHigh","rawCurrentPercentHpLow","rawCurrentPercentHpHigh","rawFixedDamage","rawIsLethal","basePercentHpLow","basePercentHpHigh","currentPercentHpLow","currentPercentHpHigh","fixedDamage","isLethal","createAttackOfType","valueProperties","rawDamageLow","rawDamageHigh","reflectedDamageLow","reflectedDamageHigh","reflectedDamageLow%","reflectedDamageHigh%","inflictedReductions","debuffTurnDuration","reductionValue","reductionValueKey","chanceKey","inflictionChances","setMapping","getConditionalEffectToBuffMapping","UNKNOWN_CONDITIONAL_BUFF_PARAMS","rawRecoverValue","recoverValue","convertConditionalEffectToBuffs","TypeError","conversionFunction","reloadMapping","get","UNKNOWN_CONDITIONAL_EFFECT_ID","defaultConversionFunction","getPassiveEffectToBuffMapping","X","OmniParadigm","TYPE_MAPPING","Lord","Anima","Breaker","Guardian","Oracle","Rex","STATS_ORDER","DROP_TYPES_ORDER","conditionInfo","convertConditionalEffectToBuffsWithInjectionContext","UNKNOWN_PASSIVE_BUFF_PARAMS","ThresholdType","parseThresholdValuesFromParamsProperty","rawThreshold","rawRequireAboveFlag","thresholdType","threshold","requireAbove","parseThresholdValuesFromEffect","suffix","getThresholdConditions","Hp","hpGreaterThanOrEqualTo","hpLessThanOrEqualTo","Bb","bbGaugeGreaterThanOrEqualTo","bbGaugeLessThanOrEqualTo","parsePassiveWithSingleNumericalParameter","typedEffect","parsePassiveWithNumericalValueRangeAndChance","effectKeyLow","effectKeyHigh","effectKeyChance","buffKeyLow","buffKeyHigh","defaultEffectChance","generateBaseConditions","valueLow","valueHigh","rawLowValue","rawHighValue","[object Object]","elementValue","createBaseStatObject","unitType","targetUnitType","elem","thresholdInfo","thresholdConditions","dropRates","zel","karma","dropType","onEnemyDefeat","damageReduction","rawReduction","rawHealLow","rawHealHigh","onBattleWin","sparkDamageBoost","rawSparkDamageBoost","addedRec","rawAddedRec","addedRec%","onNormalAttack","additionalActions","damageModifier","rawAdditionalActions","rawDamageModifier","minimumElements","minumumUniqueElements","GENDER_MAPPING","Other","Male","Female","gender","rawGender","targetGender","baseResist","buffResist","rawBaseResist","rawBuffResist","availableStats","baseValue","addedValue","damageBoost","ResistType","rawBaseCritDamageResist","rawBuffCritDamageResist","rawBaseElementDamageResist","rawBuffElementDamageResist","rawBaseCritChanceResist","rawBuffCritChanceResist","resistType","CriticalDamage","base","buff","ElementDamage","CriticalHitRate","baseKey","triggeredBuffs","BUFF_METADATA","name","turnDurationModification","stackType","Passive","icons","TURN_DURATION_DOWN","TURN_DURATION_UP","UNKNOWN","UNKNOWN_PASSIVE_EFFECT_ID","passive:1:hp","BUFF_HPDOWN","BUFF_HPUP","passive:1:atk","BUFF_ATKDOWN","BUFF_ATKUP","passive:1:def","BUFF_DEFDOWN","BUFF_DEFUP","passive:1:rec","BUFF_RECDOWN","BUFF_RECUP","passive:1:crit","BUFF_CRTRATEDOWN","BUFF_CRTRATEUP","createIconGetterForStat","polarity","iconKey","toUpperCase","passive:2:hp","passive:2:atk","passive:2:def","passive:2:rec","passive:2:crit","passive:3:hp","passive:3:atk","passive:3:def","passive:3:rec","passive:3:crit","passive:4:poison","poisonResist","BUFF_POISONBLK","passive:4:weak","weakResist","BUFF_WEAKBLK","passive:4:sick","sickResist","BUFF_SICKBLK","passive:4:injury","injuryResist","BUFF_INJURYBLK","passive:4:curse","curseResist","BUFF_CURSEBLK","passive:4:paralysis","paralysisResist","BUFF_PARALYSISBLK","passive:5:fire","fireMitigation","BUFF_FIREDMGDOWN","passive:5:water","waterMitigation","BUFF_WATERDMGDOWN","passive:5:earth","earthMitigation","BUFF_EARTHDMGDOWN","passive:5:thunder","thunderMitigation","BUFF_THUNDERDMGDOWN","passive:5:light","lightMitigation","BUFF_LIGHTDMGDOWN","passive:5:dark","darkMitigation","BUFF_DARKDMGDOWN","passive:5:unknown","BUFF_ELEMENTDMGDOWN","passive:8","BUFF_DAMAGECUT","passive:9","bbGauge","BUFF_BBREC","passive:10","hcEfficacy","BUFF_HCREC","passive:11:atk","BUFF_HPTHRESHATKDOWN","BUFF_HPTHRESHATKUP","passive:11:def","BUFF_HPTHRESHDEFDOWN","BUFF_HPTHRESHDEFUP","passive:11:rec","BUFF_HPTHRESHRECDOWN","BUFF_HPTHRESHRECUP","passive:11:crit","BUFF_HPTHRESHCRTRATEDOWN","BUFF_HPTHRESHCRTRATEUP","passive:12:bc","bcDropRate","BUFF_HPTHRESHBCDOWN","BUFF_HPTHRESHBCDROP","passive:12:hc","hcDropRate","BUFF_HPTHRESHHCDOWN","BUFF_HPTHRESHHCDROP","passive:12:item","itemDropRate","BUFF_HPTHRESHITEMDOWN","BUFF_HPTHRESHITEMDROP","passive:12:zel","zelDropRate","BUFF_HPTHRESHZELDOWN","BUFF_HPTHRESHZELDROP","passive:12:karma","karmaDropRate","BUFF_HPTHRESHKARMADOWN","BUFF_HPTHRESHKARMADROP","passive:13","passive:14","passive:15","hpRecovery","BUFF_HPREC","passive:16","passive:17","BUFF_HPABS","passive:19:bc","BUFF_BCDOWN","BUFF_BCDROP","passive:19:hc","BUFF_HCDOWN","BUFF_HCDROP","passive:19:item","BUFF_ITEMDOWN","BUFF_ITEMDROP","passive:19:zel","BUFF_ZELDOWN","BUFF_ZELDROP","passive:19:karma","BUFF_KARMADOWN","BUFF_KARMADROP","passive:20:poison","poisonInflict","BUFF_ADDPOISON","passive:20:weak","weakInflict","BUFF_ADDWEAK","passive:20:sick","sickInflict","BUFF_ADDSICK","passive:20:injury","injuryInflict","BUFF_ADDINJURY","passive:20:curse","curseInflict","BUFF_ADDCURSE","passive:20:paralysis","paralysisInflict","BUFF_ADDPARA","passive:20:atk down","atkDownInflict","BUFF_ADDATKDOWN","passive:20:def down","defDownInflict","BUFF_ADDDEFDOWN","passive:20:rec down","recDownInflict","BUFF_ADDRECDOWN","passive:20:unknown","BUFF_ADDAILMENT","passive:21:atk","ConditionalTimed","passive:21:def","passive:21:rec","passive:21:crit","passive:23","passive:24","BUFF_BEENATK_HPREC","passive:25","BUFF_DAMAGEBB","passive:26","damageReflect","BUFF_COUNTERDAMAGE","passive:27","targetingModification","BUFF_REPENEATT","BUFF_GETENEATT","passive:28","BUFF_HPTHRESHREPENEATT","BUFF_HPTHRESHGETENEATT","passive:29","defenseIgnore","BUFF_IGNOREDEF","passive:30:atk","BUFF_BBGAUGETHRESHATKDOWN","BUFF_BBGAUGETHRESHATKUP","passive:30:def","BUFF_BBGAUGETHRESHDEFDOWN","BUFF_BBGAUGETHRESHDEFUP","passive:30:rec","BUFF_BBGAUGETHRESHRECDOWN","BUFF_BBGAUGETHRESHRECUP","passive:30:crit","BUFF_BBGAUGETHRESHCRTRATEDOWN","BUFF_BBGAUGETHRESHCRTRATEUP","passive:31:damage","sparkDamage","BUFF_SPARKDOWN","BUFF_SPARKUP","passive:31:bc","BUFF_SPARKBC","passive:31:hc","BUFF_SPARKHC","passive:31:item","BUFF_SPARKITEM","passive:31:zel","BUFF_SPARKZEL","passive:31:karma","BUFF_SPARKKARMA","passive:32","bcEfficacy","BUFF_BBFILL","passive:33","passive:34","criticalDamage","BUFF_CRTUP","passive:35","passive:36","extraAction","BUFF_DBLSTRIKE","passive:37","hitCountModification","BUFF_HITUP","passive:40:atk","BUFF_CONVERTATKDOWN","BUFF_CONVERTATKUP","passive:40:def","BUFF_CONVERTDEFDOWN","BUFF_CONVERTDEFUP","passive:40:rec","BUFF_CONVERTRECDOWN","BUFF_CONVERTRECUP","passive:41:hp","BUFF_UNIQUEELEMENTHPDOWN","BUFF_UNIQUEELEMENTHPUP","passive:41:atk","BUFF_UNIQUEELEMENTATKDOWN","BUFF_UNIQUEELEMENTATKUP","passive:41:def","BUFF_UNIQUEELEMENTDEFDOWN","BUFF_UNIQUEELEMENTDEFUP","passive:41:rec","BUFF_UNIQUEELEMENTRECDOWN","BUFF_UNIQUEELEMENTRECUP","passive:41:crit","BUFF_UNIQUEELEMENTCRTRATEDOWN","BUFF_UNIQUEELEMENTCRTRATEUP","passive:42:hp","passive:42:atk","passive:42:def","passive:42:rec","passive:42:crit","passive:43","reduceDamageToOne","BUFF_DAMAGECUTTOONE","passive:44:hp","passive:44:atk","passive:44:def","passive:44:rec","passive:44:crit","passive:45:base","criticalDamageMitigation","BUFF_CRTDOWN","passive:45:buff","passive:46:atk","BUFF_HPSCALEDATKDOWN","BUFF_HPSCALEDATKUP","passive:46:def","BUFF_HPSCALEDDEFDOWN","BUFF_HPSCALEDDEFUP","passive:46:rec","BUFF_HPSCALEDRECDOWN","BUFF_HPSCALEDRECUP","passive:47","BUFF_SPARKBBUP","passive:48","bcCostReduction","BUFF_BBCOST_REDUCTION","passive:49","bbGaugeConsumptionReduction","passive:50:fire","fireElementalDamage","BUFF_FIREDMGUP","passive:50:water","waterElementalDamage","BUFF_WATERDMGUP","passive:50:earth","earthElementalDamage","BUFF_EARTHDMGUP","passive:50:thunder","thunderElementalDamage","BUFF_THUNDERDMGUP","passive:50:light","lightElementalDamage","BUFF_LIGHTDMGUP","passive:50:dark","darkElementalDamage","BUFF_DARKDMGUP","passive:50:unknown","BUFF_ELEMENTDMGUP","passive:53:critical-damage-base","passive:53:critical-damage-buff","passive:53:element-damage-base","elementalWeaknessDamageMitigation","BUFF_ELEMENTDOWN","passive:53:element-damage-buff","passive:53:critical-rate-base","passive:53:critical-rate-buff","passive:55:hp condition","UNKNOWN_PROC_EFFECT_ID","proc:1","ATK_ST","ATK_AOE","proc:2","Burst","proc:3","Active","proc:4:flat","proc:4:percent","hasElement","proc:5:atk","proc:5:def","proc:5:rec","proc:5:crit","proc:6:bc","proc:6:hc","proc:6:item","proc:7","koResistance","Singleton","BUFF_KOBLK","proc:8:flat","proc:8:percent","proc:9:atk","proc:9:def","proc:9:rec","proc:9:unknown","proc:10:poison","proc:10:weak","proc:10:sick","proc:10:injury","proc:10:curse","proc:10:paralysis","proc:10:atk down","atkDownResist","BUFF_ATKDOWNBLK","proc:10:def down","defDownResist","BUFF_DEFDOWNBLK","proc:10:rec down","recDownResist","BUFF_RECDOWNBLK","proc:10:unknown","BUFF_AILMENTBLK","proc:11:poison","DEBUFF_POISON","proc:11:weak","DEBUFF_WEAK","proc:11:sick","DEBUFF_SICK","proc:11:injury","DEBUFF_INJURY","proc:11:curse","DEBUFF_CURSE","proc:11:paralysis","DEBUFF_PARALYSIS","proc:11:atk down","proc:11:def down","proc:11:rec down","proc:11:unknown","DEBUFF_AILMENT","proc:12","proc:13","ATK_RT","proc:14","ATK_ST_HPREC","ATK_AOE_HPREC","proc:16:fire","proc:16:water","proc:16:earth","proc:16:thunder","proc:16:light","proc:16:dark","proc:16:all","proc:16:unknown","proc:17:poison","proc:17:weak","proc:17:sick","proc:17:injury","proc:17:curse","proc:17:paralysis","proc:18","proc:19","proc:20","proc:22","proc:23","proc:24:atk","proc:24:def","proc:24:rec","proc:26","proc:27","ATK_ST_PROPORTIONAL","ATK_AOE_PROPORTIONAL","proc:28","ATK_ST_FIXED","ATK_AOE_FIXED","proc:29","ATK_ST_MULTIELEMENT","ATK_AOE_MULTIELEMENT","proc:30:fire","elementModification","BUFF_ADDFIRE","proc:30:water","BUFF_ADDWATER","proc:30:earth","BUFF_ADDEARTH","proc:30:thunder","BUFF_ADDTHUNDER","proc:30:light","BUFF_ADDLIGHT","proc:30:dark","BUFF_ADDDARK","proc:30:unknown","BUFF_ADDELEMENT","proc:31:flat","proc:31:percent","proc:32:fire","BUFF_SHIFTFIRE","proc:32:water","BUFF_SHIFTWATER","proc:32:earth","BUFF_SHIFTEARTH","proc:32:thunder","BUFF_SHIFTTHUNDER","proc:32:light","BUFF_SHIFTLIGHT","proc:32:dark","BUFF_SHIFTDARK","proc:32:unknown","BUFF_SHIFTELEMENT","proc:33","buffStabilityModification","BUFF_REMOVEBUFF","proc:34:flat","BUFF_BBFILLDOWN","proc:34:percent","proc:36","BUFF_DISABLELS","proc:37","BUFF_SUMMONUNIT","proc:38:poison","proc:38:weak","proc:38:sick","proc:38:injury","proc:38:curse","proc:38:paralysis","proc:38:atk down","proc:38:def down","proc:38:rec down","proc:38:unknown","proc:39:fire","proc:39:water","proc:39:earth","proc:39:thunder","proc:39:light","proc:39:dark","proc:39:unknown","proc:40:poison","proc:40:weak","proc:40:sick","proc:40:injury","proc:40:curse","proc:40:paralysis","proc:40:atk down","proc:40:def down","proc:40:rec down","proc:40:unknown","proc:42","ATK_ST_SACRIFICIAL","ATK_AOE_SACRIFICIAL","proc:43","odGauge","BUFF_OVERDRIVEUP","proc:44","damageOverTime","BUFF_TURNDMG","proc:45:bb","bbAtk","BUFF_BBATKUP","proc:45:sbb","BUFF_SBBATKUP","proc:45:ubb","BUFF_UBBATKUP","proc:46","proc:47","ATK_ST_HPSCALED","ATK_AOE_HPSCALED","proc:48:base","ATK_ST_PIERCING_PROPORTIONAL","ATK_AOE_PIERCING_PROPORTIONAL","proc:48:current","proc:48:fixed","ATK_ST_PIERCING_FIXED","ATK_AOE_PIERCING_FIXED","proc:48:unknown","proc:49","BUFF_KO","proc:50","proc:51:atk down","proc:51:def down","proc:51:rec down","proc:52","proc:53:poison","poisonCounter","BUFF_POISONCOUNTER","proc:53:weak","weakCounter","BUFF_WEAKCOUNTER","proc:53:sick","sickCounter","BUFF_SICKCOUNTER","proc:53:injury","injuryCounter","BUFF_INJCONTER","proc:53:curse","curseCounter","BUFF_CURSECOUNTER","proc:53:paralysis","paralysisCounter","BUFF_PARALYCOUNTER","proc:54","buff:12:ko resistance","index$1","convertProcEffectToBuffs","convertPassiveEffectToBuffs","getMetadataForBuff","index$2","parsers","combineEffectsAndDamageFrames","combinedEntries","correspondingFrameEntry","delay","frames","getEffectName","resultName","effectId","passive","proc","index$3","getEffectsForExtraSkill","skill","index$4","getEffectsForItem","target_area","target_type","fullProcEffect","getItemImageUrl","baseContentUrl","fileName","index$5","getEffectsForLeaderSkill","index$6","getUnitImageFileNames","fileNameSuffix","spritesheet","battleAvatar","guideAvatar","fullIllustration","getUnitImageUrl","CHARACTER_CODE_FOR_UPPERCASE_A","charCodeAt","CHARACTER_CODE_FOR_LOWERCASE_A","CHARACTER_CODE_FOR_NUMBER_0","getSpEntryId","index$7","getEffectsForSpEnhancement","effectWrapper","spType","originalEffect","unwrappedEffect","getSpCategoryName","categoryId","Spark","Drops","Special","spIndexToCode","correspondingCharacterCode","Number","isInteger","String","fromCharCode","spCodeToIndex","code","characterCodeOffset","getSpEntryWithId","spId","getAllDependenciesForSpEntry","allEntries","addedEntries","dependencies","dependency","dependencyId","dependencyEntry","s","has","subDependencies","getAllEntriesThatDependOnSpEntry","dependents","entryId","dependent","subDependents","bursts","extraSkills","leaderSkills","spEnhancements","version"],"mappings":"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","file":"index.browser.min.js","sourcesContent":["\"use strict\";var bfmtUtilities=function(e){function a(e,a){const t=e&&Array.isArray(e.levels)?e.levels:[];let s;return s=null===a||isNaN(a)?t.length-1:+a-1,t[s]}function t(e){let a=\"\";return e&&(a=e[\"proc id\"]||e[\"unknown proc id\"]||e[\"passive id\"]||e[\"unknown passive id\"]||\"\"),a}var s,i,n;!function(e){e.BurstHeal=\"2\",e.Unknown=\"UNKNOWN_PROC_EFFECT_ID\"}(s||(s={})),function(e){e.TriggeredEffect=\"66\",e.Unknown=\"UNKNOWN_PASSIVE_EFFECT_ID\"}(i||(i={})),function(e){e.Unknown=\"UNKNOWN_CONDITIONAL_EFFECT_ID\"}(n||(n={}));var c,o=Object.freeze({__proto__:null,get KNOWN_PROC_ID(){return s},get KNOWN_PASSIVE_ID(){return i},get KNOWN_CONDITIONAL_ID(){return n}});!function(e){e.Attack=\"Attack\"}(c||(c={}));const r=Object.freeze({1:{ID:\"1\",Name:\"Parameter Boost\"},2:{ID:\"2\",Name:\"Elemental Parameter Boost\"},3:{ID:\"3\",Name:\"Type-Based Parameter Boost\"},4:{ID:\"4\",Name:\"Status Negation\"},5:{ID:\"5\",Name:\"Elemental Damage Reduction\"},6:{ID:\"6\",Name:\"\"},8:{ID:\"8\",Name:\"Damage Reduction\"},9:{ID:\"9\",Name:\"Gradual BB Gauge Boost\"},10:{ID:\"10\",Name:\"HC Efficacy\"},11:{ID:\"11\",Name:\"HP-Conditional Parameter Boost\"},12:{ID:\"12\",Name:\"HP-Conditional Drop Rate Boost\"},13:{ID:\"13\",Name:\"BC Fill on Enemy Defeat\"},14:{ID:\"14\",Name:\"Damage Reduction (Chance)\"},15:{ID:\"15\",Name:\"Heal on Enemy Defeat\"},16:{ID:\"16\",Name:\"Heal on Battle Victory\"},17:{ID:\"17\",Name:\"HP Absorption\"},19:{ID:\"19\",Name:\"Drop Rate Boost\"},20:{ID:\"20\",Name:\"Status Infliction\"},21:{ID:\"21\",Name:\"Parameter Boost for First X Turns\"},23:{ID:\"23\",Name:\"BC Fill on Battle Victory\"},24:{ID:\"24\",Name:\"Heal when Attacked (Chance)\"},25:{ID:\"25\",Name:\"BC Fill when Hit (Chance)\"},26:{ID:\"26\",Name:\"Damage Counter (Chance)\"},27:{ID:\"27\",Name:\"Increased Target Chance\"},28:{ID:\"28\",Name:\"Decreased Target Chance\"},29:{ID:\"29\",Name:\"Defense Ignore (Chance)\"},30:{ID:\"30\",Name:\"BB Conditional Parameter Boost\"},31:{ID:\"31\",Name:\"Spark Damage Boost, Boost Drop Rate on Spark\"},32:{ID:\"32\",Name:\"BC Efficacy\"},33:{ID:\"33\",Name:\"Heal over Time\"},34:{ID:\"34\",Name:\"Critical Damage Boost\"},35:{ID:\"35\",Name:\"BC Fill when Normal Attacking\"},36:{ID:\"36\",Name:\"Extra Action\"},37:{ID:\"37\",Name:\"Hit Count Boost\"},38:{ID:\"38\",Name:\"\"},39:{ID:\"39\",Name:\"\"},40:{ID:\"40\",Name:\"Parameter Conversion\"},41:{ID:\"41\",Name:\"Unique Element Count Conditional Parameter Boost\"},42:{ID:\"42\",Name:\"Gender Parameter Boost\"},43:{ID:\"43\",Name:\"Damage Reduction to 1\"},44:{ID:\"44\",Name:\"Flat Parameter Boost\"},45:{ID:\"45\",Name:\"Critical Damage Negation\"},46:{ID:\"46\",Name:\"Parameter Boost Relative to HP Remainaing\"},47:{ID:\"47\",Name:\"BC Fill on Spark\"},48:{ID:\"48\",Name:\"BC Cost Reduction\"},49:{ID:\"49\",Name:\"BB Gauge Consumption Reduction\"},50:{ID:\"50\",Name:\"Elemental Damage Boost\"},52:{ID:\"52\",Name:\"\"},53:{ID:\"53\",Name:\"Critical/Elemental Weakness Damage Negation\"},55:{ID:\"55\",Name:\"Conditional Effect based on HP Threshold\"},58:{ID:\"58\",Name:\"Damage Reduction when Guarding\"},59:{ID:\"59\",Name:\"BC Fill when Attacked when Guarding\"},61:{ID:\"61\",Name:\"BC Fill on Guard\"},62:{ID:\"62\",Name:\"Elemental Damage Reduction\"},63:{ID:\"63\",Name:\"Elemental Damage Reduction for first X Turns\"},64:{ID:\"64\",Name:\"BB Atk Boost\"},65:{ID:\"65\",Name:\"BC Fill on Critical\"},66:{ID:\"66\",Name:\"Add buff to Brave Burst\"},69:{ID:\"69\",Name:\"Chance KO Resistance (Angel Idol)\"},70:{ID:\"70\",Name:\"OD Gauge Fill Rate Boost\"},71:{ID:\"71\",Name:\"Status Counter\"},72:{ID:\"72\",Name:\"Turn End Effects Activate at Turn Start\"},73:{ID:\"73\",Name:\"Parameter Reduction Negation\"},74:{ID:\"74\",Name:\"Attack Boost on Status Afflicted Foes\"},75:{ID:\"75\",Name:\"Spark Vulnerability\"},77:{ID:\"77\",Name:\"Spark Damage Reduction\"},78:{ID:\"78\",Name:\"Conditional Effect after Damage Received Threshold\"},79:{ID:\"79\",Name:\"BC Fill after Damage Received Threshold\"},80:{ID:\"80\",Name:\"Conditional Effect after Damage Dealt Threshold\"},81:{ID:\"81\",Name:\"BC Fill after Damage Dealt Threshold\"},82:{ID:\"82\",Name:\"Conditional Effect after BC Received Threshold\"},84:{ID:\"84\",Name:\"Conditional Effect after HC Received Threshold\"},85:{ID:\"85\",Name:\"BC Fill after HC Received Threshold\"},86:{ID:\"86\",Name:\"Conditional Effect after Spark Threshold\"},88:{ID:\"88\",Name:\"Conditional Effect on Guard\"},89:{ID:\"89\",Name:\"Conditional Effect on Critical\"},90:{ID:\"90\",Name:\"Status Infliction on Critical\"},91:{ID:\"91\",Name:\"\"},92:{ID:\"92\",Name:\"Negate Defense Ignore\"},93:{ID:\"93\",Name:\"Added Elements\"},96:{ID:\"96\",Name:\"Normal Attacks Hit All Foes\"},97:{ID:\"97\",Name:\"Player EXP Boost\"},99:{ID:\"99\",Name:\"\"},100:{ID:\"100\",Name:\"Spark Critical\"},101:{ID:\"101\",Name:\"Heal on Spark\"},102:{ID:\"102\",Name:\"Added Elements\"},103:{ID:\"103\",Name:\"BB Atk Boost when HP Passes Threshold\"},104:{ID:\"104\",Name:\"Spark Boost when HP Passes Threshold\"},105:{ID:\"105\",Name:\"Turn-Based Parameter Boost\"},106:{ID:\"106\",Name:\"Conditional Effect after Activating Overdrive\"},107:{ID:\"107\",Name:\"Add Effect to Leader Skill\"},109:{ID:\"109\",Name:\"BB Gauge Reduction (Chance)\"},110:{ID:\"110\",Name:\"BC Efficacy Reduction (Chance)\"},111:{ID:\"111\",Name:\"Increase Brave Burst Activation Rate\"},112:{ID:\"112\",Name:\"ABP/CBP Boost\"},113:{ID:\"113\",Name:\"Conditional Effect after HP Threshold\"},114:{ID:\"114\",Name:\"Inflict Buff when Attacked\"},127:{ID:\"127\",Name:\"Additional Damage (Damage over Time) Reduction\"},128:{ID:\"128\",Name:\"Damage Reduction from Normal Attacks\"},143:{ID:\"143\",Name:\"Break Atk Parameter Limit\"},10008:{ID:\"10008\",Name:\"Damage Reduction from Specific Sources\"},11004:{ID:\"11004\",Name:\"Elemental Spark Damage Boost\"},11005:{ID:\"11005\",Name:\"Elemental Critical Damage Boost\"},11006:{ID:\"11006\",Name:\"Summoner EXP Boost\"},11009:{ID:\"11009\",Name:\"Effect Duration Boost\"},\"66,1\":{ID:\"66,1\",Name:\"\"}}),p=Object.freeze({0:{ID:\"0\",Name:\"\",Type:\"\"},1:{ID:\"1\",Name:\"Regular Damage\",Type:\"Attack\"},2:{ID:\"2\",Name:\"Burst Heal\",Type:\"\"},3:{ID:\"3\",Name:\"Heal over Time\",Type:\"\"},4:{ID:\"4\",Name:\"BB Gauge Refill\",Type:\"\"},5:{ID:\"5\",Name:\"Parameter Boost\",Type:\"\"},6:{ID:\"6\",Name:\"Drop Rate\",Type:\"\"},7:{ID:\"7\",Name:\"Guaranteed KO Resistance (Angel Idol)\",Type:\"\"},8:{ID:\"8\",Name:\"Max HP Boost\",Type:\"\"},9:{ID:\"9\",Name:\"Parameter Reduction\",Type:\"\"},10:{ID:\"10\",Name:\"Status Cleanse\",Type:\"\"},11:{ID:\"11\",Name:\"Status Infliction\",Type:\"\"},12:{ID:\"12\",Name:\"Revive (Guaranteed)\",Type:\"\"},13:{ID:\"13\",Name:\"Random Target Damage\",Type:\"Attack\"},14:{ID:\"14\",Name:\"Lifesteal Damage\",Type:\"Attack\"},16:{ID:\"16\",Name:\"Elemental Damage Reduction\",Type:\"\"},17:{ID:\"17\",Name:\"Status Negation\",Type:\"\"},18:{ID:\"18\",Name:\"Damage Reduction\",Type:\"\"},19:{ID:\"19\",Name:\"Gradual BB Gauge Boost\",Type:\"\"},20:{ID:\"20\",Name:\"BC Fill on Hit\",Type:\"\"},22:{ID:\"22\",Name:\"Defense Ignore\",Type:\"\"},23:{ID:\"23\",Name:\"Spark Boost\",Type:\"\"},24:{ID:\"24\",Name:\"Parameter Conversion\",Type:\"\"},26:{ID:\"26\",Name:\"Hit Count Boost\",Type:\"\"},27:{ID:\"27\",Name:\"Proportional Damage\",Type:\"Attack\"},28:{ID:\"28\",Name:\"Fixed Damage\",Type:\"Attack\"},29:{ID:\"29\",Name:\"Multi-Element Damage\",Type:\"Attack\"},30:{ID:\"30\",Name:\"Add Elements\",Type:\"\"},31:{ID:\"31\",Name:\"Instant BB Gauge Fill\",Type:\"\"},32:{ID:\"32\",Name:\"Element Shift\",Type:\"\"},33:{ID:\"33\",Name:\"Buff Removal (Chance)\",Type:\"\"},34:{ID:\"34\",Name:\"BB Gauge Reduction (Chance)\",Type:\"\"},36:{ID:\"36\",Name:\"Leader Skill Lock (Chance)\",Type:\"\"},37:{ID:\"37\",Name:\"Summon Unit\",Type:\"\"},38:{ID:\"38\",Name:\"Status Cure\",Type:\"\"},39:{ID:\"39\",Name:\"Elemental Damage Reduction\",Type:\"\"},40:{ID:\"40\",Name:\"Status Infliction Added to Attack\",Type:\"\"},42:{ID:\"42\",Name:\"\",Type:\"\"},43:{ID:\"43\",Name:\"Instant OD Fill\",Type:\"\"},44:{ID:\"44\",Name:\"Damage over Time (Additional Damage)\",Type:\"\"},45:{ID:\"45\",Name:\"BB Atk Boost\",Type:\"\"},46:{ID:\"46\",Name:\"Non-Lethal Proportional Damage\",Type:\"Attack\"},47:{ID:\"47\",Name:\"HP Scaled Damage\",Type:\"Attack\"},48:{ID:\"48\",Name:\"Piercing Proportional Damage\",Type:\"Attack\"},49:{ID:\"49\",Name:\"Retire\",Type:\"\"},50:{ID:\"50\",Name:\"Damage Counter\",Type:\"\"},51:{ID:\"51\",Name:\"Parameter Reduction Added to Attack\",Type:\"\"},52:{ID:\"52\",Name:\"BC Efficacy\",Type:\"\"},53:{ID:\"53\",Name:\"Status Counter\",Type:\"\"},54:{ID:\"54\",Name:\"Critical Damage Boost\",Type:\"\"},55:{ID:\"55\",Name:\"Elemental Damage Boost\",Type:\"\"},56:{ID:\"56\",Name:\"Chance KO Resistance (Angel Idol)\",Type:\"\"},57:{ID:\"57\",Name:\"BC Efficacy Reduction\",Type:\"\"},58:{ID:\"58\",Name:\"Spark Vulnerability\",Type:\"\"},59:{ID:\"59\",Name:\"BB Atk Reduction\",Type:\"\"},60:{ID:\"60\",Name:\"\",Type:\"\"},61:{ID:\"61\",Name:\"BB-Scaled Damage\",Type:\"Attack\"},62:{ID:\"62\",Name:\"Barrier\",Type:\"\"},63:{ID:\"63\",Name:\"Selective Buff Wipe\",Type:\"\"},64:{ID:\"64\",Name:\"Consecutive Damage\",Type:\"Attack\"},65:{ID:\"65\",Name:\"Attack Boost on Status Afflicted Foes\",Type:\"\"},66:{ID:\"66\",Name:\"Revive (Chance)\",Type:\"\"},67:{ID:\"67\",Name:\"BC Fill on Spark\",Type:\"\"},68:{ID:\"68\",Name:\"Damage Reduction when Guarding\",Type:\"\"},69:{ID:\"69\",Name:\"BC Fill on Guard\",Type:\"\"},70:{ID:\"70\",Name:\"\",Type:\"\"},71:{ID:\"71\",Name:\"BB Gauge Fill Rate Debuff\",Type:\"\"},73:{ID:\"73\",Name:\"Parameter Reduction Negation\",Type:\"\"},75:{ID:\"75\",Name:\"Element Squad-Scaled Damage\",Type:\"Attack\"},76:{ID:\"76\",Name:\"Extra Action\",Type:\"\"},78:{ID:\"78\",Name:\"Self Parameter Boost\",Type:\"\"},79:{ID:\"79\",Name:\"Player EXP Boost\",Type:\"\"},82:{ID:\"82\",Name:\"\",Type:\"\"},83:{ID:\"83\",Name:\"Spark Critical\",Type:\"\"},84:{ID:\"84\",Name:\"OD Gauge Fill Rate\",Type:\"\"},85:{ID:\"85\",Name:\"Heal when Attacked\",Type:\"\"},86:{ID:\"86\",Name:\"HP Absorption\",Type:\"\"},87:{ID:\"87\",Name:\"Heal on Spark\",Type:\"\"},88:{ID:\"88\",Name:\"Self Spark Boost\",Type:\"\"},89:{ID:\"89\",Name:\"Self Parameter Conversion\",Type:\"\"},92:{ID:\"92\",Name:\"Self Max HP Boost\",Type:\"\"},93:{ID:\"93\",Name:\"Spark/Critical/Elemental Weakness Damage Reduction\",Type:\"\"},94:{ID:\"94\",Name:\"Normal Attacks Hit All Foes\",Type:\"\"},95:{ID:\"95\",Name:\"Nullify Sphere Effects (Sphere Lock)\",Type:\"\"},96:{ID:\"96\",Name:\"Nullify Extra Skill Effects (ES Lock)\",Type:\"\"},97:{ID:\"97\",Name:\"Element Target Damage\",Type:\"Attack\"},113:{ID:\"113\",Name:\"Gradual OD Fill\",Type:\"\"},119:{ID:\"119\",Name:\"Gradual BC Drain\",Type:\"\"},123:{ID:\"123\",Name:\"OD Gauge Reduction\",Type:\"\"},126:{ID:\"126\",Name:\"Damage over Time (Additional Damage) Mitigation\",Type:\"\"},127:{ID:\"127\",Name:\"Lock On\",Type:\"\"},130:{ID:\"130\",Name:\"Parameter Reduction Counter\",Type:\"\"},131:{ID:\"131\",Name:\"\",Type:\"\"},132:{ID:\"132\",Name:\"Critical/Elemental Weakness Vulnerability\",Type:\"\"},901:{ID:\"901\",Name:\"Raid Heal (on Map)\",Type:\"\"},902:{ID:\"902\",Name:\"Raid Parameter Boost\",Type:\"\"},903:{ID:\"903\",Name:\"Raid Boss Reveal\",Type:\"\"},905:{ID:\"905\",Name:\"Raid Teleport\",Type:\"\"},906:{ID:\"906\",Name:\"Raid Flee\",Type:\"\"},907:{ID:\"907\",Name:\"Raid Damage Reduction\",Type:\"\"},908:{ID:\"908\",Name:\"Raid Item Drop Rate Boost\",Type:\"\"},1e4:{ID:\"10000\",Name:\"Taunt\",Type:\"\"},10001:{ID:\"10001\",Name:\"Stealth\",Type:\"\"},10002:{ID:\"10002\",Name:\"Shield (old)\",Type:\"\"},10003:{ID:\"10003\",Name:\"Nullify Sphere Effects (Sphere Lock)\",Type:\"\"},10004:{ID:\"10004\",Name:\"Damage Immunity\",Type:\"\"},10005:{ID:\"10005\",Name:\"Turn Skip (short duration)\",Type:\"\"},10006:{ID:\"10006\",Name:\"Turn Skip (long duration)\",Type:\"\"},10007:{ID:\"10007\",Name:\"Evasion\",Type:\"\"},10009:{ID:\"10009\",Name:\"\",Type:\"\"},10012:{ID:\"10012\",Name:\"OD Drain\",Type:\"\"},10015:{ID:\"10015\",Name:\"Elemental Spark Boost\",Type:\"\"},10016:{ID:\"10016\",Name:\"Element Critical Damage Boost\",Type:\"\"},10017:{ID:\"10017\",Name:\"Elemental Shield\",Type:\"\"},10018:{ID:\"10018\",Name:\"Max HP Reduction\",Type:\"\"},10019:{ID:\"10019\",Name:\"Effect Purge\",Type:\"\"},10020:{ID:\"10020\",Name:\"Piercing Damage\",Type:\"Attack\"},10021:{ID:\"10021\",Name:\"Active Healing Reduction\",Type:\"\"},10022:{ID:\"10022\",Name:\"Passive Healing Reduction\",Type:\"\"},10023:{ID:\"10023\",Name:\"HC Efficacy Reduction\",Type:\"\"},10025:{ID:\"10025\",Name:\"KO Resistance Negation\",Type:\"\"},10026:{ID:\"10026\",Name:\"Doom\",Type:\"\"},11e3:{ID:\"11000\",Name:\"Negative HP-Scaled Damage\",Type:\"Attack\"},11001:{ID:\"11001\",Name:\"Max HP% DoT of Weaker Element Enemies\",Type:\"\"},11002:{ID:\"11002\",Name:\"HP Limit Break, Convert to HP\",Type:\"\"},11003:{ID:\"11003\",Name:\"Effect Negation\",Type:\"\"},70001:{ID:\"70001\",Name:\"Mana Bubble Shield\",Type:\"\"},70002:{ID:\"70002\",Name:\"Recast\",Type:\"\"},\"2-5\":{ID:\"2-5\",Name:\"Burst Heal and DEF/REC Boost\",Type:\"\"}});function F(e,a=p){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}function l(e,a){const t=F(e,a);return!!t&&t.Type===c.Attack}var u,d,f,D,E,U,B,T,R,g,m,A,v,_,N,I,P,k,O,y=Object.freeze({__proto__:null,getLevelEntryForBurst:a,getEffectsForBurst:function(e,t){const s=a(e,t);return s&&Array.isArray(s.effects)?s.effects:[]},getExtraAttackDamageFramesEntry:function(e,a=\"0.0/0\",i){const n=(Array.isArray(e)?e:[]).filter(e=>{const a=t(e);return a===s.BurstHeal||l(a,i)}).reduce((e,a,t)=>{const s=0===t,i=a[\"frame times\"].length,n=a[\"hit dmg% distribution\"],c=a[\"frame times\"];for(let a=s?0:1;a<i;++a)e.push({damage:n[a],time:c[a]});return e},[]),c={\"effect delay time(ms)/frame\":a,\"frame times\":[],\"hit dmg% distribution\":[],\"hit dmg% distribution (total)\":0,hits:0};return n.sort((e,a)=>e.time-a.time).forEach(({time:e,damage:a})=>{c[\"frame times\"].push(e),c[\"hit dmg% distribution\"].push(a),c[\"hit dmg% distribution (total)\"]+=a}),c.hits=c[\"frame times\"].length,c}});function h(e,a=r){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}function b(e,a){const t=F(e,a);return!!t&&t.Name||\"\"}function C(e,a){const t=h(e,a);return!!t&&t.Name||\"\"}function H(e){return!!e&&\"object\"==typeof e&&(Object.hasOwnProperty.call(e,\"proc id\")||Object.hasOwnProperty.call(e,\"unknown proc id\"))}function K(e){return!!e&&\"object\"==typeof e&&(Object.hasOwnProperty.call(e,\"passive id\")||Object.hasOwnProperty.call(e,\"unknown passive id\"))}!function(e){e.Poison=\"poison\",e.Weak=\"weak\",e.Sick=\"sick\",e.Injury=\"injury\",e.Curse=\"curse\",e.Paralysis=\"paralysis\",e.AttackReduction=\"atk down\",e.DefenseReduction=\"def down\",e.RecoveryReduction=\"rec down\",e.Unknown=\"unknown\"}(u||(u={})),function(e){e.hp_50pr_under=\"hp_50pr_under\",e.hp_50pr_over=\"hp_50pr_over\",e.hp_75pr_under=\"hp_75pr_under\",e.hp_25pr_under=\"hp_25pr_under\",e.hp_min=\"hp_min\",e.hp_max=\"hp_max\",e.atk_max=\"atk_max\",e.random=\"random\"}(d||(d={})),function(e){e.Moving=\"1\",e.Teleporting=\"2\",e.NonMoving=\"3\"}(f||(f={})),function(e){e.Aoe=\"aoe\",e.Single=\"single\",e.Random=\"random\"}(D||(D={})),function(e){e.Aoe=\"AOE\",e.Single=\"ST\",e.Random=\"RT\"}(E||(E={})),function(e){e.Self=\"self\",e.Party=\"party\",e.Enemy=\"enemy\"}(U||(U={})),function(e){e.AddPassive=\"passive\",e.EnhanceBb=\"add to bb\",e.EnhanceSbb=\"add to sbb\",e.EnhanceUbb=\"add to ubb\",e.EnhancePassive=\"add to passive\"}(B||(B={})),function(e){e.None=\"None\",e[\"Status Enhancing\"]=\"Status Enhancing\",e.Critical=\"Critical\",e.Drop=\"Drop\",e[\"Ailment Inducing\"]=\"Ailment Inducing\",e[\"Element Fusion\"]=\"Element Fusion\",e[\"BB Gauge\"]=\"BB Gauge\",e[\"HP Recovery\"]=\"HP Recovery\",e[\"Target Setting\"]=\"Target Setting\",e[\"Damage Deflecting\"]=\"Damage Deflecting\",e[\"Damage Reducing\"]=\"Damage Reducing\",e.Spark=\"Spark\",e[\"Defense Piercing\"]=\"Defense Piercing\",e[\"Attack Boosting\"]=\"Attack Boosting\",e.Special=\"Special\"}(T||(T={})),function(e){e[e.None=0]=\"None\",e[e[\"Status Enhancing\"]=1]=\"Status Enhancing\",e[e.Critical=2]=\"Critical\",e[e.Drop=3]=\"Drop\",e[e[\"Ailment Inducing\"]=4]=\"Ailment Inducing\",e[e[\"Element Fusion\"]=5]=\"Element Fusion\",e[e[\"BB Gauge\"]=6]=\"BB Gauge\",e[e[\"HP Recovery\"]=7]=\"HP Recovery\",e[e[\"Target Setting\"]=8]=\"Target Setting\",e[e[\"Damage Deflecting\"]=9]=\"Damage Deflecting\",e[e[\"Damage Reducing\"]=10]=\"Damage Reducing\",e[e.Spark=11]=\"Spark\",e[e[\"Defense Piercing\"]=12]=\"Defense Piercing\",e[e[\"Attack Boosting\"]=13]=\"Attack Boosting\",e[e.Special=14]=\"Special\"}(R||(R={})),function(e){e[\"Parameter Boost\"]=\"Parameter Boost\",e.Spark=\"Spark\",e[\"Critical Hits\"]=\"Critical Hits\",e[\"Attack Boost\"]=\"Attack Boost\",e[\"BB Gauge\"]=\"BB Gauge\",e[\"HP Recovery\"]=\"HP Recovery\",e.Drops=\"Drops\",e[\"Ailment Resistance\"]=\"Ailment Resistance\",e[\"Ailment Infliction\"]=\"Ailment Infliction\",e[\"Damage Reduction\"]=\"Damage Reduction\",e.Special=\"Special\",e.Unknown=\"Unknown\"}(g||(g={})),function(e){e[\"Parameter Boost\"]=\"1\",e.Spark=\"2\",e[\"Critical Hits\"]=\"3\",e[\"Attack Boost\"]=\"4\",e[\"BB Gauge\"]=\"5\",e[\"HP Recovery\"]=\"6\",e.Drops=\"7\",e[\"Ailment Resistance\"]=\"8\",e[\"Ailment Infliction\"]=\"9\",e[\"Damage Reduction\"]=\"10\",e.Special=\"11\"}(m||(m={})),function(e){e.Attack=\"attack\",e.Idle=\"idle\",e.Move=\"move\"}(A||(A={})),function(e){e.Fire=\"fire\",e.Water=\"water\",e.Earth=\"earth\",e.Thunder=\"thunder\",e.Light=\"light\",e.Dark=\"dark\"}(v||(v={})),function(e){e.Male=\"male\",e.Female=\"female\",e.Other=\"other\"}(_||(_={})),function(e){e.Ineligible=\"not eligible for achievement\",e.Farmable=\"farmable\",e.RareSummon=\"rare summon\",e.ExtraSkillElgif=\"extra skill elgif\"}(N||(N={})),function(e){e.Normal=\"normal\",e.Evolution=\"evo\",e.Enhancing=\"enhancing\",e.Sale=\"sale\"}(I||(I={})),function(e){e.Lord=\"lord\",e.Anima=\"anima\",e.Breaker=\"breaker\",e.Guardian=\"guardian\",e.Oracle=\"oracle\",e.Rex=\"rex\"}(P||(P={})),function(e){e.Consumable=\"consumable\",e.Material=\"material\",e.Sphere=\"sphere\",e.EvolutionMaterial=\"evomat\",e.SummonerConsumable=\"summoner_consumable\",e.LeaderSkillSphere=\"ls_sphere\"}(k||(k={})),function(e){e.Mimic=\"60142\",e.BatMimic=\"60143\",e.DragonMimic=\"60144\",e.MetalMimic=\"60224\"}(O||(O={}));const S={1e3:O.Mimic,1100:O.BatMimic,1101:O.BatMimic,1200:O.DragonMimic,1300:O.MetalMimic};var W,w,L,M,j,G,x=Object.freeze({__proto__:null,get Ailment(){return u},get ArenaCondition(){return d},get MoveType(){return f},get TargetArea(){return D},get TargetAreaShorthand(){return E},get TargetType(){return U},get SpPassiveType(){return B},get SphereTypeName(){return T},get SphereTypeId(){return R},get SpCategoryName(){return g},get SpCategoryId(){return m},get UnitAnimationKey(){return A},get UnitElement(){return v},get UnitGender(){return _},get UnitGettingType(){return N},get UnitKind(){return I},get UnitType(){return P},get ItemType(){return k},get MimicUnitIds(){return O},MimicMonsterGroupMapping:S});function V(e){const a=Array.isArray(e.previousSources)?e.previousSources.slice():[];return a.unshift(function(e){return`${e.source}-${e.sourceId}`}(e)),a}function Y(e){const a=e&&Array.isArray(e.conditions)&&e.conditions||[],t={units:new Set,items:new Set,sphereTypes:new Set,unknowns:new Set};a.forEach((e,a)=>{\"sphere category required (raw)\"in e?t.sphereTypes.add(e[\"sphere category required (raw)\"]):\"item required\"in e?e[\"item required\"].forEach(e=>{t.items.add(e)}):\"unit required\"in e?e[\"unit required\"].forEach(e=>{t.units.add(\"\"+e.id)}):t.unknowns.add(`type:${e.type_id||a},condition:${e.condition_id||a}`)});return Object.entries(t).filter(e=>e[1].size>0).reduce((e,a)=>(e[a[0]]=Array.from(a[1]),e),{})}function $(e,a){const t=a.source===w.LeaderSkill||e.sp_type===B.EnhancePassive||e[\"passive target\"]===U.Party;return{targetType:t?U.Party:U.Self,targetArea:t?D.Aoe:D.Single}}function X(e){return{targetArea:e[\"target area\"],targetType:e[\"target type\"]}}function z(e,a=0){return null===e||isNaN(e)?a:+e}function Q(e=[],a=0){let t=!1;const s=e.reduce((e,s,i)=>(s&&\"0\"!==s&&(e[\"param_\"+(a+i)]=s,t=!0),e),{});return t?s:void 0}function q(e){return!!e&&[w.BraveBurst,w.SuperBraveBurst,w.UltimateBraveBurst,w.BondedBraveBurst,w.BondedSuperBraveBurst,w.DualBraveBurst].includes(e)}let Z,J,ee;function ae(e){return Z&&!e||(Z=new Map,function(e){const a=\"unknown proc param\",t={0:L.All,1:v.Fire,2:v.Water,3:v.Earth,4:v.Thunder,5:v.Light,6:v.Dark},s={1:u.Poison,2:u.Weak,3:u.Sick,4:u.Injury,5:u.Curse,6:u.Paralysis,7:u.AttackReduction,8:u.DefenseReduction,9:u.RecoveryReduction},i=(e,a,t)=>({targetData:(t&&t.getProcTargetData||X)(e),sources:(t&&t.createSourcesFromContext||V)(a),effectDelay:e[\"effect delay time(ms)/frame\"]}),n=e=>e.params.split(\",\"),c=e=>{const t=e.params||e[a]||\"\";return n({params:t})},o=(e,{originalId:a,sources:t,targetData:s,effectDelay:i})=>Object.assign({id:G.UNKNOWN_PROC_BUFF_PARAMS,originalId:a,effectDelay:i,sources:t,value:e},s),r=({originalId:e,sources:a,buffs:t,duration:s,targetData:i})=>Object.assign({id:G.TURN_DURATION_MODIFICATION,originalId:e,sources:a,value:{buffs:t,duration:s}},i),p=({originalId:e,sources:a})=>({id:G.NO_PARAMS_SPECIFIED,originalId:e,sources:a}),F=(e,a,{originalId:t,sources:s,targetData:i,effectDelay:n})=>{0===e.length&&e.push(p({originalId:t,sources:s})),a&&e.push(o(a,{originalId:t,sources:s,targetData:i,effectDelay:n}))},l=(e,a,t)=>{let s;return e&&e.length>0&&(s=(t&&t.createUnknownParamsValue||Q)(e,a)),s},d=(e,a,t)=>{let s=0!==a;return s&&(s=!(t&&t.buffSourceIsBurstType||q)(e.source)),s},f=e=>({hits:z(e.damageFrames&&e.damageFrames.hits||0),distribution:z(e.damageFrames&&e.damageFrames[\"hit dmg% distribution (total)\"])}),E=({effect:e,context:a,injectionContext:t,effectValueKey:s,effectTurnDurationKey:c,parseParamValue:o=(e=>z(e)),buffId:p,originalId:u})=>{const{targetData:f,sources:D,effectDelay:E}=i(e,a,t);let U,B=0,T=0;if(e.params){const[a,s,...i]=n(e);B=o(a),T=z(s),U=l(i,2,t)}else B=z(e[s]),T=z(e[c]);const R=[];return 0!==B?R.push(Object.assign({id:p,originalId:u,sources:D,effectDelay:E,duration:T,value:B},f)):d(a,T,t)&&R.push(r({originalId:u,sources:D,buffs:[p],duration:T,targetData:f})),F(R,U,{originalId:u,sources:D,targetData:f,effectDelay:E}),R};e.set(\"1\",(e,a,t)=>{const s=\"1\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t),{hits:p,distribution:u}=f(a),d={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let D;if(e.params){let a;[d[\"atk%\"],d.flatAtk,d[\"crit%\"],d[\"bc%\"],d[\"hc%\"],d[\"dmg%\"],...a]=n(e),D=l(a,6,t)}else d[\"atk%\"]=e[\"bb atk%\"],d.flatAtk=e[\"bb flat atk\"],d[\"crit%\"]=e[\"bb crit%\"],d[\"bc%\"]=e[\"bb bc%\"],d[\"hc%\"]=e[\"bb hc%\"],d[\"dmg%\"]=e[\"bb dmg%\"];const E=Object.entries(d).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=z(t),e),{}),U=[];return(0!==p||0!==u||Object.keys(E).length>0)&&U.push(Object.assign({id:\"proc:1\",originalId:s,sources:o,effectDelay:r,value:Object.assign(Object.assign({},E),{hits:p,distribution:u})},c)),F(U,D,{originalId:s,sources:o,targetData:c,effectDelay:r}),U}),e.set(\"2\",(e,a,t)=>{const s=\"2\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t),p={healLow:\"0\",healHigh:\"0\",\"healerRec%\":0};let u;if(e.params){let a,s,i;[p.healLow,p.healHigh,a,s,...i]=n(e),p[\"healerRec%\"]=(100+z(a))*(1+z(s)/100)/10,u=l(i,4,t)}else p.healLow=e[\"heal low\"],p.healHigh=e[\"heal high\"],p[\"healerRec%\"]=e[\"rec added% (from healer)\"];Object.keys(p).forEach(e=>{p[e]=z(p[e])});const d=[];return 0===p.healHigh&&0===p.healLow||d.push(Object.assign({id:\"proc:2\",originalId:s,sources:o,effectDelay:r,value:p},c)),F(d,u,{originalId:s,sources:o,targetData:c,effectDelay:r}),d}),e.set(\"3\",(e,a,t)=>{const s=\"3\",{targetData:c,sources:o,effectDelay:p}=i(e,a,t),u={healLow:\"0\",healHigh:\"0\",\"targetRec%\":0,turnDuration:\"0\"};let f;if(e.params){let a,s;[u.healLow,u.healHigh,a,u.turnDuration,...s]=n(e),u[\"targetRec%\"]=10*(1+z(a)/100),f=l(s,4,t)}else u.healLow=e[\"gradual heal low\"],u.healHigh=e[\"gradual heal high\"],u[\"targetRec%\"]=e[\"rec added% (from target)\"],u.turnDuration=e[\"gradual heal turns (8)\"];Object.keys(u).forEach(e=>{u[e]=z(u[e])});const D=[];return 0!==u.healLow||0!==u.healHigh?D.push(Object.assign({id:\"proc:3\",originalId:s,sources:o,effectDelay:p,duration:u.turnDuration,value:{healLow:u.healLow,healHigh:u.healHigh,\"targetRec%\":u[\"targetRec%\"]}},c)):d(a,u.turnDuration,t)&&D.push(r({originalId:s,sources:o,buffs:[\"proc:3\"],duration:u.turnDuration,targetData:c})),F(D,f,{originalId:s,sources:o,targetData:c,effectDelay:p}),D}),e.set(\"4\",(e,a,t)=>{const s=\"4\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t);let p,u=0,d=0;if(e.params){const[a,s,...i]=n(e);u=z(a)/100,d=z(s),p=l(i,2,t)}else\"bb bc fill\"in e&&(u=z(e[\"bb bc fill\"])),\"bb bc fill%\"in e&&(d=z(e[\"bb bc fill%\"]));const f=[];return 0!==u&&f.push(Object.assign({id:\"proc:4:flat\",originalId:s,sources:o,effectDelay:r,value:u},c)),0!==d&&f.push(Object.assign({id:\"proc:4:percent\",originalId:s,sources:o,effectDelay:r,value:d},c)),F(f,p,{originalId:s,sources:o,targetData:c,effectDelay:r}),f}),e.set(\"5\",(e,a,s)=>{const c=\"5\",{targetData:o,sources:p,effectDelay:u}=i(e,a,s),f={element:L.All,atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",turnDuration:\"0\"},D=[\"atk\",\"def\",\"rec\",\"crit\"];let E;if(e.params){let a,i;[i,f.atk,f.def,f.rec,f.crit,f.turnDuration,...a]=n(e),f.element=t[i]||L.Unknown,E=l(a,6,s)}else{const a=e[\"element buffed\"];f.element=\"all\"===a?L.All:a||L.Unknown;const t=Object.keys(e);D.forEach(a=>{const s=t.find(e=>e.startsWith(a+\"% buff\"));s&&(f[a]=z(e[s]))}),f.turnDuration=z(e[\"buff turns\"])}D.concat([\"turnDuration\"]).forEach(e=>{f[e]=z(f[e])});const U=D.some(e=>0!==f[e]),B=[];return U?D.forEach(e=>{const a=f[e];if(0!==a){const t=Object.assign({id:\"proc:5:\"+e,originalId:c,sources:p,effectDelay:u,duration:f.turnDuration,value:a},o);f.element!==L.All&&(t.conditions={targetElements:[f.element]}),B.push(t)}}):d(a,f.turnDuration,s)&&B.push(r({originalId:c,sources:p,buffs:D.map(e=>\"proc:5:\"+e),duration:f.turnDuration,targetData:o})),F(B,E,{originalId:c,sources:p,targetData:o,effectDelay:u}),B}),e.set(\"6\",(e,a,t)=>{const s=\"6\",{targetData:c,sources:o,effectDelay:p}=i(e,a,t),u={bc:\"0\",hc:\"0\",item:\"0\",turnDuration:\"0\"},f=[\"bc\",\"hc\",\"item\"];let D;if(e.params){let a;[u.bc,u.hc,u.item,u.turnDuration,...a]=n(e),D=l(a,4,t)}else u.bc=e[\"bc drop rate% buff (10)\"],u.hc=e[\"hc drop rate% buff (9)\"],u.item=e[\"item drop rate% buff (11)\"],u.turnDuration=e[\"drop buff rate turns\"];f.concat([\"turnDuration\"]).forEach(e=>{u[e]=z(u[e])});const E=f.some(e=>0!==u[e]),U=[];return E?f.forEach(e=>{const a=u[e];0!==a&&U.push(Object.assign({id:\"proc:6:\"+e,originalId:s,sources:o,effectDelay:p,duration:u.turnDuration,value:a},c))}):d(a,u.turnDuration,t)&&U.push(r({originalId:s,sources:o,buffs:f.map(e=>\"proc:6:\"+e),duration:u.turnDuration,targetData:c})),F(U,D,{originalId:s,sources:o,targetData:c,effectDelay:p}),U}),e.set(\"7\",(e,a,t)=>{const s=\"7\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t);let p,u=0;if(e.params){const[a,...s]=n(e);u=z(a),p=l(s,1,t)}else u=z(e[\"angel idol recover hp%\"]);const d=[Object.assign({id:\"proc:7\",originalId:s,sources:o,effectDelay:r,value:u},c)];return F(d,p,{originalId:s,sources:o,targetData:c,effectDelay:r}),d}),e.set(\"8\",(e,a,t)=>{const s=\"8\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t);let p,u=0,d=0;if(e.params){const[a,s,...i]=n(e);u=z(a),d=z(s),p=l(i,2,t)}else\"max hp increase\"in e&&(u=z(e[\"max hp increase\"])),\"max hp% increase\"in e&&(d=z(e[\"max hp% increase\"]));const f=[];return 0!==u&&f.push(Object.assign({id:\"proc:8:flat\",originalId:s,sources:o,effectDelay:r,value:u},c)),0!==d&&f.push(Object.assign({id:\"proc:8:percent\",originalId:s,sources:o,effectDelay:r,value:d},c)),F(f,p,{originalId:s,sources:o,targetData:c,effectDelay:r}),f}),e.set(\"9\",(e,a,s)=>{const c=\"9\",{targetData:o,sources:p,effectDelay:u}=i(e,a,s),f={0:\"atk\",1:\"def\",2:\"rec\"},D=[\"atk\",\"def\",\"rec\"],E={element:L.All,statReductionEntries:[],turnDuration:0};let U;if(e.params){const[a,i,c,o,r,p,F,u,...d]=n(e);E.element=t[a]||L.Unknown,E.turnDuration=z(u),[[i,c,o],[r,p,F]].forEach(([e,a,t])=>{const s=z(e)-1,i=z(a),n=z(t);3===s?E.statReductionEntries.push(...D.map(e=>({stat:e,value:i,chance:n}))):E.statReductionEntries.push({stat:f[s]||\"unknown\",value:i,chance:n})}),U=l(d,8,s)}else{const a=e[\"element buffed\"];E.element=\"all\"===a?L.All:a||L.Unknown,[\"buff #1\",\"buff #2\"].forEach(a=>{const t=e[a];if(t){const e=z(t[\"proc chance%\"]),a=Object.keys(t);D.forEach(s=>{const i=a.find(e=>e.startsWith(s+\"% buff\"));i&&E.statReductionEntries.push({stat:s,value:z(t[i]),chance:e})})}}),E.turnDuration=z(e[\"buff turns\"])}const B=[];let T=!1;return E.statReductionEntries.forEach(({stat:e,value:a,chance:t})=>{if(0!==a||0!==t){T=!0;const s=Object.assign({id:\"proc:9:\"+e,originalId:c,sources:p,effectDelay:u,duration:E.turnDuration,value:{value:a,chance:t}},o);E.element!==L.All&&(s.conditions={targetElements:[E.element]}),B.push(s)}}),!T&&d(a,E.turnDuration,s)&&B.push(r({originalId:c,sources:p,buffs:D.map(e=>\"proc:9:\"+e),duration:E.turnDuration,targetData:o})),F(B,U,{originalId:c,sources:p,targetData:o,effectDelay:u}),B}),e.set(\"10\",(e,a,t)=>{const c=\"10\",{targetData:o,sources:r,effectDelay:p}=i(e,a,t),d=[];let f;if(e.params){const a=n(e),i=a.slice(0,8),c=a.slice(8);i.filter(e=>\"0\"!==e).forEach(e=>{d.push(s[e]||u.Unknown)}),f=l(c,8,t)}else Object.values(s).forEach(a=>{\"remove \"+a in e&&d.push(a)}),\"remove all status ailments\"in e&&d.push(u.Unknown);const D=d.map(e=>Object.assign({id:\"proc:10:\"+e,originalId:c,sources:r,effectDelay:p,value:!0},o));return F(D,f,{originalId:c,sources:r,targetData:o,effectDelay:p}),D}),e.set(\"11\",(e,a,t)=>{const c=\"11\",{targetData:o,sources:r,effectDelay:p}=i(e,a,t),d=[];let f;if(e.params){let a=n(e);a.length%2!=0&&\"0\"!==a[a.length-1]&&(f=l(a.slice(-1),a.length-1,t),a=a.slice(0,a.length-1));const i=a.length;for(let e=0;e<i;e+=2){const t=a[e],i=z(a[e+1]);if(\"0\"!==t||0!==i){const e=s[t]||u.Unknown;d.push({ailment:e,chance:i})}}}else Object.values(s).forEach(a=>{let t;t=a===u.Weak?\"weaken%\":a===u.AttackReduction||a===u.DefenseReduction||a===u.RecoveryReduction?a:a+\"%\",t in e&&d.push({ailment:a,chance:z(e[t])})});const D=d.map(({ailment:e,chance:a})=>Object.assign({id:\"proc:11:\"+e,originalId:c,sources:r,effectDelay:p,value:a},o));return F(D,f,{originalId:c,sources:r,targetData:o,effectDelay:p}),D}),e.set(\"12\",(e,a,t)=>{const s=\"12\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t);let p,u=0;if(e.params){const[a,...s]=n(e);u=z(a),p=l(s,1,t)}else u=z(e[\"revive to hp%\"]);const d=[Object.assign({id:\"proc:12\",originalId:s,sources:o,effectDelay:r,value:u},c)];return F(d,p,{originalId:s,sources:o,targetData:c,effectDelay:r}),d}),e.set(\"13\",(e,a,t)=>{const s=\"13\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t);let p=0;const{distribution:u}=f(a),d={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\"};let E;if(e.params){let a,s;[d[\"atk%\"],d.flatAtk,d[\"crit%\"],d[\"bc%\"],d[\"hc%\"],s,...a]=n(e),p=z(s),E=l(a,6,t)}else d[\"atk%\"]=e[\"bb atk%\"],d.flatAtk=e[\"bb flat atk\"],d[\"crit%\"]=e[\"bb crit%\"],d[\"bc%\"]=e[\"bb bc%\"],d[\"hc%\"]=e[\"bb hc%\"],p=z(e.hits);const U=Object.entries(d).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=z(t),e),{}),B=[];return(0!==p||0!==u||Object.keys(U).length>0)&&B.push({id:\"proc:13\",originalId:s,sources:o,effectDelay:r,value:Object.assign(Object.assign({},U),{hits:p,distribution:u}),targetType:c.targetType,targetArea:D.Random}),F(B,E,{originalId:s,sources:o,targetData:c,effectDelay:r}),B}),e.set(\"14\",(e,a,t)=>{const s=\"14\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t),{hits:p,distribution:u}=f(a),d={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\",\"drainLow%\":\"0\",\"drainHigh%\":\"0\"};let D;if(e.params){let a;[d[\"atk%\"],d.flatAtk,d[\"crit%\"],d[\"bc%\"],d[\"hc%\"],d[\"dmg%\"],d[\"drainLow%\"],d[\"drainHigh%\"],...a]=n(e),D=l(a,8,t)}else d[\"atk%\"]=e[\"bb atk%\"],d.flatAtk=e[\"bb flat atk\"],d[\"crit%\"]=e[\"bb crit%\"],d[\"bc%\"]=e[\"bb bc%\"],d[\"hc%\"]=e[\"bb hc%\"],d[\"dmg%\"]=e[\"bb dmg%\"],d[\"drainLow%\"]=e[\"hp drain% low\"],d[\"drainHigh%\"]=e[\"hp drain% high\"];const E=Object.entries(d).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=z(t),e),{}),U=[];return(0!==p||0!==u||Object.keys(E).length>0)&&U.push(Object.assign({id:\"proc:14\",originalId:s,sources:o,effectDelay:r,value:Object.assign(Object.assign({},E),{hits:p,distribution:u})},c)),F(U,D,{originalId:s,sources:o,targetData:c,effectDelay:r}),U}),e.set(\"16\",(e,a,s)=>{const c=\"16\",{targetData:o,sources:p,effectDelay:u}=i(e,a,s);let f,D,E=0,U=0;if(e.params){const[a,i,c,...o]=n(e);f=t[a]||L.Unknown,E=z(i),U=z(c),D=l(o,3,s)}else{const a=Object.keys(e).find(e=>e.startsWith(\"mitigate\"));f=a&&Object.values(t).find(e=>a.includes(e))||L.Unknown,a&&(E=z(e[a])),U=z(e[\"buff turns\"])}const B=[];return 0!==E?B.push(Object.assign({id:\"proc:16:\"+f,originalId:c,sources:p,effectDelay:u,duration:U,value:E},o)):d(a,U,s)&&B.push(r({originalId:c,sources:p,buffs:Object.values(t).concat([L.Unknown]).map(e=>\"proc:16:\"+e),duration:U,targetData:o})),F(B,D,{originalId:c,sources:p,targetData:o,effectDelay:u}),B}),e.set(\"17\",(e,a,t)=>{const s=\"17\",{targetData:c,sources:o,effectDelay:p}=i(e,a,t),f=[u.Poison,u.Weak,u.Sick,u.Injury,u.Curse,u.Paralysis],D={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\"};let E,U=0;if(e.params){let a,s;[D.poison,D.weak,D.sick,D.injury,D.curse,D.paralysis,a,...s]=n(e),U=z(a),E=l(s,7,t)}else{const a=Object.keys(e).filter(e=>e.startsWith(\"resist\"));f.forEach(t=>{const s=a.find(e=>e.includes(t));s&&(D[t]=e[s])}),U=z(e[\"resist status ails turns\"])}const B=[];return f.forEach(e=>{const a=z(D[e]);0!==a&&B.push(Object.assign({id:\"proc:17:\"+e,originalId:s,sources:o,effectDelay:p,value:a,duration:U},c))}),0===B.length&&d(a,U,t)&&B.push(r({originalId:s,sources:o,buffs:f.map(e=>\"proc:17:\"+e),duration:U,targetData:c})),F(B,E,{originalId:s,sources:o,targetData:c,effectDelay:p}),B}),e.set(\"18\",(e,a,t)=>E({effect:e,context:a,injectionContext:t,effectValueKey:\"dmg% reduction\",effectTurnDurationKey:\"dmg% reduction turns (36)\",buffId:\"proc:18\",originalId:\"18\"})),e.set(\"19\",(e,a,t)=>E({effect:e,context:a,injectionContext:t,effectValueKey:\"increase bb gauge gradual\",effectTurnDurationKey:\"increase bb gauge gradual turns (37)\",parseParamValue:e=>z(e)/100,buffId:\"proc:19\",originalId:\"19\"})),e.set(\"20\",(e,a,t)=>{const s=\"20\",{targetData:c,sources:o,effectDelay:p}=i(e,a,t);let u,f=0,D=0,E=0,U=0;if(e.params){const[a,s,i,c,...o]=n(e);f=z(a)/100,D=z(s)/100,E=z(i),U=z(c),u=l(o,4,t)}else f=z(e[\"bc fill when attacked low\"]),D=z(e[\"bc fill when attacked high\"]),E=z(e[\"bc fill when attacked%\"]),U=z(e[\"bc fill when attacked turns (38)\"]);const B=[];return 0!==f||0!==D?B.push(Object.assign({id:\"proc:20\",originalId:s,sources:o,effectDelay:p,duration:U,conditions:{whenAttacked:!0},value:{fillLow:f,fillHigh:D,chance:E}},c)):d(a,U,t)&&B.push(r({originalId:s,sources:o,buffs:[\"proc:20\"],duration:U,targetData:c})),F(B,u,{originalId:s,sources:o,targetData:c,effectDelay:p}),B}),e.set(\"22\",(e,a,t)=>E({effect:e,context:a,injectionContext:t,effectValueKey:\"defense% ignore\",effectTurnDurationKey:\"defense% ignore turns (39)\",buffId:\"proc:22\",originalId:\"22\"})),e.set(\"23\",(e,a,t)=>{const s=\"23\",{targetData:c,sources:o,effectDelay:p}=i(e,a,t);let u,f=0,D=0;if(e.params){const a=n(e);f=z(a[0]),D=z(a[6]);const s=[\"0\",...a.slice(1,6),\"0\",...a.slice(7)];u=l(s,0,t)}else f=z(e[\"spark dmg% buff (40)\"]),D=z(e[\"buff turns\"]);const E=[];return 0!==f?E.push(Object.assign({id:\"proc:23\",originalId:s,sources:o,effectDelay:p,duration:D,value:f},c)):d(a,D,t)&&E.push(r({originalId:s,sources:o,buffs:[\"proc:23\"],duration:D,targetData:c})),F(E,u,{originalId:s,sources:o,targetData:c,effectDelay:p}),E}),e.set(\"24\",(e,a,t)=>{const s=\"24\",{targetData:c,sources:o,effectDelay:p}=i(e,a,t),u=[\"atk\",\"def\",\"rec\"],f={1:\"atk\",2:\"def\",3:\"rec\",4:\"hp\"},D={attack:\"atk\",defense:\"def\",recovery:\"rec\",hp:\"hp\"},E={atk:\"0\",def:\"0\",rec:\"0\"};let U,B=0,T=\"unknown\";if(e.params){let a,s,i;[s,E.atk,E.def,E.rec,i,...a]=n(e),T=f[s]||\"unknown\",B=z(i),U=l(a,5,t)}else{const a=e[\"converted attribute\"];T=a in D?D[a]:\"unknown\";const t=Object.keys(e);u.forEach(a=>{const s=t.find(e=>e.startsWith(a+\"% buff\"));s&&(E[a]=e[s])}),B=z(e[\"% converted turns\"])}const R=[];return u.forEach(e=>{const a=z(E[e]);0!==a&&R.push(Object.assign({id:\"proc:24:\"+e,originalId:s,sources:o,effectDelay:p,duration:B,value:{convertedStat:T,value:a}},c))}),0===R.length&&d(a,B,t)&&R.push(r({originalId:s,sources:o,buffs:u.map(e=>\"proc:24:\"+e),duration:B,targetData:c})),F(R,U,{originalId:s,sources:o,targetData:c,effectDelay:p}),R}),e.set(\"26\",(e,a,t)=>{const s=\"26\",{targetData:c,sources:o,effectDelay:p}=i(e,a,t);let u,f=0,D=0,E=0;if(e.params){const a=n(e);f=z(a[0]),D=z(a[2]),E=z(a[7]);const s=[\"0\",a[1],\"0\",...a.slice(3,7),\"0\",...a.slice(8)];u=l(s,0,t)}else f=z(e[\"hit increase/hit\"]),D=z(e[\"extra hits dmg%\"]),E=z(e[\"hit increase buff turns (50)\"]);const U=[];return 0!==f||0!==D?U.push(Object.assign({id:\"proc:26\",originalId:s,sources:o,effectDelay:p,duration:E,value:{hitIncreasePerHit:f,extraHitDamage:D}},c)):d(a,E,t)&&U.push(r({originalId:s,sources:o,buffs:[\"proc:26\"],duration:E,targetData:c})),F(U,u,{originalId:s,sources:o,targetData:c,effectDelay:p}),U}),e.set(\"27\",(e,a,t)=>{const s=\"27\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t),{hits:p,distribution:u}=f(a),d={\"hpDamageLow%\":\"0\",\"hpDamageHigh%\":\"0\",\"hpDamageChance%\":\"0\",\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let D;if(e.params){let a;[d[\"hpDamageLow%\"],d[\"hpDamageHigh%\"],d[\"hpDamageChance%\"],d[\"atk%\"],d.flatAtk,d[\"crit%\"],d[\"bc%\"],d[\"hc%\"],d[\"dmg%\"],...a]=n(e),D=l(a,9,t)}else d[\"hpDamageLow%\"]=e[\"hp% damage low\"],d[\"hpDamageHigh%\"]=e[\"hp% damage high\"],d[\"hpDamageChance%\"]=e[\"hp% damage chance%\"],d[\"atk%\"]=e[\"bb atk%\"],d.flatAtk=e[\"bb flat atk\"],d[\"crit%\"]=e[\"bb crit%\"],d[\"bc%\"]=e[\"bb bc%\"],d[\"hc%\"]=e[\"bb hc%\"],d[\"dmg%\"]=e[\"bb dmg%\"];const E=Object.entries(d).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=z(t),e),{}),U=[];return(0!==p||0!==u||Object.keys(E).length>0)&&U.push(Object.assign({id:\"proc:27\",originalId:s,sources:o,effectDelay:r,value:Object.assign(Object.assign({},E),{hits:p,distribution:u})},c)),F(U,D,{originalId:s,sources:o,targetData:c,effectDelay:r}),U}),e.set(\"28\",(e,a,t)=>{const s=\"28\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t),{hits:p,distribution:u}=f(a);let d,D=0;if(e.params){const[a,...s]=n(e);D=z(a),d=l(s,1,t)}else D=z(e[\"fixed damage\"]);const E=[];if(0!==p||0!==u||0!==D){const e=Object.assign({id:\"proc:28\",originalId:s,sources:o,effectDelay:r,value:{hits:p,distribution:u}},c);0!==D&&(e.value.value=D),E.push(e)}return F(E,d,{originalId:s,sources:o,targetData:c,effectDelay:r}),E}),e.set(\"29\",(e,a,s)=>{const c=\"29\",{targetData:o,sources:r,effectDelay:p}=i(e,a,s),{hits:u,distribution:d}=f(a),D={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let E,U=[];if(e.params){let a,i,c,o;[a,i,c,D[\"atk%\"],D.flatAtk,D[\"crit%\"],D[\"bc%\"],D[\"hc%\"],D[\"dmg%\"],...o]=n(e),[a,i,c].forEach(e=>{\"0\"!==e&&U.push(t[e]||L.Unknown),E=l(o,9,s)})}else Array.isArray(e[\"bb elements\"])&&(U=e[\"bb elements\"].slice()),D[\"atk%\"]=e[\"bb atk%\"],D.flatAtk=e[\"bb flat atk\"],D[\"crit%\"]=e[\"bb crit%\"],D[\"bc%\"]=e[\"bb bc%\"],D[\"hc%\"]=e[\"bb hc%\"],D[\"dmg%\"]=e[\"bb dmg%\"];const B=Object.entries(D).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=z(t),e),{}),T=[];if(0!==u||0!==d||U.length>0||Object.keys(B).length>0){const e=Object.assign({id:\"proc:29\",originalId:c,sources:r,effectDelay:p,value:Object.assign(Object.assign({},B),{hits:u,distribution:d})},o);U.length>0&&(e.value.elements=U),T.push(e)}return F(T,E,{originalId:c,sources:r,targetData:o,effectDelay:p}),T}),e.set(\"30\",(e,a,s)=>{const c=\"30\",{targetData:o,sources:p,effectDelay:u}=i(e,a,s);let f,D=[],E=0;if(e.params){const a=n(e);D=a.slice(0,6).filter(e=>\"0\"!==e).map(e=>t[e]||L.Unknown),E=z(a[6]),f=l(a.slice(7),7,s)}else\"elements added\"in e&&(D=Array.isArray(e[\"elements added\"])?e[\"elements added\"]:[L.Unknown]),E=z(e[\"elements added turns\"]);const U=[],B=Object.values(t).filter(e=>e!==L.All);return D.length>0?D.forEach(e=>{const a=B.includes(e)?e:L.Unknown;U.push(Object.assign({id:\"proc:30:\"+a,originalId:c,sources:p,effectDelay:u,duration:E},o))}):d(a,E,s)&&U.push(r({originalId:c,sources:p,buffs:B.concat([L.Unknown]).map(e=>\"proc:30:\"+e),duration:E,targetData:o})),F(U,f,{originalId:c,sources:p,targetData:o,effectDelay:u}),U}),e.set(\"31\",(e,a,t)=>{const s=\"31\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t);let p,u=0,d=0;if(e.params){const[a,s,...i]=n(e);u=z(a)/100,d=z(s),p=l(i,2,t)}else\"increase bb gauge\"in e&&(u=z(e[\"increase bb gauge\"]));const f=[];return 0!==u&&f.push(Object.assign({id:\"proc:31:flat\",originalId:s,sources:o,effectDelay:r,value:u},c)),0!==d&&f.push(Object.assign({id:\"proc:31:percent\",originalId:s,sources:o,effectDelay:r,value:d},c)),F(f,p,{originalId:s,sources:o,targetData:c,effectDelay:r}),f}),e.set(\"32\",(e,a,s)=>{const c=\"32\",{targetData:o,sources:r,effectDelay:p}=i(e,a,s);let u,d;if(e.params){const[a,...i]=n(e);a&&\"0\"!==a&&(u=t[a]||L.Unknown),d=l(i,1,s)}else{const a=e[\"set attack element attribute\"];if(a){const e=Object.values(t).find(e=>a===e);u=e&&e!==L.All?e:L.Unknown}}const f=[];return u&&f.push(Object.assign({id:\"proc:32:\"+u,originalId:c,sources:r,effectDelay:p,value:!0},o)),F(f,d,{originalId:c,sources:r,targetData:o,effectDelay:p}),f}),e.set(\"33\",(e,a,t)=>{const s=\"33\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t);let p,u=0;if(e.params){const[a,...s]=n(e);u=z(a),p=l(s,1,t)}else u=z(e[\"clear buff chance%\"]);const d=[];return 0!==u&&d.push(Object.assign({id:\"proc:33\",originalId:s,sources:o,effectDelay:r,value:u},c)),F(d,p,{originalId:s,sources:o,targetData:c,effectDelay:r}),d}),e.set(\"34\",(e,a,t)=>{const s=\"34\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t);let p,u=0,d=0,f=0,D=0,E=0;if(e.params){const[a,s,i,c,o,...r]=n(e);u=z(a)/100,d=z(s)/100,f=z(i),D=z(c),E=z(o),p=l(r,5,t)}else u=z(e[\"base bb gauge reduction low\"]),d=z(e[\"base bb gauge reduction high\"]),f=z(e[\"bb gauge% reduction low\"]),D=z(e[\"bb gauge% reduction high\"]),E=z(e[\"bb gauge reduction chance%\"]);const U=[];return 0===u&&0===d||U.push(Object.assign({id:\"proc:34:flat\",originalId:s,sources:o,effectDelay:r,value:{drainLow:u,drainHigh:d,chance:E}},c)),0===f&&0===D||U.push(Object.assign({id:\"proc:34:percent\",originalId:s,sources:o,effectDelay:r,value:{drainLow:f,drainHigh:D,chance:E}},c)),F(U,p,{originalId:s,sources:o,targetData:c,effectDelay:r}),U}),e.set(\"36\",(e,a,t)=>E({effect:e,context:a,injectionContext:t,effectValueKey:\"invalidate LS chance%\",effectTurnDurationKey:\"invalidate LS turns (60)\",buffId:\"proc:36\",originalId:\"36\"})),e.set(\"37\",(e,a,t)=>{const s=\"37\",{targetData:n,sources:o,effectDelay:r}=i(e,a,t),[p,u=\"\",d,f,...D]=c(e),E=z(d),U=z(f),B=l(D,4,t),T=[];return(p||u)&&T.push(Object.assign({id:\"proc:37\",originalId:s,sources:o,effectDelay:r,value:{summonGroup:p,summonId:u,positionX:E,positionY:U}},n)),F(T,B,{originalId:s,sources:o,targetData:n,effectDelay:r}),T}),e.set(\"38\",(e,a,t)=>{const c=\"38\",{targetData:o,sources:r,effectDelay:p}=i(e,a,t),d=[];let f;if(e.params){const a=n(e),i=a.slice(0,9),c=a.slice(9);i.filter(e=>\"0\"!==e).forEach(e=>{d.push(s[e]||u.Unknown)}),f=l(c,9,t)}else if(Array.isArray(e[\"ailments cured\"])){const a=e[\"ailments cured\"];if(Object.values(s).forEach(e=>{const t=e!==u.Weak?e:\"weaken\";a.includes(t)&&d.push(e)}),a.length>d.length){const e=a.length-d.length;for(let a=0;a<e;++a)d.push(u.Unknown)}}const D=d.map(e=>Object.assign({id:\"proc:38:\"+e,originalId:c,sources:r,effectDelay:p,value:!0},o));return F(D,f,{originalId:c,sources:r,targetData:o,effectDelay:p}),D}),e.set(\"39\",(e,a,t)=>{const s=\"39\",c={1:v.Fire,2:v.Water,3:v.Earth,4:v.Thunder,5:v.Light,6:v.Dark},{targetData:o,sources:p,effectDelay:u}=i(e,a,t),f=[];let D,E=0,U=0;if(e.params){const a=n(e),s=a.slice(0,6);E=z(a[6]),U=z(a[7]),s.forEach(e=>{\"0\"!==e&&f.push(c[e]||L.Unknown)}),D=l(a.slice(8),8,t)}else Object.values(c).forEach(a=>{e[`mitigate ${a} attacks`]&&f.push(a)}),E=z(e[\"dmg% mitigation for elemental attacks\"]),U=z(e[\"dmg% mitigation for elemental attacks buff turns\"]);const B=[];return f.length>0?f.forEach(e=>{B.push(Object.assign({id:\"proc:39:\"+e,originalId:s,sources:p,effectDelay:u,duration:U,value:E},o))}):0!==E?B.push(Object.assign({id:\"proc:39:unknown\",originalId:s,sources:p,effectDelay:u,duration:U,value:E},o)):d(a,U,t)&&B.push(r({originalId:s,sources:p,buffs:Object.values(c).concat([L.Unknown]).map(e=>\"proc:39:\"+e),duration:U,targetData:o})),F(B,D,{originalId:s,sources:p,targetData:o,effectDelay:u}),B}),e.set(\"40\",(e,a,t)=>{const c=\"40\",{targetData:o,sources:p,effectDelay:f}=i(e,a,t),D=[];let E,U=0;if(e.params){const a=n(e);for(let e=0;e<8;e+=2){const t=a[e],i=z(a[e+1]);if(\"0\"!==t||0!==i){const e=s[t]||u.Unknown;D.push({ailment:e,chance:i})}}U=z(a[8]),E=l(a.slice(9),9,t)}else Object.values(s).forEach(a=>{let t;t=a===u.Weak?\"weaken% buff\":a===u.AttackReduction||a===u.DefenseReduction||a===u.RecoveryReduction?a+\" buff\":a+\"% buff\",t in e&&D.push({ailment:a,chance:z(e[t])})}),U=z(e[\"buff turns\"]);const B=D.map(({ailment:e,chance:a})=>Object.assign({id:\"proc:40:\"+e,originalId:c,sources:p,effectDelay:f,duration:U,value:a},o));return 0===B.length&&d(a,U,t)&&B.push(r({originalId:c,sources:p,duration:U,buffs:Object.values(s).concat([u.Unknown]).map(e=>\"proc:40:\"+e),targetData:o})),F(B,E,{originalId:c,sources:p,targetData:o,effectDelay:f}),B}),e.set(\"42\",(e,a,t)=>{const s=\"42\",{targetData:n,sources:o,effectDelay:r}=i(e,a,t),{hits:p,distribution:u}=f(a),[d,D,E,...U]=c(e),B={\"atkLow%\":d,\"atkHigh%\":D,flatAtk:E},T=l(U,3,t),R=Object.entries(B).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=z(t),e),{}),g=[];return(0!==p||0!==u||Object.keys(R).length>0)&&g.push(Object.assign({id:\"proc:42\",originalId:s,sources:o,effectDelay:r,value:Object.assign(Object.assign({},R),{hits:p,distribution:u})},n)),F(g,T,{originalId:s,sources:o,targetData:n,effectDelay:r}),g}),e.set(\"43\",(e,a,t)=>{const s=\"43\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t);let p,u=0;if(e.params){const[a,...s]=n(e);u=z(a),p=l(s,1,t)}else u=z(e[\"increase od gauge%\"]);const d=[];return 0!==u&&d.push(Object.assign({id:\"proc:43\",originalId:s,sources:o,effectDelay:r,value:u},c)),F(d,p,{originalId:s,sources:o,targetData:c,effectDelay:r}),d}),e.set(\"44\",(e,a,t)=>{const s=\"44\",{targetData:c,sources:o,effectDelay:p}=i(e,a,t),u={\"atk%\":\"0\",flatAtk:\"0\",\"dmg%\":\"0\"};let f,D=!1,E=0,U=0;if(e.params){let a,s,i,c;[u[\"atk%\"],u.flatAtk,u[\"dmg%\"],s,i,c,...a]=n(e),D=\"1\"!==s,E=z(i),U=z(c),f=l(a,6,t)}else u[\"atk%\"]=e[\"dot atk%\"],u.flatAtk=e[\"dot flat atk\"],u[\"dmg%\"]=e[\"dot dmg%\"],D=!!e[\"dot element affected\"],E=z(e[\"dot unit index\"]),U=z(e[\"dot turns (71)\"]);const B=Object.entries(u).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=z(t),e),{}),T=[];return Object.keys(B).length>0?T.push(Object.assign({id:\"proc:44\",originalId:s,sources:o,effectDelay:p,duration:U,value:Object.assign(Object.assign({},B),{affectsElement:D,unitIndex:E})},c)):d(a,U,t)&&T.push(r({originalId:s,sources:o,buffs:[\"proc:44\"],duration:U,targetData:c})),F(T,f,{originalId:s,sources:o,targetData:c,effectDelay:p}),T}),e.set(\"45\",(e,a,t)=>{const s=\"45\",{targetData:c,sources:o,effectDelay:p}=i(e,a,t);let u,f=0,D=0,E=0,U=0;if(e.params){const[a,s,i,c,...o]=n(e);f=z(a),D=z(s),E=z(i),U=z(c),u=l(o,4,t)}else f=z(e[\"bb atk% buff\"]),D=z(e[\"sbb atk% buff\"]),E=z(e[\"ubb atk% buff\"]),U=z(e[\"buff turns (72)\"]);const B=[];return 0!==f&&B.push(Object.assign({id:\"proc:45:bb\",originalId:s,sources:o,effectDelay:p,duration:U,value:f},c)),0!==D&&B.push(Object.assign({id:\"proc:45:sbb\",originalId:s,sources:o,effectDelay:p,duration:U,value:D},c)),0!==E&&B.push(Object.assign({id:\"proc:45:ubb\",originalId:s,sources:o,effectDelay:p,duration:U,value:E},c)),0===B.length&&d(a,U,t)&&B.push(r({originalId:s,sources:o,buffs:[\"bb\",\"sbb\",\"ubb\"].map(e=>\"proc:45:\"+e),duration:U,targetData:c})),F(B,u,{originalId:s,sources:o,targetData:c,effectDelay:p}),B}),e.set(\"46\",(e,a,t)=>{const s=\"46\",{targetData:n,sources:o,effectDelay:r}=i(e,a,t),{hits:p,distribution:u}=f(a),[d,D,...E]=c(e),U=z(d),B=z(D),T=l(E,2,t),R=[];if(0!==U||0!==B||0!==p||0!==u){const e=Object.assign({id:\"proc:46\",originalId:s,sources:o,effectDelay:r,value:{hits:p,distribution:u}},n);0===U&&0===B||(e.value={\"hpDamageLow%\":U,\"hpDamageHigh%\":B,hits:p,distribution:u}),R.push(e)}return F(R,T,{originalId:s,sources:o,targetData:n,effectDelay:r}),R}),e.set(\"47\",(e,a,t)=>{const s=\"47\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t),{hits:p,distribution:u}=f(a),d={\"baseAtk%\":\"0\",\"addedAtk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let D,E=\"unknown\";if(e.params){let a,s,i;[d[\"baseAtk%\"],s,i,d.flatAtk,d[\"crit%\"],d[\"bc%\"],d[\"hc%\"],d[\"dmg%\"],...a]=n(e),d[\"addedAtk%\"]=z(s)-z(d[\"baseAtk%\"]),E=\"1\"===i?\"lost\":\"remaining\",D=l(a,8,t)}else d[\"baseAtk%\"]=e[\"bb base atk%\"],d[\"addedAtk%\"]=e[\"bb added atk% based on hp\"],E=e[\"bb added atk% proportional to hp\"]||\"unknown\",d.flatAtk=e[\"bb flat atk\"],d[\"crit%\"]=e[\"bb crit%\"],d[\"bc%\"]=e[\"bb bc%\"],d[\"hc%\"]=e[\"bb hc%\"],d[\"dmg%\"]=e[\"bb dmg%\"];const U=Object.entries(d).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=z(t),e),{}),B=[];return(0!==p||0!==u||Object.keys(U).length>0)&&B.push(Object.assign({id:\"proc:47\",originalId:s,sources:o,effectDelay:r,value:Object.assign(Object.assign({},U),{proportionalMode:E,hits:p,distribution:u})},c)),F(B,D,{originalId:s,sources:o,targetData:c,effectDelay:r}),B}),e.set(\"48\",(e,a,t)=>{const s=\"48\",{targetData:n,sources:o,effectDelay:r}=i(e,a,t),{hits:p,distribution:u}=f(a),[d,D,E,U,B,T,R,...g]=c(e),m=z(d),A=z(D),v=z(E),_=z(U),N=z(B),I=z(T),P=\"1\"===R,k=l(g,7,t),O=[],y=(e,a)=>Object.assign({id:\"proc:48:\"+e,originalId:s,sources:o,effectDelay:r,value:Object.assign(Object.assign({},a),{isLethal:P,chance:I,hits:p,distribution:u})},n);return 0===m&&0===A||O.push(y(\"base\",{\"hpDamageLow%\":m,\"hpDamageHigh%\":A})),0===v&&0===_||O.push(y(\"current\",{\"hpDamageLow%\":v,\"hpDamageHigh%\":_})),0!==N&&O.push(y(\"fixed\",{value:N})),0!==O.length||0===p&&0===u||O.push(y(\"unknown\",{})),F(O,k,{originalId:s,sources:o,targetData:n,effectDelay:r}),O}),e.set(\"49\",(e,a,t)=>{const s=\"49\",{targetData:n,sources:o,effectDelay:r}=i(e,a,t),[p,...u]=c(e),d=z(p),f=l(u,1,t),D=[];return 0!==d&&D.push(Object.assign({id:\"proc:49\",originalId:s,sources:o,effectDelay:r,value:d},n)),F(D,f,{originalId:s,sources:o,targetData:n,effectDelay:r}),D}),e.set(\"50\",(e,a,t)=>{const s=\"50\",{targetData:n,sources:o,effectDelay:p}=i(e,a,t),[u,f,D,E,...U]=c(e),B=z(u),T=z(f),R=z(D),g=z(E),m=l(U,4,t),A=[];return 0!==B||0!==T?A.push(Object.assign({id:\"proc:50\",originalId:s,sources:o,effectDelay:p,duration:g,value:{\"reflectedDamageLow%\":B,\"reflectedDamageHigh%\":T,chance:R}},n)):d(a,g,t)&&A.push(r({originalId:s,sources:o,buffs:[\"proc:50\"],duration:g,targetData:n})),F(A,m,{originalId:s,sources:o,targetData:n,effectDelay:p}),A}),e.set(\"51\",(e,a,t)=>{const s=\"51\",{targetData:c,sources:o,effectDelay:r}=i(e,a,t),p=[];let f,D=0,E=0;if(e.params){const a=n(e);[{type:u.AttackReduction,reductionValue:z(a[0]),chance:z(a[3])},{type:u.DefenseReduction,reductionValue:z(a[1]),chance:z(a[4])},{type:u.RecoveryReduction,reductionValue:z(a[2]),chance:z(a[5])}].forEach(({type:e,reductionValue:a,chance:t})=>{0===a&&0===t||p.push({type:e,reductionValue:a,chance:t})}),D=z(a[6]),E=z(a[7]),f=l(a.slice(8),8,t)}else[{type:u.AttackReduction,reductionValueKey:\"inflict atk% debuff (2)\",chanceKey:\"inflict atk% debuff chance% (74)\"},{type:u.DefenseReduction,reductionValueKey:\"inflict def% debuff (4)\",chanceKey:\"inflict def% debuff chance% (75)\"},{type:u.RecoveryReduction,reductionValueKey:\"inflict rec% debuff (6)\",chanceKey:\"inflict rec% debuff chance% (76)\"}].forEach(({type:a,reductionValueKey:t,chanceKey:s})=>{const i=z(e[t]),n=z(e[s]);0===i&&0===n||p.push({type:a,reductionValue:i,chance:n})}),D=z(e[\"stat% debuff turns\"]),E=z(e[\"buff turns\"]);const U=p.map(({type:e,reductionValue:a,chance:t})=>Object.assign({id:\"proc:51:\"+e,originalId:s,sources:o,effectDelay:r,duration:E,value:{reductionValue:a,chance:t,debuffTurnDuration:D}},c));return 0===U.length&&(d(a,E,t)||d(a,D,t))&&U.push(Object.assign({id:G.TURN_DURATION_MODIFICATION,originalId:s,sources:o,value:{buffs:[u.AttackReduction,u.DefenseReduction,u.RecoveryReduction].map(e=>\"proc:51:\"+e),duration:E,debuffTurnDuration:D}},c)),F(U,f,{originalId:s,sources:o,targetData:c,effectDelay:r}),U}),e.set(\"52\",(e,a,t)=>E({effect:e,context:a,injectionContext:t,effectValueKey:\"bb gauge fill rate% buff\",effectTurnDurationKey:\"buff turns (77)\",buffId:\"proc:52\",originalId:\"52\"})),e.set(\"53\",(e,a,t)=>{const s=\"53\",{targetData:c,sources:o,effectDelay:p}=i(e,a,t),f=[u.Poison,u.Weak,u.Sick,u.Injury,u.Curse,u.Paralysis],D={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\"};let E,U=0;if(e.params){let a,s;[D.poison,D.weak,D.sick,D.injury,D.curse,D.paralysis,a,...s]=n(e),U=z(a),E=l(s,7,t)}else{const a=Object.keys(e).filter(e=>e.startsWith(\"counter inflict\"));f.forEach(t=>{const s=a.find(e=>e.includes(t));s&&(D[t]=e[s])}),U=z(e[\"counter inflict ailment turns\"])}const B=[];return f.forEach(e=>{const a=z(D[e]);0!==a&&B.push(Object.assign({id:\"proc:53:\"+e,originalId:s,sources:o,effectDelay:p,value:a,duration:U},c))}),0===B.length&&d(a,U,t)&&B.push(r({originalId:s,sources:o,buffs:f.map(e=>\"proc:53:\"+e),duration:U,targetData:c})),F(B,E,{originalId:s,sources:o,targetData:c,effectDelay:p}),B}),e.set(\"54\",(e,a,t)=>E({effect:e,context:a,injectionContext:t,effectValueKey:\"crit multiplier%\",effectTurnDurationKey:\"buff turns (84)\",parseParamValue:e=>100*z(e),buffId:\"proc:54\",originalId:\"54\"}))}(Z)),Z}function te(e){return J&&!e||(J=new Map,function(e){const a=(e,{originalId:a,sources:t})=>({id:G.UNKNOWN_CONDITIONAL_BUFF_PARAMS,originalId:a,sources:t,value:e}),t=(e,t,{originalId:s,sources:i})=>{0===e.length&&e.push(function({originalId:e,sources:a}){return{id:G.NO_PARAMS_SPECIFIED,originalId:e,sources:a}}({originalId:s,sources:i})),t&&e.push(a(t,{originalId:s,sources:i}))};e.set(\"12\",(e,a,s)=>{const i=\"12\",n=(s&&s.createSourcesFromContext||V)(a),[c,...o]=e.params.split(\"&\"),r=z(c),p=function(e,a,t){let s;return e&&e.length>0&&(s=(t&&t.createUnknownParamsValue||Q)(e,a)),s}(o,1,s),F=[{id:\"buff:12:ko resistance\",originalId:i,sources:n,duration:e.turnDuration,value:r}];return t(F,p,{originalId:i,sources:n}),F})}(J)),J}function se(e,a){if(!e||\"object\"!=typeof e)throw new TypeError(\"effect parameter should be an object\");if(!a||\"object\"!=typeof a)throw new TypeError(\"context parameter should be an object\");const t=te(a.reloadMapping).get(e.id);return\"function\"==typeof t?t(e,a):function(e,a){const t=e.id||n.Unknown;return[{id:G.UNKNOWN_CONDITIONAL_EFFECT_ID,originalId:t,sources:V(a)}]}(e,a)}function ie(e){return ee&&!e||(ee=new Map,function(e){const a={1:v.Fire,2:v.Water,3:v.Earth,4:v.Thunder,5:v.Light,6:v.Dark,X:L.OmniParadigm},t={1:P.Lord,2:P.Anima,3:P.Breaker,4:P.Guardian,5:P.Oracle,6:P.Rex},s={1:u.Poison,2:u.Weak,3:u.Sick,4:u.Injury,5:u.Curse,6:u.Paralysis,7:u.AttackReduction,8:u.DefenseReduction,9:u.RecoveryReduction},i=[\"atk\",\"def\",\"rec\",\"crit\",\"hp\"],n=[\"poison\",\"weak\",\"sick\",\"injury\",\"curse\",\"paralysis\"],c=[\"bc\",\"hc\",\"item\",\"zel\",\"karma\"],o=(e,a,t)=>({conditionInfo:(t&&t.processExtraSkillConditions||Y)(e),targetData:(t&&t.getPassiveTargetData||$)(e,a),sources:(t&&t.createSourcesFromContext||V)(a)}),r=(e,a,t)=>(t&&t.convertConditionalEffectToBuffs||se)(e,a),p=e=>e.params.split(\",\"),F=(e,{originalId:a,sources:t,targetData:s,conditionInfo:i})=>Object.assign({id:G.UNKNOWN_PASSIVE_BUFF_PARAMS,originalId:a,sources:t,value:e,conditions:Object.assign({},i)},s),l=({originalId:e,sources:a})=>({id:G.NO_PARAMS_SPECIFIED,originalId:e,sources:a}),d=(e,a,{originalId:t,sources:s,targetData:i,conditionInfo:n})=>{0===e.length&&e.push(l({originalId:t,sources:s})),a&&e.push(F(a,{originalId:t,sources:s,targetData:i,conditionInfo:n}))},f=(e,a,t)=>{let s;return e&&e.length>0&&(s=(t&&t.createUnknownParamsValue||Q)(e,a)),s};let D;!function(e){e.Hp=\"hp\",e.Bb=\"bb gauge\"}(D||(D={}));const E=(e,a,t)=>({threshold:z(e),requireAbove:\"1\"===a,type:t}),U=(e,a,t=\"buff requirement\")=>{let s=0,i=!1;return`${a} above % ${t}`in e?(s=z(e[`${a} above % ${t}`]),i=!0):(s=z(e[`${a} below % ${t}`]),i=!1),{threshold:s,requireAbove:i,type:a}},B=({threshold:e,requireAbove:a,type:t})=>{let s;return t===D.Hp?s=a?{hpGreaterThanOrEqualTo:e}:{hpLessThanOrEqualTo:e}:t===D.Bb&&(s=a?{bbGaugeGreaterThanOrEqualTo:e}:{bbGaugeLessThanOrEqualTo:e}),s},T=({effect:e,context:a,injectionContext:t,originalId:s,effectKey:i,buffId:n,parseParamValue:c=(e=>z(e))})=>{const{conditionInfo:r,targetData:F,sources:l}=o(e,a,t),u=e,D=[];let E,U=0;if(u.params){const[e,...a]=p(u);U=c(e),E=f(a,1,t)}else U=z(u[i]);return 0!==U&&D.push(Object.assign({id:n,originalId:s,sources:l,value:U,conditions:Object.assign({},r)},F)),d(D,E,{originalId:s,sources:l,targetData:F,conditionInfo:r}),D},R=({effect:e,context:a,injectionContext:t,originalId:s,effectKeyLow:i,effectKeyHigh:n,effectKeyChance:c,buffKeyLow:r,buffKeyHigh:F,defaultEffectChance:l=0,parseParamValue:u=(e=>z(e)),generateBaseConditions:D=(()=>({})),buffId:E})=>{const{conditionInfo:U,targetData:B,sources:T}=o(e,a,t),R=e;let g,m,A,v;if(R.params){const[e,a,s,...i]=p(R);g=u(e),m=u(a),A=z(s),v=f(i,3,t)}else g=z(R[i]),m=z(R[n]),A=z(R[c],l);const _=[];return 0===g&&0===m&&0===A||_.push(Object.assign({id:E,originalId:s,sources:T,value:{[r]:g,[F]:m,chance:A},conditions:Object.assign(Object.assign({},U),D())},B)),d(_,v,{originalId:s,sources:T,targetData:B,conditionInfo:U}),_};e.set(\"1\",(e,a,t)=>{const s=\"1\",{conditionInfo:n,targetData:c,sources:r}=o(e,a,t),F=e,l=[],u={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let D;if(F.params){let e;[u.atk,u.def,u.rec,u.crit,u.hp,...e]=p(F),D=f(e,5,t)}else u.hp=F[\"hp% buff\"],u.atk=F[\"atk% buff\"],u.def=F[\"def% buff\"],u.rec=F[\"rec% buff\"],u.crit=F[\"crit% buff\"];return i.forEach(e=>{const a=z(u[e]);0!==a&&l.push(Object.assign({id:\"passive:1:\"+e,originalId:s,sources:r,value:a,conditions:Object.assign({},n)},c))}),d(l,D,{originalId:s,sources:r,targetData:c,conditionInfo:n}),l}),e.set(\"2\",(e,t,s)=>{const n=\"2\",{conditionInfo:c,targetData:r,sources:F}=o(e,t,s),l=e,u=[],D={elements:[],atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let E;if(l.params){let e,t,i;[t,i,D.atk,D.def,D.rec,D.crit,D.hp,...e]=p(l),[t,i].forEach(e=>{e&&\"0\"!==e&&D.elements.push(a[e]||L.Unknown)}),E=f(e,7,s)}else Array.isArray(l[\"elements buffed\"])&&(D.elements=l[\"elements buffed\"]),D.hp=l[\"hp% buff\"],D.atk=l[\"atk% buff\"],D.def=l[\"def% buff\"],D.rec=l[\"rec% buff\"],D.crit=l[\"crit% buff\"];const U=e=>Object.assign({id:\"passive:2:\"+e,originalId:n,sources:F,value:z(D[e])},r);return D.elements.length>0?D.elements.forEach(e=>{i.forEach(a=>{0!==z(D[a])&&u.push(Object.assign(Object.assign({},U(a)),{conditions:Object.assign(Object.assign({},c),{targetElements:[e]})}))})}):i.forEach(e=>{0!==z(D[e])&&u.push(Object.assign(Object.assign({},U(e)),{conditions:Object.assign(Object.assign({},c),{targetElements:[L.Unknown]})}))}),d(u,E,{originalId:n,sources:F,targetData:r,conditionInfo:c}),u}),e.set(\"3\",(e,a,s)=>{const n=\"3\",{conditionInfo:c,targetData:r,sources:F}=o(e,a,s),l=e,u=[],D={unitType:\"\",atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let E;if(l.params){let e,a;[a,D.atk,D.def,D.rec,D.crit,D.hp,...e]=p(l),a&&\"0\"!==a&&(D.unitType=t[a]||\"unknown\"),E=f(e,6,s)}else D.unitType=l[\"unit type buffed\"],D.hp=l[\"hp% buff\"],D.atk=l[\"atk% buff\"],D.def=l[\"def% buff\"],D.rec=l[\"rec% buff\"],D.crit=l[\"crit% buff\"];const U=D.unitType||\"unknown\";return i.forEach(e=>{const a=z(D[e]);0!==a&&u.push(Object.assign({id:\"passive:3:\"+e,originalId:n,sources:F,value:+a,conditions:Object.assign(Object.assign({},c),{targetUnitType:U})},r))}),d(u,E,{originalId:n,sources:F,targetData:r,conditionInfo:c}),u}),e.set(\"4\",(e,a,t)=>{const s=\"4\",{conditionInfo:i,targetData:c,sources:r}=o(e,a,t),F=e,l=[],u={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\"};let D;if(F.params){let e;[u.poison,u.weak,u.sick,u.injury,u.curse,u.paralysis,...e]=p(F),D=f(e,6,t)}else n.forEach(e=>{const a=\"weak\"!==e?e:\"weaken\";u[e]=F[a+\" resist%\"]});return n.forEach(e=>{const a=z(u[e]);0!==a&&l.push(Object.assign({id:\"passive:4:\"+e,originalId:s,sources:r,value:a,conditions:Object.assign({},i)},c))}),d(l,D,{originalId:s,sources:r,targetData:c,conditionInfo:i}),l}),e.set(\"5\",(e,t,s)=>{const i=\"5\",{conditionInfo:n,targetData:c,sources:r}=o(e,t,s),F=e,l=[];let u,D,E=\"0\";if(F.params){let e,t;[t,E,...e]=p(F),u=a[t]||L.Unknown,D=f(e,2,s)}else u=Object.values(a).find(a=>a+\" resist%\"in e)||L.Unknown,u!==L.Unknown&&(E=F[u+\" resist%\"]);const U=z(E);return 0!==U&&l.push(Object.assign({id:\"passive:5:\"+u,originalId:i,sources:r,value:U,conditions:Object.assign({},n)},c)),d(l,D,{originalId:i,sources:r,targetData:c,conditionInfo:n}),l}),e.set(\"8\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,effectKey:\"dmg% mitigation\",buffId:\"passive:8\",originalId:\"8\"})),e.set(\"9\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,effectKey:\"bc fill per turn\",buffId:\"passive:9\",originalId:\"9\"})),e.set(\"10\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,effectKey:\"hc effectiveness%\",buffId:\"passive:10\",originalId:\"10\"})),e.set(\"11\",(e,a,t)=>{const s=\"11\",{conditionInfo:n,targetData:c,sources:r}=o(e,a,t),F=e,l=[],u={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\"};let T,R;if(F.params){let e,a,s;[u.atk,u.def,u.rec,u.crit,s,a,...e]=p(F),T=E(s,a,D.Hp),R=f(e,6,t)}else u.atk=F[\"atk% buff\"],u.def=F[\"def% buff\"],u.rec=F[\"rec% buff\"],u.crit=F[\"crit% buff\"],T=U(F,D.Hp);const g=B(T);return i.forEach(e=>{const a=z(u[e]);if(\"hp\"!==e&&0!==a){const t=Object.assign({id:\"passive:11:\"+e,originalId:s,sources:r,value:a,conditions:Object.assign(Object.assign({},n),g)},c);l.push(t)}}),d(l,R,{originalId:s,sources:r,targetData:c,conditionInfo:n}),l}),e.set(\"12\",(e,a,t)=>{const s=\"12\",{conditionInfo:i,targetData:n,sources:r}=o(e,a,t),F=e,l=[],u={bc:\"0\",hc:\"0\",item:\"0\",zel:\"0\",karma:\"0\"};let T,R;if(F.params){let e,a,s;[u.bc,u.hc,u.item,u.zel,u.karma,s,a,...e]=p(F),T=E(s,a,D.Hp),R=f(e,7,t)}else c.forEach(e=>{u[e]=F[e+\" drop rate% buff\"]}),T=U(F,D.Hp);const g=B(T);return c.forEach(e=>{const a=z(u[e]);if(0!==a){const t=Object.assign({id:\"passive:12:\"+e,originalId:s,sources:r,value:a,conditions:Object.assign(Object.assign({},i),g)},n);l.push(t)}}),d(l,R,{originalId:s,sources:r,targetData:n,conditionInfo:i}),l}),e.set(\"13\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,originalId:\"13\",effectKeyLow:\"bc fill on enemy defeat low\",effectKeyHigh:\"bc fill on enemy defeat high\",effectKeyChance:\"bc fill on enemy defeat%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>z(e)/100,generateBaseConditions:()=>({onEnemyDefeat:!0}),buffId:\"passive:13\"})),e.set(\"14\",(e,a,t)=>{const s=\"14\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=e;let F,l,u;if(r.params){const[e,a,...s]=p(r);F=z(e),l=z(a),u=f(s,2,t)}else F=z(r[\"dmg reduction%\"]),l=z(r[\"dmg reduction chance%\"]);const D=[];return 0===F&&0===l||D.push(Object.assign({id:\"passive:14\",originalId:s,sources:c,value:{value:F,chance:l},conditions:Object.assign({},i)},n)),d(D,u,{originalId:s,sources:c,targetData:n,conditionInfo:i}),D}),e.set(\"15\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,originalId:\"15\",effectKeyLow:\"hp% recover on enemy defeat low\",effectKeyHigh:\"hp% recover on enemy defeat high\",effectKeyChance:\"hp% recover on enemy defeat chance%\",buffKeyLow:\"healLow\",buffKeyHigh:\"healHigh\",generateBaseConditions:()=>({onEnemyDefeat:!0}),defaultEffectChance:100,buffId:\"passive:15\"})),e.set(\"16\",(e,a,t)=>{const s=\"16\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=e;let F,l,u;if(r.params){const[e,a,...s]=p(r);F=z(e),l=z(a),u=f(s,2,t)}else F=z(r[\"hp% recover on battle win low\"]),l=z(r[\"hp% recover on battle win high\"]);const D=[];return 0===F&&0===l||D.push(Object.assign({id:\"passive:16\",originalId:s,sources:c,value:{healLow:F,healHigh:l},conditions:Object.assign(Object.assign({},i),{onBattleWin:!0})},n)),d(D,u,{originalId:s,sources:c,targetData:n,conditionInfo:i}),D}),e.set(\"17\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,originalId:\"17\",effectKeyLow:\"hp drain% low\",effectKeyHigh:\"hp drain% high\",effectKeyChance:\"hp drain chance%\",buffKeyLow:\"drainHealLow\",buffKeyHigh:\"drainHealHigh\",buffId:\"passive:17\"})),e.set(\"19\",(e,a,t)=>{const s=\"19\",{conditionInfo:i,targetData:n,sources:r}=o(e,a,t),F=e,l=[],u={bc:\"0\",hc:\"0\",item:\"0\",zel:\"0\",karma:\"0\"};let D;if(F.params){let e;[u.bc,u.hc,u.item,u.zel,u.karma,...e]=p(F),D=f(e,5,t)}else c.forEach(e=>{u[e]=F[e+\" drop rate% buff\"]});return c.forEach(e=>{const a=z(u[e]);0!==a&&l.push(Object.assign({id:\"passive:19:\"+e,originalId:s,sources:r,value:a,conditions:Object.assign({},i)},n))}),d(l,D,{originalId:s,sources:r,targetData:n,conditionInfo:i}),l}),e.set(\"20\",(e,a,t)=>{const i=\"20\",{conditionInfo:n,targetData:c,sources:r}=o(e,a,t),F=[],l=e;let D;if(l.params){let e=p(l);e.length%2!=0&&\"0\"!==e[e.length-1]&&(D=f(e.slice(-1),e.length-1,t),e=e.slice(0,e.length-1));const a=e.length;for(let t=0;t<a;t+=2){const a=e[t],i=z(e[t+1]);if(\"0\"!==a||0!==i){const e=s[a]||u.Unknown;F.push({ailment:e,chance:i})}}}else Object.values(s).forEach(a=>{let t;t=a===u.Weak?\"weaken%\":a===u.AttackReduction||a===u.DefenseReduction||a===u.RecoveryReduction?a:a+\"%\",t in e&&F.push({ailment:a,chance:z(l[t])})});const E=[];return F.forEach(({ailment:e,chance:a})=>{0!==a&&E.push(Object.assign({id:\"passive:20:\"+e,originalId:i,sources:r,value:a,conditions:Object.assign({},n)},c))}),d(E,D,{originalId:i,sources:r,targetData:c,conditionInfo:n}),E}),e.set(\"21\",(e,a,t)=>{const s=\"21\",{conditionInfo:n,targetData:c,sources:r}=o(e,a,t),F=e,l=[],u={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\"};let D,E=0;if(F.params){let e,a;[u.atk,u.def,u.rec,u.crit,e,...a]=p(F),E=z(e),D=f(a,5,t)}else u.atk=F[\"first x turns atk% (1)\"],u.def=F[\"first x turns def% (3)\"],u.rec=F[\"first x turns rec% (5)\"],u.crit=F[\"first x turns crit% (7)\"],E=z(F[\"first x turns\"]);return i.forEach(e=>{const a=z(u[e]);if(\"hp\"!==e&&0!==a){const t=Object.assign({id:\"passive:21:\"+e,originalId:s,sources:r,value:a,duration:E,conditions:Object.assign({},n)},c);l.push(t)}}),d(l,D,{originalId:s,sources:r,targetData:c,conditionInfo:n}),l}),e.set(\"23\",(e,a,t)=>{const s=\"23\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=e;let F,l,u;if(r.params){const[e,a,...s]=p(r);F=z(e)/100,l=z(a)/100,u=f(s,2,t)}else F=z(r[\"battle end bc fill low\"]),l=z(r[\"battle end bc fill high\"]);const D=[];return 0===F&&0===l||D.push(Object.assign({id:\"passive:23\",originalId:s,sources:c,value:{fillLow:F,fillHigh:l},conditions:Object.assign(Object.assign({},i),{onBattleWin:!0})},n)),d(D,u,{originalId:s,sources:c,targetData:n,conditionInfo:i}),D}),e.set(\"24\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,originalId:\"24\",effectKeyLow:\"dmg% to hp when attacked low\",effectKeyHigh:\"dmg% to hp when attacked high\",effectKeyChance:\"dmg% to hp when attacked chance%\",buffKeyLow:\"healLow\",buffKeyHigh:\"healHigh\",generateBaseConditions:()=>({whenAttacked:!0}),buffId:\"passive:24\"})),e.set(\"25\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,originalId:\"25\",effectKeyLow:\"bc fill when attacked low\",effectKeyHigh:\"bc fill when attacked high\",effectKeyChance:\"bc fill when attacked%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>z(e)/100,generateBaseConditions:()=>({whenAttacked:!0}),buffId:\"passive:25\"})),e.set(\"26\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,originalId:\"26\",effectKeyLow:\"dmg% reflect low\",effectKeyHigh:\"dmg% reflect high\",effectKeyChance:\"dmg% reflect chance%\",buffKeyLow:\"damageReflectLow\",buffKeyHigh:\"damageReflectHigh\",generateBaseConditions:()=>({whenAttacked:!0}),buffId:\"passive:26\"})),e.set(\"27\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,effectKey:\"target% chance\",buffId:\"passive:27\",originalId:\"27\"})),e.set(\"28\",(e,a,t)=>{const s=\"28\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=e;let F,l,u=0;if(r.params){const[e,a,s,...i]=p(r);u=z(e),F=E(a,s,D.Hp),l=f(i,3,t)}else u=z(r[\"target% chance\"]),F=U(r,D.Hp,\"passive requirement\");const T=[];if(0!==u){const e=B(F),a=Object.assign({id:\"passive:28\",originalId:s,sources:c,value:u,conditions:Object.assign(Object.assign({},i),e)},n);T.push(a)}return d(T,l,{originalId:s,sources:c,targetData:n,conditionInfo:i}),T}),e.set(\"29\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,effectKey:\"ignore def%\",buffId:\"passive:29\",originalId:\"29\"})),e.set(\"30\",(e,a,t)=>{const s=\"30\",{conditionInfo:n,targetData:c,sources:r}=o(e,a,t),F=e,l=[],u={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\"};let T,R;if(F.params){let e,a,s;[u.atk,u.def,u.rec,u.crit,s,a,...e]=p(F),T=E(s,a,D.Bb),R=f(e,6,t)}else u.atk=F[\"atk% buff\"],u.def=F[\"def% buff\"],u.rec=F[\"rec% buff\"],u.crit=F[\"crit% buff\"],T=U(F,D.Bb);const g=B(T);return i.forEach(e=>{const a=z(u[e]);if(\"hp\"!==e&&0!==a){const t=Object.assign({id:\"passive:30:\"+e,originalId:s,sources:r,value:a,conditions:Object.assign(Object.assign({},n),g)},c);l.push(t)}}),d(l,R,{originalId:s,sources:r,targetData:c,conditionInfo:n}),l}),e.set(\"31\",(e,a,t)=>{const s=\"31\",{conditionInfo:i,targetData:n,sources:r}=o(e,a,t),F=e,l={bc:\"0\",hc:\"0\",item:\"0\",zel:\"0\",karma:\"0\"};let u,D=0;if(F.params){let e,a;[a,l.bc,l.hc,l.item,l.zel,l.karma,...e]=p(F),D=z(a),u=f(e,6,t)}else D=z(F[\"damage% for spark\"]),c.forEach(e=>{l[e]=F[e+\" drop% for spark\"]});const E=[];return 0!==D&&E.push(Object.assign({id:\"passive:31:damage\",originalId:s,sources:r,value:D,conditions:Object.assign({},i)},n)),c.forEach(e=>{const a=z(l[e]);0!==a&&E.push(Object.assign({id:\"passive:31:\"+e,originalId:s,sources:r,value:a,conditions:Object.assign({},i)},n))}),d(E,u,{originalId:s,sources:r,targetData:n,conditionInfo:i}),E}),e.set(\"32\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,effectKey:\"bb gauge fill rate%\",buffId:\"passive:32\",originalId:\"32\"})),e.set(\"33\",(e,a,t)=>{const s=\"33\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=e;let F,l,u,D;if(r.params){const[e,a,s,...i]=p(r);F=z(e),l=z(a),u=10*(1+z(s)/100),D=f(i,3,t)}else F=z(r[\"turn heal low\"]),l=z(r[\"turn heal high\"]),u=z(r[\"rec% added (turn heal)\"]);const E=[];return 0===F&&0===l||E.push(Object.assign({id:\"passive:33\",originalId:s,sources:c,value:{healLow:F,healHigh:l,\"addedRec%\":u},conditions:Object.assign({},i)},n)),d(E,D,{originalId:s,sources:c,targetData:n,conditionInfo:i}),E}),e.set(\"34\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,effectKey:\"crit multiplier%\",buffId:\"passive:34\",originalId:\"34\",parseParamValue:e=>100*z(e)})),e.set(\"35\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,originalId:\"35\",effectKeyLow:\"bc fill when attacking low\",effectKeyHigh:\"bc fill when attacking high\",effectKeyChance:\"bc fill when attacking%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>z(e)/100,generateBaseConditions:()=>({onNormalAttack:!0}),buffId:\"passive:35\"})),e.set(\"36\",(e,a,t)=>{const s=\"36\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=e;let F,l=0,u=0,D=0;if(r.params){const[e,a,s,...i]=p(r);l=z(e),u=z(a),D=z(s),F=f(i,3,t)}else l=z(r[\"additional actions\"]);const E=[];return 0===l&&0===u&&0===D||E.push(Object.assign({id:\"passive:36\",originalId:s,sources:c,value:{additionalActions:l,damageModifier:u,chance:D},conditions:Object.assign({},i)},n)),d(E,F,{originalId:s,sources:c,targetData:n,conditionInfo:i}),E}),e.set(\"37\",(e,a,t)=>{const s=\"37\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=e;let F,l=0,u=0;if(r.params){const e=p(r);l=z(e[0]),u=z(e[2]);const a=[\"0\",e[1],\"0\",...e.slice(3)];F=f(a,0,t)}else l=z(r[\"hit increase/hit\"]),u=z(r[\"extra hits dmg%\"]);const D=[];return 0===l&&0===u||D.push(Object.assign({id:\"passive:37\",originalId:s,sources:c,value:{hitIncreasePerHit:l,extraHitDamage:u},conditions:Object.assign({},i)},n)),d(D,F,{originalId:s,sources:c,targetData:n,conditionInfo:i}),D}),e.set(\"40\",(e,a,t)=>{const s=\"40\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=e,F=[\"atk\",\"def\",\"rec\"],l={1:\"atk\",2:\"def\",3:\"rec\",4:\"hp\"},u={attack:\"atk\",defense:\"def\",recovery:\"rec\",hp:\"hp\"},D={atk:\"0\",def:\"0\",rec:\"0\"};let E,U=\"unknown\";if(r.params){let e,a;[a,D.atk,D.def,D.rec,...e]=p(r),U=l[a]||\"unknown\",E=f(e,4,t)}else{const e=r[\"converted attribute\"];U=e in u?u[e]:\"unknown\",F.forEach(e=>{const a=e+\"% buff\";a in r&&(D[e]=r[a])})}const B=[];return F.forEach(e=>{const a=z(D[e]);0!==a&&B.push(Object.assign({id:\"passive:40:\"+e,originalId:s,sources:c,value:{convertedStat:U,value:a},conditions:Object.assign({},i)},n))}),d(B,E,{originalId:s,sources:c,targetData:n,conditionInfo:i}),B}),e.set(\"41\",(e,a,t)=>{const s=\"41\",{conditionInfo:n,targetData:c,sources:r}=o(e,a,t),F=e,l=[],u={minimumElements:\"0\",atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let D;if(F.params){let e;[u.minimumElements,u.atk,u.def,u.rec,u.crit,u.hp,...e]=p(F),D=f(e,6,t)}else u.minimumElements=F[\"unique elements required\"],u.hp=F[\"hp% buff\"],u.atk=F[\"atk% buff\"],u.def=F[\"def% buff\"],u.rec=F[\"rec% buff\"],u.crit=F[\"crit% buff\"];const E=z(u.minimumElements);return i.forEach(e=>{const a=z(u[e]);0!==a&&l.push(Object.assign({id:\"passive:41:\"+e,originalId:s,sources:r,value:+a,conditions:Object.assign(Object.assign({},n),{minumumUniqueElements:E})},c))}),d(l,D,{originalId:s,sources:r,targetData:c,conditionInfo:n}),l}),e.set(\"42\",(e,a,t)=>{const s=\"42\",{conditionInfo:n,targetData:c,sources:r}=o(e,a,t),F={0:_.Other,1:_.Male,2:_.Female},l=e,u=[],D={gender:\"\",atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let E;if(l.params){let e,a;[a,D.atk,D.def,D.rec,D.crit,D.hp,...e]=p(l),D.gender=F[a]||\"unknown\",E=f(e,6,t)}else D.gender=l[\"gender required\"],D.hp=l[\"hp% buff\"],D.atk=l[\"atk% buff\"],D.def=l[\"def% buff\"],D.rec=l[\"rec% buff\"],D.crit=l[\"crit% buff\"];const U=D.gender||\"unknown\";return i.forEach(e=>{const a=z(D[e]);0!==a&&u.push(Object.assign({id:\"passive:42:\"+e,originalId:s,sources:r,value:+a,conditions:Object.assign(Object.assign({},n),{targetGender:U})},c))}),d(u,E,{originalId:s,sources:r,targetData:c,conditionInfo:n}),u}),e.set(\"43\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,effectKey:\"take 1 dmg%\",buffId:\"passive:43\",originalId:\"43\"})),e.set(\"44\",(e,a,t)=>{const s=\"44\",{conditionInfo:n,targetData:c,sources:r}=o(e,a,t),F=e,l=[],u={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let D;if(F.params){let e;[u.atk,u.def,u.rec,u.crit,u.hp,...e]=p(F),D=f(e,5,t)}else u.hp=F[\"hp buff\"],u.atk=F[\"atk buff\"],u.def=F[\"def buff\"],u.rec=F[\"rec buff\"],u.crit=F[\"crit buff\"];return i.forEach(e=>{const a=z(u[e]);0!==a&&l.push(Object.assign({id:\"passive:44:\"+e,originalId:s,sources:r,value:a,conditions:Object.assign({},n)},c))}),d(l,D,{originalId:s,sources:r,targetData:c,conditionInfo:n}),l}),e.set(\"45\",(e,a,t)=>{const s=\"45\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=e;let F,l=0,u=0;if(r.params){const[e,a,...s]=p(r);l=z(e),u=z(a),F=f(s,2,t)}else l=z(r[\"base crit% resist\"]),u=z(r[\"buff crit% resist\"]);const D=[];return 0!==l&&D.push(Object.assign({id:\"passive:45:base\",originalId:s,sources:c,value:l,conditions:Object.assign({},i)},n)),0!==u&&D.push(Object.assign({id:\"passive:45:buff\",originalId:s,sources:c,value:u,conditions:Object.assign({},i)},n)),d(D,F,{originalId:s,sources:c,targetData:n,conditionInfo:i}),D}),e.set(\"46\",(e,a,t)=>{const s=\"46\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=[\"atk\",\"def\",\"rec\"],F=[];let l=\"unknown\";const u=e;let D;if(u.params){const e=p(u);r.forEach((a,t)=>{const s=z(e[2*t]),i=z(e[2*t+1]);0===s&&0===i||F.push({stat:a,baseValue:s,addedValue:i})}),l=\"1\"===e[6]?\"lost\":\"remaining\",D=f(e.slice(7),7,t)}else r.forEach(e=>{const a=z(u[e+\"% base buff\"]),t=z(u[e+\"% extra buff based on hp\"]);0===a&&0===t||F.push({stat:e,baseValue:a,addedValue:t})}),l=u[\"buff proportional to hp\"]||\"unknown\";const E=F.map(({stat:e,baseValue:a,addedValue:t})=>Object.assign({id:\"passive:46:\"+e,originalId:s,sources:c,value:{baseValue:a,addedValue:t,proportionalMode:l},conditions:Object.assign({},i)},n));return d(E,D,{originalId:s,sources:c,targetData:n,conditionInfo:i}),E}),e.set(\"47\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,originalId:\"47\",effectKeyLow:\"bc fill on spark low\",effectKeyHigh:\"bc fill on spark high\",effectKeyChance:\"bc fill on spark%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>z(e)/100,buffId:\"passive:47\"})),e.set(\"48\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,effectKey:\"reduced bb bc cost%\",buffId:\"passive:48\",originalId:\"48\"})),e.set(\"49\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,originalId:\"49\",effectKeyLow:\"reduced bb bc use% low\",effectKeyHigh:\"reduced bb bc use% high\",effectKeyChance:\"reduced bb bc use chance%\",buffKeyLow:\"reducedUseLow%\",buffKeyHigh:\"reducedUseHigh%\",buffId:\"passive:49\"})),e.set(\"50\",(e,t,s)=>{const i=\"50\",{conditionInfo:n,targetData:c,sources:r}=o(e,t,s),F=e;let l,u,D=0;if(F.params){const e=p(F);l=e.filter((e,a)=>\"0\"!==e&&a<6).map(e=>a[e]||L.Unknown),D=z(e[6]),u=f(e.slice(7),7,s)}else l=Object.values(a).filter(e=>!!F[e+\" units do extra elemental weakness dmg\"]),D=z(F[\"elemental weakness multiplier%\"]);let E=[];return 0!==D&&(E=l.map(e=>Object.assign({id:\"passive:50:\"+e,originalId:i,sources:r,value:D,conditions:Object.assign({},n)},c)),0===E.length&&E.push(Object.assign({id:\"passive:50:unknown\",originalId:i,sources:r,value:D,conditions:Object.assign({},n)},c))),d(E,u,{originalId:i,sources:r,targetData:c,conditionInfo:n}),E}),e.set(\"53\",(e,a,t)=>{const s=\"53\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),r=e;let F;!function(e){e.CriticalDamage=\"critical-damage\",e.ElementDamage=\"element-damage\",e.CriticalHitRate=\"critical-rate\"}(F||(F={}));const l=[];let u;if(r.params){const[e,a,s,i,n,c,...o]=p(r);[{resistType:F.CriticalDamage,base:z(e),buff:z(a)},{resistType:F.ElementDamage,base:z(s),buff:z(i)},{resistType:F.CriticalHitRate,base:z(n),buff:z(c)}].forEach(({resistType:e,base:a,buff:t})=>{0===a&&0===t||l.push({resistType:e,base:a,buff:t})}),u=f(o,6,t)}else[{resistType:F.CriticalDamage,baseKey:\"crit dmg base damage resist%\",buffKey:\"crit dmg buffed damage resist%\"},{resistType:F.ElementDamage,baseKey:\"strong base element damage resist%\",buffKey:\"strong buffed element damage resist%\"},{resistType:F.CriticalHitRate,baseKey:\"crit chance base resist%\",buffKey:\"crit chance buffed resist%\"}].forEach(({resistType:e,baseKey:a,buffKey:t})=>{const s=z(r[a]),i=z(r[t]);0===s&&0===i||l.push({resistType:e,base:s,buff:i})});const D=[];return l.forEach(({resistType:e,base:a,buff:t})=>{0!==a&&D.push(Object.assign({id:`passive:53:${e}-base`,originalId:s,sources:c,value:a,conditions:Object.assign({},i)},n)),0!==t&&D.push(Object.assign({id:`passive:53:${e}-buff`,originalId:s,sources:c,value:t,conditions:Object.assign({},i)},n))}),d(D,u,{originalId:s,sources:c,targetData:n,conditionInfo:i}),D}),e.set(\"55\",(e,a,t)=>{const s=\"55\",{conditionInfo:i,targetData:n,sources:c}=o(e,a,t),F=p(e),l=r({id:F[0],params:F[1],turnDuration:z(F[5])},a,t),u=E(F[3],F[4],D.Hp),U=f([\"0,0\",F[2],\"0,0\",...F.slice(5)],0,t),T=B(u),R=[];return l.length>0&&R.push(Object.assign({id:\"passive:55:hp condition\",originalId:s,sources:c,value:l,conditions:Object.assign(Object.assign({},i),T)},n)),d(R,U,{originalId:s,sources:c,targetData:n,conditionInfo:i}),R})}(ee)),ee}!function(e){e.Active=\"active\",e.Passive=\"passive\",e.ConditionalTimed=\"conditionalTimed\",e.Singleton=\"singleton\",e.Burst=\"burst\",e.Attack=\"attack\",e.Unknown=\"unknown\"}(W||(W={})),function(e){e.BraveBurst=\"bb\",e.SuperBraveBurst=\"sbb\",e.UltimateBraveBurst=\"ubb\",e.DualBraveBurst=\"dbb\",e.BondedBraveBurst=\"bbb\",e.BondedSuperBraveBurst=\"dsbb\",e.SpEnhancement=\"sp\",e.Item=\"item\",e.LeaderSkill=\"ls\",e.ExtraSkill=\"es\",e.OmniParadigm=\"omniParadigm\",e.UnitTypeBonus=\"unitTypeBonus\",e.Quest=\"quest\"}(w||(w={})),function(e){e.Unknown=\"unknown\",e.OmniParadigm=\"omniParadigm\",e.All=\"all\"}(L||(L={})),function(e){e.hp=\"hp\",e.atk=\"atk\",e.def=\"def\",e.rec=\"rec\",e.crit=\"crit\",e.hpRecovery=\"hpRecovery\",e.bbGauge=\"bbGauge\",e.odGauge=\"odGauge\",e.bcDropRate=\"bcDropRate\",e.hcDropRate=\"hcDropRate\",e.itemDropRate=\"itemDropRate\",e.zelDropRate=\"zelDropRate\",e.karmaDropRate=\"karmaDropRate\",e.bcEfficacy=\"bcEfficacy\",e.hcEfficacy=\"hcEfficacy\",e.bcCostReduction=\"bcCostReduction\",e.bbGaugeConsumptionReduction=\"bbGaugeConsumptionReduction\",e.poisonResist=\"poisonResist\",e.weakResist=\"weakResist\",e.sickResist=\"sickResist\",e.injuryResist=\"injuryResist\",e.curseResist=\"curseResist\",e.paralysisResist=\"paralysisResist\",e.poisonInflict=\"poisonInflict\",e.weakInflict=\"weakInflict\",e.sickInflict=\"sickInflict\",e.injuryInflict=\"injuryInflict\",e.curseInflict=\"curseInflict\",e.paralysisInflict=\"paralysisInflict\",e.poisonCounter=\"poisonCounter\",e.weakCounter=\"weakCounter\",e.sickCounter=\"sickCounter\",e.injuryCounter=\"injuryCounter\",e.curseCounter=\"curseCounter\",e.paralysisCounter=\"paralysisCounter\",e.atkDownResist=\"atkDownResist\",e.defDownResist=\"defDownResist\",e.recDownResist=\"recDownResist\",e.atkDownInflict=\"atkDownInflict\",e.defDownInflict=\"defDownInflict\",e.recDownInflict=\"recDownInflict\",e.mitigation=\"mitigation\",e.fireMitigation=\"fireMitigation\",e.waterMitigation=\"waterMitigation\",e.earthMitigation=\"earthMitigation\",e.thunderMitigation=\"thunderMitigation\",e.lightMitigation=\"lightMitigation\",e.darkMitigation=\"darkMitigation\",e.reduceDamageToOne=\"reduceDamageToOne\",e.fireElementalDamage=\"fireElementalDamage\",e.waterElementalDamage=\"waterElementalDamage\",e.earthElementalDamage=\"earthElementalDamage\",e.thunderElementalDamage=\"thunderElementalDamage\",e.lightElementalDamage=\"lightElementalDamage\",e.darkElementalDamage=\"darkElementalDamage\",e.elementalWeaknessDamageMitigation=\"elementalWeaknessDamageMitigation\",e.turnDurationModification=\"turnDurationModification\",e.koResistance=\"koResistance\",e.revive=\"revive\",e.defenseIgnore=\"defenseIgnore\",e.criticalDamage=\"criticalDamage\",e.criticalDamageMitigation=\"criticalDamageMitigation\",e.sparkDamage=\"sparkDamage\",e.bbAtk=\"bbAtk\",e.hitCountModification=\"hitCountModification\",e.damageReflect=\"damageReflect\",e.targetingModification=\"targetingModification\",e.elementModification=\"elementModification\",e.buffStabilityModification=\"buffStabilityModification\",e.extraAction=\"extraAction\",e.damageOverTime=\"damageOverTime\"}(M||(M={})),function(e){e.UNKNOWN=\"UNKNOWN\",e.TURN_DURATION_UP=\"TURN_DURATION_UP\",e.TURN_DURATION_DOWN=\"TURN_DURATION_DOWN\",e.BUFF_HPUP=\"BUFF_HPUP\",e.BUFF_HPDOWN=\"BUFF_HPDOWN\",e.BUFF_ATKUP=\"BUFF_ATKUP\",e.BUFF_ATKDOWN=\"BUFF_ATKDOWN\",e.BUFF_DEFUP=\"BUFF_DEFUP\",e.BUFF_DEFDOWN=\"BUFF_DEFDOWN\",e.BUFF_RECUP=\"BUFF_RECUP\",e.BUFF_RECDOWN=\"BUFF_RECDOWN\",e.BUFF_CRTRATEUP=\"BUFF_CRTRATEUP\",e.BUFF_CRTRATEDOWN=\"BUFF_CRTRATEDOWN\",e.BUFF_HPTHRESHATKUP=\"BUFF_HPTHRESHATKUP\",e.BUFF_HPTHRESHATKDOWN=\"BUFF_HPTHRESHATKDOWN\",e.BUFF_HPTHRESHDEFUP=\"BUFF_HPTHRESHDEFUP\",e.BUFF_HPTHRESHDEFDOWN=\"BUFF_HPTHRESHDEFDOWN\",e.BUFF_HPTHRESHRECUP=\"BUFF_HPTHRESHRECUP\",e.BUFF_HPTHRESHRECDOWN=\"BUFF_HPTHRESHRECDOWN\",e.BUFF_HPTHRESHCRTRATEUP=\"BUFF_HPTHRESHCRTRATEUP\",e.BUFF_HPTHRESHCRTRATEDOWN=\"BUFF_HPTHRESHCRTRATEDOWN\",e.BUFF_BBGAUGETHRESHATKUP=\"BUFF_BBGAUGETHRESHATKUP\",e.BUFF_BBGAUGETHRESHATKDOWN=\"BUFF_BBGAUGETHRESHATKDOWN\",e.BUFF_BBGAUGETHRESHDEFUP=\"BUFF_BBGAUGETHRESHDEFUP\",e.BUFF_BBGAUGETHRESHDEFDOWN=\"BUFF_BBGAUGETHRESHDEFDOWN\",e.BUFF_BBGAUGETHRESHRECUP=\"BUFF_BBGAUGETHRESHRECUP\",e.BUFF_BBGAUGETHRESHRECDOWN=\"BUFF_BBGAUGETHRESHRECDOWN\",e.BUFF_BBGAUGETHRESHCRTRATEUP=\"BUFF_BBGAUGETHRESHCRTRATEUP\",e.BUFF_BBGAUGETHRESHCRTRATEDOWN=\"BUFF_BBGAUGETHRESHCRTRATEDOWN\",e.BUFF_HPREC=\"BUFF_HPREC\",e.BUFF_BBREC=\"BUFF_BBREC\",e.BUFF_DAMAGEBB=\"BUFF_DAMAGEBB\",e.BUFF_BEENATK_HPREC=\"BUFF_BEENATK_HPREC\",e.BUFF_FIREHPUP=\"BUFF_FIREHPUP\",e.BUFF_FIREHPDOWN=\"BUFF_FIREHPDOWN\",e.BUFF_FIREATKUP=\"BUFF_FIREATKUP\",e.BUFF_FIREATKDOWN=\"BUFF_FIREATKDOWN\",e.BUFF_FIREDEFUP=\"BUFF_FIREDEFUP\",e.BUFF_FIREDEFDOWN=\"BUFF_FIREDEFDOWN\",e.BUFF_FIRERECUP=\"BUFF_FIRERECUP\",e.BUFF_FIRERECDOWN=\"BUFF_FIRERECDOWN\",e.BUFF_FIRECRTRATEUP=\"BUFF_FIRECRTRATEUP\",e.BUFF_FIRECRTRATEDOWN=\"BUFF_FIRECRTRATEDOWN\",e.BUFF_WATERHPUP=\"BUFF_WATERHPUP\",e.BUFF_WATERHPDOWN=\"BUFF_WATERHPDOWN\",e.BUFF_WATERATKUP=\"BUFF_WATERATKUP\",e.BUFF_WATERATKDOWN=\"BUFF_WATERATKDOWN\",e.BUFF_WATERDEFUP=\"BUFF_WATERDEFUP\",e.BUFF_WATERDEFDOWN=\"BUFF_WATERDEFDOWN\",e.BUFF_WATERRECUP=\"BUFF_WATERRECUP\",e.BUFF_WATERRECDOWN=\"BUFF_WATERRECDOWN\",e.BUFF_WATERCRTRATEUP=\"BUFF_WATERCRTRATEUP\",e.BUFF_WATERCRTRATEDOWN=\"BUFF_WATERCRTRATEDOWN\",e.BUFF_EARTHHPUP=\"BUFF_EARTHHPUP\",e.BUFF_EARTHHPDOWN=\"BUFF_EARTHHPDOWN\",e.BUFF_EARTHATKUP=\"BUFF_EARTHATKUP\",e.BUFF_EARTHATKDOWN=\"BUFF_EARTHATKDOWN\",e.BUFF_EARTHDEFUP=\"BUFF_EARTHDEFUP\",e.BUFF_EARTHDEFDOWN=\"BUFF_EARTHDEFDOWN\",e.BUFF_EARTHRECUP=\"BUFF_EARTHRECUP\",e.BUFF_EARTHRECDOWN=\"BUFF_EARTHRECDOWN\",e.BUFF_EARTHCRTRATEUP=\"BUFF_EARTHCRTRATEUP\",e.BUFF_EARTHCRTRATEDOWN=\"BUFF_EARTHCRTRATEDOWN\",e.BUFF_THUNDERHPUP=\"BUFF_THUNDERHPUP\",e.BUFF_THUNDERHPDOWN=\"BUFF_THUNDERHPDOWN\",e.BUFF_THUNDERATKUP=\"BUFF_THUNDERATKUP\",e.BUFF_THUNDERATKDOWN=\"BUFF_THUNDERATKDOWN\",e.BUFF_THUNDERDEFUP=\"BUFF_THUNDERDEFUP\",e.BUFF_THUNDERDEFDOWN=\"BUFF_THUNDERDEFDOWN\",e.BUFF_THUNDERRECUP=\"BUFF_THUNDERRECUP\",e.BUFF_THUNDERRECDOWN=\"BUFF_THUNDERRECDOWN\",e.BUFF_THUNDERCRTRATEUP=\"BUFF_THUNDERCRTRATEUP\",e.BUFF_THUNDERCRTRATEDOWN=\"BUFF_THUNDERCRTRATEDOWN\",e.BUFF_LIGHTHPUP=\"BUFF_LIGHTHPUP\",e.BUFF_LIGHTHPDOWN=\"BUFF_LIGHTHPDOWN\",e.BUFF_LIGHTATKUP=\"BUFF_LIGHTATKUP\",e.BUFF_LIGHTATKDOWN=\"BUFF_LIGHTATKDOWN\",e.BUFF_LIGHTDEFUP=\"BUFF_LIGHTDEFUP\",e.BUFF_LIGHTDEFDOWN=\"BUFF_LIGHTDEFDOWN\",e.BUFF_LIGHTRECUP=\"BUFF_LIGHTRECUP\",e.BUFF_LIGHTRECDOWN=\"BUFF_LIGHTRECDOWN\",e.BUFF_LIGHTCRTRATEUP=\"BUFF_LIGHTCRTRATEUP\",e.BUFF_LIGHTCRTRATEDOWN=\"BUFF_LIGHTCRTRATEDOWN\",e.BUFF_DARKHPUP=\"BUFF_DARKHPUP\",e.BUFF_DARKHPDOWN=\"BUFF_DARKHPDOWN\",e.BUFF_DARKATKUP=\"BUFF_DARKATKUP\",e.BUFF_DARKATKDOWN=\"BUFF_DARKATKDOWN\",e.BUFF_DARKDEFUP=\"BUFF_DARKDEFUP\",e.BUFF_DARKDEFDOWN=\"BUFF_DARKDEFDOWN\",e.BUFF_DARKRECUP=\"BUFF_DARKRECUP\",e.BUFF_DARKRECDOWN=\"BUFF_DARKRECDOWN\",e.BUFF_DARKCRTRATEUP=\"BUFF_DARKCRTRATEUP\",e.BUFF_DARKCRTRATEDOWN=\"BUFF_DARKCRTRATEDOWN\",e.BUFF_ELEMENTHPUP=\"BUFF_ELEMENTHPUP\",e.BUFF_ELEMENTHPDOWN=\"BUFF_ELEMENTHPDOWN\",e.BUFF_ELEMENTATKUP=\"BUFF_ELEMENTATKUP\",e.BUFF_ELEMENTATKDOWN=\"BUFF_ELEMENTATKDOWN\",e.BUFF_ELEMENTDEFUP=\"BUFF_ELEMENTDEFUP\",e.BUFF_ELEMENTDEFDOWN=\"BUFF_ELEMENTDEFDOWN\",e.BUFF_ELEMENTRECUP=\"BUFF_ELEMENTRECUP\",e.BUFF_ELEMENTRECDOWN=\"BUFF_ELEMENTRECDOWN\",e.BUFF_ELEMENTCRTRATEUP=\"BUFF_ELEMENTCRTRATEUP\",e.BUFF_ELEMENTCRTRATEDOWN=\"BUFF_ELEMENTCRTRATEDOWN\",e.BUFF_LORDHPUP=\"BUFF_LORDHPUP\",e.BUFF_LORDHPDOWN=\"BUFF_LORDHPDOWN\",e.BUFF_LORDATKUP=\"BUFF_LORDATKUP\",e.BUFF_LORDATKDOWN=\"BUFF_LORDATKDOWN\",e.BUFF_LORDDEFUP=\"BUFF_LORDDEFUP\",e.BUFF_LORDDEFDOWN=\"BUFF_LORDDEFDOWN\",e.BUFF_LORDRECUP=\"BUFF_LORDRECUP\",e.BUFF_LORDRECDOWN=\"BUFF_LORDRECDOWN\",e.BUFF_LORDCRTRATEUP=\"BUFF_LORDCRTRATEUP\",e.BUFF_LORDCRTRATEDOWN=\"BUFF_LORDCRTRATEDOWN\",e.BUFF_ANIMAHPUP=\"BUFF_ANIMAHPUP\",e.BUFF_ANIMAHPDOWN=\"BUFF_ANIMAHPDOWN\",e.BUFF_ANIMAATKUP=\"BUFF_ANIMAATKUP\",e.BUFF_ANIMAATKDOWN=\"BUFF_ANIMAATKDOWN\",e.BUFF_ANIMADEFUP=\"BUFF_ANIMADEFUP\",e.BUFF_ANIMADEFDOWN=\"BUFF_ANIMADEFDOWN\",e.BUFF_ANIMARECUP=\"BUFF_ANIMARECUP\",e.BUFF_ANIMARECDOWN=\"BUFF_ANIMARECDOWN\",e.BUFF_ANIMACRTRATEUP=\"BUFF_ANIMACRTRATEUP\",e.BUFF_ANIMACRTRATEDOWN=\"BUFF_ANIMACRTRATEDOWN\",e.BUFF_BREAKERHPUP=\"BUFF_BREAKERHPUP\",e.BUFF_BREAKERHPDOWN=\"BUFF_BREAKERHPDOWN\",e.BUFF_BREAKERATKUP=\"BUFF_BREAKERATKUP\",e.BUFF_BREAKERATKDOWN=\"BUFF_BREAKERATKDOWN\",e.BUFF_BREAKERDEFUP=\"BUFF_BREAKERDEFUP\",e.BUFF_BREAKERDEFDOWN=\"BUFF_BREAKERDEFDOWN\",e.BUFF_BREAKERRECUP=\"BUFF_BREAKERRECUP\",e.BUFF_BREAKERRECDOWN=\"BUFF_BREAKERRECDOWN\",e.BUFF_BREAKERCRTRATEUP=\"BUFF_BREAKERCRTRATEUP\",e.BUFF_BREAKERCRTRATEDOWN=\"BUFF_BREAKERCRTRATEDOWN\",e.BUFF_GUARDIANHPUP=\"BUFF_GUARDIANHPUP\",e.BUFF_GUARDIANHPDOWN=\"BUFF_GUARDIANHPDOWN\",e.BUFF_GUARDIANATKUP=\"BUFF_GUARDIANATKUP\",e.BUFF_GUARDIANATKDOWN=\"BUFF_GUARDIANATKDOWN\",e.BUFF_GUARDIANDEFUP=\"BUFF_GUARDIANDEFUP\",e.BUFF_GUARDIANDEFDOWN=\"BUFF_GUARDIANDEFDOWN\",e.BUFF_GUARDIANRECUP=\"BUFF_GUARDIANRECUP\",e.BUFF_GUARDIANRECDOWN=\"BUFF_GUARDIANRECDOWN\",e.BUFF_GUARDIANCRTRATEUP=\"BUFF_GUARDIANCRTRATEUP\",e.BUFF_GUARDIANCRTRATEDOWN=\"BUFF_GUARDIANCRTRATEDOWN\",e.BUFF_ORACLEHPUP=\"BUFF_ORACLEHPUP\",e.BUFF_ORACLEHPDOWN=\"BUFF_ORACLEHPDOWN\",e.BUFF_ORACLEATKUP=\"BUFF_ORACLEATKUP\",e.BUFF_ORACLEATKDOWN=\"BUFF_ORACLEATKDOWN\",e.BUFF_ORACLEDEFUP=\"BUFF_ORACLEDEFUP\",e.BUFF_ORACLEDEFDOWN=\"BUFF_ORACLEDEFDOWN\",e.BUFF_ORACLERECUP=\"BUFF_ORACLERECUP\",e.BUFF_ORACLERECDOWN=\"BUFF_ORACLERECDOWN\",e.BUFF_ORACLECRTRATEUP=\"BUFF_ORACLECRTRATEUP\",e.BUFF_ORACLECRTRATEDOWN=\"BUFF_ORACLECRTRATEDOWN\",e.BUFF_REXHPUP=\"BUFF_REXHPUP\",e.BUFF_REXHPDOWN=\"BUFF_REXHPDOWN\",e.BUFF_REXATKUP=\"BUFF_REXATKUP\",e.BUFF_REXATKDOWN=\"BUFF_REXATKDOWN\",e.BUFF_REXDEFUP=\"BUFF_REXDEFUP\",e.BUFF_REXDEFDOWN=\"BUFF_REXDEFDOWN\",e.BUFF_REXRECUP=\"BUFF_REXRECUP\",e.BUFF_REXRECDOWN=\"BUFF_REXRECDOWN\",e.BUFF_REXCRTRATEUP=\"BUFF_REXCRTRATEUP\",e.BUFF_REXCRTRATEDOWN=\"BUFF_REXCRTRATEDOWN\",e.BUFF_UNITTYPEHPUP=\"BUFF_UNITTYPEHPUP\",e.BUFF_UNITTYPEHPDOWN=\"BUFF_UNITTYPEHPDOWN\",e.BUFF_UNITTYPEATKUP=\"BUFF_UNITTYPEATKUP\",e.BUFF_UNITTYPEATKDOWN=\"BUFF_UNITTYPEATKDOWN\",e.BUFF_UNITTYPEDEFUP=\"BUFF_UNITTYPEDEFUP\",e.BUFF_UNITTYPEDEFDOWN=\"BUFF_UNITTYPEDEFDOWN\",e.BUFF_UNITTYPERECUP=\"BUFF_UNITTYPERECUP\",e.BUFF_UNITTYPERECDOWN=\"BUFF_UNITTYPERECDOWN\",e.BUFF_UNITTYPECRTRATEUP=\"BUFF_UNITTYPECRTRATEUP\",e.BUFF_UNITTYPECRTRATEDOWN=\"BUFF_UNITTYPECRTRATEDOWN\",e.BUFF_UNIQUEELEMENTHPUP=\"BUFF_UNIQUEELEMENTHPUP\",e.BUFF_UNIQUEELEMENTHPDOWN=\"BUFF_UNIQUEELEMENTHPDOWN\",e.BUFF_UNIQUEELEMENTATKUP=\"BUFF_UNIQUEELEMENTATKUP\",e.BUFF_UNIQUEELEMENTATKDOWN=\"BUFF_UNIQUEELEMENTATKDOWN\",e.BUFF_UNIQUEELEMENTDEFUP=\"BUFF_UNIQUEELEMENTDEFUP\",e.BUFF_UNIQUEELEMENTDEFDOWN=\"BUFF_UNIQUEELEMENTDEFDOWN\",e.BUFF_UNIQUEELEMENTRECUP=\"BUFF_UNIQUEELEMENTRECUP\",e.BUFF_UNIQUEELEMENTRECDOWN=\"BUFF_UNIQUEELEMENTRECDOWN\",e.BUFF_UNIQUEELEMENTCRTRATEUP=\"BUFF_UNIQUEELEMENTCRTRATEUP\",e.BUFF_UNIQUEELEMENTCRTRATEDOWN=\"BUFF_UNIQUEELEMENTCRTRATEDOWN\",e.BUFF_MALEHPUP=\"BUFF_MALEHPUP\",e.BUFF_MALEHPDOWN=\"BUFF_MALEHPDOWN\",e.BUFF_MALEATKUP=\"BUFF_MALEATKUP\",e.BUFF_MALEATKDOWN=\"BUFF_MALEATKDOWN\",e.BUFF_MALEDEFUP=\"BUFF_MALEDEFUP\",e.BUFF_MALEDEFDOWN=\"BUFF_MALEDEFDOWN\",e.BUFF_MALERECUP=\"BUFF_MALERECUP\",e.BUFF_MALERECDOWN=\"BUFF_MALERECDOWN\",e.BUFF_MALECRTRATEUP=\"BUFF_MALECRTRATEUP\",e.BUFF_MALECRTRATEDOWN=\"BUFF_MALECRTRATEDOWN\",e.BUFF_FEMALEHPUP=\"BUFF_FEMALEHPUP\",e.BUFF_FEMALEHPDOWN=\"BUFF_FEMALEHPDOWN\",e.BUFF_FEMALEATKUP=\"BUFF_FEMALEATKUP\",e.BUFF_FEMALEATKDOWN=\"BUFF_FEMALEATKDOWN\",e.BUFF_FEMALEDEFUP=\"BUFF_FEMALEDEFUP\",e.BUFF_FEMALEDEFDOWN=\"BUFF_FEMALEDEFDOWN\",e.BUFF_FEMALERECUP=\"BUFF_FEMALERECUP\",e.BUFF_FEMALERECDOWN=\"BUFF_FEMALERECDOWN\",e.BUFF_FEMALECRTRATEUP=\"BUFF_FEMALECRTRATEUP\",e.BUFF_FEMALECRTRATEDOWN=\"BUFF_FEMALECRTRATEDOWN\",e.BUFF_OTHERHPUP=\"BUFF_OTHERHPUP\",e.BUFF_OTHERHPDOWN=\"BUFF_OTHERHPDOWN\",e.BUFF_OTHERATKUP=\"BUFF_OTHERATKUP\",e.BUFF_OTHERATKDOWN=\"BUFF_OTHERATKDOWN\",e.BUFF_OTHERDEFUP=\"BUFF_OTHERDEFUP\",e.BUFF_OTHERDEFDOWN=\"BUFF_OTHERDEFDOWN\",e.BUFF_OTHERRECUP=\"BUFF_OTHERRECUP\",e.BUFF_OTHERRECDOWN=\"BUFF_OTHERRECDOWN\",e.BUFF_OTHERCRTRATEUP=\"BUFF_OTHERCRTRATEUP\",e.BUFF_OTHERCRTRATEDOWN=\"BUFF_OTHERCRTRATEDOWN\",e.BUFF_GENDERHPUP=\"BUFF_GENDERHPUP\",e.BUFF_GENDERHPDOWN=\"BUFF_GENDERHPDOWN\",e.BUFF_GENDERATKUP=\"BUFF_GENDERATKUP\",e.BUFF_GENDERATKDOWN=\"BUFF_GENDERATKDOWN\",e.BUFF_GENDERDEFUP=\"BUFF_GENDERDEFUP\",e.BUFF_GENDERDEFDOWN=\"BUFF_GENDERDEFDOWN\",e.BUFF_GENDERRECUP=\"BUFF_GENDERRECUP\",e.BUFF_GENDERRECDOWN=\"BUFF_GENDERRECDOWN\",e.BUFF_GENDERCRTRATEUP=\"BUFF_GENDERCRTRATEUP\",e.BUFF_GENDERCRTRATEDOWN=\"BUFF_GENDERCRTRATEDOWN\",e.BUFF_CONVERTATKUP=\"BUFF_CONVERTATKUP\",e.BUFF_CONVERTATKDOWN=\"BUFF_CONVERTATKDOWN\",e.BUFF_CONVERTDEFUP=\"BUFF_CONVERTDEFUP\",e.BUFF_CONVERTDEFDOWN=\"BUFF_CONVERTDEFDOWN\",e.BUFF_CONVERTRECUP=\"BUFF_CONVERTRECUP\",e.BUFF_CONVERTRECDOWN=\"BUFF_CONVERTRECDOWN\",e.BUFF_HPSCALEDATKUP=\"BUFF_HPSCALEDATKUP\",e.BUFF_HPSCALEDATKDOWN=\"BUFF_HPSCALEDATKDOWN\",e.BUFF_HPSCALEDDEFUP=\"BUFF_HPSCALEDDEFUP\",e.BUFF_HPSCALEDDEFDOWN=\"BUFF_HPSCALEDDEFDOWN\",e.BUFF_HPSCALEDRECUP=\"BUFF_HPSCALEDRECUP\",e.BUFF_HPSCALEDRECDOWN=\"BUFF_HPSCALEDRECDOWN\",e.BUFF_POISONBLK=\"BUFF_POISONBLK\",e.BUFF_WEAKBLK=\"BUFF_WEAKBLK\",e.BUFF_SICKBLK=\"BUFF_SICKBLK\",e.BUFF_INJURYBLK=\"BUFF_INJURYBLK\",e.BUFF_CURSEBLK=\"BUFF_CURSEBLK\",e.BUFF_PARALYSISBLK=\"BUFF_PARALYSISBLK\",e.BUFF_ATKDOWNBLK=\"BUFF_ATKDOWNBLK\",e.BUFF_DEFDOWNBLK=\"BUFF_DEFDOWNBLK\",e.BUFF_RECDOWNBLK=\"BUFF_RECDOWNBLK\",e.BUFF_AILMENTBLK=\"BUFF_AILMENTBLK\",e.DEBUFF_POISON=\"DEBUFF_POISON\",e.DEBUFF_WEAK=\"DEBUFF_WEAK\",e.DEBUFF_SICK=\"DEBUFF_SICK\",e.DEBUFF_INJURY=\"DEBUFF_INJURY\",e.DEBUFF_CURSE=\"DEBUFF_CURSE\",e.DEBUFF_PARALYSIS=\"DEBUFF_PARALYSIS\",e.DEBUFF_AILMENT=\"DEBUFF_AILMENT\",e.BUFF_ADDPOISON=\"BUFF_ADDPOISON\",e.BUFF_ADDWEAK=\"BUFF_ADDWEAK\",e.BUFF_ADDSICK=\"BUFF_ADDSICK\",e.BUFF_ADDINJURY=\"BUFF_ADDINJURY\",e.BUFF_ADDCURSE=\"BUFF_ADDCURSE\",e.BUFF_ADDPARA=\"BUFF_ADDPARA\",e.BUFF_ADDAILMENT=\"BUFF_ADDAILMENT\",e.BUFF_ADDATKDOWN=\"BUFF_ADDATKDOWN\",e.BUFF_ADDDEFDOWN=\"BUFF_ADDDEFDOWN\",e.BUFF_ADDRECDOWN=\"BUFF_ADDRECDOWN\",e.BUFF_POISONCOUNTER=\"BUFF_POISONCOUNTER\",e.BUFF_POISIONCOUNTER=\"BUFF_POISONCOUNTER\",e.BUFF_WEAKCOUNTER=\"BUFF_WEAKCOUNTER\",e.BUFF_SICKCOUNTER=\"BUFF_SICKCOUNTER\",e.BUFF_INJCONTER=\"BUFF_INJCONTER\",e.BUFF_CURSECOUNTER=\"BUFF_CURSECOUNTER\",e.BUFF_PARALYCOUNTER=\"BUFF_PARALYCOUNTER\",e.BUFF_DAMAGECUT=\"BUFF_DAMAGECUT\",e.BUFF_DAMAGECUTTOONE=\"BUFF_DAMAGECUTTOONE\",e.BUFF_FIREDMGDOWN=\"BUFF_FIREDMGDOWN\",e.BUFF_WATERDMGDOWN=\"BUFF_WATERDMGDOWN\",e.BUFF_EARTHDMGDOWN=\"BUFF_EARTHDMGDOWN\",e.BUFF_THUNDERDMGDOWN=\"BUFF_THUNDERDMGDOWN\",e.BUFF_LIGHTDMGDOWN=\"BUFF_LIGHTDMGDOWN\",e.BUFF_DARKDMGDOWN=\"BUFF_DARKDMGDOWN\",e.BUFF_ELEMENTDMGDOWN=\"BUFF_ELEMENTDMGDOWN\",e.BUFF_FIREDMGUP=\"BUFF_FIREDMGUP\",e.BUFF_WATERDMGUP=\"BUFF_WATERDMGUP\",e.BUFF_WATERMDGUP=\"BUFF_WATERDMGUP\",e.BUFF_EARTHDMGUP=\"BUFF_EARTHDMGUP\",e.BUFF_THUNDERDMGUP=\"BUFF_THUNDERDMGUP\",e.BUFF_LIGHTDMGUP=\"BUFF_LIGHTDMGUP\",e.BUFF_DARKDMGUP=\"BUFF_DARKDMGUP\",e.BUFF_ELEMENTDMGUP=\"BUFF_ELEMENTDMGUP\",e.BUFF_HCDROP=\"BUFF_HCDROP\",e.BUFF_HCDOWN=\"BUFF_HCDOWN\",e.BUFF_BCDROP=\"BUFF_BCDROP\",e.BUFF_BCDOWN=\"BUFF_BCDOWN\",e.BUFF_ITEMDROP=\"BUFF_ITEMDROP\",e.BUFF_ITEMDOWN=\"BUFF_ITEMDOWN\",e.BUFF_ZELDROP=\"BUFF_ZELDROP\",e.BUFF_ZELDOWN=\"BUFF_ZELDOWN\",e.BUFF_KARMADROP=\"BUFF_KARMADROP\",e.BUFF_KARMADOWN=\"BUFF_KARMADOWN\",e.BUFF_HPTHRESHHCDROP=\"BUFF_HPTHRESHHCDROP\",e.BUFF_HPTHRESHHCDOWN=\"BUFF_HPTHRESHHCDOWN\",e.BUFF_HPTHRESHBCDROP=\"BUFF_HPTHRESHBCDROP\",e.BUFF_HPTHRESHBCDOWN=\"BUFF_HPTHRESHBCDOWN\",e.BUFF_HPTHRESHITEMDROP=\"BUFF_HPTHRESHITEMDROP\",e.BUFF_HPTHRESHITEMDOWN=\"BUFF_HPTHRESHITEMDOWN\",e.BUFF_HPTHRESHZELDROP=\"BUFF_HPTHRESHZELDROP\",e.BUFF_HPTHRESHZELDOWN=\"BUFF_HPTHRESHZELDOWN\",e.BUFF_HPTHRESHKARMADROP=\"BUFF_HPTHRESHKARMADROP\",e.BUFF_HPTHRESHKARMADOWN=\"BUFF_HPTHRESHKARMADOWN\",e.BUFF_BBFILL=\"BUFF_BBFILL\",e.BUFF_BBFILLDOWN=\"BUFF_BBFILLDOWN\",e.BUFF_HCREC=\"BUFF_HCREC\",e.BUFF_KOBLK=\"BUFF_KOBLK\",e.BUFF_KO=\"BUFF_KO\",e.BUFF_HPABS=\"BUFF_HPABS\",e.BUFF_IGNOREDEF=\"BUFF_IGNOREDEF\",e.BUFF_CRTUP=\"BUFF_CRTUP\",e.BUFF_CRTDOWN=\"BUFF_CRTDOWN\",e.BUFF_ELEMENTDOWN=\"BUFF_ELEMENTDOWN\",e.BUFF_SPARKUP=\"BUFF_SPARKUP\",e.BUFF_SPARKDOWN=\"BUFF_SPARKDOWN\",e.BUFF_SPARKHC=\"BUFF_SPARKHC\",e.BUFF_SPARKBC=\"BUFF_SPARKBC\",e.BUFF_SPARKITEM=\"BUFF_SPARKITEM\",e.BUFF_SPARKZEL=\"BUFF_SPARKZEL\",e.BUFF_SPARKKARMA=\"BUFF_SPARKKARMA\",e.BUFF_SPARKBBUP=\"BUFF_SPARKBBUP\",e.BUFF_HITUP=\"BUFF_HITUP\",e.BUFF_COUNTERDAMAGE=\"BUFF_COUNTERDAMAGE\",e.BUFF_GETENEATT=\"BUFF_GETENEATT\",e.BUFF_REPENEATT=\"BUFF_REPENEATT\",e.BUFF_HPTHRESHGETENEATT=\"BUFF_HPTHRESHGETENEATT\",e.BUFF_HPTHRESHREPENEATT=\"BUFF_HPTHRESHREPENEATT\",e.BUFF_ADDFIRE=\"BUFF_ADDFIRE\",e.BUFF_ADDWATER=\"BUFF_ADDWATER\",e.BUFF_ADDEARTH=\"BUFF_ADDEARTH\",e.BUFF_ADDTHUNDER=\"BUFF_ADDTHUNDER\",e.BUFF_ADDLIGHT=\"BUFF_ADDLIGHT\",e.BUFF_ADDDARK=\"BUFF_ADDDARK\",e.BUFF_ADDELEMENT=\"BUFF_ADDELEMENT\",e.BUFF_SHIFTFIRE=\"BUFF_SHIFTFIRE\",e.BUFF_SHIFTWATER=\"BUFF_SHIFTWATER\",e.BUFF_SHIFTEARTH=\"BUFF_SHIFTEARTH\",e.BUFF_SHIFTTHUNDER=\"BUFF_SHIFTTHUNDER\",e.BUFF_SHIFTLIGHT=\"BUFF_SHIFTLIGHT\",e.BUFF_SHIFTDARK=\"BUFF_SHIFTDARK\",e.BUFF_SHIFTELEMENT=\"BUFF_SHIFTELEMENT\",e.BUFF_REMOVEBUFF=\"BUFF_REMOVEBUFF\",e.BUFF_DISABLELS=\"BUFF_DISABLELS\",e.BUFF_SUMMONUNIT=\"BUFF_SUMMONUNIT\",e.BUFF_DBLSTRIKE=\"BUFF_DBLSTRIKE\",e.BUFF_OVERDRIVEUP=\"BUFF_OVERDRIVEUP\",e.BUFF_TURNDMG=\"BUFF_TURNDMG\",e.BUFF_BBATKUP=\"BUFF_BBATKUP\",e.BUFF_SBBATKUP=\"BUFF_SBBATKUP\",e.BUFF_UBBATKUP=\"BUFF_UBBATKUP\",e.BUFF_BBCOST_REDUCTION=\"BUFF_BBCOST_REDUCTION\",e.ATK_ST=\"ATK_ST\",e.ATK_AOE=\"ATK_AOE\",e.ATK_RT=\"ATK_RT\",e.ATK_ST_HPREC=\"ATK_ST_HPREC\",e.ATK_AOE_HPREC=\"ATK_AOE_HPREC\",e.ATK_ST_PROPORTIONAL=\"ATK_ST_PROPORTIONAL\",e.ATK_AOE_PROPORTIONAL=\"ATK_AOE_PROPORTIONAL\",e.ATK_ST_PIERCING_PROPORTIONAL=\"ATK_ST_PIERCING_PROPORTIONAL\",e.ATK_AOE_PIERCING_PROPORTIONAL=\"ATK_AOE_PIERCING_PROPORTIONAL\",e.ATK_ST_FIXED=\"ATK_ST_FIXED\",e.ATK_AOE_FIXED=\"ATK_AOE_FIXED\",e.ATK_ST_PIERCING_FIXED=\"ATK_ST_PIERCING_FIXED\",e.ATK_AOE_PIERCING_FIXED=\"ATK_AOE_PIERCING_FIXED\",e.ATK_ST_MULTIELEMENT=\"ATK_ST_MULTIELEMENT\",e.ATK_AOE_MULTIELEMENT=\"ATK_AOE_MULTIELEMENT\",e.ATK_ST_SACRIFICIAL=\"ATK_ST_SACRIFICIAL\",e.ATK_AOE_SACRIFICIAL=\"ATK_AOE_SACRIFICIAL\",e.ATK_ST_HPSCALED=\"ATK_ST_HPSCALED\",e.ATK_AOE_HPSCALED=\"ATK_AOE_HPSCALED\"}(j||(j={})),function(e){e.TURN_DURATION_MODIFICATION=\"TURN_DURATION_MODIFICATION\",e.NO_PARAMS_SPECIFIED=\"NO_PARAMS_SPECIFIED\",e.UNKNOWN_PASSIVE_EFFECT_ID=\"UNKNOWN_PASSIVE_EFFECT_ID\",e.UNKNOWN_PASSIVE_BUFF_PARAMS=\"UNKNOWN_PASSIVE_BUFF_PARAMS\",e[\"passive:1:hp\"]=\"passive:1:hp\",e[\"passive:1:atk\"]=\"passive:1:atk\",e[\"passive:1:def\"]=\"passive:1:def\",e[\"passive:1:rec\"]=\"passive:1:rec\",e[\"passive:1:crit\"]=\"passive:1:crit\",e[\"passive:2:hp\"]=\"passive:2:hp\",e[\"passive:2:atk\"]=\"passive:2:atk\",e[\"passive:2:def\"]=\"passive:2:def\",e[\"passive:2:rec\"]=\"passive:2:rec\",e[\"passive:2:crit\"]=\"passive:2:crit\",e[\"passive:3:hp\"]=\"passive:3:hp\",e[\"passive:3:atk\"]=\"passive:3:atk\",e[\"passive:3:def\"]=\"passive:3:def\",e[\"passive:3:rec\"]=\"passive:3:rec\",e[\"passive:3:crit\"]=\"passive:3:crit\",e[\"passive:4:poison\"]=\"passive:4:poison\",e[\"passive:4:weak\"]=\"passive:4:weak\",e[\"passive:4:sick\"]=\"passive:4:sick\",e[\"passive:4:injury\"]=\"passive:4:injury\",e[\"passive:4:curse\"]=\"passive:4:curse\",e[\"passive:4:paralysis\"]=\"passive:4:paralysis\",e[\"passive:5:fire\"]=\"passive:5:fire\",e[\"passive:5:water\"]=\"passive:5:water\",e[\"passive:5:earth\"]=\"passive:5:earth\",e[\"passive:5:thunder\"]=\"passive:5:thunder\",e[\"passive:5:light\"]=\"passive:5:light\",e[\"passive:5:dark\"]=\"passive:5:dark\",e[\"passive:5:unknown\"]=\"passive:5:unknown\",e[\"passive:8\"]=\"passive:8\",e[\"passive:9\"]=\"passive:9\",e[\"passive:10\"]=\"passive:10\",e[\"passive:11:atk\"]=\"passive:11:atk\",e[\"passive:11:def\"]=\"passive:11:def\",e[\"passive:11:rec\"]=\"passive:11:rec\",e[\"passive:11:crit\"]=\"passive:11:crit\",e[\"passive:12:bc\"]=\"passive:12:bc\",e[\"passive:12:hc\"]=\"passive:12:hc\",e[\"passive:12:item\"]=\"passive:12:item\",e[\"passive:12:zel\"]=\"passive:12:zel\",e[\"passive:12:karma\"]=\"passive:12:karma\",e[\"passive:13\"]=\"passive:13\",e[\"passive:14\"]=\"passive:14\",e[\"passive:15\"]=\"passive:15\",e[\"passive:16\"]=\"passive:16\",e[\"passive:17\"]=\"passive:17\",e[\"passive:19:bc\"]=\"passive:19:bc\",e[\"passive:19:hc\"]=\"passive:19:hc\",e[\"passive:19:item\"]=\"passive:19:item\",e[\"passive:19:zel\"]=\"passive:19:zel\",e[\"passive:19:karma\"]=\"passive:19:karma\",e[\"passive:20:poison\"]=\"passive:20:poison\",e[\"passive:20:weak\"]=\"passive:20:weak\",e[\"passive:20:sick\"]=\"passive:20:sick\",e[\"passive:20:injury\"]=\"passive:20:injury\",e[\"passive:20:curse\"]=\"passive:20:curse\",e[\"passive:20:paralysis\"]=\"passive:20:paralysis\",e[\"passive:20:atk down\"]=\"passive:20:atk down\",e[\"passive:20:def down\"]=\"passive:20:def down\",e[\"passive:20:rec down\"]=\"passive:20:rec down\",e[\"passive:20:unknown\"]=\"passive:20:unknown\",e[\"passive:21:atk\"]=\"passive:21:atk\",e[\"passive:21:def\"]=\"passive:21:def\",e[\"passive:21:rec\"]=\"passive:21:rec\",e[\"passive:21:crit\"]=\"passive:21:crit\",e[\"passive:23\"]=\"passive:23\",e[\"passive:24\"]=\"passive:24\",e[\"passive:25\"]=\"passive:25\",e[\"passive:26\"]=\"passive:26\",e[\"passive:27\"]=\"passive:27\",e[\"passive:28\"]=\"passive:28\",e[\"passive:29\"]=\"passive:29\",e[\"passive:30:atk\"]=\"passive:30:atk\",e[\"passive:30:def\"]=\"passive:30:def\",e[\"passive:30:rec\"]=\"passive:30:rec\",e[\"passive:30:crit\"]=\"passive:30:crit\",e[\"passive:31:damage\"]=\"passive:31:damage\",e[\"passive:31:bc\"]=\"passive:31:bc\",e[\"passive:31:hc\"]=\"passive:31:hc\",e[\"passive:31:item\"]=\"passive:31:item\",e[\"passive:31:zel\"]=\"passive:31:zel\",e[\"passive:31:karma\"]=\"passive:31:karma\",e[\"passive:32\"]=\"passive:32\",e[\"passive:33\"]=\"passive:33\",e[\"passive:34\"]=\"passive:34\",e[\"passive:35\"]=\"passive:35\",e[\"passive:36\"]=\"passive:36\",e[\"passive:37\"]=\"passive:37\",e[\"passive:40:atk\"]=\"passive:40:atk\",e[\"passive:40:def\"]=\"passive:40:def\",e[\"passive:40:rec\"]=\"passive:40:rec\",e[\"passive:41:hp\"]=\"passive:41:hp\",e[\"passive:41:atk\"]=\"passive:41:atk\",e[\"passive:41:def\"]=\"passive:41:def\",e[\"passive:41:rec\"]=\"passive:41:rec\",e[\"passive:41:crit\"]=\"passive:41:crit\",e[\"passive:42:hp\"]=\"passive:42:hp\",e[\"passive:42:atk\"]=\"passive:42:atk\",e[\"passive:42:def\"]=\"passive:42:def\",e[\"passive:42:rec\"]=\"passive:42:rec\",e[\"passive:42:crit\"]=\"passive:42:crit\",e[\"passive:43\"]=\"passive:43\",e[\"passive:44:hp\"]=\"passive:44:hp\",e[\"passive:44:atk\"]=\"passive:44:atk\",e[\"passive:44:def\"]=\"passive:44:def\",e[\"passive:44:rec\"]=\"passive:44:rec\",e[\"passive:44:crit\"]=\"passive:44:crit\",e[\"passive:45:base\"]=\"passive:45:base\",e[\"passive:45:buff\"]=\"passive:45:buff\",e[\"passive:46:atk\"]=\"passive:46:atk\",e[\"passive:46:def\"]=\"passive:46:def\",e[\"passive:46:rec\"]=\"passive:46:rec\",e[\"passive:47\"]=\"passive:47\",e[\"passive:48\"]=\"passive:48\",e[\"passive:49\"]=\"passive:49\",e[\"passive:50:fire\"]=\"passive:50:fire\",e[\"passive:50:water\"]=\"passive:50:water\",e[\"passive:50:earth\"]=\"passive:50:earth\",e[\"passive:50:thunder\"]=\"passive:50:thunder\",e[\"passive:50:light\"]=\"passive:50:light\",e[\"passive:50:dark\"]=\"passive:50:dark\",e[\"passive:50:unknown\"]=\"passive:50:unknown\",e[\"passive:53:critical-damage-base\"]=\"passive:53:critical-damage-base\",e[\"passive:53:critical-damage-buff\"]=\"passive:53:critical-damage-buff\",e[\"passive:53:element-damage-base\"]=\"passive:53:element-damage-base\",e[\"passive:53:element-damage-buff\"]=\"passive:53:element-damage-buff\",e[\"passive:53:critical-rate-base\"]=\"passive:53:critical-rate-base\",e[\"passive:53:critical-rate-buff\"]=\"passive:53:critical-rate-buff\",e[\"passive:55:hp condition\"]=\"passive:55:hp condition\",e.UNKNOWN_PROC_EFFECT_ID=\"UNKNOWN_PROC_EFFECT_ID\",e.UNKNOWN_PROC_BUFF_PARAMS=\"UNKNOWN_PROC_BUFF_PARAMS\",e[\"proc:1\"]=\"proc:1\",e[\"proc:2\"]=\"proc:2\",e[\"proc:3\"]=\"proc:3\",e[\"proc:4:flat\"]=\"proc:4:flat\",e[\"proc:4:percent\"]=\"proc:4:percent\",e[\"proc:5:atk\"]=\"proc:5:atk\",e[\"proc:5:def\"]=\"proc:5:def\",e[\"proc:5:rec\"]=\"proc:5:rec\",e[\"proc:5:crit\"]=\"proc:5:crit\",e[\"proc:6:bc\"]=\"proc:6:bc\",e[\"proc:6:hc\"]=\"proc:6:hc\",e[\"proc:6:item\"]=\"proc:6:item\",e[\"proc:7\"]=\"proc:7\",e[\"proc:8:flat\"]=\"proc:8:flat\",e[\"proc:8:percent\"]=\"proc:8:percent\",e[\"proc:9:atk\"]=\"proc:9:atk\",e[\"proc:9:def\"]=\"proc:9:def\",e[\"proc:9:rec\"]=\"proc:9:rec\",e[\"proc:9:unknown\"]=\"proc:9:unknown\",e[\"proc:10:poison\"]=\"proc:10:poison\",e[\"proc:10:weak\"]=\"proc:10:weak\",e[\"proc:10:sick\"]=\"proc:10:sick\",e[\"proc:10:injury\"]=\"proc:10:injury\",e[\"proc:10:curse\"]=\"proc:10:curse\",e[\"proc:10:paralysis\"]=\"proc:10:paralysis\",e[\"proc:10:atk down\"]=\"proc:10:atk down\",e[\"proc:10:def down\"]=\"proc:10:def down\",e[\"proc:10:rec down\"]=\"proc:10:rec down\",e[\"proc:10:unknown\"]=\"proc:10:unknown\",e[\"proc:11:poison\"]=\"proc:11:poison\",e[\"proc:11:weak\"]=\"proc:11:weak\",e[\"proc:11:sick\"]=\"proc:11:sick\",e[\"proc:11:injury\"]=\"proc:11:injury\",e[\"proc:11:curse\"]=\"proc:11:curse\",e[\"proc:11:paralysis\"]=\"proc:11:paralysis\",e[\"proc:11:atk down\"]=\"proc:11:atk down\",e[\"proc:11:def down\"]=\"proc:11:def down\",e[\"proc:11:rec down\"]=\"proc:11:rec down\",e[\"proc:11:unknown\"]=\"proc:11:unknown\",e[\"proc:12\"]=\"proc:12\",e[\"proc:13\"]=\"proc:13\",e[\"proc:14\"]=\"proc:14\",e[\"proc:16:fire\"]=\"proc:16:fire\",e[\"proc:16:water\"]=\"proc:16:water\",e[\"proc:16:earth\"]=\"proc:16:earth\",e[\"proc:16:thunder\"]=\"proc:16:thunder\",e[\"proc:16:light\"]=\"proc:16:light\",e[\"proc:16:dark\"]=\"proc:16:dark\",e[\"proc:16:all\"]=\"proc:16:all\",e[\"proc:16:unknown\"]=\"proc:16:unknown\",e[\"proc:17:poison\"]=\"proc:17:poison\",e[\"proc:17:weak\"]=\"proc:17:weak\",e[\"proc:17:sick\"]=\"proc:17:sick\",e[\"proc:17:injury\"]=\"proc:17:injury\",e[\"proc:17:curse\"]=\"proc:17:curse\",e[\"proc:17:paralysis\"]=\"proc:17:paralysis\",e[\"proc:18\"]=\"proc:18\",e[\"proc:19\"]=\"proc:19\",e[\"proc:20\"]=\"proc:20\",e[\"proc:22\"]=\"proc:22\",e[\"proc:23\"]=\"proc:23\",e[\"proc:24:atk\"]=\"proc:24:atk\",e[\"proc:24:def\"]=\"proc:24:def\",e[\"proc:24:rec\"]=\"proc:24:rec\",e[\"proc:26\"]=\"proc:26\",e[\"proc:27\"]=\"proc:27\",e[\"proc:28\"]=\"proc:28\",e[\"proc:29\"]=\"proc:29\",e[\"proc:30:fire\"]=\"proc:30:fire\",e[\"proc:30:water\"]=\"proc:30:water\",e[\"proc:30:earth\"]=\"proc:30:earth\",e[\"proc:30:thunder\"]=\"proc:30:thunder\",e[\"proc:30:light\"]=\"proc:30:light\",e[\"proc:30:dark\"]=\"proc:30:dark\",e[\"proc:30:unknown\"]=\"proc:30:unknown\",e[\"proc:31:flat\"]=\"proc:31:flat\",e[\"proc:31:percent\"]=\"proc:31:percent\",e[\"proc:32:fire\"]=\"proc:32:fire\",e[\"proc:32:water\"]=\"proc:32:water\",e[\"proc:32:earth\"]=\"proc:32:earth\",e[\"proc:32:thunder\"]=\"proc:32:thunder\",e[\"proc:32:light\"]=\"proc:32:light\",e[\"proc:32:dark\"]=\"proc:32:dark\",e[\"proc:32:unknown\"]=\"proc:32:unknown\",e[\"proc:33\"]=\"proc:33\",e[\"proc:34:flat\"]=\"proc:34:flat\",e[\"proc:34:percent\"]=\"proc:34:percent\",e[\"proc:36\"]=\"proc:36\",e[\"proc:37\"]=\"proc:37\",e[\"proc:38:poison\"]=\"proc:38:poison\",e[\"proc:38:weak\"]=\"proc:38:weak\",e[\"proc:38:sick\"]=\"proc:38:sick\",e[\"proc:38:injury\"]=\"proc:38:injury\",e[\"proc:38:curse\"]=\"proc:38:curse\",e[\"proc:38:paralysis\"]=\"proc:38:paralysis\",e[\"proc:38:atk down\"]=\"proc:38:atk down\",e[\"proc:38:def down\"]=\"proc:38:def down\",e[\"proc:38:rec down\"]=\"proc:38:rec down\",e[\"proc:38:unknown\"]=\"proc:38:unknown\",e[\"proc:39:fire\"]=\"proc:39:fire\",e[\"proc:39:water\"]=\"proc:39:water\",e[\"proc:39:earth\"]=\"proc:39:earth\",e[\"proc:39:thunder\"]=\"proc:39:thunder\",e[\"proc:39:light\"]=\"proc:39:light\",e[\"proc:39:dark\"]=\"proc:39:dark\",e[\"proc:39:unknown\"]=\"proc:39:unknown\",e[\"proc:40:poison\"]=\"proc:40:poison\",e[\"proc:40:weak\"]=\"proc:40:weak\",e[\"proc:40:sick\"]=\"proc:40:sick\",e[\"proc:40:injury\"]=\"proc:40:injury\",e[\"proc:40:curse\"]=\"proc:40:curse\",e[\"proc:40:paralysis\"]=\"proc:40:paralysis\",e[\"proc:40:atk down\"]=\"proc:40:atk down\",e[\"proc:40:def down\"]=\"proc:40:def down\",e[\"proc:40:rec down\"]=\"proc:40:rec down\",e[\"proc:40:unknown\"]=\"proc:40:unknown\",e[\"proc:42\"]=\"proc:42\",e[\"proc:43\"]=\"proc:43\",e[\"proc:44\"]=\"proc:44\",e[\"proc:45:bb\"]=\"proc:45:bb\",e[\"proc:45:sbb\"]=\"proc:45:sbb\",e[\"proc:45:ubb\"]=\"proc:45:ubb\",e[\"proc:46\"]=\"proc:46\",e[\"proc:47\"]=\"proc:47\",e[\"proc:48:base\"]=\"proc:48:base\",e[\"proc:48:current\"]=\"proc:48:current\",e[\"proc:48:fixed\"]=\"proc:48:fixed\",e[\"proc:48:unknown\"]=\"proc:48:unknown\",e[\"proc:49\"]=\"proc:49\",e[\"proc:50\"]=\"proc:50\",e[\"proc:51:atk down\"]=\"proc:51:atk down\",e[\"proc:51:def down\"]=\"proc:51:def down\",e[\"proc:51:rec down\"]=\"proc:51:rec down\",e[\"proc:52\"]=\"proc:52\",e[\"proc:53:poison\"]=\"proc:53:poison\",e[\"proc:53:weak\"]=\"proc:53:weak\",e[\"proc:53:sick\"]=\"proc:53:sick\",e[\"proc:53:injury\"]=\"proc:53:injury\",e[\"proc:53:curse\"]=\"proc:53:curse\",e[\"proc:53:paralysis\"]=\"proc:53:paralysis\",e[\"proc:54\"]=\"proc:54\",e.UNKNOWN_CONDITIONAL_EFFECT_ID=\"UNKNOWN_CONDITIONAL_EFFECT_ID\",e.UNKNOWN_CONDITIONAL_BUFF_PARAMS=\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\",e[\"buff:12:ko resistance\"]=\"buff:12:ko resistance\"}(G||(G={}));const ne=Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({TURN_DURATION_MODIFICATION:{id:G.TURN_DURATION_MODIFICATION,name:\"Passive Turn Duration Modification\",stat:M.turnDurationModification,stackType:W.Passive,icons:e=>[e&&e.value&&e.value.duration&&e.value.duration<0?j.TURN_DURATION_DOWN:j.TURN_DURATION_UP]},NO_PARAMS_SPECIFIED:{id:G.NO_PARAMS_SPECIFIED,name:\"No Parameters Specified\",stackType:W.Unknown,icons:()=>[j.UNKNOWN]},UNKNOWN_PASSIVE_EFFECT_ID:{id:G.UNKNOWN_PASSIVE_EFFECT_ID,name:\"Unknown Passive Effect\",stackType:W.Unknown,icons:()=>[j.UNKNOWN]},UNKNOWN_PASSIVE_BUFF_PARAMS:{id:G.UNKNOWN_PASSIVE_BUFF_PARAMS,name:\"Unknown Passive Buff Parameters\",stackType:W.Unknown,icons:()=>[j.UNKNOWN]},\"passive:1:hp\":{id:G[\"passive:1:hp\"],name:\"Passive HP Boost\",stat:M.hp,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPDOWN:j.BUFF_HPUP]},\"passive:1:atk\":{id:G[\"passive:1:atk\"],name:\"Passive Attack Boost\",stat:M.atk,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ATKDOWN:j.BUFF_ATKUP]},\"passive:1:def\":{id:G[\"passive:1:def\"],name:\"Passive Defense Boost\",stat:M.def,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_DEFDOWN:j.BUFF_DEFUP]},\"passive:1:rec\":{id:G[\"passive:1:rec\"],name:\"Passive Recovery Boost\",stat:M.rec,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_RECDOWN:j.BUFF_RECUP]},\"passive:1:crit\":{id:G[\"passive:1:crit\"],name:\"Passive Critical Hit Rate Boost\",stat:M.crit,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_CRTRATEDOWN:j.BUFF_CRTRATEUP]}},(()=>{const e=e=>a=>{let t=\"\",s=\"UP\";a&&(a.value&&a.value<0&&(s=\"DOWN\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0])),\"string\"!=typeof t&&(t=\"\");let i=`BUFF_${t.toUpperCase()}${e}${s}`;return t&&i in j||(i=`BUFF_ELEMENT${e}${s}`),[j[i]]};return{\"passive:2:hp\":{id:G[\"passive:2:hp\"],name:\"Passive Elemental HP Boost\",stat:M.hp,stackType:W.Passive,icons:e(\"HP\")},\"passive:2:atk\":{id:G[\"passive:2:atk\"],name:\"Passive Elemental Attack Boost\",stat:M.atk,stackType:W.Passive,icons:e(\"ATK\")},\"passive:2:def\":{id:G[\"passive:2:def\"],name:\"Passive Elemental Defense Boost\",stat:M.def,stackType:W.Passive,icons:e(\"DEF\")},\"passive:2:rec\":{id:G[\"passive:2:rec\"],name:\"Passive Elemental Recovery Boost\",stat:M.rec,stackType:W.Passive,icons:e(\"REC\")},\"passive:2:crit\":{id:G[\"passive:2:crit\"],name:\"Passive Elemental Critical Hit Rate Boost\",stat:M.crit,stackType:W.Passive,icons:e(\"CRTRATE\")}}})()),(()=>{const e=e=>a=>{let t=\"\",s=\"UP\";a&&(a.value&&a.value<0&&(s=\"DOWN\"),a.conditions&&(t=a.conditions.targetUnitType||\"\")),\"string\"==typeof t&&t||(t=\"unknown\");let i=`BUFF_${t.toUpperCase()}${e}${s}`;return t&&i in j||(i=`BUFF_UNITTYPE${e}${s}`),[j[i]]};return{\"passive:3:hp\":{id:G[\"passive:3:hp\"],name:\"Passive Type-Based HP Boost\",stat:M.hp,stackType:W.Passive,icons:e(\"HP\")},\"passive:3:atk\":{id:G[\"passive:3:atk\"],name:\"Passive Type-Based Attack Boost\",stat:M.atk,stackType:W.Passive,icons:e(\"ATK\")},\"passive:3:def\":{id:G[\"passive:3:def\"],name:\"Passive Type-Based Defense Boost\",stat:M.def,stackType:W.Passive,icons:e(\"DEF\")},\"passive:3:rec\":{id:G[\"passive:3:rec\"],name:\"Passive Type-Based Recovery Boost\",stat:M.rec,stackType:W.Passive,icons:e(\"REC\")},\"passive:3:crit\":{id:G[\"passive:3:crit\"],name:\"Passive Type-Based Critical Hit Rate Boost\",stat:M.crit,stackType:W.Passive,icons:e(\"CRTRATE\")}}})()),{\"passive:4:poison\":{id:G[\"passive:4:poison\"],name:\"Passive Poison Resist\",stat:M.poisonResist,stackType:W.Passive,icons:()=>[j.BUFF_POISONBLK]},\"passive:4:weak\":{id:G[\"passive:4:weak\"],name:\"Passive Weak Resist\",stat:M.weakResist,stackType:W.Passive,icons:()=>[j.BUFF_WEAKBLK]},\"passive:4:sick\":{id:G[\"passive:4:sick\"],name:\"Passive Sick Resist\",stat:M.sickResist,stackType:W.Passive,icons:()=>[j.BUFF_SICKBLK]},\"passive:4:injury\":{id:G[\"passive:4:injury\"],name:\"Passive Injury Resist\",stat:M.injuryResist,stackType:W.Passive,icons:()=>[j.BUFF_INJURYBLK]},\"passive:4:curse\":{id:G[\"passive:4:curse\"],name:\"Passive Curse Resist\",stat:M.curseResist,stackType:W.Passive,icons:()=>[j.BUFF_CURSEBLK]},\"passive:4:paralysis\":{id:G[\"passive:4:paralysis\"],name:\"Passive Paralysis Resist\",stat:M.paralysisResist,stackType:W.Passive,icons:()=>[j.BUFF_PARALYSISBLK]},\"passive:5:fire\":{id:G[\"passive:5:fire\"],name:\"Passive Fire Damage Reduction\",stat:M.fireMitigation,stackType:W.Passive,icons:()=>[j.BUFF_FIREDMGDOWN]},\"passive:5:water\":{id:G[\"passive:5:water\"],name:\"Passive Water Damage Reduction\",stat:M.waterMitigation,stackType:W.Passive,icons:()=>[j.BUFF_WATERDMGDOWN]},\"passive:5:earth\":{id:G[\"passive:5:earth\"],name:\"Passive Earth Damage Reduction\",stat:M.earthMitigation,stackType:W.Passive,icons:()=>[j.BUFF_EARTHDMGDOWN]},\"passive:5:thunder\":{id:G[\"passive:5:thunder\"],name:\"Passive Thunder Damage Reduction\",stat:M.thunderMitigation,stackType:W.Passive,icons:()=>[j.BUFF_THUNDERDMGDOWN]},\"passive:5:light\":{id:G[\"passive:5:light\"],name:\"Passive Light Damage Reduction\",stat:M.lightMitigation,stackType:W.Passive,icons:()=>[j.BUFF_LIGHTDMGDOWN]},\"passive:5:dark\":{id:G[\"passive:5:dark\"],name:\"Passive Dark Damage Reduction\",stat:M.darkMitigation,stackType:W.Passive,icons:()=>[j.BUFF_DARKDMGDOWN]},\"passive:5:unknown\":{id:G[\"passive:5:unknown\"],name:\"Passive Elemental Damage Reduction (Unspecified Element)\",stat:M.mitigation,stackType:W.Passive,icons:()=>[j.BUFF_ELEMENTDMGDOWN]},\"passive:8\":{id:G[\"passive:8\"],name:\"Passive Damage Reduction\",stat:M.mitigation,stackType:W.Passive,icons:()=>[j.BUFF_DAMAGECUT]},\"passive:9\":{id:G[\"passive:9\"],name:\"Passive Gradual BC Fill\",stat:M.bbGauge,stackType:W.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:10\":{id:G[\"passive:10\"],name:\"Passive HC Efficacy\",stat:M.hcEfficacy,stackType:W.Passive,icons:()=>[j.BUFF_HCREC]},\"passive:11:atk\":{id:G[\"passive:11:atk\"],name:\"Passive HP-Conditional Attack Boost\",stat:M.atk,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHATKDOWN:j.BUFF_HPTHRESHATKUP]},\"passive:11:def\":{id:G[\"passive:11:def\"],name:\"Passive HP-Conditional Defense Boost\",stat:M.def,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHDEFDOWN:j.BUFF_HPTHRESHDEFUP]},\"passive:11:rec\":{id:G[\"passive:11:rec\"],name:\"Passive HP-Conditional Recovery Boost\",stat:M.rec,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHRECDOWN:j.BUFF_HPTHRESHRECUP]},\"passive:11:crit\":{id:G[\"passive:11:crit\"],name:\"Passive HP-Conditional Critical Hit Rate Boost\",stat:M.crit,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHCRTRATEDOWN:j.BUFF_HPTHRESHCRTRATEUP]},\"passive:12:bc\":{id:G[\"passive:12:bc\"],name:\"Passive HP-Conditional Battle Crystal Drop Rate Boost\",stat:M.bcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHBCDOWN:j.BUFF_HPTHRESHBCDROP]},\"passive:12:hc\":{id:G[\"passive:12:hc\"],name:\"Passive HP-Conditional Heart Crystal Drop Rate Boost\",stat:M.hcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHHCDOWN:j.BUFF_HPTHRESHHCDROP]},\"passive:12:item\":{id:G[\"passive:12:item\"],name:\"Passive HP-Conditional Item Drop Rate Boost\",stat:M.itemDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHITEMDOWN:j.BUFF_HPTHRESHITEMDROP]},\"passive:12:zel\":{id:G[\"passive:12:zel\"],name:\"Passive HP-Conditional Zel Drop Rate Boost\",stat:M.zelDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHZELDOWN:j.BUFF_HPTHRESHZELDROP]},\"passive:12:karma\":{id:G[\"passive:12:karma\"],name:\"Passive HP-Conditional Karma Drop Rate Boost\",stat:M.karmaDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHKARMADOWN:j.BUFF_HPTHRESHKARMADROP]},\"passive:13\":{id:G[\"passive:13\"],name:\"Passive BC Fill on Enemy Defeat\",stat:M.bbGauge,stackType:W.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:14\":{id:G[\"passive:14\"],name:\"Passive Damage Reduction (Chance)\",stat:M.mitigation,stackType:W.Passive,icons:()=>[j.BUFF_DAMAGECUT]},\"passive:15\":{id:G[\"passive:15\"],name:\"Passive Heal on Enemy Defeat\",stat:M.hpRecovery,stackType:W.Passive,icons:()=>[j.BUFF_HPREC]},\"passive:16\":{id:G[\"passive:16\"],name:\"Passive Heal on Battle Win\",stat:M.hpRecovery,stackType:W.Passive,icons:()=>[j.BUFF_HPREC]},\"passive:17\":{id:G[\"passive:17\"],name:\"HP Absorption\",stat:M.hpRecovery,stackType:W.Passive,icons:()=>[j.BUFF_HPABS]},\"passive:19:bc\":{id:G[\"passive:19:bc\"],name:\"Passive Battle Crystal Drop Rate Boost\",stat:M.bcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BCDOWN:j.BUFF_BCDROP]},\"passive:19:hc\":{id:G[\"passive:19:hc\"],name:\"Passive Heart Crystal Drop Rate Boost\",stat:M.hcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HCDOWN:j.BUFF_HCDROP]},\"passive:19:item\":{id:G[\"passive:19:item\"],name:\"Passive Item Drop Rate Boost\",stat:M.itemDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ITEMDOWN:j.BUFF_ITEMDROP]},\"passive:19:zel\":{id:G[\"passive:19:zel\"],name:\"Passive Zel Drop Rate Boost\",stat:M.zelDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ZELDOWN:j.BUFF_ZELDROP]},\"passive:19:karma\":{id:G[\"passive:19:karma\"],name:\"Passive Karma Drop Rate Boost\",stat:M.karmaDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_KARMADOWN:j.BUFF_KARMADROP]},\"passive:20:poison\":{id:G[\"passive:20:poison\"],name:\"Passive Poison Infliction\",stat:M.poisonInflict,stackType:W.Passive,icons:()=>[j.BUFF_ADDPOISON]},\"passive:20:weak\":{id:G[\"passive:20:weak\"],name:\"Passive Weak Infliction\",stat:M.weakInflict,stackType:W.Passive,icons:()=>[j.BUFF_ADDWEAK]},\"passive:20:sick\":{id:G[\"passive:20:sick\"],name:\"Passive Sick Infliction\",stat:M.sickInflict,stackType:W.Passive,icons:()=>[j.BUFF_ADDSICK]},\"passive:20:injury\":{id:G[\"passive:20:injury\"],name:\"Passive Injury Infliction\",stat:M.injuryInflict,stackType:W.Passive,icons:()=>[j.BUFF_ADDINJURY]},\"passive:20:curse\":{id:G[\"passive:20:curse\"],name:\"Passive Curse Infliction\",stat:M.curseInflict,stackType:W.Passive,icons:()=>[j.BUFF_ADDCURSE]},\"passive:20:paralysis\":{id:G[\"passive:20:paralysis\"],name:\"Passive Paralysis Infliction\",stat:M.paralysisInflict,stackType:W.Passive,icons:()=>[j.BUFF_ADDPARA]},\"passive:20:atk down\":{id:G[\"passive:20:atk down\"],name:\"Passive Attack Reduction Infliction\",stat:M.atkDownInflict,stackType:W.Passive,icons:()=>[j.BUFF_ADDATKDOWN]},\"passive:20:def down\":{id:G[\"passive:20:def down\"],name:\"Passive Defense Reduction Infliction\",stat:M.defDownInflict,stackType:W.Passive,icons:()=>[j.BUFF_ADDDEFDOWN]},\"passive:20:rec down\":{id:G[\"passive:20:rec down\"],name:\"Passive Recovery Reduction Infliction\",stat:M.recDownInflict,stackType:W.Passive,icons:()=>[j.BUFF_ADDRECDOWN]},\"passive:20:unknown\":{id:G[\"passive:20:unknown\"],name:\"Passive Unknown Ailment Infliction\",stackType:W.Unknown,icons:()=>[j.BUFF_ADDAILMENT]},\"passive:21:atk\":{id:G[\"passive:21:atk\"],name:\"Attack Boost for X Turns\",stat:M.atk,stackType:W.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ATKDOWN:j.BUFF_ATKUP]},\"passive:21:def\":{id:G[\"passive:21:def\"],name:\"Defense Boost for X Turns\",stat:M.def,stackType:W.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?j.BUFF_DEFDOWN:j.BUFF_DEFUP]},\"passive:21:rec\":{id:G[\"passive:21:rec\"],name:\"Recovery Boost for X Turns\",stat:M.rec,stackType:W.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?j.BUFF_RECDOWN:j.BUFF_RECUP]},\"passive:21:crit\":{id:G[\"passive:21:crit\"],name:\"Critical Hit Rate Boost for X Turns\",stat:M.crit,stackType:W.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?j.BUFF_CRTRATEDOWN:j.BUFF_CRTRATEUP]},\"passive:23\":{id:G[\"passive:23\"],name:\"Passive BC Fill on Battle Win\",stat:M.bbGauge,stackType:W.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:24\":{id:G[\"passive:24\"],name:\"Passive Heal when Attacked\",stat:M.hpRecovery,stackType:W.Passive,icons:()=>[j.BUFF_BEENATK_HPREC]},\"passive:25\":{id:G[\"passive:25\"],name:\"Passive BC Fill when Attacked\",stat:M.bbGauge,stackType:W.Passive,icons:()=>[j.BUFF_DAMAGEBB]},\"passive:26\":{id:G[\"passive:26\"],name:\"Passive Damage Counter (Chance)\",stat:M.damageReflect,stackType:W.Passive,icons:()=>[j.BUFF_COUNTERDAMAGE]},\"passive:27\":{id:G[\"passive:27\"],name:\"Passive Target Chance Modification\",stat:M.targetingModification,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_REPENEATT:j.BUFF_GETENEATT]},\"passive:28\":{id:G[\"passive:28\"],name:\"Passive HP-Conditional Target Chance Modification\",stat:M.targetingModification,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHREPENEATT:j.BUFF_HPTHRESHGETENEATT]},\"passive:29\":{id:G[\"passive:29\"],name:\"Passive Defense Ignore (Chance)\",stat:M.defenseIgnore,stackType:W.Passive,icons:()=>[j.BUFF_IGNOREDEF]},\"passive:30:atk\":{id:G[\"passive:30:atk\"],name:\"Passive BB Gauge Conditional Attack Boost\",stat:M.atk,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BBGAUGETHRESHATKDOWN:j.BUFF_BBGAUGETHRESHATKUP]},\"passive:30:def\":{id:G[\"passive:30:def\"],name:\"Passive BB Gauge Conditional Defense Boost\",stat:M.def,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BBGAUGETHRESHDEFDOWN:j.BUFF_BBGAUGETHRESHDEFUP]},\"passive:30:rec\":{id:G[\"passive:30:rec\"],name:\"Passive BB Gauge Conditional Recovery Boost\",stat:M.rec,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BBGAUGETHRESHRECDOWN:j.BUFF_BBGAUGETHRESHRECUP]},\"passive:30:crit\":{id:G[\"passive:30:crit\"],name:\"Passive BB Gauge Conditional Critical Hit Rate Boost\",stat:M.crit,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BBGAUGETHRESHCRTRATEDOWN:j.BUFF_BBGAUGETHRESHCRTRATEUP]},\"passive:31:damage\":{id:G[\"passive:31:damage\"],name:\"Passive Spark Damage Boost\",stat:M.sparkDamage,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_SPARKDOWN:j.BUFF_SPARKUP]},\"passive:31:bc\":{id:G[\"passive:31:bc\"],name:\"Passive Battle Crystal Drop Rate Boost during Spark\",stat:M.bcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BCDOWN:j.BUFF_SPARKBC]},\"passive:31:hc\":{id:G[\"passive:31:hc\"],name:\"Passive Heart Crystal Drop Rate Boost during Spark\",stat:M.hcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HCDOWN:j.BUFF_SPARKHC]},\"passive:31:item\":{id:G[\"passive:31:item\"],name:\"Passive Item Drop Rate Boost during Spark\",stat:M.itemDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ITEMDOWN:j.BUFF_SPARKITEM]},\"passive:31:zel\":{id:G[\"passive:31:zel\"],name:\"Passive Zel Drop Rate Boost during Spark\",stat:M.zelDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ZELDOWN:j.BUFF_SPARKZEL]},\"passive:31:karma\":{id:G[\"passive:31:karma\"],name:\"Passive Karma Drop Rate Boost during Spark\",stat:M.karmaDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_KARMADOWN:j.BUFF_SPARKKARMA]},\"passive:32\":{id:G[\"passive:32\"],name:\"Passive BC Efficacy\",stat:M.bcEfficacy,stackType:W.Passive,icons:()=>[j.BUFF_BBFILL]},\"passive:33\":{id:G[\"passive:33\"],name:\"Passive Gradual Heal\",stat:M.hpRecovery,stackType:W.Passive,icons:()=>[j.BUFF_HPREC]},\"passive:34\":{id:G[\"passive:34\"],name:\"Passive Critical Damage Boost\",stat:M.criticalDamage,stackType:W.Passive,icons:()=>[j.BUFF_CRTUP]},\"passive:35\":{id:G[\"passive:35\"],name:\"Passive BC Fill when Normal Attacking\",stat:M.bbGauge,stackType:W.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:36\":{id:G[\"passive:36\"],name:\"Passive Extra Action\",stat:M.extraAction,stackType:W.Passive,icons:()=>[j.BUFF_DBLSTRIKE]},\"passive:37\":{id:G[\"passive:37\"],name:\"Passive Hit Count Boost\",stat:M.hitCountModification,stackType:W.Passive,icons:()=>[j.BUFF_HITUP]},\"passive:40:atk\":{id:G[\"passive:40:atk\"],name:\"Passive Converted Attack Boost\",stat:M.atk,stackType:W.Passive,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTATKDOWN:j.BUFF_CONVERTATKUP]},\"passive:40:def\":{id:G[\"passive:40:def\"],name:\"Passive Converted Defense Boost\",stat:M.def,stackType:W.Passive,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTDEFDOWN:j.BUFF_CONVERTDEFUP]},\"passive:40:rec\":{id:G[\"passive:40:rec\"],name:\"Passive Converted Recovery Boost\",stat:M.rec,stackType:W.Passive,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTRECDOWN:j.BUFF_CONVERTRECUP]},\"passive:41:hp\":{id:G[\"passive:41:hp\"],name:\"Passive Element Squad-based HP Boost\",stat:M.hp,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_UNIQUEELEMENTHPDOWN:j.BUFF_UNIQUEELEMENTHPUP]},\"passive:41:atk\":{id:G[\"passive:41:atk\"],name:\"Passive Element Squad-based Attack Boost\",stat:M.atk,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_UNIQUEELEMENTATKDOWN:j.BUFF_UNIQUEELEMENTATKUP]},\"passive:41:def\":{id:G[\"passive:41:def\"],name:\"Passive Element Squad-based Defense Boost\",stat:M.def,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_UNIQUEELEMENTDEFDOWN:j.BUFF_UNIQUEELEMENTDEFUP]},\"passive:41:rec\":{id:G[\"passive:41:rec\"],name:\"Passive Element Squad-based Recovery Boost\",stat:M.rec,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_UNIQUEELEMENTRECDOWN:j.BUFF_UNIQUEELEMENTRECUP]},\"passive:41:crit\":{id:G[\"passive:41:crit\"],name:\"Passive Element Squad-based Critical Hit Rate Boost\",stat:M.crit,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_UNIQUEELEMENTCRTRATEDOWN:j.BUFF_UNIQUEELEMENTCRTRATEUP]}}),(()=>{const e=e=>a=>{let t=\"\",s=\"UP\";a&&(a.value&&a.value<0&&(s=\"DOWN\"),a.conditions&&(t=a.conditions.targetGender||\"\")),\"string\"==typeof t&&t||(t=\"unknown\");let i=`BUFF_${t.toUpperCase()}${e}${s}`;return t&&i in j||(i=`BUFF_GENDER${e}${s}`),[j[i]]};return{\"passive:42:hp\":{id:G[\"passive:42:hp\"],name:\"Passive Gender-Based HP Boost\",stat:M.hp,stackType:W.Passive,icons:e(\"HP\")},\"passive:42:atk\":{id:G[\"passive:42:atk\"],name:\"Passive Gender-Based Attack Boost\",stat:M.atk,stackType:W.Passive,icons:e(\"ATK\")},\"passive:42:def\":{id:G[\"passive:42:def\"],name:\"Passive Gender-Based Defense Boost\",stat:M.def,stackType:W.Passive,icons:e(\"DEF\")},\"passive:42:rec\":{id:G[\"passive:42:rec\"],name:\"Passive Gender-Based Recovery Boost\",stat:M.rec,stackType:W.Passive,icons:e(\"REC\")},\"passive:42:crit\":{id:G[\"passive:42:crit\"],name:\"Passive Gender-Based Critical Hit Rate Boost\",stat:M.crit,stackType:W.Passive,icons:e(\"CRTRATE\")}}})()),{\"passive:43\":{id:G[\"passive:43\"],name:\"Passive Damage Reduction To One (Chance)\",stat:M.reduceDamageToOne,stackType:W.Passive,icons:()=>[j.BUFF_DAMAGECUTTOONE]},\"passive:44:hp\":{id:G[\"passive:44:hp\"],name:\"Passive Flat HP Boost\",stat:M.hp,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPDOWN:j.BUFF_HPUP]},\"passive:44:atk\":{id:G[\"passive:44:atk\"],name:\"Passive Flat Attack Boost\",stat:M.atk,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ATKDOWN:j.BUFF_ATKUP]},\"passive:44:def\":{id:G[\"passive:44:def\"],name:\"Passive Flat Defense Boost\",stat:M.def,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_DEFDOWN:j.BUFF_DEFUP]},\"passive:44:rec\":{id:G[\"passive:44:rec\"],name:\"Passive Flat Recovery Boost\",stat:M.rec,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_RECDOWN:j.BUFF_RECUP]},\"passive:44:crit\":{id:G[\"passive:44:crit\"],name:\"Passive Flat Critical Hit Rate Boost\",stat:M.crit,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_CRTRATEDOWN:j.BUFF_CRTRATEUP]},\"passive:45:base\":{id:G[\"passive:45:base\"],name:\"Passive Base Critical Damage Reduction\",stat:M.criticalDamageMitigation,stackType:W.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:45:buff\":{id:G[\"passive:45:buff\"],name:\"Passive Buffed Critical Damage Reduction\",stat:M.criticalDamageMitigation,stackType:W.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:46:atk\":{id:G[\"passive:46:atk\"],name:\"Passive Attack Boost Relative to HP\",stat:M.atk,stackType:W.Passive,icons:e=>[e&&e.value&&e.value.addedValue&&e.value.addedValue<0?j.BUFF_HPSCALEDATKDOWN:j.BUFF_HPSCALEDATKUP]},\"passive:46:def\":{id:G[\"passive:46:def\"],name:\"Passive Defense Boost Relative to HP\",stat:M.def,stackType:W.Passive,icons:e=>[e&&e.value&&e.value.addedValue&&e.value.addedValue<0?j.BUFF_HPSCALEDDEFDOWN:j.BUFF_HPSCALEDDEFUP]},\"passive:46:rec\":{id:G[\"passive:46:rec\"],name:\"Passive Recovery Boost Relative to HP\",stat:M.rec,stackType:W.Passive,icons:e=>[e&&e.value&&e.value.addedValue&&e.value.addedValue<0?j.BUFF_HPSCALEDRECDOWN:j.BUFF_HPSCALEDRECUP]},\"passive:47\":{id:G[\"passive:47\"],name:\"Passive BC Fill on Spark\",stat:M.bbGauge,stackType:W.Passive,icons:()=>[j.BUFF_SPARKBBUP]},\"passive:48\":{id:G[\"passive:48\"],name:\"Passive BC Cost Reduction\",stat:M.bcCostReduction,stackType:W.Passive,icons:()=>[j.BUFF_BBCOST_REDUCTION]},\"passive:49\":{id:G[\"passive:49\"],name:\"Passive BB Gauge Consumption Reduction\",stat:M.bbGaugeConsumptionReduction,stackType:W.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:50:fire\":{id:G[\"passive:50:fire\"],name:\"Passive Fire Elemental Damage Boost\",stat:M.fireElementalDamage,stackType:W.Passive,icons:()=>[j.BUFF_FIREDMGUP]},\"passive:50:water\":{id:G[\"passive:50:water\"],name:\"Passive Water Elemental Damage Boost\",stat:M.waterElementalDamage,stackType:W.Passive,icons:()=>[j.BUFF_WATERDMGUP]},\"passive:50:earth\":{id:G[\"passive:50:earth\"],name:\"Passive Earth Elemental Damage Boost\",stat:M.earthElementalDamage,stackType:W.Passive,icons:()=>[j.BUFF_EARTHDMGUP]},\"passive:50:thunder\":{id:G[\"passive:50:thunder\"],name:\"Passive Thunder Elemental Damage Boost\",stat:M.thunderElementalDamage,stackType:W.Passive,icons:()=>[j.BUFF_THUNDERDMGUP]},\"passive:50:light\":{id:G[\"passive:50:light\"],name:\"Passive Light Elemental Damage Boost\",stat:M.lightElementalDamage,stackType:W.Passive,icons:()=>[j.BUFF_LIGHTDMGUP]},\"passive:50:dark\":{id:G[\"passive:50:dark\"],name:\"Passive Dark Elemental Damage Boost\",stat:M.darkElementalDamage,stackType:W.Passive,icons:()=>[j.BUFF_DARKDMGUP]},\"passive:50:unknown\":{id:G[\"passive:50:unknown\"],name:\"Passive Elemental Damage Boost (Unspecified Element)\",stackType:W.Passive,icons:()=>[j.BUFF_ELEMENTDMGUP]},\"passive:53:critical-damage-base\":{id:G[\"passive:53:critical-damage-base\"],name:\"Passive Base Critical Damage Reduction\",stat:M.criticalDamageMitigation,stackType:W.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:53:critical-damage-buff\":{id:G[\"passive:53:critical-damage-buff\"],name:\"Passive Buffed Critical Damage Reduction\",stat:M.criticalDamageMitigation,stackType:W.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:53:element-damage-base\":{id:G[\"passive:53:element-damage-base\"],name:\"Passive Base Elemental Weakness Damage Reduction\",stat:M.elementalWeaknessDamageMitigation,stackType:W.Passive,icons:()=>[j.BUFF_ELEMENTDOWN]},\"passive:53:element-damage-buff\":{id:G[\"passive:53:element-damage-buff\"],name:\"Passive Buffed Elemental Weakness Damage Reduction\",stat:M.elementalWeaknessDamageMitigation,stackType:W.Passive,icons:()=>[j.BUFF_ELEMENTDOWN]},\"passive:53:critical-rate-base\":{id:G[\"passive:53:critical-rate-base\"],name:\"Passive Base Critical Hit Rate Reduction\",stat:M.crit,stackType:W.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:53:critical-rate-buff\":{id:G[\"passive:53:critical-rate-buff\"],name:\"Passive Buffed Critical Hit Rate Reduction\",stat:M.crit,stackType:W.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:55:hp condition\":{id:G[\"passive:55:hp condition\"],name:\"Passive Conditional Effect based on HP Threshold\",stat:M.crit,stackType:W.Passive,icons:()=>[j.BUFF_CRTDOWN]},UNKNOWN_PROC_EFFECT_ID:{id:G.UNKNOWN_PROC_EFFECT_ID,name:\"Unknown Proc Effect\",stackType:W.Unknown,icons:()=>[j.UNKNOWN]},UNKNOWN_PROC_BUFF_PARAMS:{id:G.UNKNOWN_PROC_BUFF_PARAMS,name:\"Unknown Proc Buff Parameters\",stackType:W.Unknown,icons:()=>[j.UNKNOWN]},\"proc:1\":{id:G[\"proc:1\"],name:\"Regular Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST:j.ATK_AOE]},\"proc:2\":{id:G[\"proc:2\"],name:\"Burst Heal\",stat:M.hpRecovery,stackType:W.Burst,icons:()=>[j.BUFF_HPREC]},\"proc:3\":{id:G[\"proc:3\"],name:\"Active Gradual Heal\",stat:M.hpRecovery,stackType:W.Active,icons:()=>[j.BUFF_HPREC]},\"proc:4:flat\":{id:G[\"proc:4:flat\"],name:\"Burst BC Fill (Flat Amount)\",stat:M.bbGauge,stackType:W.Burst,icons:()=>[j.BUFF_BBREC]},\"proc:4:percent\":{id:G[\"proc:4:percent\"],name:\"Burst BC Fill (Percentage)\",stat:M.bbGauge,stackType:W.Burst,icons:()=>[j.BUFF_BBREC]}}),(()=>{const e=e=>a=>{let t=\"\",s=!1,i=\"UP\";a&&(a.value&&a.value<0&&(i=\"DOWN\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0],s=!0)),\"string\"!=typeof t&&(t=\"\");let n=`BUFF_${t.toUpperCase()}${e}${i}`;return t&&n in j||(n=`BUFF_${s?\"ELEMENT\":\"\"}${e}${i}`),[j[n]]};return{\"proc:5:atk\":{id:G[\"proc:5:atk\"],name:\"Active Regular/Elemental Attack Boost\",stat:M.atk,stackType:W.Active,icons:e(\"ATK\")},\"proc:5:def\":{id:G[\"proc:5:def\"],name:\"Active Regular/Elemental Defense Boost\",stat:M.def,stackType:W.Active,icons:e(\"DEF\")},\"proc:5:rec\":{id:G[\"proc:5:rec\"],name:\"Active Regular/Elemental Recovery Boost\",stat:M.rec,stackType:W.Active,icons:e(\"REC\")},\"proc:5:crit\":{id:G[\"proc:5:crit\"],name:\"Active Regular/Elemental Critical Hit Rate Boost\",stat:M.crit,stackType:W.Active,icons:e(\"CRTRATE\")}}})()),{\"proc:6:bc\":{id:G[\"proc:6:bc\"],name:\"Active Battle Crystal Drop Rate Boost\",stat:M.bcDropRate,stackType:W.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BCDOWN:j.BUFF_BCDROP]},\"proc:6:hc\":{id:G[\"proc:6:hc\"],name:\"Active Heart Crystal Drop Rate Boost\",stat:M.hcDropRate,stackType:W.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HCDOWN:j.BUFF_HCDROP]},\"proc:6:item\":{id:G[\"proc:6:item\"],name:\"Active Item Drop Rate Boost\",stat:M.itemDropRate,stackType:W.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ITEMDOWN:j.BUFF_ITEMDROP]},\"proc:7\":{id:G[\"proc:7\"],name:\"Guaranteed KO Resistance\",stat:M.koResistance,stackType:W.Singleton,icons:()=>[j.BUFF_KOBLK]},\"proc:8:flat\":{id:G[\"proc:8:flat\"],name:\"Max HP Boost (Flat Amount)\",stat:M.hp,stackType:W.Singleton,icons:()=>[j.BUFF_HPUP]},\"proc:8:percent\":{id:G[\"proc:8:percent\"],name:\"Max HP Boost (Percentage)\",stat:M.hp,stackType:W.Singleton,icons:()=>[j.BUFF_HPUP]}}),(()=>{const e=e=>a=>{let t=\"\",s=!1,i=\"DOWN\";a&&(a.value&&a.value>0&&(i=\"UP\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0],s=!0)),\"string\"!=typeof t&&(t=\"\");let n=`BUFF_${t.toUpperCase()}${e}${i}`;return t&&n in j||(n=`BUFF_${s?\"ELEMENT\":\"\"}${e}${i}`),[j[n]]};return{\"proc:9:atk\":{id:G[\"proc:9:atk\"],name:\"Active Regular/Elemental Attack Reduction\",stat:M.atk,stackType:W.Active,icons:e(\"ATK\")},\"proc:9:def\":{id:G[\"proc:9:def\"],name:\"Active Regular/Elemental Defense Reduction\",stat:M.def,stackType:W.Active,icons:e(\"DEF\")},\"proc:9:rec\":{id:G[\"proc:9:rec\"],name:\"Active Regular/Elemental Recovery Reduction\",stat:M.rec,stackType:W.Active,icons:e(\"REC\")},\"proc:9:unknown\":{id:G[\"proc:9:unknown\"],name:\"Active Regular/Elemental Unknown Stat Reduction\",stackType:W.Active,icons:()=>[j.UNKNOWN]}}})()),{\"proc:10:poison\":{id:G[\"proc:10:poison\"],name:\"Poison Cleanse\",stat:M.poisonResist,stackType:W.Burst,icons:()=>[j.BUFF_POISONBLK]},\"proc:10:weak\":{id:G[\"proc:10:weak\"],name:\"Weak Cleanse\",stat:M.weakResist,stackType:W.Burst,icons:()=>[j.BUFF_WEAKBLK]},\"proc:10:sick\":{id:G[\"proc:10:sick\"],name:\"Sick Cleanse\",stat:M.sickResist,stackType:W.Burst,icons:()=>[j.BUFF_SICKBLK]},\"proc:10:injury\":{id:G[\"proc:10:injury\"],name:\"Injury Cleanse\",stat:M.injuryResist,stackType:W.Burst,icons:()=>[j.BUFF_INJURYBLK]},\"proc:10:curse\":{id:G[\"proc:10:curse\"],name:\"Curse Cleanse\",stat:M.curseResist,stackType:W.Burst,icons:()=>[j.BUFF_CURSEBLK]},\"proc:10:paralysis\":{id:G[\"proc:10:paralysis\"],name:\"Paralysis Cleanse\",stat:M.paralysisResist,stackType:W.Burst,icons:()=>[j.BUFF_PARALYSISBLK]},\"proc:10:atk down\":{id:G[\"proc:10:atk down\"],name:\"Attack Reduction Cleanse\",stat:M.atkDownResist,stackType:W.Burst,icons:()=>[j.BUFF_ATKDOWNBLK]},\"proc:10:def down\":{id:G[\"proc:10:def down\"],name:\"Defense Reduction Cleanse\",stat:M.defDownResist,stackType:W.Burst,icons:()=>[j.BUFF_DEFDOWNBLK]},\"proc:10:rec down\":{id:G[\"proc:10:rec down\"],name:\"Recovery Reduction Cleanse\",stat:M.recDownResist,stackType:W.Burst,icons:()=>[j.BUFF_RECDOWNBLK]},\"proc:10:unknown\":{id:G[\"proc:10:unknown\"],name:\"Unknown Ailment Cleanse\",stackType:W.Unknown,icons:()=>[j.BUFF_AILMENTBLK]},\"proc:11:poison\":{id:G[\"proc:11:poison\"],name:\"Poison Infliction\",stat:M.poisonInflict,stackType:W.Burst,icons:()=>[j.DEBUFF_POISON]},\"proc:11:weak\":{id:G[\"proc:11:weak\"],name:\"Weak Infliction\",stat:M.weakInflict,stackType:W.Burst,icons:()=>[j.DEBUFF_WEAK]},\"proc:11:sick\":{id:G[\"proc:11:sick\"],name:\"Sick Infliction\",stat:M.sickInflict,stackType:W.Burst,icons:()=>[j.DEBUFF_SICK]},\"proc:11:injury\":{id:G[\"proc:11:injury\"],name:\"Injury Infliction\",stat:M.injuryInflict,stackType:W.Burst,icons:()=>[j.DEBUFF_INJURY]},\"proc:11:curse\":{id:G[\"proc:11:curse\"],name:\"Curse Infliction\",stat:M.curseInflict,stackType:W.Burst,icons:()=>[j.DEBUFF_CURSE]},\"proc:11:paralysis\":{id:G[\"proc:11:paralysis\"],name:\"Paralysis Infliction\",stat:M.paralysisInflict,stackType:W.Burst,icons:()=>[j.DEBUFF_PARALYSIS]},\"proc:11:atk down\":{id:G[\"proc:11:atk down\"],name:\"Attack Reduction Infliction\",stat:M.atkDownInflict,stackType:W.Burst,icons:()=>[j.BUFF_ATKDOWN]},\"proc:11:def down\":{id:G[\"proc:11:def down\"],name:\"Defense Reduction Infliction\",stat:M.defDownInflict,stackType:W.Burst,icons:()=>[j.BUFF_DEFDOWN]},\"proc:11:rec down\":{id:G[\"proc:11:rec down\"],name:\"Recovery Reduction Infliction\",stat:M.recDownInflict,stackType:W.Burst,icons:()=>[j.BUFF_RECDOWN]},\"proc:11:unknown\":{id:G[\"proc:11:unknown\"],name:\"Unknown Ailment Infliction\",stackType:W.Unknown,icons:()=>[j.DEBUFF_AILMENT]},\"proc:12\":{id:G[\"proc:12\"],name:\"Instant Revive (Guaranteed)\",stackType:W.Burst,icons:()=>[j.BUFF_KOBLK]},\"proc:13\":{id:G[\"proc:13\"],name:\"Random Target Damage\",stackType:W.Attack,icons:()=>[j.ATK_RT]},\"proc:14\":{id:G[\"proc:14\"],name:\"Lifesteal Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST_HPREC:j.ATK_AOE_HPREC]},\"proc:16:fire\":{id:G[\"proc:16:fire\"],name:\"Active Fire Damage Reduction\",stat:M.fireMitigation,stackType:W.Active,icons:()=>[j.BUFF_FIREDMGDOWN]},\"proc:16:water\":{id:G[\"proc:16:water\"],name:\"Active Water Damage Reduction\",stat:M.waterMitigation,stackType:W.Active,icons:()=>[j.BUFF_WATERDMGDOWN]},\"proc:16:earth\":{id:G[\"proc:16:earth\"],name:\"Active Earth Damage Reduction\",stat:M.earthMitigation,stackType:W.Active,icons:()=>[j.BUFF_EARTHDMGDOWN]},\"proc:16:thunder\":{id:G[\"proc:16:thunder\"],name:\"Active Thunder Damage Reduction\",stat:M.thunderMitigation,stackType:W.Active,icons:()=>[j.BUFF_THUNDERDMGDOWN]},\"proc:16:light\":{id:G[\"proc:16:light\"],name:\"Active Light Damage Reduction\",stat:M.lightMitigation,stackType:W.Active,icons:()=>[j.BUFF_LIGHTDMGDOWN]},\"proc:16:dark\":{id:G[\"proc:16:dark\"],name:\"Active Dark Damage Reduction\",stat:M.darkMitigation,stackType:W.Active,icons:()=>[j.BUFF_DARKDMGDOWN]},\"proc:16:all\":{id:G[\"proc:16:all\"],name:\"Active Elemental Damage Reduction (All Elements)\",stat:M.mitigation,stackType:W.Active,icons:()=>[j.BUFF_ELEMENTDMGDOWN]},\"proc:16:unknown\":{id:G[\"proc:16:unknown\"],name:\"Active Elemental Damage Reduction (Unspecified Element)\",stat:M.mitigation,stackType:W.Active,icons:()=>[j.BUFF_ELEMENTDMGDOWN]},\"proc:17:poison\":{id:G[\"proc:17:poison\"],name:\"Active Poison Resist\",stat:M.poisonResist,stackType:W.Active,icons:()=>[j.BUFF_POISONBLK]},\"proc:17:weak\":{id:G[\"proc:17:weak\"],name:\"Active Weak Resist\",stat:M.weakResist,stackType:W.Active,icons:()=>[j.BUFF_WEAKBLK]},\"proc:17:sick\":{id:G[\"proc:17:sick\"],name:\"Active Sick Resist\",stat:M.sickResist,stackType:W.Active,icons:()=>[j.BUFF_SICKBLK]},\"proc:17:injury\":{id:G[\"proc:17:injury\"],name:\"Active Injury Resist\",stat:M.injuryResist,stackType:W.Active,icons:()=>[j.BUFF_INJURYBLK]},\"proc:17:curse\":{id:G[\"proc:17:curse\"],name:\"Active Curse Resist\",stat:M.curseResist,stackType:W.Active,icons:()=>[j.BUFF_CURSEBLK]},\"proc:17:paralysis\":{id:G[\"proc:17:paralysis\"],name:\"Active Paralysis Resist\",stat:M.paralysisResist,stackType:W.Active,icons:()=>[j.BUFF_PARALYSISBLK]},\"proc:18\":{id:G[\"proc:18\"],name:\"Active Damage Reduction\",stat:M.mitigation,stackType:W.Active,icons:()=>[j.BUFF_DAMAGECUT]},\"proc:19\":{id:G[\"proc:19\"],name:\"Active Gradual BC Fill\",stat:M.bbGauge,stackType:W.Active,icons:()=>[j.BUFF_BBREC]},\"proc:20\":{id:G[\"proc:20\"],name:\"Active BC Fill when attacked\",stat:M.bbGauge,stackType:W.Active,icons:()=>[j.BUFF_DAMAGEBB]},\"proc:22\":{id:G[\"proc:22\"],name:\"Active Defense Ignore\",stat:M.defenseIgnore,stackType:W.Active,icons:()=>[j.BUFF_IGNOREDEF]},\"proc:23\":{id:G[\"proc:23\"],name:\"Active Spark Damage Boost\",stat:M.sparkDamage,stackType:W.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_SPARKDOWN:j.BUFF_SPARKUP]},\"proc:24:atk\":{id:G[\"proc:24:atk\"],name:\"Active Converted Attack Boost\",stat:M.atk,stackType:W.Active,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTATKDOWN:j.BUFF_CONVERTATKUP]},\"proc:24:def\":{id:G[\"proc:24:def\"],name:\"Active Converted Defense Boost\",stat:M.def,stackType:W.Active,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTDEFDOWN:j.BUFF_CONVERTDEFUP]},\"proc:24:rec\":{id:G[\"proc:24:rec\"],name:\"Active Converted Recovery Boost\",stat:M.rec,stackType:W.Active,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTRECDOWN:j.BUFF_CONVERTRECUP]},\"proc:26\":{id:G[\"proc:26\"],name:\"Active Hit Count Boost\",stat:M.hitCountModification,stackType:W.Active,icons:()=>[j.BUFF_HITUP]},\"proc:27\":{id:G[\"proc:27\"],name:\"Proportional Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST_PROPORTIONAL:j.ATK_AOE_PROPORTIONAL]},\"proc:28\":{id:G[\"proc:28\"],name:\"Fixed Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST_FIXED:j.ATK_AOE_FIXED]},\"proc:29\":{id:G[\"proc:29\"],name:\"Multi-Element Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST_MULTIELEMENT:j.ATK_AOE_MULTIELEMENT]},\"proc:30:fire\":{id:G[\"proc:30:fire\"],name:\"Active Added Element to Attack (Fire)\",stat:M.elementModification,stackType:W.Active,icons:()=>[j.BUFF_ADDFIRE]},\"proc:30:water\":{id:G[\"proc:30:water\"],name:\"Active Added Element to Attack (Water)\",stat:M.elementModification,stackType:W.Active,icons:()=>[j.BUFF_ADDWATER]},\"proc:30:earth\":{id:G[\"proc:30:earth\"],name:\"Active Added Element to Attack (Earth)\",stat:M.elementModification,stackType:W.Active,icons:()=>[j.BUFF_ADDEARTH]},\"proc:30:thunder\":{id:G[\"proc:30:thunder\"],name:\"Active Added Element to Attack (Thunder)\",stat:M.elementModification,stackType:W.Active,icons:()=>[j.BUFF_ADDTHUNDER]},\"proc:30:light\":{id:G[\"proc:30:light\"],name:\"Active Added Element to Attack (Light)\",stat:M.elementModification,stackType:W.Active,icons:()=>[j.BUFF_ADDLIGHT]},\"proc:30:dark\":{id:G[\"proc:30:dark\"],name:\"Active Added Element to Attack (Dark)\",stat:M.elementModification,stackType:W.Active,icons:()=>[j.BUFF_ADDDARK]},\"proc:30:unknown\":{id:G[\"proc:30:unknown\"],name:\"Active Added Element to Attack (Unspecified Element)\",stat:M.elementModification,stackType:W.Active,icons:()=>[j.BUFF_ADDELEMENT]},\"proc:31:flat\":{id:G[\"proc:31:flat\"],name:\"Burst BC Fill (Flat Amount)\",stat:M.bbGauge,stackType:W.Burst,icons:()=>[j.BUFF_BBREC]},\"proc:31:percent\":{id:G[\"proc:31:percent\"],name:\"Burst BC Fill (Percentage)\",stat:M.bbGauge,stackType:W.Burst,icons:()=>[j.BUFF_BBREC]},\"proc:32:fire\":{id:G[\"proc:32:fire\"],name:\"Element Shift (Fire)\",stat:M.elementModification,stackType:W.Singleton,icons:()=>[j.BUFF_SHIFTFIRE]},\"proc:32:water\":{id:G[\"proc:32:water\"],name:\"Element Shift (Water)\",stat:M.elementModification,stackType:W.Singleton,icons:()=>[j.BUFF_SHIFTWATER]},\"proc:32:earth\":{id:G[\"proc:32:earth\"],name:\"Element Shift (Earth)\",stat:M.elementModification,stackType:W.Singleton,icons:()=>[j.BUFF_SHIFTEARTH]},\"proc:32:thunder\":{id:G[\"proc:32:thunder\"],name:\"Element Shift (Thunder)\",stat:M.elementModification,stackType:W.Singleton,icons:()=>[j.BUFF_SHIFTTHUNDER]},\"proc:32:light\":{id:G[\"proc:32:light\"],name:\"Element Shift (Light)\",stat:M.elementModification,stackType:W.Singleton,icons:()=>[j.BUFF_SHIFTLIGHT]},\"proc:32:dark\":{id:G[\"proc:32:dark\"],name:\"Element Shift (Dark)\",stat:M.elementModification,stackType:W.Singleton,icons:()=>[j.BUFF_SHIFTDARK]},\"proc:32:unknown\":{id:G[\"proc:32:unknown\"],name:\"Element Shift (Unspecified Element)\",stat:M.elementModification,stackType:W.Singleton,icons:()=>[j.BUFF_SHIFTELEMENT]},\"proc:33\":{id:G[\"proc:33\"],name:\"Buff Removal\",stat:M.buffStabilityModification,stackType:W.Burst,icons:()=>[j.BUFF_REMOVEBUFF]},\"proc:34:flat\":{id:G[\"proc:34:flat\"],name:\"Burst BB Gauge Drain (Flat Amount)\",stat:M.bbGauge,stackType:W.Burst,icons:()=>[j.BUFF_BBFILLDOWN]},\"proc:34:percent\":{id:G[\"proc:34:percent\"],name:\"Burst BB Gauge Drain (Percentage)\",stat:M.bbGauge,stackType:W.Burst,icons:()=>[j.BUFF_BBFILLDOWN]},\"proc:36\":{id:G[\"proc:36\"],name:\"Active Leader Skill Lock\",stat:M.buffStabilityModification,stackType:W.Active,icons:()=>[j.BUFF_DISABLELS]},\"proc:37\":{id:G[\"proc:37\"],name:\"Summon Unit\",stackType:W.Burst,icons:()=>[j.BUFF_SUMMONUNIT]},\"proc:38:poison\":{id:G[\"proc:38:poison\"],name:\"Poison Cleanse\",stat:M.poisonResist,stackType:W.Burst,icons:()=>[j.BUFF_POISONBLK]},\"proc:38:weak\":{id:G[\"proc:38:weak\"],name:\"Weak Cleanse\",stat:M.weakResist,stackType:W.Burst,icons:()=>[j.BUFF_WEAKBLK]},\"proc:38:sick\":{id:G[\"proc:38:sick\"],name:\"Sick Cleanse\",stat:M.sickResist,stackType:W.Burst,icons:()=>[j.BUFF_SICKBLK]},\"proc:38:injury\":{id:G[\"proc:38:injury\"],name:\"Injury Cleanse\",stat:M.injuryResist,stackType:W.Burst,icons:()=>[j.BUFF_INJURYBLK]},\"proc:38:curse\":{id:G[\"proc:38:curse\"],name:\"Curse Cleanse\",stat:M.curseResist,stackType:W.Burst,icons:()=>[j.BUFF_CURSEBLK]},\"proc:38:paralysis\":{id:G[\"proc:38:paralysis\"],name:\"Paralysis Cleanse\",stat:M.paralysisResist,stackType:W.Burst,icons:()=>[j.BUFF_PARALYSISBLK]},\"proc:38:atk down\":{id:G[\"proc:38:atk down\"],name:\"Attack Reduction Cleanse\",stat:M.atkDownResist,stackType:W.Burst,icons:()=>[j.BUFF_ATKDOWNBLK]},\"proc:38:def down\":{id:G[\"proc:38:def down\"],name:\"Defense Reduction Cleanse\",stat:M.defDownResist,stackType:W.Burst,icons:()=>[j.BUFF_DEFDOWNBLK]},\"proc:38:rec down\":{id:G[\"proc:38:rec down\"],name:\"Recovery Reduction Cleanse\",stat:M.recDownResist,stackType:W.Burst,icons:()=>[j.BUFF_RECDOWNBLK]},\"proc:38:unknown\":{id:G[\"proc:38:unknown\"],name:\"Unknown Ailment Cleanse\",stackType:W.Unknown,icons:()=>[j.BUFF_AILMENTBLK]},\"proc:39:fire\":{id:G[\"proc:39:fire\"],name:\"Active Fire Damage Reduction\",stat:M.fireMitigation,stackType:W.Active,icons:()=>[j.BUFF_FIREDMGDOWN]},\"proc:39:water\":{id:G[\"proc:39:water\"],name:\"Active Water Damage Reduction\",stat:M.waterMitigation,stackType:W.Active,icons:()=>[j.BUFF_WATERDMGDOWN]},\"proc:39:earth\":{id:G[\"proc:39:earth\"],name:\"Active Earth Damage Reduction\",stat:M.earthMitigation,stackType:W.Active,icons:()=>[j.BUFF_EARTHDMGDOWN]},\"proc:39:thunder\":{id:G[\"proc:39:thunder\"],name:\"Active Thunder Damage Reduction\",stat:M.thunderMitigation,stackType:W.Active,icons:()=>[j.BUFF_THUNDERDMGDOWN]},\"proc:39:light\":{id:G[\"proc:39:light\"],name:\"Active Light Damage Reduction\",stat:M.lightMitigation,stackType:W.Active,icons:()=>[j.BUFF_LIGHTDMGDOWN]},\"proc:39:dark\":{id:G[\"proc:39:dark\"],name:\"Active Dark Damage Reduction\",stat:M.darkMitigation,stackType:W.Active,icons:()=>[j.BUFF_DARKDMGDOWN]},\"proc:39:unknown\":{id:G[\"proc:39:unknown\"],name:\"Active Elemental Damage Reduction (Unspecified Element)\",stat:M.mitigation,stackType:W.Active,icons:()=>[j.BUFF_ELEMENTDMGDOWN]},\"proc:40:poison\":{id:G[\"proc:40:poison\"],name:\"Active Poison Infliction Added to Attack\",stat:M.poisonInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDPOISON]},\"proc:40:weak\":{id:G[\"proc:40:weak\"],name:\"Active Weak Infliction Added to Attack\",stat:M.weakInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDWEAK]},\"proc:40:sick\":{id:G[\"proc:40:sick\"],name:\"Active Sick Infliction Added to Attack\",stat:M.sickInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDSICK]},\"proc:40:injury\":{id:G[\"proc:40:injury\"],name:\"Active Injury Infliction Added to Attack\",stat:M.injuryInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDINJURY]},\"proc:40:curse\":{id:G[\"proc:40:curse\"],name:\"Active Curse Infliction Added to Attack\",stat:M.curseInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDCURSE]},\"proc:40:paralysis\":{id:G[\"proc:40:paralysis\"],name:\"Active Paralysis Infliction Added to Attack\",stat:M.paralysisInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDPARA]},\"proc:40:atk down\":{id:G[\"proc:40:atk down\"],name:\"Active Attack Reduction Infliction Added to Attack\",stat:M.atkDownInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDATKDOWN]},\"proc:40:def down\":{id:G[\"proc:40:def down\"],name:\"Active Defense Reduction Infliction Added to Attack\",stat:M.defDownInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDDEFDOWN]},\"proc:40:rec down\":{id:G[\"proc:40:rec down\"],name:\"Active Recovery Reduction Infliction Added to Attack\",stat:M.recDownInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDRECDOWN]},\"proc:40:unknown\":{id:G[\"proc:40:unknown\"],name:\"Active Unknown Ailment Infliction Added to Attack\",stackType:W.Unknown,icons:()=>[j.BUFF_ADDAILMENT]},\"proc:42\":{id:G[\"proc:42\"],name:\"Sacrificial Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST_SACRIFICIAL:j.ATK_AOE_SACRIFICIAL]},\"proc:43\":{id:G[\"proc:43\"],name:\"Burst OD Gauge Fill (Percentage)\",stat:M.odGauge,stackType:W.Burst,icons:()=>[j.BUFF_OVERDRIVEUP]},\"proc:44\":{id:G[\"proc:44\"],name:\"Active Damage over Time\",stat:M.damageOverTime,stackType:W.Active,icons:()=>[j.BUFF_TURNDMG]},\"proc:45:bb\":{id:G[\"proc:45:bb\"],name:\"Active BB ATK Boost\",stat:M.bbAtk,stackType:W.Active,icons:()=>[j.BUFF_BBATKUP]},\"proc:45:sbb\":{id:G[\"proc:45:sbb\"],name:\"Active SBB ATK Boost\",stat:M.bbAtk,stackType:W.Active,icons:()=>[j.BUFF_SBBATKUP]},\"proc:45:ubb\":{id:G[\"proc:45:ubb\"],name:\"Active UBB ATK Boost\",stat:M.bbAtk,stackType:W.Active,icons:()=>[j.BUFF_UBBATKUP]},\"proc:46\":{id:G[\"proc:46\"],name:\"Non-Lethal Proportional Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST_PROPORTIONAL:j.ATK_AOE_PROPORTIONAL]},\"proc:47\":{id:G[\"proc:47\"],name:\"HP Scaled Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST_HPSCALED:j.ATK_AOE_HPSCALED]},\"proc:48:base\":{id:G[\"proc:48:base\"],name:\"Piercing Proportional Damage (Base HP)\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST_PIERCING_PROPORTIONAL:j.ATK_AOE_PIERCING_PROPORTIONAL]},\"proc:48:current\":{id:G[\"proc:48:current\"],name:\"Piercing Proportional Damage (Current HP)\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST_PIERCING_PROPORTIONAL:j.ATK_AOE_PIERCING_PROPORTIONAL]},\"proc:48:fixed\":{id:G[\"proc:48:fixed\"],name:\"Piercing Fixed Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST_PIERCING_FIXED:j.ATK_AOE_PIERCING_FIXED]},\"proc:48:unknown\":{id:G[\"proc:48:unknown\"],name:\"Unknown Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===D.Single?j.ATK_ST:j.ATK_AOE]},\"proc:49\":{id:G[\"proc:49\"],name:\"Instant Death (Chance)\",stackType:W.Burst,icons:()=>[j.BUFF_KO]},\"proc:50\":{id:G[\"proc:50\"],name:\"Active Damage Reflect (Chance)\",stat:M.damageReflect,stackType:W.Active,icons:()=>[j.BUFF_COUNTERDAMAGE]},\"proc:51:atk down\":{id:G[\"proc:51:atk down\"],name:\"Active Attack Reduction Infliction Added to Attack\",stat:M.atkDownInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDATKDOWN]},\"proc:51:def down\":{id:G[\"proc:51:def down\"],name:\"Active Defense Reduction Infliction Added to Attack\",stat:M.defDownInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDDEFDOWN]},\"proc:51:rec down\":{id:G[\"proc:51:rec down\"],name:\"Active Recovery Reduction Infliction Added to Attack\",stat:M.recDownInflict,stackType:W.Active,icons:()=>[j.BUFF_ADDRECDOWN]},\"proc:52\":{id:G[\"proc:52\"],name:\"Active BC Efficacy\",stat:M.bcEfficacy,stackType:W.Active,icons:()=>[j.BUFF_BBFILL]},\"proc:53:poison\":{id:G[\"proc:53:poison\"],name:\"Active Poison Counter\",stat:M.poisonCounter,stackType:W.Active,icons:()=>[j.BUFF_POISONCOUNTER]},\"proc:53:weak\":{id:G[\"proc:53:weak\"],name:\"Active Weak Counter\",stat:M.weakCounter,stackType:W.Active,icons:()=>[j.BUFF_WEAKCOUNTER]},\"proc:53:sick\":{id:G[\"proc:53:sick\"],name:\"Active Sick Counter\",stat:M.sickCounter,stackType:W.Active,icons:()=>[j.BUFF_SICKCOUNTER]},\"proc:53:injury\":{id:G[\"proc:53:injury\"],name:\"Active Injury Counter\",stat:M.injuryCounter,stackType:W.Active,icons:()=>[j.BUFF_INJCONTER]},\"proc:53:curse\":{id:G[\"proc:53:curse\"],name:\"Active Curse Counter\",stat:M.curseCounter,stackType:W.Active,icons:()=>[j.BUFF_CURSECOUNTER]},\"proc:53:paralysis\":{id:G[\"proc:53:paralysis\"],name:\"Active Paralysis Counter\",stat:M.paralysisCounter,stackType:W.Active,icons:()=>[j.BUFF_PARALYCOUNTER]},\"proc:54\":{id:G[\"proc:54\"],name:\"Active Critical Damage Boost\",stat:M.criticalDamage,stackType:W.Active,icons:()=>[j.BUFF_CRTUP]},UNKNOWN_CONDITIONAL_EFFECT_ID:{id:G.UNKNOWN_CONDITIONAL_EFFECT_ID,name:\"Unknown Conditional Effect\",stackType:W.Unknown,icons:()=>[j.UNKNOWN]},UNKNOWN_CONDITIONAL_BUFF_PARAMS:{id:G.UNKNOWN_CONDITIONAL_BUFF_PARAMS,name:\"Unknown Conditional Buff Parameters\",stackType:W.Unknown,icons:()=>[j.UNKNOWN]},\"buff:12:ko resistance\":{id:G[\"buff:12:ko resistance\"],name:\"Guaranteed KO Resistance\",stat:M.koResistance,stackType:W.Singleton,icons:()=>[j.BUFF_KOBLK]}}));var ce=Object.freeze({__proto__:null,convertProcEffectToBuffs:function(e,a){if(!e||\"object\"!=typeof e)throw new TypeError(\"effect parameter should be an object\");if(!a||\"object\"!=typeof a)throw new TypeError(\"context parameter should be an object\");const i=H(e)&&t(e),n=i&&ae(a.reloadMapping).get(i);return\"function\"==typeof n?n(e,a):function(e,a){const i=H(e)&&t(e)||s.Unknown;return[{id:G.UNKNOWN_PROC_EFFECT_ID,originalId:i,effectDelay:e[\"effect delay time(ms)/frame\"],targetType:e[\"target type\"],targetArea:e[\"target area\"],sources:V(a)}]}(e,a)},convertPassiveEffectToBuffs:function(e,a){if(!e||\"object\"!=typeof e)throw new TypeError(\"effect parameter should be an object\");if(!a||\"object\"!=typeof a)throw new TypeError(\"context parameter should be an object\");const s=K(e)&&t(e),n=s&&ie(a.reloadMapping).get(s);return\"function\"==typeof n?n(e,a):function(e,a){const s=K(e)&&t(e)||i.Unknown;return[{id:G.UNKNOWN_PASSIVE_EFFECT_ID,originalId:s,sources:V(a)}]}(e,a)},convertConditionalEffectToBuffs:se,get BuffSource(){return w},get BuffStackType(){return W},BUFF_METADATA:ne,getMetadataForBuff:function(e,a=ne){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}}),oe=Object.freeze({__proto__:null,constants:o,parsers:ce,getMetadataForProc:F,getMetadataForPassive:h,isAttackingProcId:l,getNameForProc:b,getNameForPassive:C,isProcEffect:H,isPassiveEffect:K,combineEffectsAndDamageFrames:function(e,a){let t=[];return Array.isArray(e)&&e.length>0&&Array.isArray(a)&&e.length===a.length&&(t=e.map((e,t)=>{const s=a[t];return{delay:e[\"effect delay time(ms)/frame\"],effect:e,frames:s,id:\"\"+(e[\"proc id\"]||e[\"unknown proc id\"]),targetArea:e[\"random attack\"]?D.Random:e[\"target area\"],targetType:e[\"target type\"]}})),t},getEffectId:t,getEffectName:function(e,a={}){let s=\"\";const i=t(e);return K(e)?s=C(i,a&&a.passive):H(e)&&(s=b(i,a&&a.proc)),s},get ProcBuffType(){return c},PASSIVE_METADATA:r,PROC_METADATA:p});var re=Object.freeze({__proto__:null,getEffectsForExtraSkill:function(e){return e&&Array.isArray(e.effects)?e.effects:[]}});var pe=Object.freeze({__proto__:null,getEffectsForItem:function(e){let a=[];if(e&&e.effect)if(Array.isArray(e.effect))a=e.effect;else if(Array.isArray(e.effect.effect)){const{effect:t,target_area:s,target_type:i}=e.effect;a=t.map(e=>{const a=Object.assign({},e);return a[\"target area\"]=s,a[\"target type\"]=i,a})}return a},getItemImageUrl:function(e,a){return`${e||\"\"}/item/${a||\"\"}`}});var Fe=Object.freeze({__proto__:null,getEffectsForLeaderSkill:function(e){return e&&Array.isArray(e.effects)?e.effects:[]}});var le=Object.freeze({__proto__:null,getUnitImageFileNames:function(e,a=\"\"){const t=`${e||\"\"}${a||\"\"}.png`;return{spritesheet:\"unit_anime_\"+t,battleAvatar:\"unit_ills_battle_\"+t,guideAvatar:\"unit_ills_thum_\"+t,fullIllustration:\"unit_ills_full_\"+t}},getUnitImageUrl:function(e,a){return`${e||\"\"}/unit/img/${a||\"\"}`}});const ue=\"A\".charCodeAt(0),de=\"a\".charCodeAt(0),fe=\"0\".charCodeAt(0);function De(e){return\"string\"==typeof e&&e.split(\"@\")[1]||e}var Ee=Object.freeze({__proto__:null,getEffectsForSpEnhancement:function(e){const a=[];if(e&&e.skill&&Array.isArray(e.skill.effects)){e.skill.effects.forEach(e=>{Object.keys(e).forEach(t=>{const s=e[t],i=Object.assign(Object.assign({},s),{sp_type:t});a.push(i)})})}return a},getSpCategoryName:function(e){let a;switch(+e){case 1:a=g[\"Parameter Boost\"];break;case 2:a=g.Spark;break;case 3:a=g[\"Critical Hits\"];break;case 4:a=g[\"Attack Boost\"];break;case 5:a=g[\"BB Gauge\"];break;case 6:a=g[\"HP Recovery\"];break;case 7:a=g.Drops;break;case 8:a=g[\"Ailment Resistance\"];break;case 9:a=g[\"Ailment Infliction\"];break;case 10:a=g[\"Damage Reduction\"];break;case 11:a=g.Special;break;default:a=g.Unknown}return a},spIndexToCode:function(e){let a=\"\",t=-1;return Number.isInteger(e)&&(e>=0&&e<=25?t=e+ue:e>=26&&e<=51?t=e-26+de:e>=52&&e<=61&&(t=e-52+fe)),-1!==t&&(a=String.fromCharCode(t)),a},spCodeToIndex:function(e){let a=-1,t=-1;return e&&\"string\"==typeof e&&1===e.length&&(e>=\"A\"&&e<=\"Z\"?t=ue:e>=\"a\"&&e<=\"z\"?t=de-26:e>=\"0\"&&e<=\"9\"&&(t=fe-52)),-1!==t&&(a=e.charCodeAt(0)-t),a},getSpEntryId:De,getSpEntryWithId:function(e,a){const t=De(e);return e&&Array.isArray(a)&&a.find(e=>De(e&&e.id)===t)||void 0},getAllDependenciesForSpEntry:function e(a,t,s=new Set){let i=[];if(a&&a.dependency&&Array.isArray(t)&&t.length>0){const n=De(a.dependency),c=t.find(e=>De(e&&e.id)===n);if(c&&!s.has(c)){s.add(c);const a=e(c,t,s);i=[c].concat(a)}}return i},getAllEntriesThatDependOnSpEntry:function e(a,t,s=new Set){let i=[];if(a&&a.id&&Array.isArray(t)&&t.length>0){const n=a.id;i=t.filter(e=>e.dependency&&e.dependency.includes(n)&&!s.has(e)),i.forEach(a=>{s.add(a);const n=e(a,t,s);i=i.concat(n)})}return i}});return e.buffs=oe,e.bursts=y,e.datamineTypes=x,e.extraSkills=re,e.items=pe,e.leaderSkills=Fe,e.spEnhancements=Ee,e.units=le,e.version=\"0.7.0\",e}({});\n//# sourceMappingURL=index.browser.min.js.map\n","var bfmtUtilities = (function (exports) {\n    'use strict';\n\n    /**\n     * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get level entry from.\n     * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n     * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n     */\n    function getLevelEntryForBurst(burst, level) {\n        const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n        let levelIndex;\n        if (level !== null && !isNaN(level)) {\n            // 1-indexed\n            levelIndex = (+level - 1);\n        }\n        else {\n            // default to last entry in burst\n            levelIndex = burstEffectsByLevel.length - 1;\n        }\n        return burstEffectsByLevel[levelIndex];\n    }\n\n    /**\n     * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get effects from.\n     * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n     * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n     */\n    function getEffectsForBurst(burst, level) {\n        const levelEntry = getLevelEntryForBurst(burst, level);\n        return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n    }\n\n    /**\n     * @description Get the proc/passive ID of a given object.\n     * @param effect Object to get the effect ID from.\n     * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectId(effect) {\n        let resultId = '';\n        if (effect) {\n            resultId = effect['proc id'] || effect['unknown proc id'] ||\n                effect['passive id'] || effect['unknown passive id'] || '';\n        }\n        return resultId;\n    }\n\n    var KNOWN_PROC_ID;\n    (function (KNOWN_PROC_ID) {\n        KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n        KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    })(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\n    var KNOWN_PASSIVE_ID;\n    (function (KNOWN_PASSIVE_ID) {\n        KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n        KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    })(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n    var KNOWN_CONDITIONAL_ID;\n    (function (KNOWN_CONDITIONAL_ID) {\n        KNOWN_CONDITIONAL_ID[\"Unknown\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n    })(KNOWN_CONDITIONAL_ID || (KNOWN_CONDITIONAL_ID = {}));\n\n    var constants = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get KNOWN_PROC_ID () { return KNOWN_PROC_ID; },\n        get KNOWN_PASSIVE_ID () { return KNOWN_PASSIVE_ID; },\n        get KNOWN_CONDITIONAL_ID () { return KNOWN_CONDITIONAL_ID; }\n    });\n\n    var ProcBuffType;\n    (function (ProcBuffType) {\n        ProcBuffType[\"Attack\"] = \"Attack\";\n    })(ProcBuffType || (ProcBuffType = {}));\n    /* eslint-disable */\n    /**\n     * @ignore\n     */\n    const PASSIVE_METADATA = Object.freeze({\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Parameter Boost\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Elemental Parameter Boost\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Type-Based Parameter Boost\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"Status Negation\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Damage Reduction\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Gradual BB Gauge Boost\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"HC Efficacy\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"HP-Conditional Parameter Boost\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"HP-Conditional Drop Rate Boost\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"BC Fill on Enemy Defeat\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Damage Reduction (Chance)\"\n        },\n        \"15\": {\n            \"ID\": \"15\",\n            \"Name\": \"Heal on Enemy Defeat\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Heal on Battle Victory\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"HP Absorption\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Drop Rate Boost\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"Status Infliction\"\n        },\n        \"21\": {\n            \"ID\": \"21\",\n            \"Name\": \"Parameter Boost for First X Turns\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"BC Fill on Battle Victory\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Heal when Attacked (Chance)\"\n        },\n        \"25\": {\n            \"ID\": \"25\",\n            \"Name\": \"BC Fill when Hit (Chance)\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Damage Counter (Chance)\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Increased Target Chance\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Decreased Target Chance\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Defense Ignore (Chance)\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"BB Conditional Parameter Boost\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"BC Efficacy\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Heal over Time\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"Critical Damage Boost\"\n        },\n        \"35\": {\n            \"ID\": \"35\",\n            \"Name\": \"BC Fill when Normal Attacking\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Extra Action\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Hit Count Boost\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Parameter Conversion\"\n        },\n        \"41\": {\n            \"ID\": \"41\",\n            \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"Gender Parameter Boost\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Damage Reduction to 1\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Flat Parameter Boost\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"Critical Damage Negation\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"BC Fill on Spark\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"BC Cost Reduction\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"BB Gauge Consumption Reduction\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Elemental Damage Boost\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Conditional Effect based on HP Threshold\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Damage Reduction when Guarding\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BC Fill when Attacked when Guarding\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BC Fill on Guard\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Elemental Damage Reduction for first X Turns\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"BB Atk Boost\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"BC Fill on Critical\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Add buff to Brave Burst\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"OD Gauge Fill Rate Boost\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"Status Counter\"\n        },\n        \"72\": {\n            \"ID\": \"72\",\n            \"Name\": \"Turn End Effects Activate at Turn Start\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\"\n        },\n        \"74\": {\n            \"ID\": \"74\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Spark Vulnerability\"\n        },\n        \"77\": {\n            \"ID\": \"77\",\n            \"Name\": \"Spark Damage Reduction\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Conditional Effect after Damage Received Threshold\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"BC Fill after Damage Received Threshold\"\n        },\n        \"80\": {\n            \"ID\": \"80\",\n            \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n        },\n        \"81\": {\n            \"ID\": \"81\",\n            \"Name\": \"BC Fill after Damage Dealt Threshold\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"Conditional Effect after BC Received Threshold\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"Conditional Effect after HC Received Threshold\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"BC Fill after HC Received Threshold\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"Conditional Effect after Spark Threshold\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Conditional Effect on Guard\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Conditional Effect on Critical\"\n        },\n        \"90\": {\n            \"ID\": \"90\",\n            \"Name\": \"Status Infliction on Critical\"\n        },\n        \"91\": {\n            \"ID\": \"91\",\n            \"Name\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Negate Defense Ignore\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Added Elements\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Normal Attacks Hit All Foes\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Player EXP Boost\"\n        },\n        \"99\": {\n            \"ID\": \"99\",\n            \"Name\": \"\"\n        },\n        \"100\": {\n            \"ID\": \"100\",\n            \"Name\": \"Spark Critical\"\n        },\n        \"101\": {\n            \"ID\": \"101\",\n            \"Name\": \"Heal on Spark\"\n        },\n        \"102\": {\n            \"ID\": \"102\",\n            \"Name\": \"Added Elements\"\n        },\n        \"103\": {\n            \"ID\": \"103\",\n            \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n        },\n        \"104\": {\n            \"ID\": \"104\",\n            \"Name\": \"Spark Boost when HP Passes Threshold\"\n        },\n        \"105\": {\n            \"ID\": \"105\",\n            \"Name\": \"Turn-Based Parameter Boost\"\n        },\n        \"106\": {\n            \"ID\": \"106\",\n            \"Name\": \"Conditional Effect after Activating Overdrive\"\n        },\n        \"107\": {\n            \"ID\": \"107\",\n            \"Name\": \"Add Effect to Leader Skill\"\n        },\n        \"109\": {\n            \"ID\": \"109\",\n            \"Name\": \"BB Gauge Reduction (Chance)\"\n        },\n        \"110\": {\n            \"ID\": \"110\",\n            \"Name\": \"BC Efficacy Reduction (Chance)\"\n        },\n        \"111\": {\n            \"ID\": \"111\",\n            \"Name\": \"Increase Brave Burst Activation Rate\"\n        },\n        \"112\": {\n            \"ID\": \"112\",\n            \"Name\": \"ABP/CBP Boost\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Conditional Effect after HP Threshold\"\n        },\n        \"114\": {\n            \"ID\": \"114\",\n            \"Name\": \"Inflict Buff when Attacked\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n        },\n        \"128\": {\n            \"ID\": \"128\",\n            \"Name\": \"Damage Reduction from Normal Attacks\"\n        },\n        \"143\": {\n            \"ID\": \"143\",\n            \"Name\": \"Break Atk Parameter Limit\"\n        },\n        \"10008\": {\n            \"ID\": \"10008\",\n            \"Name\": \"Damage Reduction from Specific Sources\"\n        },\n        \"11004\": {\n            \"ID\": \"11004\",\n            \"Name\": \"Elemental Spark Damage Boost\"\n        },\n        \"11005\": {\n            \"ID\": \"11005\",\n            \"Name\": \"Elemental Critical Damage Boost\"\n        },\n        \"11006\": {\n            \"ID\": \"11006\",\n            \"Name\": \"Summoner EXP Boost\"\n        },\n        \"11009\": {\n            \"ID\": \"11009\",\n            \"Name\": \"Effect Duration Boost\"\n        },\n        \"66,1\": {\n            \"ID\": \"66,1\",\n            \"Name\": \"\"\n        }\n    });\n    /**\n     * @ignore\n     */\n    const PROC_METADATA = Object.freeze({\n        \"0\": {\n            \"ID\": \"0\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Regular Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Burst Heal\",\n            \"Type\": \"\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Heal over Time\",\n            \"Type\": \"\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"BB Gauge Refill\",\n            \"Type\": \"\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"Drop Rate\",\n            \"Type\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Parameter Reduction\",\n            \"Type\": \"\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"Status Cleanse\",\n            \"Type\": \"\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"Status Infliction\",\n            \"Type\": \"\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"Revive (Guaranteed)\",\n            \"Type\": \"\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"Random Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Lifesteal Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"Status Negation\",\n            \"Type\": \"\"\n        },\n        \"18\": {\n            \"ID\": \"18\",\n            \"Name\": \"Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Gradual BB Gauge Boost\",\n            \"Type\": \"\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"BC Fill on Hit\",\n            \"Type\": \"\"\n        },\n        \"22\": {\n            \"ID\": \"22\",\n            \"Name\": \"Defense Ignore\",\n            \"Type\": \"\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Hit Count Boost\",\n            \"Type\": \"\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Fixed Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Multi-Element Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"Add Elements\",\n            \"Type\": \"\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Instant BB Gauge Fill\",\n            \"Type\": \"\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"Element Shift\",\n            \"Type\": \"\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Buff Removal (Chance)\",\n            \"Type\": \"\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"BB Gauge Reduction (Chance)\",\n            \"Type\": \"\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Leader Skill Lock (Chance)\",\n            \"Type\": \"\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Summon Unit\",\n            \"Type\": \"\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"Status Cure\",\n            \"Type\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Status Infliction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Instant OD Fill\",\n            \"Type\": \"\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Damage over Time (Additional Damage)\",\n            \"Type\": \"\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"BB Atk Boost\",\n            \"Type\": \"\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Non-Lethal Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"HP Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"Piercing Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"Retire\",\n            \"Type\": \"\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Damage Counter\",\n            \"Type\": \"\"\n        },\n        \"51\": {\n            \"ID\": \"51\",\n            \"Name\": \"Parameter Reduction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"BC Efficacy\",\n            \"Type\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Status Counter\",\n            \"Type\": \"\"\n        },\n        \"54\": {\n            \"ID\": \"54\",\n            \"Name\": \"Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Elemental Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"56\": {\n            \"ID\": \"56\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"57\": {\n            \"ID\": \"57\",\n            \"Name\": \"BC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Spark Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BB Atk Reduction\",\n            \"Type\": \"\"\n        },\n        \"60\": {\n            \"ID\": \"60\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BB-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Barrier\",\n            \"Type\": \"\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Selective Buff Wipe\",\n            \"Type\": \"\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"Consecutive Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\",\n            \"Type\": \"\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Revive (Chance)\",\n            \"Type\": \"\"\n        },\n        \"67\": {\n            \"ID\": \"67\",\n            \"Name\": \"BC Fill on Spark\",\n            \"Type\": \"\"\n        },\n        \"68\": {\n            \"ID\": \"68\",\n            \"Name\": \"Damage Reduction when Guarding\",\n            \"Type\": \"\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"BC Fill on Guard\",\n            \"Type\": \"\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"BB Gauge Fill Rate Debuff\",\n            \"Type\": \"\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\",\n            \"Type\": \"\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Element Squad-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"76\": {\n            \"ID\": \"76\",\n            \"Name\": \"Extra Action\",\n            \"Type\": \"\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Self Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"Player EXP Boost\",\n            \"Type\": \"\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"83\": {\n            \"ID\": \"83\",\n            \"Name\": \"Spark Critical\",\n            \"Type\": \"\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"OD Gauge Fill Rate\",\n            \"Type\": \"\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"Heal when Attacked\",\n            \"Type\": \"\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"HP Absorption\",\n            \"Type\": \"\"\n        },\n        \"87\": {\n            \"ID\": \"87\",\n            \"Name\": \"Heal on Spark\",\n            \"Type\": \"\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Self Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Self Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Self Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"94\": {\n            \"ID\": \"94\",\n            \"Name\": \"Normal Attacks Hit All Foes\",\n            \"Type\": \"\"\n        },\n        \"95\": {\n            \"ID\": \"95\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n            \"Type\": \"\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Element Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Gradual OD Fill\",\n            \"Type\": \"\"\n        },\n        \"119\": {\n            \"ID\": \"119\",\n            \"Name\": \"Gradual BC Drain\",\n            \"Type\": \"\"\n        },\n        \"123\": {\n            \"ID\": \"123\",\n            \"Name\": \"OD Gauge Reduction\",\n            \"Type\": \"\"\n        },\n        \"126\": {\n            \"ID\": \"126\",\n            \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n            \"Type\": \"\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Lock On\",\n            \"Type\": \"\"\n        },\n        \"130\": {\n            \"ID\": \"130\",\n            \"Name\": \"Parameter Reduction Counter\",\n            \"Type\": \"\"\n        },\n        \"131\": {\n            \"ID\": \"131\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"132\": {\n            \"ID\": \"132\",\n            \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"901\": {\n            \"ID\": \"901\",\n            \"Name\": \"Raid Heal (on Map)\",\n            \"Type\": \"\"\n        },\n        \"902\": {\n            \"ID\": \"902\",\n            \"Name\": \"Raid Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"903\": {\n            \"ID\": \"903\",\n            \"Name\": \"Raid Boss Reveal\",\n            \"Type\": \"\"\n        },\n        \"905\": {\n            \"ID\": \"905\",\n            \"Name\": \"Raid Teleport\",\n            \"Type\": \"\"\n        },\n        \"906\": {\n            \"ID\": \"906\",\n            \"Name\": \"Raid Flee\",\n            \"Type\": \"\"\n        },\n        \"907\": {\n            \"ID\": \"907\",\n            \"Name\": \"Raid Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"908\": {\n            \"ID\": \"908\",\n            \"Name\": \"Raid Item Drop Rate Boost\",\n            \"Type\": \"\"\n        },\n        \"10000\": {\n            \"ID\": \"10000\",\n            \"Name\": \"Taunt\",\n            \"Type\": \"\"\n        },\n        \"10001\": {\n            \"ID\": \"10001\",\n            \"Name\": \"Stealth\",\n            \"Type\": \"\"\n        },\n        \"10002\": {\n            \"ID\": \"10002\",\n            \"Name\": \"Shield (old)\",\n            \"Type\": \"\"\n        },\n        \"10003\": {\n            \"ID\": \"10003\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"10004\": {\n            \"ID\": \"10004\",\n            \"Name\": \"Damage Immunity\",\n            \"Type\": \"\"\n        },\n        \"10005\": {\n            \"ID\": \"10005\",\n            \"Name\": \"Turn Skip (short duration)\",\n            \"Type\": \"\"\n        },\n        \"10006\": {\n            \"ID\": \"10006\",\n            \"Name\": \"Turn Skip (long duration)\",\n            \"Type\": \"\"\n        },\n        \"10007\": {\n            \"ID\": \"10007\",\n            \"Name\": \"Evasion\",\n            \"Type\": \"\"\n        },\n        \"10009\": {\n            \"ID\": \"10009\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"10012\": {\n            \"ID\": \"10012\",\n            \"Name\": \"OD Drain\",\n            \"Type\": \"\"\n        },\n        \"10015\": {\n            \"ID\": \"10015\",\n            \"Name\": \"Elemental Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"10016\": {\n            \"ID\": \"10016\",\n            \"Name\": \"Element Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"10017\": {\n            \"ID\": \"10017\",\n            \"Name\": \"Elemental Shield\",\n            \"Type\": \"\"\n        },\n        \"10018\": {\n            \"ID\": \"10018\",\n            \"Name\": \"Max HP Reduction\",\n            \"Type\": \"\"\n        },\n        \"10019\": {\n            \"ID\": \"10019\",\n            \"Name\": \"Effect Purge\",\n            \"Type\": \"\"\n        },\n        \"10020\": {\n            \"ID\": \"10020\",\n            \"Name\": \"Piercing Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"10021\": {\n            \"ID\": \"10021\",\n            \"Name\": \"Active Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10022\": {\n            \"ID\": \"10022\",\n            \"Name\": \"Passive Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10023\": {\n            \"ID\": \"10023\",\n            \"Name\": \"HC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"10025\": {\n            \"ID\": \"10025\",\n            \"Name\": \"KO Resistance Negation\",\n            \"Type\": \"\"\n        },\n        \"10026\": {\n            \"ID\": \"10026\",\n            \"Name\": \"Doom\",\n            \"Type\": \"\"\n        },\n        \"11000\": {\n            \"ID\": \"11000\",\n            \"Name\": \"Negative HP-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"11001\": {\n            \"ID\": \"11001\",\n            \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n            \"Type\": \"\"\n        },\n        \"11002\": {\n            \"ID\": \"11002\",\n            \"Name\": \"HP Limit Break, Convert to HP\",\n            \"Type\": \"\"\n        },\n        \"11003\": {\n            \"ID\": \"11003\",\n            \"Name\": \"Effect Negation\",\n            \"Type\": \"\"\n        },\n        \"70001\": {\n            \"ID\": \"70001\",\n            \"Name\": \"Mana Bubble Shield\",\n            \"Type\": \"\"\n        },\n        \"70002\": {\n            \"ID\": \"70002\",\n            \"Name\": \"Recast\",\n            \"Type\": \"\"\n        },\n        \"2-5\": {\n            \"ID\": \"2-5\",\n            \"Name\": \"Burst Heal and DEF/REC Boost\",\n            \"Type\": \"\"\n        }\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given proc ID.\n     * @param id Proc ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForProc(id, metadata = PROC_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Determine if a given proc ID's type is an attack.\n     * @param id Proc ID to check.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n     */\n    function isAttackingProcId(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n    }\n\n    /**\n     * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n     * @param damageFrames Damage frames that each have their own proc ID.\n     * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Damage frames entry whose frames are based on the input damage frames.\n     */\n    function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n        // relevant frames are all effects for healing or attacking\n        const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n        const relevantFrames = inputFrames.filter(frame => {\n            const procId = getEffectId(frame);\n            return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n        });\n        const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n            const keepFirstFrame = index === 0;\n            const numFrames = frameEntry['frame times'].length;\n            const damageDistribution = frameEntry['hit dmg% distribution'];\n            const frameTimes = frameEntry['frame times'];\n            for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n                acc.push({\n                    damage: damageDistribution[frameIndex],\n                    time: frameTimes[frameIndex],\n                });\n            }\n            return acc;\n        }, []);\n        const resultDamageFramesEntry = {\n            'effect delay time(ms)/frame': effectDelay,\n            'frame times': [],\n            'hit dmg% distribution': [],\n            'hit dmg% distribution (total)': 0,\n            hits: 0,\n        };\n        unifiedFrames.sort((a, b) => a.time - b.time)\n            .forEach(({ time, damage }) => {\n            resultDamageFramesEntry['frame times'].push(time);\n            resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n            resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n        });\n        resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n        return resultDamageFramesEntry;\n    }\n\n    var index = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLevelEntryForBurst: getLevelEntryForBurst,\n        getEffectsForBurst: getEffectsForBurst,\n        getExtraAttackDamageFramesEntry: getExtraAttackDamageFramesEntry\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given passive ID.\n     * @param id Passive ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Get the associated name for a given proc ID.\n     * @param id Proc ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Name of the proc ID if it exists, empty string otherwise.\n     */\n    function getNameForProc(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Get the associated name for a given passive ID.\n     * @param id Passive ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Name of the passive ID if it exists, empty string otherwise.\n     */\n    function getNameForPassive(id, metadata) {\n        const metadataEntry = getMetadataForPassive(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Determine if a given effect object is a proc effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a proc effect based on its properties.\n     */\n    function isProcEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n    }\n\n    /**\n     * @description Determine if a given effect object is a passive effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a passive effect based on its properties.\n     */\n    function isPassiveEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n    }\n\n    var Ailment;\n    (function (Ailment) {\n        Ailment[\"Poison\"] = \"poison\";\n        Ailment[\"Weak\"] = \"weak\";\n        Ailment[\"Sick\"] = \"sick\";\n        Ailment[\"Injury\"] = \"injury\";\n        Ailment[\"Curse\"] = \"curse\";\n        Ailment[\"Paralysis\"] = \"paralysis\";\n        Ailment[\"AttackReduction\"] = \"atk down\";\n        Ailment[\"DefenseReduction\"] = \"def down\";\n        Ailment[\"RecoveryReduction\"] = \"rec down\";\n        Ailment[\"Unknown\"] = \"unknown\";\n    })(Ailment || (Ailment = {}));\n    var ArenaCondition;\n    (function (ArenaCondition) {\n        ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n        ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n        ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n        ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n        ArenaCondition[\"hp_min\"] = \"hp_min\";\n        ArenaCondition[\"hp_max\"] = \"hp_max\";\n        ArenaCondition[\"atk_max\"] = \"atk_max\";\n        ArenaCondition[\"random\"] = \"random\";\n    })(ArenaCondition || (ArenaCondition = {}));\n    var MoveType;\n    (function (MoveType) {\n        MoveType[\"Moving\"] = \"1\";\n        MoveType[\"Teleporting\"] = \"2\";\n        MoveType[\"NonMoving\"] = \"3\";\n    })(MoveType || (MoveType = {}));\n    var TargetArea;\n    (function (TargetArea) {\n        TargetArea[\"Aoe\"] = \"aoe\";\n        TargetArea[\"Single\"] = \"single\";\n        TargetArea[\"Random\"] = \"random\";\n    })(TargetArea || (TargetArea = {}));\n    var TargetAreaShorthand;\n    (function (TargetAreaShorthand) {\n        TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n        TargetAreaShorthand[\"Single\"] = \"ST\";\n        TargetAreaShorthand[\"Random\"] = \"RT\";\n    })(TargetAreaShorthand || (TargetAreaShorthand = {}));\n    var TargetType;\n    (function (TargetType) {\n        TargetType[\"Self\"] = \"self\";\n        TargetType[\"Party\"] = \"party\";\n        TargetType[\"Enemy\"] = \"enemy\";\n    })(TargetType || (TargetType = {}));\n    var SpPassiveType;\n    (function (SpPassiveType) {\n        SpPassiveType[\"AddPassive\"] = \"passive\";\n        SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n        SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n        SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n        SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n    })(SpPassiveType || (SpPassiveType = {}));\n    var SphereTypeName;\n    (function (SphereTypeName) {\n        SphereTypeName[\"None\"] = \"None\";\n        SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n        SphereTypeName[\"Critical\"] = \"Critical\";\n        SphereTypeName[\"Drop\"] = \"Drop\";\n        SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n        SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n        SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n        SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n        SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n        SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n        SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n        SphereTypeName[\"Spark\"] = \"Spark\";\n        SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n        SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n        SphereTypeName[\"Special\"] = \"Special\";\n    })(SphereTypeName || (SphereTypeName = {}));\n    var SphereTypeId;\n    (function (SphereTypeId) {\n        SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n        SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n        SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n        SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n        SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n        SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n        SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n        SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n        SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n        SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n        SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n        SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n        SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n        SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n        SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n    })(SphereTypeId || (SphereTypeId = {}));\n    var SpCategoryName;\n    (function (SpCategoryName) {\n        SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n        SpCategoryName[\"Spark\"] = \"Spark\";\n        SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n        SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n        SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n        SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n        SpCategoryName[\"Drops\"] = \"Drops\";\n        SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n        SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n        SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n        SpCategoryName[\"Special\"] = \"Special\";\n        SpCategoryName[\"Unknown\"] = \"Unknown\";\n    })(SpCategoryName || (SpCategoryName = {}));\n    var SpCategoryId;\n    (function (SpCategoryId) {\n        SpCategoryId[\"Parameter Boost\"] = \"1\";\n        SpCategoryId[\"Spark\"] = \"2\";\n        SpCategoryId[\"Critical Hits\"] = \"3\";\n        SpCategoryId[\"Attack Boost\"] = \"4\";\n        SpCategoryId[\"BB Gauge\"] = \"5\";\n        SpCategoryId[\"HP Recovery\"] = \"6\";\n        SpCategoryId[\"Drops\"] = \"7\";\n        SpCategoryId[\"Ailment Resistance\"] = \"8\";\n        SpCategoryId[\"Ailment Infliction\"] = \"9\";\n        SpCategoryId[\"Damage Reduction\"] = \"10\";\n        SpCategoryId[\"Special\"] = \"11\";\n    })(SpCategoryId || (SpCategoryId = {}));\n    var UnitAnimationKey;\n    (function (UnitAnimationKey) {\n        UnitAnimationKey[\"Attack\"] = \"attack\";\n        UnitAnimationKey[\"Idle\"] = \"idle\";\n        UnitAnimationKey[\"Move\"] = \"move\";\n    })(UnitAnimationKey || (UnitAnimationKey = {}));\n    var UnitElement;\n    (function (UnitElement) {\n        UnitElement[\"Fire\"] = \"fire\";\n        UnitElement[\"Water\"] = \"water\";\n        UnitElement[\"Earth\"] = \"earth\";\n        UnitElement[\"Thunder\"] = \"thunder\";\n        UnitElement[\"Light\"] = \"light\";\n        UnitElement[\"Dark\"] = \"dark\";\n    })(UnitElement || (UnitElement = {}));\n    var UnitGender;\n    (function (UnitGender) {\n        UnitGender[\"Male\"] = \"male\";\n        UnitGender[\"Female\"] = \"female\";\n        UnitGender[\"Other\"] = \"other\";\n    })(UnitGender || (UnitGender = {}));\n    var UnitGettingType;\n    (function (UnitGettingType) {\n        UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n        UnitGettingType[\"Farmable\"] = \"farmable\";\n        UnitGettingType[\"RareSummon\"] = \"rare summon\";\n        UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n    })(UnitGettingType || (UnitGettingType = {}));\n    var UnitKind;\n    (function (UnitKind) {\n        UnitKind[\"Normal\"] = \"normal\";\n        UnitKind[\"Evolution\"] = \"evo\";\n        UnitKind[\"Enhancing\"] = \"enhancing\";\n        UnitKind[\"Sale\"] = \"sale\";\n    })(UnitKind || (UnitKind = {}));\n    var UnitType;\n    (function (UnitType) {\n        UnitType[\"Lord\"] = \"lord\";\n        UnitType[\"Anima\"] = \"anima\";\n        UnitType[\"Breaker\"] = \"breaker\";\n        UnitType[\"Guardian\"] = \"guardian\";\n        UnitType[\"Oracle\"] = \"oracle\";\n        UnitType[\"Rex\"] = \"rex\";\n    })(UnitType || (UnitType = {}));\n    var ItemType;\n    (function (ItemType) {\n        ItemType[\"Consumable\"] = \"consumable\";\n        ItemType[\"Material\"] = \"material\";\n        ItemType[\"Sphere\"] = \"sphere\";\n        ItemType[\"EvolutionMaterial\"] = \"evomat\";\n        ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n        ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n    })(ItemType || (ItemType = {}));\n    var MimicUnitIds;\n    (function (MimicUnitIds) {\n        MimicUnitIds[\"Mimic\"] = \"60142\";\n        MimicUnitIds[\"BatMimic\"] = \"60143\";\n        MimicUnitIds[\"DragonMimic\"] = \"60144\";\n        MimicUnitIds[\"MetalMimic\"] = \"60224\";\n    })(MimicUnitIds || (MimicUnitIds = {}));\n    /**\n     * @description Known values for the monster groups used in {@link IMimicInfo}.\n     */\n    const MimicMonsterGroupMapping = {\n        '1000': MimicUnitIds.Mimic,\n        '1100': MimicUnitIds.BatMimic,\n        '1101': MimicUnitIds.BatMimic,\n        '1200': MimicUnitIds.DragonMimic,\n        '1300': MimicUnitIds.MetalMimic,\n    };\n\n    var datamineTypes = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get Ailment () { return Ailment; },\n        get ArenaCondition () { return ArenaCondition; },\n        get MoveType () { return MoveType; },\n        get TargetArea () { return TargetArea; },\n        get TargetAreaShorthand () { return TargetAreaShorthand; },\n        get TargetType () { return TargetType; },\n        get SpPassiveType () { return SpPassiveType; },\n        get SphereTypeName () { return SphereTypeName; },\n        get SphereTypeId () { return SphereTypeId; },\n        get SpCategoryName () { return SpCategoryName; },\n        get SpCategoryId () { return SpCategoryId; },\n        get UnitAnimationKey () { return UnitAnimationKey; },\n        get UnitElement () { return UnitElement; },\n        get UnitGender () { return UnitGender; },\n        get UnitGettingType () { return UnitGettingType; },\n        get UnitKind () { return UnitKind; },\n        get UnitType () { return UnitType; },\n        get ItemType () { return ItemType; },\n        get MimicUnitIds () { return MimicUnitIds; },\n        MimicMonsterGroupMapping: MimicMonsterGroupMapping\n    });\n\n    /**\n     * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n     * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n     * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n     * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n     */\n    function combineEffectsAndDamageFrames(effects, damageFrames) {\n        let combinedEntries = [];\n        if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n            combinedEntries = effects.map((effect, i) => {\n                const correspondingFrameEntry = damageFrames[i];\n                return {\n                    delay: effect['effect delay time(ms)/frame'],\n                    effect,\n                    frames: correspondingFrameEntry,\n                    id: `${effect['proc id'] || effect['unknown proc id']}`,\n                    targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                    targetType: effect['target type'],\n                };\n            });\n        }\n        return combinedEntries;\n    }\n\n    /**\n     * @description Get the name of a given object.\n     * @param effect Object to get the name from.\n     * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n     * @returns Name of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectName(effect, metadata = {}) {\n        let resultName = '';\n        const effectId = getEffectId(effect);\n        if (isPassiveEffect(effect)) {\n            resultName = getNameForPassive(effectId, metadata && metadata.passive);\n        }\n        else if (isProcEffect(effect)) {\n            resultName = getNameForProc(effectId, metadata && metadata.proc);\n        }\n        return resultName;\n    }\n\n    /**\n     * @description Provides info at a glance regarding a buff's source and how it stacks.\n     */\n    var BuffStackType;\n    (function (BuffStackType) {\n        /**\n         * @description The buff is activated via some skill and lasts for a number of turns.\n         * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n         * from different levels. Two possible levels of sources are:\n         * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n         * 2. Ultimate Brave Burst or Dual Brave Burst\n         */\n        BuffStackType[\"Active\"] = \"active\";\n        /**\n         * @description The buff is always active provided that the source is not nullified.\n         * Most passive buffs can stack with themselves.\n         */\n        BuffStackType[\"Passive\"] = \"passive\";\n        /**\n         * @description The buff is applied for a number of turns once a certain condition is met.\n         * Buffs of the same type are not able to stack.\n         */\n        BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n        /**\n         * @description Only one instance of the buff can be active at a time and can last indefinitely.\n         * A couple examples of this are Barrier and Max HP Boost.\n         */\n        BuffStackType[\"Singleton\"] = \"singleton\";\n        /**\n         * @description The buff's effects immediately apply to the target(s). This differs from singleton\n         * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n         * in the HP bar filling by the sum of those burst heals).\n         */\n        BuffStackType[\"Burst\"] = \"burst\";\n        /**\n         * @description A specific subset of `Burst` type buffs that deal damage to the target.\n         */\n        BuffStackType[\"Attack\"] = \"attack\";\n        /**\n         * @description Only for buffs that cannot be processed by the library yet.\n         */\n        BuffStackType[\"Unknown\"] = \"unknown\";\n    })(BuffStackType || (BuffStackType = {}));\n    var BuffSource;\n    (function (BuffSource) {\n        BuffSource[\"BraveBurst\"] = \"bb\";\n        BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n        BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n        BuffSource[\"DualBraveBurst\"] = \"dbb\";\n        BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n        BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n        BuffSource[\"SpEnhancement\"] = \"sp\";\n        BuffSource[\"Item\"] = \"item\";\n        BuffSource[\"LeaderSkill\"] = \"ls\";\n        BuffSource[\"ExtraSkill\"] = \"es\";\n        /**\n         * @description Buffs that result of having a number of OE+ units in the squad.\n         */\n        BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n        /**\n         * @description Buffs based on a units type. See {@link UnitType}.\n         */\n        BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n        /**\n         * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n         * as well as ambient turn reductions present in some late-game quests.\n         */\n        BuffSource[\"Quest\"] = \"quest\";\n    })(BuffSource || (BuffSource = {}));\n    /**\n     * @description Extra element values that can be used in addition to {@link UnitElement}.\n     */\n    var BuffConditionElement;\n    (function (BuffConditionElement) {\n        BuffConditionElement[\"Unknown\"] = \"unknown\";\n        BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n        BuffConditionElement[\"All\"] = \"all\";\n    })(BuffConditionElement || (BuffConditionElement = {}));\n    /**\n     * @description Stats on a unit that a buff can affect.\n     */\n    var UnitStat;\n    (function (UnitStat) {\n        UnitStat[\"hp\"] = \"hp\";\n        UnitStat[\"atk\"] = \"atk\";\n        UnitStat[\"def\"] = \"def\";\n        UnitStat[\"rec\"] = \"rec\";\n        UnitStat[\"crit\"] = \"crit\";\n        UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n        UnitStat[\"bbGauge\"] = \"bbGauge\";\n        UnitStat[\"odGauge\"] = \"odGauge\";\n        UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n        UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n        UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n        UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n        UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n        UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n        UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n        UnitStat[\"bcCostReduction\"] = \"bcCostReduction\";\n        UnitStat[\"bbGaugeConsumptionReduction\"] = \"bbGaugeConsumptionReduction\";\n        UnitStat[\"poisonResist\"] = \"poisonResist\";\n        UnitStat[\"weakResist\"] = \"weakResist\";\n        UnitStat[\"sickResist\"] = \"sickResist\";\n        UnitStat[\"injuryResist\"] = \"injuryResist\";\n        UnitStat[\"curseResist\"] = \"curseResist\";\n        UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n        UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n        UnitStat[\"weakInflict\"] = \"weakInflict\";\n        UnitStat[\"sickInflict\"] = \"sickInflict\";\n        UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n        UnitStat[\"curseInflict\"] = \"curseInflict\";\n        UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n        UnitStat[\"poisonCounter\"] = \"poisonCounter\";\n        UnitStat[\"weakCounter\"] = \"weakCounter\";\n        UnitStat[\"sickCounter\"] = \"sickCounter\";\n        UnitStat[\"injuryCounter\"] = \"injuryCounter\";\n        UnitStat[\"curseCounter\"] = \"curseCounter\";\n        UnitStat[\"paralysisCounter\"] = \"paralysisCounter\";\n        UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n        UnitStat[\"defDownResist\"] = \"defDownResist\";\n        UnitStat[\"recDownResist\"] = \"recDownResist\";\n        UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n        UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n        UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n        UnitStat[\"mitigation\"] = \"mitigation\";\n        UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n        UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n        UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n        UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n        UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n        UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n        UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n        UnitStat[\"fireElementalDamage\"] = \"fireElementalDamage\";\n        UnitStat[\"waterElementalDamage\"] = \"waterElementalDamage\";\n        UnitStat[\"earthElementalDamage\"] = \"earthElementalDamage\";\n        UnitStat[\"thunderElementalDamage\"] = \"thunderElementalDamage\";\n        UnitStat[\"lightElementalDamage\"] = \"lightElementalDamage\";\n        UnitStat[\"darkElementalDamage\"] = \"darkElementalDamage\";\n        UnitStat[\"elementalWeaknessDamageMitigation\"] = \"elementalWeaknessDamageMitigation\";\n        UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n        UnitStat[\"koResistance\"] = \"koResistance\";\n        UnitStat[\"revive\"] = \"revive\";\n        UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n        UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n        UnitStat[\"criticalDamageMitigation\"] = \"criticalDamageMitigation\";\n        UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n        UnitStat[\"bbAtk\"] = \"bbAtk\";\n        UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n        UnitStat[\"damageReflect\"] = \"damageReflect\";\n        UnitStat[\"targetingModification\"] = \"targetingModification\";\n        UnitStat[\"elementModification\"] = \"elementModification\";\n        UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n        UnitStat[\"extraAction\"] = \"extraAction\";\n        UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n    })(UnitStat || (UnitStat = {}));\n    var IconId;\n    (function (IconId) {\n        IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n        IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n        IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n        IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n        IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n        IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n        IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n        IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n        IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n        IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n        IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n        IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n        IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n        IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n        IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n        IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n        IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n        IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n        IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n        IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n        IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n        IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n        IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n        IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n        IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n        IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n        IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n        IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n        IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n        IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n        IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n        IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n        IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n        IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n        IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n        IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n        IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n        IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n        IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n        IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n        IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n        IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n        IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n        IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n        IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n        IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n        IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n        IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n        IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n        IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n        IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n        IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n        IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n        IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n        IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n        IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n        IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n        IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n        IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n        IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n        IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n        IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n        IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n        IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n        IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n        IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n        IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n        IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n        IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n        IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n        IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n        IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n        IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n        IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n        IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n        IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n        IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n        IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n        IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n        IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n        IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n        IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n        IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n        IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n        IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n        IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n        IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n        IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n        IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n        IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n        IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n        IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n        IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n        IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n        IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n        IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n        IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n        IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n        IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n        IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n        IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n        IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n        IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n        IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n        IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n        IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n        IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n        IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n        IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n        IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n        IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n        IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n        IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n        IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n        IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n        IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n        IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n        IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n        IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n        IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n        IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n        IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n        IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n        IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n        IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n        IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n        IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n        IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n        IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n        IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n        IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n        IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n        IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n        IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n        IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n        IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n        IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n        IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n        IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n        IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n        IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n        IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n        IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n        IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n        IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n        IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n        IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n        IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n        IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n        IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n        IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n        IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n        IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n        IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n        IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n        IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n        IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n        IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n        IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n        IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n        IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n        IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n        IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n        IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n        IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n        IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n        IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n        IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n        IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n        IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n        IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n        IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n        IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n        IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n        IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n        IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n        IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n        IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n        IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n        IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n        IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n        IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n        IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n        IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n        IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n        IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n        IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n        IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n        IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n        IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n        IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n        IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n        IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n        IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n        IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n        IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n        IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n        IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n        IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n        IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n        IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n        IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n        IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n        IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n        IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n        IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n        IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n        IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n        IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n        IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n        IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n        IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n        IconId[\"BUFF_HPSCALEDATKUP\"] = \"BUFF_HPSCALEDATKUP\";\n        IconId[\"BUFF_HPSCALEDATKDOWN\"] = \"BUFF_HPSCALEDATKDOWN\";\n        IconId[\"BUFF_HPSCALEDDEFUP\"] = \"BUFF_HPSCALEDDEFUP\";\n        IconId[\"BUFF_HPSCALEDDEFDOWN\"] = \"BUFF_HPSCALEDDEFDOWN\";\n        IconId[\"BUFF_HPSCALEDRECUP\"] = \"BUFF_HPSCALEDRECUP\";\n        IconId[\"BUFF_HPSCALEDRECDOWN\"] = \"BUFF_HPSCALEDRECDOWN\";\n        IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n        IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n        IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n        IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n        IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n        IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n        IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n        IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n        IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n        IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n        IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n        IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n        IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n        IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n        IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n        IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n        IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n        IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n        IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n        IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n        IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n        IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n        IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n        IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n        IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n        IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n        IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n        IconId[\"BUFF_POISONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n        IconId[\"BUFF_POISIONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n        IconId[\"BUFF_WEAKCOUNTER\"] = \"BUFF_WEAKCOUNTER\";\n        IconId[\"BUFF_SICKCOUNTER\"] = \"BUFF_SICKCOUNTER\";\n        IconId[\"BUFF_INJCONTER\"] = \"BUFF_INJCONTER\";\n        IconId[\"BUFF_CURSECOUNTER\"] = \"BUFF_CURSECOUNTER\";\n        IconId[\"BUFF_PARALYCOUNTER\"] = \"BUFF_PARALYCOUNTER\";\n        IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n        IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n        // elemental damage reduction buffs\n        IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n        IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n        IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n        IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n        IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n        IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n        IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n        // elemental weakness buffs\n        IconId[\"BUFF_FIREDMGUP\"] = \"BUFF_FIREDMGUP\";\n        IconId[\"BUFF_WATERDMGUP\"] = \"BUFF_WATERDMGUP\";\n        IconId[\"BUFF_WATERMDGUP\"] = \"BUFF_WATERDMGUP\";\n        IconId[\"BUFF_EARTHDMGUP\"] = \"BUFF_EARTHDMGUP\";\n        IconId[\"BUFF_THUNDERDMGUP\"] = \"BUFF_THUNDERDMGUP\";\n        IconId[\"BUFF_LIGHTDMGUP\"] = \"BUFF_LIGHTDMGUP\";\n        IconId[\"BUFF_DARKDMGUP\"] = \"BUFF_DARKDMGUP\";\n        IconId[\"BUFF_ELEMENTDMGUP\"] = \"BUFF_ELEMENTDMGUP\";\n        IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n        IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n        IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n        IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n        IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n        IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n        IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n        IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n        IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n        IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n        IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n        IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n        IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n        IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n        IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n        IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n        IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n        IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n        IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n        IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n        IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n        IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n        IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n        IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n        IconId[\"BUFF_KO\"] = \"BUFF_KO\";\n        IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n        IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n        IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n        IconId[\"BUFF_CRTDOWN\"] = \"BUFF_CRTDOWN\";\n        IconId[\"BUFF_ELEMENTDOWN\"] = \"BUFF_ELEMENTDOWN\";\n        IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n        IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n        IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n        IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n        IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n        IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n        IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n        IconId[\"BUFF_SPARKBBUP\"] = \"BUFF_SPARKBBUP\";\n        IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n        IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n        IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n        IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n        IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n        IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n        IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n        IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n        IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n        IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n        IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n        IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n        IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n        IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n        IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n        IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n        IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n        IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n        IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n        IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n        IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n        IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n        IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n        IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n        IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n        IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n        IconId[\"BUFF_BBATKUP\"] = \"BUFF_BBATKUP\";\n        IconId[\"BUFF_SBBATKUP\"] = \"BUFF_SBBATKUP\";\n        IconId[\"BUFF_UBBATKUP\"] = \"BUFF_UBBATKUP\";\n        IconId[\"BUFF_BBCOST_REDUCTION\"] = \"BUFF_BBCOST_REDUCTION\";\n        IconId[\"ATK_ST\"] = \"ATK_ST\";\n        IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n        IconId[\"ATK_RT\"] = \"ATK_RT\";\n        IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n        IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n        IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n        IconId[\"ATK_ST_PIERCING_PROPORTIONAL\"] = \"ATK_ST_PIERCING_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PIERCING_PROPORTIONAL\"] = \"ATK_AOE_PIERCING_PROPORTIONAL\";\n        IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n        IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n        IconId[\"ATK_ST_PIERCING_FIXED\"] = \"ATK_ST_PIERCING_FIXED\";\n        IconId[\"ATK_AOE_PIERCING_FIXED\"] = \"ATK_AOE_PIERCING_FIXED\";\n        IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n        IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n        IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n        IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n        IconId[\"ATK_ST_HPSCALED\"] = \"ATK_ST_HPSCALED\";\n        IconId[\"ATK_AOE_HPSCALED\"] = \"ATK_AOE_HPSCALED\";\n    })(IconId || (IconId = {}));\n    /**\n     * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n     * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n     * source of a given buff.\n     */\n    var BuffId;\n    (function (BuffId) {\n        BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n        BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n        BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n        BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n        BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n        BuffId[\"passive:1:def\"] = \"passive:1:def\";\n        BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n        BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n        BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n        BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n        BuffId[\"passive:2:def\"] = \"passive:2:def\";\n        BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n        BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n        BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n        BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n        BuffId[\"passive:3:def\"] = \"passive:3:def\";\n        BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n        BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n        BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n        BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n        BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n        BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n        BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n        BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n        BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n        BuffId[\"passive:5:water\"] = \"passive:5:water\";\n        BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n        BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n        BuffId[\"passive:5:light\"] = \"passive:5:light\";\n        BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n        BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n        BuffId[\"passive:8\"] = \"passive:8\";\n        BuffId[\"passive:9\"] = \"passive:9\";\n        BuffId[\"passive:10\"] = \"passive:10\";\n        BuffId[\"passive:11:atk\"] = \"passive:11:atk\";\n        BuffId[\"passive:11:def\"] = \"passive:11:def\";\n        BuffId[\"passive:11:rec\"] = \"passive:11:rec\";\n        BuffId[\"passive:11:crit\"] = \"passive:11:crit\";\n        BuffId[\"passive:12:bc\"] = \"passive:12:bc\";\n        BuffId[\"passive:12:hc\"] = \"passive:12:hc\";\n        BuffId[\"passive:12:item\"] = \"passive:12:item\";\n        BuffId[\"passive:12:zel\"] = \"passive:12:zel\";\n        BuffId[\"passive:12:karma\"] = \"passive:12:karma\";\n        BuffId[\"passive:13\"] = \"passive:13\";\n        BuffId[\"passive:14\"] = \"passive:14\";\n        BuffId[\"passive:15\"] = \"passive:15\";\n        BuffId[\"passive:16\"] = \"passive:16\";\n        BuffId[\"passive:17\"] = \"passive:17\";\n        BuffId[\"passive:19:bc\"] = \"passive:19:bc\";\n        BuffId[\"passive:19:hc\"] = \"passive:19:hc\";\n        BuffId[\"passive:19:item\"] = \"passive:19:item\";\n        BuffId[\"passive:19:zel\"] = \"passive:19:zel\";\n        BuffId[\"passive:19:karma\"] = \"passive:19:karma\";\n        BuffId[\"passive:20:poison\"] = \"passive:20:poison\";\n        BuffId[\"passive:20:weak\"] = \"passive:20:weak\";\n        BuffId[\"passive:20:sick\"] = \"passive:20:sick\";\n        BuffId[\"passive:20:injury\"] = \"passive:20:injury\";\n        BuffId[\"passive:20:curse\"] = \"passive:20:curse\";\n        BuffId[\"passive:20:paralysis\"] = \"passive:20:paralysis\";\n        BuffId[\"passive:20:atk down\"] = \"passive:20:atk down\";\n        BuffId[\"passive:20:def down\"] = \"passive:20:def down\";\n        BuffId[\"passive:20:rec down\"] = \"passive:20:rec down\";\n        BuffId[\"passive:20:unknown\"] = \"passive:20:unknown\";\n        BuffId[\"passive:21:atk\"] = \"passive:21:atk\";\n        BuffId[\"passive:21:def\"] = \"passive:21:def\";\n        BuffId[\"passive:21:rec\"] = \"passive:21:rec\";\n        BuffId[\"passive:21:crit\"] = \"passive:21:crit\";\n        BuffId[\"passive:23\"] = \"passive:23\";\n        BuffId[\"passive:24\"] = \"passive:24\";\n        BuffId[\"passive:25\"] = \"passive:25\";\n        BuffId[\"passive:26\"] = \"passive:26\";\n        BuffId[\"passive:27\"] = \"passive:27\";\n        BuffId[\"passive:28\"] = \"passive:28\";\n        BuffId[\"passive:29\"] = \"passive:29\";\n        BuffId[\"passive:30:atk\"] = \"passive:30:atk\";\n        BuffId[\"passive:30:def\"] = \"passive:30:def\";\n        BuffId[\"passive:30:rec\"] = \"passive:30:rec\";\n        BuffId[\"passive:30:crit\"] = \"passive:30:crit\";\n        BuffId[\"passive:31:damage\"] = \"passive:31:damage\";\n        BuffId[\"passive:31:bc\"] = \"passive:31:bc\";\n        BuffId[\"passive:31:hc\"] = \"passive:31:hc\";\n        BuffId[\"passive:31:item\"] = \"passive:31:item\";\n        BuffId[\"passive:31:zel\"] = \"passive:31:zel\";\n        BuffId[\"passive:31:karma\"] = \"passive:31:karma\";\n        BuffId[\"passive:32\"] = \"passive:32\";\n        BuffId[\"passive:33\"] = \"passive:33\";\n        BuffId[\"passive:34\"] = \"passive:34\";\n        BuffId[\"passive:35\"] = \"passive:35\";\n        BuffId[\"passive:36\"] = \"passive:36\";\n        BuffId[\"passive:37\"] = \"passive:37\";\n        BuffId[\"passive:40:atk\"] = \"passive:40:atk\";\n        BuffId[\"passive:40:def\"] = \"passive:40:def\";\n        BuffId[\"passive:40:rec\"] = \"passive:40:rec\";\n        BuffId[\"passive:41:hp\"] = \"passive:41:hp\";\n        BuffId[\"passive:41:atk\"] = \"passive:41:atk\";\n        BuffId[\"passive:41:def\"] = \"passive:41:def\";\n        BuffId[\"passive:41:rec\"] = \"passive:41:rec\";\n        BuffId[\"passive:41:crit\"] = \"passive:41:crit\";\n        BuffId[\"passive:42:hp\"] = \"passive:42:hp\";\n        BuffId[\"passive:42:atk\"] = \"passive:42:atk\";\n        BuffId[\"passive:42:def\"] = \"passive:42:def\";\n        BuffId[\"passive:42:rec\"] = \"passive:42:rec\";\n        BuffId[\"passive:42:crit\"] = \"passive:42:crit\";\n        BuffId[\"passive:43\"] = \"passive:43\";\n        BuffId[\"passive:44:hp\"] = \"passive:44:hp\";\n        BuffId[\"passive:44:atk\"] = \"passive:44:atk\";\n        BuffId[\"passive:44:def\"] = \"passive:44:def\";\n        BuffId[\"passive:44:rec\"] = \"passive:44:rec\";\n        BuffId[\"passive:44:crit\"] = \"passive:44:crit\";\n        BuffId[\"passive:45:base\"] = \"passive:45:base\";\n        BuffId[\"passive:45:buff\"] = \"passive:45:buff\";\n        BuffId[\"passive:46:atk\"] = \"passive:46:atk\";\n        BuffId[\"passive:46:def\"] = \"passive:46:def\";\n        BuffId[\"passive:46:rec\"] = \"passive:46:rec\";\n        BuffId[\"passive:47\"] = \"passive:47\";\n        BuffId[\"passive:48\"] = \"passive:48\";\n        BuffId[\"passive:49\"] = \"passive:49\";\n        BuffId[\"passive:50:fire\"] = \"passive:50:fire\";\n        BuffId[\"passive:50:water\"] = \"passive:50:water\";\n        BuffId[\"passive:50:earth\"] = \"passive:50:earth\";\n        BuffId[\"passive:50:thunder\"] = \"passive:50:thunder\";\n        BuffId[\"passive:50:light\"] = \"passive:50:light\";\n        BuffId[\"passive:50:dark\"] = \"passive:50:dark\";\n        BuffId[\"passive:50:unknown\"] = \"passive:50:unknown\";\n        BuffId[\"passive:53:critical-damage-base\"] = \"passive:53:critical-damage-base\";\n        BuffId[\"passive:53:critical-damage-buff\"] = \"passive:53:critical-damage-buff\";\n        BuffId[\"passive:53:element-damage-base\"] = \"passive:53:element-damage-base\";\n        BuffId[\"passive:53:element-damage-buff\"] = \"passive:53:element-damage-buff\";\n        BuffId[\"passive:53:critical-rate-base\"] = \"passive:53:critical-rate-base\";\n        BuffId[\"passive:53:critical-rate-buff\"] = \"passive:53:critical-rate-buff\";\n        BuffId[\"passive:55:hp condition\"] = \"passive:55:hp condition\";\n        BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n        BuffId[\"proc:1\"] = \"proc:1\";\n        BuffId[\"proc:2\"] = \"proc:2\";\n        BuffId[\"proc:3\"] = \"proc:3\";\n        BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n        BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n        BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n        BuffId[\"proc:5:def\"] = \"proc:5:def\";\n        BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n        BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n        BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n        BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n        BuffId[\"proc:6:item\"] = \"proc:6:item\";\n        BuffId[\"proc:7\"] = \"proc:7\";\n        BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n        BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n        BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n        BuffId[\"proc:9:def\"] = \"proc:9:def\";\n        BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n        BuffId[\"proc:9:unknown\"] = \"proc:9:unknown\";\n        BuffId[\"proc:10:poison\"] = \"proc:10:poison\";\n        BuffId[\"proc:10:weak\"] = \"proc:10:weak\";\n        BuffId[\"proc:10:sick\"] = \"proc:10:sick\";\n        BuffId[\"proc:10:injury\"] = \"proc:10:injury\";\n        BuffId[\"proc:10:curse\"] = \"proc:10:curse\";\n        BuffId[\"proc:10:paralysis\"] = \"proc:10:paralysis\";\n        BuffId[\"proc:10:atk down\"] = \"proc:10:atk down\";\n        BuffId[\"proc:10:def down\"] = \"proc:10:def down\";\n        BuffId[\"proc:10:rec down\"] = \"proc:10:rec down\";\n        BuffId[\"proc:10:unknown\"] = \"proc:10:unknown\";\n        BuffId[\"proc:11:poison\"] = \"proc:11:poison\";\n        BuffId[\"proc:11:weak\"] = \"proc:11:weak\";\n        BuffId[\"proc:11:sick\"] = \"proc:11:sick\";\n        BuffId[\"proc:11:injury\"] = \"proc:11:injury\";\n        BuffId[\"proc:11:curse\"] = \"proc:11:curse\";\n        BuffId[\"proc:11:paralysis\"] = \"proc:11:paralysis\";\n        BuffId[\"proc:11:atk down\"] = \"proc:11:atk down\";\n        BuffId[\"proc:11:def down\"] = \"proc:11:def down\";\n        BuffId[\"proc:11:rec down\"] = \"proc:11:rec down\";\n        BuffId[\"proc:11:unknown\"] = \"proc:11:unknown\";\n        BuffId[\"proc:12\"] = \"proc:12\";\n        BuffId[\"proc:13\"] = \"proc:13\";\n        BuffId[\"proc:14\"] = \"proc:14\";\n        BuffId[\"proc:16:fire\"] = \"proc:16:fire\";\n        BuffId[\"proc:16:water\"] = \"proc:16:water\";\n        BuffId[\"proc:16:earth\"] = \"proc:16:earth\";\n        BuffId[\"proc:16:thunder\"] = \"proc:16:thunder\";\n        BuffId[\"proc:16:light\"] = \"proc:16:light\";\n        BuffId[\"proc:16:dark\"] = \"proc:16:dark\";\n        BuffId[\"proc:16:all\"] = \"proc:16:all\";\n        BuffId[\"proc:16:unknown\"] = \"proc:16:unknown\";\n        BuffId[\"proc:17:poison\"] = \"proc:17:poison\";\n        BuffId[\"proc:17:weak\"] = \"proc:17:weak\";\n        BuffId[\"proc:17:sick\"] = \"proc:17:sick\";\n        BuffId[\"proc:17:injury\"] = \"proc:17:injury\";\n        BuffId[\"proc:17:curse\"] = \"proc:17:curse\";\n        BuffId[\"proc:17:paralysis\"] = \"proc:17:paralysis\";\n        BuffId[\"proc:18\"] = \"proc:18\";\n        BuffId[\"proc:19\"] = \"proc:19\";\n        BuffId[\"proc:20\"] = \"proc:20\";\n        BuffId[\"proc:22\"] = \"proc:22\";\n        BuffId[\"proc:23\"] = \"proc:23\";\n        BuffId[\"proc:24:atk\"] = \"proc:24:atk\";\n        BuffId[\"proc:24:def\"] = \"proc:24:def\";\n        BuffId[\"proc:24:rec\"] = \"proc:24:rec\";\n        BuffId[\"proc:26\"] = \"proc:26\";\n        BuffId[\"proc:27\"] = \"proc:27\";\n        BuffId[\"proc:28\"] = \"proc:28\";\n        BuffId[\"proc:29\"] = \"proc:29\";\n        BuffId[\"proc:30:fire\"] = \"proc:30:fire\";\n        BuffId[\"proc:30:water\"] = \"proc:30:water\";\n        BuffId[\"proc:30:earth\"] = \"proc:30:earth\";\n        BuffId[\"proc:30:thunder\"] = \"proc:30:thunder\";\n        BuffId[\"proc:30:light\"] = \"proc:30:light\";\n        BuffId[\"proc:30:dark\"] = \"proc:30:dark\";\n        BuffId[\"proc:30:unknown\"] = \"proc:30:unknown\";\n        BuffId[\"proc:31:flat\"] = \"proc:31:flat\";\n        BuffId[\"proc:31:percent\"] = \"proc:31:percent\";\n        BuffId[\"proc:32:fire\"] = \"proc:32:fire\";\n        BuffId[\"proc:32:water\"] = \"proc:32:water\";\n        BuffId[\"proc:32:earth\"] = \"proc:32:earth\";\n        BuffId[\"proc:32:thunder\"] = \"proc:32:thunder\";\n        BuffId[\"proc:32:light\"] = \"proc:32:light\";\n        BuffId[\"proc:32:dark\"] = \"proc:32:dark\";\n        BuffId[\"proc:32:unknown\"] = \"proc:32:unknown\";\n        BuffId[\"proc:33\"] = \"proc:33\";\n        BuffId[\"proc:34:flat\"] = \"proc:34:flat\";\n        BuffId[\"proc:34:percent\"] = \"proc:34:percent\";\n        BuffId[\"proc:36\"] = \"proc:36\";\n        BuffId[\"proc:37\"] = \"proc:37\";\n        BuffId[\"proc:38:poison\"] = \"proc:38:poison\";\n        BuffId[\"proc:38:weak\"] = \"proc:38:weak\";\n        BuffId[\"proc:38:sick\"] = \"proc:38:sick\";\n        BuffId[\"proc:38:injury\"] = \"proc:38:injury\";\n        BuffId[\"proc:38:curse\"] = \"proc:38:curse\";\n        BuffId[\"proc:38:paralysis\"] = \"proc:38:paralysis\";\n        BuffId[\"proc:38:atk down\"] = \"proc:38:atk down\";\n        BuffId[\"proc:38:def down\"] = \"proc:38:def down\";\n        BuffId[\"proc:38:rec down\"] = \"proc:38:rec down\";\n        BuffId[\"proc:38:unknown\"] = \"proc:38:unknown\";\n        BuffId[\"proc:39:fire\"] = \"proc:39:fire\";\n        BuffId[\"proc:39:water\"] = \"proc:39:water\";\n        BuffId[\"proc:39:earth\"] = \"proc:39:earth\";\n        BuffId[\"proc:39:thunder\"] = \"proc:39:thunder\";\n        BuffId[\"proc:39:light\"] = \"proc:39:light\";\n        BuffId[\"proc:39:dark\"] = \"proc:39:dark\";\n        BuffId[\"proc:39:unknown\"] = \"proc:39:unknown\";\n        BuffId[\"proc:40:poison\"] = \"proc:40:poison\";\n        BuffId[\"proc:40:weak\"] = \"proc:40:weak\";\n        BuffId[\"proc:40:sick\"] = \"proc:40:sick\";\n        BuffId[\"proc:40:injury\"] = \"proc:40:injury\";\n        BuffId[\"proc:40:curse\"] = \"proc:40:curse\";\n        BuffId[\"proc:40:paralysis\"] = \"proc:40:paralysis\";\n        BuffId[\"proc:40:atk down\"] = \"proc:40:atk down\";\n        BuffId[\"proc:40:def down\"] = \"proc:40:def down\";\n        BuffId[\"proc:40:rec down\"] = \"proc:40:rec down\";\n        BuffId[\"proc:40:unknown\"] = \"proc:40:unknown\";\n        BuffId[\"proc:42\"] = \"proc:42\";\n        BuffId[\"proc:43\"] = \"proc:43\";\n        BuffId[\"proc:44\"] = \"proc:44\";\n        BuffId[\"proc:45:bb\"] = \"proc:45:bb\";\n        BuffId[\"proc:45:sbb\"] = \"proc:45:sbb\";\n        BuffId[\"proc:45:ubb\"] = \"proc:45:ubb\";\n        BuffId[\"proc:46\"] = \"proc:46\";\n        BuffId[\"proc:47\"] = \"proc:47\";\n        BuffId[\"proc:48:base\"] = \"proc:48:base\";\n        BuffId[\"proc:48:current\"] = \"proc:48:current\";\n        BuffId[\"proc:48:fixed\"] = \"proc:48:fixed\";\n        BuffId[\"proc:48:unknown\"] = \"proc:48:unknown\";\n        BuffId[\"proc:49\"] = \"proc:49\";\n        BuffId[\"proc:50\"] = \"proc:50\";\n        BuffId[\"proc:51:atk down\"] = \"proc:51:atk down\";\n        BuffId[\"proc:51:def down\"] = \"proc:51:def down\";\n        BuffId[\"proc:51:rec down\"] = \"proc:51:rec down\";\n        BuffId[\"proc:52\"] = \"proc:52\";\n        BuffId[\"proc:53:poison\"] = \"proc:53:poison\";\n        BuffId[\"proc:53:weak\"] = \"proc:53:weak\";\n        BuffId[\"proc:53:sick\"] = \"proc:53:sick\";\n        BuffId[\"proc:53:injury\"] = \"proc:53:injury\";\n        BuffId[\"proc:53:curse\"] = \"proc:53:curse\";\n        BuffId[\"proc:53:paralysis\"] = \"proc:53:paralysis\";\n        BuffId[\"proc:54\"] = \"proc:54\";\n        BuffId[\"UNKNOWN_CONDITIONAL_EFFECT_ID\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n        BuffId[\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\"] = \"UNKNOWN_CONDITIONAL_BUFF_PARAMS\";\n        BuffId[\"buff:12:ko resistance\"] = \"buff:12:ko resistance\";\n    })(BuffId || (BuffId = {}));\n\n    /**\n     * @description Helper function for creating an entry to be used in the `sources`\n     * property of {@link IBuff}.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourceEntryFromContext(context) {\n        return `${context.source}-${context.sourceId}`;\n    }\n    /**\n     * @description Helper function for creating an entries array to be used in the `sources`\n     * property of {@link IBuff}. It handles setting the order of the sources.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourcesFromContext(context) {\n        const resultArray = Array.isArray(context.previousSources)\n            ? context.previousSources.slice()\n            : [];\n        // Ensure that the current source is at the beginning of the array\n        resultArray.unshift(createSourceEntryFromContext(context));\n        return resultArray;\n    }\n    /**\n     * @description Given the conditions in an extra skill effect, normalize them into\n     * a simpler object containing the IDs of each condition type.\n     * @param effect Extra skill effect to process conditions from.\n     * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n     */\n    function processExtraSkillConditions(effect) {\n        const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n        const aggregate = {\n            units: new Set(),\n            items: new Set(),\n            sphereTypes: new Set(),\n            unknowns: new Set(),\n        };\n        conditions.forEach((condition, index) => {\n            if ('sphere category required (raw)' in condition) {\n                aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n            }\n            else if ('item required' in condition) {\n                condition['item required'].forEach((item) => {\n                    aggregate.items.add(item);\n                });\n            }\n            else if ('unit required' in condition) {\n                condition['unit required'].forEach((unit) => {\n                    aggregate.units.add(`${unit.id}`);\n                });\n            }\n            else {\n                aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n            }\n        });\n        // filter out properties that have no entries\n        const result = Object.entries(aggregate)\n            .filter((entry) => entry[1].size > 0)\n            .reduce((acc, entry) => {\n            acc[entry[0]] = Array.from(entry[1]);\n            return acc;\n        }, {});\n        return result;\n    }\n    /**\n     * @description Extract the target type and target area of a given passive effect.\n     * @param effect Passive effect to extract target data from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns The target data for the given effect and context. There are only two possible values:\n     * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n     */\n    function getPassiveTargetData(effect, context) {\n        const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n            (effect.sp_type === SpPassiveType.EnhancePassive);\n        const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n        return {\n            targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n            targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n        };\n    }\n    /**\n     * @description Extract the target type and target area of a given proc effect.\n     * @param effect Proc effect to extract target data from.\n     * @returns The target data for the given effect and context.\n     */\n    function getProcTargetData(effect) {\n        return {\n            targetArea: effect['target area'],\n            targetType: effect['target type'],\n        };\n    }\n    /**\n     * @description Try to parse the given value into a number or return a value if it is not a number.\n     * @param value Value to parse into a number.\n     * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n     * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n     */\n    function parseNumberOrDefault(value, defaultValue = 0) {\n        return (value !== null && !isNaN(value)) ? +value : defaultValue;\n    }\n    /**\n     * @description Create an object denoting values that cannot be processed yet. To be used\n     * in the `value` property of `IBuff` as needed.\n     * @param params Array of values that cannot be processed yet.\n     * @param startIndex The first index before which we know how to process an effect's values.\n     * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n     */\n    function createUnknownParamsValue(params = [], startIndex = 0) {\n        let hasValue = false;\n        const result = params\n            .reduce((acc, value, index) => {\n            if (value && value !== '0') {\n                acc[`param_${startIndex + index}`] = value;\n                hasValue = true;\n            }\n            return acc;\n        }, {});\n        return hasValue ? result : (void 0);\n    }\n    /**\n     * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n     * @param source Source value to check.\n     * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n     * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n     * bonded super brave burst, or bonded dual brave burst.\n     */\n    function buffSourceIsBurstType(source) {\n        return !!source && [\n            BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n            BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n        ].includes(source);\n    }\n    function createUnknownParamsEntryFromExtraParams(extraParams, startIndex, injectionContext) {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    }\n    function createNoParamsEntry({ originalId, sources }) {\n        return {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        };\n    }\n\n    let mapping;\n    /**\n     * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of proc IDs to functions.\n     */\n    function getProcEffectToBuffMapping(reload) {\n        if (!mapping || reload) {\n            mapping = new Map();\n            setMapping(mapping);\n        }\n        return mapping;\n    }\n    /**\n     * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping(map) {\n        const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const effectDelay = effect['effect delay time(ms)/frame'];\n            return { targetData, sources, effectDelay };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const splitEffectWithUnknownProcParamsProperty = (effect) => {\n            const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n            return splitEffectParams({ params: rawParams });\n        };\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n            effectDelay,\n            sources, value: unknownParams }, targetData));\n        const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n            sources, value: {\n                buffs,\n                duration,\n            } }, targetData));\n        const createNoParamsEntry = ({ originalId, sources, }) => ({\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        });\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n        };\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        /**\n         * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n         * checked if all other known values in the effect are 0.\n         * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n         * @param turnDuration Parsed turn duration value to check.\n         * @param injectionContext Object whose main use is for injecting methods in testing.\n         * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n         */\n        const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n            let result = turnDuration !== 0;\n            if (result) {\n                result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n            }\n            return result;\n        };\n        /**\n         * @description Helper function to get attack information common across most attacks from the conversion context.\n         * @param context Given context that may contain attack information like damage frames.\n         * @returns Extracted attack information from the context (with defaults where applicable).\n         */\n        const getAttackInformationFromContext = (context) => {\n            const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n            const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n            return {\n                hits,\n                distribution,\n            };\n        };\n        const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                value = parseParamValue(rawValue);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect[effectValueKey]);\n                turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [buffId],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:1', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'healerRec%': 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                let recX, recY;\n                let extraParams;\n                [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n                params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['heal low'];\n                params.healHigh = effect['heal high'];\n                params['healerRec%'] = effect['rec added% (from healer)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const results = [];\n            if (params.healHigh !== 0 || params.healLow !== 0) {\n                results.push(Object.assign({ id: 'proc:2', originalId,\n                    sources,\n                    effectDelay, value: params }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'targetRec%': 0,\n                turnDuration: '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let rec;\n                let extraParams;\n                [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['gradual heal low'];\n                params.healHigh = effect['gradual heal high'];\n                params['targetRec%'] = effect['rec added% (from target)'];\n                params.turnDuration = effect['gradual heal turns (8)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n            const results = [];\n            if (hasAnyHealValues) {\n                results.push(Object.assign({ id: 'proc:3', originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: {\n                        healLow: params.healLow,\n                        healHigh: params.healHigh,\n                        'targetRec%': params['targetRec%'],\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:3'],\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('bb bc fill' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill']);\n                }\n                if ('bb bc fill%' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n                }\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                element: BuffConditionElement.All,\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        params[statType] = parseNumberOrDefault(effect[effectKey]);\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData);\n                        if (params.element !== BuffConditionElement.All) {\n                            buffEntry.conditions = {\n                                targetElements: [params.element],\n                            };\n                        }\n                        results.push(buffEntry);\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('6', (effect, context, injectionContext) => {\n            const originalId = '6';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                turnDuration: '0',\n            };\n            const dropRateProperties = ['bc', 'hc', 'item'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.bc = effect['bc drop rate% buff (10)'];\n                params.hc = effect['hc drop rate% buff (9)'];\n                params.item = effect['item drop rate% buff (11)'];\n                params.turnDuration = effect['drop buff rate turns'];\n            }\n            dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n            const results = [];\n            if (hasAnyRates) {\n                dropRateProperties.forEach((key) => {\n                    const value = params[key];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:6:${key}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('7', (effect, context, injectionContext) => {\n            const originalId = '7';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHpPercent = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:7', originalId,\n                    sources,\n                    effectDelay, value: recoveredHpPercent }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const originalId = '8';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatHpBoost = 0;\n            let percentHpBoost = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n                flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n                percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('max hp increase' in effect) {\n                    flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n                }\n                if ('max hp% increase' in effect) {\n                    percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n                }\n            }\n            const results = [];\n            if (flatHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:flat', originalId,\n                    sources,\n                    effectDelay, value: flatHpBoost }, targetData));\n            }\n            if (percentHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:percent', originalId,\n                    sources,\n                    effectDelay, value: percentHpBoost }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            const originalId = '9';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const STAT_TYPE_MAPPING = {\n                0: 'atk',\n                1: 'def',\n                2: 'rec',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const params = {\n                element: BuffConditionElement.All,\n                statReductionEntries: [],\n                turnDuration: 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n                [\n                    [statType1, value1, procChance1],\n                    [statType2, value2, procChance2],\n                ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                    const statType = parseNumberOrDefault(rawStatType) - 1;\n                    const value = parseNumberOrDefault(rawValue);\n                    const chance = parseNumberOrDefault(rawProcChance);\n                    if (statType === 3) { // all stats\n                        params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                            stat,\n                            value,\n                            chance,\n                        })));\n                    }\n                    else {\n                        params.statReductionEntries.push({\n                            stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                            value,\n                            chance,\n                        });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                ['buff #1', 'buff #2'].forEach((buffKey) => {\n                    const entry = effect[buffKey];\n                    if (entry) {\n                        const chance = parseNumberOrDefault(entry['proc chance%']);\n                        const keys = Object.keys(entry);\n                        coreStatProperties.forEach((statType) => {\n                            const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                            if (effectKey) {\n                                params.statReductionEntries.push({\n                                    stat: statType,\n                                    value: parseNumberOrDefault(entry[effectKey]),\n                                    chance,\n                                });\n                            }\n                        });\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            let hasAnyValues = false;\n            params.statReductionEntries.forEach(({ stat, value, chance }) => {\n                if (value !== 0 || chance !== 0) {\n                    hasAnyValues = true;\n                    const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n            if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            const originalId = '10';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 8);\n                const extraParams = splitParams.slice(8);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    if (`remove ${ailment}` in effect) { // mainly for items\n                        curedAilments.push(ailment);\n                    }\n                });\n                if ('remove all status ailments' in effect) {\n                    curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                let params = splitEffectParams(effect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:${ailment}`, originalId,\n                sources,\n                effectDelay, value: chance }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let reviveToHp = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n                reviveToHp = parseNumberOrDefault(rawReviveToHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:12', originalId,\n                    sources,\n                    effectDelay, value: reviveToHp }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const originalId = '13';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hits = 0;\n            const { distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawHits;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n                hits = parseNumberOrDefault(rawHits);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                hits = parseNumberOrDefault(effect.hits);\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push({\n                    id: 'proc:13',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }),\n                    targetType: targetData.targetType,\n                    targetArea: TargetArea.Random,\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n                'drainLow%': '0',\n                'drainHigh%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n                params['drainLow%'] = effect['hp drain% low'];\n                params['drainHigh%'] = effect['hp drain% high'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:14', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let mitigation = 0;\n            let element;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                mitigation = parseNumberOrDefault(rawMitigation);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n                element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n                if (mitigationKey) {\n                    mitigation = parseNumberOrDefault(effect[mitigationKey]);\n                }\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (mitigation !== 0) {\n                results.push(Object.assign({ id: `proc:16:${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            const originalId = '17';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        resistances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:17:${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:17:${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('18', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'dmg% reduction',\n                effectTurnDurationKey: 'dmg% reduction turns (36)',\n                buffId: 'proc:18',\n                originalId: '18',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'increase bb gauge gradual',\n                effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'proc:19',\n                originalId: '19',\n            });\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const originalId = '20';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let fillLow = 0;\n            let fillHigh = 0;\n            let chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFillLow, rawFillHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(effect['bc fill when attacked low']);\n                fillHigh = parseNumberOrDefault(effect['bc fill when attacked high']);\n                chance = parseNumberOrDefault(effect['bc fill when attacked%']);\n                turnDuration = parseNumberOrDefault(effect['bc fill when attacked turns (38)']);\n            }\n            const hasAnyFillValues = fillLow !== 0 || fillHigh !== 0;\n            const results = [];\n            if (hasAnyFillValues) {\n                results.push(Object.assign({ id: 'proc:20', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, conditions: {\n                        whenAttacked: true,\n                    }, value: {\n                        fillLow,\n                        fillHigh,\n                        chance,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:20'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('22', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'defense% ignore',\n                effectTurnDurationKey: 'defense% ignore turns (39)',\n                buffId: 'proc:22',\n                originalId: '22',\n            });\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                value = parseNumberOrDefault(params[0]);\n                turnDuration = parseNumberOrDefault(params[6]);\n                const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'proc:23', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:23'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            const originalId = '24';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let turnDuration = 0;\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawConvertedStat, rawTurnDuration;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                const rawConvertedStat = effect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        stats[statType] = effect[effectKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['% converted turns']);\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:24:${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: {\n                            convertedStat,\n                            value,\n                        } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:24:${statKey}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            const originalId = '26';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n                turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'proc:26', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:26'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            const originalId = '27';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'hpDamageLow%': '0',\n                'hpDamageHigh%': '0',\n                'hpDamageChance%': '0',\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else {\n                params['hpDamageLow%'] = effect['hp% damage low'];\n                params['hpDamageHigh%'] = effect['hp% damage high'];\n                params['hpDamageChance%'] = effect['hp% damage chance%'];\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:27', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            let value = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                value = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['fixed damage']);\n            }\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || value !== 0) {\n                const entry = Object.assign({ id: 'proc:28', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (value !== 0) {\n                    entry.value.value = value;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            const originalId = '29';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let attackElements = [];\n            let unknownParams;\n            if (effect.params) {\n                let element1, element2, element3;\n                let extraParams;\n                [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                [element1, element2, element3].forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                    unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n                });\n            }\n            else {\n                if (Array.isArray(effect['bb elements'])) {\n                    attackElements = effect['bb elements'].slice();\n                }\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n                const entry = Object.assign({ id: 'proc:29', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData);\n                if (attackElements.length > 0) {\n                    entry.value.elements = attackElements;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let elements = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                elements = params\n                    .slice(0, 6)\n                    .filter((p) => p !== '0')\n                    .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n                turnDuration = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                if ('elements added' in effect) {\n                    if (Array.isArray(effect['elements added'])) {\n                        elements = effect['elements added'];\n                    }\n                    else {\n                        elements = [BuffConditionElement.Unknown];\n                    }\n                }\n                turnDuration = parseNumberOrDefault(effect['elements added turns']);\n            }\n            const results = [];\n            const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n            if (elements.length > 0) {\n                elements.forEach((inputElement) => {\n                    const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                    results.push(Object.assign({ id: `proc:30:${sanitizedElement}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration }, targetData));\n                });\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('increase bb gauge' in effect) {\n                    flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n                }\n                // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n                // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            const originalId = '32';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let element;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, ...extraParams] = splitEffectParams(effect);\n                if (rawElement && rawElement !== '0') {\n                    element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                const effectElement = effect['set attack element attribute'];\n                if (effectElement) {\n                    const sanitizedElement = Object.values(ELEMENT_MAPPING).find((e) => effectElement === e);\n                    if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                        element = sanitizedElement;\n                    }\n                    else {\n                        element = BuffConditionElement.Unknown;\n                    }\n                }\n            }\n            const results = [];\n            if (element) {\n                results.push(Object.assign({ id: `proc:32:${element}`, originalId,\n                    sources,\n                    effectDelay, value: true }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                chance = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(effect['clear buff chance%']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:33', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            const originalId = '34';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatDrainLow = 0, flatDrainHigh = 0;\n            let percentDrainLow = 0, percentDrainHigh = 0;\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n                flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n                flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n                percentDrainLow = parseNumberOrDefault(rawPercentLow);\n                percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n                flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n                percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n                percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n                chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n            }\n            const results = [];\n            if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:flat', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: flatDrainLow,\n                        drainHigh: flatDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:percent', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: percentDrainLow,\n                        drainHigh: percentDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'invalidate LS chance%',\n                effectTurnDurationKey: 'invalidate LS turns (60)',\n                buffId: 'proc:36',\n                originalId: '36',\n            });\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const positionX = parseNumberOrDefault(rawPositionX);\n            const positionY = parseNumberOrDefault(rawPositionY);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const results = [];\n            if (summonGroup || summonId) {\n                results.push(Object.assign({ id: 'proc:37', originalId,\n                    sources,\n                    effectDelay, value: {\n                        summonGroup,\n                        summonId,\n                        positionX,\n                        positionY,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('38', (effect, context, injectionContext) => {\n            const originalId = '38';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 9);\n                const extraParams = splitParams.slice(9);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else if (Array.isArray(effect['ailments cured'])) {\n                const effectAilmentsCured = effect['ailments cured'];\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                    if (effectAilmentsCured.includes(effectKey)) {\n                        curedAilments.push(ailment);\n                    }\n                });\n                if (effectAilmentsCured.length > curedAilments.length) {\n                    const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                    for (let i = 0; i < unknownAilmentCount; ++i) {\n                        curedAilments.push(Ailment.Unknown);\n                    }\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('39', (effect, context, injectionContext) => {\n            const originalId = '39';\n            const ELEMENT_MAPPING = {\n                1: UnitElement.Fire,\n                2: UnitElement.Water,\n                3: UnitElement.Earth,\n                4: UnitElement.Thunder,\n                5: UnitElement.Light,\n                6: UnitElement.Dark,\n            };\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const elements = [];\n            let mitigation = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                const rawElementsMitigated = params.slice(0, 6);\n                mitigation = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                rawElementsMitigated.forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        elements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                Object.values(ELEMENT_MAPPING).forEach((element) => {\n                    if (effect[`mitigate ${element} attacks`]) {\n                        elements.push(element);\n                    }\n                });\n                mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n                turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n            }\n            const results = [];\n            if (elements.length > 0) {\n                elements.forEach((element) => {\n                    results.push(Object.assign({ id: `proc:39:${element}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: mitigation }, targetData));\n                });\n            }\n            else if (mitigation !== 0) {\n                results.push(Object.assign({ id: 'proc:39:unknown', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                for (let index = 0; index < 8; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n                turnDuration = parseNumberOrDefault(params[8]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken% buff';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = `${ailment} buff`;\n                    }\n                    else {\n                        effectKey = `${ailment}% buff`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:${ailment}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: chance }, targetData)));\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    duration: turnDuration,\n                    buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:${a}`),\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const params = {\n                'atkLow%': rawModLow,\n                'atkHigh%': rawModHigh,\n                flatAtk: rawFlatAtk,\n            };\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:42', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            const originalId = '43';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let overdriveFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n                overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n            }\n            const results = [];\n            if (overdriveFill !== 0) {\n                results.push(Object.assign({ id: 'proc:43', originalId,\n                    sources,\n                    effectDelay, value: overdriveFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const damageParams = {\n                'atk%': '0',\n                flatAtk: '0',\n                'dmg%': '0',\n            };\n            let affectsElement = false, unitIndex = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n                [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n                unitIndex = parseNumberOrDefault(rawUnitIndex);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                damageParams['atk%'] = effect['dot atk%'];\n                damageParams.flatAtk = effect['dot flat atk'];\n                damageParams['dmg%'] = effect['dot dmg%'];\n                affectsElement = !!(effect['dot element affected']);\n                unitIndex = parseNumberOrDefault(effect['dot unit index']);\n                turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n            }\n            const filteredDamageParams = Object.entries(damageParams)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (Object.keys(filteredDamageParams).length > 0) {\n                results.push(Object.assign({ id: 'proc:44', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                        unitIndex }) }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:44'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('45', (effect, context, injectionContext) => {\n            const originalId = '45';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let bb = 0, sbb = 0, ubb = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                bb = parseNumberOrDefault(rawBb);\n                sbb = parseNumberOrDefault(rawSbb);\n                ubb = parseNumberOrDefault(rawUbb);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                bb = parseNumberOrDefault(effect['bb atk% buff']);\n                sbb = parseNumberOrDefault(effect['sbb atk% buff']);\n                ubb = parseNumberOrDefault(effect['ubb atk% buff']);\n                turnDuration = parseNumberOrDefault(effect['buff turns (72)']);\n            }\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:bb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:sbb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:ubb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: ubb }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:45:${type}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('46', (effect, context, injectionContext) => {\n            const originalId = '46';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawHpLow, rawHpHigh, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const hpLow = parseNumberOrDefault(rawHpLow);\n            const hpHigh = parseNumberOrDefault(rawHpHigh);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (hpLow !== 0 || hpHigh !== 0 || hits !== 0 || distribution !== 0) {\n                const entry = Object.assign({ id: 'proc:46', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (hpLow !== 0 || hpHigh !== 0) {\n                    entry.value = {\n                        'hpDamageLow%': hpLow,\n                        'hpDamageHigh%': hpHigh,\n                        hits,\n                        distribution,\n                    };\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('47', (effect, context, injectionContext) => {\n            const originalId = '47';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'baseAtk%': '0',\n                'addedAtk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let proportionalMode = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawMaxAttackValue, rawProportionalMode;\n                [params['baseAtk%'], rawMaxAttackValue, rawProportionalMode, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                params['addedAtk%'] = parseNumberOrDefault(rawMaxAttackValue) - parseNumberOrDefault(params['baseAtk%']);\n                proportionalMode = rawProportionalMode === '1' ? 'lost' : 'remaining';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['baseAtk%'] = effect['bb base atk%'];\n                params['addedAtk%'] = effect['bb added atk% based on hp'];\n                proportionalMode = effect['bb added atk% proportional to hp'] || 'unknown';\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:47', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { proportionalMode,\n                        hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('48', (effect, context, injectionContext) => {\n            const originalId = '48';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawBasePercentHpLow, rawBasePercentHpHigh, rawCurrentPercentHpLow, rawCurrentPercentHpHigh, rawFixedDamage, rawChance, rawIsLethal, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const basePercentHpLow = parseNumberOrDefault(rawBasePercentHpLow);\n            const basePercentHpHigh = parseNumberOrDefault(rawBasePercentHpHigh);\n            const currentPercentHpLow = parseNumberOrDefault(rawCurrentPercentHpLow);\n            const currentPercentHpHigh = parseNumberOrDefault(rawCurrentPercentHpHigh);\n            const fixedDamage = parseNumberOrDefault(rawFixedDamage);\n            const chance = parseNumberOrDefault(rawChance);\n            const isLethal = rawIsLethal === '1';\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            /**\n             * Current assumption is that each set of parameters results in a separate attack\n             * due to no known skills having more than one of each variant.\n             */\n            const results = [];\n            const createAttackOfType = (type, valueProperties) => (Object.assign({ id: `proc:48:${type}`, originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, valueProperties), { isLethal,\n                    chance,\n                    hits,\n                    distribution }) }, targetData));\n            if (basePercentHpLow !== 0 || basePercentHpHigh !== 0) {\n                results.push(createAttackOfType('base', {\n                    'hpDamageLow%': basePercentHpLow,\n                    'hpDamageHigh%': basePercentHpHigh,\n                }));\n            }\n            if (currentPercentHpLow !== 0 || currentPercentHpHigh !== 0) {\n                results.push(createAttackOfType('current', {\n                    'hpDamageLow%': currentPercentHpLow,\n                    'hpDamageHigh%': currentPercentHpHigh,\n                }));\n            }\n            if (fixedDamage !== 0) {\n                results.push(createAttackOfType('fixed', {\n                    value: fixedDamage,\n                }));\n            }\n            if (results.length === 0 && (hits !== 0 || distribution !== 0)) {\n                results.push(createAttackOfType('unknown', {}));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('49', (effect, context, injectionContext) => {\n            const originalId = '49';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawChance, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const chance = parseNumberOrDefault(rawChance);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:49', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('50', (effect, context, injectionContext) => {\n            const originalId = '50';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawDamageLow, rawDamageHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const reflectedDamageLow = parseNumberOrDefault(rawDamageLow);\n            const reflectedDamageHigh = parseNumberOrDefault(rawDamageHigh);\n            const chance = parseNumberOrDefault(rawChance);\n            const turnDuration = parseNumberOrDefault(rawTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const hasAnyRangeValues = reflectedDamageLow !== 0 || reflectedDamageHigh !== 0;\n            const results = [];\n            if (hasAnyRangeValues) {\n                results.push(Object.assign({ id: 'proc:50', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        'reflectedDamageLow%': reflectedDamageLow,\n                        'reflectedDamageHigh%': reflectedDamageHigh,\n                        chance,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:50'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('51', (effect, context, injectionContext) => {\n            const originalId = '51';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedReductions = [];\n            let debuffTurnDuration = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                [\n                    { type: Ailment.AttackReduction, reductionValue: parseNumberOrDefault(params[0]), chance: parseNumberOrDefault(params[3]) },\n                    { type: Ailment.DefenseReduction, reductionValue: parseNumberOrDefault(params[1]), chance: parseNumberOrDefault(params[4]) },\n                    { type: Ailment.RecoveryReduction, reductionValue: parseNumberOrDefault(params[2]), chance: parseNumberOrDefault(params[5]) },\n                ].forEach(({ type, reductionValue, chance }) => {\n                    if (reductionValue !== 0 || chance !== 0) {\n                        inflictedReductions.push({ type, reductionValue, chance });\n                    }\n                });\n                debuffTurnDuration = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                [\n                    { type: Ailment.AttackReduction, reductionValueKey: 'inflict atk% debuff (2)', chanceKey: 'inflict atk% debuff chance% (74)' },\n                    { type: Ailment.DefenseReduction, reductionValueKey: 'inflict def% debuff (4)', chanceKey: 'inflict def% debuff chance% (75)' },\n                    { type: Ailment.RecoveryReduction, reductionValueKey: 'inflict rec% debuff (6)', chanceKey: 'inflict rec% debuff chance% (76)' },\n                ].forEach(({ type, reductionValueKey, chanceKey }) => {\n                    const reductionValue = parseNumberOrDefault(effect[reductionValueKey]);\n                    const chance = parseNumberOrDefault(effect[chanceKey]);\n                    if (reductionValue !== 0 || chance !== 0) {\n                        inflictedReductions.push({ type, reductionValue, chance });\n                    }\n                });\n                debuffTurnDuration = parseNumberOrDefault(effect['stat% debuff turns']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedReductions.map(({ type, reductionValue, chance }) => (Object.assign({ id: `proc:51:${type}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                } }, targetData)));\n            if (results.length === 0 && (isTurnDurationBuff(context, turnDuration, injectionContext) || isTurnDurationBuff(context, debuffTurnDuration, injectionContext))) {\n                // manually create turn duration buff to account for debuff turn duration\n                results.push(Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n                    sources, value: {\n                        buffs: [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction].map((a) => `proc:51:${a}`),\n                        duration: turnDuration,\n                        debuffTurnDuration: debuffTurnDuration,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('52', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'bb gauge fill rate% buff',\n                effectTurnDurationKey: 'buff turns (77)',\n                buffId: 'proc:52',\n                originalId: '52',\n            });\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            const originalId = '53';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const inflictionChances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        inflictionChances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['counter inflict ailment turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(inflictionChances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:53:${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:53:${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('54', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'crit multiplier%',\n                effectTurnDurationKey: 'buff turns (84)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n                buffId: 'proc:54',\n                originalId: '54',\n            });\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given proc effect.\n     */\n    function defaultConversionFunction(effect, context) {\n        const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n                originalId: id,\n                effectDelay: effect['effect delay time(ms)/frame'],\n                targetType: effect['target type'],\n                targetArea: effect['target area'],\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given proc effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Proc effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given proc effect object.\n     */\n    function convertProcEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isProcEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction(effect, context);\n    }\n\n    let mapping$1;\n    function getConditionalEffectToBuffMapping(reload) {\n        if (!mapping$1 || reload) {\n            mapping$1 = new Map();\n            setMapping$1(mapping$1);\n        }\n        return mapping$1;\n    }\n    function setMapping$1(map) {\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, }) => ({\n            id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n            originalId,\n            sources,\n            value: unknownParams,\n        });\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                }));\n            }\n        };\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const [rawRecoverValue, ...extraParams] = effect.params.split('&');\n            const recoverValue = parseNumberOrDefault(rawRecoverValue);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [{\n                    id: 'buff:12:ko resistance',\n                    originalId,\n                    sources,\n                    duration: effect.turnDuration,\n                    value: recoverValue,\n                }];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n            });\n            return results;\n        });\n    }\n\n    function defaultConversionFunction$1(effect, context) {\n        const id = effect.id || KNOWN_CONDITIONAL_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given conditional effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Conditional effect to extract buffs from\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertConditionalEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const conversionFunction = getConditionalEffectToBuffMapping(context.reloadMapping).get(effect.id);\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$1(effect, context);\n    }\n\n    let mapping$2;\n    /**\n     * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of passive IDs to functions.\n     */\n    function getPassiveEffectToBuffMapping(reload) {\n        if (!mapping$2 || reload) {\n            mapping$2 = new Map();\n            setMapping$2(mapping$2);\n        }\n        return mapping$2;\n    }\n    /**\n     * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$2(map) {\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n            X: BuffConditionElement.OmniParadigm,\n        };\n        const TYPE_MAPPING = {\n            1: UnitType.Lord,\n            2: UnitType.Anima,\n            3: UnitType.Breaker,\n            4: UnitType.Guardian,\n            5: UnitType.Oracle,\n            6: UnitType.Rex,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n        const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n        const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n            const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            return { conditionInfo, targetData, sources };\n        };\n        const convertConditionalEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n            const conversionFunction = (injectionContext && injectionContext.convertConditionalEffectToBuffs) || convertConditionalEffectToBuffs;\n            return conversionFunction(effect, context);\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n            sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n        const createNoParamsEntry = ({ originalId, sources, }) => ({\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        });\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n        };\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        let ThresholdType;\n        (function (ThresholdType) {\n            ThresholdType[\"Hp\"] = \"hp\";\n            ThresholdType[\"Bb\"] = \"bb gauge\";\n        })(ThresholdType || (ThresholdType = {}));\n        const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n            return {\n                threshold: parseNumberOrDefault(rawThreshold),\n                requireAbove: rawRequireAboveFlag === '1',\n                type: thresholdType,\n            };\n        };\n        const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n            let threshold = 0, requireAbove = false;\n            if (`${thresholdType} above % ${suffix}` in effect) {\n                threshold = parseNumberOrDefault(effect[`${thresholdType} above % ${suffix}`]);\n                requireAbove = true;\n            }\n            else {\n                threshold = parseNumberOrDefault(effect[`${thresholdType} below % ${suffix}`]);\n                requireAbove = false;\n            }\n            return { threshold, requireAbove, type: thresholdType };\n        };\n        const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n            let conditions;\n            if (type === ThresholdType.Hp) {\n                if (requireAbove) {\n                    conditions = { hpGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { hpLessThanOrEqualTo: threshold };\n                }\n            }\n            else if (type === ThresholdType.Bb) {\n                if (requireAbove) {\n                    conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { bbGaugeLessThanOrEqualTo: threshold };\n                }\n            }\n            return conditions;\n        };\n        const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let value = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseParamValue(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect[effectKey]);\n            }\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let valueLow, valueHigh, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                valueLow = parseParamValue(rawLowValue);\n                valueHigh = parseParamValue(rawHighValue);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n                valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n                chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n            }\n            const results = [];\n            if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources, value: {\n                        [buffKeyLow]: valueLow,\n                        [buffKeyHigh]: valueHigh,\n                        chance,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                elements: [],\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let element1, element2;\n                [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                [element1, element2].forEach((elementValue) => {\n                    if (elementValue && elementValue !== '0') {\n                        stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                if (Array.isArray(typedEffect['elements buffed'])) {\n                    stats.elements = typedEffect['elements buffed'];\n                }\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId,\n                sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n            if (stats.elements.length > 0) {\n                stats.elements.forEach((element) => {\n                    STATS_ORDER.forEach((stat) => {\n                        const value = parseNumberOrDefault(stats[stat]);\n                        if (value !== 0) {\n                            results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                        }\n                    });\n                });\n            }\n            else {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                    }\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                unitType: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let unitType;\n                [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                if (unitType && unitType !== '0') {\n                    stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.unitType = typedEffect['unit type buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetUnitType = stats.unitType || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:3:${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:4:${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let element;\n            let mitigation = '0';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n                if (element !== BuffConditionElement.Unknown) {\n                    mitigation = typedEffect[`${element} resist%`];\n                }\n            }\n            const value = parseNumberOrDefault(mitigation);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:5:${element}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'dmg% mitigation',\n                buffId: 'passive:8',\n                originalId: '8',\n            });\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bc fill per turn',\n                buffId: 'passive:9',\n                originalId: '9',\n            });\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'hc effectiveness%',\n                buffId: 'passive:10',\n                originalId: '10',\n            });\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:11:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    const entry = Object.assign({ id: `passive:12:${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '13',\n                effectKeyLow: 'bc fill on enemy defeat low',\n                effectKeyHigh: 'bc fill on enemy defeat high',\n                effectKeyChance: 'bc fill on enemy defeat%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                buffId: 'passive:13',\n            });\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageReduction, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                damageReduction = parseNumberOrDefault(rawReduction);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n                chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n            }\n            const results = [];\n            if (damageReduction !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:14', originalId,\n                    sources, value: {\n                        value: damageReduction,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('15', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '15',\n                effectKeyLow: 'hp% recover on enemy defeat low',\n                effectKeyHigh: 'hp% recover on enemy defeat high',\n                effectKeyChance: 'hp% recover on enemy defeat chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                defaultEffectChance: 100,\n                buffId: 'passive:15',\n            });\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n                healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:16', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '17',\n                effectKeyLow: 'hp drain% low',\n                effectKeyHigh: 'hp drain% high',\n                effectKeyChance: 'hp drain chance%',\n                buffKeyLow: 'drainHealLow',\n                buffKeyHigh: 'drainHealHigh',\n                buffId: 'passive:17',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            const originalId = '19';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:19:${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const originalId = '20';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                let params = splitEffectParams(typedEffect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(typedEffect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = [];\n            inflictedAilments.forEach(({ ailment, chance }) => {\n                if (chance !== 0) {\n                    results.push(Object.assign({ id: `passive:20:${ailment}`, originalId,\n                        sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('21', (effect, context, injectionContext) => {\n            const originalId = '21';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let rawDuration, extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['first x turns atk% (1)'];\n                stats.def = typedEffect['first x turns def% (3)'];\n                stats.rec = typedEffect['first x turns rec% (5)'];\n                stats.crit = typedEffect['first x turns crit% (7)'];\n                turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:21:${stat}`, originalId,\n                        sources,\n                        value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let fillLow, fillHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n                fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n            }\n            const results = [];\n            if (fillLow !== 0 || fillHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:23', originalId,\n                    sources, value: {\n                        fillLow,\n                        fillHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '24',\n                effectKeyLow: 'dmg% to hp when attacked low',\n                effectKeyHigh: 'dmg% to hp when attacked high',\n                effectKeyChance: 'dmg% to hp when attacked chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:24',\n            });\n        });\n        map.set('25', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '25',\n                effectKeyLow: 'bc fill when attacked low',\n                effectKeyHigh: 'bc fill when attacked high',\n                effectKeyChance: 'bc fill when attacked%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:25',\n            });\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '26',\n                effectKeyLow: 'dmg% reflect low',\n                effectKeyHigh: 'dmg% reflect high',\n                effectKeyChance: 'dmg% reflect chance%',\n                buffKeyLow: 'damageReflectLow',\n                buffKeyHigh: 'damageReflectHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:26',\n            });\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'target% chance',\n                buffId: 'passive:27',\n                originalId: '27',\n            });\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let value = 0;\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseNumberOrDefault(rawValue);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect['target% chance']);\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n            }\n            const results = [];\n            if (value !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                const entry = Object.assign({ id: 'passive:28', originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'ignore def%',\n                buffId: 'passive:29',\n                originalId: '29',\n            });\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:30:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let sparkDamageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawSparkDamageBoost;\n                [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n                });\n            }\n            const results = [];\n            if (sparkDamageBoost !== 0) {\n                results.push(Object.assign({ id: 'passive:31:damage', originalId,\n                    sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:31:${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bb gauge fill rate%',\n                buffId: 'passive:32',\n                originalId: '32',\n            });\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh, addedRec;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n                healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n                addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:33', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                        'addedRec%': addedRec,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'crit multiplier%',\n                buffId: 'passive:34',\n                originalId: '34',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            });\n        });\n        map.set('35', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '35',\n                effectKeyLow: 'bc fill when attacking low',\n                effectKeyHigh: 'bc fill when attacking high',\n                effectKeyChance: 'bc fill when attacking%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onNormalAttack: true }),\n                buffId: 'passive:35',\n            });\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            const originalId = '36';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let additionalActions = 0, damageModifier = 0, chance = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                additionalActions = parseNumberOrDefault(rawAdditionalActions);\n                damageModifier = parseNumberOrDefault(rawDamageModifier);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n            }\n            const results = [];\n            if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:36', originalId,\n                    sources, value: {\n                        additionalActions,\n                        damageModifier,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let hitIncreasePerHit = 0, extraHitDamage = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'passive:37', originalId,\n                    sources, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawConvertedStat;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const rawConvertedStat = typedEffect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = `${statType}% buff`;\n                    if (effectKey in typedEffect) {\n                        stats[statType] = typedEffect[effectKey];\n                    }\n                });\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:40:${stat}`, originalId,\n                        sources, value: {\n                            convertedStat,\n                            value,\n                        }, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('41', (effect, context, injectionContext) => {\n            const originalId = '41';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                minimumElements: '0',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.minimumElements = typedEffect['unique elements required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const minimumElements = parseNumberOrDefault(stats.minimumElements);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:41:${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minumumUniqueElements: minimumElements }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const GENDER_MAPPING = {\n                0: UnitGender.Other,\n                1: UnitGender.Male,\n                2: UnitGender.Female,\n            };\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                gender: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawGender;\n                [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.gender = typedEffect['gender required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetGender = stats.gender || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:42:${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'take 1 dmg%',\n                buffId: 'passive:43',\n                originalId: '43',\n            });\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp buff'];\n                stats.atk = typedEffect['atk buff'];\n                stats.def = typedEffect['def buff'];\n                stats.rec = typedEffect['rec buff'];\n                stats.crit = typedEffect['crit buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:44:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('45', (effect, context, injectionContext) => {\n            const originalId = '45';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let baseResist = 0, buffResist = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n                baseResist = parseNumberOrDefault(rawBaseResist);\n                buffResist = parseNumberOrDefault(rawBuffResist);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                baseResist = parseNumberOrDefault(typedEffect['base crit% resist']);\n                buffResist = parseNumberOrDefault(typedEffect['buff crit% resist']);\n            }\n            const results = [];\n            if (baseResist !== 0) {\n                results.push(Object.assign({ id: 'passive:45:base', originalId,\n                    sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buffResist !== 0) {\n                results.push(Object.assign({ id: 'passive:45:buff', originalId,\n                    sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('46', (effect, context, injectionContext) => {\n            const originalId = '46';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const availableStats = ['atk', 'def', 'rec'];\n            const stats = [];\n            let proportionalMode = 'unknown';\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                availableStats.forEach((stat, index) => {\n                    const baseValue = parseNumberOrDefault(params[index * 2]);\n                    const addedValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                    if (baseValue !== 0 || addedValue !== 0) {\n                        stats.push({\n                            stat,\n                            baseValue,\n                            addedValue,\n                        });\n                    }\n                });\n                proportionalMode = params[6] === '1' ? 'lost' : 'remaining';\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                availableStats.forEach((stat) => {\n                    const baseValue = parseNumberOrDefault(typedEffect[`${stat}% base buff`]);\n                    const addedValue = parseNumberOrDefault(typedEffect[`${stat}% extra buff based on hp`]);\n                    if (baseValue !== 0 || addedValue !== 0) {\n                        stats.push({\n                            stat,\n                            baseValue,\n                            addedValue,\n                        });\n                    }\n                });\n                proportionalMode = typedEffect['buff proportional to hp'] || 'unknown';\n            }\n            const results = stats.map(({ stat, baseValue, addedValue }) => (Object.assign({ id: `passive:46:${stat}`, originalId,\n                sources, value: {\n                    baseValue,\n                    addedValue,\n                    proportionalMode,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('47', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '47',\n                effectKeyLow: 'bc fill on spark low',\n                effectKeyHigh: 'bc fill on spark high',\n                effectKeyChance: 'bc fill on spark%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'passive:47',\n            });\n        });\n        map.set('48', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'reduced bb bc cost%',\n                buffId: 'passive:48',\n                originalId: '48',\n            });\n        });\n        map.set('49', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '49',\n                effectKeyLow: 'reduced bb bc use% low',\n                effectKeyHigh: 'reduced bb bc use% high',\n                effectKeyChance: 'reduced bb bc use chance%',\n                buffKeyLow: 'reducedUseLow%',\n                buffKeyHigh: 'reducedUseHigh%',\n                buffId: 'passive:49',\n            });\n        });\n        map.set('50', (effect, context, injectionContext) => {\n            const originalId = '50';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let damageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                damageBoost = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`${element} units do extra elemental weakness dmg`]);\n                damageBoost = parseNumberOrDefault(typedEffect['elemental weakness multiplier%']);\n            }\n            let results = [];\n            if (damageBoost !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:50:${element}`, originalId,\n                    sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:50:unknown', originalId,\n                        sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            const originalId = '53';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let ResistType;\n            (function (ResistType) {\n                ResistType[\"CriticalDamage\"] = \"critical-damage\";\n                ResistType[\"ElementDamage\"] = \"element-damage\";\n                ResistType[\"CriticalHitRate\"] = \"critical-rate\";\n            })(ResistType || (ResistType = {}));\n            const resistances = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseCritChanceResist, rawBuffCritChanceResist, ...extraParams] = splitEffectParams(typedEffect);\n                [\n                    { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                    { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                    { resistType: ResistType.CriticalHitRate, base: parseNumberOrDefault(rawBaseCritChanceResist), buff: parseNumberOrDefault(rawBuffCritChanceResist) },\n                ].forEach(({ resistType, base, buff }) => {\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                [\n                    { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist%', buffKey: 'crit dmg buffed damage resist%' },\n                    { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist%', buffKey: 'strong buffed element damage resist%' },\n                    { resistType: ResistType.CriticalHitRate, baseKey: 'crit chance base resist%', buffKey: 'crit chance buffed resist%' },\n                ].forEach(({ resistType, baseKey, buffKey }) => {\n                    const base = parseNumberOrDefault(typedEffect[baseKey]);\n                    const buff = parseNumberOrDefault(typedEffect[buffKey]);\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n            }\n            const results = [];\n            resistances.forEach(({ resistType, base, buff }) => {\n                if (base !== 0) {\n                    results.push(Object.assign({ id: `passive:53:${resistType}-base`, originalId,\n                        sources, value: base, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n                if (buff !== 0) {\n                    results.push(Object.assign({ id: `passive:53:${resistType}-buff`, originalId,\n                        sources, value: buff, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('55', (effect, context, injectionContext) => {\n            const originalId = '55';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const params = splitEffectParams(typedEffect);\n            const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                id: params[0],\n                params: params[1],\n                turnDuration: parseNumberOrDefault(params[5]),\n            }, context, injectionContext);\n            const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], params[4], ThresholdType.Hp);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(['0,0', params[2], '0,0', ...params.slice(5)], 0, injectionContext);\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            const results = [];\n            if (triggeredBuffs.length > 0) {\n                results.push(Object.assign({ id: 'passive:55:hp condition', originalId,\n                    sources, value: triggeredBuffs, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given passive effect.\n     */\n    function defaultConversionFunction$2(effect, context) {\n        const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given passive effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Passive effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertPassiveEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isPassiveEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$2(effect, context);\n    }\n\n    const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'TURN_DURATION_MODIFICATION': {\n            id: BuffId.TURN_DURATION_MODIFICATION,\n            name: 'Passive Turn Duration Modification',\n            stat: UnitStat.turnDurationModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [\n                (buff && buff.value &&\n                    buff.value.duration &&\n                    buff.value.duration < 0) ?\n                    IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n            ],\n        }, 'NO_PARAMS_SPECIFIED': {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            name: 'No Parameters Specified',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PASSIVE_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            name: 'Unknown Passive Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n            name: 'Unknown Passive Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'passive:1:hp': {\n            id: BuffId['passive:1:hp'],\n            name: 'Passive HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:1:atk': {\n            id: BuffId['passive:1:atk'],\n            name: 'Passive Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:1:def': {\n            id: BuffId['passive:1:def'],\n            name: 'Passive Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:1:rec': {\n            id: BuffId['passive:1:rec'],\n            name: 'Passive Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:1:crit': {\n            id: BuffId['passive:1:crit'],\n            name: 'Passive Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        } }, (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:2:hp': {\n                id: BuffId['passive:2:hp'],\n                name: 'Passive Elemental HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:2:atk': {\n                id: BuffId['passive:2:atk'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:2:def': {\n                id: BuffId['passive:2:def'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:2:rec': {\n                id: BuffId['passive:2:rec'],\n                name: 'Passive Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:2:crit': {\n                id: BuffId['passive:2:crit'],\n                name: 'Passive Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let unitType = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        unitType = buff.conditions.targetUnitType || '';\n                    }\n                }\n                if (typeof unitType !== 'string' || !unitType) {\n                    unitType = 'unknown';\n                }\n                let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n                if (!unitType || !(iconKey in IconId)) {\n                    iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:3:hp': {\n                id: BuffId['passive:3:hp'],\n                name: 'Passive Type-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:3:atk': {\n                id: BuffId['passive:3:atk'],\n                name: 'Passive Type-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:3:def': {\n                id: BuffId['passive:3:def'],\n                name: 'Passive Type-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:3:rec': {\n                id: BuffId['passive:3:rec'],\n                name: 'Passive Type-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:3:crit': {\n                id: BuffId['passive:3:crit'],\n                name: 'Passive Type-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:4:poison': {\n            id: BuffId['passive:4:poison'],\n            name: 'Passive Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:4:weak': {\n            id: BuffId['passive:4:weak'],\n            name: 'Passive Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:4:sick': {\n            id: BuffId['passive:4:sick'],\n            name: 'Passive Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:4:injury': {\n            id: BuffId['passive:4:injury'],\n            name: 'Passive Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:4:curse': {\n            id: BuffId['passive:4:curse'],\n            name: 'Passive Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:4:paralysis': {\n            id: BuffId['passive:4:paralysis'],\n            name: 'Passive Paralysis Resist',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:5:fire': {\n            id: BuffId['passive:5:fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:5:water': {\n            id: BuffId['passive:5:water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:5:earth': {\n            id: BuffId['passive:5:earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:5:thunder': {\n            id: BuffId['passive:5:thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:5:light': {\n            id: BuffId['passive:5:light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:5:dark': {\n            id: BuffId['passive:5:dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:5:unknown': {\n            id: BuffId['passive:5:unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:8': {\n            id: BuffId['passive:8'],\n            name: 'Passive Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:9': {\n            id: BuffId['passive:9'],\n            name: 'Passive Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:10': {\n            id: BuffId['passive:10'],\n            name: 'Passive HC Efficacy',\n            stat: UnitStat.hcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HCREC],\n        }, 'passive:11:atk': {\n            id: BuffId['passive:11:atk'],\n            name: 'Passive HP-Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n        }, 'passive:11:def': {\n            id: BuffId['passive:11:def'],\n            name: 'Passive HP-Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n        }, 'passive:11:rec': {\n            id: BuffId['passive:11:rec'],\n            name: 'Passive HP-Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n        }, 'passive:11:crit': {\n            id: BuffId['passive:11:crit'],\n            name: 'Passive HP-Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n        }, 'passive:12:bc': {\n            id: BuffId['passive:12:bc'],\n            name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n        }, 'passive:12:hc': {\n            id: BuffId['passive:12:hc'],\n            name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n        }, 'passive:12:item': {\n            id: BuffId['passive:12:item'],\n            name: 'Passive HP-Conditional Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n        }, 'passive:12:zel': {\n            id: BuffId['passive:12:zel'],\n            name: 'Passive HP-Conditional Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n        }, 'passive:12:karma': {\n            id: BuffId['passive:12:karma'],\n            name: 'Passive HP-Conditional Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n        }, 'passive:13': {\n            id: BuffId['passive:13'],\n            name: 'Passive BC Fill on Enemy Defeat',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:14': {\n            id: BuffId['passive:14'],\n            name: 'Passive Damage Reduction (Chance)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:15': {\n            id: BuffId['passive:15'],\n            name: 'Passive Heal on Enemy Defeat',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:16': {\n            id: BuffId['passive:16'],\n            name: 'Passive Heal on Battle Win',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:17': {\n            id: BuffId['passive:17'],\n            name: 'HP Absorption',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPABS],\n        }, 'passive:19:bc': {\n            id: BuffId['passive:19:bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'passive:19:hc': {\n            id: BuffId['passive:19:hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'passive:19:item': {\n            id: BuffId['passive:19:item'],\n            name: 'Passive Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'passive:19:zel': {\n            id: BuffId['passive:19:zel'],\n            name: 'Passive Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n        }, 'passive:19:karma': {\n            id: BuffId['passive:19:karma'],\n            name: 'Passive Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n        }, 'passive:20:poison': {\n            id: BuffId['passive:20:poison'],\n            name: 'Passive Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'passive:20:weak': {\n            id: BuffId['passive:20:weak'],\n            name: 'Passive Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'passive:20:sick': {\n            id: BuffId['passive:20:sick'],\n            name: 'Passive Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'passive:20:injury': {\n            id: BuffId['passive:20:injury'],\n            name: 'Passive Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'passive:20:curse': {\n            id: BuffId['passive:20:curse'],\n            name: 'Passive Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'passive:20:paralysis': {\n            id: BuffId['passive:20:paralysis'],\n            name: 'Passive Paralysis Infliction',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'passive:20:atk down': {\n            id: BuffId['passive:20:atk down'],\n            name: 'Passive Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'passive:20:def down': {\n            id: BuffId['passive:20:def down'],\n            name: 'Passive Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'passive:20:rec down': {\n            id: BuffId['passive:20:rec down'],\n            name: 'Passive Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'passive:20:unknown': {\n            id: BuffId['passive:20:unknown'],\n            name: 'Passive Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'passive:21:atk': {\n            id: BuffId['passive:21:atk'],\n            name: 'Attack Boost for X Turns',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:21:def': {\n            id: BuffId['passive:21:def'],\n            name: 'Defense Boost for X Turns',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:21:rec': {\n            id: BuffId['passive:21:rec'],\n            name: 'Recovery Boost for X Turns',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:21:crit': {\n            id: BuffId['passive:21:crit'],\n            name: 'Critical Hit Rate Boost for X Turns',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:23': {\n            id: BuffId['passive:23'],\n            name: 'Passive BC Fill on Battle Win',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:24': {\n            id: BuffId['passive:24'],\n            name: 'Passive Heal when Attacked',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'passive:25': {\n            id: BuffId['passive:25'],\n            name: 'Passive BC Fill when Attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:26': {\n            id: BuffId['passive:26'],\n            name: 'Passive Damage Counter (Chance)',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'passive:27': {\n            id: BuffId['passive:27'],\n            name: 'Passive Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n        }, 'passive:28': {\n            id: BuffId['passive:28'],\n            name: 'Passive HP-Conditional Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n        }, 'passive:29': {\n            id: BuffId['passive:29'],\n            name: 'Passive Defense Ignore (Chance)',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'passive:30:atk': {\n            id: BuffId['passive:30:atk'],\n            name: 'Passive BB Gauge Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n        }, 'passive:30:def': {\n            id: BuffId['passive:30:def'],\n            name: 'Passive BB Gauge Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n        }, 'passive:30:rec': {\n            id: BuffId['passive:30:rec'],\n            name: 'Passive BB Gauge Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n        }, 'passive:30:crit': {\n            id: BuffId['passive:30:crit'],\n            name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n        }, 'passive:31:damage': {\n            id: BuffId['passive:31:damage'],\n            name: 'Passive Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'passive:31:bc': {\n            id: BuffId['passive:31:bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n        }, 'passive:31:hc': {\n            id: BuffId['passive:31:hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n        }, 'passive:31:item': {\n            id: BuffId['passive:31:item'],\n            name: 'Passive Item Drop Rate Boost during Spark',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n        }, 'passive:31:zel': {\n            id: BuffId['passive:31:zel'],\n            name: 'Passive Zel Drop Rate Boost during Spark',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n        }, 'passive:31:karma': {\n            id: BuffId['passive:31:karma'],\n            name: 'Passive Karma Drop Rate Boost during Spark',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n        }, 'passive:32': {\n            id: BuffId['passive:32'],\n            name: 'Passive BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'passive:33': {\n            id: BuffId['passive:33'],\n            name: 'Passive Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:34': {\n            id: BuffId['passive:34'],\n            name: 'Passive Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'passive:35': {\n            id: BuffId['passive:35'],\n            name: 'Passive BC Fill when Normal Attacking',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:36': {\n            id: BuffId['passive:36'],\n            name: 'Passive Extra Action',\n            stat: UnitStat.extraAction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DBLSTRIKE],\n        }, 'passive:37': {\n            id: BuffId['passive:37'],\n            name: 'Passive Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'passive:40:atk': {\n            id: BuffId['passive:40:atk'],\n            name: 'Passive Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'passive:40:def': {\n            id: BuffId['passive:40:def'],\n            name: 'Passive Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'passive:40:rec': {\n            id: BuffId['passive:40:rec'],\n            name: 'Passive Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'passive:41:hp': {\n            id: BuffId['passive:41:hp'],\n            name: 'Passive Element Squad-based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n        }, 'passive:41:atk': {\n            id: BuffId['passive:41:atk'],\n            name: 'Passive Element Squad-based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n        }, 'passive:41:def': {\n            id: BuffId['passive:41:def'],\n            name: 'Passive Element Squad-based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n        }, 'passive:41:rec': {\n            id: BuffId['passive:41:rec'],\n            name: 'Passive Element Squad-based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n        }, 'passive:41:crit': {\n            id: BuffId['passive:41:crit'],\n            name: 'Passive Element Squad-based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let gender = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        gender = buff.conditions.targetGender || '';\n                    }\n                }\n                if (typeof gender !== 'string' || !gender) {\n                    gender = 'unknown';\n                }\n                let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n                if (!gender || !(iconKey in IconId)) {\n                    iconKey = `BUFF_GENDER${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:42:hp': {\n                id: BuffId['passive:42:hp'],\n                name: 'Passive Gender-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:42:atk': {\n                id: BuffId['passive:42:atk'],\n                name: 'Passive Gender-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:42:def': {\n                id: BuffId['passive:42:def'],\n                name: 'Passive Gender-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:42:rec': {\n                id: BuffId['passive:42:rec'],\n                name: 'Passive Gender-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:42:crit': {\n                id: BuffId['passive:42:crit'],\n                name: 'Passive Gender-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:43': {\n            id: BuffId['passive:43'],\n            name: 'Passive Damage Reduction To One (Chance)',\n            stat: UnitStat.reduceDamageToOne,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n        }, 'passive:44:hp': {\n            id: BuffId['passive:44:hp'],\n            name: 'Passive Flat HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:44:atk': {\n            id: BuffId['passive:44:atk'],\n            name: 'Passive Flat Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:44:def': {\n            id: BuffId['passive:44:def'],\n            name: 'Passive Flat Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:44:rec': {\n            id: BuffId['passive:44:rec'],\n            name: 'Passive Flat Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:44:crit': {\n            id: BuffId['passive:44:crit'],\n            name: 'Passive Flat Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:45:base': {\n            id: BuffId['passive:45:base'],\n            name: 'Passive Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:45:buff': {\n            id: BuffId['passive:45:buff'],\n            name: 'Passive Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:46:atk': {\n            id: BuffId['passive:46:atk'],\n            name: 'Passive Attack Boost Relative to HP',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDATKDOWN : IconId.BUFF_HPSCALEDATKUP],\n        }, 'passive:46:def': {\n            id: BuffId['passive:46:def'],\n            name: 'Passive Defense Boost Relative to HP',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDDEFDOWN : IconId.BUFF_HPSCALEDDEFUP],\n        }, 'passive:46:rec': {\n            id: BuffId['passive:46:rec'],\n            name: 'Passive Recovery Boost Relative to HP',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDRECDOWN : IconId.BUFF_HPSCALEDRECUP],\n        }, 'passive:47': {\n            id: BuffId['passive:47'],\n            name: 'Passive BC Fill on Spark',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKBBUP],\n        }, 'passive:48': {\n            id: BuffId['passive:48'],\n            name: 'Passive BC Cost Reduction',\n            stat: UnitStat.bcCostReduction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBCOST_REDUCTION],\n        }, 'passive:49': {\n            id: BuffId['passive:49'],\n            name: 'Passive BB Gauge Consumption Reduction',\n            stat: UnitStat.bbGaugeConsumptionReduction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:50:fire': {\n            id: BuffId['passive:50:fire'],\n            name: 'Passive Fire Elemental Damage Boost',\n            stat: UnitStat.fireElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGUP],\n        }, 'passive:50:water': {\n            id: BuffId['passive:50:water'],\n            name: 'Passive Water Elemental Damage Boost',\n            stat: UnitStat.waterElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGUP],\n        }, 'passive:50:earth': {\n            id: BuffId['passive:50:earth'],\n            name: 'Passive Earth Elemental Damage Boost',\n            stat: UnitStat.earthElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGUP],\n        }, 'passive:50:thunder': {\n            id: BuffId['passive:50:thunder'],\n            name: 'Passive Thunder Elemental Damage Boost',\n            stat: UnitStat.thunderElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGUP],\n        }, 'passive:50:light': {\n            id: BuffId['passive:50:light'],\n            name: 'Passive Light Elemental Damage Boost',\n            stat: UnitStat.lightElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGUP],\n        }, 'passive:50:dark': {\n            id: BuffId['passive:50:dark'],\n            name: 'Passive Dark Elemental Damage Boost',\n            stat: UnitStat.darkElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGUP],\n        }, 'passive:50:unknown': {\n            id: BuffId['passive:50:unknown'],\n            name: 'Passive Elemental Damage Boost (Unspecified Element)',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGUP],\n        }, 'passive:53:critical-damage-base': {\n            id: BuffId['passive:53:critical-damage-base'],\n            name: 'Passive Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:critical-damage-buff': {\n            id: BuffId['passive:53:critical-damage-buff'],\n            name: 'Passive Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:element-damage-base': {\n            id: BuffId['passive:53:element-damage-base'],\n            name: 'Passive Base Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'passive:53:element-damage-buff': {\n            id: BuffId['passive:53:element-damage-buff'],\n            name: 'Passive Buffed Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'passive:53:critical-rate-base': {\n            id: BuffId['passive:53:critical-rate-base'],\n            name: 'Passive Base Critical Hit Rate Reduction',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:critical-rate-buff': {\n            id: BuffId['passive:53:critical-rate-buff'],\n            name: 'Passive Buffed Critical Hit Rate Reduction',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:55:hp condition': {\n            id: BuffId['passive:55:hp condition'],\n            name: 'Passive Conditional Effect based on HP Threshold',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'UNKNOWN_PROC_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            name: 'Unknown Proc Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n            name: 'Unknown Proc Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'proc:1': {\n            id: BuffId['proc:1'],\n            name: 'Regular Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:2': {\n            id: BuffId['proc:2'],\n            name: 'Burst Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:3': {\n            id: BuffId['proc:3'],\n            name: 'Active Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:4:flat': {\n            id: BuffId['proc:4:flat'],\n            name: 'Burst BC Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:4:percent': {\n            id: BuffId['proc:4:percent'],\n            name: 'Burst BC Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:5:atk': {\n                id: BuffId['proc:5:atk'],\n                name: 'Active Regular/Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:5:def': {\n                id: BuffId['proc:5:def'],\n                name: 'Active Regular/Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:5:rec': {\n                id: BuffId['proc:5:rec'],\n                name: 'Active Regular/Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:5:crit': {\n                id: BuffId['proc:5:crit'],\n                name: 'Active Regular/Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'proc:6:bc': {\n            id: BuffId['proc:6:bc'],\n            name: 'Active Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'proc:6:hc': {\n            id: BuffId['proc:6:hc'],\n            name: 'Active Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'proc:6:item': {\n            id: BuffId['proc:6:item'],\n            name: 'Active Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'proc:7': {\n            id: BuffId['proc:7'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:8:flat': {\n            id: BuffId['proc:8:flat'],\n            name: 'Max HP Boost (Flat Amount)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        }, 'proc:8:percent': {\n            id: BuffId['proc:8:percent'],\n            name: 'Max HP Boost (Percentage)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'DOWN'; // default to down since these are reduction buffs\n                if (buff) {\n                    if (buff.value && buff.value > 0) {\n                        polarity = 'UP';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:9:atk': {\n                id: BuffId['proc:9:atk'],\n                name: 'Active Regular/Elemental Attack Reduction',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:9:def': {\n                id: BuffId['proc:9:def'],\n                name: 'Active Regular/Elemental Defense Reduction',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:9:rec': {\n                id: BuffId['proc:9:rec'],\n                name: 'Active Regular/Elemental Recovery Reduction',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:9:unknown': {\n                id: BuffId['proc:9:unknown'],\n                name: 'Active Regular/Elemental Unknown Stat Reduction',\n                stackType: BuffStackType.Active,\n                icons: () => [IconId.UNKNOWN],\n            },\n        };\n    })()), { 'proc:10:poison': {\n            id: BuffId['proc:10:poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:10:weak': {\n            id: BuffId['proc:10:weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:10:sick': {\n            id: BuffId['proc:10:sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:10:injury': {\n            id: BuffId['proc:10:injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:10:curse': {\n            id: BuffId['proc:10:curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:10:paralysis': {\n            id: BuffId['proc:10:paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:10:atk down': {\n            id: BuffId['proc:10:atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWNBLK],\n        }, 'proc:10:def down': {\n            id: BuffId['proc:10:def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWNBLK],\n        }, 'proc:10:rec down': {\n            id: BuffId['proc:10:rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWNBLK],\n        }, 'proc:10:unknown': {\n            id: BuffId['proc:10:unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:11:poison': {\n            id: BuffId['proc:11:poison'],\n            name: 'Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_POISON],\n        }, 'proc:11:weak': {\n            id: BuffId['proc:11:weak'],\n            name: 'Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_WEAK],\n        }, 'proc:11:sick': {\n            id: BuffId['proc:11:sick'],\n            name: 'Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_SICK],\n        }, 'proc:11:injury': {\n            id: BuffId['proc:11:injury'],\n            name: 'Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_INJURY],\n        }, 'proc:11:curse': {\n            id: BuffId['proc:11:curse'],\n            name: 'Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_CURSE],\n        }, 'proc:11:paralysis': {\n            id: BuffId['proc:11:paralysis'],\n            name: 'Paralysis Infliction',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_PARALYSIS],\n        }, 'proc:11:atk down': {\n            id: BuffId['proc:11:atk down'],\n            name: 'Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWN],\n        }, 'proc:11:def down': {\n            id: BuffId['proc:11:def down'],\n            name: 'Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWN],\n        }, 'proc:11:rec down': {\n            id: BuffId['proc:11:rec down'],\n            name: 'Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWN],\n        }, 'proc:11:unknown': {\n            id: BuffId['proc:11:unknown'],\n            name: 'Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.DEBUFF_AILMENT],\n        }, 'proc:12': {\n            id: BuffId['proc:12'],\n            name: 'Instant Revive (Guaranteed)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:13': {\n            id: BuffId['proc:13'],\n            name: 'Random Target Damage',\n            stackType: BuffStackType.Attack,\n            icons: () => [IconId.ATK_RT],\n        }, 'proc:14': {\n            id: BuffId['proc:14'],\n            name: 'Lifesteal Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n        }, 'proc:16:fire': {\n            id: BuffId['proc:16:fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:16:water': {\n            id: BuffId['proc:16:water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:16:earth': {\n            id: BuffId['proc:16:earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:16:thunder': {\n            id: BuffId['proc:16:thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:16:light': {\n            id: BuffId['proc:16:light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:16:dark': {\n            id: BuffId['proc:16:dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:16:all': {\n            id: BuffId['proc:16:all'],\n            name: 'Active Elemental Damage Reduction (All Elements)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:16:unknown': {\n            id: BuffId['proc:16:unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:17:poison': {\n            id: BuffId['proc:17:poison'],\n            name: 'Active Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:17:weak': {\n            id: BuffId['proc:17:weak'],\n            name: 'Active Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:17:sick': {\n            id: BuffId['proc:17:sick'],\n            name: 'Active Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:17:injury': {\n            id: BuffId['proc:17:injury'],\n            name: 'Active Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:17:curse': {\n            id: BuffId['proc:17:curse'],\n            name: 'Active Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:17:paralysis': {\n            id: BuffId['proc:17:paralysis'],\n            name: 'Active Paralysis Resist',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:18': {\n            id: BuffId['proc:18'],\n            name: 'Active Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'proc:19': {\n            id: BuffId['proc:19'],\n            name: 'Active Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:20': {\n            id: BuffId['proc:20'],\n            name: 'Active BC Fill when attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'proc:22': {\n            id: BuffId['proc:22'],\n            name: 'Active Defense Ignore',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'proc:23': {\n            id: BuffId['proc:23'],\n            name: 'Active Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'proc:24:atk': {\n            id: BuffId['proc:24:atk'],\n            name: 'Active Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'proc:24:def': {\n            id: BuffId['proc:24:def'],\n            name: 'Active Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'proc:24:rec': {\n            id: BuffId['proc:24:rec'],\n            name: 'Active Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'proc:26': {\n            id: BuffId['proc:26'],\n            name: 'Active Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'proc:27': {\n            id: BuffId['proc:27'],\n            name: 'Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:28': {\n            id: BuffId['proc:28'],\n            name: 'Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n        }, 'proc:29': {\n            id: BuffId['proc:29'],\n            name: 'Multi-Element Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n        }, 'proc:30:fire': {\n            id: BuffId['proc:30:fire'],\n            name: 'Active Added Element to Attack (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDFIRE],\n        }, 'proc:30:water': {\n            id: BuffId['proc:30:water'],\n            name: 'Active Added Element to Attack (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWATER],\n        }, 'proc:30:earth': {\n            id: BuffId['proc:30:earth'],\n            name: 'Active Added Element to Attack (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDEARTH],\n        }, 'proc:30:thunder': {\n            id: BuffId['proc:30:thunder'],\n            name: 'Active Added Element to Attack (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDTHUNDER],\n        }, 'proc:30:light': {\n            id: BuffId['proc:30:light'],\n            name: 'Active Added Element to Attack (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDLIGHT],\n        }, 'proc:30:dark': {\n            id: BuffId['proc:30:dark'],\n            name: 'Active Added Element to Attack (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDARK],\n        }, 'proc:30:unknown': {\n            id: BuffId['proc:30:unknown'],\n            name: 'Active Added Element to Attack (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDELEMENT],\n        }, 'proc:31:flat': {\n            id: BuffId['proc:31:flat'],\n            name: 'Burst BC Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:31:percent': {\n            id: BuffId['proc:31:percent'],\n            name: 'Burst BC Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:32:fire': {\n            id: BuffId['proc:32:fire'],\n            name: 'Element Shift (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTFIRE],\n        }, 'proc:32:water': {\n            id: BuffId['proc:32:water'],\n            name: 'Element Shift (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTWATER],\n        }, 'proc:32:earth': {\n            id: BuffId['proc:32:earth'],\n            name: 'Element Shift (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTEARTH],\n        }, 'proc:32:thunder': {\n            id: BuffId['proc:32:thunder'],\n            name: 'Element Shift (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTTHUNDER],\n        }, 'proc:32:light': {\n            id: BuffId['proc:32:light'],\n            name: 'Element Shift (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTLIGHT],\n        }, 'proc:32:dark': {\n            id: BuffId['proc:32:dark'],\n            name: 'Element Shift (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTDARK],\n        }, 'proc:32:unknown': {\n            id: BuffId['proc:32:unknown'],\n            name: 'Element Shift (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTELEMENT],\n        }, 'proc:33': {\n            id: BuffId['proc:33'],\n            name: 'Buff Removal',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_REMOVEBUFF],\n        }, 'proc:34:flat': {\n            id: BuffId['proc:34:flat'],\n            name: 'Burst BB Gauge Drain (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:34:percent': {\n            id: BuffId['proc:34:percent'],\n            name: 'Burst BB Gauge Drain (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:36': {\n            id: BuffId['proc:36'],\n            name: 'Active Leader Skill Lock',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DISABLELS],\n        }, 'proc:37': {\n            id: BuffId['proc:37'],\n            name: 'Summon Unit',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SUMMONUNIT],\n        }, 'proc:38:poison': {\n            id: BuffId['proc:38:poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:38:weak': {\n            id: BuffId['proc:38:weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:38:sick': {\n            id: BuffId['proc:38:sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:38:injury': {\n            id: BuffId['proc:38:injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:38:curse': {\n            id: BuffId['proc:38:curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:38:paralysis': {\n            id: BuffId['proc:38:paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:38:atk down': {\n            id: BuffId['proc:38:atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWNBLK],\n        }, 'proc:38:def down': {\n            id: BuffId['proc:38:def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWNBLK],\n        }, 'proc:38:rec down': {\n            id: BuffId['proc:38:rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWNBLK],\n        }, 'proc:38:unknown': {\n            id: BuffId['proc:38:unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:39:fire': {\n            id: BuffId['proc:39:fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:39:water': {\n            id: BuffId['proc:39:water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:39:earth': {\n            id: BuffId['proc:39:earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:39:thunder': {\n            id: BuffId['proc:39:thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:39:light': {\n            id: BuffId['proc:39:light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:39:dark': {\n            id: BuffId['proc:39:dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:39:unknown': {\n            id: BuffId['proc:39:unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:40:poison': {\n            id: BuffId['proc:40:poison'],\n            name: 'Active Poison Infliction Added to Attack',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'proc:40:weak': {\n            id: BuffId['proc:40:weak'],\n            name: 'Active Weak Infliction Added to Attack',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'proc:40:sick': {\n            id: BuffId['proc:40:sick'],\n            name: 'Active Sick Infliction Added to Attack',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'proc:40:injury': {\n            id: BuffId['proc:40:injury'],\n            name: 'Active Injury Infliction Added to Attack',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'proc:40:curse': {\n            id: BuffId['proc:40:curse'],\n            name: 'Active Curse Infliction Added to Attack',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'proc:40:paralysis': {\n            id: BuffId['proc:40:paralysis'],\n            name: 'Active Paralysis Infliction Added to Attack',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'proc:40:atk down': {\n            id: BuffId['proc:40:atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:40:def down': {\n            id: BuffId['proc:40:def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:40:rec down': {\n            id: BuffId['proc:40:rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:40:unknown': {\n            id: BuffId['proc:40:unknown'],\n            name: 'Active Unknown Ailment Infliction Added to Attack',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'proc:42': {\n            id: BuffId['proc:42'],\n            name: 'Sacrificial Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n        }, 'proc:43': {\n            id: BuffId['proc:43'],\n            name: 'Burst OD Gauge Fill (Percentage)',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_OVERDRIVEUP],\n        }, 'proc:44': {\n            id: BuffId['proc:44'],\n            name: 'Active Damage over Time',\n            stat: UnitStat.damageOverTime,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_TURNDMG],\n        }, 'proc:45:bb': {\n            id: BuffId['proc:45:bb'],\n            name: 'Active BB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'proc:45:sbb': {\n            id: BuffId['proc:45:sbb'],\n            name: 'Active SBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'proc:45:ubb': {\n            id: BuffId['proc:45:ubb'],\n            name: 'Active UBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'proc:46': {\n            id: BuffId['proc:46'],\n            name: 'Non-Lethal Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:47': {\n            id: BuffId['proc:47'],\n            name: 'HP Scaled Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPSCALED : IconId.ATK_AOE_HPSCALED],\n        }, 'proc:48:base': {\n            id: BuffId['proc:48:base'],\n            name: 'Piercing Proportional Damage (Base HP)',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n        }, 'proc:48:current': {\n            id: BuffId['proc:48:current'],\n            name: 'Piercing Proportional Damage (Current HP)',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n        }, 'proc:48:fixed': {\n            id: BuffId['proc:48:fixed'],\n            name: 'Piercing Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_FIXED : IconId.ATK_AOE_PIERCING_FIXED],\n        }, 'proc:48:unknown': {\n            id: BuffId['proc:48:unknown'],\n            name: 'Unknown Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:49': {\n            id: BuffId['proc:49'],\n            name: 'Instant Death (Chance)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KO],\n        }, 'proc:50': {\n            id: BuffId['proc:50'],\n            name: 'Active Damage Reflect (Chance)',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'proc:51:atk down': {\n            id: BuffId['proc:51:atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:51:def down': {\n            id: BuffId['proc:51:def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:51:rec down': {\n            id: BuffId['proc:51:rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:52': {\n            id: BuffId['proc:52'],\n            name: 'Active BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'proc:53:poison': {\n            id: BuffId['proc:53:poison'],\n            name: 'Active Poison Counter',\n            stat: UnitStat.poisonCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONCOUNTER],\n        }, 'proc:53:weak': {\n            id: BuffId['proc:53:weak'],\n            name: 'Active Weak Counter',\n            stat: UnitStat.weakCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKCOUNTER],\n        }, 'proc:53:sick': {\n            id: BuffId['proc:53:sick'],\n            name: 'Active Sick Counter',\n            stat: UnitStat.sickCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKCOUNTER],\n        }, 'proc:53:injury': {\n            id: BuffId['proc:53:injury'],\n            name: 'Active Injury Counter',\n            stat: UnitStat.injuryCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJCONTER],\n        }, 'proc:53:curse': {\n            id: BuffId['proc:53:curse'],\n            name: 'Active Curse Counter',\n            stat: UnitStat.curseCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSECOUNTER],\n        }, 'proc:53:paralysis': {\n            id: BuffId['proc:53:paralysis'],\n            name: 'Active Paralysis Counter',\n            stat: UnitStat.paralysisCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYCOUNTER],\n        }, 'proc:54': {\n            id: BuffId['proc:54'],\n            name: 'Active Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'UNKNOWN_CONDITIONAL_EFFECT_ID': {\n            id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n            name: 'Unknown Conditional Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_CONDITIONAL_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n            name: 'Unknown Conditional Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'buff:12:ko resistance': {\n            id: BuffId['buff:12:ko resistance'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        } }));\n\n    /**\n     * @description Get the associated metadata entry for a given buff ID.\n     * @param id Buff ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n     * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    var index$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        convertProcEffectToBuffs: convertProcEffectToBuffs,\n        convertPassiveEffectToBuffs: convertPassiveEffectToBuffs,\n        convertConditionalEffectToBuffs: convertConditionalEffectToBuffs,\n        get BuffSource () { return BuffSource; },\n        get BuffStackType () { return BuffStackType; },\n        BUFF_METADATA: BUFF_METADATA,\n        getMetadataForBuff: getMetadataForBuff\n    });\n\n    var index$2 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        constants: constants,\n        parsers: index$1,\n        getMetadataForProc: getMetadataForProc,\n        getMetadataForPassive: getMetadataForPassive,\n        isAttackingProcId: isAttackingProcId,\n        getNameForProc: getNameForProc,\n        getNameForPassive: getNameForPassive,\n        isProcEffect: isProcEffect,\n        isPassiveEffect: isPassiveEffect,\n        combineEffectsAndDamageFrames: combineEffectsAndDamageFrames,\n        getEffectId: getEffectId,\n        getEffectName: getEffectName,\n        get ProcBuffType () { return ProcBuffType; },\n        PASSIVE_METADATA: PASSIVE_METADATA,\n        PROC_METADATA: PROC_METADATA\n    });\n\n    /**\n     * @description Get the effects of a given extra skill.\n     * @param skill Extra skill to get the effects of.\n     * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForExtraSkill(skill) {\n        return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n    }\n\n    var index$3 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForExtraSkill: getEffectsForExtraSkill\n    });\n\n    /**\n     * @description Get the effects of a given item.\n     * @param item Item to get the effects of, if any are present,\n     * @returns Effects of the given item if they exist, an empty array otherwise.\n     */\n    function getEffectsForItem(item) {\n        let result = [];\n        if (item && item.effect) {\n            if (Array.isArray(item.effect)) {\n                result = item.effect;\n            }\n            else if (Array.isArray(item.effect.effect)) {\n                const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n                result = effect.map(e => {\n                    // apply target data to each effect\n                    const fullProcEffect = Object.assign({}, e);\n                    fullProcEffect['target area'] = targetArea;\n                    fullProcEffect['target type'] = targetType;\n                    return fullProcEffect;\n                });\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given item thumbnail filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents the thumbnail image for a given item.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getItemImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/item/${fileName || ''}`;\n    }\n\n    var index$4 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForItem: getEffectsForItem,\n        getItemImageUrl: getItemImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given leader skill.\n     * @param skill Leader skill to get the effects of.\n     * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForLeaderSkill(skill) {\n        return skill && Array.isArray(skill.effects) ? skill.effects : [];\n    }\n\n    var index$5 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForLeaderSkill: getEffectsForLeaderSkill\n    });\n\n    /**\n     * @description Generate the file names for each of the image type for a given unit ID.\n     * @param id Unit ID to use to generate the file names.\n     * @param suffix Optional parameter that's useful for things like alternate art.\n     * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n     */\n    function getUnitImageFileNames(id, suffix = '') {\n        const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n        return {\n            spritesheet: `unit_anime_${fileNameSuffix}`,\n            battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n            guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n            fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n        };\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given unit filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents an image for a given unit.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getUnitImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n    }\n\n    var index$6 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getUnitImageFileNames: getUnitImageFileNames,\n        getUnitImageUrl: getUnitImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given SP Enhancement Entry.\n     * @param entry SP Enhancement Entry to get the effects of.\n     * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n     */\n    function getEffectsForSpEnhancement(entry) {\n        const result = [];\n        if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n            const effectWrappers = entry.skill.effects;\n            effectWrappers.forEach(effectWrapper => {\n                Object.keys(effectWrapper).forEach(spType => {\n                    const originalEffect = effectWrapper[spType];\n                    const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                    result.push(unwrappedEffect);\n                });\n            });\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the associated category name with a given category ID.\n     * @param categoryId Category ID to get the name of.\n     * @returns Name of the given category ID or the string 'Unknown'.\n     */\n    function getSpCategoryName(categoryId) {\n        let result;\n        const numericalCategoryId = +categoryId;\n        switch (numericalCategoryId) {\n            case 1:\n                result = SpCategoryName['Parameter Boost'];\n                break;\n            case 2:\n                result = SpCategoryName.Spark;\n                break;\n            case 3:\n                result = SpCategoryName['Critical Hits'];\n                break;\n            case 4:\n                result = SpCategoryName['Attack Boost'];\n                break;\n            case 5:\n                result = SpCategoryName['BB Gauge'];\n                break;\n            case 6:\n                result = SpCategoryName['HP Recovery'];\n                break;\n            case 7:\n                result = SpCategoryName.Drops;\n                break;\n            case 8:\n                result = SpCategoryName['Ailment Resistance'];\n                break;\n            case 9:\n                result = SpCategoryName['Ailment Infliction'];\n                break;\n            case 10:\n                result = SpCategoryName['Damage Reduction'];\n                break;\n            case 11:\n                result = SpCategoryName.Special;\n                break;\n            default:\n                result = SpCategoryName.Unknown;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n\n    /**\n     * @description Get the corresponding character code for a given index.\n     * It expects an index between 0 and 61 inclusive; will return an empty string if\n     * the given value is outside of the range.\n     * @param index Index of an SP entry in a given skills array.\n     * @returns Corresponding single alphanumeric character to the given index\n     * or an empty string if the index is invalid.\n     */\n    function spIndexToCode(index) {\n        let result = '';\n        let correspondingCharacterCode = -1;\n        if (Number.isInteger(index)) {\n            if (index >= 0 && index <= 25) { // A-Z\n                correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (index >= 26 && index <= 51) { // a-z\n                correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n            }\n            else if (index >= 52 && index <= 61) { // 0-9\n                correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n            }\n        }\n        if (correspondingCharacterCode !== -1) {\n            result = String.fromCharCode(correspondingCharacterCode);\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the corresponding index for a given character code.\n     * It expects an alphanumeric character and will return -1 otherwise.\n     * @param code Character code an SP entry in a given skills array.\n     * @returns Corresponding index to the given character or -1 if the\n     * character is invalid.\n     */\n    function spCodeToIndex(code) {\n        let result = -1;\n        let characterCodeOffset = -1;\n        if (!!code && typeof code === 'string' && code.length === 1) {\n            if (code >= 'A' && code <= 'Z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (code >= 'a' && code <= 'z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n            }\n            else if (code >= '0' && code <= '9') {\n                characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n            }\n        }\n        if (characterCodeOffset !== -1) {\n            result = code.charCodeAt(0) - characterCodeOffset;\n        }\n        return result;\n    }\n\n    /**\n     * @description Extract the ID of a string in the format of `number@actualId`. If there\n     * is no value after the @ character or if no @ character is present, the original ID is returned.\n     * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n     * @param id Original SP Enhancement Entry ID.\n     * @returns The ID of a string in the format of `number@actualId`, or the original input if\n     * there is no @ character or no value after the @ character.\n     */\n    function getSpEntryId(id) {\n        return (typeof id === 'string' && id.split('@')[1]) || id;\n    }\n\n    /**\n     * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n     * @param id SP Enhancement entry ID.\n     * @param entries Collection of SP Enhancement entries to search in.\n     * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n     */\n    function getSpEntryWithId(id, entries) {\n        const spId = getSpEntryId(id);\n        return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n     * @param entry SP Entry to get dependencies for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n     */\n    function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependencies = [];\n        if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n            const dependencyId = getSpEntryId(entry.dependency);\n            const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n            if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n                addedEntries.add(dependencyEntry);\n                const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n                dependencies = [dependencyEntry].concat(subDependencies);\n            }\n        }\n        return dependencies;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n     * @param entry SP Entry to get dependents for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n     */\n    function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependents = [];\n        if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n            const entryId = entry.id;\n            dependents = allEntries\n                .filter(s => {\n                return s.dependency &&\n                    s.dependency.includes(entryId) &&\n                    !addedEntries.has(s);\n            });\n            dependents.forEach(dependent => {\n                addedEntries.add(dependent);\n                const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n                dependents = dependents.concat(subDependents);\n            });\n        }\n        return dependents;\n    }\n\n    var index$7 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForSpEnhancement: getEffectsForSpEnhancement,\n        getSpCategoryName: getSpCategoryName,\n        spIndexToCode: spIndexToCode,\n        spCodeToIndex: spCodeToIndex,\n        getSpEntryId: getSpEntryId,\n        getSpEntryWithId: getSpEntryWithId,\n        getAllDependenciesForSpEntry: getAllDependenciesForSpEntry,\n        getAllEntriesThatDependOnSpEntry: getAllEntriesThatDependOnSpEntry\n    });\n\n    /* NOTE: this file is automatically generated; do not edit this file */\n    var version = '0.7.0';\n\n    exports.buffs = index$2;\n    exports.bursts = index;\n    exports.datamineTypes = datamineTypes;\n    exports.extraSkills = index$3;\n    exports.items = index$4;\n    exports.leaderSkills = index$5;\n    exports.spEnhancements = index$7;\n    exports.units = index$6;\n    exports.version = version;\n\n    return exports;\n\n}({}));\n\n","/**\n * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get level entry from.\n * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n */\nexport default function getLevelEntryForBurst(burst, level) {\n    const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n    let levelIndex;\n    if (level !== null && !isNaN(level)) {\n        // 1-indexed\n        levelIndex = (+level - 1);\n    }\n    else {\n        // default to last entry in burst\n        levelIndex = burstEffectsByLevel.length - 1;\n    }\n    return burstEffectsByLevel[levelIndex];\n}\n","/**\n * @description Get the proc/passive ID of a given object.\n * @param effect Object to get the effect ID from.\n * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectId(effect) {\n    let resultId = '';\n    if (effect) {\n        resultId = effect['proc id'] || effect['unknown proc id'] ||\n            effect['passive id'] || effect['unknown passive id'] || '';\n    }\n    return resultId;\n}\n","export var KNOWN_PROC_ID;\n(function (KNOWN_PROC_ID) {\n    KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n    KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n})(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\nexport var KNOWN_PASSIVE_ID;\n(function (KNOWN_PASSIVE_ID) {\n    KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n    KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n})(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\nexport var KNOWN_CONDITIONAL_ID;\n(function (KNOWN_CONDITIONAL_ID) {\n    KNOWN_CONDITIONAL_ID[\"Unknown\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n})(KNOWN_CONDITIONAL_ID || (KNOWN_CONDITIONAL_ID = {}));\n","export var ProcBuffType;\n(function (ProcBuffType) {\n    ProcBuffType[\"Attack\"] = \"Attack\";\n})(ProcBuffType || (ProcBuffType = {}));\n/* eslint-disable */\n/**\n * @ignore\n */\nexport const PASSIVE_METADATA = Object.freeze({\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Parameter Boost\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Elemental Parameter Boost\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Type-Based Parameter Boost\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"Status Negation\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Damage Reduction\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Gradual BB Gauge Boost\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"HC Efficacy\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"HP-Conditional Parameter Boost\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"HP-Conditional Drop Rate Boost\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"BC Fill on Enemy Defeat\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Damage Reduction (Chance)\"\n    },\n    \"15\": {\n        \"ID\": \"15\",\n        \"Name\": \"Heal on Enemy Defeat\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Heal on Battle Victory\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"HP Absorption\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Drop Rate Boost\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"Status Infliction\"\n    },\n    \"21\": {\n        \"ID\": \"21\",\n        \"Name\": \"Parameter Boost for First X Turns\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"BC Fill on Battle Victory\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Heal when Attacked (Chance)\"\n    },\n    \"25\": {\n        \"ID\": \"25\",\n        \"Name\": \"BC Fill when Hit (Chance)\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Damage Counter (Chance)\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Increased Target Chance\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Decreased Target Chance\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Defense Ignore (Chance)\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"BB Conditional Parameter Boost\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"BC Efficacy\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Heal over Time\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"Critical Damage Boost\"\n    },\n    \"35\": {\n        \"ID\": \"35\",\n        \"Name\": \"BC Fill when Normal Attacking\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Extra Action\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Hit Count Boost\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Parameter Conversion\"\n    },\n    \"41\": {\n        \"ID\": \"41\",\n        \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"Gender Parameter Boost\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Damage Reduction to 1\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Flat Parameter Boost\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"Critical Damage Negation\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"BC Fill on Spark\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"BC Cost Reduction\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"BB Gauge Consumption Reduction\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Elemental Damage Boost\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Conditional Effect based on HP Threshold\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Damage Reduction when Guarding\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BC Fill when Attacked when Guarding\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BC Fill on Guard\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Elemental Damage Reduction for first X Turns\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"BB Atk Boost\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"BC Fill on Critical\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Add buff to Brave Burst\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"OD Gauge Fill Rate Boost\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"Status Counter\"\n    },\n    \"72\": {\n        \"ID\": \"72\",\n        \"Name\": \"Turn End Effects Activate at Turn Start\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\"\n    },\n    \"74\": {\n        \"ID\": \"74\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Spark Vulnerability\"\n    },\n    \"77\": {\n        \"ID\": \"77\",\n        \"Name\": \"Spark Damage Reduction\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Conditional Effect after Damage Received Threshold\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"BC Fill after Damage Received Threshold\"\n    },\n    \"80\": {\n        \"ID\": \"80\",\n        \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n    },\n    \"81\": {\n        \"ID\": \"81\",\n        \"Name\": \"BC Fill after Damage Dealt Threshold\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"Conditional Effect after BC Received Threshold\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"Conditional Effect after HC Received Threshold\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"BC Fill after HC Received Threshold\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"Conditional Effect after Spark Threshold\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Conditional Effect on Guard\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Conditional Effect on Critical\"\n    },\n    \"90\": {\n        \"ID\": \"90\",\n        \"Name\": \"Status Infliction on Critical\"\n    },\n    \"91\": {\n        \"ID\": \"91\",\n        \"Name\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Negate Defense Ignore\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Added Elements\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Normal Attacks Hit All Foes\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Player EXP Boost\"\n    },\n    \"99\": {\n        \"ID\": \"99\",\n        \"Name\": \"\"\n    },\n    \"100\": {\n        \"ID\": \"100\",\n        \"Name\": \"Spark Critical\"\n    },\n    \"101\": {\n        \"ID\": \"101\",\n        \"Name\": \"Heal on Spark\"\n    },\n    \"102\": {\n        \"ID\": \"102\",\n        \"Name\": \"Added Elements\"\n    },\n    \"103\": {\n        \"ID\": \"103\",\n        \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n    },\n    \"104\": {\n        \"ID\": \"104\",\n        \"Name\": \"Spark Boost when HP Passes Threshold\"\n    },\n    \"105\": {\n        \"ID\": \"105\",\n        \"Name\": \"Turn-Based Parameter Boost\"\n    },\n    \"106\": {\n        \"ID\": \"106\",\n        \"Name\": \"Conditional Effect after Activating Overdrive\"\n    },\n    \"107\": {\n        \"ID\": \"107\",\n        \"Name\": \"Add Effect to Leader Skill\"\n    },\n    \"109\": {\n        \"ID\": \"109\",\n        \"Name\": \"BB Gauge Reduction (Chance)\"\n    },\n    \"110\": {\n        \"ID\": \"110\",\n        \"Name\": \"BC Efficacy Reduction (Chance)\"\n    },\n    \"111\": {\n        \"ID\": \"111\",\n        \"Name\": \"Increase Brave Burst Activation Rate\"\n    },\n    \"112\": {\n        \"ID\": \"112\",\n        \"Name\": \"ABP/CBP Boost\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Conditional Effect after HP Threshold\"\n    },\n    \"114\": {\n        \"ID\": \"114\",\n        \"Name\": \"Inflict Buff when Attacked\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n    },\n    \"128\": {\n        \"ID\": \"128\",\n        \"Name\": \"Damage Reduction from Normal Attacks\"\n    },\n    \"143\": {\n        \"ID\": \"143\",\n        \"Name\": \"Break Atk Parameter Limit\"\n    },\n    \"10008\": {\n        \"ID\": \"10008\",\n        \"Name\": \"Damage Reduction from Specific Sources\"\n    },\n    \"11004\": {\n        \"ID\": \"11004\",\n        \"Name\": \"Elemental Spark Damage Boost\"\n    },\n    \"11005\": {\n        \"ID\": \"11005\",\n        \"Name\": \"Elemental Critical Damage Boost\"\n    },\n    \"11006\": {\n        \"ID\": \"11006\",\n        \"Name\": \"Summoner EXP Boost\"\n    },\n    \"11009\": {\n        \"ID\": \"11009\",\n        \"Name\": \"Effect Duration Boost\"\n    },\n    \"66,1\": {\n        \"ID\": \"66,1\",\n        \"Name\": \"\"\n    }\n});\n/**\n * @ignore\n */\nexport const PROC_METADATA = Object.freeze({\n    \"0\": {\n        \"ID\": \"0\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Regular Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Burst Heal\",\n        \"Type\": \"\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Heal over Time\",\n        \"Type\": \"\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"BB Gauge Refill\",\n        \"Type\": \"\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"Drop Rate\",\n        \"Type\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Parameter Reduction\",\n        \"Type\": \"\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"Status Cleanse\",\n        \"Type\": \"\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"Status Infliction\",\n        \"Type\": \"\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"Revive (Guaranteed)\",\n        \"Type\": \"\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"Random Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Lifesteal Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"Status Negation\",\n        \"Type\": \"\"\n    },\n    \"18\": {\n        \"ID\": \"18\",\n        \"Name\": \"Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Gradual BB Gauge Boost\",\n        \"Type\": \"\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"BC Fill on Hit\",\n        \"Type\": \"\"\n    },\n    \"22\": {\n        \"ID\": \"22\",\n        \"Name\": \"Defense Ignore\",\n        \"Type\": \"\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Hit Count Boost\",\n        \"Type\": \"\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Fixed Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Multi-Element Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"Add Elements\",\n        \"Type\": \"\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Instant BB Gauge Fill\",\n        \"Type\": \"\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"Element Shift\",\n        \"Type\": \"\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Buff Removal (Chance)\",\n        \"Type\": \"\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"BB Gauge Reduction (Chance)\",\n        \"Type\": \"\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Leader Skill Lock (Chance)\",\n        \"Type\": \"\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Summon Unit\",\n        \"Type\": \"\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"Status Cure\",\n        \"Type\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Status Infliction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Instant OD Fill\",\n        \"Type\": \"\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Damage over Time (Additional Damage)\",\n        \"Type\": \"\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"BB Atk Boost\",\n        \"Type\": \"\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Non-Lethal Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"HP Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"Piercing Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"Retire\",\n        \"Type\": \"\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Damage Counter\",\n        \"Type\": \"\"\n    },\n    \"51\": {\n        \"ID\": \"51\",\n        \"Name\": \"Parameter Reduction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"BC Efficacy\",\n        \"Type\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Status Counter\",\n        \"Type\": \"\"\n    },\n    \"54\": {\n        \"ID\": \"54\",\n        \"Name\": \"Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Elemental Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"56\": {\n        \"ID\": \"56\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"57\": {\n        \"ID\": \"57\",\n        \"Name\": \"BC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Spark Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BB Atk Reduction\",\n        \"Type\": \"\"\n    },\n    \"60\": {\n        \"ID\": \"60\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BB-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Barrier\",\n        \"Type\": \"\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Selective Buff Wipe\",\n        \"Type\": \"\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"Consecutive Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\",\n        \"Type\": \"\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Revive (Chance)\",\n        \"Type\": \"\"\n    },\n    \"67\": {\n        \"ID\": \"67\",\n        \"Name\": \"BC Fill on Spark\",\n        \"Type\": \"\"\n    },\n    \"68\": {\n        \"ID\": \"68\",\n        \"Name\": \"Damage Reduction when Guarding\",\n        \"Type\": \"\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"BC Fill on Guard\",\n        \"Type\": \"\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"BB Gauge Fill Rate Debuff\",\n        \"Type\": \"\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\",\n        \"Type\": \"\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Element Squad-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"76\": {\n        \"ID\": \"76\",\n        \"Name\": \"Extra Action\",\n        \"Type\": \"\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Self Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"Player EXP Boost\",\n        \"Type\": \"\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"83\": {\n        \"ID\": \"83\",\n        \"Name\": \"Spark Critical\",\n        \"Type\": \"\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"OD Gauge Fill Rate\",\n        \"Type\": \"\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"Heal when Attacked\",\n        \"Type\": \"\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"HP Absorption\",\n        \"Type\": \"\"\n    },\n    \"87\": {\n        \"ID\": \"87\",\n        \"Name\": \"Heal on Spark\",\n        \"Type\": \"\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Self Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Self Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Self Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"94\": {\n        \"ID\": \"94\",\n        \"Name\": \"Normal Attacks Hit All Foes\",\n        \"Type\": \"\"\n    },\n    \"95\": {\n        \"ID\": \"95\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n        \"Type\": \"\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Element Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Gradual OD Fill\",\n        \"Type\": \"\"\n    },\n    \"119\": {\n        \"ID\": \"119\",\n        \"Name\": \"Gradual BC Drain\",\n        \"Type\": \"\"\n    },\n    \"123\": {\n        \"ID\": \"123\",\n        \"Name\": \"OD Gauge Reduction\",\n        \"Type\": \"\"\n    },\n    \"126\": {\n        \"ID\": \"126\",\n        \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n        \"Type\": \"\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Lock On\",\n        \"Type\": \"\"\n    },\n    \"130\": {\n        \"ID\": \"130\",\n        \"Name\": \"Parameter Reduction Counter\",\n        \"Type\": \"\"\n    },\n    \"131\": {\n        \"ID\": \"131\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"132\": {\n        \"ID\": \"132\",\n        \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"901\": {\n        \"ID\": \"901\",\n        \"Name\": \"Raid Heal (on Map)\",\n        \"Type\": \"\"\n    },\n    \"902\": {\n        \"ID\": \"902\",\n        \"Name\": \"Raid Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"903\": {\n        \"ID\": \"903\",\n        \"Name\": \"Raid Boss Reveal\",\n        \"Type\": \"\"\n    },\n    \"905\": {\n        \"ID\": \"905\",\n        \"Name\": \"Raid Teleport\",\n        \"Type\": \"\"\n    },\n    \"906\": {\n        \"ID\": \"906\",\n        \"Name\": \"Raid Flee\",\n        \"Type\": \"\"\n    },\n    \"907\": {\n        \"ID\": \"907\",\n        \"Name\": \"Raid Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"908\": {\n        \"ID\": \"908\",\n        \"Name\": \"Raid Item Drop Rate Boost\",\n        \"Type\": \"\"\n    },\n    \"10000\": {\n        \"ID\": \"10000\",\n        \"Name\": \"Taunt\",\n        \"Type\": \"\"\n    },\n    \"10001\": {\n        \"ID\": \"10001\",\n        \"Name\": \"Stealth\",\n        \"Type\": \"\"\n    },\n    \"10002\": {\n        \"ID\": \"10002\",\n        \"Name\": \"Shield (old)\",\n        \"Type\": \"\"\n    },\n    \"10003\": {\n        \"ID\": \"10003\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"10004\": {\n        \"ID\": \"10004\",\n        \"Name\": \"Damage Immunity\",\n        \"Type\": \"\"\n    },\n    \"10005\": {\n        \"ID\": \"10005\",\n        \"Name\": \"Turn Skip (short duration)\",\n        \"Type\": \"\"\n    },\n    \"10006\": {\n        \"ID\": \"10006\",\n        \"Name\": \"Turn Skip (long duration)\",\n        \"Type\": \"\"\n    },\n    \"10007\": {\n        \"ID\": \"10007\",\n        \"Name\": \"Evasion\",\n        \"Type\": \"\"\n    },\n    \"10009\": {\n        \"ID\": \"10009\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"10012\": {\n        \"ID\": \"10012\",\n        \"Name\": \"OD Drain\",\n        \"Type\": \"\"\n    },\n    \"10015\": {\n        \"ID\": \"10015\",\n        \"Name\": \"Elemental Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"10016\": {\n        \"ID\": \"10016\",\n        \"Name\": \"Element Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"10017\": {\n        \"ID\": \"10017\",\n        \"Name\": \"Elemental Shield\",\n        \"Type\": \"\"\n    },\n    \"10018\": {\n        \"ID\": \"10018\",\n        \"Name\": \"Max HP Reduction\",\n        \"Type\": \"\"\n    },\n    \"10019\": {\n        \"ID\": \"10019\",\n        \"Name\": \"Effect Purge\",\n        \"Type\": \"\"\n    },\n    \"10020\": {\n        \"ID\": \"10020\",\n        \"Name\": \"Piercing Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"10021\": {\n        \"ID\": \"10021\",\n        \"Name\": \"Active Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10022\": {\n        \"ID\": \"10022\",\n        \"Name\": \"Passive Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10023\": {\n        \"ID\": \"10023\",\n        \"Name\": \"HC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"10025\": {\n        \"ID\": \"10025\",\n        \"Name\": \"KO Resistance Negation\",\n        \"Type\": \"\"\n    },\n    \"10026\": {\n        \"ID\": \"10026\",\n        \"Name\": \"Doom\",\n        \"Type\": \"\"\n    },\n    \"11000\": {\n        \"ID\": \"11000\",\n        \"Name\": \"Negative HP-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"11001\": {\n        \"ID\": \"11001\",\n        \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n        \"Type\": \"\"\n    },\n    \"11002\": {\n        \"ID\": \"11002\",\n        \"Name\": \"HP Limit Break, Convert to HP\",\n        \"Type\": \"\"\n    },\n    \"11003\": {\n        \"ID\": \"11003\",\n        \"Name\": \"Effect Negation\",\n        \"Type\": \"\"\n    },\n    \"70001\": {\n        \"ID\": \"70001\",\n        \"Name\": \"Mana Bubble Shield\",\n        \"Type\": \"\"\n    },\n    \"70002\": {\n        \"ID\": \"70002\",\n        \"Name\": \"Recast\",\n        \"Type\": \"\"\n    },\n    \"2-5\": {\n        \"ID\": \"2-5\",\n        \"Name\": \"Burst Heal and DEF/REC Boost\",\n        \"Type\": \"\"\n    }\n});\n","import { PROC_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given proc ID.\n * @param id Proc ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForProc(id, metadata = PROC_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\nimport { ProcBuffType } from './effect-metadata';\n/**\n * @description Determine if a given proc ID's type is an attack.\n * @param id Proc ID to check.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n */\nexport default function isAttackingProcId(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n}\n","export var Ailment;\n(function (Ailment) {\n    Ailment[\"Poison\"] = \"poison\";\n    Ailment[\"Weak\"] = \"weak\";\n    Ailment[\"Sick\"] = \"sick\";\n    Ailment[\"Injury\"] = \"injury\";\n    Ailment[\"Curse\"] = \"curse\";\n    Ailment[\"Paralysis\"] = \"paralysis\";\n    Ailment[\"AttackReduction\"] = \"atk down\";\n    Ailment[\"DefenseReduction\"] = \"def down\";\n    Ailment[\"RecoveryReduction\"] = \"rec down\";\n    Ailment[\"Unknown\"] = \"unknown\";\n})(Ailment || (Ailment = {}));\nexport var ArenaCondition;\n(function (ArenaCondition) {\n    ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n    ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n    ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n    ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n    ArenaCondition[\"hp_min\"] = \"hp_min\";\n    ArenaCondition[\"hp_max\"] = \"hp_max\";\n    ArenaCondition[\"atk_max\"] = \"atk_max\";\n    ArenaCondition[\"random\"] = \"random\";\n})(ArenaCondition || (ArenaCondition = {}));\nexport var MoveType;\n(function (MoveType) {\n    MoveType[\"Moving\"] = \"1\";\n    MoveType[\"Teleporting\"] = \"2\";\n    MoveType[\"NonMoving\"] = \"3\";\n})(MoveType || (MoveType = {}));\nexport var TargetArea;\n(function (TargetArea) {\n    TargetArea[\"Aoe\"] = \"aoe\";\n    TargetArea[\"Single\"] = \"single\";\n    TargetArea[\"Random\"] = \"random\";\n})(TargetArea || (TargetArea = {}));\nexport var TargetAreaShorthand;\n(function (TargetAreaShorthand) {\n    TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n    TargetAreaShorthand[\"Single\"] = \"ST\";\n    TargetAreaShorthand[\"Random\"] = \"RT\";\n})(TargetAreaShorthand || (TargetAreaShorthand = {}));\nexport var TargetType;\n(function (TargetType) {\n    TargetType[\"Self\"] = \"self\";\n    TargetType[\"Party\"] = \"party\";\n    TargetType[\"Enemy\"] = \"enemy\";\n})(TargetType || (TargetType = {}));\nexport var SpPassiveType;\n(function (SpPassiveType) {\n    SpPassiveType[\"AddPassive\"] = \"passive\";\n    SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n    SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n    SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n    SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n})(SpPassiveType || (SpPassiveType = {}));\nexport var SphereTypeName;\n(function (SphereTypeName) {\n    SphereTypeName[\"None\"] = \"None\";\n    SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n    SphereTypeName[\"Critical\"] = \"Critical\";\n    SphereTypeName[\"Drop\"] = \"Drop\";\n    SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n    SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n    SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n    SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n    SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n    SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n    SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n    SphereTypeName[\"Spark\"] = \"Spark\";\n    SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n    SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n    SphereTypeName[\"Special\"] = \"Special\";\n})(SphereTypeName || (SphereTypeName = {}));\nexport var SphereTypeId;\n(function (SphereTypeId) {\n    SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n    SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n    SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n    SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n    SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n    SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n    SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n    SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n    SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n    SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n    SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n    SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n    SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n    SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n    SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n})(SphereTypeId || (SphereTypeId = {}));\nexport var SpCategoryName;\n(function (SpCategoryName) {\n    SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n    SpCategoryName[\"Spark\"] = \"Spark\";\n    SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n    SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n    SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n    SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n    SpCategoryName[\"Drops\"] = \"Drops\";\n    SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n    SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n    SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n    SpCategoryName[\"Special\"] = \"Special\";\n    SpCategoryName[\"Unknown\"] = \"Unknown\";\n})(SpCategoryName || (SpCategoryName = {}));\nexport var SpCategoryId;\n(function (SpCategoryId) {\n    SpCategoryId[\"Parameter Boost\"] = \"1\";\n    SpCategoryId[\"Spark\"] = \"2\";\n    SpCategoryId[\"Critical Hits\"] = \"3\";\n    SpCategoryId[\"Attack Boost\"] = \"4\";\n    SpCategoryId[\"BB Gauge\"] = \"5\";\n    SpCategoryId[\"HP Recovery\"] = \"6\";\n    SpCategoryId[\"Drops\"] = \"7\";\n    SpCategoryId[\"Ailment Resistance\"] = \"8\";\n    SpCategoryId[\"Ailment Infliction\"] = \"9\";\n    SpCategoryId[\"Damage Reduction\"] = \"10\";\n    SpCategoryId[\"Special\"] = \"11\";\n})(SpCategoryId || (SpCategoryId = {}));\nexport var UnitAnimationKey;\n(function (UnitAnimationKey) {\n    UnitAnimationKey[\"Attack\"] = \"attack\";\n    UnitAnimationKey[\"Idle\"] = \"idle\";\n    UnitAnimationKey[\"Move\"] = \"move\";\n})(UnitAnimationKey || (UnitAnimationKey = {}));\nexport var UnitElement;\n(function (UnitElement) {\n    UnitElement[\"Fire\"] = \"fire\";\n    UnitElement[\"Water\"] = \"water\";\n    UnitElement[\"Earth\"] = \"earth\";\n    UnitElement[\"Thunder\"] = \"thunder\";\n    UnitElement[\"Light\"] = \"light\";\n    UnitElement[\"Dark\"] = \"dark\";\n})(UnitElement || (UnitElement = {}));\nexport var UnitGender;\n(function (UnitGender) {\n    UnitGender[\"Male\"] = \"male\";\n    UnitGender[\"Female\"] = \"female\";\n    UnitGender[\"Other\"] = \"other\";\n})(UnitGender || (UnitGender = {}));\nexport var UnitGettingType;\n(function (UnitGettingType) {\n    UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n    UnitGettingType[\"Farmable\"] = \"farmable\";\n    UnitGettingType[\"RareSummon\"] = \"rare summon\";\n    UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n})(UnitGettingType || (UnitGettingType = {}));\nexport var UnitKind;\n(function (UnitKind) {\n    UnitKind[\"Normal\"] = \"normal\";\n    UnitKind[\"Evolution\"] = \"evo\";\n    UnitKind[\"Enhancing\"] = \"enhancing\";\n    UnitKind[\"Sale\"] = \"sale\";\n})(UnitKind || (UnitKind = {}));\nexport var UnitType;\n(function (UnitType) {\n    UnitType[\"Lord\"] = \"lord\";\n    UnitType[\"Anima\"] = \"anima\";\n    UnitType[\"Breaker\"] = \"breaker\";\n    UnitType[\"Guardian\"] = \"guardian\";\n    UnitType[\"Oracle\"] = \"oracle\";\n    UnitType[\"Rex\"] = \"rex\";\n})(UnitType || (UnitType = {}));\nexport var ItemType;\n(function (ItemType) {\n    ItemType[\"Consumable\"] = \"consumable\";\n    ItemType[\"Material\"] = \"material\";\n    ItemType[\"Sphere\"] = \"sphere\";\n    ItemType[\"EvolutionMaterial\"] = \"evomat\";\n    ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n    ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n})(ItemType || (ItemType = {}));\nexport var MimicUnitIds;\n(function (MimicUnitIds) {\n    MimicUnitIds[\"Mimic\"] = \"60142\";\n    MimicUnitIds[\"BatMimic\"] = \"60143\";\n    MimicUnitIds[\"DragonMimic\"] = \"60144\";\n    MimicUnitIds[\"MetalMimic\"] = \"60224\";\n})(MimicUnitIds || (MimicUnitIds = {}));\n/**\n * @description Known values for the monster groups used in {@link IMimicInfo}.\n */\nexport const MimicMonsterGroupMapping = {\n    '1000': MimicUnitIds.Mimic,\n    '1100': MimicUnitIds.BatMimic,\n    '1101': MimicUnitIds.BatMimic,\n    '1200': MimicUnitIds.DragonMimic,\n    '1300': MimicUnitIds.MetalMimic,\n};\n","import getLevelEntryForBurst from './getLevelEntryForBurst';\n/**\n * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get effects from.\n * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n */\nexport default function getEffectsForBurst(burst, level) {\n    const levelEntry = getLevelEntryForBurst(burst, level);\n    return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n}\n","import getEffectId from '../buffs/getEffectId';\nimport { KNOWN_PROC_ID } from '../buffs/constants';\nimport isAttackingProcId from '../buffs/isAttackingProcId';\n/**\n * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n * @param damageFrames Damage frames that each have their own proc ID.\n * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Damage frames entry whose frames are based on the input damage frames.\n */\nexport default function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n    // relevant frames are all effects for healing or attacking\n    const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n    const relevantFrames = inputFrames.filter(frame => {\n        const procId = getEffectId(frame);\n        return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n    });\n    const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n        const keepFirstFrame = index === 0;\n        const numFrames = frameEntry['frame times'].length;\n        const damageDistribution = frameEntry['hit dmg% distribution'];\n        const frameTimes = frameEntry['frame times'];\n        for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n            acc.push({\n                damage: damageDistribution[frameIndex],\n                time: frameTimes[frameIndex],\n            });\n        }\n        return acc;\n    }, []);\n    const resultDamageFramesEntry = {\n        'effect delay time(ms)/frame': effectDelay,\n        'frame times': [],\n        'hit dmg% distribution': [],\n        'hit dmg% distribution (total)': 0,\n        hits: 0,\n    };\n    unifiedFrames.sort((a, b) => a.time - b.time)\n        .forEach(({ time, damage }) => {\n        resultDamageFramesEntry['frame times'].push(time);\n        resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n        resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n    });\n    resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n    return resultDamageFramesEntry;\n}\n","import { PASSIVE_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given passive ID.\n * @param id Passive ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\n/**\n * @description Get the associated name for a given proc ID.\n * @param id Proc ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Name of the proc ID if it exists, empty string otherwise.\n */\nexport default function getNameForProc(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","import getMetadataForPassive from './getMetadataForPassive';\n/**\n * @description Get the associated name for a given passive ID.\n * @param id Passive ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Name of the passive ID if it exists, empty string otherwise.\n */\nexport default function getNameForPassive(id, metadata) {\n    const metadataEntry = getMetadataForPassive(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","/**\n * @description Determine if a given effect object is a proc effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a proc effect based on its properties.\n */\nexport default function isProcEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n}\n","/**\n * @description Determine if a given effect object is a passive effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a passive effect based on its properties.\n */\nexport default function isPassiveEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n}\n","/**\n * @description Provides info at a glance regarding a buff's source and how it stacks.\n */\nexport var BuffStackType;\n(function (BuffStackType) {\n    /**\n     * @description The buff is activated via some skill and lasts for a number of turns.\n     * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n     * from different levels. Two possible levels of sources are:\n     * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n     * 2. Ultimate Brave Burst or Dual Brave Burst\n     */\n    BuffStackType[\"Active\"] = \"active\";\n    /**\n     * @description The buff is always active provided that the source is not nullified.\n     * Most passive buffs can stack with themselves.\n     */\n    BuffStackType[\"Passive\"] = \"passive\";\n    /**\n     * @description The buff is applied for a number of turns once a certain condition is met.\n     * Buffs of the same type are not able to stack.\n     */\n    BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n    /**\n     * @description Only one instance of the buff can be active at a time and can last indefinitely.\n     * A couple examples of this are Barrier and Max HP Boost.\n     */\n    BuffStackType[\"Singleton\"] = \"singleton\";\n    /**\n     * @description The buff's effects immediately apply to the target(s). This differs from singleton\n     * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n     * in the HP bar filling by the sum of those burst heals).\n     */\n    BuffStackType[\"Burst\"] = \"burst\";\n    /**\n     * @description A specific subset of `Burst` type buffs that deal damage to the target.\n     */\n    BuffStackType[\"Attack\"] = \"attack\";\n    /**\n     * @description Only for buffs that cannot be processed by the library yet.\n     */\n    BuffStackType[\"Unknown\"] = \"unknown\";\n})(BuffStackType || (BuffStackType = {}));\nexport var BuffSource;\n(function (BuffSource) {\n    BuffSource[\"BraveBurst\"] = \"bb\";\n    BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n    BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n    BuffSource[\"DualBraveBurst\"] = \"dbb\";\n    BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n    BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n    BuffSource[\"SpEnhancement\"] = \"sp\";\n    BuffSource[\"Item\"] = \"item\";\n    BuffSource[\"LeaderSkill\"] = \"ls\";\n    BuffSource[\"ExtraSkill\"] = \"es\";\n    /**\n     * @description Buffs that result of having a number of OE+ units in the squad.\n     */\n    BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n    /**\n     * @description Buffs based on a units type. See {@link UnitType}.\n     */\n    BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n    /**\n     * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n     * as well as ambient turn reductions present in some late-game quests.\n     */\n    BuffSource[\"Quest\"] = \"quest\";\n})(BuffSource || (BuffSource = {}));\n/**\n * @description Extra element values that can be used in addition to {@link UnitElement}.\n */\nexport var BuffConditionElement;\n(function (BuffConditionElement) {\n    BuffConditionElement[\"Unknown\"] = \"unknown\";\n    BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n    BuffConditionElement[\"All\"] = \"all\";\n})(BuffConditionElement || (BuffConditionElement = {}));\n/**\n * @description Stats on a unit that a buff can affect.\n */\nexport var UnitStat;\n(function (UnitStat) {\n    UnitStat[\"hp\"] = \"hp\";\n    UnitStat[\"atk\"] = \"atk\";\n    UnitStat[\"def\"] = \"def\";\n    UnitStat[\"rec\"] = \"rec\";\n    UnitStat[\"crit\"] = \"crit\";\n    UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n    UnitStat[\"bbGauge\"] = \"bbGauge\";\n    UnitStat[\"odGauge\"] = \"odGauge\";\n    UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n    UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n    UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n    UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n    UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n    UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n    UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n    UnitStat[\"bcCostReduction\"] = \"bcCostReduction\";\n    UnitStat[\"bbGaugeConsumptionReduction\"] = \"bbGaugeConsumptionReduction\";\n    UnitStat[\"poisonResist\"] = \"poisonResist\";\n    UnitStat[\"weakResist\"] = \"weakResist\";\n    UnitStat[\"sickResist\"] = \"sickResist\";\n    UnitStat[\"injuryResist\"] = \"injuryResist\";\n    UnitStat[\"curseResist\"] = \"curseResist\";\n    UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n    UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n    UnitStat[\"weakInflict\"] = \"weakInflict\";\n    UnitStat[\"sickInflict\"] = \"sickInflict\";\n    UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n    UnitStat[\"curseInflict\"] = \"curseInflict\";\n    UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n    UnitStat[\"poisonCounter\"] = \"poisonCounter\";\n    UnitStat[\"weakCounter\"] = \"weakCounter\";\n    UnitStat[\"sickCounter\"] = \"sickCounter\";\n    UnitStat[\"injuryCounter\"] = \"injuryCounter\";\n    UnitStat[\"curseCounter\"] = \"curseCounter\";\n    UnitStat[\"paralysisCounter\"] = \"paralysisCounter\";\n    UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n    UnitStat[\"defDownResist\"] = \"defDownResist\";\n    UnitStat[\"recDownResist\"] = \"recDownResist\";\n    UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n    UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n    UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n    UnitStat[\"mitigation\"] = \"mitigation\";\n    UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n    UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n    UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n    UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n    UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n    UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n    UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n    UnitStat[\"fireElementalDamage\"] = \"fireElementalDamage\";\n    UnitStat[\"waterElementalDamage\"] = \"waterElementalDamage\";\n    UnitStat[\"earthElementalDamage\"] = \"earthElementalDamage\";\n    UnitStat[\"thunderElementalDamage\"] = \"thunderElementalDamage\";\n    UnitStat[\"lightElementalDamage\"] = \"lightElementalDamage\";\n    UnitStat[\"darkElementalDamage\"] = \"darkElementalDamage\";\n    UnitStat[\"elementalWeaknessDamageMitigation\"] = \"elementalWeaknessDamageMitigation\";\n    UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n    UnitStat[\"koResistance\"] = \"koResistance\";\n    UnitStat[\"revive\"] = \"revive\";\n    UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n    UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n    UnitStat[\"criticalDamageMitigation\"] = \"criticalDamageMitigation\";\n    UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n    UnitStat[\"bbAtk\"] = \"bbAtk\";\n    UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n    UnitStat[\"damageReflect\"] = \"damageReflect\";\n    UnitStat[\"targetingModification\"] = \"targetingModification\";\n    UnitStat[\"elementModification\"] = \"elementModification\";\n    UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n    UnitStat[\"extraAction\"] = \"extraAction\";\n    UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n})(UnitStat || (UnitStat = {}));\nexport var IconId;\n(function (IconId) {\n    IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n    IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n    IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n    IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n    IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n    IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n    IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n    IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n    IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n    IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n    IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n    IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n    IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n    IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n    IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n    IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n    IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n    IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n    IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n    IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n    IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n    IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n    IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n    IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n    IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n    IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n    IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n    IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n    IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n    IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n    IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n    IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n    IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n    IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n    IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n    IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n    IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n    IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n    IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n    IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n    IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n    IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n    IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n    IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n    IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n    IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n    IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n    IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n    IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n    IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n    IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n    IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n    IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n    IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n    IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n    IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n    IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n    IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n    IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n    IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n    IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n    IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n    IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n    IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n    IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n    IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n    IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n    IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n    IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n    IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n    IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n    IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n    IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n    IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n    IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n    IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n    IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n    IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n    IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n    IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n    IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n    IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n    IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n    IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n    IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n    IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n    IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n    IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n    IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n    IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n    IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n    IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n    IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n    IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n    IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n    IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n    IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n    IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n    IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n    IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n    IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n    IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n    IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n    IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n    IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n    IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n    IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n    IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n    IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n    IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n    IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n    IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n    IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n    IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n    IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n    IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n    IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n    IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n    IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n    IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n    IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n    IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n    IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n    IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n    IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n    IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n    IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n    IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n    IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n    IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n    IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n    IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n    IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n    IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n    IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n    IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n    IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n    IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n    IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n    IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n    IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n    IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n    IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n    IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n    IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n    IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n    IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n    IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n    IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n    IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n    IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n    IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n    IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n    IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n    IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n    IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n    IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n    IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n    IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n    IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n    IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n    IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n    IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n    IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n    IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n    IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n    IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n    IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n    IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n    IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n    IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n    IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n    IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n    IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n    IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n    IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n    IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n    IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n    IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n    IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n    IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n    IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n    IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n    IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n    IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n    IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n    IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n    IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n    IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n    IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n    IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n    IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n    IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n    IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n    IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n    IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n    IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n    IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n    IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n    IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n    IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n    IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n    IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n    IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n    IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n    IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n    IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n    IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n    IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n    IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n    IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n    IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n    IconId[\"BUFF_HPSCALEDATKUP\"] = \"BUFF_HPSCALEDATKUP\";\n    IconId[\"BUFF_HPSCALEDATKDOWN\"] = \"BUFF_HPSCALEDATKDOWN\";\n    IconId[\"BUFF_HPSCALEDDEFUP\"] = \"BUFF_HPSCALEDDEFUP\";\n    IconId[\"BUFF_HPSCALEDDEFDOWN\"] = \"BUFF_HPSCALEDDEFDOWN\";\n    IconId[\"BUFF_HPSCALEDRECUP\"] = \"BUFF_HPSCALEDRECUP\";\n    IconId[\"BUFF_HPSCALEDRECDOWN\"] = \"BUFF_HPSCALEDRECDOWN\";\n    IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n    IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n    IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n    IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n    IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n    IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n    IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n    IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n    IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n    IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n    IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n    IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n    IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n    IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n    IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n    IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n    IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n    IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n    IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n    IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n    IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n    IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n    IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n    IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n    IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n    IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n    IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n    IconId[\"BUFF_POISONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n    IconId[\"BUFF_POISIONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n    IconId[\"BUFF_WEAKCOUNTER\"] = \"BUFF_WEAKCOUNTER\";\n    IconId[\"BUFF_SICKCOUNTER\"] = \"BUFF_SICKCOUNTER\";\n    IconId[\"BUFF_INJCONTER\"] = \"BUFF_INJCONTER\";\n    IconId[\"BUFF_CURSECOUNTER\"] = \"BUFF_CURSECOUNTER\";\n    IconId[\"BUFF_PARALYCOUNTER\"] = \"BUFF_PARALYCOUNTER\";\n    IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n    IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n    // elemental damage reduction buffs\n    IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n    IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n    IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n    IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n    IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n    IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n    IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n    // elemental weakness buffs\n    IconId[\"BUFF_FIREDMGUP\"] = \"BUFF_FIREDMGUP\";\n    IconId[\"BUFF_WATERDMGUP\"] = \"BUFF_WATERDMGUP\";\n    IconId[\"BUFF_WATERMDGUP\"] = \"BUFF_WATERDMGUP\";\n    IconId[\"BUFF_EARTHDMGUP\"] = \"BUFF_EARTHDMGUP\";\n    IconId[\"BUFF_THUNDERDMGUP\"] = \"BUFF_THUNDERDMGUP\";\n    IconId[\"BUFF_LIGHTDMGUP\"] = \"BUFF_LIGHTDMGUP\";\n    IconId[\"BUFF_DARKDMGUP\"] = \"BUFF_DARKDMGUP\";\n    IconId[\"BUFF_ELEMENTDMGUP\"] = \"BUFF_ELEMENTDMGUP\";\n    IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n    IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n    IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n    IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n    IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n    IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n    IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n    IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n    IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n    IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n    IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n    IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n    IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n    IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n    IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n    IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n    IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n    IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n    IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n    IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n    IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n    IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n    IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n    IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n    IconId[\"BUFF_KO\"] = \"BUFF_KO\";\n    IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n    IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n    IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n    IconId[\"BUFF_CRTDOWN\"] = \"BUFF_CRTDOWN\";\n    IconId[\"BUFF_ELEMENTDOWN\"] = \"BUFF_ELEMENTDOWN\";\n    IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n    IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n    IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n    IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n    IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n    IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n    IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n    IconId[\"BUFF_SPARKBBUP\"] = \"BUFF_SPARKBBUP\";\n    IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n    IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n    IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n    IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n    IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n    IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n    IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n    IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n    IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n    IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n    IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n    IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n    IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n    IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n    IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n    IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n    IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n    IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n    IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n    IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n    IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n    IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n    IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n    IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n    IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n    IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n    IconId[\"BUFF_BBATKUP\"] = \"BUFF_BBATKUP\";\n    IconId[\"BUFF_SBBATKUP\"] = \"BUFF_SBBATKUP\";\n    IconId[\"BUFF_UBBATKUP\"] = \"BUFF_UBBATKUP\";\n    IconId[\"BUFF_BBCOST_REDUCTION\"] = \"BUFF_BBCOST_REDUCTION\";\n    IconId[\"ATK_ST\"] = \"ATK_ST\";\n    IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n    IconId[\"ATK_RT\"] = \"ATK_RT\";\n    IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n    IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n    IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n    IconId[\"ATK_ST_PIERCING_PROPORTIONAL\"] = \"ATK_ST_PIERCING_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PIERCING_PROPORTIONAL\"] = \"ATK_AOE_PIERCING_PROPORTIONAL\";\n    IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n    IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n    IconId[\"ATK_ST_PIERCING_FIXED\"] = \"ATK_ST_PIERCING_FIXED\";\n    IconId[\"ATK_AOE_PIERCING_FIXED\"] = \"ATK_AOE_PIERCING_FIXED\";\n    IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n    IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n    IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n    IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n    IconId[\"ATK_ST_HPSCALED\"] = \"ATK_ST_HPSCALED\";\n    IconId[\"ATK_AOE_HPSCALED\"] = \"ATK_AOE_HPSCALED\";\n})(IconId || (IconId = {}));\n/**\n * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n * source of a given buff.\n */\nexport var BuffId;\n(function (BuffId) {\n    BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n    BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n    BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n    BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n    BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n    BuffId[\"passive:1:def\"] = \"passive:1:def\";\n    BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n    BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n    BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n    BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n    BuffId[\"passive:2:def\"] = \"passive:2:def\";\n    BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n    BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n    BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n    BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n    BuffId[\"passive:3:def\"] = \"passive:3:def\";\n    BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n    BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n    BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n    BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n    BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n    BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n    BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n    BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n    BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n    BuffId[\"passive:5:water\"] = \"passive:5:water\";\n    BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n    BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n    BuffId[\"passive:5:light\"] = \"passive:5:light\";\n    BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n    BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n    BuffId[\"passive:8\"] = \"passive:8\";\n    BuffId[\"passive:9\"] = \"passive:9\";\n    BuffId[\"passive:10\"] = \"passive:10\";\n    BuffId[\"passive:11:atk\"] = \"passive:11:atk\";\n    BuffId[\"passive:11:def\"] = \"passive:11:def\";\n    BuffId[\"passive:11:rec\"] = \"passive:11:rec\";\n    BuffId[\"passive:11:crit\"] = \"passive:11:crit\";\n    BuffId[\"passive:12:bc\"] = \"passive:12:bc\";\n    BuffId[\"passive:12:hc\"] = \"passive:12:hc\";\n    BuffId[\"passive:12:item\"] = \"passive:12:item\";\n    BuffId[\"passive:12:zel\"] = \"passive:12:zel\";\n    BuffId[\"passive:12:karma\"] = \"passive:12:karma\";\n    BuffId[\"passive:13\"] = \"passive:13\";\n    BuffId[\"passive:14\"] = \"passive:14\";\n    BuffId[\"passive:15\"] = \"passive:15\";\n    BuffId[\"passive:16\"] = \"passive:16\";\n    BuffId[\"passive:17\"] = \"passive:17\";\n    BuffId[\"passive:19:bc\"] = \"passive:19:bc\";\n    BuffId[\"passive:19:hc\"] = \"passive:19:hc\";\n    BuffId[\"passive:19:item\"] = \"passive:19:item\";\n    BuffId[\"passive:19:zel\"] = \"passive:19:zel\";\n    BuffId[\"passive:19:karma\"] = \"passive:19:karma\";\n    BuffId[\"passive:20:poison\"] = \"passive:20:poison\";\n    BuffId[\"passive:20:weak\"] = \"passive:20:weak\";\n    BuffId[\"passive:20:sick\"] = \"passive:20:sick\";\n    BuffId[\"passive:20:injury\"] = \"passive:20:injury\";\n    BuffId[\"passive:20:curse\"] = \"passive:20:curse\";\n    BuffId[\"passive:20:paralysis\"] = \"passive:20:paralysis\";\n    BuffId[\"passive:20:atk down\"] = \"passive:20:atk down\";\n    BuffId[\"passive:20:def down\"] = \"passive:20:def down\";\n    BuffId[\"passive:20:rec down\"] = \"passive:20:rec down\";\n    BuffId[\"passive:20:unknown\"] = \"passive:20:unknown\";\n    BuffId[\"passive:21:atk\"] = \"passive:21:atk\";\n    BuffId[\"passive:21:def\"] = \"passive:21:def\";\n    BuffId[\"passive:21:rec\"] = \"passive:21:rec\";\n    BuffId[\"passive:21:crit\"] = \"passive:21:crit\";\n    BuffId[\"passive:23\"] = \"passive:23\";\n    BuffId[\"passive:24\"] = \"passive:24\";\n    BuffId[\"passive:25\"] = \"passive:25\";\n    BuffId[\"passive:26\"] = \"passive:26\";\n    BuffId[\"passive:27\"] = \"passive:27\";\n    BuffId[\"passive:28\"] = \"passive:28\";\n    BuffId[\"passive:29\"] = \"passive:29\";\n    BuffId[\"passive:30:atk\"] = \"passive:30:atk\";\n    BuffId[\"passive:30:def\"] = \"passive:30:def\";\n    BuffId[\"passive:30:rec\"] = \"passive:30:rec\";\n    BuffId[\"passive:30:crit\"] = \"passive:30:crit\";\n    BuffId[\"passive:31:damage\"] = \"passive:31:damage\";\n    BuffId[\"passive:31:bc\"] = \"passive:31:bc\";\n    BuffId[\"passive:31:hc\"] = \"passive:31:hc\";\n    BuffId[\"passive:31:item\"] = \"passive:31:item\";\n    BuffId[\"passive:31:zel\"] = \"passive:31:zel\";\n    BuffId[\"passive:31:karma\"] = \"passive:31:karma\";\n    BuffId[\"passive:32\"] = \"passive:32\";\n    BuffId[\"passive:33\"] = \"passive:33\";\n    BuffId[\"passive:34\"] = \"passive:34\";\n    BuffId[\"passive:35\"] = \"passive:35\";\n    BuffId[\"passive:36\"] = \"passive:36\";\n    BuffId[\"passive:37\"] = \"passive:37\";\n    BuffId[\"passive:40:atk\"] = \"passive:40:atk\";\n    BuffId[\"passive:40:def\"] = \"passive:40:def\";\n    BuffId[\"passive:40:rec\"] = \"passive:40:rec\";\n    BuffId[\"passive:41:hp\"] = \"passive:41:hp\";\n    BuffId[\"passive:41:atk\"] = \"passive:41:atk\";\n    BuffId[\"passive:41:def\"] = \"passive:41:def\";\n    BuffId[\"passive:41:rec\"] = \"passive:41:rec\";\n    BuffId[\"passive:41:crit\"] = \"passive:41:crit\";\n    BuffId[\"passive:42:hp\"] = \"passive:42:hp\";\n    BuffId[\"passive:42:atk\"] = \"passive:42:atk\";\n    BuffId[\"passive:42:def\"] = \"passive:42:def\";\n    BuffId[\"passive:42:rec\"] = \"passive:42:rec\";\n    BuffId[\"passive:42:crit\"] = \"passive:42:crit\";\n    BuffId[\"passive:43\"] = \"passive:43\";\n    BuffId[\"passive:44:hp\"] = \"passive:44:hp\";\n    BuffId[\"passive:44:atk\"] = \"passive:44:atk\";\n    BuffId[\"passive:44:def\"] = \"passive:44:def\";\n    BuffId[\"passive:44:rec\"] = \"passive:44:rec\";\n    BuffId[\"passive:44:crit\"] = \"passive:44:crit\";\n    BuffId[\"passive:45:base\"] = \"passive:45:base\";\n    BuffId[\"passive:45:buff\"] = \"passive:45:buff\";\n    BuffId[\"passive:46:atk\"] = \"passive:46:atk\";\n    BuffId[\"passive:46:def\"] = \"passive:46:def\";\n    BuffId[\"passive:46:rec\"] = \"passive:46:rec\";\n    BuffId[\"passive:47\"] = \"passive:47\";\n    BuffId[\"passive:48\"] = \"passive:48\";\n    BuffId[\"passive:49\"] = \"passive:49\";\n    BuffId[\"passive:50:fire\"] = \"passive:50:fire\";\n    BuffId[\"passive:50:water\"] = \"passive:50:water\";\n    BuffId[\"passive:50:earth\"] = \"passive:50:earth\";\n    BuffId[\"passive:50:thunder\"] = \"passive:50:thunder\";\n    BuffId[\"passive:50:light\"] = \"passive:50:light\";\n    BuffId[\"passive:50:dark\"] = \"passive:50:dark\";\n    BuffId[\"passive:50:unknown\"] = \"passive:50:unknown\";\n    BuffId[\"passive:53:critical-damage-base\"] = \"passive:53:critical-damage-base\";\n    BuffId[\"passive:53:critical-damage-buff\"] = \"passive:53:critical-damage-buff\";\n    BuffId[\"passive:53:element-damage-base\"] = \"passive:53:element-damage-base\";\n    BuffId[\"passive:53:element-damage-buff\"] = \"passive:53:element-damage-buff\";\n    BuffId[\"passive:53:critical-rate-base\"] = \"passive:53:critical-rate-base\";\n    BuffId[\"passive:53:critical-rate-buff\"] = \"passive:53:critical-rate-buff\";\n    BuffId[\"passive:55:hp condition\"] = \"passive:55:hp condition\";\n    BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n    BuffId[\"proc:1\"] = \"proc:1\";\n    BuffId[\"proc:2\"] = \"proc:2\";\n    BuffId[\"proc:3\"] = \"proc:3\";\n    BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n    BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n    BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n    BuffId[\"proc:5:def\"] = \"proc:5:def\";\n    BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n    BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n    BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n    BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n    BuffId[\"proc:6:item\"] = \"proc:6:item\";\n    BuffId[\"proc:7\"] = \"proc:7\";\n    BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n    BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n    BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n    BuffId[\"proc:9:def\"] = \"proc:9:def\";\n    BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n    BuffId[\"proc:9:unknown\"] = \"proc:9:unknown\";\n    BuffId[\"proc:10:poison\"] = \"proc:10:poison\";\n    BuffId[\"proc:10:weak\"] = \"proc:10:weak\";\n    BuffId[\"proc:10:sick\"] = \"proc:10:sick\";\n    BuffId[\"proc:10:injury\"] = \"proc:10:injury\";\n    BuffId[\"proc:10:curse\"] = \"proc:10:curse\";\n    BuffId[\"proc:10:paralysis\"] = \"proc:10:paralysis\";\n    BuffId[\"proc:10:atk down\"] = \"proc:10:atk down\";\n    BuffId[\"proc:10:def down\"] = \"proc:10:def down\";\n    BuffId[\"proc:10:rec down\"] = \"proc:10:rec down\";\n    BuffId[\"proc:10:unknown\"] = \"proc:10:unknown\";\n    BuffId[\"proc:11:poison\"] = \"proc:11:poison\";\n    BuffId[\"proc:11:weak\"] = \"proc:11:weak\";\n    BuffId[\"proc:11:sick\"] = \"proc:11:sick\";\n    BuffId[\"proc:11:injury\"] = \"proc:11:injury\";\n    BuffId[\"proc:11:curse\"] = \"proc:11:curse\";\n    BuffId[\"proc:11:paralysis\"] = \"proc:11:paralysis\";\n    BuffId[\"proc:11:atk down\"] = \"proc:11:atk down\";\n    BuffId[\"proc:11:def down\"] = \"proc:11:def down\";\n    BuffId[\"proc:11:rec down\"] = \"proc:11:rec down\";\n    BuffId[\"proc:11:unknown\"] = \"proc:11:unknown\";\n    BuffId[\"proc:12\"] = \"proc:12\";\n    BuffId[\"proc:13\"] = \"proc:13\";\n    BuffId[\"proc:14\"] = \"proc:14\";\n    BuffId[\"proc:16:fire\"] = \"proc:16:fire\";\n    BuffId[\"proc:16:water\"] = \"proc:16:water\";\n    BuffId[\"proc:16:earth\"] = \"proc:16:earth\";\n    BuffId[\"proc:16:thunder\"] = \"proc:16:thunder\";\n    BuffId[\"proc:16:light\"] = \"proc:16:light\";\n    BuffId[\"proc:16:dark\"] = \"proc:16:dark\";\n    BuffId[\"proc:16:all\"] = \"proc:16:all\";\n    BuffId[\"proc:16:unknown\"] = \"proc:16:unknown\";\n    BuffId[\"proc:17:poison\"] = \"proc:17:poison\";\n    BuffId[\"proc:17:weak\"] = \"proc:17:weak\";\n    BuffId[\"proc:17:sick\"] = \"proc:17:sick\";\n    BuffId[\"proc:17:injury\"] = \"proc:17:injury\";\n    BuffId[\"proc:17:curse\"] = \"proc:17:curse\";\n    BuffId[\"proc:17:paralysis\"] = \"proc:17:paralysis\";\n    BuffId[\"proc:18\"] = \"proc:18\";\n    BuffId[\"proc:19\"] = \"proc:19\";\n    BuffId[\"proc:20\"] = \"proc:20\";\n    BuffId[\"proc:22\"] = \"proc:22\";\n    BuffId[\"proc:23\"] = \"proc:23\";\n    BuffId[\"proc:24:atk\"] = \"proc:24:atk\";\n    BuffId[\"proc:24:def\"] = \"proc:24:def\";\n    BuffId[\"proc:24:rec\"] = \"proc:24:rec\";\n    BuffId[\"proc:26\"] = \"proc:26\";\n    BuffId[\"proc:27\"] = \"proc:27\";\n    BuffId[\"proc:28\"] = \"proc:28\";\n    BuffId[\"proc:29\"] = \"proc:29\";\n    BuffId[\"proc:30:fire\"] = \"proc:30:fire\";\n    BuffId[\"proc:30:water\"] = \"proc:30:water\";\n    BuffId[\"proc:30:earth\"] = \"proc:30:earth\";\n    BuffId[\"proc:30:thunder\"] = \"proc:30:thunder\";\n    BuffId[\"proc:30:light\"] = \"proc:30:light\";\n    BuffId[\"proc:30:dark\"] = \"proc:30:dark\";\n    BuffId[\"proc:30:unknown\"] = \"proc:30:unknown\";\n    BuffId[\"proc:31:flat\"] = \"proc:31:flat\";\n    BuffId[\"proc:31:percent\"] = \"proc:31:percent\";\n    BuffId[\"proc:32:fire\"] = \"proc:32:fire\";\n    BuffId[\"proc:32:water\"] = \"proc:32:water\";\n    BuffId[\"proc:32:earth\"] = \"proc:32:earth\";\n    BuffId[\"proc:32:thunder\"] = \"proc:32:thunder\";\n    BuffId[\"proc:32:light\"] = \"proc:32:light\";\n    BuffId[\"proc:32:dark\"] = \"proc:32:dark\";\n    BuffId[\"proc:32:unknown\"] = \"proc:32:unknown\";\n    BuffId[\"proc:33\"] = \"proc:33\";\n    BuffId[\"proc:34:flat\"] = \"proc:34:flat\";\n    BuffId[\"proc:34:percent\"] = \"proc:34:percent\";\n    BuffId[\"proc:36\"] = \"proc:36\";\n    BuffId[\"proc:37\"] = \"proc:37\";\n    BuffId[\"proc:38:poison\"] = \"proc:38:poison\";\n    BuffId[\"proc:38:weak\"] = \"proc:38:weak\";\n    BuffId[\"proc:38:sick\"] = \"proc:38:sick\";\n    BuffId[\"proc:38:injury\"] = \"proc:38:injury\";\n    BuffId[\"proc:38:curse\"] = \"proc:38:curse\";\n    BuffId[\"proc:38:paralysis\"] = \"proc:38:paralysis\";\n    BuffId[\"proc:38:atk down\"] = \"proc:38:atk down\";\n    BuffId[\"proc:38:def down\"] = \"proc:38:def down\";\n    BuffId[\"proc:38:rec down\"] = \"proc:38:rec down\";\n    BuffId[\"proc:38:unknown\"] = \"proc:38:unknown\";\n    BuffId[\"proc:39:fire\"] = \"proc:39:fire\";\n    BuffId[\"proc:39:water\"] = \"proc:39:water\";\n    BuffId[\"proc:39:earth\"] = \"proc:39:earth\";\n    BuffId[\"proc:39:thunder\"] = \"proc:39:thunder\";\n    BuffId[\"proc:39:light\"] = \"proc:39:light\";\n    BuffId[\"proc:39:dark\"] = \"proc:39:dark\";\n    BuffId[\"proc:39:unknown\"] = \"proc:39:unknown\";\n    BuffId[\"proc:40:poison\"] = \"proc:40:poison\";\n    BuffId[\"proc:40:weak\"] = \"proc:40:weak\";\n    BuffId[\"proc:40:sick\"] = \"proc:40:sick\";\n    BuffId[\"proc:40:injury\"] = \"proc:40:injury\";\n    BuffId[\"proc:40:curse\"] = \"proc:40:curse\";\n    BuffId[\"proc:40:paralysis\"] = \"proc:40:paralysis\";\n    BuffId[\"proc:40:atk down\"] = \"proc:40:atk down\";\n    BuffId[\"proc:40:def down\"] = \"proc:40:def down\";\n    BuffId[\"proc:40:rec down\"] = \"proc:40:rec down\";\n    BuffId[\"proc:40:unknown\"] = \"proc:40:unknown\";\n    BuffId[\"proc:42\"] = \"proc:42\";\n    BuffId[\"proc:43\"] = \"proc:43\";\n    BuffId[\"proc:44\"] = \"proc:44\";\n    BuffId[\"proc:45:bb\"] = \"proc:45:bb\";\n    BuffId[\"proc:45:sbb\"] = \"proc:45:sbb\";\n    BuffId[\"proc:45:ubb\"] = \"proc:45:ubb\";\n    BuffId[\"proc:46\"] = \"proc:46\";\n    BuffId[\"proc:47\"] = \"proc:47\";\n    BuffId[\"proc:48:base\"] = \"proc:48:base\";\n    BuffId[\"proc:48:current\"] = \"proc:48:current\";\n    BuffId[\"proc:48:fixed\"] = \"proc:48:fixed\";\n    BuffId[\"proc:48:unknown\"] = \"proc:48:unknown\";\n    BuffId[\"proc:49\"] = \"proc:49\";\n    BuffId[\"proc:50\"] = \"proc:50\";\n    BuffId[\"proc:51:atk down\"] = \"proc:51:atk down\";\n    BuffId[\"proc:51:def down\"] = \"proc:51:def down\";\n    BuffId[\"proc:51:rec down\"] = \"proc:51:rec down\";\n    BuffId[\"proc:52\"] = \"proc:52\";\n    BuffId[\"proc:53:poison\"] = \"proc:53:poison\";\n    BuffId[\"proc:53:weak\"] = \"proc:53:weak\";\n    BuffId[\"proc:53:sick\"] = \"proc:53:sick\";\n    BuffId[\"proc:53:injury\"] = \"proc:53:injury\";\n    BuffId[\"proc:53:curse\"] = \"proc:53:curse\";\n    BuffId[\"proc:53:paralysis\"] = \"proc:53:paralysis\";\n    BuffId[\"proc:54\"] = \"proc:54\";\n    BuffId[\"UNKNOWN_CONDITIONAL_EFFECT_ID\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n    BuffId[\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\"] = \"UNKNOWN_CONDITIONAL_BUFF_PARAMS\";\n    BuffId[\"buff:12:ko resistance\"] = \"buff:12:ko resistance\";\n})(BuffId || (BuffId = {}));\n","import { BuffSource, BuffId, } from './buff-types';\nimport { SpPassiveType, TargetType, TargetArea, } from '../../datamine-types';\n/**\n * @description Helper function for creating an entry to be used in the `sources`\n * property of {@link IBuff}.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourceEntryFromContext(context) {\n    return `${context.source}-${context.sourceId}`;\n}\n/**\n * @description Helper function for creating an entries array to be used in the `sources`\n * property of {@link IBuff}. It handles setting the order of the sources.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourcesFromContext(context) {\n    const resultArray = Array.isArray(context.previousSources)\n        ? context.previousSources.slice()\n        : [];\n    // Ensure that the current source is at the beginning of the array\n    resultArray.unshift(createSourceEntryFromContext(context));\n    return resultArray;\n}\n/**\n * @description Given the conditions in an extra skill effect, normalize them into\n * a simpler object containing the IDs of each condition type.\n * @param effect Extra skill effect to process conditions from.\n * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n */\nexport function processExtraSkillConditions(effect) {\n    const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n    const aggregate = {\n        units: new Set(),\n        items: new Set(),\n        sphereTypes: new Set(),\n        unknowns: new Set(),\n    };\n    conditions.forEach((condition, index) => {\n        if ('sphere category required (raw)' in condition) {\n            aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n        }\n        else if ('item required' in condition) {\n            condition['item required'].forEach((item) => {\n                aggregate.items.add(item);\n            });\n        }\n        else if ('unit required' in condition) {\n            condition['unit required'].forEach((unit) => {\n                aggregate.units.add(`${unit.id}`);\n            });\n        }\n        else {\n            aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n        }\n    });\n    // filter out properties that have no entries\n    const result = Object.entries(aggregate)\n        .filter((entry) => entry[1].size > 0)\n        .reduce((acc, entry) => {\n        acc[entry[0]] = Array.from(entry[1]);\n        return acc;\n    }, {});\n    return result;\n}\n/**\n * @description Extract the target type and target area of a given passive effect.\n * @param effect Passive effect to extract target data from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns The target data for the given effect and context. There are only two possible values:\n * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n */\nexport function getPassiveTargetData(effect, context) {\n    const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n        (effect.sp_type === SpPassiveType.EnhancePassive);\n    const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n    return {\n        targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n        targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n    };\n}\n/**\n * @description Extract the target type and target area of a given proc effect.\n * @param effect Proc effect to extract target data from.\n * @returns The target data for the given effect and context.\n */\nexport function getProcTargetData(effect) {\n    return {\n        targetArea: effect['target area'],\n        targetType: effect['target type'],\n    };\n}\n/**\n * @description Try to parse the given value into a number or return a value if it is not a number.\n * @param value Value to parse into a number.\n * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n */\nexport function parseNumberOrDefault(value, defaultValue = 0) {\n    return (value !== null && !isNaN(value)) ? +value : defaultValue;\n}\n/**\n * @description Create an object denoting values that cannot be processed yet. To be used\n * in the `value` property of `IBuff` as needed.\n * @param params Array of values that cannot be processed yet.\n * @param startIndex The first index before which we know how to process an effect's values.\n * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n */\nexport function createUnknownParamsValue(params = [], startIndex = 0) {\n    let hasValue = false;\n    const result = params\n        .reduce((acc, value, index) => {\n        if (value && value !== '0') {\n            acc[`param_${startIndex + index}`] = value;\n            hasValue = true;\n        }\n        return acc;\n    }, {});\n    return hasValue ? result : (void 0);\n}\n/**\n * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n * @param source Source value to check.\n * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n * bonded super brave burst, or bonded dual brave burst.\n */\nexport function buffSourceIsBurstType(source) {\n    return !!source && [\n        BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n        BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n    ].includes(source);\n}\nexport function createUnknownParamsEntryFromExtraParams(extraParams, startIndex, injectionContext) {\n    let unknownParams;\n    if (extraParams && extraParams.length > 0) {\n        unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n    }\n    return unknownParams;\n}\nexport function createNoParamsEntry({ originalId, sources }) {\n    return {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    };\n}\n","import { UnitElement, Ailment, TargetArea } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { getProcTargetData, createSourcesFromContext, parseNumberOrDefault, createUnknownParamsValue, buffSourceIsBurstType } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of proc IDs to functions.\n */\nexport function getProcEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const effectDelay = effect['effect delay time(ms)/frame'];\n        return { targetData, sources, effectDelay };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const splitEffectWithUnknownProcParamsProperty = (effect) => {\n        const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n        return splitEffectParams({ params: rawParams });\n    };\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n        effectDelay,\n        sources, value: unknownParams }, targetData));\n    const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n        sources, value: {\n            buffs,\n            duration,\n        } }, targetData));\n    const createNoParamsEntry = ({ originalId, sources, }) => ({\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    });\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n    };\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    /**\n     * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n     * checked if all other known values in the effect are 0.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @param turnDuration Parsed turn duration value to check.\n     * @param injectionContext Object whose main use is for injecting methods in testing.\n     * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n     */\n    const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n        let result = turnDuration !== 0;\n        if (result) {\n            result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n        }\n        return result;\n    };\n    /**\n     * @description Helper function to get attack information common across most attacks from the conversion context.\n     * @param context Given context that may contain attack information like damage frames.\n     * @returns Extracted attack information from the context (with defaults where applicable).\n     */\n    const getAttackInformationFromContext = (context) => {\n        const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n        const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n        return {\n            hits,\n            distribution,\n        };\n    };\n    const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            value = parseParamValue(rawValue);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect[effectValueKey]);\n            turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [buffId],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:1', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'healerRec%': 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            let recX, recY;\n            let extraParams;\n            [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n            params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['heal low'];\n            params.healHigh = effect['heal high'];\n            params['healerRec%'] = effect['rec added% (from healer)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const results = [];\n        if (params.healHigh !== 0 || params.healLow !== 0) {\n            results.push(Object.assign({ id: 'proc:2', originalId,\n                sources,\n                effectDelay, value: params }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'targetRec%': 0,\n            turnDuration: '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let rec;\n            let extraParams;\n            [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['gradual heal low'];\n            params.healHigh = effect['gradual heal high'];\n            params['targetRec%'] = effect['rec added% (from target)'];\n            params.turnDuration = effect['gradual heal turns (8)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n        const results = [];\n        if (hasAnyHealValues) {\n            results.push(Object.assign({ id: 'proc:3', originalId,\n                sources,\n                effectDelay, duration: params.turnDuration, value: {\n                    healLow: params.healLow,\n                    healHigh: params.healHigh,\n                    'targetRec%': params['targetRec%'],\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:3'],\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('bb bc fill' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill']);\n            }\n            if ('bb bc fill%' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n            }\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            element: BuffConditionElement.All,\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    params[statType] = parseNumberOrDefault(effect[effectKey]);\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('6', (effect, context, injectionContext) => {\n        const originalId = '6';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            turnDuration: '0',\n        };\n        const dropRateProperties = ['bc', 'hc', 'item'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.bc = effect['bc drop rate% buff (10)'];\n            params.hc = effect['hc drop rate% buff (9)'];\n            params.item = effect['item drop rate% buff (11)'];\n            params.turnDuration = effect['drop buff rate turns'];\n        }\n        dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n        const results = [];\n        if (hasAnyRates) {\n            dropRateProperties.forEach((key) => {\n                const value = params[key];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:6:${key}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('7', (effect, context, injectionContext) => {\n        const originalId = '7';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHpPercent = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:7', originalId,\n                sources,\n                effectDelay, value: recoveredHpPercent }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const originalId = '8';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatHpBoost = 0;\n        let percentHpBoost = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n            flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n            percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('max hp increase' in effect) {\n                flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n            }\n            if ('max hp% increase' in effect) {\n                percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n            }\n        }\n        const results = [];\n        if (flatHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:flat', originalId,\n                sources,\n                effectDelay, value: flatHpBoost }, targetData));\n        }\n        if (percentHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:percent', originalId,\n                sources,\n                effectDelay, value: percentHpBoost }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        const originalId = '9';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const STAT_TYPE_MAPPING = {\n            0: 'atk',\n            1: 'def',\n            2: 'rec',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const params = {\n            element: BuffConditionElement.All,\n            statReductionEntries: [],\n            turnDuration: 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n            [\n                [statType1, value1, procChance1],\n                [statType2, value2, procChance2],\n            ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                const statType = parseNumberOrDefault(rawStatType) - 1;\n                const value = parseNumberOrDefault(rawValue);\n                const chance = parseNumberOrDefault(rawProcChance);\n                if (statType === 3) { // all stats\n                    params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                        stat,\n                        value,\n                        chance,\n                    })));\n                }\n                else {\n                    params.statReductionEntries.push({\n                        stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                        value,\n                        chance,\n                    });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            ['buff #1', 'buff #2'].forEach((buffKey) => {\n                const entry = effect[buffKey];\n                if (entry) {\n                    const chance = parseNumberOrDefault(entry['proc chance%']);\n                    const keys = Object.keys(entry);\n                    coreStatProperties.forEach((statType) => {\n                        const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                        if (effectKey) {\n                            params.statReductionEntries.push({\n                                stat: statType,\n                                value: parseNumberOrDefault(entry[effectKey]),\n                                chance,\n                            });\n                        }\n                    });\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        let hasAnyValues = false;\n        params.statReductionEntries.forEach(({ stat, value, chance }) => {\n            if (value !== 0 || chance !== 0) {\n                hasAnyValues = true;\n                const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                if (params.element !== BuffConditionElement.All) {\n                    buffEntry.conditions = {\n                        targetElements: [params.element],\n                    };\n                }\n                results.push(buffEntry);\n            }\n        });\n        if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        const originalId = '10';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 8);\n            const extraParams = splitParams.slice(8);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                if (`remove ${ailment}` in effect) { // mainly for items\n                    curedAilments.push(ailment);\n                }\n            });\n            if ('remove all status ailments' in effect) {\n                curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            let params = splitEffectParams(effect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:${ailment}`, originalId,\n            sources,\n            effectDelay, value: chance }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let reviveToHp = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n            reviveToHp = parseNumberOrDefault(rawReviveToHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:12', originalId,\n                sources,\n                effectDelay, value: reviveToHp }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const originalId = '13';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hits = 0;\n        const { distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawHits;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n            hits = parseNumberOrDefault(rawHits);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            hits = parseNumberOrDefault(effect.hits);\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push({\n                id: 'proc:13',\n                originalId,\n                sources,\n                effectDelay,\n                value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }),\n                targetType: targetData.targetType,\n                targetArea: TargetArea.Random,\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n            'drainLow%': '0',\n            'drainHigh%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n            params['drainLow%'] = effect['hp drain% low'];\n            params['drainHigh%'] = effect['hp drain% high'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:14', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let mitigation = 0;\n        let element;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            mitigation = parseNumberOrDefault(rawMitigation);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n            element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n            if (mitigationKey) {\n                mitigation = parseNumberOrDefault(effect[mitigationKey]);\n            }\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (mitigation !== 0) {\n            results.push(Object.assign({ id: `proc:16:${element}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        const originalId = '17';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    resistances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:17:${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:17:${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('18', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'dmg% reduction',\n            effectTurnDurationKey: 'dmg% reduction turns (36)',\n            buffId: 'proc:18',\n            originalId: '18',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'increase bb gauge gradual',\n            effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'proc:19',\n            originalId: '19',\n        });\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const originalId = '20';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let fillLow = 0;\n        let fillHigh = 0;\n        let chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFillLow, rawFillHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(effect['bc fill when attacked low']);\n            fillHigh = parseNumberOrDefault(effect['bc fill when attacked high']);\n            chance = parseNumberOrDefault(effect['bc fill when attacked%']);\n            turnDuration = parseNumberOrDefault(effect['bc fill when attacked turns (38)']);\n        }\n        const hasAnyFillValues = fillLow !== 0 || fillHigh !== 0;\n        const results = [];\n        if (hasAnyFillValues) {\n            results.push(Object.assign({ id: 'proc:20', originalId,\n                sources,\n                effectDelay, duration: turnDuration, conditions: {\n                    whenAttacked: true,\n                }, value: {\n                    fillLow,\n                    fillHigh,\n                    chance,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:20'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('22', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'defense% ignore',\n            effectTurnDurationKey: 'defense% ignore turns (39)',\n            buffId: 'proc:22',\n            originalId: '22',\n        });\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            value = parseNumberOrDefault(params[0]);\n            turnDuration = parseNumberOrDefault(params[6]);\n            const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'proc:23', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:23'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        const originalId = '24';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let turnDuration = 0;\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawConvertedStat, rawTurnDuration;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            const rawConvertedStat = effect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    stats[statType] = effect[effectKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['% converted turns']);\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:24:${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        convertedStat,\n                        value,\n                    } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:24:${statKey}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        const originalId = '26';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n            turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'proc:26', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:26'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        const originalId = '27';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'hpDamageLow%': '0',\n            'hpDamageHigh%': '0',\n            'hpDamageChance%': '0',\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else {\n            params['hpDamageLow%'] = effect['hp% damage low'];\n            params['hpDamageHigh%'] = effect['hp% damage high'];\n            params['hpDamageChance%'] = effect['hp% damage chance%'];\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:27', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        let value = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            value = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['fixed damage']);\n        }\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || value !== 0) {\n            const entry = Object.assign({ id: 'proc:28', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (value !== 0) {\n                entry.value.value = value;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        const originalId = '29';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let attackElements = [];\n        let unknownParams;\n        if (effect.params) {\n            let element1, element2, element3;\n            let extraParams;\n            [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            [element1, element2, element3].forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            });\n        }\n        else {\n            if (Array.isArray(effect['bb elements'])) {\n                attackElements = effect['bb elements'].slice();\n            }\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n            const entry = Object.assign({ id: 'proc:29', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData);\n            if (attackElements.length > 0) {\n                entry.value.elements = attackElements;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let elements = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            elements = params\n                .slice(0, 6)\n                .filter((p) => p !== '0')\n                .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n            turnDuration = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            if ('elements added' in effect) {\n                if (Array.isArray(effect['elements added'])) {\n                    elements = effect['elements added'];\n                }\n                else {\n                    elements = [BuffConditionElement.Unknown];\n                }\n            }\n            turnDuration = parseNumberOrDefault(effect['elements added turns']);\n        }\n        const results = [];\n        const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n        if (elements.length > 0) {\n            elements.forEach((inputElement) => {\n                const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                results.push(Object.assign({ id: `proc:30:${sanitizedElement}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration }, targetData));\n            });\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('increase bb gauge' in effect) {\n                flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n            }\n            // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n            // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        const originalId = '32';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let element;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, ...extraParams] = splitEffectParams(effect);\n            if (rawElement && rawElement !== '0') {\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            const effectElement = effect['set attack element attribute'];\n            if (effectElement) {\n                const sanitizedElement = Object.values(ELEMENT_MAPPING).find((e) => effectElement === e);\n                if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                    element = sanitizedElement;\n                }\n                else {\n                    element = BuffConditionElement.Unknown;\n                }\n            }\n        }\n        const results = [];\n        if (element) {\n            results.push(Object.assign({ id: `proc:32:${element}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            chance = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(effect['clear buff chance%']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:33', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        const originalId = '34';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatDrainLow = 0, flatDrainHigh = 0;\n        let percentDrainLow = 0, percentDrainHigh = 0;\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n            flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n            flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n            percentDrainLow = parseNumberOrDefault(rawPercentLow);\n            percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n            flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n            percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n            percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n            chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n        }\n        const results = [];\n        if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:flat', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: flatDrainLow,\n                    drainHigh: flatDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:percent', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: percentDrainLow,\n                    drainHigh: percentDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'invalidate LS chance%',\n            effectTurnDurationKey: 'invalidate LS turns (60)',\n            buffId: 'proc:36',\n            originalId: '36',\n        });\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const positionX = parseNumberOrDefault(rawPositionX);\n        const positionY = parseNumberOrDefault(rawPositionY);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const results = [];\n        if (summonGroup || summonId) {\n            results.push(Object.assign({ id: 'proc:37', originalId,\n                sources,\n                effectDelay, value: {\n                    summonGroup,\n                    summonId,\n                    positionX,\n                    positionY,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('38', (effect, context, injectionContext) => {\n        const originalId = '38';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 9);\n            const extraParams = splitParams.slice(9);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else if (Array.isArray(effect['ailments cured'])) {\n            const effectAilmentsCured = effect['ailments cured'];\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                if (effectAilmentsCured.includes(effectKey)) {\n                    curedAilments.push(ailment);\n                }\n            });\n            if (effectAilmentsCured.length > curedAilments.length) {\n                const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                for (let i = 0; i < unknownAilmentCount; ++i) {\n                    curedAilments.push(Ailment.Unknown);\n                }\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('39', (effect, context, injectionContext) => {\n        const originalId = '39';\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const elements = [];\n        let mitigation = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            const rawElementsMitigated = params.slice(0, 6);\n            mitigation = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            rawElementsMitigated.forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    elements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            Object.values(ELEMENT_MAPPING).forEach((element) => {\n                if (effect[`mitigate ${element} attacks`]) {\n                    elements.push(element);\n                }\n            });\n            mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n            turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n        }\n        const results = [];\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                results.push(Object.assign({ id: `proc:39:${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            });\n        }\n        else if (mitigation !== 0) {\n            results.push(Object.assign({ id: 'proc:39:unknown', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            for (let index = 0; index < 8; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n            turnDuration = parseNumberOrDefault(params[8]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken% buff';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = `${ailment} buff`;\n                }\n                else {\n                    effectKey = `${ailment}% buff`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:${ailment}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: chance }, targetData)));\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                duration: turnDuration,\n                buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:${a}`),\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const params = {\n            'atkLow%': rawModLow,\n            'atkHigh%': rawModHigh,\n            flatAtk: rawFlatAtk,\n        };\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:42', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        const originalId = '43';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let overdriveFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n            overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n        }\n        const results = [];\n        if (overdriveFill !== 0) {\n            results.push(Object.assign({ id: 'proc:43', originalId,\n                sources,\n                effectDelay, value: overdriveFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const damageParams = {\n            'atk%': '0',\n            flatAtk: '0',\n            'dmg%': '0',\n        };\n        let affectsElement = false, unitIndex = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n            [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n            unitIndex = parseNumberOrDefault(rawUnitIndex);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            damageParams['atk%'] = effect['dot atk%'];\n            damageParams.flatAtk = effect['dot flat atk'];\n            damageParams['dmg%'] = effect['dot dmg%'];\n            affectsElement = !!(effect['dot element affected']);\n            unitIndex = parseNumberOrDefault(effect['dot unit index']);\n            turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n        }\n        const filteredDamageParams = Object.entries(damageParams)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (Object.keys(filteredDamageParams).length > 0) {\n            results.push(Object.assign({ id: 'proc:44', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                    unitIndex }) }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:44'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('45', (effect, context, injectionContext) => {\n        const originalId = '45';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let bb = 0, sbb = 0, ubb = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            bb = parseNumberOrDefault(rawBb);\n            sbb = parseNumberOrDefault(rawSbb);\n            ubb = parseNumberOrDefault(rawUbb);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            bb = parseNumberOrDefault(effect['bb atk% buff']);\n            sbb = parseNumberOrDefault(effect['sbb atk% buff']);\n            ubb = parseNumberOrDefault(effect['ubb atk% buff']);\n            turnDuration = parseNumberOrDefault(effect['buff turns (72)']);\n        }\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:bb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:sbb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:ubb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: ubb }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:45:${type}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('46', (effect, context, injectionContext) => {\n        const originalId = '46';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawHpLow, rawHpHigh, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const hpLow = parseNumberOrDefault(rawHpLow);\n        const hpHigh = parseNumberOrDefault(rawHpHigh);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (hpLow !== 0 || hpHigh !== 0 || hits !== 0 || distribution !== 0) {\n            const entry = Object.assign({ id: 'proc:46', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (hpLow !== 0 || hpHigh !== 0) {\n                entry.value = {\n                    'hpDamageLow%': hpLow,\n                    'hpDamageHigh%': hpHigh,\n                    hits,\n                    distribution,\n                };\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('47', (effect, context, injectionContext) => {\n        const originalId = '47';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'baseAtk%': '0',\n            'addedAtk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let proportionalMode = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawMaxAttackValue, rawProportionalMode;\n            [params['baseAtk%'], rawMaxAttackValue, rawProportionalMode, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            params['addedAtk%'] = parseNumberOrDefault(rawMaxAttackValue) - parseNumberOrDefault(params['baseAtk%']);\n            proportionalMode = rawProportionalMode === '1' ? 'lost' : 'remaining';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['baseAtk%'] = effect['bb base atk%'];\n            params['addedAtk%'] = effect['bb added atk% based on hp'];\n            proportionalMode = effect['bb added atk% proportional to hp'] || 'unknown';\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:47', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { proportionalMode,\n                    hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('48', (effect, context, injectionContext) => {\n        const originalId = '48';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawBasePercentHpLow, rawBasePercentHpHigh, rawCurrentPercentHpLow, rawCurrentPercentHpHigh, rawFixedDamage, rawChance, rawIsLethal, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const basePercentHpLow = parseNumberOrDefault(rawBasePercentHpLow);\n        const basePercentHpHigh = parseNumberOrDefault(rawBasePercentHpHigh);\n        const currentPercentHpLow = parseNumberOrDefault(rawCurrentPercentHpLow);\n        const currentPercentHpHigh = parseNumberOrDefault(rawCurrentPercentHpHigh);\n        const fixedDamage = parseNumberOrDefault(rawFixedDamage);\n        const chance = parseNumberOrDefault(rawChance);\n        const isLethal = rawIsLethal === '1';\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        /**\n         * Current assumption is that each set of parameters results in a separate attack\n         * due to no known skills having more than one of each variant.\n         */\n        const results = [];\n        const createAttackOfType = (type, valueProperties) => (Object.assign({ id: `proc:48:${type}`, originalId,\n            sources,\n            effectDelay, value: Object.assign(Object.assign({}, valueProperties), { isLethal,\n                chance,\n                hits,\n                distribution }) }, targetData));\n        if (basePercentHpLow !== 0 || basePercentHpHigh !== 0) {\n            results.push(createAttackOfType('base', {\n                'hpDamageLow%': basePercentHpLow,\n                'hpDamageHigh%': basePercentHpHigh,\n            }));\n        }\n        if (currentPercentHpLow !== 0 || currentPercentHpHigh !== 0) {\n            results.push(createAttackOfType('current', {\n                'hpDamageLow%': currentPercentHpLow,\n                'hpDamageHigh%': currentPercentHpHigh,\n            }));\n        }\n        if (fixedDamage !== 0) {\n            results.push(createAttackOfType('fixed', {\n                value: fixedDamage,\n            }));\n        }\n        if (results.length === 0 && (hits !== 0 || distribution !== 0)) {\n            results.push(createAttackOfType('unknown', {}));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('49', (effect, context, injectionContext) => {\n        const originalId = '49';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawChance, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const chance = parseNumberOrDefault(rawChance);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:49', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('50', (effect, context, injectionContext) => {\n        const originalId = '50';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawDamageLow, rawDamageHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const reflectedDamageLow = parseNumberOrDefault(rawDamageLow);\n        const reflectedDamageHigh = parseNumberOrDefault(rawDamageHigh);\n        const chance = parseNumberOrDefault(rawChance);\n        const turnDuration = parseNumberOrDefault(rawTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const hasAnyRangeValues = reflectedDamageLow !== 0 || reflectedDamageHigh !== 0;\n        const results = [];\n        if (hasAnyRangeValues) {\n            results.push(Object.assign({ id: 'proc:50', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    'reflectedDamageLow%': reflectedDamageLow,\n                    'reflectedDamageHigh%': reflectedDamageHigh,\n                    chance,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:50'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('51', (effect, context, injectionContext) => {\n        const originalId = '51';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedReductions = [];\n        let debuffTurnDuration = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            [\n                { type: Ailment.AttackReduction, reductionValue: parseNumberOrDefault(params[0]), chance: parseNumberOrDefault(params[3]) },\n                { type: Ailment.DefenseReduction, reductionValue: parseNumberOrDefault(params[1]), chance: parseNumberOrDefault(params[4]) },\n                { type: Ailment.RecoveryReduction, reductionValue: parseNumberOrDefault(params[2]), chance: parseNumberOrDefault(params[5]) },\n            ].forEach(({ type, reductionValue, chance }) => {\n                if (reductionValue !== 0 || chance !== 0) {\n                    inflictedReductions.push({ type, reductionValue, chance });\n                }\n            });\n            debuffTurnDuration = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            [\n                { type: Ailment.AttackReduction, reductionValueKey: 'inflict atk% debuff (2)', chanceKey: 'inflict atk% debuff chance% (74)' },\n                { type: Ailment.DefenseReduction, reductionValueKey: 'inflict def% debuff (4)', chanceKey: 'inflict def% debuff chance% (75)' },\n                { type: Ailment.RecoveryReduction, reductionValueKey: 'inflict rec% debuff (6)', chanceKey: 'inflict rec% debuff chance% (76)' },\n            ].forEach(({ type, reductionValueKey, chanceKey }) => {\n                const reductionValue = parseNumberOrDefault(effect[reductionValueKey]);\n                const chance = parseNumberOrDefault(effect[chanceKey]);\n                if (reductionValue !== 0 || chance !== 0) {\n                    inflictedReductions.push({ type, reductionValue, chance });\n                }\n            });\n            debuffTurnDuration = parseNumberOrDefault(effect['stat% debuff turns']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedReductions.map(({ type, reductionValue, chance }) => (Object.assign({ id: `proc:51:${type}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: {\n                reductionValue,\n                chance,\n                debuffTurnDuration,\n            } }, targetData)));\n        if (results.length === 0 && (isTurnDurationBuff(context, turnDuration, injectionContext) || isTurnDurationBuff(context, debuffTurnDuration, injectionContext))) {\n            // manually create turn duration buff to account for debuff turn duration\n            results.push(Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n                sources, value: {\n                    buffs: [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction].map((a) => `proc:51:${a}`),\n                    duration: turnDuration,\n                    debuffTurnDuration: debuffTurnDuration,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('52', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'bb gauge fill rate% buff',\n            effectTurnDurationKey: 'buff turns (77)',\n            buffId: 'proc:52',\n            originalId: '52',\n        });\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        const originalId = '53';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const inflictionChances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    inflictionChances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['counter inflict ailment turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(inflictionChances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:53:${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:53:${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('54', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'crit multiplier%',\n            effectTurnDurationKey: 'buff turns (84)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            buffId: 'proc:54',\n            originalId: '54',\n        });\n    });\n}\n","import { BuffId } from \"./buff-types\";\nimport { createSourcesFromContext, parseNumberOrDefault, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from \"./_helpers\";\nlet mapping;\nexport function getConditionalEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\nfunction setMapping(map) {\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, }) => ({\n        id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n        originalId,\n        sources,\n        value: unknownParams,\n    });\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n            }));\n        }\n    };\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const [rawRecoverValue, ...extraParams] = effect.params.split('&');\n        const recoverValue = parseNumberOrDefault(rawRecoverValue);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [{\n                id: 'buff:12:ko resistance',\n                originalId,\n                sources,\n                duration: effect.turnDuration,\n                value: recoverValue,\n            }];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n        });\n        return results;\n    });\n}\n","import { UnitElement, UnitType, Ailment, UnitGender } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { createSourcesFromContext, processExtraSkillConditions, getPassiveTargetData, createUnknownParamsValue, parseNumberOrDefault } from './_helpers';\nimport convertConditionalEffectToBuffs from './convertConditionalEffectToBuffs';\nlet mapping;\n/**\n * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of passive IDs to functions.\n */\nexport function getPassiveEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n        X: BuffConditionElement.OmniParadigm,\n    };\n    const TYPE_MAPPING = {\n        1: UnitType.Lord,\n        2: UnitType.Anima,\n        3: UnitType.Breaker,\n        4: UnitType.Guardian,\n        5: UnitType.Oracle,\n        6: UnitType.Rex,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n    const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n    const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n        const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        return { conditionInfo, targetData, sources };\n    };\n    const convertConditionalEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n        const conversionFunction = (injectionContext && injectionContext.convertConditionalEffectToBuffs) || convertConditionalEffectToBuffs;\n        return conversionFunction(effect, context);\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n        sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n    const createNoParamsEntry = ({ originalId, sources, }) => ({\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    });\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n    };\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    let ThresholdType;\n    (function (ThresholdType) {\n        ThresholdType[\"Hp\"] = \"hp\";\n        ThresholdType[\"Bb\"] = \"bb gauge\";\n    })(ThresholdType || (ThresholdType = {}));\n    const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n        return {\n            threshold: parseNumberOrDefault(rawThreshold),\n            requireAbove: rawRequireAboveFlag === '1',\n            type: thresholdType,\n        };\n    };\n    const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n        let threshold = 0, requireAbove = false;\n        if (`${thresholdType} above % ${suffix}` in effect) {\n            threshold = parseNumberOrDefault(effect[`${thresholdType} above % ${suffix}`]);\n            requireAbove = true;\n        }\n        else {\n            threshold = parseNumberOrDefault(effect[`${thresholdType} below % ${suffix}`]);\n            requireAbove = false;\n        }\n        return { threshold, requireAbove, type: thresholdType };\n    };\n    const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n        let conditions;\n        if (type === ThresholdType.Hp) {\n            if (requireAbove) {\n                conditions = { hpGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { hpLessThanOrEqualTo: threshold };\n            }\n        }\n        else if (type === ThresholdType.Bb) {\n            if (requireAbove) {\n                conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { bbGaugeLessThanOrEqualTo: threshold };\n            }\n        }\n        return conditions;\n    };\n    const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let value = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseParamValue(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect[effectKey]);\n        }\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let valueLow, valueHigh, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            valueLow = parseParamValue(rawLowValue);\n            valueHigh = parseParamValue(rawHighValue);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n            valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n            chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n        }\n        const results = [];\n        if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources, value: {\n                    [buffKeyLow]: valueLow,\n                    [buffKeyHigh]: valueHigh,\n                    chance,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            elements: [],\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let element1, element2;\n            [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            [element1, element2].forEach((elementValue) => {\n                if (elementValue && elementValue !== '0') {\n                    stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            if (Array.isArray(typedEffect['elements buffed'])) {\n                stats.elements = typedEffect['elements buffed'];\n            }\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId,\n            sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n        if (stats.elements.length > 0) {\n            stats.elements.forEach((element) => {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                    }\n                });\n            });\n        }\n        else {\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                }\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            unitType: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let unitType;\n            [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            if (unitType && unitType !== '0') {\n                stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.unitType = typedEffect['unit type buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetUnitType = stats.unitType || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:3:${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:4:${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let element;\n        let mitigation = '0';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n            if (element !== BuffConditionElement.Unknown) {\n                mitigation = typedEffect[`${element} resist%`];\n            }\n        }\n        const value = parseNumberOrDefault(mitigation);\n        if (value !== 0) {\n            results.push(Object.assign({ id: `passive:5:${element}`, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'dmg% mitigation',\n            buffId: 'passive:8',\n            originalId: '8',\n        });\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bc fill per turn',\n            buffId: 'passive:9',\n            originalId: '9',\n        });\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'hc effectiveness%',\n            buffId: 'passive:10',\n            originalId: '10',\n        });\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:11:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                const entry = Object.assign({ id: `passive:12:${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '13',\n            effectKeyLow: 'bc fill on enemy defeat low',\n            effectKeyHigh: 'bc fill on enemy defeat high',\n            effectKeyChance: 'bc fill on enemy defeat%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            buffId: 'passive:13',\n        });\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageReduction, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            damageReduction = parseNumberOrDefault(rawReduction);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n            chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n        }\n        const results = [];\n        if (damageReduction !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:14', originalId,\n                sources, value: {\n                    value: damageReduction,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('15', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '15',\n            effectKeyLow: 'hp% recover on enemy defeat low',\n            effectKeyHigh: 'hp% recover on enemy defeat high',\n            effectKeyChance: 'hp% recover on enemy defeat chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            defaultEffectChance: 100,\n            buffId: 'passive:15',\n        });\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n            healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:16', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '17',\n            effectKeyLow: 'hp drain% low',\n            effectKeyHigh: 'hp drain% high',\n            effectKeyChance: 'hp drain chance%',\n            buffKeyLow: 'drainHealLow',\n            buffKeyHigh: 'drainHealHigh',\n            buffId: 'passive:17',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        const originalId = '19';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:19:${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const originalId = '20';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            let params = splitEffectParams(typedEffect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(typedEffect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = [];\n        inflictedAilments.forEach(({ ailment, chance }) => {\n            if (chance !== 0) {\n                results.push(Object.assign({ id: `passive:20:${ailment}`, originalId,\n                    sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('21', (effect, context, injectionContext) => {\n        const originalId = '21';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let rawDuration, extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['first x turns atk% (1)'];\n            stats.def = typedEffect['first x turns def% (3)'];\n            stats.rec = typedEffect['first x turns rec% (5)'];\n            stats.crit = typedEffect['first x turns crit% (7)'];\n            turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:21:${stat}`, originalId,\n                    sources,\n                    value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let fillLow, fillHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n            fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n        }\n        const results = [];\n        if (fillLow !== 0 || fillHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:23', originalId,\n                sources, value: {\n                    fillLow,\n                    fillHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '24',\n            effectKeyLow: 'dmg% to hp when attacked low',\n            effectKeyHigh: 'dmg% to hp when attacked high',\n            effectKeyChance: 'dmg% to hp when attacked chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:24',\n        });\n    });\n    map.set('25', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '25',\n            effectKeyLow: 'bc fill when attacked low',\n            effectKeyHigh: 'bc fill when attacked high',\n            effectKeyChance: 'bc fill when attacked%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:25',\n        });\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '26',\n            effectKeyLow: 'dmg% reflect low',\n            effectKeyHigh: 'dmg% reflect high',\n            effectKeyChance: 'dmg% reflect chance%',\n            buffKeyLow: 'damageReflectLow',\n            buffKeyHigh: 'damageReflectHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:26',\n        });\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'target% chance',\n            buffId: 'passive:27',\n            originalId: '27',\n        });\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let value = 0;\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseNumberOrDefault(rawValue);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect['target% chance']);\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n        }\n        const results = [];\n        if (value !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            const entry = Object.assign({ id: 'passive:28', originalId,\n                sources,\n                value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'ignore def%',\n            buffId: 'passive:29',\n            originalId: '29',\n        });\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:30:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let sparkDamageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawSparkDamageBoost;\n            [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n            });\n        }\n        const results = [];\n        if (sparkDamageBoost !== 0) {\n            results.push(Object.assign({ id: 'passive:31:damage', originalId,\n                sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:31:${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bb gauge fill rate%',\n            buffId: 'passive:32',\n            originalId: '32',\n        });\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh, addedRec;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n            healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n            addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:33', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                    'addedRec%': addedRec,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'crit multiplier%',\n            buffId: 'passive:34',\n            originalId: '34',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n        });\n    });\n    map.set('35', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '35',\n            effectKeyLow: 'bc fill when attacking low',\n            effectKeyHigh: 'bc fill when attacking high',\n            effectKeyChance: 'bc fill when attacking%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onNormalAttack: true }),\n            buffId: 'passive:35',\n        });\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        const originalId = '36';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let additionalActions = 0, damageModifier = 0, chance = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            additionalActions = parseNumberOrDefault(rawAdditionalActions);\n            damageModifier = parseNumberOrDefault(rawDamageModifier);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n        }\n        const results = [];\n        if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:36', originalId,\n                sources, value: {\n                    additionalActions,\n                    damageModifier,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let hitIncreasePerHit = 0, extraHitDamage = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'passive:37', originalId,\n                sources, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawConvertedStat;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const rawConvertedStat = typedEffect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            coreStatProperties.forEach((statType) => {\n                const effectKey = `${statType}% buff`;\n                if (effectKey in typedEffect) {\n                    stats[statType] = typedEffect[effectKey];\n                }\n            });\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:40:${stat}`, originalId,\n                    sources, value: {\n                        convertedStat,\n                        value,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('41', (effect, context, injectionContext) => {\n        const originalId = '41';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            minimumElements: '0',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.minimumElements = typedEffect['unique elements required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const minimumElements = parseNumberOrDefault(stats.minimumElements);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:41:${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minumumUniqueElements: minimumElements }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const GENDER_MAPPING = {\n            0: UnitGender.Other,\n            1: UnitGender.Male,\n            2: UnitGender.Female,\n        };\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            gender: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawGender;\n            [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.gender = typedEffect['gender required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetGender = stats.gender || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:42:${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'take 1 dmg%',\n            buffId: 'passive:43',\n            originalId: '43',\n        });\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp buff'];\n            stats.atk = typedEffect['atk buff'];\n            stats.def = typedEffect['def buff'];\n            stats.rec = typedEffect['rec buff'];\n            stats.crit = typedEffect['crit buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:44:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('45', (effect, context, injectionContext) => {\n        const originalId = '45';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let baseResist = 0, buffResist = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n            baseResist = parseNumberOrDefault(rawBaseResist);\n            buffResist = parseNumberOrDefault(rawBuffResist);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            baseResist = parseNumberOrDefault(typedEffect['base crit% resist']);\n            buffResist = parseNumberOrDefault(typedEffect['buff crit% resist']);\n        }\n        const results = [];\n        if (baseResist !== 0) {\n            results.push(Object.assign({ id: 'passive:45:base', originalId,\n                sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (buffResist !== 0) {\n            results.push(Object.assign({ id: 'passive:45:buff', originalId,\n                sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('46', (effect, context, injectionContext) => {\n        const originalId = '46';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const availableStats = ['atk', 'def', 'rec'];\n        const stats = [];\n        let proportionalMode = 'unknown';\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            availableStats.forEach((stat, index) => {\n                const baseValue = parseNumberOrDefault(params[index * 2]);\n                const addedValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                if (baseValue !== 0 || addedValue !== 0) {\n                    stats.push({\n                        stat,\n                        baseValue,\n                        addedValue,\n                    });\n                }\n            });\n            proportionalMode = params[6] === '1' ? 'lost' : 'remaining';\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            availableStats.forEach((stat) => {\n                const baseValue = parseNumberOrDefault(typedEffect[`${stat}% base buff`]);\n                const addedValue = parseNumberOrDefault(typedEffect[`${stat}% extra buff based on hp`]);\n                if (baseValue !== 0 || addedValue !== 0) {\n                    stats.push({\n                        stat,\n                        baseValue,\n                        addedValue,\n                    });\n                }\n            });\n            proportionalMode = typedEffect['buff proportional to hp'] || 'unknown';\n        }\n        const results = stats.map(({ stat, baseValue, addedValue }) => (Object.assign({ id: `passive:46:${stat}`, originalId,\n            sources, value: {\n                baseValue,\n                addedValue,\n                proportionalMode,\n            }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('47', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '47',\n            effectKeyLow: 'bc fill on spark low',\n            effectKeyHigh: 'bc fill on spark high',\n            effectKeyChance: 'bc fill on spark%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'passive:47',\n        });\n    });\n    map.set('48', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'reduced bb bc cost%',\n            buffId: 'passive:48',\n            originalId: '48',\n        });\n    });\n    map.set('49', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '49',\n            effectKeyLow: 'reduced bb bc use% low',\n            effectKeyHigh: 'reduced bb bc use% high',\n            effectKeyChance: 'reduced bb bc use chance%',\n            buffKeyLow: 'reducedUseLow%',\n            buffKeyHigh: 'reducedUseHigh%',\n            buffId: 'passive:49',\n        });\n    });\n    map.set('50', (effect, context, injectionContext) => {\n        const originalId = '50';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let damageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            damageBoost = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`${element} units do extra elemental weakness dmg`]);\n            damageBoost = parseNumberOrDefault(typedEffect['elemental weakness multiplier%']);\n        }\n        let results = [];\n        if (damageBoost !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:50:${element}`, originalId,\n                sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:50:unknown', originalId,\n                    sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        const originalId = '53';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let ResistType;\n        (function (ResistType) {\n            ResistType[\"CriticalDamage\"] = \"critical-damage\";\n            ResistType[\"ElementDamage\"] = \"element-damage\";\n            ResistType[\"CriticalHitRate\"] = \"critical-rate\";\n        })(ResistType || (ResistType = {}));\n        const resistances = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseCritChanceResist, rawBuffCritChanceResist, ...extraParams] = splitEffectParams(typedEffect);\n            [\n                { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                { resistType: ResistType.CriticalHitRate, base: parseNumberOrDefault(rawBaseCritChanceResist), buff: parseNumberOrDefault(rawBuffCritChanceResist) },\n            ].forEach(({ resistType, base, buff }) => {\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            [\n                { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist%', buffKey: 'crit dmg buffed damage resist%' },\n                { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist%', buffKey: 'strong buffed element damage resist%' },\n                { resistType: ResistType.CriticalHitRate, baseKey: 'crit chance base resist%', buffKey: 'crit chance buffed resist%' },\n            ].forEach(({ resistType, baseKey, buffKey }) => {\n                const base = parseNumberOrDefault(typedEffect[baseKey]);\n                const buff = parseNumberOrDefault(typedEffect[buffKey]);\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n        }\n        const results = [];\n        resistances.forEach(({ resistType, base, buff }) => {\n            if (base !== 0) {\n                results.push(Object.assign({ id: `passive:53:${resistType}-base`, originalId,\n                    sources, value: base, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buff !== 0) {\n                results.push(Object.assign({ id: `passive:53:${resistType}-buff`, originalId,\n                    sources, value: buff, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('55', (effect, context, injectionContext) => {\n        const originalId = '55';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const params = splitEffectParams(typedEffect);\n        const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n            id: params[0],\n            params: params[1],\n            turnDuration: parseNumberOrDefault(params[5]),\n        }, context, injectionContext);\n        const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], params[4], ThresholdType.Hp);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(['0,0', params[2], '0,0', ...params.slice(5)], 0, injectionContext);\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        const results = [];\n        if (triggeredBuffs.length > 0) {\n            results.push(Object.assign({ id: 'passive:55:hp condition', originalId,\n                sources, value: triggeredBuffs, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n}\n","import { BuffId } from \"./buff-types\";\nimport { getConditionalEffectToBuffMapping } from \"./conditional-effect-mapping\";\nimport { KNOWN_CONDITIONAL_ID } from \"../constants\";\nimport { createSourcesFromContext } from \"./_helpers\";\nfunction defaultConversionFunction(effect, context) {\n    const id = effect.id || KNOWN_CONDITIONAL_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given conditional effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Conditional effect to extract buffs from\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertConditionalEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const conversionFunction = getConditionalEffectToBuffMapping(context.reloadMapping).get(effect.id);\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId, UnitStat, BuffStackType, IconId, } from './buff-types';\nimport { TargetArea } from '../../datamine-types';\nexport const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'TURN_DURATION_MODIFICATION': {\n        id: BuffId.TURN_DURATION_MODIFICATION,\n        name: 'Passive Turn Duration Modification',\n        stat: UnitStat.turnDurationModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [\n            (buff && buff.value &&\n                buff.value.duration &&\n                buff.value.duration < 0) ?\n                IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n        ],\n    }, 'NO_PARAMS_SPECIFIED': {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        name: 'No Parameters Specified',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PASSIVE_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n        name: 'Unknown Passive Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n        name: 'Unknown Passive Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'passive:1:hp': {\n        id: BuffId['passive:1:hp'],\n        name: 'Passive HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:1:atk': {\n        id: BuffId['passive:1:atk'],\n        name: 'Passive Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:1:def': {\n        id: BuffId['passive:1:def'],\n        name: 'Passive Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:1:rec': {\n        id: BuffId['passive:1:rec'],\n        name: 'Passive Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:1:crit': {\n        id: BuffId['passive:1:crit'],\n        name: 'Passive Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    } }, (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:2:hp': {\n            id: BuffId['passive:2:hp'],\n            name: 'Passive Elemental HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:2:atk': {\n            id: BuffId['passive:2:atk'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:2:def': {\n            id: BuffId['passive:2:def'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:2:rec': {\n            id: BuffId['passive:2:rec'],\n            name: 'Passive Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:2:crit': {\n            id: BuffId['passive:2:crit'],\n            name: 'Passive Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let unitType = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    unitType = buff.conditions.targetUnitType || '';\n                }\n            }\n            if (typeof unitType !== 'string' || !unitType) {\n                unitType = 'unknown';\n            }\n            let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n            if (!unitType || !(iconKey in IconId)) {\n                iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:3:hp': {\n            id: BuffId['passive:3:hp'],\n            name: 'Passive Type-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:3:atk': {\n            id: BuffId['passive:3:atk'],\n            name: 'Passive Type-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:3:def': {\n            id: BuffId['passive:3:def'],\n            name: 'Passive Type-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:3:rec': {\n            id: BuffId['passive:3:rec'],\n            name: 'Passive Type-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:3:crit': {\n            id: BuffId['passive:3:crit'],\n            name: 'Passive Type-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:4:poison': {\n        id: BuffId['passive:4:poison'],\n        name: 'Passive Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:4:weak': {\n        id: BuffId['passive:4:weak'],\n        name: 'Passive Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:4:sick': {\n        id: BuffId['passive:4:sick'],\n        name: 'Passive Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:4:injury': {\n        id: BuffId['passive:4:injury'],\n        name: 'Passive Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:4:curse': {\n        id: BuffId['passive:4:curse'],\n        name: 'Passive Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:4:paralysis': {\n        id: BuffId['passive:4:paralysis'],\n        name: 'Passive Paralysis Resist',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:5:fire': {\n        id: BuffId['passive:5:fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:5:water': {\n        id: BuffId['passive:5:water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:5:earth': {\n        id: BuffId['passive:5:earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:5:thunder': {\n        id: BuffId['passive:5:thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:5:light': {\n        id: BuffId['passive:5:light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:5:dark': {\n        id: BuffId['passive:5:dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:5:unknown': {\n        id: BuffId['passive:5:unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:8': {\n        id: BuffId['passive:8'],\n        name: 'Passive Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:9': {\n        id: BuffId['passive:9'],\n        name: 'Passive Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:10': {\n        id: BuffId['passive:10'],\n        name: 'Passive HC Efficacy',\n        stat: UnitStat.hcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HCREC],\n    }, 'passive:11:atk': {\n        id: BuffId['passive:11:atk'],\n        name: 'Passive HP-Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n    }, 'passive:11:def': {\n        id: BuffId['passive:11:def'],\n        name: 'Passive HP-Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n    }, 'passive:11:rec': {\n        id: BuffId['passive:11:rec'],\n        name: 'Passive HP-Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n    }, 'passive:11:crit': {\n        id: BuffId['passive:11:crit'],\n        name: 'Passive HP-Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n    }, 'passive:12:bc': {\n        id: BuffId['passive:12:bc'],\n        name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n    }, 'passive:12:hc': {\n        id: BuffId['passive:12:hc'],\n        name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n    }, 'passive:12:item': {\n        id: BuffId['passive:12:item'],\n        name: 'Passive HP-Conditional Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n    }, 'passive:12:zel': {\n        id: BuffId['passive:12:zel'],\n        name: 'Passive HP-Conditional Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n    }, 'passive:12:karma': {\n        id: BuffId['passive:12:karma'],\n        name: 'Passive HP-Conditional Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n    }, 'passive:13': {\n        id: BuffId['passive:13'],\n        name: 'Passive BC Fill on Enemy Defeat',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:14': {\n        id: BuffId['passive:14'],\n        name: 'Passive Damage Reduction (Chance)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:15': {\n        id: BuffId['passive:15'],\n        name: 'Passive Heal on Enemy Defeat',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:16': {\n        id: BuffId['passive:16'],\n        name: 'Passive Heal on Battle Win',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:17': {\n        id: BuffId['passive:17'],\n        name: 'HP Absorption',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPABS],\n    }, 'passive:19:bc': {\n        id: BuffId['passive:19:bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'passive:19:hc': {\n        id: BuffId['passive:19:hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'passive:19:item': {\n        id: BuffId['passive:19:item'],\n        name: 'Passive Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'passive:19:zel': {\n        id: BuffId['passive:19:zel'],\n        name: 'Passive Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n    }, 'passive:19:karma': {\n        id: BuffId['passive:19:karma'],\n        name: 'Passive Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n    }, 'passive:20:poison': {\n        id: BuffId['passive:20:poison'],\n        name: 'Passive Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'passive:20:weak': {\n        id: BuffId['passive:20:weak'],\n        name: 'Passive Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'passive:20:sick': {\n        id: BuffId['passive:20:sick'],\n        name: 'Passive Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'passive:20:injury': {\n        id: BuffId['passive:20:injury'],\n        name: 'Passive Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'passive:20:curse': {\n        id: BuffId['passive:20:curse'],\n        name: 'Passive Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'passive:20:paralysis': {\n        id: BuffId['passive:20:paralysis'],\n        name: 'Passive Paralysis Infliction',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'passive:20:atk down': {\n        id: BuffId['passive:20:atk down'],\n        name: 'Passive Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'passive:20:def down': {\n        id: BuffId['passive:20:def down'],\n        name: 'Passive Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'passive:20:rec down': {\n        id: BuffId['passive:20:rec down'],\n        name: 'Passive Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'passive:20:unknown': {\n        id: BuffId['passive:20:unknown'],\n        name: 'Passive Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'passive:21:atk': {\n        id: BuffId['passive:21:atk'],\n        name: 'Attack Boost for X Turns',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:21:def': {\n        id: BuffId['passive:21:def'],\n        name: 'Defense Boost for X Turns',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:21:rec': {\n        id: BuffId['passive:21:rec'],\n        name: 'Recovery Boost for X Turns',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:21:crit': {\n        id: BuffId['passive:21:crit'],\n        name: 'Critical Hit Rate Boost for X Turns',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:23': {\n        id: BuffId['passive:23'],\n        name: 'Passive BC Fill on Battle Win',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:24': {\n        id: BuffId['passive:24'],\n        name: 'Passive Heal when Attacked',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'passive:25': {\n        id: BuffId['passive:25'],\n        name: 'Passive BC Fill when Attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:26': {\n        id: BuffId['passive:26'],\n        name: 'Passive Damage Counter (Chance)',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'passive:27': {\n        id: BuffId['passive:27'],\n        name: 'Passive Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n    }, 'passive:28': {\n        id: BuffId['passive:28'],\n        name: 'Passive HP-Conditional Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n    }, 'passive:29': {\n        id: BuffId['passive:29'],\n        name: 'Passive Defense Ignore (Chance)',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'passive:30:atk': {\n        id: BuffId['passive:30:atk'],\n        name: 'Passive BB Gauge Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n    }, 'passive:30:def': {\n        id: BuffId['passive:30:def'],\n        name: 'Passive BB Gauge Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n    }, 'passive:30:rec': {\n        id: BuffId['passive:30:rec'],\n        name: 'Passive BB Gauge Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n    }, 'passive:30:crit': {\n        id: BuffId['passive:30:crit'],\n        name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n    }, 'passive:31:damage': {\n        id: BuffId['passive:31:damage'],\n        name: 'Passive Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'passive:31:bc': {\n        id: BuffId['passive:31:bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n    }, 'passive:31:hc': {\n        id: BuffId['passive:31:hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n    }, 'passive:31:item': {\n        id: BuffId['passive:31:item'],\n        name: 'Passive Item Drop Rate Boost during Spark',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n    }, 'passive:31:zel': {\n        id: BuffId['passive:31:zel'],\n        name: 'Passive Zel Drop Rate Boost during Spark',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n    }, 'passive:31:karma': {\n        id: BuffId['passive:31:karma'],\n        name: 'Passive Karma Drop Rate Boost during Spark',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n    }, 'passive:32': {\n        id: BuffId['passive:32'],\n        name: 'Passive BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'passive:33': {\n        id: BuffId['passive:33'],\n        name: 'Passive Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:34': {\n        id: BuffId['passive:34'],\n        name: 'Passive Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'passive:35': {\n        id: BuffId['passive:35'],\n        name: 'Passive BC Fill when Normal Attacking',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:36': {\n        id: BuffId['passive:36'],\n        name: 'Passive Extra Action',\n        stat: UnitStat.extraAction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DBLSTRIKE],\n    }, 'passive:37': {\n        id: BuffId['passive:37'],\n        name: 'Passive Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'passive:40:atk': {\n        id: BuffId['passive:40:atk'],\n        name: 'Passive Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'passive:40:def': {\n        id: BuffId['passive:40:def'],\n        name: 'Passive Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'passive:40:rec': {\n        id: BuffId['passive:40:rec'],\n        name: 'Passive Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'passive:41:hp': {\n        id: BuffId['passive:41:hp'],\n        name: 'Passive Element Squad-based HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n    }, 'passive:41:atk': {\n        id: BuffId['passive:41:atk'],\n        name: 'Passive Element Squad-based Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n    }, 'passive:41:def': {\n        id: BuffId['passive:41:def'],\n        name: 'Passive Element Squad-based Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n    }, 'passive:41:rec': {\n        id: BuffId['passive:41:rec'],\n        name: 'Passive Element Squad-based Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n    }, 'passive:41:crit': {\n        id: BuffId['passive:41:crit'],\n        name: 'Passive Element Squad-based Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let gender = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    gender = buff.conditions.targetGender || '';\n                }\n            }\n            if (typeof gender !== 'string' || !gender) {\n                gender = 'unknown';\n            }\n            let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n            if (!gender || !(iconKey in IconId)) {\n                iconKey = `BUFF_GENDER${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:42:hp': {\n            id: BuffId['passive:42:hp'],\n            name: 'Passive Gender-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:42:atk': {\n            id: BuffId['passive:42:atk'],\n            name: 'Passive Gender-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:42:def': {\n            id: BuffId['passive:42:def'],\n            name: 'Passive Gender-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:42:rec': {\n            id: BuffId['passive:42:rec'],\n            name: 'Passive Gender-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:42:crit': {\n            id: BuffId['passive:42:crit'],\n            name: 'Passive Gender-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:43': {\n        id: BuffId['passive:43'],\n        name: 'Passive Damage Reduction To One (Chance)',\n        stat: UnitStat.reduceDamageToOne,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n    }, 'passive:44:hp': {\n        id: BuffId['passive:44:hp'],\n        name: 'Passive Flat HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:44:atk': {\n        id: BuffId['passive:44:atk'],\n        name: 'Passive Flat Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:44:def': {\n        id: BuffId['passive:44:def'],\n        name: 'Passive Flat Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:44:rec': {\n        id: BuffId['passive:44:rec'],\n        name: 'Passive Flat Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:44:crit': {\n        id: BuffId['passive:44:crit'],\n        name: 'Passive Flat Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:45:base': {\n        id: BuffId['passive:45:base'],\n        name: 'Passive Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:45:buff': {\n        id: BuffId['passive:45:buff'],\n        name: 'Passive Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:46:atk': {\n        id: BuffId['passive:46:atk'],\n        name: 'Passive Attack Boost Relative to HP',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDATKDOWN : IconId.BUFF_HPSCALEDATKUP],\n    }, 'passive:46:def': {\n        id: BuffId['passive:46:def'],\n        name: 'Passive Defense Boost Relative to HP',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDDEFDOWN : IconId.BUFF_HPSCALEDDEFUP],\n    }, 'passive:46:rec': {\n        id: BuffId['passive:46:rec'],\n        name: 'Passive Recovery Boost Relative to HP',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDRECDOWN : IconId.BUFF_HPSCALEDRECUP],\n    }, 'passive:47': {\n        id: BuffId['passive:47'],\n        name: 'Passive BC Fill on Spark',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKBBUP],\n    }, 'passive:48': {\n        id: BuffId['passive:48'],\n        name: 'Passive BC Cost Reduction',\n        stat: UnitStat.bcCostReduction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBCOST_REDUCTION],\n    }, 'passive:49': {\n        id: BuffId['passive:49'],\n        name: 'Passive BB Gauge Consumption Reduction',\n        stat: UnitStat.bbGaugeConsumptionReduction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:50:fire': {\n        id: BuffId['passive:50:fire'],\n        name: 'Passive Fire Elemental Damage Boost',\n        stat: UnitStat.fireElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGUP],\n    }, 'passive:50:water': {\n        id: BuffId['passive:50:water'],\n        name: 'Passive Water Elemental Damage Boost',\n        stat: UnitStat.waterElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGUP],\n    }, 'passive:50:earth': {\n        id: BuffId['passive:50:earth'],\n        name: 'Passive Earth Elemental Damage Boost',\n        stat: UnitStat.earthElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGUP],\n    }, 'passive:50:thunder': {\n        id: BuffId['passive:50:thunder'],\n        name: 'Passive Thunder Elemental Damage Boost',\n        stat: UnitStat.thunderElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGUP],\n    }, 'passive:50:light': {\n        id: BuffId['passive:50:light'],\n        name: 'Passive Light Elemental Damage Boost',\n        stat: UnitStat.lightElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGUP],\n    }, 'passive:50:dark': {\n        id: BuffId['passive:50:dark'],\n        name: 'Passive Dark Elemental Damage Boost',\n        stat: UnitStat.darkElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGUP],\n    }, 'passive:50:unknown': {\n        id: BuffId['passive:50:unknown'],\n        name: 'Passive Elemental Damage Boost (Unspecified Element)',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGUP],\n    }, 'passive:53:critical-damage-base': {\n        id: BuffId['passive:53:critical-damage-base'],\n        name: 'Passive Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:critical-damage-buff': {\n        id: BuffId['passive:53:critical-damage-buff'],\n        name: 'Passive Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:element-damage-base': {\n        id: BuffId['passive:53:element-damage-base'],\n        name: 'Passive Base Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'passive:53:element-damage-buff': {\n        id: BuffId['passive:53:element-damage-buff'],\n        name: 'Passive Buffed Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'passive:53:critical-rate-base': {\n        id: BuffId['passive:53:critical-rate-base'],\n        name: 'Passive Base Critical Hit Rate Reduction',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:critical-rate-buff': {\n        id: BuffId['passive:53:critical-rate-buff'],\n        name: 'Passive Buffed Critical Hit Rate Reduction',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:55:hp condition': {\n        id: BuffId['passive:55:hp condition'],\n        name: 'Passive Conditional Effect based on HP Threshold',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'UNKNOWN_PROC_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n        name: 'Unknown Proc Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n        name: 'Unknown Proc Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'proc:1': {\n        id: BuffId['proc:1'],\n        name: 'Regular Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:2': {\n        id: BuffId['proc:2'],\n        name: 'Burst Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:3': {\n        id: BuffId['proc:3'],\n        name: 'Active Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:4:flat': {\n        id: BuffId['proc:4:flat'],\n        name: 'Burst BC Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:4:percent': {\n        id: BuffId['proc:4:percent'],\n        name: 'Burst BC Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:5:atk': {\n            id: BuffId['proc:5:atk'],\n            name: 'Active Regular/Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:5:def': {\n            id: BuffId['proc:5:def'],\n            name: 'Active Regular/Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:5:rec': {\n            id: BuffId['proc:5:rec'],\n            name: 'Active Regular/Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:5:crit': {\n            id: BuffId['proc:5:crit'],\n            name: 'Active Regular/Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'proc:6:bc': {\n        id: BuffId['proc:6:bc'],\n        name: 'Active Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'proc:6:hc': {\n        id: BuffId['proc:6:hc'],\n        name: 'Active Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'proc:6:item': {\n        id: BuffId['proc:6:item'],\n        name: 'Active Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'proc:7': {\n        id: BuffId['proc:7'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:8:flat': {\n        id: BuffId['proc:8:flat'],\n        name: 'Max HP Boost (Flat Amount)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    }, 'proc:8:percent': {\n        id: BuffId['proc:8:percent'],\n        name: 'Max HP Boost (Percentage)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'DOWN'; // default to down since these are reduction buffs\n            if (buff) {\n                if (buff.value && buff.value > 0) {\n                    polarity = 'UP';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:9:atk': {\n            id: BuffId['proc:9:atk'],\n            name: 'Active Regular/Elemental Attack Reduction',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:9:def': {\n            id: BuffId['proc:9:def'],\n            name: 'Active Regular/Elemental Defense Reduction',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:9:rec': {\n            id: BuffId['proc:9:rec'],\n            name: 'Active Regular/Elemental Recovery Reduction',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:9:unknown': {\n            id: BuffId['proc:9:unknown'],\n            name: 'Active Regular/Elemental Unknown Stat Reduction',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.UNKNOWN],\n        },\n    };\n})()), { 'proc:10:poison': {\n        id: BuffId['proc:10:poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:10:weak': {\n        id: BuffId['proc:10:weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:10:sick': {\n        id: BuffId['proc:10:sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:10:injury': {\n        id: BuffId['proc:10:injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:10:curse': {\n        id: BuffId['proc:10:curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:10:paralysis': {\n        id: BuffId['proc:10:paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:10:atk down': {\n        id: BuffId['proc:10:atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWNBLK],\n    }, 'proc:10:def down': {\n        id: BuffId['proc:10:def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWNBLK],\n    }, 'proc:10:rec down': {\n        id: BuffId['proc:10:rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWNBLK],\n    }, 'proc:10:unknown': {\n        id: BuffId['proc:10:unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:11:poison': {\n        id: BuffId['proc:11:poison'],\n        name: 'Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_POISON],\n    }, 'proc:11:weak': {\n        id: BuffId['proc:11:weak'],\n        name: 'Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_WEAK],\n    }, 'proc:11:sick': {\n        id: BuffId['proc:11:sick'],\n        name: 'Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_SICK],\n    }, 'proc:11:injury': {\n        id: BuffId['proc:11:injury'],\n        name: 'Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_INJURY],\n    }, 'proc:11:curse': {\n        id: BuffId['proc:11:curse'],\n        name: 'Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_CURSE],\n    }, 'proc:11:paralysis': {\n        id: BuffId['proc:11:paralysis'],\n        name: 'Paralysis Infliction',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_PARALYSIS],\n    }, 'proc:11:atk down': {\n        id: BuffId['proc:11:atk down'],\n        name: 'Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWN],\n    }, 'proc:11:def down': {\n        id: BuffId['proc:11:def down'],\n        name: 'Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWN],\n    }, 'proc:11:rec down': {\n        id: BuffId['proc:11:rec down'],\n        name: 'Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWN],\n    }, 'proc:11:unknown': {\n        id: BuffId['proc:11:unknown'],\n        name: 'Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.DEBUFF_AILMENT],\n    }, 'proc:12': {\n        id: BuffId['proc:12'],\n        name: 'Instant Revive (Guaranteed)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:13': {\n        id: BuffId['proc:13'],\n        name: 'Random Target Damage',\n        stackType: BuffStackType.Attack,\n        icons: () => [IconId.ATK_RT],\n    }, 'proc:14': {\n        id: BuffId['proc:14'],\n        name: 'Lifesteal Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n    }, 'proc:16:fire': {\n        id: BuffId['proc:16:fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:16:water': {\n        id: BuffId['proc:16:water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:16:earth': {\n        id: BuffId['proc:16:earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:16:thunder': {\n        id: BuffId['proc:16:thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:16:light': {\n        id: BuffId['proc:16:light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:16:dark': {\n        id: BuffId['proc:16:dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:16:all': {\n        id: BuffId['proc:16:all'],\n        name: 'Active Elemental Damage Reduction (All Elements)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:16:unknown': {\n        id: BuffId['proc:16:unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:17:poison': {\n        id: BuffId['proc:17:poison'],\n        name: 'Active Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:17:weak': {\n        id: BuffId['proc:17:weak'],\n        name: 'Active Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:17:sick': {\n        id: BuffId['proc:17:sick'],\n        name: 'Active Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:17:injury': {\n        id: BuffId['proc:17:injury'],\n        name: 'Active Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:17:curse': {\n        id: BuffId['proc:17:curse'],\n        name: 'Active Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:17:paralysis': {\n        id: BuffId['proc:17:paralysis'],\n        name: 'Active Paralysis Resist',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:18': {\n        id: BuffId['proc:18'],\n        name: 'Active Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'proc:19': {\n        id: BuffId['proc:19'],\n        name: 'Active Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:20': {\n        id: BuffId['proc:20'],\n        name: 'Active BC Fill when attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'proc:22': {\n        id: BuffId['proc:22'],\n        name: 'Active Defense Ignore',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'proc:23': {\n        id: BuffId['proc:23'],\n        name: 'Active Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'proc:24:atk': {\n        id: BuffId['proc:24:atk'],\n        name: 'Active Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'proc:24:def': {\n        id: BuffId['proc:24:def'],\n        name: 'Active Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'proc:24:rec': {\n        id: BuffId['proc:24:rec'],\n        name: 'Active Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'proc:26': {\n        id: BuffId['proc:26'],\n        name: 'Active Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'proc:27': {\n        id: BuffId['proc:27'],\n        name: 'Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:28': {\n        id: BuffId['proc:28'],\n        name: 'Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n    }, 'proc:29': {\n        id: BuffId['proc:29'],\n        name: 'Multi-Element Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n    }, 'proc:30:fire': {\n        id: BuffId['proc:30:fire'],\n        name: 'Active Added Element to Attack (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDFIRE],\n    }, 'proc:30:water': {\n        id: BuffId['proc:30:water'],\n        name: 'Active Added Element to Attack (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWATER],\n    }, 'proc:30:earth': {\n        id: BuffId['proc:30:earth'],\n        name: 'Active Added Element to Attack (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDEARTH],\n    }, 'proc:30:thunder': {\n        id: BuffId['proc:30:thunder'],\n        name: 'Active Added Element to Attack (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDTHUNDER],\n    }, 'proc:30:light': {\n        id: BuffId['proc:30:light'],\n        name: 'Active Added Element to Attack (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDLIGHT],\n    }, 'proc:30:dark': {\n        id: BuffId['proc:30:dark'],\n        name: 'Active Added Element to Attack (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDARK],\n    }, 'proc:30:unknown': {\n        id: BuffId['proc:30:unknown'],\n        name: 'Active Added Element to Attack (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDELEMENT],\n    }, 'proc:31:flat': {\n        id: BuffId['proc:31:flat'],\n        name: 'Burst BC Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:31:percent': {\n        id: BuffId['proc:31:percent'],\n        name: 'Burst BC Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:32:fire': {\n        id: BuffId['proc:32:fire'],\n        name: 'Element Shift (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTFIRE],\n    }, 'proc:32:water': {\n        id: BuffId['proc:32:water'],\n        name: 'Element Shift (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTWATER],\n    }, 'proc:32:earth': {\n        id: BuffId['proc:32:earth'],\n        name: 'Element Shift (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTEARTH],\n    }, 'proc:32:thunder': {\n        id: BuffId['proc:32:thunder'],\n        name: 'Element Shift (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTTHUNDER],\n    }, 'proc:32:light': {\n        id: BuffId['proc:32:light'],\n        name: 'Element Shift (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTLIGHT],\n    }, 'proc:32:dark': {\n        id: BuffId['proc:32:dark'],\n        name: 'Element Shift (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTDARK],\n    }, 'proc:32:unknown': {\n        id: BuffId['proc:32:unknown'],\n        name: 'Element Shift (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTELEMENT],\n    }, 'proc:33': {\n        id: BuffId['proc:33'],\n        name: 'Buff Removal',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_REMOVEBUFF],\n    }, 'proc:34:flat': {\n        id: BuffId['proc:34:flat'],\n        name: 'Burst BB Gauge Drain (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:34:percent': {\n        id: BuffId['proc:34:percent'],\n        name: 'Burst BB Gauge Drain (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:36': {\n        id: BuffId['proc:36'],\n        name: 'Active Leader Skill Lock',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DISABLELS],\n    }, 'proc:37': {\n        id: BuffId['proc:37'],\n        name: 'Summon Unit',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SUMMONUNIT],\n    }, 'proc:38:poison': {\n        id: BuffId['proc:38:poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:38:weak': {\n        id: BuffId['proc:38:weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:38:sick': {\n        id: BuffId['proc:38:sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:38:injury': {\n        id: BuffId['proc:38:injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:38:curse': {\n        id: BuffId['proc:38:curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:38:paralysis': {\n        id: BuffId['proc:38:paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:38:atk down': {\n        id: BuffId['proc:38:atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWNBLK],\n    }, 'proc:38:def down': {\n        id: BuffId['proc:38:def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWNBLK],\n    }, 'proc:38:rec down': {\n        id: BuffId['proc:38:rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWNBLK],\n    }, 'proc:38:unknown': {\n        id: BuffId['proc:38:unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:39:fire': {\n        id: BuffId['proc:39:fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:39:water': {\n        id: BuffId['proc:39:water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:39:earth': {\n        id: BuffId['proc:39:earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:39:thunder': {\n        id: BuffId['proc:39:thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:39:light': {\n        id: BuffId['proc:39:light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:39:dark': {\n        id: BuffId['proc:39:dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:39:unknown': {\n        id: BuffId['proc:39:unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:40:poison': {\n        id: BuffId['proc:40:poison'],\n        name: 'Active Poison Infliction Added to Attack',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'proc:40:weak': {\n        id: BuffId['proc:40:weak'],\n        name: 'Active Weak Infliction Added to Attack',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'proc:40:sick': {\n        id: BuffId['proc:40:sick'],\n        name: 'Active Sick Infliction Added to Attack',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'proc:40:injury': {\n        id: BuffId['proc:40:injury'],\n        name: 'Active Injury Infliction Added to Attack',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'proc:40:curse': {\n        id: BuffId['proc:40:curse'],\n        name: 'Active Curse Infliction Added to Attack',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'proc:40:paralysis': {\n        id: BuffId['proc:40:paralysis'],\n        name: 'Active Paralysis Infliction Added to Attack',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'proc:40:atk down': {\n        id: BuffId['proc:40:atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:40:def down': {\n        id: BuffId['proc:40:def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:40:rec down': {\n        id: BuffId['proc:40:rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:40:unknown': {\n        id: BuffId['proc:40:unknown'],\n        name: 'Active Unknown Ailment Infliction Added to Attack',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'proc:42': {\n        id: BuffId['proc:42'],\n        name: 'Sacrificial Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n    }, 'proc:43': {\n        id: BuffId['proc:43'],\n        name: 'Burst OD Gauge Fill (Percentage)',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_OVERDRIVEUP],\n    }, 'proc:44': {\n        id: BuffId['proc:44'],\n        name: 'Active Damage over Time',\n        stat: UnitStat.damageOverTime,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_TURNDMG],\n    }, 'proc:45:bb': {\n        id: BuffId['proc:45:bb'],\n        name: 'Active BB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'proc:45:sbb': {\n        id: BuffId['proc:45:sbb'],\n        name: 'Active SBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'proc:45:ubb': {\n        id: BuffId['proc:45:ubb'],\n        name: 'Active UBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'proc:46': {\n        id: BuffId['proc:46'],\n        name: 'Non-Lethal Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:47': {\n        id: BuffId['proc:47'],\n        name: 'HP Scaled Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPSCALED : IconId.ATK_AOE_HPSCALED],\n    }, 'proc:48:base': {\n        id: BuffId['proc:48:base'],\n        name: 'Piercing Proportional Damage (Base HP)',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n    }, 'proc:48:current': {\n        id: BuffId['proc:48:current'],\n        name: 'Piercing Proportional Damage (Current HP)',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n    }, 'proc:48:fixed': {\n        id: BuffId['proc:48:fixed'],\n        name: 'Piercing Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_FIXED : IconId.ATK_AOE_PIERCING_FIXED],\n    }, 'proc:48:unknown': {\n        id: BuffId['proc:48:unknown'],\n        name: 'Unknown Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:49': {\n        id: BuffId['proc:49'],\n        name: 'Instant Death (Chance)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KO],\n    }, 'proc:50': {\n        id: BuffId['proc:50'],\n        name: 'Active Damage Reflect (Chance)',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'proc:51:atk down': {\n        id: BuffId['proc:51:atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:51:def down': {\n        id: BuffId['proc:51:def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:51:rec down': {\n        id: BuffId['proc:51:rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:52': {\n        id: BuffId['proc:52'],\n        name: 'Active BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'proc:53:poison': {\n        id: BuffId['proc:53:poison'],\n        name: 'Active Poison Counter',\n        stat: UnitStat.poisonCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONCOUNTER],\n    }, 'proc:53:weak': {\n        id: BuffId['proc:53:weak'],\n        name: 'Active Weak Counter',\n        stat: UnitStat.weakCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKCOUNTER],\n    }, 'proc:53:sick': {\n        id: BuffId['proc:53:sick'],\n        name: 'Active Sick Counter',\n        stat: UnitStat.sickCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKCOUNTER],\n    }, 'proc:53:injury': {\n        id: BuffId['proc:53:injury'],\n        name: 'Active Injury Counter',\n        stat: UnitStat.injuryCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJCONTER],\n    }, 'proc:53:curse': {\n        id: BuffId['proc:53:curse'],\n        name: 'Active Curse Counter',\n        stat: UnitStat.curseCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSECOUNTER],\n    }, 'proc:53:paralysis': {\n        id: BuffId['proc:53:paralysis'],\n        name: 'Active Paralysis Counter',\n        stat: UnitStat.paralysisCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYCOUNTER],\n    }, 'proc:54': {\n        id: BuffId['proc:54'],\n        name: 'Active Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'UNKNOWN_CONDITIONAL_EFFECT_ID': {\n        id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n        name: 'Unknown Conditional Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_CONDITIONAL_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n        name: 'Unknown Conditional Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'buff:12:ko resistance': {\n        id: BuffId['buff:12:ko resistance'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    } }));\n","import { BuffId } from './buff-types';\nimport { getProcEffectToBuffMapping } from './proc-effect-mapping';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PROC_ID } from '../constants';\nimport isProcEffect from '../isProcEffect';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given proc effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            originalId: id,\n            effectDelay: effect['effect delay time(ms)/frame'],\n            targetType: effect['target type'],\n            targetArea: effect['target area'],\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given proc effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Proc effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given proc effect object.\n */\nexport default function convertProcEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isProcEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId } from './buff-types';\nimport isPassiveEffect from '../isPassiveEffect';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PASSIVE_ID } from '../constants';\nimport { getPassiveEffectToBuffMapping } from './passive-effect-mapping';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given passive effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given passive effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Passive effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertPassiveEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isPassiveEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BUFF_METADATA } from './buff-metadata';\n/**\n * @description Get the associated metadata entry for a given buff ID.\n * @param id Buff ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import { TargetArea, } from '../datamine-types';\n/**\n * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n */\nexport default function combineEffectsAndDamageFrames(effects, damageFrames) {\n    let combinedEntries = [];\n    if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n        combinedEntries = effects.map((effect, i) => {\n            const correspondingFrameEntry = damageFrames[i];\n            return {\n                delay: effect['effect delay time(ms)/frame'],\n                effect,\n                frames: correspondingFrameEntry,\n                id: `${effect['proc id'] || effect['unknown proc id']}`,\n                targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                targetType: effect['target type'],\n            };\n        });\n    }\n    return combinedEntries;\n}\n","import getEffectId from './getEffectId';\nimport isPassiveEffect from './isPassiveEffect';\nimport getNameForPassive from './getNameForPassive';\nimport isProcEffect from './isProcEffect';\nimport getNameForProc from './getNameForProc';\n/**\n * @description Get the name of a given object.\n * @param effect Object to get the name from.\n * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n * @returns Name of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectName(effect, metadata = {}) {\n    let resultName = '';\n    const effectId = getEffectId(effect);\n    if (isPassiveEffect(effect)) {\n        resultName = getNameForPassive(effectId, metadata && metadata.passive);\n    }\n    else if (isProcEffect(effect)) {\n        resultName = getNameForProc(effectId, metadata && metadata.proc);\n    }\n    return resultName;\n}\n","/**\n * @description Get the effects of a given extra skill.\n * @param skill Extra skill to get the effects of.\n * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForExtraSkill(skill) {\n    return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n}\n","/**\n * @description Get the effects of a given item.\n * @param item Item to get the effects of, if any are present,\n * @returns Effects of the given item if they exist, an empty array otherwise.\n */\nexport default function getEffectsForItem(item) {\n    let result = [];\n    if (item && item.effect) {\n        if (Array.isArray(item.effect)) {\n            result = item.effect;\n        }\n        else if (Array.isArray(item.effect.effect)) {\n            const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n            result = effect.map(e => {\n                // apply target data to each effect\n                const fullProcEffect = Object.assign({}, e);\n                fullProcEffect['target area'] = targetArea;\n                fullProcEffect['target type'] = targetType;\n                return fullProcEffect;\n            });\n        }\n    }\n    return result;\n}\n","/**\n * @description Generate a URL to display the image with the given item thumbnail filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents the thumbnail image for a given item.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getItemImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/item/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given leader skill.\n * @param skill Leader skill to get the effects of.\n * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForLeaderSkill(skill) {\n    return skill && Array.isArray(skill.effects) ? skill.effects : [];\n}\n","/**\n * @description Generate the file names for each of the image type for a given unit ID.\n * @param id Unit ID to use to generate the file names.\n * @param suffix Optional parameter that's useful for things like alternate art.\n * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n */\nexport default function getUnitImageFileNames(id, suffix = '') {\n    const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n    return {\n        spritesheet: `unit_anime_${fileNameSuffix}`,\n        battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n        guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n        fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n    };\n}\n","/**\n * @description Generate a URL to display the image with the given unit filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents an image for a given unit.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getUnitImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n}\n","/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n","/**\n * @description Extract the ID of a string in the format of `number@actualId`. If there\n * is no value after the @ character or if no @ character is present, the original ID is returned.\n * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n * @param id Original SP Enhancement Entry ID.\n * @returns The ID of a string in the format of `number@actualId`, or the original input if\n * there is no @ character or no value after the @ character.\n */\nexport default function getSpEntryId(id) {\n    return (typeof id === 'string' && id.split('@')[1]) || id;\n}\n","/**\n * @description Get the effects of a given SP Enhancement Entry.\n * @param entry SP Enhancement Entry to get the effects of.\n * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n */\nexport default function getEffectsForSpEnhancement(entry) {\n    const result = [];\n    if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n        const effectWrappers = entry.skill.effects;\n        effectWrappers.forEach(effectWrapper => {\n            Object.keys(effectWrapper).forEach(spType => {\n                const originalEffect = effectWrapper[spType];\n                const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                result.push(unwrappedEffect);\n            });\n        });\n    }\n    return result;\n}\n","import { SpCategoryName } from '../datamine-types';\n/**\n * @description Get the associated category name with a given category ID.\n * @param categoryId Category ID to get the name of.\n * @returns Name of the given category ID or the string 'Unknown'.\n */\nexport default function getSpCategoryName(categoryId) {\n    let result;\n    const numericalCategoryId = +categoryId;\n    switch (numericalCategoryId) {\n        case 1:\n            result = SpCategoryName['Parameter Boost'];\n            break;\n        case 2:\n            result = SpCategoryName.Spark;\n            break;\n        case 3:\n            result = SpCategoryName['Critical Hits'];\n            break;\n        case 4:\n            result = SpCategoryName['Attack Boost'];\n            break;\n        case 5:\n            result = SpCategoryName['BB Gauge'];\n            break;\n        case 6:\n            result = SpCategoryName['HP Recovery'];\n            break;\n        case 7:\n            result = SpCategoryName.Drops;\n            break;\n        case 8:\n            result = SpCategoryName['Ailment Resistance'];\n            break;\n        case 9:\n            result = SpCategoryName['Ailment Infliction'];\n            break;\n        case 10:\n            result = SpCategoryName['Damage Reduction'];\n            break;\n        case 11:\n            result = SpCategoryName.Special;\n            break;\n        default:\n            result = SpCategoryName.Unknown;\n            break;\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding character code for a given index.\n * It expects an index between 0 and 61 inclusive; will return an empty string if\n * the given value is outside of the range.\n * @param index Index of an SP entry in a given skills array.\n * @returns Corresponding single alphanumeric character to the given index\n * or an empty string if the index is invalid.\n */\nexport default function spIndexToCode(index) {\n    let result = '';\n    let correspondingCharacterCode = -1;\n    if (Number.isInteger(index)) {\n        if (index >= 0 && index <= 25) { // A-Z\n            correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (index >= 26 && index <= 51) { // a-z\n            correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n        }\n        else if (index >= 52 && index <= 61) { // 0-9\n            correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n        }\n    }\n    if (correspondingCharacterCode !== -1) {\n        result = String.fromCharCode(correspondingCharacterCode);\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding index for a given character code.\n * It expects an alphanumeric character and will return -1 otherwise.\n * @param code Character code an SP entry in a given skills array.\n * @returns Corresponding index to the given character or -1 if the\n * character is invalid.\n */\nexport default function spCodeToIndex(code) {\n    let result = -1;\n    let characterCodeOffset = -1;\n    if (!!code && typeof code === 'string' && code.length === 1) {\n        if (code >= 'A' && code <= 'Z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (code >= 'a' && code <= 'z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n        }\n        else if (code >= '0' && code <= '9') {\n            characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n        }\n    }\n    if (characterCodeOffset !== -1) {\n        result = code.charCodeAt(0) - characterCodeOffset;\n    }\n    return result;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n * @param id SP Enhancement entry ID.\n * @param entries Collection of SP Enhancement entries to search in.\n * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n */\nexport default function getSpEntryWithId(id, entries) {\n    const spId = getSpEntryId(id);\n    return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n * @param entry SP Entry to get dependencies for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n */\nexport default function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependencies = [];\n    if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n        const dependencyId = getSpEntryId(entry.dependency);\n        const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n        if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n            addedEntries.add(dependencyEntry);\n            const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n            dependencies = [dependencyEntry].concat(subDependencies);\n        }\n    }\n    return dependencies;\n}\n","/**\n * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n * @param entry SP Entry to get dependents for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n */\nexport default function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependents = [];\n    if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n        const entryId = entry.id;\n        dependents = allEntries\n            .filter(s => {\n            return s.dependency &&\n                s.dependency.includes(entryId) &&\n                !addedEntries.has(s);\n        });\n        dependents.forEach(dependent => {\n            addedEntries.add(dependent);\n            const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n            dependents = dependents.concat(subDependents);\n        });\n    }\n    return dependents;\n}\n","/* NOTE: this file is automatically generated; do not edit this file */\nexport default '0.7.0';\n"]}