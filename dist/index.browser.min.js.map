{"version":3,"sources":["index.browser.min.js","index.browser.js","bursts/getLevelEntryForBurst.js","buffs/getEffectId.js","buffs/constants.js","buffs/effect-metadata.js","buffs/getMetadataForProc.js","buffs/isAttackingProcId.js","datamine-types.js","bursts/getEffectsForBurst.js","bursts/getExtraAttackDamageFramesEntry.js","buffs/getMetadataForPassive.js","buffs/getNameForProc.js","buffs/getNameForPassive.js","buffs/isProcEffect.js","buffs/isPassiveEffect.js","buffs/parsers/buff-types.js","buffs/parsers/_helpers.js","buffs/parsers/proc-effect-mapping.js","buffs/parsers/passive-effect-mapping.js","buffs/parsers/buff-metadata.js","buffs/parsers/convertProcEffectToBuffs.js","buffs/parsers/convertPassiveEffectToBuffs.js","buffs/parsers/getMetadataForBuff.js","buffs/combineEffectsAndDamageFrames.js","buffs/getEffectName.js","extra-skills/getEffectsForExtraSkill.js","items/getEffectsForItem.js","items/getItemImageUrl.js","leader-skills/getEffectsForLeaderSkill.js","units/getUnitImageFileNames.js","units/getUnitImageUrl.js","sp-enhancements/_constants.js","sp-enhancements/getSpEntryId.js","sp-enhancements/getEffectsForSpEnhancement.js","sp-enhancements/getSpCategoryName.js","sp-enhancements/spIndexToCode.js","sp-enhancements/spCodeToIndex.js","sp-enhancements/getSpEntryWithId.js","sp-enhancements/getAllDependenciesForSpEntry.js","sp-enhancements/getAllEntriesThatDependOnSpEntry.js","version.js"],"names":["bfmtUtilities","exports","getLevelEntryForBurst","burst","level","burstEffectsByLevel","Array","isArray","levels","levelIndex","isNaN","length","getEffectId","effect","resultId","KNOWN_PROC_ID","KNOWN_PASSIVE_ID","ProcBuffType","constants","Object","freeze","__proto__","PASSIVE_METADATA","1","ID","Name","2","3","4","5","6","8","9","10","11","12","13","14","15","16","17","19","20","21","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","52","53","55","58","59","61","62","63","64","65","66","69","70","71","72","73","74","75","77","78","79","80","81","82","84","85","86","88","89","90","91","92","93","96","97","99","100","101","102","103","104","105","106","107","109","110","111","112","113","114","127","128","143","10008","11004","11005","11006","11009","66,1","PROC_METADATA","0","Type","7","18","22","51","54","56","57","60","67","68","76","83","87","94","95","119","123","126","130","131","132","901","902","903","905","906","907","908","10000","10001","10002","10003","10004","10005","10006","10007","10009","10012","10015","10016","10017","10018","10019","10020","10021","10022","10023","10025","10026","11000","11001","11002","11003","70001","70002","2-5","getMetadataForProc","id","metadata","hasOwnProperty","call","isAttackingProcId","metadataEntry","Attack","Ailment","ArenaCondition","MoveType","TargetArea","TargetAreaShorthand","TargetType","SpPassiveType","SphereTypeName","SphereTypeId","SpCategoryName","SpCategoryId","UnitAnimationKey","UnitElement","UnitGender","UnitGettingType","UnitKind","UnitType","ItemType","MimicUnitIds","index","getEffectsForBurst","levelEntry","effects","getExtraAttackDamageFramesEntry","damageFrames","effectDelay","unifiedFrames","filter","frame","procId","BurstHeal","reduce","acc","frameEntry","keepFirstFrame","numFrames","damageDistribution","frameTimes","frameIndex","push","damage","time","resultDamageFramesEntry","effect delay time(ms)/frame","frame times","hit dmg% distribution","hit dmg% distribution (total)","hits","sort","a","b","forEach","getMetadataForPassive","getNameForProc","getNameForPassive","isProcEffect","isPassiveEffect","MimicMonsterGroupMapping","1000","Mimic","1100","BatMimic","1101","1200","DragonMimic","1300","MetalMimic","BuffStackType","BuffSource","BuffConditionElement","UnitStat","IconId","BuffId","datamineTypes","createSourcesFromContext","context","resultArray","previousSources","slice","unshift","source","sourceId","createSourceEntryFromContext","processExtraSkillConditions","conditions","aggregate","units","Set","items","sphereTypes","unknowns","condition","add","item","unit","type_id","condition_id","entries","entry","size","from","getPassiveTargetData","isPartyEffect","LeaderSkill","sp_type","EnhancePassive","Party","targetType","Self","targetArea","Aoe","Single","getProcTargetData","parseNumberOrDefault","value","defaultValue","createUnknownParamsValue","params","startIndex","hasValue","result","buffSourceIsBurstType","BraveBurst","SuperBraveBurst","UltimateBraveBurst","BondedBraveBurst","BondedSuperBraveBurst","DualBraveBurst","includes","mapping","getProcEffectToBuffMapping","reload","Map","map","UNKNOWN_PROC_PARAM_EFFECT_KEY","ELEMENT_MAPPING","All","Fire","Water","Earth","Thunder","Light","Dark","AILMENT_MAPPING","Poison","Weak","Sick","Injury","Curse","Paralysis","AttackReduction","DefenseReduction","RecoveryReduction","retrieveCommonInfoForEffects","injectionContext","targetData","sources","splitEffectParams","split","createUnknownParamsEntry","unknownParams","originalId","assign","UNKNOWN_PROC_BUFF_PARAMS","createTurnDurationEntry","buffs","duration","TURN_DURATION_MODIFICATION","createNoParamsEntry","NO_PARAMS_SPECIFIED","handlePostParse","results","createUnknownParamsEntryFromExtraParams","extraParams","isTurnDurationBuff","turnDuration","getAttackInformationFromContext","distribution","parseProcWithSingleNumericalParameterAndTurnDuration","effectValueKey","effectTurnDurationKey","parseParamValue","rawValue","buffId","rawTurnDuration","set","atk%","flatAtk","crit%","bc%","hc%","dmg%","filteredValue","key","keys","healLow","healHigh","healerRec%","recX","recY","targetRec%","rec","flatFill","percentFill","rawFlatFill","rawPercentFill","element","atk","def","crit","coreStatProperties","rawElement","Unknown","effectElement","statType","effectKey","find","k","startsWith","concat","prop","hasAnyStats","some","statKey","buffEntry","targetElements","bc","hc","dropRateProperties","hasAnyRates","recoveredHpPercent","rawRecoveredHp","flatHpBoost","percentHpBoost","rawFlatBoost","rawPercentBoost","STAT_TYPE_MAPPING","statReductionEntries","statType1","value1","procChance1","statType2","value2","procChance2","rawStatType","rawProcChance","chance","stat","buffKey","hasAnyValues","curedAilments","splitParams","knownParams","p","param","values","ailment","inflictedAilments","numParams","ailmentValue","ailmentType","reviveToHp","rawReviveToHp","rawHits","Random","drainLow%","drainHigh%","mitigation","rawMitigation","mitigationKey","e","AILMENTS_ORDER","resistances","poison","weak","sick","injury","curse","paralysis","rawDuration","ailmentKeysInEffect","correspondingKey","fillLow","fillHigh","rawFillLow","rawFillHigh","rawChance","whenAttacked","coreStatPropertyMapping","effectToCoreStatMapping","attack","defense","recovery","hp","stats","convertedStat","rawConvertedStat","hitIncreasePerHit","extraHitDamage","hpDamageLow%","hpDamageHigh%","hpDamageChance%","attackElements","element1","element2","element3","elements","validElements","inputElement","sanitizedElement","flatDrainLow","flatDrainHigh","percentDrainLow","percentDrainHigh","rawFlatLow","rawFlatHigh","rawPercentLow","rawPercentHigh","drainLow","drainHigh","rawParams","summonGroup","summonId","rawPositionX","rawPositionY","positionX","positionY","effectAilmentsCured","unknownAilmentCount","i","rawElementsMitigated","rawModLow","rawModHigh","rawFlatAtk","atkLow%","atkHigh%","overdriveFill","rawOverdriveFill","damageParams","affectsElement","unitIndex","rawAffectsElement","rawUnitIndex","filteredDamageParams","setMapping","getPassiveEffectToBuffMapping","X","OmniParadigm","TYPE_MAPPING","Lord","Anima","Breaker","Guardian","Oracle","Rex","STATS_ORDER","DROP_TYPES_ORDER","conditionInfo","UNKNOWN_PASSIVE_BUFF_PARAMS","ThresholdType","parseThresholdValuesFromParamsProperty","rawThreshold","rawRequireAboveFlag","thresholdType","threshold","requireAbove","type","parseThresholdValuesFromEffect","suffix","getThresholdConditions","Hp","hpGreaterThanOrEqualTo","hpLessThanOrEqualTo","Bb","bbGaugeGreaterThanOrEqualTo","bbGaugeLessThanOrEqualTo","parsePassiveWithSingleNumericalParameter","typedEffect","parsePassiveWithNumericalValueRangeAndChance","effectKeyLow","effectKeyHigh","effectKeyChance","buffKeyLow","buffKeyHigh","defaultEffectChance","generateBaseConditions","valueLow","valueHigh","rawLowValue","rawHighValue","[object Object]","elementValue","createBaseStatObject","unitType","targetUnitType","elem","thresholdInfo","thresholdConditions","dropRates","zel","karma","dropType","onEnemyDefeat","damageReduction","rawReduction","rawHealLow","rawHealHigh","onBattleWin","sparkDamageBoost","rawSparkDamageBoost","addedRec","rawAddedRec","addedRec%","onNormalAttack","additionalActions","damageModifier","rawAdditionalActions","rawDamageModifier","minimumElements","minumumUniqueElements","GENDER_MAPPING","Other","Male","Female","gender","rawGender","targetGender","BUFF_METADATA","name","turnDurationModification","stackType","Passive","icons","buff","TURN_DURATION_DOWN","TURN_DURATION_UP","UNKNOWN","UNKNOWN_PASSIVE_EFFECT_ID","passive:1:hp","BUFF_HPDOWN","BUFF_HPUP","passive:1:atk","BUFF_ATKDOWN","BUFF_ATKUP","passive:1:def","BUFF_DEFDOWN","BUFF_DEFUP","passive:1:rec","BUFF_RECDOWN","BUFF_RECUP","passive:1:crit","BUFF_CRTRATEDOWN","BUFF_CRTRATEUP","createIconGetterForStat","polarity","iconKey","toUpperCase","passive:2:hp","passive:2:atk","passive:2:def","passive:2:rec","passive:2:crit","passive:3:hp","passive:3:atk","passive:3:def","passive:3:rec","passive:3:crit","passive:4:poison","poisonResist","BUFF_POISONBLK","passive:4:weak","weakResist","BUFF_WEAKBLK","passive:4:sick","sickResist","BUFF_SICKBLK","passive:4:injury","injuryResist","BUFF_INJURYBLK","passive:4:curse","curseResist","BUFF_CURSEBLK","passive:4:paralysis","BUFF_PARALYSISBLK","passive:5:fire","fireMitigation","BUFF_FIREDMGDOWN","passive:5:water","waterMitigation","BUFF_WATERDMGDOWN","passive:5:earth","earthMitigation","BUFF_EARTHDMGDOWN","passive:5:thunder","thunderMitigation","BUFF_THUNDERDMGDOWN","passive:5:light","lightMitigation","BUFF_LIGHTDMGDOWN","passive:5:dark","darkMitigation","BUFF_DARKDMGDOWN","passive:5:unknown","BUFF_ELEMENTDMGDOWN","passive:8","BUFF_DAMAGECUT","passive:9","bbGauge","BUFF_BBREC","passive:10","hcEfficacy","BUFF_HCREC","passive:11:atk","BUFF_HPTHRESHATKDOWN","BUFF_HPTHRESHATKUP","passive:11:def","BUFF_HPTHRESHDEFDOWN","BUFF_HPTHRESHDEFUP","passive:11:rec","BUFF_HPTHRESHRECDOWN","BUFF_HPTHRESHRECUP","passive:11:crit","BUFF_HPTHRESHCRTRATEDOWN","BUFF_HPTHRESHCRTRATEUP","passive:12:bc","bcDropRate","BUFF_HPTHRESHBCDOWN","BUFF_HPTHRESHBCDROP","passive:12:hc","hcDropRate","BUFF_HPTHRESHHCDOWN","BUFF_HPTHRESHHCDROP","passive:12:item","itemDropRate","BUFF_HPTHRESHITEMDOWN","BUFF_HPTHRESHITEMDROP","passive:12:zel","zelDropRate","BUFF_HPTHRESHZELDOWN","BUFF_HPTHRESHZELDROP","passive:12:karma","karmaDropRate","BUFF_HPTHRESHKARMADOWN","BUFF_HPTHRESHKARMADROP","passive:13","passive:14","passive:15","hpRecovery","BUFF_HPREC","passive:16","passive:17","BUFF_HPABS","passive:19:bc","BUFF_BCDOWN","BUFF_BCDROP","passive:19:hc","BUFF_HCDOWN","BUFF_HCDROP","passive:19:item","BUFF_ITEMDOWN","BUFF_ITEMDROP","passive:19:zel","BUFF_ZELDOWN","BUFF_ZELDROP","passive:19:karma","BUFF_KARMADOWN","BUFF_KARMADROP","passive:20:poison","poisonInflict","BUFF_ADDPOISON","passive:20:weak","weakInflict","BUFF_ADDWEAK","passive:20:sick","sickInflict","BUFF_ADDSICK","passive:20:injury","injuryInflict","BUFF_ADDINJURY","passive:20:curse","curseInflict","BUFF_ADDCURSE","passive:20:paralysis","BUFF_ADDPARA","passive:20:atk down","atkDownInflict","BUFF_ADDATKDOWN","passive:20:def down","defDownInflict","BUFF_ADDDEFDOWN","passive:20:rec down","recDownInflict","BUFF_ADDRECDOWN","passive:20:unknown","BUFF_ADDAILMENT","passive:21:atk","ConditionalTimed","passive:21:def","passive:21:rec","passive:21:crit","passive:23","passive:24","BUFF_BEENATK_HPREC","passive:25","BUFF_DAMAGEBB","passive:26","damageReflect","BUFF_COUNTERDAMAGE","passive:27","targetingModification","BUFF_REPENEATT","BUFF_GETENEATT","passive:28","BUFF_HPTHRESHREPENEATT","BUFF_HPTHRESHGETENEATT","passive:29","defenseIgnore","BUFF_IGNOREDEF","passive:30:atk","BUFF_BBGAUGETHRESHATKDOWN","BUFF_BBGAUGETHRESHATKUP","passive:30:def","BUFF_BBGAUGETHRESHDEFDOWN","BUFF_BBGAUGETHRESHDEFUP","passive:30:rec","BUFF_BBGAUGETHRESHRECDOWN","BUFF_BBGAUGETHRESHRECUP","passive:30:crit","BUFF_BBGAUGETHRESHCRTRATEDOWN","BUFF_BBGAUGETHRESHCRTRATEUP","passive:31:damage","sparkDamage","BUFF_SPARKDOWN","BUFF_SPARKUP","passive:31:bc","BUFF_SPARKBC","passive:31:hc","BUFF_SPARKHC","passive:31:item","BUFF_SPARKITEM","passive:31:zel","BUFF_SPARKZEL","passive:31:karma","BUFF_SPARKKARMA","passive:32","bcEfficacy","BUFF_BBFILL","passive:33","passive:34","criticalDamage","BUFF_CRTUP","passive:35","passive:36","extraAction","BUFF_DBLSTRIKE","passive:37","hitCountModification","BUFF_HITUP","passive:40:atk","BUFF_CONVERTATKDOWN","BUFF_CONVERTATKUP","passive:40:def","BUFF_CONVERTDEFDOWN","BUFF_CONVERTDEFUP","passive:40:rec","BUFF_CONVERTRECDOWN","BUFF_CONVERTRECUP","passive:41:hp","BUFF_UNIQUEELEMENTHPDOWN","BUFF_UNIQUEELEMENTHPUP","passive:41:atk","BUFF_UNIQUEELEMENTATKDOWN","BUFF_UNIQUEELEMENTATKUP","passive:41:def","BUFF_UNIQUEELEMENTDEFDOWN","BUFF_UNIQUEELEMENTDEFUP","passive:41:rec","BUFF_UNIQUEELEMENTRECDOWN","BUFF_UNIQUEELEMENTRECUP","passive:41:crit","BUFF_UNIQUEELEMENTCRTRATEDOWN","BUFF_UNIQUEELEMENTCRTRATEUP","passive:42:hp","passive:42:atk","passive:42:def","passive:42:rec","passive:42:crit","passive:43","reduceDamageToOne","BUFF_DAMAGECUTTOONE","UNKNOWN_PROC_EFFECT_ID","proc:1","ATK_ST","ATK_AOE","proc:2","Burst","proc:3","Active","proc:4:flat","proc:4:percent","hasElement","proc:5:atk","proc:5:def","proc:5:rec","proc:5:crit","proc:6:bc","proc:6:hc","proc:6:item","proc:7","koResistance","Singleton","BUFF_KOBLK","proc:8:flat","proc:8:percent","proc:9:atk","proc:9:def","proc:9:rec","proc:9:unknown","proc:10:poison","proc:10:weak","proc:10:sick","proc:10:injury","proc:10:curse","proc:10:paralysis","proc:10:atk down","atkDownResist","BUFF_ATKDOWNBLK","proc:10:def down","defDownResist","BUFF_DEFDOWNBLK","proc:10:rec down","recDownResist","BUFF_RECDOWNBLK","proc:10:unknown","BUFF_AILMENTBLK","proc:11:poison","DEBUFF_POISON","proc:11:weak","DEBUFF_WEAK","proc:11:sick","DEBUFF_SICK","proc:11:injury","DEBUFF_INJURY","proc:11:curse","DEBUFF_CURSE","proc:11:paralysis","DEBUFF_PARALYSIS","proc:11:atk down","proc:11:def down","proc:11:rec down","proc:11:unknown","DEBUFF_AILMENT","proc:12","proc:13","ATK_RT","proc:14","ATK_ST_HPREC","ATK_AOE_HPREC","proc:16:fire","proc:16:water","proc:16:earth","proc:16:thunder","proc:16:light","proc:16:dark","proc:16:all","proc:16:unknown","proc:17:poison","proc:17:weak","proc:17:sick","proc:17:injury","proc:17:curse","proc:17:paralysis","proc:18","proc:19","proc:20","proc:22","proc:23","proc:24:atk","proc:24:def","proc:24:rec","proc:26","proc:27","ATK_ST_PROPORTIONAL","ATK_AOE_PROPORTIONAL","proc:28","ATK_ST_FIXED","ATK_AOE_FIXED","proc:29","ATK_ST_MULTIELEMENT","ATK_AOE_MULTIELEMENT","proc:30:fire","elementModification","BUFF_ADDFIRE","proc:30:water","BUFF_ADDWATER","proc:30:earth","BUFF_ADDEARTH","proc:30:thunder","BUFF_ADDTHUNDER","proc:30:light","BUFF_ADDLIGHT","proc:30:dark","BUFF_ADDDARK","proc:30:unknown","BUFF_ADDELEMENT","proc:31:flat","proc:31:percent","proc:32:fire","BUFF_SHIFTFIRE","proc:32:water","BUFF_SHIFTWATER","proc:32:earth","BUFF_SHIFTEARTH","proc:32:thunder","BUFF_SHIFTTHUNDER","proc:32:light","BUFF_SHIFTLIGHT","proc:32:dark","BUFF_SHIFTDARK","proc:32:unknown","BUFF_SHIFTELEMENT","proc:33","buffStabilityModification","BUFF_REMOVEBUFF","proc:34:flat","BUFF_BBFILLDOWN","proc:34:percent","proc:36","BUFF_DISABLELS","proc:37","BUFF_SUMMONUNIT","proc:38:poison","proc:38:weak","proc:38:sick","proc:38:injury","proc:38:curse","proc:38:paralysis","proc:38:atk down","proc:38:def down","proc:38:rec down","proc:38:unknown","proc:39:fire","proc:39:water","proc:39:earth","proc:39:thunder","proc:39:light","proc:39:dark","proc:39:unknown","proc:40:poison","proc:40:weak","proc:40:sick","proc:40:injury","proc:40:curse","proc:40:paralysis","proc:40:atk down","proc:40:def down","proc:40:rec down","proc:40:unknown","proc:42","ATK_ST_SACRIFICIAL","ATK_AOE_SACRIFICIAL","proc:43","odGauge","BUFF_OVERDRIVEUP","proc:44","damageOverTime","BUFF_TURNDMG","index$1","convertProcEffectToBuffs","TypeError","conversionFunction","reloadMapping","get","defaultConversionFunction","convertPassiveEffectToBuffs","getMetadataForBuff","index$2","parsers","combineEffectsAndDamageFrames","combinedEntries","correspondingFrameEntry","delay","frames","getEffectName","resultName","effectId","passive","proc","index$3","getEffectsForExtraSkill","skill","index$4","getEffectsForItem","target_area","target_type","fullProcEffect","getItemImageUrl","baseContentUrl","fileName","index$5","getEffectsForLeaderSkill","index$6","getUnitImageFileNames","fileNameSuffix","spritesheet","battleAvatar","guideAvatar","fullIllustration","getUnitImageUrl","CHARACTER_CODE_FOR_UPPERCASE_A","charCodeAt","CHARACTER_CODE_FOR_LOWERCASE_A","CHARACTER_CODE_FOR_NUMBER_0","getSpEntryId","index$7","getEffectsForSpEnhancement","effectWrapper","spType","originalEffect","unwrappedEffect","getSpCategoryName","categoryId","Spark","Drops","Special","spIndexToCode","correspondingCharacterCode","Number","isInteger","String","fromCharCode","spCodeToIndex","code","characterCodeOffset","getSpEntryWithId","spId","getAllDependenciesForSpEntry","allEntries","addedEntries","dependencies","dependency","dependencyId","dependencyEntry","s","has","subDependencies","getAllEntriesThatDependOnSpEntry","dependents","entryId","dependent","subDependents","bursts","extraSkills","leaderSkills","spEnhancements","version"],"mappings":"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","file":"index.browser.min.js","sourcesContent":["\"use strict\";var bfmtUtilities=function(e){function a(e,a){const t=e&&Array.isArray(e.levels)?e.levels:[];let s;return s=null===a||isNaN(a)?t.length-1:+a-1,t[s]}function t(e){let a=\"\";return e&&(a=e[\"proc id\"]||e[\"unknown proc id\"]||e[\"passive id\"]||e[\"unknown passive id\"]||\"\"),a}var s,i;!function(e){e.BurstHeal=\"2\",e.Unknown=\"UNKNOWN_PROC_EFFECT_ID\"}(s||(s={})),function(e){e.TriggeredEffect=\"66\",e.Unknown=\"UNKNOWN_PASSIVE_EFFECT_ID\"}(i||(i={}));var n,o=Object.freeze({__proto__:null,get KNOWN_PROC_ID(){return s},get KNOWN_PASSIVE_ID(){return i}});!function(e){e.Attack=\"Attack\"}(n||(n={}));const c=Object.freeze({1:{ID:\"1\",Name:\"Parameter Boost\"},2:{ID:\"2\",Name:\"Elemental Parameter Boost\"},3:{ID:\"3\",Name:\"Type-Based Parameter Boost\"},4:{ID:\"4\",Name:\"Status Negation\"},5:{ID:\"5\",Name:\"Elemental Damage Reduction\"},6:{ID:\"6\",Name:\"\"},8:{ID:\"8\",Name:\"Damage Reduction\"},9:{ID:\"9\",Name:\"Gradual BB Gauge Boost\"},10:{ID:\"10\",Name:\"HC Efficacy\"},11:{ID:\"11\",Name:\"HP-Conditional Parameter Boost\"},12:{ID:\"12\",Name:\"HP-Conditional Drop Rate Boost\"},13:{ID:\"13\",Name:\"BC Fill on Enemy Defeat\"},14:{ID:\"14\",Name:\"Damage Reduction (Chance)\"},15:{ID:\"15\",Name:\"Heal on Enemy Defeat\"},16:{ID:\"16\",Name:\"Heal on Battle Victory\"},17:{ID:\"17\",Name:\"HP Absorption\"},19:{ID:\"19\",Name:\"Drop Rate Boost\"},20:{ID:\"20\",Name:\"Status Infliction\"},21:{ID:\"21\",Name:\"Parameter Boost for First X Turns\"},23:{ID:\"23\",Name:\"BC Fill on Battle Victory\"},24:{ID:\"24\",Name:\"Heal when Attacked (Chance)\"},25:{ID:\"25\",Name:\"BC Fill when Hit (Chance)\"},26:{ID:\"26\",Name:\"Damage Counter (Chance)\"},27:{ID:\"27\",Name:\"Increased Target Chance\"},28:{ID:\"28\",Name:\"Decreased Target Chance\"},29:{ID:\"29\",Name:\"Defense Ignore (Chance)\"},30:{ID:\"30\",Name:\"BB Conditional Parameter Boost\"},31:{ID:\"31\",Name:\"Spark Damage Boost, Boost Drop Rate on Spark\"},32:{ID:\"32\",Name:\"BC Efficacy\"},33:{ID:\"33\",Name:\"Heal over Time\"},34:{ID:\"34\",Name:\"Critical Damage Boost\"},35:{ID:\"35\",Name:\"BC Fill when Normal Attacking\"},36:{ID:\"36\",Name:\"Extra Action\"},37:{ID:\"37\",Name:\"Hit Count Boost\"},38:{ID:\"38\",Name:\"\"},39:{ID:\"39\",Name:\"\"},40:{ID:\"40\",Name:\"Parameter Conversion\"},41:{ID:\"41\",Name:\"Unique Element Count Conditional Parameter Boost\"},42:{ID:\"42\",Name:\"Gender Parameter Boost\"},43:{ID:\"43\",Name:\"Damage Reduction to 1\"},44:{ID:\"44\",Name:\"Flat Parameter Boost\"},45:{ID:\"45\",Name:\"Critical Damage Negation\"},46:{ID:\"46\",Name:\"Parameter Boost Relative to HP Remainaing\"},47:{ID:\"47\",Name:\"BC Fill on Spark\"},48:{ID:\"48\",Name:\"BC Cost Reduction\"},49:{ID:\"49\",Name:\"BB Gauge Consumption Reduction\"},50:{ID:\"50\",Name:\"Elemental Damage Boost\"},52:{ID:\"52\",Name:\"\"},53:{ID:\"53\",Name:\"Critical/Elemental Weakness Damage Negation\"},55:{ID:\"55\",Name:\"Conditional Effect based on HP Threshold\"},58:{ID:\"58\",Name:\"Damage Reduction when Guarding\"},59:{ID:\"59\",Name:\"BC Fill when Attacked when Guarding\"},61:{ID:\"61\",Name:\"BC Fill on Guard\"},62:{ID:\"62\",Name:\"Elemental Damage Reduction\"},63:{ID:\"63\",Name:\"Elemental Damage Reduction for first X Turns\"},64:{ID:\"64\",Name:\"BB Atk Boost\"},65:{ID:\"65\",Name:\"BC Fill on Critical\"},66:{ID:\"66\",Name:\"Add buff to Brave Burst\"},69:{ID:\"69\",Name:\"Chance KO Resistance (Angel Idol)\"},70:{ID:\"70\",Name:\"OD Gauge Fill Rate Boost\"},71:{ID:\"71\",Name:\"Status Counter\"},72:{ID:\"72\",Name:\"Turn End Effects Activate at Turn Start\"},73:{ID:\"73\",Name:\"Parameter Reduction Negation\"},74:{ID:\"74\",Name:\"Attack Boost on Status Afflicted Foes\"},75:{ID:\"75\",Name:\"Spark Vulnerability\"},77:{ID:\"77\",Name:\"Spark Damage Reduction\"},78:{ID:\"78\",Name:\"Conditional Effect after Damage Received Threshold\"},79:{ID:\"79\",Name:\"BC Fill after Damage Received Threshold\"},80:{ID:\"80\",Name:\"Conditional Effect after Damage Dealt Threshold\"},81:{ID:\"81\",Name:\"BC Fill after Damage Dealt Threshold\"},82:{ID:\"82\",Name:\"Conditional Effect after BC Received Threshold\"},84:{ID:\"84\",Name:\"Conditional Effect after HC Received Threshold\"},85:{ID:\"85\",Name:\"BC Fill after HC Received Threshold\"},86:{ID:\"86\",Name:\"Conditional Effect after Spark Threshold\"},88:{ID:\"88\",Name:\"Conditional Effect on Guard\"},89:{ID:\"89\",Name:\"Conditional Effect on Critical\"},90:{ID:\"90\",Name:\"Status Infliction on Critical\"},91:{ID:\"91\",Name:\"\"},92:{ID:\"92\",Name:\"Negate Defense Ignore\"},93:{ID:\"93\",Name:\"Added Elements\"},96:{ID:\"96\",Name:\"Normal Attacks Hit All Foes\"},97:{ID:\"97\",Name:\"Player EXP Boost\"},99:{ID:\"99\",Name:\"\"},100:{ID:\"100\",Name:\"Spark Critical\"},101:{ID:\"101\",Name:\"Heal on Spark\"},102:{ID:\"102\",Name:\"Added Elements\"},103:{ID:\"103\",Name:\"BB Atk Boost when HP Passes Threshold\"},104:{ID:\"104\",Name:\"Spark Boost when HP Passes Threshold\"},105:{ID:\"105\",Name:\"Turn-Based Parameter Boost\"},106:{ID:\"106\",Name:\"Conditional Effect after Activating Overdrive\"},107:{ID:\"107\",Name:\"Add Effect to Leader Skill\"},109:{ID:\"109\",Name:\"BB Gauge Reduction (Chance)\"},110:{ID:\"110\",Name:\"BC Efficacy Reduction (Chance)\"},111:{ID:\"111\",Name:\"Increase Brave Burst Activation Rate\"},112:{ID:\"112\",Name:\"ABP/CBP Boost\"},113:{ID:\"113\",Name:\"Conditional Effect after HP Threshold\"},114:{ID:\"114\",Name:\"Inflict Buff when Attacked\"},127:{ID:\"127\",Name:\"Additional Damage (Damage over Time) Reduction\"},128:{ID:\"128\",Name:\"Damage Reduction from Normal Attacks\"},143:{ID:\"143\",Name:\"Break Atk Parameter Limit\"},10008:{ID:\"10008\",Name:\"Damage Reduction from Specific Sources\"},11004:{ID:\"11004\",Name:\"Elemental Spark Damage Boost\"},11005:{ID:\"11005\",Name:\"Elemental Critical Damage Boost\"},11006:{ID:\"11006\",Name:\"Summoner EXP Boost\"},11009:{ID:\"11009\",Name:\"Effect Duration Boost\"},\"66,1\":{ID:\"66,1\",Name:\"\"}}),r=Object.freeze({0:{ID:\"0\",Name:\"\",Type:\"\"},1:{ID:\"1\",Name:\"Regular Damage\",Type:\"Attack\"},2:{ID:\"2\",Name:\"Burst Heal\",Type:\"\"},3:{ID:\"3\",Name:\"Heal over Time\",Type:\"\"},4:{ID:\"4\",Name:\"BB Gauge Refill\",Type:\"\"},5:{ID:\"5\",Name:\"Parameter Boost\",Type:\"\"},6:{ID:\"6\",Name:\"Drop Rate\",Type:\"\"},7:{ID:\"7\",Name:\"Guaranteed KO Resistance (Angel Idol)\",Type:\"\"},8:{ID:\"8\",Name:\"Max HP Boost\",Type:\"\"},9:{ID:\"9\",Name:\"Parameter Reduction\",Type:\"\"},10:{ID:\"10\",Name:\"Status Cleanse\",Type:\"\"},11:{ID:\"11\",Name:\"Status Infliction\",Type:\"\"},12:{ID:\"12\",Name:\"Revive (Guaranteed)\",Type:\"\"},13:{ID:\"13\",Name:\"Random Target Damage\",Type:\"Attack\"},14:{ID:\"14\",Name:\"Lifesteal Damage\",Type:\"Attack\"},16:{ID:\"16\",Name:\"Elemental Damage Reduction\",Type:\"\"},17:{ID:\"17\",Name:\"Status Negation\",Type:\"\"},18:{ID:\"18\",Name:\"Damage Reduction\",Type:\"\"},19:{ID:\"19\",Name:\"Gradual BB Gauge Boost\",Type:\"\"},20:{ID:\"20\",Name:\"BC Fill on Hit\",Type:\"\"},22:{ID:\"22\",Name:\"Defense Ignore\",Type:\"\"},23:{ID:\"23\",Name:\"Spark Boost\",Type:\"\"},24:{ID:\"24\",Name:\"Parameter Conversion\",Type:\"\"},26:{ID:\"26\",Name:\"Hit Count Boost\",Type:\"\"},27:{ID:\"27\",Name:\"Proportional Damage\",Type:\"Attack\"},28:{ID:\"28\",Name:\"Fixed Damage\",Type:\"Attack\"},29:{ID:\"29\",Name:\"Multi-Element Damage\",Type:\"Attack\"},30:{ID:\"30\",Name:\"Add Elements\",Type:\"\"},31:{ID:\"31\",Name:\"Instant BB Gauge Fill\",Type:\"\"},32:{ID:\"32\",Name:\"Element Shift\",Type:\"\"},33:{ID:\"33\",Name:\"Buff Removal (Chance)\",Type:\"\"},34:{ID:\"34\",Name:\"BB Gauge Reduction (Chance)\",Type:\"\"},36:{ID:\"36\",Name:\"Leader Skill Lock (Chance)\",Type:\"\"},37:{ID:\"37\",Name:\"Summon Unit\",Type:\"\"},38:{ID:\"38\",Name:\"Status Cure\",Type:\"\"},39:{ID:\"39\",Name:\"Elemental Damage Reduction\",Type:\"\"},40:{ID:\"40\",Name:\"Status Infliction Added to Attack\",Type:\"\"},42:{ID:\"42\",Name:\"\",Type:\"\"},43:{ID:\"43\",Name:\"Instant OD Fill\",Type:\"\"},44:{ID:\"44\",Name:\"Damage over Time (Additional Damage)\",Type:\"\"},45:{ID:\"45\",Name:\"BB Atk Boost\",Type:\"\"},46:{ID:\"46\",Name:\"Non-Lethal Proportional Damage\",Type:\"Attack\"},47:{ID:\"47\",Name:\"HP Scaled Damage\",Type:\"Attack\"},48:{ID:\"48\",Name:\"Piercing Proportional Damage\",Type:\"Attack\"},49:{ID:\"49\",Name:\"Retire\",Type:\"\"},50:{ID:\"50\",Name:\"Damage Counter\",Type:\"\"},51:{ID:\"51\",Name:\"Parameter Reduction Added to Attack\",Type:\"\"},52:{ID:\"52\",Name:\"BC Efficacy\",Type:\"\"},53:{ID:\"53\",Name:\"Status Counter\",Type:\"\"},54:{ID:\"54\",Name:\"Critical Damage Boost\",Type:\"\"},55:{ID:\"55\",Name:\"Elemental Damage Boost\",Type:\"\"},56:{ID:\"56\",Name:\"Chance KO Resistance (Angel Idol)\",Type:\"\"},57:{ID:\"57\",Name:\"BC Efficacy Reduction\",Type:\"\"},58:{ID:\"58\",Name:\"Spark Vulnerability\",Type:\"\"},59:{ID:\"59\",Name:\"BB Atk Reduction\",Type:\"\"},60:{ID:\"60\",Name:\"\",Type:\"\"},61:{ID:\"61\",Name:\"BB-Scaled Damage\",Type:\"Attack\"},62:{ID:\"62\",Name:\"Barrier\",Type:\"\"},63:{ID:\"63\",Name:\"Selective Buff Wipe\",Type:\"\"},64:{ID:\"64\",Name:\"Consecutive Damage\",Type:\"Attack\"},65:{ID:\"65\",Name:\"Attack Boost on Status Afflicted Foes\",Type:\"\"},66:{ID:\"66\",Name:\"Revive (Chance)\",Type:\"\"},67:{ID:\"67\",Name:\"BC Fill on Spark\",Type:\"\"},68:{ID:\"68\",Name:\"Damage Reduction when Guarding\",Type:\"\"},69:{ID:\"69\",Name:\"BC Fill on Guard\",Type:\"\"},70:{ID:\"70\",Name:\"\",Type:\"\"},71:{ID:\"71\",Name:\"BB Gauge Fill Rate Debuff\",Type:\"\"},73:{ID:\"73\",Name:\"Parameter Reduction Negation\",Type:\"\"},75:{ID:\"75\",Name:\"Element Squad-Scaled Damage\",Type:\"Attack\"},76:{ID:\"76\",Name:\"Extra Action\",Type:\"\"},78:{ID:\"78\",Name:\"Self Parameter Boost\",Type:\"\"},79:{ID:\"79\",Name:\"Player EXP Boost\",Type:\"\"},82:{ID:\"82\",Name:\"\",Type:\"\"},83:{ID:\"83\",Name:\"Spark Critical\",Type:\"\"},84:{ID:\"84\",Name:\"OD Gauge Fill Rate\",Type:\"\"},85:{ID:\"85\",Name:\"Heal when Attacked\",Type:\"\"},86:{ID:\"86\",Name:\"HP Absorption\",Type:\"\"},87:{ID:\"87\",Name:\"Heal on Spark\",Type:\"\"},88:{ID:\"88\",Name:\"Self Spark Boost\",Type:\"\"},89:{ID:\"89\",Name:\"Self Parameter Conversion\",Type:\"\"},92:{ID:\"92\",Name:\"Self Max HP Boost\",Type:\"\"},93:{ID:\"93\",Name:\"Spark/Critical/Elemental Weakness Damage Reduction\",Type:\"\"},94:{ID:\"94\",Name:\"Normal Attacks Hit All Foes\",Type:\"\"},95:{ID:\"95\",Name:\"Nullify Sphere Effects (Sphere Lock)\",Type:\"\"},96:{ID:\"96\",Name:\"Nullify Extra Skill Effects (ES Lock)\",Type:\"\"},97:{ID:\"97\",Name:\"Element Target Damage\",Type:\"Attack\"},113:{ID:\"113\",Name:\"Gradual OD Fill\",Type:\"\"},119:{ID:\"119\",Name:\"Gradual BC Drain\",Type:\"\"},123:{ID:\"123\",Name:\"OD Gauge Reduction\",Type:\"\"},126:{ID:\"126\",Name:\"Damage over Time (Additional Damage) Mitigation\",Type:\"\"},127:{ID:\"127\",Name:\"Lock On\",Type:\"\"},130:{ID:\"130\",Name:\"Parameter Reduction Counter\",Type:\"\"},131:{ID:\"131\",Name:\"\",Type:\"\"},132:{ID:\"132\",Name:\"Critical/Elemental Weakness Vulnerability\",Type:\"\"},901:{ID:\"901\",Name:\"Raid Heal (on Map)\",Type:\"\"},902:{ID:\"902\",Name:\"Raid Parameter Boost\",Type:\"\"},903:{ID:\"903\",Name:\"Raid Boss Reveal\",Type:\"\"},905:{ID:\"905\",Name:\"Raid Teleport\",Type:\"\"},906:{ID:\"906\",Name:\"Raid Flee\",Type:\"\"},907:{ID:\"907\",Name:\"Raid Damage Reduction\",Type:\"\"},908:{ID:\"908\",Name:\"Raid Item Drop Rate Boost\",Type:\"\"},1e4:{ID:\"10000\",Name:\"Taunt\",Type:\"\"},10001:{ID:\"10001\",Name:\"Stealth\",Type:\"\"},10002:{ID:\"10002\",Name:\"Shield (old)\",Type:\"\"},10003:{ID:\"10003\",Name:\"Nullify Sphere Effects (Sphere Lock)\",Type:\"\"},10004:{ID:\"10004\",Name:\"Damage Immunity\",Type:\"\"},10005:{ID:\"10005\",Name:\"Turn Skip (short duration)\",Type:\"\"},10006:{ID:\"10006\",Name:\"Turn Skip (long duration)\",Type:\"\"},10007:{ID:\"10007\",Name:\"Evasion\",Type:\"\"},10009:{ID:\"10009\",Name:\"\",Type:\"\"},10012:{ID:\"10012\",Name:\"OD Drain\",Type:\"\"},10015:{ID:\"10015\",Name:\"Elemental Spark Boost\",Type:\"\"},10016:{ID:\"10016\",Name:\"Element Critical Damage Boost\",Type:\"\"},10017:{ID:\"10017\",Name:\"Elemental Shield\",Type:\"\"},10018:{ID:\"10018\",Name:\"Max HP Reduction\",Type:\"\"},10019:{ID:\"10019\",Name:\"Effect Purge\",Type:\"\"},10020:{ID:\"10020\",Name:\"Piercing Damage\",Type:\"Attack\"},10021:{ID:\"10021\",Name:\"Active Healing Reduction\",Type:\"\"},10022:{ID:\"10022\",Name:\"Passive Healing Reduction\",Type:\"\"},10023:{ID:\"10023\",Name:\"HC Efficacy Reduction\",Type:\"\"},10025:{ID:\"10025\",Name:\"KO Resistance Negation\",Type:\"\"},10026:{ID:\"10026\",Name:\"Doom\",Type:\"\"},11e3:{ID:\"11000\",Name:\"Negative HP-Scaled Damage\",Type:\"Attack\"},11001:{ID:\"11001\",Name:\"Max HP% DoT of Weaker Element Enemies\",Type:\"\"},11002:{ID:\"11002\",Name:\"HP Limit Break, Convert to HP\",Type:\"\"},11003:{ID:\"11003\",Name:\"Effect Negation\",Type:\"\"},70001:{ID:\"70001\",Name:\"Mana Bubble Shield\",Type:\"\"},70002:{ID:\"70002\",Name:\"Recast\",Type:\"\"},\"2-5\":{ID:\"2-5\",Name:\"Burst Heal and DEF/REC Boost\",Type:\"\"}});function F(e,a=r){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}function p(e,a){const t=F(e,a);return!!t&&t.Type===n.Attack}var l,u,D,f,d,B,E,U,T,R,m,g,A,v,_,N,I,P,y,k=Object.freeze({__proto__:null,getLevelEntryForBurst:a,getEffectsForBurst:function(e,t){const s=a(e,t);return s&&Array.isArray(s.effects)?s.effects:[]},getExtraAttackDamageFramesEntry:function(e,a=\"0.0/0\",i){const n=(Array.isArray(e)?e:[]).filter(e=>{const a=t(e);return a===s.BurstHeal||p(a,i)}).reduce((e,a,t)=>{const s=0===t,i=a[\"frame times\"].length,n=a[\"hit dmg% distribution\"],o=a[\"frame times\"];for(let a=s?0:1;a<i;++a)e.push({damage:n[a],time:o[a]});return e},[]),o={\"effect delay time(ms)/frame\":a,\"frame times\":[],\"hit dmg% distribution\":[],\"hit dmg% distribution (total)\":0,hits:0};return n.sort((e,a)=>e.time-a.time).forEach(({time:e,damage:a})=>{o[\"frame times\"].push(e),o[\"hit dmg% distribution\"].push(a),o[\"hit dmg% distribution (total)\"]+=a}),o.hits=o[\"frame times\"].length,o}});function h(e,a=c){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}function O(e,a){const t=F(e,a);return!!t&&t.Name||\"\"}function H(e,a){const t=h(e,a);return!!t&&t.Name||\"\"}function b(e){return!!e&&\"object\"==typeof e&&(Object.hasOwnProperty.call(e,\"proc id\")||Object.hasOwnProperty.call(e,\"unknown proc id\"))}function C(e){return!!e&&\"object\"==typeof e&&(Object.hasOwnProperty.call(e,\"passive id\")||Object.hasOwnProperty.call(e,\"unknown passive id\"))}!function(e){e.Poison=\"poison\",e.Weak=\"weak\",e.Sick=\"sick\",e.Injury=\"injury\",e.Curse=\"curse\",e.Paralysis=\"paralysis\",e.AttackReduction=\"atk down\",e.DefenseReduction=\"def down\",e.RecoveryReduction=\"rec down\",e.Unknown=\"unknown\"}(l||(l={})),function(e){e.hp_50pr_under=\"hp_50pr_under\",e.hp_50pr_over=\"hp_50pr_over\",e.hp_75pr_under=\"hp_75pr_under\",e.hp_25pr_under=\"hp_25pr_under\",e.hp_min=\"hp_min\",e.hp_max=\"hp_max\",e.atk_max=\"atk_max\",e.random=\"random\"}(u||(u={})),function(e){e.Moving=\"1\",e.Teleporting=\"2\",e.NonMoving=\"3\"}(D||(D={})),function(e){e.Aoe=\"aoe\",e.Single=\"single\",e.Random=\"random\"}(f||(f={})),function(e){e.Aoe=\"AOE\",e.Single=\"ST\",e.Random=\"RT\"}(d||(d={})),function(e){e.Self=\"self\",e.Party=\"party\",e.Enemy=\"enemy\"}(B||(B={})),function(e){e.AddPassive=\"passive\",e.EnhanceBb=\"add to bb\",e.EnhanceSbb=\"add to sbb\",e.EnhanceUbb=\"add to ubb\",e.EnhancePassive=\"add to passive\"}(E||(E={})),function(e){e.None=\"None\",e[\"Status Enhancing\"]=\"Status Enhancing\",e.Critical=\"Critical\",e.Drop=\"Drop\",e[\"Ailment Inducing\"]=\"Ailment Inducing\",e[\"Element Fusion\"]=\"Element Fusion\",e[\"BB Gauge\"]=\"BB Gauge\",e[\"HP Recovery\"]=\"HP Recovery\",e[\"Target Setting\"]=\"Target Setting\",e[\"Damage Deflecting\"]=\"Damage Deflecting\",e[\"Damage Reducing\"]=\"Damage Reducing\",e.Spark=\"Spark\",e[\"Defense Piercing\"]=\"Defense Piercing\",e[\"Attack Boosting\"]=\"Attack Boosting\",e.Special=\"Special\"}(U||(U={})),function(e){e[e.None=0]=\"None\",e[e[\"Status Enhancing\"]=1]=\"Status Enhancing\",e[e.Critical=2]=\"Critical\",e[e.Drop=3]=\"Drop\",e[e[\"Ailment Inducing\"]=4]=\"Ailment Inducing\",e[e[\"Element Fusion\"]=5]=\"Element Fusion\",e[e[\"BB Gauge\"]=6]=\"BB Gauge\",e[e[\"HP Recovery\"]=7]=\"HP Recovery\",e[e[\"Target Setting\"]=8]=\"Target Setting\",e[e[\"Damage Deflecting\"]=9]=\"Damage Deflecting\",e[e[\"Damage Reducing\"]=10]=\"Damage Reducing\",e[e.Spark=11]=\"Spark\",e[e[\"Defense Piercing\"]=12]=\"Defense Piercing\",e[e[\"Attack Boosting\"]=13]=\"Attack Boosting\",e[e.Special=14]=\"Special\"}(T||(T={})),function(e){e[\"Parameter Boost\"]=\"Parameter Boost\",e.Spark=\"Spark\",e[\"Critical Hits\"]=\"Critical Hits\",e[\"Attack Boost\"]=\"Attack Boost\",e[\"BB Gauge\"]=\"BB Gauge\",e[\"HP Recovery\"]=\"HP Recovery\",e.Drops=\"Drops\",e[\"Ailment Resistance\"]=\"Ailment Resistance\",e[\"Ailment Infliction\"]=\"Ailment Infliction\",e[\"Damage Reduction\"]=\"Damage Reduction\",e.Special=\"Special\",e.Unknown=\"Unknown\"}(R||(R={})),function(e){e[\"Parameter Boost\"]=\"1\",e.Spark=\"2\",e[\"Critical Hits\"]=\"3\",e[\"Attack Boost\"]=\"4\",e[\"BB Gauge\"]=\"5\",e[\"HP Recovery\"]=\"6\",e.Drops=\"7\",e[\"Ailment Resistance\"]=\"8\",e[\"Ailment Infliction\"]=\"9\",e[\"Damage Reduction\"]=\"10\",e.Special=\"11\"}(m||(m={})),function(e){e.Attack=\"attack\",e.Idle=\"idle\",e.Move=\"move\"}(g||(g={})),function(e){e.Fire=\"fire\",e.Water=\"water\",e.Earth=\"earth\",e.Thunder=\"thunder\",e.Light=\"light\",e.Dark=\"dark\"}(A||(A={})),function(e){e.Male=\"male\",e.Female=\"female\",e.Other=\"other\"}(v||(v={})),function(e){e.Ineligible=\"not eligible for achievement\",e.Farmable=\"farmable\",e.RareSummon=\"rare summon\",e.ExtraSkillElgif=\"extra skill elgif\"}(_||(_={})),function(e){e.Normal=\"normal\",e.Evolution=\"evo\",e.Enhancing=\"enhancing\",e.Sale=\"sale\"}(N||(N={})),function(e){e.Lord=\"lord\",e.Anima=\"anima\",e.Breaker=\"breaker\",e.Guardian=\"guardian\",e.Oracle=\"oracle\",e.Rex=\"rex\"}(I||(I={})),function(e){e.Consumable=\"consumable\",e.Material=\"material\",e.Sphere=\"sphere\",e.EvolutionMaterial=\"evomat\",e.SummonerConsumable=\"summoner_consumable\",e.LeaderSkillSphere=\"ls_sphere\"}(P||(P={})),function(e){e.Mimic=\"60142\",e.BatMimic=\"60143\",e.DragonMimic=\"60144\",e.MetalMimic=\"60224\"}(y||(y={}));const S={1e3:y.Mimic,1100:y.BatMimic,1101:y.BatMimic,1200:y.DragonMimic,1300:y.MetalMimic};var W,K,w,L,M,j,G=Object.freeze({__proto__:null,get Ailment(){return l},get ArenaCondition(){return u},get MoveType(){return D},get TargetArea(){return f},get TargetAreaShorthand(){return d},get TargetType(){return B},get SpPassiveType(){return E},get SphereTypeName(){return U},get SphereTypeId(){return T},get SpCategoryName(){return R},get SpCategoryId(){return m},get UnitAnimationKey(){return g},get UnitElement(){return A},get UnitGender(){return v},get UnitGettingType(){return _},get UnitKind(){return N},get UnitType(){return I},get ItemType(){return P},get MimicUnitIds(){return y},MimicMonsterGroupMapping:S});function x(e){const a=Array.isArray(e.previousSources)?e.previousSources.slice():[];return a.unshift(function(e){return`${e.source}-${e.sourceId}`}(e)),a}function V(e){const a=e&&Array.isArray(e.conditions)&&e.conditions||[],t={units:new Set,items:new Set,sphereTypes:new Set,unknowns:new Set};a.forEach((e,a)=>{\"sphere category required (raw)\"in e?t.sphereTypes.add(e[\"sphere category required (raw)\"]):\"item required\"in e?e[\"item required\"].forEach(e=>{t.items.add(e)}):\"unit required\"in e?e[\"unit required\"].forEach(e=>{t.units.add(\"\"+e.id)}):t.unknowns.add(`type:${e.type_id||a},condition:${e.condition_id||a}`)});return Object.entries(t).filter(e=>e[1].size>0).reduce((e,a)=>(e[a[0]]=Array.from(a[1]),e),{})}function Y(e,a){const t=a.source===K.LeaderSkill||e.sp_type===E.EnhancePassive||e[\"passive target\"]===B.Party;return{targetType:t?B.Party:B.Self,targetArea:t?f.Aoe:f.Single}}function z(e){return{targetArea:e[\"target area\"],targetType:e[\"target type\"]}}function $(e,a=0){return null===e||isNaN(e)?a:+e}function X(e=[],a=0){let t=!1;const s=e.reduce((e,s,i)=>(s&&\"0\"!==s&&(e[\"param_\"+(a+i)]=s,t=!0),e),{});return t?s:void 0}function Z(e){return!!e&&[K.BraveBurst,K.SuperBraveBurst,K.UltimateBraveBurst,K.BondedBraveBurst,K.BondedSuperBraveBurst,K.DualBraveBurst].includes(e)}let q,J;function Q(e){return q&&!e||(q=new Map,function(e){const a={0:w.All,1:A.Fire,2:A.Water,3:A.Earth,4:A.Thunder,5:A.Light,6:A.Dark},t={1:l.Poison,2:l.Weak,3:l.Sick,4:l.Injury,5:l.Curse,6:l.Paralysis,7:l.AttackReduction,8:l.DefenseReduction,9:l.RecoveryReduction},s=(e,a,t)=>({targetData:(t&&t.getProcTargetData||z)(e),sources:(t&&t.createSourcesFromContext||x)(a),effectDelay:e[\"effect delay time(ms)/frame\"]}),i=e=>e.params.split(\",\"),n=(e,{originalId:a,sources:t,targetData:s,effectDelay:i})=>Object.assign({id:j.UNKNOWN_PROC_BUFF_PARAMS,originalId:a,effectDelay:i,sources:t,value:e},s),o=({originalId:e,sources:a,buffs:t,duration:s,targetData:i})=>Object.assign({id:j.TURN_DURATION_MODIFICATION,originalId:e,sources:a,value:{buffs:t,duration:s}},i),c=({originalId:e,sources:a})=>({id:j.NO_PARAMS_SPECIFIED,originalId:e,sources:a}),r=(e,a,{originalId:t,sources:s,targetData:i,effectDelay:o})=>{0===e.length&&e.push(c({originalId:t,sources:s})),a&&e.push(n(a,{originalId:t,sources:s,targetData:i,effectDelay:o}))},F=(e,a,t)=>{let s;return e&&e.length>0&&(s=(t&&t.createUnknownParamsValue||X)(e,a)),s},p=(e,a,t)=>{let s=0!==a;return s&&(s=!(t&&t.buffSourceIsBurstType||Z)(e.source)),s},u=e=>({hits:$(e.damageFrames&&e.damageFrames.hits||0),distribution:$(e.damageFrames&&e.damageFrames[\"hit dmg% distribution (total)\"])}),D=({effect:e,context:a,injectionContext:t,effectValueKey:n,effectTurnDurationKey:c,parseParamValue:l=(e=>$(e)),buffId:u,originalId:D})=>{const{targetData:f,sources:d,effectDelay:B}=s(e,a,t);let E,U=0,T=0;if(e.params){const[a,s,...n]=i(e);U=l(a),T=$(s),E=F(n,2,t)}else U=$(e[n]),T=$(e[c]);const R=[];return 0!==U?R.push(Object.assign({id:u,originalId:D,sources:d,effectDelay:B,duration:T,value:U},f)):p(a,T,t)&&R.push(o({originalId:D,sources:d,buffs:[u],duration:T,targetData:f})),r(R,E,{originalId:D,sources:d,targetData:f,effectDelay:B}),R};e.set(\"1\",(e,a,t)=>{const n=\"1\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t),{hits:l,distribution:D}=u(a),f={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let d;if(e.params){let a;[f[\"atk%\"],f.flatAtk,f[\"crit%\"],f[\"bc%\"],f[\"hc%\"],f[\"dmg%\"],...a]=i(e),d=F(a,6,t)}else f[\"atk%\"]=e[\"bb atk%\"],f.flatAtk=e[\"bb flat atk\"],f[\"crit%\"]=e[\"bb crit%\"],f[\"bc%\"]=e[\"bb bc%\"],f[\"hc%\"]=e[\"bb hc%\"],f[\"dmg%\"]=e[\"bb dmg%\"];const B=Object.entries(f).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=$(t),e),{}),E=[];return(0!==l||0!==D||Object.keys(B).length>0)&&E.push(Object.assign({id:\"proc:1\",originalId:n,sources:c,effectDelay:p,value:Object.assign(Object.assign({},B),{hits:l,distribution:D})},o)),r(E,d,{originalId:n,sources:c,targetData:o,effectDelay:p}),E}),e.set(\"2\",(e,a,t)=>{const n=\"2\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t),l={healLow:\"0\",healHigh:\"0\",\"healerRec%\":0};let u;if(e.params){let a,s,n;[l.healLow,l.healHigh,a,s,...n]=i(e),l[\"healerRec%\"]=(100+$(a))*(1+$(s)/100)/10,u=F(n,4,t)}else l.healLow=e[\"heal low\"],l.healHigh=e[\"heal high\"],l[\"healerRec%\"]=e[\"rec added% (from healer)\"];Object.keys(l).forEach(e=>{l[e]=$(l[e])});const D=[];return 0===l.healHigh&&0===l.healLow||D.push(Object.assign({id:\"proc:2\",originalId:n,sources:c,effectDelay:p,value:l},o)),r(D,u,{originalId:n,sources:c,targetData:o,effectDelay:p}),D}),e.set(\"3\",(e,a,t)=>{const n=\"3\",{targetData:c,sources:l,effectDelay:u}=s(e,a,t),D={healLow:\"0\",healHigh:\"0\",\"targetRec%\":0,turnDuration:\"0\"};let f;if(e.params){let a,s;[D.healLow,D.healHigh,a,D.turnDuration,...s]=i(e),D[\"targetRec%\"]=10*(1+$(a)/100),f=F(s,4,t)}else D.healLow=e[\"gradual heal low\"],D.healHigh=e[\"gradual heal high\"],D[\"targetRec%\"]=e[\"rec added% (from target)\"],D.turnDuration=e[\"gradual heal turns (8)\"];Object.keys(D).forEach(e=>{D[e]=$(D[e])});const d=[];return 0!==D.healLow||0!==D.healHigh?d.push(Object.assign({id:\"proc:3\",originalId:n,sources:l,effectDelay:u,duration:D.turnDuration,value:{healLow:D.healLow,healHigh:D.healHigh,\"targetRec%\":D[\"targetRec%\"]}},c)):p(a,D.turnDuration,t)&&d.push(o({originalId:n,sources:l,buffs:[\"proc:3\"],duration:D.turnDuration,targetData:c})),r(d,f,{originalId:n,sources:l,targetData:c,effectDelay:u}),d}),e.set(\"4\",(e,a,t)=>{const n=\"4\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t);let l,u=0,D=0;if(e.params){const[a,s,...n]=i(e);u=$(a)/100,D=$(s),l=F(n,2,t)}else\"bb bc fill\"in e&&(u=$(e[\"bb bc fill\"])),\"bb bc fill%\"in e&&(D=$(e[\"bb bc fill%\"]));const f=[];return 0!==u&&f.push(Object.assign({id:\"proc:4:flat\",originalId:n,sources:c,effectDelay:p,value:u},o)),0!==D&&f.push(Object.assign({id:\"proc:4:percent\",originalId:n,sources:c,effectDelay:p,value:D},o)),r(f,l,{originalId:n,sources:c,targetData:o,effectDelay:p}),f}),e.set(\"5\",(e,t,n)=>{const c=\"5\",{targetData:l,sources:u,effectDelay:D}=s(e,t,n),f={element:w.All,atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",turnDuration:\"0\"},d=[\"atk\",\"def\",\"rec\",\"crit\"];let B;if(e.params){let t,s;[s,f.atk,f.def,f.rec,f.crit,f.turnDuration,...t]=i(e),f.element=a[s]||w.Unknown,B=F(t,6,n)}else{const a=e[\"element buffed\"];f.element=\"all\"===a?w.All:a||w.Unknown;const t=Object.keys(e);d.forEach(a=>{const s=t.find(e=>e.startsWith(a+\"% buff\"));s&&(f[a]=$(e[s]))}),f.turnDuration=$(e[\"buff turns\"])}d.concat([\"turnDuration\"]).forEach(e=>{f[e]=$(f[e])});const E=d.some(e=>0!==f[e]),U=[];return E?d.forEach(e=>{const a=f[e];if(0!==a){const t=Object.assign({id:\"proc:5:\"+e,originalId:c,sources:u,effectDelay:D,duration:f.turnDuration,value:a},l);f.element!==w.All&&(t.conditions={targetElements:[f.element]}),U.push(t)}}):p(t,f.turnDuration,n)&&U.push(o({originalId:c,sources:u,buffs:d.map(e=>\"proc:5:\"+e),duration:f.turnDuration,targetData:l})),r(U,B,{originalId:c,sources:u,targetData:l,effectDelay:D}),U}),e.set(\"6\",(e,a,t)=>{const n=\"6\",{targetData:c,sources:l,effectDelay:u}=s(e,a,t),D={bc:\"0\",hc:\"0\",item:\"0\",turnDuration:\"0\"},f=[\"bc\",\"hc\",\"item\"];let d;if(e.params){let a;[D.bc,D.hc,D.item,D.turnDuration,...a]=i(e),d=F(a,4,t)}else D.bc=e[\"bc drop rate% buff (10)\"],D.hc=e[\"hc drop rate% buff (9)\"],D.item=e[\"item drop rate% buff (11)\"],D.turnDuration=e[\"drop buff rate turns\"];f.concat([\"turnDuration\"]).forEach(e=>{D[e]=$(D[e])});const B=f.some(e=>0!==D[e]),E=[];return B?f.forEach(e=>{const a=D[e];0!==a&&E.push(Object.assign({id:\"proc:6:\"+e,originalId:n,sources:l,effectDelay:u,duration:D.turnDuration,value:a},c))}):p(a,D.turnDuration,t)&&E.push(o({originalId:n,sources:l,buffs:f.map(e=>\"proc:6:\"+e),duration:D.turnDuration,targetData:c})),r(E,d,{originalId:n,sources:l,targetData:c,effectDelay:u}),E}),e.set(\"7\",(e,a,t)=>{const n=\"7\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t);let l,u=0;if(e.params){const[a,...s]=i(e);u=$(a),l=F(s,1,t)}else u=$(e[\"angel idol recover hp%\"]);const D=[Object.assign({id:\"proc:7\",originalId:n,sources:c,effectDelay:p,value:u},o)];return r(D,l,{originalId:n,sources:c,targetData:o,effectDelay:p}),D}),e.set(\"8\",(e,a,t)=>{const n=\"8\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t);let l,u=0,D=0;if(e.params){const[a,s,...n]=i(e);u=$(a),D=$(s),l=F(n,2,t)}else\"max hp increase\"in e&&(u=$(e[\"max hp increase\"])),\"max hp% increase\"in e&&(D=$(e[\"max hp% increase\"]));const f=[];return 0!==u&&f.push(Object.assign({id:\"proc:8:flat\",originalId:n,sources:c,effectDelay:p,value:u},o)),0!==D&&f.push(Object.assign({id:\"proc:8:percent\",originalId:n,sources:c,effectDelay:p,value:D},o)),r(f,l,{originalId:n,sources:c,targetData:o,effectDelay:p}),f}),e.set(\"9\",(e,t,n)=>{const c=\"9\",{targetData:l,sources:u,effectDelay:D}=s(e,t,n),f={0:\"atk\",1:\"def\",2:\"rec\"},d=[\"atk\",\"def\",\"rec\"],B={element:w.All,statReductionEntries:[],turnDuration:0};let E;if(e.params){const[t,s,o,c,r,p,l,u,...D]=i(e);B.element=a[t]||w.Unknown,B.turnDuration=$(u),[[s,o,c],[r,p,l]].forEach(([e,a,t])=>{const s=$(e)-1,i=$(a),n=$(t);3===s?B.statReductionEntries.push(...d.map(e=>({stat:e,value:i,chance:n}))):B.statReductionEntries.push({stat:f[s]||\"unknown\",value:i,chance:n})}),E=F(D,8,n)}else{const a=e[\"element buffed\"];B.element=\"all\"===a?w.All:a||w.Unknown,[\"buff #1\",\"buff #2\"].forEach(a=>{const t=e[a];if(t){const e=$(t[\"proc chance%\"]),a=Object.keys(t);d.forEach(s=>{const i=a.find(e=>e.startsWith(s+\"% buff\"));i&&B.statReductionEntries.push({stat:s,value:$(t[i]),chance:e})})}}),B.turnDuration=$(e[\"buff turns\"])}const U=[];let T=!1;return B.statReductionEntries.forEach(({stat:e,value:a,chance:t})=>{if(0!==a||0!==t){T=!0;const s=Object.assign({id:\"proc:9:\"+e,originalId:c,sources:u,effectDelay:D,duration:B.turnDuration,value:{value:a,chance:t}},l);B.element!==w.All&&(s.conditions={targetElements:[B.element]}),U.push(s)}}),!T&&p(t,B.turnDuration,n)&&U.push(o({originalId:c,sources:u,buffs:d.map(e=>\"proc:9:\"+e),duration:B.turnDuration,targetData:l})),r(U,E,{originalId:c,sources:u,targetData:l,effectDelay:D}),U}),e.set(\"10\",(e,a,n)=>{const o=\"10\",{targetData:c,sources:p,effectDelay:u}=s(e,a,n),D=[];let f;if(e.params){const a=i(e),s=a.slice(0,8),o=a.slice(8);s.filter(e=>\"0\"!==e).forEach(e=>{D.push(t[e]||l.Unknown)}),f=F(o,8,n)}else Object.values(t).forEach(a=>{\"remove \"+a in e&&D.push(a)}),\"remove all status ailments\"in e&&D.push(l.Unknown);const d=D.map(e=>Object.assign({id:\"proc:10:\"+e,originalId:o,sources:p,effectDelay:u,value:!0},c));return r(d,f,{originalId:o,sources:p,targetData:c,effectDelay:u}),d}),e.set(\"11\",(e,a,n)=>{const o=\"11\",{targetData:c,sources:p,effectDelay:u}=s(e,a,n),D=[];let f;if(e.params){let a=i(e);a.length%2!=0&&\"0\"!==a[a.length-1]&&(f=F(a.slice(-1),a.length-1,n),a=a.slice(0,a.length-1));const s=a.length;for(let e=0;e<s;e+=2){const s=a[e],i=$(a[e+1]);if(\"0\"!==s||0!==i){const e=t[s]||l.Unknown;D.push({ailment:e,chance:i})}}}else Object.values(t).forEach(a=>{let t;t=a===l.Weak?\"weaken%\":a===l.AttackReduction||a===l.DefenseReduction||a===l.RecoveryReduction?a:a+\"%\",t in e&&D.push({ailment:a,chance:$(e[t])})});const d=D.map(({ailment:e,chance:a})=>Object.assign({id:\"proc:11:\"+e,originalId:o,sources:p,effectDelay:u,value:a},c));return r(d,f,{originalId:o,sources:p,targetData:c,effectDelay:u}),d}),e.set(\"12\",(e,a,t)=>{const n=\"12\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t);let l,u=0;if(e.params){const[a,...s]=i(e);u=$(a),l=F(s,1,t)}else u=$(e[\"revive to hp%\"]);const D=[Object.assign({id:\"proc:12\",originalId:n,sources:c,effectDelay:p,value:u},o)];return r(D,l,{originalId:n,sources:c,targetData:o,effectDelay:p}),D}),e.set(\"13\",(e,a,t)=>{const n=\"13\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t);let l=0;const{distribution:D}=u(a),d={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\"};let B;if(e.params){let a,s;[d[\"atk%\"],d.flatAtk,d[\"crit%\"],d[\"bc%\"],d[\"hc%\"],s,...a]=i(e),l=$(s),B=F(a,6,t)}else d[\"atk%\"]=e[\"bb atk%\"],d.flatAtk=e[\"bb flat atk\"],d[\"crit%\"]=e[\"bb crit%\"],d[\"bc%\"]=e[\"bb bc%\"],d[\"hc%\"]=e[\"bb hc%\"],l=$(e.hits);const E=Object.entries(d).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=$(t),e),{}),U=[];return(0!==l||0!==D||Object.keys(E).length>0)&&U.push({id:\"proc:13\",originalId:n,sources:c,effectDelay:p,value:Object.assign(Object.assign({},E),{hits:l,distribution:D}),targetType:o.targetType,targetArea:f.Random}),r(U,B,{originalId:n,sources:c,targetData:o,effectDelay:p}),U}),e.set(\"14\",(e,a,t)=>{const n=\"14\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t),{hits:l,distribution:D}=u(a),f={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\",\"drainLow%\":\"0\",\"drainHigh%\":\"0\"};let d;if(e.params){let a;[f[\"atk%\"],f.flatAtk,f[\"crit%\"],f[\"bc%\"],f[\"hc%\"],f[\"dmg%\"],f[\"drainLow%\"],f[\"drainHigh%\"],...a]=i(e),d=F(a,8,t)}else f[\"atk%\"]=e[\"bb atk%\"],f.flatAtk=e[\"bb flat atk\"],f[\"crit%\"]=e[\"bb crit%\"],f[\"bc%\"]=e[\"bb bc%\"],f[\"hc%\"]=e[\"bb hc%\"],f[\"dmg%\"]=e[\"bb dmg%\"],f[\"drainLow%\"]=e[\"hp drain% low\"],f[\"drainHigh%\"]=e[\"hp drain% high\"];const B=Object.entries(f).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=$(t),e),{}),E=[];return(0!==l||0!==D||Object.keys(B).length>0)&&E.push(Object.assign({id:\"proc:14\",originalId:n,sources:c,effectDelay:p,value:Object.assign(Object.assign({},B),{hits:l,distribution:D})},o)),r(E,d,{originalId:n,sources:c,targetData:o,effectDelay:p}),E}),e.set(\"16\",(e,t,n)=>{const c=\"16\",{targetData:l,sources:u,effectDelay:D}=s(e,t,n);let f,d,B=0,E=0;if(e.params){const[t,s,o,...c]=i(e);f=a[t]||w.Unknown,B=$(s),E=$(o),d=F(c,3,n)}else{const t=Object.keys(e).find(e=>e.startsWith(\"mitigate\"));f=t&&Object.values(a).find(e=>t.includes(e))||w.Unknown,t&&(B=$(e[t])),E=$(e[\"buff turns\"])}const U=[];return 0!==B?U.push(Object.assign({id:\"proc:16:\"+f,originalId:c,sources:u,effectDelay:D,duration:E,value:B},l)):p(t,E,n)&&U.push(o({originalId:c,sources:u,buffs:Object.values(a).concat([w.Unknown]).map(e=>\"proc:16:\"+e),duration:E,targetData:l})),r(U,d,{originalId:c,sources:u,targetData:l,effectDelay:D}),U}),e.set(\"17\",(e,a,t)=>{const n=\"17\",{targetData:c,sources:u,effectDelay:D}=s(e,a,t),f=[l.Poison,l.Weak,l.Sick,l.Injury,l.Curse,l.Paralysis],d={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\"};let B,E=0;if(e.params){let a,s;[d.poison,d.weak,d.sick,d.injury,d.curse,d.paralysis,a,...s]=i(e),E=$(a),B=F(s,7,t)}else{const a=Object.keys(e).filter(e=>e.startsWith(\"resist\"));f.forEach(t=>{const s=a.find(e=>e.includes(t));s&&(d[t]=e[s])}),E=$(e[\"resist status ails turns\"])}const U=[];return f.forEach(e=>{const a=$(d[e]);0!==a&&U.push(Object.assign({id:\"proc:17:\"+e,originalId:n,sources:u,effectDelay:D,value:a,duration:E},c))}),0===U.length&&p(a,E,t)&&U.push(o({originalId:n,sources:u,buffs:f.map(e=>\"proc:17:\"+e),duration:E,targetData:c})),r(U,B,{originalId:n,sources:u,targetData:c,effectDelay:D}),U}),e.set(\"18\",(e,a,t)=>D({effect:e,context:a,injectionContext:t,effectValueKey:\"dmg% reduction\",effectTurnDurationKey:\"dmg% reduction turns (36)\",buffId:\"proc:18\",originalId:\"18\"})),e.set(\"19\",(e,a,t)=>D({effect:e,context:a,injectionContext:t,effectValueKey:\"increase bb gauge gradual\",effectTurnDurationKey:\"increase bb gauge gradual turns (37)\",parseParamValue:e=>$(e)/100,buffId:\"proc:19\",originalId:\"19\"})),e.set(\"20\",(e,a,t)=>{const n=\"20\",{targetData:c,sources:l,effectDelay:u}=s(e,a,t);let D,f=0,d=0,B=0,E=0;if(e.params){const[a,s,n,o,...c]=i(e);f=$(a)/100,d=$(s)/100,B=$(n),E=$(o),D=F(c,4,t)}else f=$(e[\"bc fill when attacked low\"]),d=$(e[\"bc fill when attacked high\"]),B=$(e[\"bc fill when attacked%\"]),E=$(e[\"bc fill when attacked turns (38)\"]);const U=[];return 0!==f||0!==d?U.push(Object.assign({id:\"proc:20\",originalId:n,sources:l,effectDelay:u,duration:E,conditions:{whenAttacked:!0},value:{fillLow:f,fillHigh:d,chance:B}},c)):p(a,E,t)&&U.push(o({originalId:n,sources:l,buffs:[\"proc:20\"],duration:E,targetData:c})),r(U,D,{originalId:n,sources:l,targetData:c,effectDelay:u}),U}),e.set(\"22\",(e,a,t)=>D({effect:e,context:a,injectionContext:t,effectValueKey:\"defense% ignore\",effectTurnDurationKey:\"defense% ignore turns (39)\",buffId:\"proc:22\",originalId:\"22\"})),e.set(\"23\",(e,a,t)=>{const n=\"23\",{targetData:c,sources:l,effectDelay:u}=s(e,a,t);let D,f=0,d=0;if(e.params){const a=i(e);f=$(a[0]),d=$(a[6]);const s=[\"0\",...a.slice(1,6),\"0\",...a.slice(7)];D=F(s,0,t)}else f=$(e[\"spark dmg% buff (40)\"]),d=$(e[\"buff turns\"]);const B=[];return 0!==f?B.push(Object.assign({id:\"proc:23\",originalId:n,sources:l,effectDelay:u,duration:d,value:f},c)):p(a,d,t)&&B.push(o({originalId:n,sources:l,buffs:[\"proc:23\"],duration:d,targetData:c})),r(B,D,{originalId:n,sources:l,targetData:c,effectDelay:u}),B}),e.set(\"24\",(e,a,t)=>{const n=\"24\",{targetData:c,sources:l,effectDelay:u}=s(e,a,t),D=[\"atk\",\"def\",\"rec\"],f={1:\"atk\",2:\"def\",3:\"rec\",4:\"hp\"},d={attack:\"atk\",defense:\"def\",recovery:\"rec\",hp:\"hp\"},B={atk:\"0\",def:\"0\",rec:\"0\"};let E,U=0,T=\"unknown\";if(e.params){let a,s,n;[s,B.atk,B.def,B.rec,n,...a]=i(e),T=f[s]||\"unknown\",U=$(n),E=F(a,5,t)}else{const a=e[\"converted attribute\"];T=a in d?d[a]:\"unknown\";const t=Object.keys(e);D.forEach(a=>{const s=t.find(e=>e.startsWith(a+\"% buff\"));s&&(B[a]=$(e[s]))}),U=$(e[\"% converted turns\"])}const R=[];return D.forEach(e=>{const a=$(B[e]);0!==a&&R.push(Object.assign({id:\"proc:24:\"+e,originalId:n,sources:l,effectDelay:u,duration:U,value:{convertedStat:T,value:a}},c))}),0===R.length&&p(a,U,t)&&R.push(o({originalId:n,sources:l,buffs:D.map(e=>\"proc:24:\"+e),duration:U,targetData:c})),r(R,E,{originalId:n,sources:l,targetData:c,effectDelay:u}),R}),e.set(\"26\",(e,a,t)=>{const n=\"26\",{targetData:c,sources:l,effectDelay:u}=s(e,a,t);let D,f=0,d=0,B=0;if(e.params){const a=i(e);f=$(a[0]),d=$(a[2]),B=$(a[7]);const s=[\"0\",a[1],\"0\",...a.slice(3,7),\"0\",...a.slice(8)];D=F(s,0,t)}else f=$(e[\"hit increase/hit\"]),d=$(e[\"extra hits dmg%\"]),B=$(e[\"hit increase buff turns (50)\"]);const E=[];return 0!==f||0!==d?E.push(Object.assign({id:\"proc:26\",originalId:n,sources:l,effectDelay:u,duration:B,value:{hitIncreasePerHit:f,extraHitDamage:d}},c)):p(a,B,t)&&E.push(o({originalId:n,sources:l,buffs:[\"proc:26\"],duration:B,targetData:c})),r(E,D,{originalId:n,sources:l,targetData:c,effectDelay:u}),E}),e.set(\"27\",(e,a,t)=>{const n=\"27\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t),{hits:l,distribution:D}=u(a),f={\"hpDamageLow%\":\"0\",\"hpDamageHigh%\":\"0\",\"hpDamageChance%\":\"0\",\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let d;if(e.params){let a;[f[\"hpDamageLow%\"],f[\"hpDamageHigh%\"],f[\"hpDamageChance%\"],f[\"atk%\"],f.flatAtk,f[\"crit%\"],f[\"bc%\"],f[\"hc%\"],f[\"dmg%\"],...a]=i(e),d=F(a,9,t)}else f[\"hpDamageLow%\"]=e[\"hp% damage low\"],f[\"hpDamageHigh%\"]=e[\"hp% damage high\"],f[\"hpDamageChance%\"]=e[\"hp% damage chance%\"],f[\"atk%\"]=e[\"bb atk%\"],f.flatAtk=e[\"bb flat atk\"],f[\"crit%\"]=e[\"bb crit%\"],f[\"bc%\"]=e[\"bb bc%\"],f[\"hc%\"]=e[\"bb hc%\"],f[\"dmg%\"]=e[\"bb dmg%\"];const B=Object.entries(f).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=$(t),e),{}),E=[];return(0!==l||0!==D||Object.keys(B).length>0)&&E.push(Object.assign({id:\"proc:27\",originalId:n,sources:c,effectDelay:p,value:Object.assign(Object.assign({},B),{hits:l,distribution:D})},o)),r(E,d,{originalId:n,sources:c,targetData:o,effectDelay:p}),E}),e.set(\"28\",(e,a,t)=>{const n=\"28\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t),{hits:l,distribution:D}=u(a);let f,d=0;if(e.params){const[a,...s]=i(e);d=$(a),f=F(s,1,t)}else d=$(e[\"fixed damage\"]);const B=[];if(0!==l||0!==D||0!==d){const e=Object.assign({id:\"proc:28\",originalId:n,sources:c,effectDelay:p,value:{hits:l,distribution:D}},o);0!==d&&(e.value.value=d),B.push(e)}return r(B,f,{originalId:n,sources:c,targetData:o,effectDelay:p}),B}),e.set(\"29\",(e,t,n)=>{const o=\"29\",{targetData:c,sources:p,effectDelay:l}=s(e,t,n),{hits:D,distribution:f}=u(t),d={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let B,E=[];if(e.params){let t,s,o,c;[t,s,o,d[\"atk%\"],d.flatAtk,d[\"crit%\"],d[\"bc%\"],d[\"hc%\"],d[\"dmg%\"],...c]=i(e),[t,s,o].forEach(e=>{\"0\"!==e&&E.push(a[e]||w.Unknown),B=F(c,9,n)})}else Array.isArray(e[\"bb elements\"])&&(E=e[\"bb elements\"].slice()),d[\"atk%\"]=e[\"bb atk%\"],d.flatAtk=e[\"bb flat atk\"],d[\"crit%\"]=e[\"bb crit%\"],d[\"bc%\"]=e[\"bb bc%\"],d[\"hc%\"]=e[\"bb hc%\"],d[\"dmg%\"]=e[\"bb dmg%\"];const U=Object.entries(d).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=$(t),e),{}),T=[];if(0!==D||0!==f||E.length>0||Object.keys(U).length>0){const e=Object.assign({id:\"proc:29\",originalId:o,sources:p,effectDelay:l,value:Object.assign(Object.assign({},U),{hits:D,distribution:f})},c);E.length>0&&(e.value.elements=E),T.push(e)}return r(T,B,{originalId:o,sources:p,targetData:c,effectDelay:l}),T}),e.set(\"30\",(e,t,n)=>{const c=\"30\",{targetData:l,sources:u,effectDelay:D}=s(e,t,n);let f,d=[],B=0;if(e.params){const t=i(e);d=t.slice(0,6).filter(e=>\"0\"!==e).map(e=>a[e]||w.Unknown),B=$(t[6]),f=F(t.slice(7),7,n)}else\"elements added\"in e&&(d=Array.isArray(e[\"elements added\"])?e[\"elements added\"]:[w.Unknown]),B=$(e[\"elements added turns\"]);const E=[],U=Object.values(a).filter(e=>e!==w.All);return d.length>0?d.forEach(e=>{const a=U.includes(e)?e:w.Unknown;E.push(Object.assign({id:\"proc:30:\"+a,originalId:c,sources:u,effectDelay:D,duration:B},l))}):p(t,B,n)&&E.push(o({originalId:c,sources:u,buffs:U.concat([w.Unknown]).map(e=>\"proc:30:\"+e),duration:B,targetData:l})),r(E,f,{originalId:c,sources:u,targetData:l,effectDelay:D}),E}),e.set(\"31\",(e,a,t)=>{const n=\"31\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t);let l,u=0,D=0;if(e.params){const[a,s,...n]=i(e);u=$(a)/100,D=$(s),l=F(n,2,t)}else\"increase bb gauge\"in e&&(u=$(e[\"increase bb gauge\"]));const f=[];return 0!==u&&f.push(Object.assign({id:\"proc:31:flat\",originalId:n,sources:c,effectDelay:p,value:u},o)),0!==D&&f.push(Object.assign({id:\"proc:31:percent\",originalId:n,sources:c,effectDelay:p,value:D},o)),r(f,l,{originalId:n,sources:c,targetData:o,effectDelay:p}),f}),e.set(\"32\",(e,t,n)=>{const o=\"32\",{targetData:c,sources:p,effectDelay:l}=s(e,t,n);let u,D;if(e.params){const[t,...s]=i(e);t&&\"0\"!==t&&(u=a[t]||w.Unknown),D=F(s,1,n)}else{const t=e[\"set attack element attribute\"];if(t){const e=Object.values(a).find(e=>t===e);u=e&&e!==w.All?e:w.Unknown}}const f=[];return u&&f.push(Object.assign({id:\"proc:32:\"+u,originalId:o,sources:p,effectDelay:l,value:!0},c)),r(f,D,{originalId:o,sources:p,targetData:c,effectDelay:l}),f}),e.set(\"33\",(e,a,t)=>{const n=\"33\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t);let l,u=0;if(e.params){const[a,...s]=i(e);u=$(a),l=F(s,1,t)}else u=$(e[\"clear buff chance%\"]);const D=[];return 0!==u&&D.push(Object.assign({id:\"proc:33\",originalId:n,sources:c,effectDelay:p,value:u},o)),r(D,l,{originalId:n,sources:c,targetData:o,effectDelay:p}),D}),e.set(\"34\",(e,a,t)=>{const n=\"34\",{targetData:o,sources:c,effectDelay:p}=s(e,a,t);let l,u=0,D=0,f=0,d=0,B=0;if(e.params){const[a,s,n,o,c,...r]=i(e);u=$(a)/100,D=$(s)/100,f=$(n),d=$(o),B=$(c),l=F(r,5,t)}else u=$(e[\"base bb gauge reduction low\"]),D=$(e[\"base bb gauge reduction high\"]),f=$(e[\"bb gauge% reduction low\"]),d=$(e[\"bb gauge% reduction high\"]),B=$(e[\"bb gauge reduction chance%\"]);const E=[];return 0===u&&0===D||E.push(Object.assign({id:\"proc:34:flat\",originalId:n,sources:c,effectDelay:p,value:{drainLow:u,drainHigh:D,chance:B}},o)),0===f&&0===d||E.push(Object.assign({id:\"proc:34:percent\",originalId:n,sources:c,effectDelay:p,value:{drainLow:f,drainHigh:d,chance:B}},o)),r(E,l,{originalId:n,sources:c,targetData:o,effectDelay:p}),E}),e.set(\"36\",(e,a,t)=>D({effect:e,context:a,injectionContext:t,effectValueKey:\"invalidate LS chance%\",effectTurnDurationKey:\"invalidate LS turns (60)\",buffId:\"proc:36\",originalId:\"36\"}))}(q)),q}function ee(e){return J&&!e||(J=new Map,function(e){const a={1:A.Fire,2:A.Water,3:A.Earth,4:A.Thunder,5:A.Light,6:A.Dark,X:w.OmniParadigm},t={1:I.Lord,2:I.Anima,3:I.Breaker,4:I.Guardian,5:I.Oracle,6:I.Rex},s={1:l.Poison,2:l.Weak,3:l.Sick,4:l.Injury,5:l.Curse,6:l.Paralysis,7:l.AttackReduction,8:l.DefenseReduction,9:l.RecoveryReduction},i=[\"atk\",\"def\",\"rec\",\"crit\",\"hp\"],n=[\"poison\",\"weak\",\"sick\",\"injury\",\"curse\",\"paralysis\"],o=[\"bc\",\"hc\",\"item\",\"zel\",\"karma\"],c=(e,a,t)=>({conditionInfo:(t&&t.processExtraSkillConditions||V)(e),targetData:(t&&t.getPassiveTargetData||Y)(e,a),sources:(t&&t.createSourcesFromContext||x)(a)}),r=e=>e.params.split(\",\"),F=(e,{originalId:a,sources:t,targetData:s,conditionInfo:i})=>Object.assign({id:j.UNKNOWN_PASSIVE_BUFF_PARAMS,originalId:a,sources:t,value:e,conditions:Object.assign({},i)},s),p=({originalId:e,sources:a})=>({id:j.NO_PARAMS_SPECIFIED,originalId:e,sources:a}),u=(e,a,{originalId:t,sources:s,targetData:i,conditionInfo:n})=>{0===e.length&&e.push(p({originalId:t,sources:s})),a&&e.push(F(a,{originalId:t,sources:s,targetData:i,conditionInfo:n}))},D=(e,a,t)=>{let s;return e&&e.length>0&&(s=(t&&t.createUnknownParamsValue||X)(e,a)),s};let f;!function(e){e.Hp=\"hp\",e.Bb=\"bb gauge\"}(f||(f={}));const d=(e,a,t)=>({threshold:$(e),requireAbove:\"1\"===a,type:t}),B=(e,a,t=\"buff requirement\")=>{let s=0,i=!1;return`${a} above % ${t}`in e?(s=$(e[`${a} above % ${t}`]),i=!0):(s=$(e[`${a} below % ${t}`]),i=!1),{threshold:s,requireAbove:i,type:a}},E=({threshold:e,requireAbove:a,type:t})=>{let s;return t===f.Hp?s=a?{hpGreaterThanOrEqualTo:e}:{hpLessThanOrEqualTo:e}:t===f.Bb&&(s=a?{bbGaugeGreaterThanOrEqualTo:e}:{bbGaugeLessThanOrEqualTo:e}),s},U=({effect:e,context:a,injectionContext:t,originalId:s,effectKey:i,buffId:n,parseParamValue:o=(e=>$(e))})=>{const{conditionInfo:F,targetData:p,sources:l}=c(e,a,t),f=e,d=[];let B,E=0;if(f.params){const[e,...a]=r(f);E=o(e),B=D(a,1,t)}else E=$(f[i]);return 0!==E&&d.push(Object.assign({id:n,originalId:s,sources:l,value:E,conditions:Object.assign({},F)},p)),u(d,B,{originalId:s,sources:l,targetData:p,conditionInfo:F}),d},T=({effect:e,context:a,injectionContext:t,originalId:s,effectKeyLow:i,effectKeyHigh:n,effectKeyChance:o,buffKeyLow:F,buffKeyHigh:p,defaultEffectChance:l=0,parseParamValue:f=(e=>$(e)),generateBaseConditions:d=(()=>({})),buffId:B})=>{const{conditionInfo:E,targetData:U,sources:T}=c(e,a,t),R=e;let m,g,A,v;if(R.params){const[e,a,s,...i]=r(R);m=f(e),g=f(a),A=$(s),v=D(i,3,t)}else m=$(R[i]),g=$(R[n]),A=$(R[o],l);const _=[];return 0===m&&0===g&&0===A||_.push(Object.assign({id:B,originalId:s,sources:T,value:{[F]:m,[p]:g,chance:A},conditions:Object.assign(Object.assign({},E),d())},U)),u(_,v,{originalId:s,sources:T,targetData:U,conditionInfo:E}),_};e.set(\"1\",(e,a,t)=>{const s=\"1\",{conditionInfo:n,targetData:o,sources:F}=c(e,a,t),p=e,l=[],f={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let d;if(p.params){let e;[f.atk,f.def,f.rec,f.crit,f.hp,...e]=r(p),d=D(e,5,t)}else f.hp=p[\"hp% buff\"],f.atk=p[\"atk% buff\"],f.def=p[\"def% buff\"],f.rec=p[\"rec% buff\"],f.crit=p[\"crit% buff\"];return i.forEach(e=>{const a=$(f[e]);0!==a&&l.push(Object.assign({id:\"passive:1:\"+e,originalId:s,sources:F,value:a,conditions:Object.assign({},n)},o))}),u(l,d,{originalId:s,sources:F,targetData:o,conditionInfo:n}),l}),e.set(\"2\",(e,t,s)=>{const n=\"2\",{conditionInfo:o,targetData:F,sources:p}=c(e,t,s),l=e,f=[],d={elements:[],atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let B;if(l.params){let e,t,i;[t,i,d.atk,d.def,d.rec,d.crit,d.hp,...e]=r(l),[t,i].forEach(e=>{e&&\"0\"!==e&&d.elements.push(a[e]||w.Unknown)}),B=D(e,7,s)}else Array.isArray(l[\"elements buffed\"])&&(d.elements=l[\"elements buffed\"]),d.hp=l[\"hp% buff\"],d.atk=l[\"atk% buff\"],d.def=l[\"def% buff\"],d.rec=l[\"rec% buff\"],d.crit=l[\"crit% buff\"];const E=e=>Object.assign({id:\"passive:2:\"+e,originalId:n,sources:p,value:$(d[e])},F);return d.elements.length>0?d.elements.forEach(e=>{i.forEach(a=>{0!==$(d[a])&&f.push(Object.assign(Object.assign({},E(a)),{conditions:Object.assign(Object.assign({},o),{targetElements:[e]})}))})}):i.forEach(e=>{0!==$(d[e])&&f.push(Object.assign(Object.assign({},E(e)),{conditions:Object.assign(Object.assign({},o),{targetElements:[w.Unknown]})}))}),u(f,B,{originalId:n,sources:p,targetData:F,conditionInfo:o}),f}),e.set(\"3\",(e,a,s)=>{const n=\"3\",{conditionInfo:o,targetData:F,sources:p}=c(e,a,s),l=e,f=[],d={unitType:\"\",atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let B;if(l.params){let e,a;[a,d.atk,d.def,d.rec,d.crit,d.hp,...e]=r(l),a&&\"0\"!==a&&(d.unitType=t[a]||\"unknown\"),B=D(e,6,s)}else d.unitType=l[\"unit type buffed\"],d.hp=l[\"hp% buff\"],d.atk=l[\"atk% buff\"],d.def=l[\"def% buff\"],d.rec=l[\"rec% buff\"],d.crit=l[\"crit% buff\"];const E=d.unitType||\"unknown\";return i.forEach(e=>{const a=$(d[e]);0!==a&&f.push(Object.assign({id:\"passive:3:\"+e,originalId:n,sources:p,value:+a,conditions:Object.assign(Object.assign({},o),{targetUnitType:E})},F))}),u(f,B,{originalId:n,sources:p,targetData:F,conditionInfo:o}),f}),e.set(\"4\",(e,a,t)=>{const s=\"4\",{conditionInfo:i,targetData:o,sources:F}=c(e,a,t),p=e,l=[],f={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\"};let d;if(p.params){let e;[f.poison,f.weak,f.sick,f.injury,f.curse,f.paralysis,...e]=r(p),d=D(e,6,t)}else n.forEach(e=>{const a=\"weak\"!==e?e:\"weaken\";f[e]=p[a+\" resist%\"]});return n.forEach(e=>{const a=$(f[e]);0!==a&&l.push(Object.assign({id:\"passive:4:\"+e,originalId:s,sources:F,value:a,conditions:Object.assign({},i)},o))}),u(l,d,{originalId:s,sources:F,targetData:o,conditionInfo:i}),l}),e.set(\"5\",(e,t,s)=>{const i=\"5\",{conditionInfo:n,targetData:o,sources:F}=c(e,t,s),p=e,l=[];let f,d,B=\"0\";if(p.params){let e,t;[t,B,...e]=r(p),f=a[t]||w.Unknown,d=D(e,2,s)}else f=Object.values(a).find(a=>a+\" resist%\"in e)||w.Unknown,f!==w.Unknown&&(B=p[f+\" resist%\"]);const E=$(B);return 0!==E&&l.push(Object.assign({id:\"passive:5:\"+f,originalId:i,sources:F,value:E,conditions:Object.assign({},n)},o)),u(l,d,{originalId:i,sources:F,targetData:o,conditionInfo:n}),l}),e.set(\"8\",(e,a,t)=>U({effect:e,context:a,injectionContext:t,effectKey:\"dmg% mitigation\",buffId:\"passive:8\",originalId:\"8\"})),e.set(\"9\",(e,a,t)=>U({effect:e,context:a,injectionContext:t,effectKey:\"bc fill per turn\",buffId:\"passive:9\",originalId:\"9\"})),e.set(\"10\",(e,a,t)=>U({effect:e,context:a,injectionContext:t,effectKey:\"hc effectiveness%\",buffId:\"passive:10\",originalId:\"10\"})),e.set(\"11\",(e,a,t)=>{const s=\"11\",{conditionInfo:n,targetData:o,sources:F}=c(e,a,t),p=e,l=[],U={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\"};let T,R;if(p.params){let e,a,s;[U.atk,U.def,U.rec,U.crit,s,a,...e]=r(p),T=d(s,a,f.Hp),R=D(e,6,t)}else U.atk=p[\"atk% buff\"],U.def=p[\"def% buff\"],U.rec=p[\"rec% buff\"],U.crit=p[\"crit% buff\"],T=B(p,f.Hp);const m=E(T);return i.forEach(e=>{const a=$(U[e]);if(\"hp\"!==e&&0!==a){const t=Object.assign({id:\"passive:11:\"+e,originalId:s,sources:F,value:a,conditions:Object.assign(Object.assign({},n),m)},o);l.push(t)}}),u(l,R,{originalId:s,sources:F,targetData:o,conditionInfo:n}),l}),e.set(\"12\",(e,a,t)=>{const s=\"12\",{conditionInfo:i,targetData:n,sources:F}=c(e,a,t),p=e,l=[],U={bc:\"0\",hc:\"0\",item:\"0\",zel:\"0\",karma:\"0\"};let T,R;if(p.params){let e,a,s;[U.bc,U.hc,U.item,U.zel,U.karma,s,a,...e]=r(p),T=d(s,a,f.Hp),R=D(e,7,t)}else o.forEach(e=>{U[e]=p[e+\" drop rate% buff\"]}),T=B(p,f.Hp);const m=E(T);return o.forEach(e=>{const a=$(U[e]);if(0!==a){const t=Object.assign({id:\"passive:12:\"+e,originalId:s,sources:F,value:a,conditions:Object.assign(Object.assign({},i),m)},n);l.push(t)}}),u(l,R,{originalId:s,sources:F,targetData:n,conditionInfo:i}),l}),e.set(\"13\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,originalId:\"13\",effectKeyLow:\"bc fill on enemy defeat low\",effectKeyHigh:\"bc fill on enemy defeat high\",effectKeyChance:\"bc fill on enemy defeat%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>$(e)/100,generateBaseConditions:()=>({onEnemyDefeat:!0}),buffId:\"passive:13\"})),e.set(\"14\",(e,a,t)=>{const s=\"14\",{conditionInfo:i,targetData:n,sources:o}=c(e,a,t),F=e;let p,l,f;if(F.params){const[e,a,...s]=r(F);p=$(e),l=$(a),f=D(s,2,t)}else p=$(F[\"dmg reduction%\"]),l=$(F[\"dmg reduction chance%\"]);const d=[];return 0===p&&0===l||d.push(Object.assign({id:\"passive:14\",originalId:s,sources:o,value:{value:p,chance:l},conditions:Object.assign({},i)},n)),u(d,f,{originalId:s,sources:o,targetData:n,conditionInfo:i}),d}),e.set(\"15\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,originalId:\"15\",effectKeyLow:\"hp% recover on enemy defeat low\",effectKeyHigh:\"hp% recover on enemy defeat high\",effectKeyChance:\"hp% recover on enemy defeat chance%\",buffKeyLow:\"healLow\",buffKeyHigh:\"healHigh\",generateBaseConditions:()=>({onEnemyDefeat:!0}),defaultEffectChance:100,buffId:\"passive:15\"})),e.set(\"16\",(e,a,t)=>{const s=\"16\",{conditionInfo:i,targetData:n,sources:o}=c(e,a,t),F=e;let p,l,f;if(F.params){const[e,a,...s]=r(F);p=$(e),l=$(a),f=D(s,2,t)}else p=$(F[\"hp% recover on battle win low\"]),l=$(F[\"hp% recover on battle win high\"]);const d=[];return 0===p&&0===l||d.push(Object.assign({id:\"passive:16\",originalId:s,sources:o,value:{healLow:p,healHigh:l},conditions:Object.assign(Object.assign({},i),{onBattleWin:!0})},n)),u(d,f,{originalId:s,sources:o,targetData:n,conditionInfo:i}),d}),e.set(\"17\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,originalId:\"17\",effectKeyLow:\"hp drain% low\",effectKeyHigh:\"hp drain% high\",effectKeyChance:\"hp drain chance%\",buffKeyLow:\"drainHealLow\",buffKeyHigh:\"drainHealHigh\",buffId:\"passive:17\"})),e.set(\"19\",(e,a,t)=>{const s=\"19\",{conditionInfo:i,targetData:n,sources:F}=c(e,a,t),p=e,l=[],f={bc:\"0\",hc:\"0\",item:\"0\",zel:\"0\",karma:\"0\"};let d;if(p.params){let e;[f.bc,f.hc,f.item,f.zel,f.karma,...e]=r(p),d=D(e,5,t)}else o.forEach(e=>{f[e]=p[e+\" drop rate% buff\"]});return o.forEach(e=>{const a=$(f[e]);0!==a&&l.push(Object.assign({id:\"passive:19:\"+e,originalId:s,sources:F,value:a,conditions:Object.assign({},i)},n))}),u(l,d,{originalId:s,sources:F,targetData:n,conditionInfo:i}),l}),e.set(\"20\",(e,a,t)=>{const i=\"20\",{conditionInfo:n,targetData:o,sources:F}=c(e,a,t),p=[],f=e;let d;if(f.params){let e=r(f);e.length%2!=0&&\"0\"!==e[e.length-1]&&(d=D(e.slice(-1),e.length-1,t),e=e.slice(0,e.length-1));const a=e.length;for(let t=0;t<a;t+=2){const a=e[t],i=$(e[t+1]);if(\"0\"!==a||0!==i){const e=s[a]||l.Unknown;p.push({ailment:e,chance:i})}}}else Object.values(s).forEach(a=>{let t;t=a===l.Weak?\"weaken%\":a===l.AttackReduction||a===l.DefenseReduction||a===l.RecoveryReduction?a:a+\"%\",t in e&&p.push({ailment:a,chance:$(f[t])})});const B=[];return p.forEach(({ailment:e,chance:a})=>{0!==a&&B.push(Object.assign({id:\"passive:20:\"+e,originalId:i,sources:F,value:a,conditions:Object.assign({},n)},o))}),u(B,d,{originalId:i,sources:F,targetData:o,conditionInfo:n}),B}),e.set(\"21\",(e,a,t)=>{const s=\"21\",{conditionInfo:n,targetData:o,sources:F}=c(e,a,t),p=e,l=[],f={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\"};let d,B=0;if(p.params){let e,a;[f.atk,f.def,f.rec,f.crit,e,...a]=r(p),B=$(e),d=D(a,5,t)}else f.atk=p[\"first x turns atk% (1)\"],f.def=p[\"first x turns def% (3)\"],f.rec=p[\"first x turns rec% (5)\"],f.crit=p[\"first x turns crit% (7)\"],B=$(p[\"first x turns\"]);return i.forEach(e=>{const a=$(f[e]);if(\"hp\"!==e&&0!==a){const t=Object.assign({id:\"passive:21:\"+e,originalId:s,sources:F,value:a,duration:B,conditions:Object.assign({},n)},o);l.push(t)}}),u(l,d,{originalId:s,sources:F,targetData:o,conditionInfo:n}),l}),e.set(\"23\",(e,a,t)=>{const s=\"23\",{conditionInfo:i,targetData:n,sources:o}=c(e,a,t),F=e;let p,l,f;if(F.params){const[e,a,...s]=r(F);p=$(e)/100,l=$(a)/100,f=D(s,2,t)}else p=$(F[\"battle end bc fill low\"]),l=$(F[\"battle end bc fill high\"]);const d=[];return 0===p&&0===l||d.push(Object.assign({id:\"passive:23\",originalId:s,sources:o,value:{fillLow:p,fillHigh:l},conditions:Object.assign(Object.assign({},i),{onBattleWin:!0})},n)),u(d,f,{originalId:s,sources:o,targetData:n,conditionInfo:i}),d}),e.set(\"24\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,originalId:\"24\",effectKeyLow:\"dmg% to hp when attacked low\",effectKeyHigh:\"dmg% to hp when attacked high\",effectKeyChance:\"dmg% to hp when attacked chance%\",buffKeyLow:\"healLow\",buffKeyHigh:\"healHigh\",generateBaseConditions:()=>({whenAttacked:!0}),buffId:\"passive:24\"})),e.set(\"25\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,originalId:\"25\",effectKeyLow:\"bc fill when attacked low\",effectKeyHigh:\"bc fill when attacked high\",effectKeyChance:\"bc fill when attacked%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>$(e)/100,generateBaseConditions:()=>({whenAttacked:!0}),buffId:\"passive:25\"})),e.set(\"26\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,originalId:\"26\",effectKeyLow:\"dmg% reflect low\",effectKeyHigh:\"dmg% reflect high\",effectKeyChance:\"dmg% reflect chance%\",buffKeyLow:\"damageReflectLow\",buffKeyHigh:\"damageReflectHigh\",generateBaseConditions:()=>({whenAttacked:!0}),buffId:\"passive:26\"})),e.set(\"27\",(e,a,t)=>U({effect:e,context:a,injectionContext:t,effectKey:\"target% chance\",buffId:\"passive:27\",originalId:\"27\"})),e.set(\"28\",(e,a,t)=>{const s=\"28\",{conditionInfo:i,targetData:n,sources:o}=c(e,a,t),F=e;let p,l,U=0;if(F.params){const[e,a,s,...i]=r(F);U=$(e),p=d(a,s,f.Hp),l=D(i,3,t)}else U=$(F[\"target% chance\"]),p=B(F,f.Hp,\"passive requirement\");const T=[];if(0!==U){const e=E(p),a=Object.assign({id:\"passive:28\",originalId:s,sources:o,value:U,conditions:Object.assign(Object.assign({},i),e)},n);T.push(a)}return u(T,l,{originalId:s,sources:o,targetData:n,conditionInfo:i}),T}),e.set(\"29\",(e,a,t)=>U({effect:e,context:a,injectionContext:t,effectKey:\"ignore def%\",buffId:\"passive:29\",originalId:\"29\"})),e.set(\"30\",(e,a,t)=>{const s=\"30\",{conditionInfo:n,targetData:o,sources:F}=c(e,a,t),p=e,l=[],U={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\"};let T,R;if(p.params){let e,a,s;[U.atk,U.def,U.rec,U.crit,s,a,...e]=r(p),T=d(s,a,f.Bb),R=D(e,6,t)}else U.atk=p[\"atk% buff\"],U.def=p[\"def% buff\"],U.rec=p[\"rec% buff\"],U.crit=p[\"crit% buff\"],T=B(p,f.Bb);const m=E(T);return i.forEach(e=>{const a=$(U[e]);if(\"hp\"!==e&&0!==a){const t=Object.assign({id:\"passive:30:\"+e,originalId:s,sources:F,value:a,conditions:Object.assign(Object.assign({},n),m)},o);l.push(t)}}),u(l,R,{originalId:s,sources:F,targetData:o,conditionInfo:n}),l}),e.set(\"31\",(e,a,t)=>{const s=\"31\",{conditionInfo:i,targetData:n,sources:F}=c(e,a,t),p=e,l={bc:\"0\",hc:\"0\",item:\"0\",zel:\"0\",karma:\"0\"};let f,d=0;if(p.params){let e,a;[a,l.bc,l.hc,l.item,l.zel,l.karma,...e]=r(p),d=$(a),f=D(e,6,t)}else d=$(p[\"damage% for spark\"]),o.forEach(e=>{l[e]=p[e+\" drop% for spark\"]});const B=[];return 0!==d&&B.push(Object.assign({id:\"passive:31:damage\",originalId:s,sources:F,value:d,conditions:Object.assign({},i)},n)),o.forEach(e=>{const a=$(l[e]);0!==a&&B.push(Object.assign({id:\"passive:31:\"+e,originalId:s,sources:F,value:a,conditions:Object.assign({},i)},n))}),u(B,f,{originalId:s,sources:F,targetData:n,conditionInfo:i}),B}),e.set(\"32\",(e,a,t)=>U({effect:e,context:a,injectionContext:t,effectKey:\"bb gauge fill rate%\",buffId:\"passive:32\",originalId:\"32\"})),e.set(\"33\",(e,a,t)=>{const s=\"33\",{conditionInfo:i,targetData:n,sources:o}=c(e,a,t),F=e;let p,l,f,d;if(F.params){const[e,a,s,...i]=r(F);p=$(e),l=$(a),f=10*(1+$(s)/100),d=D(i,3,t)}else p=$(F[\"turn heal low\"]),l=$(F[\"turn heal high\"]),f=$(F[\"rec% added (turn heal)\"]);const B=[];return 0===p&&0===l||B.push(Object.assign({id:\"passive:33\",originalId:s,sources:o,value:{healLow:p,healHigh:l,\"addedRec%\":f},conditions:Object.assign({},i)},n)),u(B,d,{originalId:s,sources:o,targetData:n,conditionInfo:i}),B}),e.set(\"34\",(e,a,t)=>U({effect:e,context:a,injectionContext:t,effectKey:\"crit multiplier%\",buffId:\"passive:34\",originalId:\"34\",parseParamValue:e=>100*$(e)})),e.set(\"35\",(e,a,t)=>T({effect:e,context:a,injectionContext:t,originalId:\"35\",effectKeyLow:\"bc fill when attacking low\",effectKeyHigh:\"bc fill when attacking high\",effectKeyChance:\"bc fill when attacking%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>$(e)/100,generateBaseConditions:()=>({onNormalAttack:!0}),buffId:\"passive:35\"})),e.set(\"36\",(e,a,t)=>{const s=\"36\",{conditionInfo:i,targetData:n,sources:o}=c(e,a,t),F=e;let p,l=0,f=0,d=0;if(F.params){const[e,a,s,...i]=r(F);l=$(e),f=$(a),d=$(s),p=D(i,3,t)}else l=$(F[\"additional actions\"]);const B=[];return 0===l&&0===f&&0===d||B.push(Object.assign({id:\"passive:36\",originalId:s,sources:o,value:{additionalActions:l,damageModifier:f,chance:d},conditions:Object.assign({},i)},n)),u(B,p,{originalId:s,sources:o,targetData:n,conditionInfo:i}),B}),e.set(\"37\",(e,a,t)=>{const s=\"37\",{conditionInfo:i,targetData:n,sources:o}=c(e,a,t),F=e;let p,l=0,f=0;if(F.params){const e=r(F);l=$(e[0]),f=$(e[2]);const a=[\"0\",e[1],\"0\",...e.slice(3)];p=D(a,0,t)}else l=$(F[\"hit increase/hit\"]),f=$(F[\"extra hits dmg%\"]);const d=[];return 0===l&&0===f||d.push(Object.assign({id:\"passive:37\",originalId:s,sources:o,value:{hitIncreasePerHit:l,extraHitDamage:f},conditions:Object.assign({},i)},n)),u(d,p,{originalId:s,sources:o,targetData:n,conditionInfo:i}),d})}(J)),J}!function(e){e.Active=\"active\",e.Passive=\"passive\",e.ConditionalTimed=\"conditionalTimed\",e.Singleton=\"singleton\",e.Burst=\"burst\",e.Attack=\"attack\",e.Unknown=\"unknown\"}(W||(W={})),function(e){e.BraveBurst=\"bb\",e.SuperBraveBurst=\"sbb\",e.UltimateBraveBurst=\"ubb\",e.DualBraveBurst=\"dbb\",e.BondedBraveBurst=\"bbb\",e.BondedSuperBraveBurst=\"dsbb\",e.SpEnhancement=\"sp\",e.Item=\"item\",e.LeaderSkill=\"ls\",e.ExtraSkill=\"es\",e.OmniParadigm=\"omniParadigm\",e.UnitTypeBonus=\"unitTypeBonus\",e.Quest=\"quest\"}(K||(K={})),function(e){e.Unknown=\"unknown\",e.OmniParadigm=\"omniParadigm\",e.All=\"all\"}(w||(w={})),function(e){e.hp=\"hp\",e.atk=\"atk\",e.def=\"def\",e.rec=\"rec\",e.crit=\"crit\",e.hpRecovery=\"hpRecovery\",e.bbGauge=\"bbGauge\",e.bcDropRate=\"bcDropRate\",e.hcDropRate=\"hcDropRate\",e.itemDropRate=\"itemDropRate\",e.zelDropRate=\"zelDropRate\",e.karmaDropRate=\"karmaDropRate\",e.bcEfficacy=\"bcEfficacy\",e.hcEfficacy=\"hcEfficacy\",e.poisonResist=\"poisonResist\",e.weakResist=\"weakResist\",e.sickResist=\"sickResist\",e.injuryResist=\"injuryResist\",e.curseResist=\"curseResist\",e.paralysisResist=\"paralysisResist\",e.poisonInflict=\"poisonInflict\",e.weakInflict=\"weakInflict\",e.sickInflict=\"sickInflict\",e.injuryInflict=\"injuryInflict\",e.curseInflict=\"curseInflict\",e.paralysisInflict=\"paralysisInflict\",e.atkDownResist=\"atkDownResist\",e.defDownResist=\"defDownResist\",e.recDownResist=\"recDownResist\",e.atkDownInflict=\"atkDownInflict\",e.defDownInflict=\"defDownInflict\",e.recDownInflict=\"recDownInflict\",e.mitigation=\"mitigation\",e.fireMitigation=\"fireMitigation\",e.waterMitigation=\"waterMitigation\",e.earthMitigation=\"earthMitigation\",e.thunderMitigation=\"thunderMitigation\",e.lightMitigation=\"lightMitigation\",e.darkMitigation=\"darkMitigation\",e.turnDurationModification=\"turnDurationModification\",e.koResistance=\"koResistance\",e.revive=\"revive\",e.defenseIgnore=\"defenseIgnore\",e.criticalDamage=\"criticalDamage\",e.sparkDamage=\"sparkDamage\",e.hitCountModification=\"hitCountModification\",e.damageReflect=\"damageReflect\",e.targetingModification=\"targetingModification\",e.elementModification=\"elementModification\",e.buffStabilityModification=\"buffStabilityModification\",e.extraAction=\"extraAction\"}(L||(L={})),function(e){e.UNKNOWN=\"UNKNOWN\",e.TURN_DURATION_UP=\"TURN_DURATION_UP\",e.TURN_DURATION_DOWN=\"TURN_DURATION_DOWN\",e.BUFF_HPUP=\"BUFF_HPUP\",e.BUFF_HPDOWN=\"BUFF_HPDOWN\",e.BUFF_ATKUP=\"BUFF_ATKUP\",e.BUFF_ATKDOWN=\"BUFF_ATKDOWN\",e.BUFF_DEFUP=\"BUFF_DEFUP\",e.BUFF_DEFDOWN=\"BUFF_DEFDOWN\",e.BUFF_RECUP=\"BUFF_RECUP\",e.BUFF_RECDOWN=\"BUFF_RECDOWN\",e.BUFF_CRTRATEUP=\"BUFF_CRTRATEUP\",e.BUFF_CRTRATEDOWN=\"BUFF_CRTRATEDOWN\",e.BUFF_HPTHRESHATKUP=\"BUFF_HPTHRESHATKUP\",e.BUFF_HPTHRESHATKDOWN=\"BUFF_HPTHRESHATKDOWN\",e.BUFF_HPTHRESHDEFUP=\"BUFF_HPTHRESHDEFUP\",e.BUFF_HPTHRESHDEFDOWN=\"BUFF_HPTHRESHDEFDOWN\",e.BUFF_HPTHRESHRECUP=\"BUFF_HPTHRESHRECUP\",e.BUFF_HPTHRESHRECDOWN=\"BUFF_HPTHRESHRECDOWN\",e.BUFF_HPTHRESHCRTRATEUP=\"BUFF_HPTHRESHCRTRATEUP\",e.BUFF_HPTHRESHCRTRATEDOWN=\"BUFF_HPTHRESHCRTRATEDOWN\",e.BUFF_BBGAUGETHRESHATKUP=\"BUFF_BBGAUGETHRESHATKUP\",e.BUFF_BBGAUGETHRESHATKDOWN=\"BUFF_BBGAUGETHRESHATKDOWN\",e.BUFF_BBGAUGETHRESHDEFUP=\"BUFF_BBGAUGETHRESHDEFUP\",e.BUFF_BBGAUGETHRESHDEFDOWN=\"BUFF_BBGAUGETHRESHDEFDOWN\",e.BUFF_BBGAUGETHRESHRECUP=\"BUFF_BBGAUGETHRESHRECUP\",e.BUFF_BBGAUGETHRESHRECDOWN=\"BUFF_BBGAUGETHRESHRECDOWN\",e.BUFF_BBGAUGETHRESHCRTRATEUP=\"BUFF_BBGAUGETHRESHCRTRATEUP\",e.BUFF_BBGAUGETHRESHCRTRATEDOWN=\"BUFF_BBGAUGETHRESHCRTRATEDOWN\",e.BUFF_HPREC=\"BUFF_HPREC\",e.BUFF_BBREC=\"BUFF_BBREC\",e.BUFF_DAMAGEBB=\"BUFF_DAMAGEBB\",e.BUFF_BEENATK_HPREC=\"BUFF_BEENATK_HPREC\",e.BUFF_FIREHPUP=\"BUFF_FIREHPUP\",e.BUFF_FIREHPDOWN=\"BUFF_FIREHPDOWN\",e.BUFF_FIREATKUP=\"BUFF_FIREATKUP\",e.BUFF_FIREATKDOWN=\"BUFF_FIREATKDOWN\",e.BUFF_FIREDEFUP=\"BUFF_FIREDEFUP\",e.BUFF_FIREDEFDOWN=\"BUFF_FIREDEFDOWN\",e.BUFF_FIRERECUP=\"BUFF_FIRERECUP\",e.BUFF_FIRERECDOWN=\"BUFF_FIRERECDOWN\",e.BUFF_FIRECRTRATEUP=\"BUFF_FIRECRTRATEUP\",e.BUFF_FIRECRTRATEDOWN=\"BUFF_FIRECRTRATEDOWN\",e.BUFF_WATERHPUP=\"BUFF_WATERHPUP\",e.BUFF_WATERHPDOWN=\"BUFF_WATERHPDOWN\",e.BUFF_WATERATKUP=\"BUFF_WATERATKUP\",e.BUFF_WATERATKDOWN=\"BUFF_WATERATKDOWN\",e.BUFF_WATERDEFUP=\"BUFF_WATERDEFUP\",e.BUFF_WATERDEFDOWN=\"BUFF_WATERDEFDOWN\",e.BUFF_WATERRECUP=\"BUFF_WATERRECUP\",e.BUFF_WATERRECDOWN=\"BUFF_WATERRECDOWN\",e.BUFF_WATERCRTRATEUP=\"BUFF_WATERCRTRATEUP\",e.BUFF_WATERCRTRATEDOWN=\"BUFF_WATERCRTRATEDOWN\",e.BUFF_EARTHHPUP=\"BUFF_EARTHHPUP\",e.BUFF_EARTHHPDOWN=\"BUFF_EARTHHPDOWN\",e.BUFF_EARTHATKUP=\"BUFF_EARTHATKUP\",e.BUFF_EARTHATKDOWN=\"BUFF_EARTHATKDOWN\",e.BUFF_EARTHDEFUP=\"BUFF_EARTHDEFUP\",e.BUFF_EARTHDEFDOWN=\"BUFF_EARTHDEFDOWN\",e.BUFF_EARTHRECUP=\"BUFF_EARTHRECUP\",e.BUFF_EARTHRECDOWN=\"BUFF_EARTHRECDOWN\",e.BUFF_EARTHCRTRATEUP=\"BUFF_EARTHCRTRATEUP\",e.BUFF_EARTHCRTRATEDOWN=\"BUFF_EARTHCRTRATEDOWN\",e.BUFF_THUNDERHPUP=\"BUFF_THUNDERHPUP\",e.BUFF_THUNDERHPDOWN=\"BUFF_THUNDERHPDOWN\",e.BUFF_THUNDERATKUP=\"BUFF_THUNDERATKUP\",e.BUFF_THUNDERATKDOWN=\"BUFF_THUNDERATKDOWN\",e.BUFF_THUNDERDEFUP=\"BUFF_THUNDERDEFUP\",e.BUFF_THUNDERDEFDOWN=\"BUFF_THUNDERDEFDOWN\",e.BUFF_THUNDERRECUP=\"BUFF_THUNDERRECUP\",e.BUFF_THUNDERRECDOWN=\"BUFF_THUNDERRECDOWN\",e.BUFF_THUNDERCRTRATEUP=\"BUFF_THUNDERCRTRATEUP\",e.BUFF_THUNDERCRTRATEDOWN=\"BUFF_THUNDERCRTRATEDOWN\",e.BUFF_LIGHTHPUP=\"BUFF_LIGHTHPUP\",e.BUFF_LIGHTHPDOWN=\"BUFF_LIGHTHPDOWN\",e.BUFF_LIGHTATKUP=\"BUFF_LIGHTATKUP\",e.BUFF_LIGHTATKDOWN=\"BUFF_LIGHTATKDOWN\",e.BUFF_LIGHTDEFUP=\"BUFF_LIGHTDEFUP\",e.BUFF_LIGHTDEFDOWN=\"BUFF_LIGHTDEFDOWN\",e.BUFF_LIGHTRECUP=\"BUFF_LIGHTRECUP\",e.BUFF_LIGHTRECDOWN=\"BUFF_LIGHTRECDOWN\",e.BUFF_LIGHTCRTRATEUP=\"BUFF_LIGHTCRTRATEUP\",e.BUFF_LIGHTCRTRATEDOWN=\"BUFF_LIGHTCRTRATEDOWN\",e.BUFF_DARKHPUP=\"BUFF_DARKHPUP\",e.BUFF_DARKHPDOWN=\"BUFF_DARKHPDOWN\",e.BUFF_DARKATKUP=\"BUFF_DARKATKUP\",e.BUFF_DARKATKDOWN=\"BUFF_DARKATKDOWN\",e.BUFF_DARKDEFUP=\"BUFF_DARKDEFUP\",e.BUFF_DARKDEFDOWN=\"BUFF_DARKDEFDOWN\",e.BUFF_DARKRECUP=\"BUFF_DARKRECUP\",e.BUFF_DARKRECDOWN=\"BUFF_DARKRECDOWN\",e.BUFF_DARKCRTRATEUP=\"BUFF_DARKCRTRATEUP\",e.BUFF_DARKCRTRATEDOWN=\"BUFF_DARKCRTRATEDOWN\",e.BUFF_ELEMENTHPUP=\"BUFF_ELEMENTHPUP\",e.BUFF_ELEMENTHPDOWN=\"BUFF_ELEMENTHPDOWN\",e.BUFF_ELEMENTATKUP=\"BUFF_ELEMENTATKUP\",e.BUFF_ELEMENTATKDOWN=\"BUFF_ELEMENTATKDOWN\",e.BUFF_ELEMENTDEFUP=\"BUFF_ELEMENTDEFUP\",e.BUFF_ELEMENTDEFDOWN=\"BUFF_ELEMENTDEFDOWN\",e.BUFF_ELEMENTRECUP=\"BUFF_ELEMENTRECUP\",e.BUFF_ELEMENTRECDOWN=\"BUFF_ELEMENTRECDOWN\",e.BUFF_ELEMENTCRTRATEUP=\"BUFF_ELEMENTCRTRATEUP\",e.BUFF_ELEMENTCRTRATEDOWN=\"BUFF_ELEMENTCRTRATEDOWN\",e.BUFF_LORDHPUP=\"BUFF_LORDHPUP\",e.BUFF_LORDHPDOWN=\"BUFF_LORDHPDOWN\",e.BUFF_LORDATKUP=\"BUFF_LORDATKUP\",e.BUFF_LORDATKDOWN=\"BUFF_LORDATKDOWN\",e.BUFF_LORDDEFUP=\"BUFF_LORDDEFUP\",e.BUFF_LORDDEFDOWN=\"BUFF_LORDDEFDOWN\",e.BUFF_LORDRECUP=\"BUFF_LORDRECUP\",e.BUFF_LORDRECDOWN=\"BUFF_LORDRECDOWN\",e.BUFF_LORDCRTRATEUP=\"BUFF_LORDCRTRATEUP\",e.BUFF_LORDCRTRATEDOWN=\"BUFF_LORDCRTRATEDOWN\",e.BUFF_ANIMAHPUP=\"BUFF_ANIMAHPUP\",e.BUFF_ANIMAHPDOWN=\"BUFF_ANIMAHPDOWN\",e.BUFF_ANIMAATKUP=\"BUFF_ANIMAATKUP\",e.BUFF_ANIMAATKDOWN=\"BUFF_ANIMAATKDOWN\",e.BUFF_ANIMADEFUP=\"BUFF_ANIMADEFUP\",e.BUFF_ANIMADEFDOWN=\"BUFF_ANIMADEFDOWN\",e.BUFF_ANIMARECUP=\"BUFF_ANIMARECUP\",e.BUFF_ANIMARECDOWN=\"BUFF_ANIMARECDOWN\",e.BUFF_ANIMACRTRATEUP=\"BUFF_ANIMACRTRATEUP\",e.BUFF_ANIMACRTRATEDOWN=\"BUFF_ANIMACRTRATEDOWN\",e.BUFF_BREAKERHPUP=\"BUFF_BREAKERHPUP\",e.BUFF_BREAKERHPDOWN=\"BUFF_BREAKERHPDOWN\",e.BUFF_BREAKERATKUP=\"BUFF_BREAKERATKUP\",e.BUFF_BREAKERATKDOWN=\"BUFF_BREAKERATKDOWN\",e.BUFF_BREAKERDEFUP=\"BUFF_BREAKERDEFUP\",e.BUFF_BREAKERDEFDOWN=\"BUFF_BREAKERDEFDOWN\",e.BUFF_BREAKERRECUP=\"BUFF_BREAKERRECUP\",e.BUFF_BREAKERRECDOWN=\"BUFF_BREAKERRECDOWN\",e.BUFF_BREAKERCRTRATEUP=\"BUFF_BREAKERCRTRATEUP\",e.BUFF_BREAKERCRTRATEDOWN=\"BUFF_BREAKERCRTRATEDOWN\",e.BUFF_GUARDIANHPUP=\"BUFF_GUARDIANHPUP\",e.BUFF_GUARDIANHPDOWN=\"BUFF_GUARDIANHPDOWN\",e.BUFF_GUARDIANATKUP=\"BUFF_GUARDIANATKUP\",e.BUFF_GUARDIANATKDOWN=\"BUFF_GUARDIANATKDOWN\",e.BUFF_GUARDIANDEFUP=\"BUFF_GUARDIANDEFUP\",e.BUFF_GUARDIANDEFDOWN=\"BUFF_GUARDIANDEFDOWN\",e.BUFF_GUARDIANRECUP=\"BUFF_GUARDIANRECUP\",e.BUFF_GUARDIANRECDOWN=\"BUFF_GUARDIANRECDOWN\",e.BUFF_GUARDIANCRTRATEUP=\"BUFF_GUARDIANCRTRATEUP\",e.BUFF_GUARDIANCRTRATEDOWN=\"BUFF_GUARDIANCRTRATEDOWN\",e.BUFF_ORACLEHPUP=\"BUFF_ORACLEHPUP\",e.BUFF_ORACLEHPDOWN=\"BUFF_ORACLEHPDOWN\",e.BUFF_ORACLEATKUP=\"BUFF_ORACLEATKUP\",e.BUFF_ORACLEATKDOWN=\"BUFF_ORACLEATKDOWN\",e.BUFF_ORACLEDEFUP=\"BUFF_ORACLEDEFUP\",e.BUFF_ORACLEDEFDOWN=\"BUFF_ORACLEDEFDOWN\",e.BUFF_ORACLERECUP=\"BUFF_ORACLERECUP\",e.BUFF_ORACLERECDOWN=\"BUFF_ORACLERECDOWN\",e.BUFF_ORACLECRTRATEUP=\"BUFF_ORACLECRTRATEUP\",e.BUFF_ORACLECRTRATEDOWN=\"BUFF_ORACLECRTRATEDOWN\",e.BUFF_REXHPUP=\"BUFF_REXHPUP\",e.BUFF_REXHPDOWN=\"BUFF_REXHPDOWN\",e.BUFF_REXATKUP=\"BUFF_REXATKUP\",e.BUFF_REXATKDOWN=\"BUFF_REXATKDOWN\",e.BUFF_REXDEFUP=\"BUFF_REXDEFUP\",e.BUFF_REXDEFDOWN=\"BUFF_REXDEFDOWN\",e.BUFF_REXRECUP=\"BUFF_REXRECUP\",e.BUFF_REXRECDOWN=\"BUFF_REXRECDOWN\",e.BUFF_REXCRTRATEUP=\"BUFF_REXCRTRATEUP\",e.BUFF_REXCRTRATEDOWN=\"BUFF_REXCRTRATEDOWN\",e.BUFF_UNITTYPEHPUP=\"BUFF_UNITTYPEHPUP\",e.BUFF_UNITTYPEHPDOWN=\"BUFF_UNITTYPEHPDOWN\",e.BUFF_UNITTYPEATKUP=\"BUFF_UNITTYPEATKUP\",e.BUFF_UNITTYPEATKDOWN=\"BUFF_UNITTYPEATKDOWN\",e.BUFF_UNITTYPEDEFUP=\"BUFF_UNITTYPEDEFUP\",e.BUFF_UNITTYPEDEFDOWN=\"BUFF_UNITTYPEDEFDOWN\",e.BUFF_UNITTYPERECUP=\"BUFF_UNITTYPERECUP\",e.BUFF_UNITTYPERECDOWN=\"BUFF_UNITTYPERECDOWN\",e.BUFF_UNITTYPECRTRATEUP=\"BUFF_UNITTYPECRTRATEUP\",e.BUFF_UNITTYPECRTRATEDOWN=\"BUFF_UNITTYPECRTRATEDOWN\",e.BUFF_CONVERTATKUP=\"BUFF_CONVERTATKUP\",e.BUFF_CONVERTATKDOWN=\"BUFF_CONVERTATKDOWN\",e.BUFF_CONVERTDEFUP=\"BUFF_CONVERTDEFUP\",e.BUFF_CONVERTDEFDOWN=\"BUFF_CONVERTDEFDOWN\",e.BUFF_CONVERTRECUP=\"BUFF_CONVERTRECUP\",e.BUFF_CONVERTRECDOWN=\"BUFF_CONVERTRECDOWN\",e.BUFF_POISONBLK=\"BUFF_POISONBLK\",e.BUFF_WEAKBLK=\"BUFF_WEAKBLK\",e.BUFF_SICKBLK=\"BUFF_SICKBLK\",e.BUFF_INJURYBLK=\"BUFF_INJURYBLK\",e.BUFF_CURSEBLK=\"BUFF_CURSEBLK\",e.BUFF_PARALYSISBLK=\"BUFF_PARALYSISBLK\",e.BUFF_ATKDOWNBLK=\"BUFF_ATKDOWNBLK\",e.BUFF_DEFDOWNBLK=\"BUFF_DEFDOWNBLK\",e.BUFF_RECDOWNBLK=\"BUFF_RECDOWNBLK\",e.BUFF_AILMENTBLK=\"BUFF_AILMENTBLK\",e.DEBUFF_POISON=\"DEBUFF_POISON\",e.DEBUFF_WEAK=\"DEBUFF_WEAK\",e.DEBUFF_SICK=\"DEBUFF_SICK\",e.DEBUFF_INJURY=\"DEBUFF_INJURY\",e.DEBUFF_CURSE=\"DEBUFF_CURSE\",e.DEBUFF_PARALYSIS=\"DEBUFF_PARALYSIS\",e.DEBUFF_AILMENT=\"DEBUFF_AILMENT\",e.BUFF_ADDPOISON=\"BUFF_ADDPOISON\",e.BUFF_ADDWEAK=\"BUFF_ADDWEAK\",e.BUFF_ADDSICK=\"BUFF_ADDSICK\",e.BUFF_ADDINJURY=\"BUFF_ADDINJURY\",e.BUFF_ADDCURSE=\"BUFF_ADDCURSE\",e.BUFF_ADDPARA=\"BUFF_ADDPARA\",e.BUFF_ADDAILMENT=\"BUFF_ADDAILMENT\",e.BUFF_ADDATKDOWN=\"BUFF_ADDATKDOWN\",e.BUFF_ADDDEFDOWN=\"BUFF_ADDDEFDOWN\",e.BUFF_ADDRECDOWN=\"BUFF_ADDRECDOWN\",e.BUFF_DAMAGECUT=\"BUFF_DAMAGECUT\",e.BUFF_FIREDMGDOWN=\"BUFF_FIREDMGDOWN\",e.BUFF_WATERDMGDOWN=\"BUFF_WATERDMGDOWN\",e.BUFF_EARTHDMGDOWN=\"BUFF_EARTHDMGDOWN\",e.BUFF_THUNDERDMGDOWN=\"BUFF_THUNDERDMGDOWN\",e.BUFF_LIGHTDMGDOWN=\"BUFF_LIGHTDMGDOWN\",e.BUFF_DARKDMGDOWN=\"BUFF_DARKDMGDOWN\",e.BUFF_ELEMENTDMGDOWN=\"BUFF_ELEMENTDMGDOWN\",e.BUFF_HCDROP=\"BUFF_HCDROP\",e.BUFF_HCDOWN=\"BUFF_HCDOWN\",e.BUFF_BCDROP=\"BUFF_BCDROP\",e.BUFF_BCDOWN=\"BUFF_BCDOWN\",e.BUFF_ITEMDROP=\"BUFF_ITEMDROP\",e.BUFF_ITEMDOWN=\"BUFF_ITEMDOWN\",e.BUFF_ZELDROP=\"BUFF_ZELDROP\",e.BUFF_ZELDOWN=\"BUFF_ZELDOWN\",e.BUFF_KARMADROP=\"BUFF_KARMADROP\",e.BUFF_KARMADOWN=\"BUFF_KARMADOWN\",e.BUFF_HPTHRESHHCDROP=\"BUFF_HPTHRESHHCDROP\",e.BUFF_HPTHRESHHCDOWN=\"BUFF_HPTHRESHHCDOWN\",e.BUFF_HPTHRESHBCDROP=\"BUFF_HPTHRESHBCDROP\",e.BUFF_HPTHRESHBCDOWN=\"BUFF_HPTHRESHBCDOWN\",e.BUFF_HPTHRESHITEMDROP=\"BUFF_HPTHRESHITEMDROP\",e.BUFF_HPTHRESHITEMDOWN=\"BUFF_HPTHRESHITEMDOWN\",e.BUFF_HPTHRESHZELDROP=\"BUFF_HPTHRESHZELDROP\",e.BUFF_HPTHRESHZELDOWN=\"BUFF_HPTHRESHZELDOWN\",e.BUFF_HPTHRESHKARMADROP=\"BUFF_HPTHRESHKARMADROP\",e.BUFF_HPTHRESHKARMADOWN=\"BUFF_HPTHRESHKARMADOWN\",e.BUFF_BBFILL=\"BUFF_BBFILL\",e.BUFF_BBFILLDOWN=\"BUFF_BBFILLDOWN\",e.BUFF_HCREC=\"BUFF_HCREC\",e.BUFF_KOBLK=\"BUFF_KOBLK\",e.BUFF_HPABS=\"BUFF_HPABS\",e.BUFF_IGNOREDEF=\"BUFF_IGNOREDEF\",e.BUFF_CRTUP=\"BUFF_CRTUP\",e.BUFF_SPARKUP=\"BUFF_SPARKUP\",e.BUFF_SPARKDOWN=\"BUFF_SPARKDOWN\",e.BUFF_SPARKHC=\"BUFF_SPARKHC\",e.BUFF_SPARKBC=\"BUFF_SPARKBC\",e.BUFF_SPARKITEM=\"BUFF_SPARKITEM\",e.BUFF_SPARKZEL=\"BUFF_SPARKZEL\",e.BUFF_SPARKKARMA=\"BUFF_SPARKKARMA\",e.BUFF_HITUP=\"BUFF_HITUP\",e.BUFF_COUNTERDAMAGE=\"BUFF_COUNTERDAMAGE\",e.BUFF_GETENEATT=\"BUFF_GETENEATT\",e.BUFF_REPENEATT=\"BUFF_REPENEATT\",e.BUFF_HPTHRESHGETENEATT=\"BUFF_HPTHRESHGETENEATT\",e.BUFF_HPTHRESHREPENEATT=\"BUFF_HPTHRESHREPENEATT\",e.BUFF_ADDFIRE=\"BUFF_ADDFIRE\",e.BUFF_ADDWATER=\"BUFF_ADDWATER\",e.BUFF_ADDEARTH=\"BUFF_ADDEARTH\",e.BUFF_ADDTHUNDER=\"BUFF_ADDTHUNDER\",e.BUFF_ADDLIGHT=\"BUFF_ADDLIGHT\",e.BUFF_ADDDARK=\"BUFF_ADDDARK\",e.BUFF_ADDELEMENT=\"BUFF_ADDELEMENT\",e.BUFF_SHIFTFIRE=\"BUFF_SHIFTFIRE\",e.BUFF_SHIFTWATER=\"BUFF_SHIFTWATER\",e.BUFF_SHIFTEARTH=\"BUFF_SHIFTEARTH\",e.BUFF_SHIFTTHUNDER=\"BUFF_SHIFTTHUNDER\",e.BUFF_SHIFTLIGHT=\"BUFF_SHIFTLIGHT\",e.BUFF_SHIFTDARK=\"BUFF_SHIFTDARK\",e.BUFF_SHIFTELEMENT=\"BUFF_SHIFTELEMENT\",e.BUFF_REMOVEBUFF=\"BUFF_REMOVEBUFF\",e.BUFF_DISABLELS=\"BUFF_DISABLELS\",e.BUFF_DBLSTRIKE=\"BUFF_DBLSTRIKE\",e.ATK_ST=\"ATK_ST\",e.ATK_AOE=\"ATK_AOE\",e.ATK_RT=\"ATK_RT\",e.ATK_ST_HPREC=\"ATK_ST_HPREC\",e.ATK_AOE_HPREC=\"ATK_AOE_HPREC\",e.ATK_ST_PROPORTIONAL=\"ATK_ST_PROPORTIONAL\",e.ATK_AOE_PROPORTIONAL=\"ATK_AOE_PROPORTIONAL\",e.ATK_ST_FIXED=\"ATK_ST_FIXED\",e.ATK_AOE_FIXED=\"ATK_AOE_FIXED\",e.ATK_ST_MULTIELEMENT=\"ATK_ST_MULTIELEMENT\",e.ATK_AOE_MULTIELEMENT=\"ATK_AOE_MULTIELEMENT\"}(M||(M={})),function(e){e.TURN_DURATION_MODIFICATION=\"TURN_DURATION_MODIFICATION\",e.NO_PARAMS_SPECIFIED=\"NO_PARAMS_SPECIFIED\",e.UNKNOWN_PASSIVE_EFFECT_ID=\"UNKNOWN_PASSIVE_EFFECT_ID\",e.UNKNOWN_PASSIVE_BUFF_PARAMS=\"UNKNOWN_PASSIVE_BUFF_PARAMS\",e[\"passive:1:hp\"]=\"passive:1:hp\",e[\"passive:1:atk\"]=\"passive:1:atk\",e[\"passive:1:def\"]=\"passive:1:def\",e[\"passive:1:rec\"]=\"passive:1:rec\",e[\"passive:1:crit\"]=\"passive:1:crit\",e[\"passive:2:hp\"]=\"passive:2:hp\",e[\"passive:2:atk\"]=\"passive:2:atk\",e[\"passive:2:def\"]=\"passive:2:def\",e[\"passive:2:rec\"]=\"passive:2:rec\",e[\"passive:2:crit\"]=\"passive:2:crit\",e[\"passive:3:hp\"]=\"passive:3:hp\",e[\"passive:3:atk\"]=\"passive:3:atk\",e[\"passive:3:def\"]=\"passive:3:def\",e[\"passive:3:rec\"]=\"passive:3:rec\",e[\"passive:3:crit\"]=\"passive:3:crit\",e[\"passive:4:poison\"]=\"passive:4:poison\",e[\"passive:4:weak\"]=\"passive:4:weak\",e[\"passive:4:sick\"]=\"passive:4:sick\",e[\"passive:4:injury\"]=\"passive:4:injury\",e[\"passive:4:curse\"]=\"passive:4:curse\",e[\"passive:4:paralysis\"]=\"passive:4:paralysis\",e[\"passive:5:fire\"]=\"passive:5:fire\",e[\"passive:5:water\"]=\"passive:5:water\",e[\"passive:5:earth\"]=\"passive:5:earth\",e[\"passive:5:thunder\"]=\"passive:5:thunder\",e[\"passive:5:light\"]=\"passive:5:light\",e[\"passive:5:dark\"]=\"passive:5:dark\",e[\"passive:5:unknown\"]=\"passive:5:unknown\",e[\"passive:8\"]=\"passive:8\",e[\"passive:9\"]=\"passive:9\",e[\"passive:10\"]=\"passive:10\",e[\"passive:11:atk\"]=\"passive:11:atk\",e[\"passive:11:def\"]=\"passive:11:def\",e[\"passive:11:rec\"]=\"passive:11:rec\",e[\"passive:11:crit\"]=\"passive:11:crit\",e[\"passive:12:bc\"]=\"passive:12:bc\",e[\"passive:12:hc\"]=\"passive:12:hc\",e[\"passive:12:item\"]=\"passive:12:item\",e[\"passive:12:zel\"]=\"passive:12:zel\",e[\"passive:12:karma\"]=\"passive:12:karma\",e[\"passive:13\"]=\"passive:13\",e[\"passive:14\"]=\"passive:14\",e[\"passive:15\"]=\"passive:15\",e[\"passive:16\"]=\"passive:16\",e[\"passive:17\"]=\"passive:17\",e[\"passive:19:bc\"]=\"passive:19:bc\",e[\"passive:19:hc\"]=\"passive:19:hc\",e[\"passive:19:item\"]=\"passive:19:item\",e[\"passive:19:zel\"]=\"passive:19:zel\",e[\"passive:19:karma\"]=\"passive:19:karma\",e[\"passive:20:poison\"]=\"passive:20:poison\",e[\"passive:20:weak\"]=\"passive:20:weak\",e[\"passive:20:sick\"]=\"passive:20:sick\",e[\"passive:20:injury\"]=\"passive:20:injury\",e[\"passive:20:curse\"]=\"passive:20:curse\",e[\"passive:20:paralysis\"]=\"passive:20:paralysis\",e[\"passive:20:atk down\"]=\"passive:20:atk down\",e[\"passive:20:def down\"]=\"passive:20:def down\",e[\"passive:20:rec down\"]=\"passive:20:rec down\",e[\"passive:20:unknown\"]=\"passive:20:unknown\",e[\"passive:21:atk\"]=\"passive:21:atk\",e[\"passive:21:def\"]=\"passive:21:def\",e[\"passive:21:rec\"]=\"passive:21:rec\",e[\"passive:21:crit\"]=\"passive:21:crit\",e[\"passive:23\"]=\"passive:23\",e[\"passive:24\"]=\"passive:24\",e[\"passive:25\"]=\"passive:25\",e[\"passive:26\"]=\"passive:26\",e[\"passive:27\"]=\"passive:27\",e[\"passive:28\"]=\"passive:28\",e[\"passive:29\"]=\"passive:29\",e[\"passive:30:atk\"]=\"passive:30:atk\",e[\"passive:30:def\"]=\"passive:30:def\",e[\"passive:30:rec\"]=\"passive:30:rec\",e[\"passive:30:crit\"]=\"passive:30:crit\",e[\"passive:31:damage\"]=\"passive:31:damage\",e[\"passive:31:bc\"]=\"passive:31:bc\",e[\"passive:31:hc\"]=\"passive:31:hc\",e[\"passive:31:item\"]=\"passive:31:item\",e[\"passive:31:zel\"]=\"passive:31:zel\",e[\"passive:31:karma\"]=\"passive:31:karma\",e[\"passive:32\"]=\"passive:32\",e[\"passive:33\"]=\"passive:33\",e[\"passive:34\"]=\"passive:34\",e[\"passive:35\"]=\"passive:35\",e[\"passive:36\"]=\"passive:36\",e[\"passive:37\"]=\"passive:37\",e.UNKNOWN_PROC_EFFECT_ID=\"UNKNOWN_PROC_EFFECT_ID\",e.UNKNOWN_PROC_BUFF_PARAMS=\"UNKNOWN_PROC_BUFF_PARAMS\",e[\"proc:1\"]=\"proc:1\",e[\"proc:2\"]=\"proc:2\",e[\"proc:3\"]=\"proc:3\",e[\"proc:4:flat\"]=\"proc:4:flat\",e[\"proc:4:percent\"]=\"proc:4:percent\",e[\"proc:5:atk\"]=\"proc:5:atk\",e[\"proc:5:def\"]=\"proc:5:def\",e[\"proc:5:rec\"]=\"proc:5:rec\",e[\"proc:5:crit\"]=\"proc:5:crit\",e[\"proc:6:bc\"]=\"proc:6:bc\",e[\"proc:6:hc\"]=\"proc:6:hc\",e[\"proc:6:item\"]=\"proc:6:item\",e[\"proc:7\"]=\"proc:7\",e[\"proc:8:flat\"]=\"proc:8:flat\",e[\"proc:8:percent\"]=\"proc:8:percent\",e[\"proc:9:atk\"]=\"proc:9:atk\",e[\"proc:9:def\"]=\"proc:9:def\",e[\"proc:9:rec\"]=\"proc:9:rec\",e[\"proc:9:unknown\"]=\"proc:9:unknown\",e[\"proc:10:poison\"]=\"proc:10:poison\",e[\"proc:10:weak\"]=\"proc:10:weak\",e[\"proc:10:sick\"]=\"proc:10:sick\",e[\"proc:10:injury\"]=\"proc:10:injury\",e[\"proc:10:curse\"]=\"proc:10:curse\",e[\"proc:10:paralysis\"]=\"proc:10:paralysis\",e[\"proc:10:atk down\"]=\"proc:10:atk down\",e[\"proc:10:def down\"]=\"proc:10:def down\",e[\"proc:10:rec down\"]=\"proc:10:rec down\",e[\"proc:10:unknown\"]=\"proc:10:unknown\",e[\"proc:11:poison\"]=\"proc:11:poison\",e[\"proc:11:weak\"]=\"proc:11:weak\",e[\"proc:11:sick\"]=\"proc:11:sick\",e[\"proc:11:injury\"]=\"proc:11:injury\",e[\"proc:11:curse\"]=\"proc:11:curse\",e[\"proc:11:paralysis\"]=\"proc:11:paralysis\",e[\"proc:11:atk down\"]=\"proc:11:atk down\",e[\"proc:11:def down\"]=\"proc:11:def down\",e[\"proc:11:rec down\"]=\"proc:11:rec down\",e[\"proc:11:unknown\"]=\"proc:11:unknown\",e[\"proc:12\"]=\"proc:12\",e[\"proc:13\"]=\"proc:13\",e[\"proc:14\"]=\"proc:14\",e[\"proc:16:fire\"]=\"proc:16:fire\",e[\"proc:16:water\"]=\"proc:16:water\",e[\"proc:16:earth\"]=\"proc:16:earth\",e[\"proc:16:thunder\"]=\"proc:16:thunder\",e[\"proc:16:light\"]=\"proc:16:light\",e[\"proc:16:dark\"]=\"proc:16:dark\",e[\"proc:16:all\"]=\"proc:16:all\",e[\"proc:16:unknown\"]=\"proc:16:unknown\",e[\"proc:17:poison\"]=\"proc:17:poison\",e[\"proc:17:weak\"]=\"proc:17:weak\",e[\"proc:17:sick\"]=\"proc:17:sick\",e[\"proc:17:injury\"]=\"proc:17:injury\",e[\"proc:17:curse\"]=\"proc:17:curse\",e[\"proc:17:paralysis\"]=\"proc:17:paralysis\",e[\"proc:18\"]=\"proc:18\",e[\"proc:19\"]=\"proc:19\",e[\"proc:20\"]=\"proc:20\",e[\"proc:22\"]=\"proc:22\",e[\"proc:23\"]=\"proc:23\",e[\"proc:24:atk\"]=\"proc:24:atk\",e[\"proc:24:def\"]=\"proc:24:def\",e[\"proc:24:rec\"]=\"proc:24:rec\",e[\"proc:26\"]=\"proc:26\",e[\"proc:27\"]=\"proc:27\",e[\"proc:28\"]=\"proc:28\",e[\"proc:29\"]=\"proc:29\",e[\"proc:30:fire\"]=\"proc:30:fire\",e[\"proc:30:water\"]=\"proc:30:water\",e[\"proc:30:earth\"]=\"proc:30:earth\",e[\"proc:30:thunder\"]=\"proc:30:thunder\",e[\"proc:30:light\"]=\"proc:30:light\",e[\"proc:30:dark\"]=\"proc:30:dark\",e[\"proc:30:unknown\"]=\"proc:30:unknown\",e[\"proc:31:flat\"]=\"proc:31:flat\",e[\"proc:31:percent\"]=\"proc:31:percent\",e[\"proc:32:fire\"]=\"proc:32:fire\",e[\"proc:32:water\"]=\"proc:32:water\",e[\"proc:32:earth\"]=\"proc:32:earth\",e[\"proc:32:thunder\"]=\"proc:32:thunder\",e[\"proc:32:light\"]=\"proc:32:light\",e[\"proc:32:dark\"]=\"proc:32:dark\",e[\"proc:32:unknown\"]=\"proc:32:unknown\",e[\"proc:33\"]=\"proc:33\",e[\"proc:34:flat\"]=\"proc:34:flat\",e[\"proc:34:percent\"]=\"proc:34:percent\",e[\"proc:36\"]=\"proc:36\"}(j||(j={}));const ae=Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({TURN_DURATION_MODIFICATION:{id:j.TURN_DURATION_MODIFICATION,name:\"Passive Turn Duration Modification\",stat:L.turnDurationModification,stackType:W.Passive,icons:e=>[e&&e.value&&e.value.duration&&e.value.duration<0?M.TURN_DURATION_DOWN:M.TURN_DURATION_UP]},NO_PARAMS_SPECIFIED:{id:j.NO_PARAMS_SPECIFIED,name:\"No Parameters Specified\",stackType:W.Unknown,icons:()=>[M.UNKNOWN]},UNKNOWN_PASSIVE_EFFECT_ID:{id:j.UNKNOWN_PASSIVE_EFFECT_ID,name:\"Unknown Passive Effect\",stackType:W.Unknown,icons:()=>[M.UNKNOWN]},UNKNOWN_PASSIVE_BUFF_PARAMS:{id:j.UNKNOWN_PASSIVE_BUFF_PARAMS,name:\"Unknown Passive Buff Parameters\",stackType:W.Unknown,icons:()=>[M.UNKNOWN]},\"passive:1:hp\":{id:j[\"passive:1:hp\"],name:\"Passive HP Boost\",stat:L.hp,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPDOWN:M.BUFF_HPUP]},\"passive:1:atk\":{id:j[\"passive:1:atk\"],name:\"Passive Attack Boost\",stat:L.atk,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ATKDOWN:M.BUFF_ATKUP]},\"passive:1:def\":{id:j[\"passive:1:def\"],name:\"Passive Defense Boost\",stat:L.def,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_DEFDOWN:M.BUFF_DEFUP]},\"passive:1:rec\":{id:j[\"passive:1:rec\"],name:\"Passive Recovery Boost\",stat:L.rec,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_RECDOWN:M.BUFF_RECUP]},\"passive:1:crit\":{id:j[\"passive:1:crit\"],name:\"Passive Critical Hit Rate Boost\",stat:L.crit,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_CRTRATEDOWN:M.BUFF_CRTRATEUP]}},(()=>{const e=e=>a=>{let t=\"\",s=\"UP\";a&&(a.value&&a.value<0&&(s=\"DOWN\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0])),\"string\"!=typeof t&&(t=\"\");let i=`BUFF_${t.toUpperCase()}${e}${s}`;return t&&i in M||(i=`BUFF_ELEMENT${e}${s}`),[M[i]]};return{\"passive:2:hp\":{id:j[\"passive:2:hp\"],name:\"Passive Elemental HP Boost\",stat:L.hp,stackType:W.Passive,icons:e(\"HP\")},\"passive:2:atk\":{id:j[\"passive:2:atk\"],name:\"Passive Elemental Attack Boost\",stat:L.atk,stackType:W.Passive,icons:e(\"ATK\")},\"passive:2:def\":{id:j[\"passive:2:def\"],name:\"Passive Elemental Defense Boost\",stat:L.def,stackType:W.Passive,icons:e(\"DEF\")},\"passive:2:rec\":{id:j[\"passive:2:rec\"],name:\"Passive Elemental Recovery Boost\",stat:L.rec,stackType:W.Passive,icons:e(\"REC\")},\"passive:2:crit\":{id:j[\"passive:2:crit\"],name:\"Passive Elemental Critical Hit Rate Boost\",stat:L.crit,stackType:W.Passive,icons:e(\"CRTRATE\")}}})()),(()=>{const e=e=>a=>{let t=\"\",s=\"UP\";a&&(a.value&&a.value<0&&(s=\"DOWN\"),a.conditions&&(t=a.conditions.targetUnitType||\"\")),\"string\"==typeof t&&t||(t=\"unknown\");let i=`BUFF_${t.toUpperCase()}${e}${s}`;return t&&i in M||(i=`BUFF_UNITTYPE${e}${s}`),[M[i]]};return{\"passive:3:hp\":{id:j[\"passive:3:hp\"],name:\"Passive Type-Based HP Boost\",stat:L.hp,stackType:W.Passive,icons:e(\"HP\")},\"passive:3:atk\":{id:j[\"passive:3:atk\"],name:\"Passive Type-Based Attack Boost\",stat:L.atk,stackType:W.Passive,icons:e(\"ATK\")},\"passive:3:def\":{id:j[\"passive:3:def\"],name:\"Passive Type-Based Defense Boost\",stat:L.def,stackType:W.Passive,icons:e(\"DEF\")},\"passive:3:rec\":{id:j[\"passive:3:rec\"],name:\"Passive Type-Based Recovery Boost\",stat:L.rec,stackType:W.Passive,icons:e(\"REC\")},\"passive:3:crit\":{id:j[\"passive:3:crit\"],name:\"Passive Type-Based Critical Hit Rate Boost\",stat:L.crit,stackType:W.Passive,icons:e(\"CRTRATE\")}}})()),{\"passive:4:poison\":{id:j[\"passive:4:poison\"],name:\"Passive Poison Resist\",stat:L.poisonResist,stackType:W.Passive,icons:()=>[M.BUFF_POISONBLK]},\"passive:4:weak\":{id:j[\"passive:4:weak\"],name:\"Passive Weak Resist\",stat:L.weakResist,stackType:W.Passive,icons:()=>[M.BUFF_WEAKBLK]},\"passive:4:sick\":{id:j[\"passive:4:sick\"],name:\"Passive Sick Resist\",stat:L.sickResist,stackType:W.Passive,icons:()=>[M.BUFF_SICKBLK]},\"passive:4:injury\":{id:j[\"passive:4:injury\"],name:\"Passive Injury Resist\",stat:L.injuryResist,stackType:W.Passive,icons:()=>[M.BUFF_INJURYBLK]},\"passive:4:curse\":{id:j[\"passive:4:curse\"],name:\"Passive Curse Resist\",stat:L.curseResist,stackType:W.Passive,icons:()=>[M.BUFF_CURSEBLK]},\"passive:4:paralysis\":{id:j[\"passive:4:paralysis\"],name:\"Passive Paralysis Resist\",stat:L.poisonResist,stackType:W.Passive,icons:()=>[M.BUFF_PARALYSISBLK]},\"passive:5:fire\":{id:j[\"passive:5:fire\"],name:\"Passive Fire Damage Reduction\",stat:L.fireMitigation,stackType:W.Passive,icons:()=>[M.BUFF_FIREDMGDOWN]},\"passive:5:water\":{id:j[\"passive:5:water\"],name:\"Passive Water Damage Reduction\",stat:L.waterMitigation,stackType:W.Passive,icons:()=>[M.BUFF_WATERDMGDOWN]},\"passive:5:earth\":{id:j[\"passive:5:earth\"],name:\"Passive Earth Damage Reduction\",stat:L.earthMitigation,stackType:W.Passive,icons:()=>[M.BUFF_EARTHDMGDOWN]},\"passive:5:thunder\":{id:j[\"passive:5:thunder\"],name:\"Passive Thunder Damage Reduction\",stat:L.thunderMitigation,stackType:W.Passive,icons:()=>[M.BUFF_THUNDERDMGDOWN]},\"passive:5:light\":{id:j[\"passive:5:light\"],name:\"Passive Light Damage Reduction\",stat:L.lightMitigation,stackType:W.Passive,icons:()=>[M.BUFF_LIGHTDMGDOWN]},\"passive:5:dark\":{id:j[\"passive:5:dark\"],name:\"Passive Dark Damage Reduction\",stat:L.darkMitigation,stackType:W.Passive,icons:()=>[M.BUFF_DARKDMGDOWN]},\"passive:5:unknown\":{id:j[\"passive:5:unknown\"],name:\"Passive Elemental Damage Reduction (Unspecified Element)\",stat:L.mitigation,stackType:W.Passive,icons:()=>[M.BUFF_ELEMENTDMGDOWN]},\"passive:8\":{id:j[\"passive:8\"],name:\"Passive Damage Reduction\",stat:L.mitigation,stackType:W.Passive,icons:()=>[M.BUFF_DAMAGECUT]},\"passive:9\":{id:j[\"passive:9\"],name:\"Passive Gradual BB Gauge Fill\",stat:L.bbGauge,stackType:W.Passive,icons:()=>[M.BUFF_BBREC]},\"passive:10\":{id:j[\"passive:10\"],name:\"Passive HC Efficacy\",stat:L.hcEfficacy,stackType:W.Passive,icons:()=>[M.BUFF_HCREC]},\"passive:11:atk\":{id:j[\"passive:11:atk\"],name:\"Passive HP-Conditional Attack Boost\",stat:L.atk,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHATKDOWN:M.BUFF_HPTHRESHATKUP]},\"passive:11:def\":{id:j[\"passive:11:def\"],name:\"Passive HP-Conditional Defense Boost\",stat:L.def,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHDEFDOWN:M.BUFF_HPTHRESHDEFUP]},\"passive:11:rec\":{id:j[\"passive:11:rec\"],name:\"Passive HP-Conditional Recovery Boost\",stat:L.rec,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHRECDOWN:M.BUFF_HPTHRESHRECUP]},\"passive:11:crit\":{id:j[\"passive:11:crit\"],name:\"Passive HP-Conditional Critical Hit Rate Boost\",stat:L.crit,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHCRTRATEDOWN:M.BUFF_HPTHRESHCRTRATEUP]},\"passive:12:bc\":{id:j[\"passive:12:bc\"],name:\"Passive HP-Conditional Battle Crystal Drop Rate Boost\",stat:L.bcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHBCDOWN:M.BUFF_HPTHRESHBCDROP]},\"passive:12:hc\":{id:j[\"passive:12:hc\"],name:\"Passive HP-Conditional Heart Crystal Drop Rate Boost\",stat:L.hcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHHCDOWN:M.BUFF_HPTHRESHHCDROP]},\"passive:12:item\":{id:j[\"passive:12:item\"],name:\"Passive HP-Conditional Item Drop Rate Boost\",stat:L.itemDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHITEMDOWN:M.BUFF_HPTHRESHITEMDROP]},\"passive:12:zel\":{id:j[\"passive:12:zel\"],name:\"Passive HP-Conditional Zel Drop Rate Boost\",stat:L.zelDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHZELDOWN:M.BUFF_HPTHRESHZELDROP]},\"passive:12:karma\":{id:j[\"passive:12:karma\"],name:\"Passive HP-Conditional Karma Drop Rate Boost\",stat:L.karmaDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHKARMADOWN:M.BUFF_HPTHRESHKARMADROP]},\"passive:13\":{id:j[\"passive:13\"],name:\"Passive BB Gauge Fill on Enemy Defeat\",stat:L.bbGauge,stackType:W.Passive,icons:()=>[M.BUFF_BBREC]},\"passive:14\":{id:j[\"passive:14\"],name:\"Passive Damage Reduction (Chance)\",stat:L.mitigation,stackType:W.Passive,icons:()=>[M.BUFF_DAMAGECUT]},\"passive:15\":{id:j[\"passive:15\"],name:\"Passive Heal on Enemy Defeat\",stat:L.hpRecovery,stackType:W.Passive,icons:()=>[M.BUFF_HPREC]},\"passive:16\":{id:j[\"passive:16\"],name:\"Passive Heal on Battle Win\",stat:L.hpRecovery,stackType:W.Passive,icons:()=>[M.BUFF_HPREC]},\"passive:17\":{id:j[\"passive:17\"],name:\"HP Absorption\",stat:L.hpRecovery,stackType:W.Passive,icons:()=>[M.BUFF_HPABS]},\"passive:19:bc\":{id:j[\"passive:19:bc\"],name:\"Passive Battle Crystal Drop Rate Boost\",stat:L.bcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_BCDOWN:M.BUFF_BCDROP]},\"passive:19:hc\":{id:j[\"passive:19:hc\"],name:\"Passive Heart Crystal Drop Rate Boost\",stat:L.hcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HCDOWN:M.BUFF_HCDROP]},\"passive:19:item\":{id:j[\"passive:19:item\"],name:\"Passive Item Drop Rate Boost\",stat:L.itemDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ITEMDOWN:M.BUFF_ITEMDROP]},\"passive:19:zel\":{id:j[\"passive:19:zel\"],name:\"Passive Zel Drop Rate Boost\",stat:L.zelDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ZELDOWN:M.BUFF_ZELDROP]},\"passive:19:karma\":{id:j[\"passive:19:karma\"],name:\"Passive Karma Drop Rate Boost\",stat:L.karmaDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_KARMADOWN:M.BUFF_KARMADROP]},\"passive:20:poison\":{id:j[\"passive:20:poison\"],name:\"Passive Poison Infliction\",stat:L.poisonInflict,stackType:W.Passive,icons:()=>[M.BUFF_ADDPOISON]},\"passive:20:weak\":{id:j[\"passive:20:weak\"],name:\"Passive Weak Infliction\",stat:L.weakInflict,stackType:W.Passive,icons:()=>[M.BUFF_ADDWEAK]},\"passive:20:sick\":{id:j[\"passive:20:sick\"],name:\"Passive Sick Infliction\",stat:L.sickInflict,stackType:W.Passive,icons:()=>[M.BUFF_ADDSICK]},\"passive:20:injury\":{id:j[\"passive:20:injury\"],name:\"Passive Injury Infliction\",stat:L.injuryInflict,stackType:W.Passive,icons:()=>[M.BUFF_ADDINJURY]},\"passive:20:curse\":{id:j[\"passive:20:curse\"],name:\"Passive Curse Infliction\",stat:L.curseInflict,stackType:W.Passive,icons:()=>[M.BUFF_ADDCURSE]},\"passive:20:paralysis\":{id:j[\"passive:20:paralysis\"],name:\"Passive Paralysis Infliction\",stat:L.poisonInflict,stackType:W.Passive,icons:()=>[M.BUFF_ADDPARA]},\"passive:20:atk down\":{id:j[\"passive:20:atk down\"],name:\"Passive Attack Reduction Infliction\",stat:L.atkDownInflict,stackType:W.Passive,icons:()=>[M.BUFF_ADDATKDOWN]},\"passive:20:def down\":{id:j[\"passive:20:def down\"],name:\"Passive Defense Reduction Infliction\",stat:L.defDownInflict,stackType:W.Passive,icons:()=>[M.BUFF_ADDDEFDOWN]},\"passive:20:rec down\":{id:j[\"passive:20:rec down\"],name:\"Passive Recovery Reduction Infliction\",stat:L.recDownInflict,stackType:W.Passive,icons:()=>[M.BUFF_ADDRECDOWN]},\"passive:20:unknown\":{id:j[\"passive:20:unknown\"],name:\"Passive Unknown Ailment Infliction\",stackType:W.Unknown,icons:()=>[M.BUFF_ADDAILMENT]},\"passive:21:atk\":{id:j[\"passive:21:atk\"],name:\"Attack Boost for X Turns\",stat:L.atk,stackType:W.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ATKDOWN:M.BUFF_ATKUP]},\"passive:21:def\":{id:j[\"passive:21:def\"],name:\"Defense Boost for X Turns\",stat:L.def,stackType:W.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?M.BUFF_DEFDOWN:M.BUFF_DEFUP]},\"passive:21:rec\":{id:j[\"passive:21:rec\"],name:\"Recovery Boost for X Turns\",stat:L.rec,stackType:W.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?M.BUFF_RECDOWN:M.BUFF_RECUP]},\"passive:21:crit\":{id:j[\"passive:21:crit\"],name:\"Critical Hit Rate Boost for X Turns\",stat:L.crit,stackType:W.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?M.BUFF_CRTRATEDOWN:M.BUFF_CRTRATEUP]},\"passive:23\":{id:j[\"passive:23\"],name:\"Passive BC Fill on Battle Win\",stat:L.bbGauge,stackType:W.Passive,icons:()=>[M.BUFF_BBREC]},\"passive:24\":{id:j[\"passive:24\"],name:\"Passive Heal when Attacked\",stat:L.hpRecovery,stackType:W.Passive,icons:()=>[M.BUFF_BEENATK_HPREC]},\"passive:25\":{id:j[\"passive:25\"],name:\"Passive BC Fill when Attacked\",stat:L.bbGauge,stackType:W.Passive,icons:()=>[M.BUFF_DAMAGEBB]},\"passive:26\":{id:j[\"passive:26\"],name:\"Passive Damage Counter\",stat:L.damageReflect,stackType:W.Passive,icons:()=>[M.BUFF_COUNTERDAMAGE]},\"passive:27\":{id:j[\"passive:27\"],name:\"Passive Target Chance Modification\",stat:L.targetingModification,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_REPENEATT:M.BUFF_GETENEATT]},\"passive:28\":{id:j[\"passive:28\"],name:\"Passive HP-Conditional Target Chance Modification\",stat:L.targetingModification,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHREPENEATT:M.BUFF_HPTHRESHGETENEATT]},\"passive:29\":{id:j[\"passive:29\"],name:\"Passive Defense Ignore (Chance)\",stat:L.defenseIgnore,stackType:W.Passive,icons:()=>[M.BUFF_IGNOREDEF]},\"passive:30:atk\":{id:j[\"passive:30:atk\"],name:\"Passive BB Gauge Conditional Attack Boost\",stat:L.atk,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_BBGAUGETHRESHATKDOWN:M.BUFF_BBGAUGETHRESHATKUP]},\"passive:30:def\":{id:j[\"passive:30:def\"],name:\"Passive BB Gauge Conditional Defense Boost\",stat:L.def,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_BBGAUGETHRESHDEFDOWN:M.BUFF_BBGAUGETHRESHDEFUP]},\"passive:30:rec\":{id:j[\"passive:30:rec\"],name:\"Passive BB Gauge Conditional Recovery Boost\",stat:L.rec,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_BBGAUGETHRESHRECDOWN:M.BUFF_BBGAUGETHRESHRECUP]},\"passive:30:crit\":{id:j[\"passive:30:crit\"],name:\"Passive BB Gauge Conditional Critical Hit Rate Boost\",stat:L.crit,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_BBGAUGETHRESHCRTRATEDOWN:M.BUFF_BBGAUGETHRESHCRTRATEUP]},\"passive:31:damage\":{id:j[\"passive:31:damage\"],name:\"Passive Spark Damage Boost\",stat:L.sparkDamage,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_SPARKDOWN:M.BUFF_SPARKUP]},\"passive:31:bc\":{id:j[\"passive:31:bc\"],name:\"Passive Battle Crystal Drop Rate Boost during Spark\",stat:L.bcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_BCDOWN:M.BUFF_SPARKBC]},\"passive:31:hc\":{id:j[\"passive:31:hc\"],name:\"Passive Heart Crystal Drop Rate Boost during Spark\",stat:L.hcDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HCDOWN:M.BUFF_SPARKHC]},\"passive:31:item\":{id:j[\"passive:31:item\"],name:\"Passive Item Drop Rate Boost during Spark\",stat:L.itemDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ITEMDOWN:M.BUFF_SPARKITEM]},\"passive:31:zel\":{id:j[\"passive:31:zel\"],name:\"Passive Zel Drop Rate Boost during Spark\",stat:L.zelDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ZELDOWN:M.BUFF_SPARKZEL]},\"passive:31:karma\":{id:j[\"passive:31:karma\"],name:\"Passive Karma Drop Rate Boost during Spark\",stat:L.karmaDropRate,stackType:W.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_KARMADOWN:M.BUFF_SPARKKARMA]},\"passive:32\":{id:j[\"passive:32\"],name:\"Passive BC Efficacy\",stat:L.bcEfficacy,stackType:W.Passive,icons:()=>[M.BUFF_BBFILL]},\"passive:33\":{id:j[\"passive:33\"],name:\"Passive Gradual Heal\",stat:L.hpRecovery,stackType:W.Passive,icons:()=>[M.BUFF_HPREC]},\"passive:34\":{id:j[\"passive:34\"],name:\"Passive Critical Damage Boost\",stat:L.criticalDamage,stackType:W.Passive,icons:()=>[M.BUFF_CRTUP]},\"passive:35\":{id:j[\"passive:35\"],name:\"Passive BB Gauge Fill when Normal Attacking\",stat:L.bbGauge,stackType:W.Passive,icons:()=>[M.BUFF_BBREC]},\"passive:36\":{id:j[\"passive:36\"],name:\"Passive Extra Action\",stat:L.extraAction,stackType:W.Passive,icons:()=>[M.BUFF_DBLSTRIKE]},\"passive:37\":{id:j[\"passive:37\"],name:\"Passive Hit Count Boost\",stat:L.hitCountModification,stackType:W.Passive,icons:()=>[M.BUFF_HITUP]},UNKNOWN_PROC_EFFECT_ID:{id:j.UNKNOWN_PROC_EFFECT_ID,name:\"Unknown Proc Effect\",stackType:W.Unknown,icons:()=>[M.UNKNOWN]},UNKNOWN_PROC_BUFF_PARAMS:{id:j.UNKNOWN_PROC_BUFF_PARAMS,name:\"Unknown Proc Buff Parameters\",stackType:W.Unknown,icons:()=>[M.UNKNOWN]},\"proc:1\":{id:j[\"proc:1\"],name:\"Regular Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===f.Single?M.ATK_ST:M.ATK_AOE]},\"proc:2\":{id:j[\"proc:2\"],name:\"Burst Heal\",stat:L.hpRecovery,stackType:W.Burst,icons:()=>[M.BUFF_HPREC]},\"proc:3\":{id:j[\"proc:3\"],name:\"Active Gradual Heal\",stat:L.hpRecovery,stackType:W.Active,icons:()=>[M.BUFF_HPREC]},\"proc:4:flat\":{id:j[\"proc:4:flat\"],name:\"Burst BB Gauge Fill (Flat Amount)\",stat:L.bbGauge,stackType:W.Burst,icons:()=>[M.BUFF_BBREC]},\"proc:4:percent\":{id:j[\"proc:4:percent\"],name:\"Burst BB Gauge Fill (Percentage)\",stat:L.bbGauge,stackType:W.Burst,icons:()=>[M.BUFF_BBREC]}}),(()=>{const e=e=>a=>{let t=\"\",s=!1,i=\"UP\";a&&(a.value&&a.value<0&&(i=\"DOWN\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0],s=!0)),\"string\"!=typeof t&&(t=\"\");let n=`BUFF_${t.toUpperCase()}${e}${i}`;return t&&n in M||(n=`BUFF_${s?\"ELEMENT\":\"\"}${e}${i}`),[M[n]]};return{\"proc:5:atk\":{id:j[\"proc:5:atk\"],name:\"Active Regular/Elemental Attack Boost\",stat:L.atk,stackType:W.Active,icons:e(\"ATK\")},\"proc:5:def\":{id:j[\"proc:5:def\"],name:\"Active Regular/Elemental Defense Boost\",stat:L.def,stackType:W.Active,icons:e(\"DEF\")},\"proc:5:rec\":{id:j[\"proc:5:rec\"],name:\"Active Regular/Elemental Recovery Boost\",stat:L.rec,stackType:W.Active,icons:e(\"REC\")},\"proc:5:crit\":{id:j[\"proc:5:crit\"],name:\"Active Regular/Elemental Critical Hit Rate Boost\",stat:L.crit,stackType:W.Active,icons:e(\"CRTRATE\")}}})()),{\"proc:6:bc\":{id:j[\"proc:6:bc\"],name:\"Active Battle Crystal Drop Rate Boost\",stat:L.bcDropRate,stackType:W.Active,icons:e=>[e&&e.value&&e.value<0?M.BUFF_BCDOWN:M.BUFF_BCDROP]},\"proc:6:hc\":{id:j[\"proc:6:hc\"],name:\"Active Heart Crystal Drop Rate Boost\",stat:L.hcDropRate,stackType:W.Active,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HCDOWN:M.BUFF_HCDROP]},\"proc:6:item\":{id:j[\"proc:6:item\"],name:\"Active Item Drop Rate Boost\",stat:L.itemDropRate,stackType:W.Active,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ITEMDOWN:M.BUFF_ITEMDROP]},\"proc:7\":{id:j[\"proc:7\"],name:\"Guaranteed KO Resistance\",stat:L.koResistance,stackType:W.Singleton,icons:()=>[M.BUFF_KOBLK]},\"proc:8:flat\":{id:j[\"proc:8:flat\"],name:\"Max HP Boost (Flat Amount)\",stat:L.hp,stackType:W.Singleton,icons:()=>[M.BUFF_HPUP]},\"proc:8:percent\":{id:j[\"proc:8:percent\"],name:\"Max HP Boost (Percentage)\",stat:L.hp,stackType:W.Singleton,icons:()=>[M.BUFF_HPUP]}}),(()=>{const e=e=>a=>{let t=\"\",s=!1,i=\"DOWN\";a&&(a.value&&a.value>0&&(i=\"UP\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0],s=!0)),\"string\"!=typeof t&&(t=\"\");let n=`BUFF_${t.toUpperCase()}${e}${i}`;return t&&n in M||(n=`BUFF_${s?\"ELEMENT\":\"\"}${e}${i}`),[M[n]]};return{\"proc:9:atk\":{id:j[\"proc:9:atk\"],name:\"Active Regular/Elemental Attack Reduction\",stat:L.atk,stackType:W.Active,icons:e(\"ATK\")},\"proc:9:def\":{id:j[\"proc:9:def\"],name:\"Active Regular/Elemental Defense Reduction\",stat:L.def,stackType:W.Active,icons:e(\"DEF\")},\"proc:9:rec\":{id:j[\"proc:9:rec\"],name:\"Active Regular/Elemental Recovery Reduction\",stat:L.rec,stackType:W.Active,icons:e(\"REC\")},\"proc:9:unknown\":{id:j[\"proc:9:unknown\"],name:\"Active Regular/Elemental Unknown Stat Reduction\",stackType:W.Active,icons:()=>[M.UNKNOWN]}}})()),{\"proc:10:poison\":{id:j[\"proc:10:poison\"],name:\"Poison Cleanse\",stat:L.poisonResist,stackType:W.Burst,icons:()=>[M.BUFF_POISONBLK]},\"proc:10:weak\":{id:j[\"proc:10:weak\"],name:\"Weak Cleanse\",stat:L.weakResist,stackType:W.Burst,icons:()=>[M.BUFF_WEAKBLK]},\"proc:10:sick\":{id:j[\"proc:10:sick\"],name:\"Sick Cleanse\",stat:L.sickResist,stackType:W.Burst,icons:()=>[M.BUFF_SICKBLK]},\"proc:10:injury\":{id:j[\"proc:10:injury\"],name:\"Injury Cleanse\",stat:L.injuryResist,stackType:W.Burst,icons:()=>[M.BUFF_INJURYBLK]},\"proc:10:curse\":{id:j[\"proc:10:curse\"],name:\"Curse Cleanse\",stat:L.curseResist,stackType:W.Burst,icons:()=>[M.BUFF_CURSEBLK]},\"proc:10:paralysis\":{id:j[\"proc:10:paralysis\"],name:\"Paralysis Cleanse\",stat:L.poisonResist,stackType:W.Burst,icons:()=>[M.BUFF_PARALYSISBLK]},\"proc:10:atk down\":{id:j[\"proc:10:atk down\"],name:\"Attack Reduction Cleanse\",stat:L.atkDownResist,stackType:W.Burst,icons:()=>[M.BUFF_ATKDOWNBLK]},\"proc:10:def down\":{id:j[\"proc:10:def down\"],name:\"Defense Reduction Cleanse\",stat:L.defDownResist,stackType:W.Burst,icons:()=>[M.BUFF_DEFDOWNBLK]},\"proc:10:rec down\":{id:j[\"proc:10:rec down\"],name:\"Recovery Reduction Cleanse\",stat:L.recDownResist,stackType:W.Burst,icons:()=>[M.BUFF_RECDOWNBLK]},\"proc:10:unknown\":{id:j[\"proc:10:unknown\"],name:\"Unknown Ailment Cleanse\",stackType:W.Unknown,icons:()=>[M.BUFF_AILMENTBLK]},\"proc:11:poison\":{id:j[\"proc:11:poison\"],name:\"Poison Infliction\",stat:L.poisonInflict,stackType:W.Burst,icons:()=>[M.DEBUFF_POISON]},\"proc:11:weak\":{id:j[\"proc:11:weak\"],name:\"Weak Infliction\",stat:L.weakInflict,stackType:W.Burst,icons:()=>[M.DEBUFF_WEAK]},\"proc:11:sick\":{id:j[\"proc:11:sick\"],name:\"Sick Infliction\",stat:L.sickInflict,stackType:W.Burst,icons:()=>[M.DEBUFF_SICK]},\"proc:11:injury\":{id:j[\"proc:11:injury\"],name:\"Injury Infliction\",stat:L.injuryInflict,stackType:W.Burst,icons:()=>[M.DEBUFF_INJURY]},\"proc:11:curse\":{id:j[\"proc:11:curse\"],name:\"Curse Infliction\",stat:L.curseInflict,stackType:W.Burst,icons:()=>[M.DEBUFF_CURSE]},\"proc:11:paralysis\":{id:j[\"proc:11:paralysis\"],name:\"Paralysis Infliction\",stat:L.poisonInflict,stackType:W.Burst,icons:()=>[M.DEBUFF_PARALYSIS]},\"proc:11:atk down\":{id:j[\"proc:11:atk down\"],name:\"Attack Reduction Infliction\",stat:L.atkDownInflict,stackType:W.Burst,icons:()=>[M.BUFF_ATKDOWN]},\"proc:11:def down\":{id:j[\"proc:11:def down\"],name:\"Defense Reduction Infliction\",stat:L.defDownInflict,stackType:W.Burst,icons:()=>[M.BUFF_DEFDOWN]},\"proc:11:rec down\":{id:j[\"proc:11:rec down\"],name:\"Recovery Reduction Infliction\",stat:L.recDownInflict,stackType:W.Burst,icons:()=>[M.BUFF_RECDOWN]},\"proc:11:unknown\":{id:j[\"proc:11:unknown\"],name:\"Unknown Ailment Infliction\",stackType:W.Unknown,icons:()=>[M.DEBUFF_AILMENT]},\"proc:12\":{id:j[\"proc:12\"],name:\"Instant Revive (Guaranteed)\",stackType:W.Burst,icons:()=>[M.BUFF_KOBLK]},\"proc:13\":{id:j[\"proc:13\"],name:\"Random Target Damage\",stackType:W.Attack,icons:()=>[M.ATK_RT]},\"proc:14\":{id:j[\"proc:14\"],name:\"Lifesteal Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===f.Single?M.ATK_ST_HPREC:M.ATK_AOE_HPREC]},\"proc:16:fire\":{id:j[\"proc:16:fire\"],name:\"Active Fire Damage Reduction\",stat:L.fireMitigation,stackType:W.Active,icons:()=>[M.BUFF_FIREDMGDOWN]},\"proc:16:water\":{id:j[\"proc:16:water\"],name:\"Active Water Damage Reduction\",stat:L.waterMitigation,stackType:W.Active,icons:()=>[M.BUFF_WATERDMGDOWN]},\"proc:16:earth\":{id:j[\"proc:16:earth\"],name:\"Active Earth Damage Reduction\",stat:L.earthMitigation,stackType:W.Active,icons:()=>[M.BUFF_EARTHDMGDOWN]},\"proc:16:thunder\":{id:j[\"proc:16:thunder\"],name:\"Active Thunder Damage Reduction\",stat:L.thunderMitigation,stackType:W.Active,icons:()=>[M.BUFF_THUNDERDMGDOWN]},\"proc:16:light\":{id:j[\"proc:16:light\"],name:\"Active Light Damage Reduction\",stat:L.lightMitigation,stackType:W.Active,icons:()=>[M.BUFF_LIGHTDMGDOWN]},\"proc:16:dark\":{id:j[\"proc:16:dark\"],name:\"Active Dark Damage Reduction\",stat:L.darkMitigation,stackType:W.Active,icons:()=>[M.BUFF_DARKDMGDOWN]},\"proc:16:all\":{id:j[\"proc:16:all\"],name:\"Active Elemental Damage Reduction (All Elements)\",stat:L.mitigation,stackType:W.Active,icons:()=>[M.BUFF_ELEMENTDMGDOWN]},\"proc:16:unknown\":{id:j[\"proc:16:unknown\"],name:\"Active Elemental Damage Reduction (Unspecified Element)\",stat:L.mitigation,stackType:W.Active,icons:()=>[M.BUFF_ELEMENTDMGDOWN]},\"proc:17:poison\":{id:j[\"proc:17:poison\"],name:\"Active Poison Resist\",stat:L.poisonResist,stackType:W.Active,icons:()=>[M.BUFF_POISONBLK]},\"proc:17:weak\":{id:j[\"proc:17:weak\"],name:\"Active Weak Resist\",stat:L.weakResist,stackType:W.Active,icons:()=>[M.BUFF_WEAKBLK]},\"proc:17:sick\":{id:j[\"proc:17:sick\"],name:\"Active Sick Resist\",stat:L.sickResist,stackType:W.Active,icons:()=>[M.BUFF_SICKBLK]},\"proc:17:injury\":{id:j[\"proc:17:injury\"],name:\"Active Injury Resist\",stat:L.injuryResist,stackType:W.Active,icons:()=>[M.BUFF_INJURYBLK]},\"proc:17:curse\":{id:j[\"proc:17:curse\"],name:\"Active Curse Resist\",stat:L.curseResist,stackType:W.Active,icons:()=>[M.BUFF_CURSEBLK]},\"proc:17:paralysis\":{id:j[\"proc:17:paralysis\"],name:\"Active Paralysis Resist\",stat:L.poisonResist,stackType:W.Active,icons:()=>[M.BUFF_PARALYSISBLK]},\"proc:18\":{id:j[\"proc:18\"],name:\"Active Damage Reduction\",stat:L.mitigation,stackType:W.Active,icons:()=>[M.BUFF_DAMAGECUT]},\"proc:19\":{id:j[\"proc:19\"],name:\"Active Gradual BB Gauge Fill\",stat:L.bbGauge,stackType:W.Active,icons:()=>[M.BUFF_BBREC]},\"proc:20\":{id:j[\"proc:20\"],name:\"Active BC Fill when attacked\",stat:L.bbGauge,stackType:W.Active,icons:()=>[M.BUFF_DAMAGEBB]},\"proc:22\":{id:j[\"proc:22\"],name:\"Active Defense Ignore\",stat:L.defenseIgnore,stackType:W.Active,icons:()=>[M.BUFF_IGNOREDEF]},\"proc:23\":{id:j[\"proc:23\"],name:\"Active Spark Damage Boost\",stat:L.sparkDamage,stackType:W.Active,icons:e=>[e&&e.value&&e.value<0?M.BUFF_SPARKDOWN:M.BUFF_SPARKUP]},\"proc:24:atk\":{id:j[\"proc:24:atk\"],name:\"Active Converted Attack Boost\",stat:L.atk,stackType:W.Active,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?M.BUFF_CONVERTATKDOWN:M.BUFF_CONVERTATKUP]},\"proc:24:def\":{id:j[\"proc:24:def\"],name:\"Active Converted Defense Boost\",stat:L.def,stackType:W.Active,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?M.BUFF_CONVERTDEFDOWN:M.BUFF_CONVERTDEFUP]},\"proc:24:rec\":{id:j[\"proc:24:rec\"],name:\"Active Converted Recovery Boost\",stat:L.rec,stackType:W.Active,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?M.BUFF_CONVERTRECDOWN:M.BUFF_CONVERTRECUP]},\"proc:26\":{id:j[\"proc:26\"],name:\"Active Hit Count Boost\",stat:L.hitCountModification,stackType:W.Active,icons:()=>[M.BUFF_HITUP]},\"proc:27\":{id:j[\"proc:27\"],name:\"Proportional Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===f.Single?M.ATK_ST_PROPORTIONAL:M.ATK_AOE_PROPORTIONAL]},\"proc:28\":{id:j[\"proc:28\"],name:\"Fixed Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===f.Single?M.ATK_ST_FIXED:M.ATK_AOE_FIXED]},\"proc:29\":{id:j[\"proc:29\"],name:\"Multi-Element Damage\",stackType:W.Attack,icons:e=>[e&&e.targetArea===f.Single?M.ATK_ST_MULTIELEMENT:M.ATK_AOE_MULTIELEMENT]},\"proc:30:fire\":{id:j[\"proc:30:fire\"],name:\"Active Added Element to Attack (Fire)\",stat:L.elementModification,stackType:W.Active,icons:()=>[M.BUFF_ADDFIRE]},\"proc:30:water\":{id:j[\"proc:30:water\"],name:\"Active Added Element to Attack (Water)\",stat:L.elementModification,stackType:W.Active,icons:()=>[M.BUFF_ADDWATER]},\"proc:30:earth\":{id:j[\"proc:30:earth\"],name:\"Active Added Element to Attack (Earth)\",stat:L.elementModification,stackType:W.Active,icons:()=>[M.BUFF_ADDEARTH]},\"proc:30:thunder\":{id:j[\"proc:30:thunder\"],name:\"Active Added Element to Attack (Thunder)\",stat:L.elementModification,stackType:W.Active,icons:()=>[M.BUFF_ADDTHUNDER]},\"proc:30:light\":{id:j[\"proc:30:light\"],name:\"Active Added Element to Attack (Light)\",stat:L.elementModification,stackType:W.Active,icons:()=>[M.BUFF_ADDLIGHT]},\"proc:30:dark\":{id:j[\"proc:30:dark\"],name:\"Active Added Element to Attack (Dark)\",stat:L.elementModification,stackType:W.Active,icons:()=>[M.BUFF_ADDDARK]},\"proc:30:unknown\":{id:j[\"proc:30:unknown\"],name:\"Active Added Element to Attack (Unspecified Element)\",stat:L.elementModification,stackType:W.Active,icons:()=>[M.BUFF_ADDELEMENT]},\"proc:31:flat\":{id:j[\"proc:31:flat\"],name:\"Burst BB Gauge Fill (Flat Amount)\",stat:L.bbGauge,stackType:W.Burst,icons:()=>[M.BUFF_BBREC]},\"proc:31:percent\":{id:j[\"proc:31:percent\"],name:\"Burst BB Gauge Fill (Percentage)\",stat:L.bbGauge,stackType:W.Burst,icons:()=>[M.BUFF_BBREC]},\"proc:32:fire\":{id:j[\"proc:32:fire\"],name:\"Element Shift (Fire)\",stat:L.elementModification,stackType:W.Singleton,icons:()=>[M.BUFF_SHIFTFIRE]},\"proc:32:water\":{id:j[\"proc:32:water\"],name:\"Element Shift (Water)\",stat:L.elementModification,stackType:W.Singleton,icons:()=>[M.BUFF_SHIFTWATER]},\"proc:32:earth\":{id:j[\"proc:32:earth\"],name:\"Element Shift (Earth)\",stat:L.elementModification,stackType:W.Singleton,icons:()=>[M.BUFF_SHIFTEARTH]},\"proc:32:thunder\":{id:j[\"proc:32:thunder\"],name:\"Element Shift (Thunder)\",stat:L.elementModification,stackType:W.Singleton,icons:()=>[M.BUFF_SHIFTTHUNDER]},\"proc:32:light\":{id:j[\"proc:32:light\"],name:\"Element Shift (Light)\",stat:L.elementModification,stackType:W.Singleton,icons:()=>[M.BUFF_SHIFTLIGHT]},\"proc:32:dark\":{id:j[\"proc:32:dark\"],name:\"Element Shift (Dark)\",stat:L.elementModification,stackType:W.Singleton,icons:()=>[M.BUFF_SHIFTDARK]},\"proc:32:unknown\":{id:j[\"proc:32:unknown\"],name:\"Element Shift (Unspecified Element)\",stat:L.elementModification,stackType:W.Singleton,icons:()=>[M.BUFF_SHIFTELEMENT]},\"proc:33\":{id:j[\"proc:33\"],name:\"Buff Removal\",stat:L.buffStabilityModification,stackType:W.Burst,icons:()=>[M.BUFF_REMOVEBUFF]},\"proc:34:flat\":{id:j[\"proc:34:flat\"],name:\"Burst BB Gauge Drain (Flat Amount)\",stat:L.bbGauge,stackType:W.Burst,icons:()=>[M.BUFF_BBFILLDOWN]},\"proc:34:percent\":{id:j[\"proc:34:percent\"],name:\"Burst BB Gauge Drain (Percentage)\",stat:L.bbGauge,stackType:W.Burst,icons:()=>[M.BUFF_BBFILLDOWN]},\"proc:36\":{id:j[\"proc:36\"],name:\"Active Leader Skill Lock\",stat:L.buffStabilityModification,stackType:W.Active,icons:()=>[M.BUFF_DISABLELS]}}));var te=Object.freeze({__proto__:null,convertProcEffectToBuffs:function(e,a){if(!e||\"object\"!=typeof e)throw new TypeError(\"effect parameter should be an object\");if(!a||\"object\"!=typeof a)throw new TypeError(\"context parameter should be an object\");const i=b(e)&&t(e),n=i&&Q(a.reloadMapping).get(i);return\"function\"==typeof n?n(e,a):function(e,a){const i=b(e)&&t(e)||s.Unknown;return[{id:j.UNKNOWN_PROC_EFFECT_ID,originalId:i,effectDelay:e[\"effect delay time(ms)/frame\"],targetType:e[\"target type\"],targetArea:e[\"target area\"],sources:x(a)}]}(e,a)},convertPassiveEffectToBuffs:function(e,a){if(!e||\"object\"!=typeof e)throw new TypeError(\"effect parameter should be an object\");if(!a||\"object\"!=typeof a)throw new TypeError(\"context parameter should be an object\");const s=C(e)&&t(e),n=s&&ee(a.reloadMapping).get(s);return\"function\"==typeof n?n(e,a):function(e,a){const s=C(e)&&t(e)||i.Unknown;return[{id:j.UNKNOWN_PASSIVE_EFFECT_ID,originalId:s,sources:x(a)}]}(e,a)},get BuffSource(){return K},get BuffStackType(){return W},BUFF_METADATA:ae,getMetadataForBuff:function(e,a=ae){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}}),se=Object.freeze({__proto__:null,constants:o,parsers:te,getMetadataForProc:F,getMetadataForPassive:h,isAttackingProcId:p,getNameForProc:O,getNameForPassive:H,isProcEffect:b,isPassiveEffect:C,combineEffectsAndDamageFrames:function(e,a){let t=[];return Array.isArray(e)&&e.length>0&&Array.isArray(a)&&e.length===a.length&&(t=e.map((e,t)=>{const s=a[t];return{delay:e[\"effect delay time(ms)/frame\"],effect:e,frames:s,id:\"\"+(e[\"proc id\"]||e[\"unknown proc id\"]),targetArea:e[\"random attack\"]?f.Random:e[\"target area\"],targetType:e[\"target type\"]}})),t},getEffectId:t,getEffectName:function(e,a={}){let s=\"\";const i=t(e);return C(e)?s=H(i,a&&a.passive):b(e)&&(s=O(i,a&&a.proc)),s},get ProcBuffType(){return n},PASSIVE_METADATA:c,PROC_METADATA:r});var ie=Object.freeze({__proto__:null,getEffectsForExtraSkill:function(e){return e&&Array.isArray(e.effects)?e.effects:[]}});var ne=Object.freeze({__proto__:null,getEffectsForItem:function(e){let a=[];if(e&&e.effect)if(Array.isArray(e.effect))a=e.effect;else if(Array.isArray(e.effect.effect)){const{effect:t,target_area:s,target_type:i}=e.effect;a=t.map(e=>{const a=Object.assign({},e);return a[\"target area\"]=s,a[\"target type\"]=i,a})}return a},getItemImageUrl:function(e,a){return`${e||\"\"}/item/${a||\"\"}`}});var oe=Object.freeze({__proto__:null,getEffectsForLeaderSkill:function(e){return e&&Array.isArray(e.effects)?e.effects:[]}});var ce=Object.freeze({__proto__:null,getUnitImageFileNames:function(e,a=\"\"){const t=`${e||\"\"}${a||\"\"}.png`;return{spritesheet:\"unit_anime_\"+t,battleAvatar:\"unit_ills_battle_\"+t,guideAvatar:\"unit_ills_thum_\"+t,fullIllustration:\"unit_ills_full_\"+t}},getUnitImageUrl:function(e,a){return`${e||\"\"}/unit/img/${a||\"\"}`}});const re=\"A\".charCodeAt(0),Fe=\"a\".charCodeAt(0),pe=\"0\".charCodeAt(0);function le(e){return\"string\"==typeof e&&e.split(\"@\")[1]||e}var ue=Object.freeze({__proto__:null,getEffectsForSpEnhancement:function(e){const a=[];if(e&&e.skill&&Array.isArray(e.skill.effects)){e.skill.effects.forEach(e=>{Object.keys(e).forEach(t=>{const s=e[t],i=Object.assign(Object.assign({},s),{sp_type:t});a.push(i)})})}return a},getSpCategoryName:function(e){let a;switch(+e){case 1:a=R[\"Parameter Boost\"];break;case 2:a=R.Spark;break;case 3:a=R[\"Critical Hits\"];break;case 4:a=R[\"Attack Boost\"];break;case 5:a=R[\"BB Gauge\"];break;case 6:a=R[\"HP Recovery\"];break;case 7:a=R.Drops;break;case 8:a=R[\"Ailment Resistance\"];break;case 9:a=R[\"Ailment Infliction\"];break;case 10:a=R[\"Damage Reduction\"];break;case 11:a=R.Special;break;default:a=R.Unknown}return a},spIndexToCode:function(e){let a=\"\",t=-1;return Number.isInteger(e)&&(e>=0&&e<=25?t=e+re:e>=26&&e<=51?t=e-26+Fe:e>=52&&e<=61&&(t=e-52+pe)),-1!==t&&(a=String.fromCharCode(t)),a},spCodeToIndex:function(e){let a=-1,t=-1;return e&&\"string\"==typeof e&&1===e.length&&(e>=\"A\"&&e<=\"Z\"?t=re:e>=\"a\"&&e<=\"z\"?t=Fe-26:e>=\"0\"&&e<=\"9\"&&(t=pe-52)),-1!==t&&(a=e.charCodeAt(0)-t),a},getSpEntryId:le,getSpEntryWithId:function(e,a){const t=le(e);return e&&Array.isArray(a)&&a.find(e=>le(e&&e.id)===t)||void 0},getAllDependenciesForSpEntry:function e(a,t,s=new Set){let i=[];if(a&&a.dependency&&Array.isArray(t)&&t.length>0){const n=le(a.dependency),o=t.find(e=>le(e&&e.id)===n);if(o&&!s.has(o)){s.add(o);const a=e(o,t,s);i=[o].concat(a)}}return i},getAllEntriesThatDependOnSpEntry:function e(a,t,s=new Set){let i=[];if(a&&a.id&&Array.isArray(t)&&t.length>0){const n=a.id;i=t.filter(e=>e.dependency&&e.dependency.includes(n)&&!s.has(e)),i.forEach(a=>{s.add(a);const n=e(a,t,s);i=i.concat(n)})}return i}});return e.buffs=se,e.bursts=k,e.datamineTypes=G,e.extraSkills=ie,e.items=ne,e.leaderSkills=oe,e.spEnhancements=ue,e.units=ce,e.version=\"0.7.0\",e}({});\n//# sourceMappingURL=index.browser.min.js.map\n","var bfmtUtilities = (function (exports) {\n    'use strict';\n\n    /**\n     * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get level entry from.\n     * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n     * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n     */\n    function getLevelEntryForBurst(burst, level) {\n        const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n        let levelIndex;\n        if (level !== null && !isNaN(level)) {\n            // 1-indexed\n            levelIndex = (+level - 1);\n        }\n        else {\n            // default to last entry in burst\n            levelIndex = burstEffectsByLevel.length - 1;\n        }\n        return burstEffectsByLevel[levelIndex];\n    }\n\n    /**\n     * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get effects from.\n     * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n     * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n     */\n    function getEffectsForBurst(burst, level) {\n        const levelEntry = getLevelEntryForBurst(burst, level);\n        return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n    }\n\n    /**\n     * @description Get the proc/passive ID of a given object.\n     * @param effect Object to get the effect ID from.\n     * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectId(effect) {\n        let resultId = '';\n        if (effect) {\n            resultId = effect['proc id'] || effect['unknown proc id'] ||\n                effect['passive id'] || effect['unknown passive id'] || '';\n        }\n        return resultId;\n    }\n\n    var KNOWN_PROC_ID;\n    (function (KNOWN_PROC_ID) {\n        KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n        KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    })(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\n    var KNOWN_PASSIVE_ID;\n    (function (KNOWN_PASSIVE_ID) {\n        KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n        KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    })(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n\n    var constants = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get KNOWN_PROC_ID () { return KNOWN_PROC_ID; },\n        get KNOWN_PASSIVE_ID () { return KNOWN_PASSIVE_ID; }\n    });\n\n    var ProcBuffType;\n    (function (ProcBuffType) {\n        ProcBuffType[\"Attack\"] = \"Attack\";\n    })(ProcBuffType || (ProcBuffType = {}));\n    /* eslint-disable */\n    /**\n     * @ignore\n     */\n    const PASSIVE_METADATA = Object.freeze({\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Parameter Boost\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Elemental Parameter Boost\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Type-Based Parameter Boost\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"Status Negation\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Damage Reduction\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Gradual BB Gauge Boost\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"HC Efficacy\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"HP-Conditional Parameter Boost\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"HP-Conditional Drop Rate Boost\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"BC Fill on Enemy Defeat\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Damage Reduction (Chance)\"\n        },\n        \"15\": {\n            \"ID\": \"15\",\n            \"Name\": \"Heal on Enemy Defeat\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Heal on Battle Victory\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"HP Absorption\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Drop Rate Boost\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"Status Infliction\"\n        },\n        \"21\": {\n            \"ID\": \"21\",\n            \"Name\": \"Parameter Boost for First X Turns\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"BC Fill on Battle Victory\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Heal when Attacked (Chance)\"\n        },\n        \"25\": {\n            \"ID\": \"25\",\n            \"Name\": \"BC Fill when Hit (Chance)\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Damage Counter (Chance)\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Increased Target Chance\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Decreased Target Chance\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Defense Ignore (Chance)\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"BB Conditional Parameter Boost\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"BC Efficacy\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Heal over Time\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"Critical Damage Boost\"\n        },\n        \"35\": {\n            \"ID\": \"35\",\n            \"Name\": \"BC Fill when Normal Attacking\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Extra Action\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Hit Count Boost\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Parameter Conversion\"\n        },\n        \"41\": {\n            \"ID\": \"41\",\n            \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"Gender Parameter Boost\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Damage Reduction to 1\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Flat Parameter Boost\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"Critical Damage Negation\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"BC Fill on Spark\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"BC Cost Reduction\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"BB Gauge Consumption Reduction\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Elemental Damage Boost\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Conditional Effect based on HP Threshold\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Damage Reduction when Guarding\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BC Fill when Attacked when Guarding\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BC Fill on Guard\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Elemental Damage Reduction for first X Turns\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"BB Atk Boost\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"BC Fill on Critical\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Add buff to Brave Burst\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"OD Gauge Fill Rate Boost\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"Status Counter\"\n        },\n        \"72\": {\n            \"ID\": \"72\",\n            \"Name\": \"Turn End Effects Activate at Turn Start\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\"\n        },\n        \"74\": {\n            \"ID\": \"74\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Spark Vulnerability\"\n        },\n        \"77\": {\n            \"ID\": \"77\",\n            \"Name\": \"Spark Damage Reduction\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Conditional Effect after Damage Received Threshold\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"BC Fill after Damage Received Threshold\"\n        },\n        \"80\": {\n            \"ID\": \"80\",\n            \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n        },\n        \"81\": {\n            \"ID\": \"81\",\n            \"Name\": \"BC Fill after Damage Dealt Threshold\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"Conditional Effect after BC Received Threshold\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"Conditional Effect after HC Received Threshold\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"BC Fill after HC Received Threshold\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"Conditional Effect after Spark Threshold\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Conditional Effect on Guard\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Conditional Effect on Critical\"\n        },\n        \"90\": {\n            \"ID\": \"90\",\n            \"Name\": \"Status Infliction on Critical\"\n        },\n        \"91\": {\n            \"ID\": \"91\",\n            \"Name\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Negate Defense Ignore\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Added Elements\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Normal Attacks Hit All Foes\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Player EXP Boost\"\n        },\n        \"99\": {\n            \"ID\": \"99\",\n            \"Name\": \"\"\n        },\n        \"100\": {\n            \"ID\": \"100\",\n            \"Name\": \"Spark Critical\"\n        },\n        \"101\": {\n            \"ID\": \"101\",\n            \"Name\": \"Heal on Spark\"\n        },\n        \"102\": {\n            \"ID\": \"102\",\n            \"Name\": \"Added Elements\"\n        },\n        \"103\": {\n            \"ID\": \"103\",\n            \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n        },\n        \"104\": {\n            \"ID\": \"104\",\n            \"Name\": \"Spark Boost when HP Passes Threshold\"\n        },\n        \"105\": {\n            \"ID\": \"105\",\n            \"Name\": \"Turn-Based Parameter Boost\"\n        },\n        \"106\": {\n            \"ID\": \"106\",\n            \"Name\": \"Conditional Effect after Activating Overdrive\"\n        },\n        \"107\": {\n            \"ID\": \"107\",\n            \"Name\": \"Add Effect to Leader Skill\"\n        },\n        \"109\": {\n            \"ID\": \"109\",\n            \"Name\": \"BB Gauge Reduction (Chance)\"\n        },\n        \"110\": {\n            \"ID\": \"110\",\n            \"Name\": \"BC Efficacy Reduction (Chance)\"\n        },\n        \"111\": {\n            \"ID\": \"111\",\n            \"Name\": \"Increase Brave Burst Activation Rate\"\n        },\n        \"112\": {\n            \"ID\": \"112\",\n            \"Name\": \"ABP/CBP Boost\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Conditional Effect after HP Threshold\"\n        },\n        \"114\": {\n            \"ID\": \"114\",\n            \"Name\": \"Inflict Buff when Attacked\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n        },\n        \"128\": {\n            \"ID\": \"128\",\n            \"Name\": \"Damage Reduction from Normal Attacks\"\n        },\n        \"143\": {\n            \"ID\": \"143\",\n            \"Name\": \"Break Atk Parameter Limit\"\n        },\n        \"10008\": {\n            \"ID\": \"10008\",\n            \"Name\": \"Damage Reduction from Specific Sources\"\n        },\n        \"11004\": {\n            \"ID\": \"11004\",\n            \"Name\": \"Elemental Spark Damage Boost\"\n        },\n        \"11005\": {\n            \"ID\": \"11005\",\n            \"Name\": \"Elemental Critical Damage Boost\"\n        },\n        \"11006\": {\n            \"ID\": \"11006\",\n            \"Name\": \"Summoner EXP Boost\"\n        },\n        \"11009\": {\n            \"ID\": \"11009\",\n            \"Name\": \"Effect Duration Boost\"\n        },\n        \"66,1\": {\n            \"ID\": \"66,1\",\n            \"Name\": \"\"\n        }\n    });\n    /**\n     * @ignore\n     */\n    const PROC_METADATA = Object.freeze({\n        \"0\": {\n            \"ID\": \"0\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Regular Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Burst Heal\",\n            \"Type\": \"\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Heal over Time\",\n            \"Type\": \"\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"BB Gauge Refill\",\n            \"Type\": \"\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"Drop Rate\",\n            \"Type\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Parameter Reduction\",\n            \"Type\": \"\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"Status Cleanse\",\n            \"Type\": \"\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"Status Infliction\",\n            \"Type\": \"\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"Revive (Guaranteed)\",\n            \"Type\": \"\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"Random Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Lifesteal Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"Status Negation\",\n            \"Type\": \"\"\n        },\n        \"18\": {\n            \"ID\": \"18\",\n            \"Name\": \"Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Gradual BB Gauge Boost\",\n            \"Type\": \"\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"BC Fill on Hit\",\n            \"Type\": \"\"\n        },\n        \"22\": {\n            \"ID\": \"22\",\n            \"Name\": \"Defense Ignore\",\n            \"Type\": \"\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Hit Count Boost\",\n            \"Type\": \"\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Fixed Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Multi-Element Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"Add Elements\",\n            \"Type\": \"\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Instant BB Gauge Fill\",\n            \"Type\": \"\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"Element Shift\",\n            \"Type\": \"\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Buff Removal (Chance)\",\n            \"Type\": \"\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"BB Gauge Reduction (Chance)\",\n            \"Type\": \"\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Leader Skill Lock (Chance)\",\n            \"Type\": \"\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Summon Unit\",\n            \"Type\": \"\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"Status Cure\",\n            \"Type\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Status Infliction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Instant OD Fill\",\n            \"Type\": \"\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Damage over Time (Additional Damage)\",\n            \"Type\": \"\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"BB Atk Boost\",\n            \"Type\": \"\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Non-Lethal Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"HP Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"Piercing Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"Retire\",\n            \"Type\": \"\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Damage Counter\",\n            \"Type\": \"\"\n        },\n        \"51\": {\n            \"ID\": \"51\",\n            \"Name\": \"Parameter Reduction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"BC Efficacy\",\n            \"Type\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Status Counter\",\n            \"Type\": \"\"\n        },\n        \"54\": {\n            \"ID\": \"54\",\n            \"Name\": \"Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Elemental Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"56\": {\n            \"ID\": \"56\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"57\": {\n            \"ID\": \"57\",\n            \"Name\": \"BC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Spark Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BB Atk Reduction\",\n            \"Type\": \"\"\n        },\n        \"60\": {\n            \"ID\": \"60\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BB-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Barrier\",\n            \"Type\": \"\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Selective Buff Wipe\",\n            \"Type\": \"\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"Consecutive Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\",\n            \"Type\": \"\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Revive (Chance)\",\n            \"Type\": \"\"\n        },\n        \"67\": {\n            \"ID\": \"67\",\n            \"Name\": \"BC Fill on Spark\",\n            \"Type\": \"\"\n        },\n        \"68\": {\n            \"ID\": \"68\",\n            \"Name\": \"Damage Reduction when Guarding\",\n            \"Type\": \"\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"BC Fill on Guard\",\n            \"Type\": \"\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"BB Gauge Fill Rate Debuff\",\n            \"Type\": \"\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\",\n            \"Type\": \"\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Element Squad-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"76\": {\n            \"ID\": \"76\",\n            \"Name\": \"Extra Action\",\n            \"Type\": \"\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Self Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"Player EXP Boost\",\n            \"Type\": \"\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"83\": {\n            \"ID\": \"83\",\n            \"Name\": \"Spark Critical\",\n            \"Type\": \"\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"OD Gauge Fill Rate\",\n            \"Type\": \"\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"Heal when Attacked\",\n            \"Type\": \"\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"HP Absorption\",\n            \"Type\": \"\"\n        },\n        \"87\": {\n            \"ID\": \"87\",\n            \"Name\": \"Heal on Spark\",\n            \"Type\": \"\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Self Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Self Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Self Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"94\": {\n            \"ID\": \"94\",\n            \"Name\": \"Normal Attacks Hit All Foes\",\n            \"Type\": \"\"\n        },\n        \"95\": {\n            \"ID\": \"95\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n            \"Type\": \"\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Element Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Gradual OD Fill\",\n            \"Type\": \"\"\n        },\n        \"119\": {\n            \"ID\": \"119\",\n            \"Name\": \"Gradual BC Drain\",\n            \"Type\": \"\"\n        },\n        \"123\": {\n            \"ID\": \"123\",\n            \"Name\": \"OD Gauge Reduction\",\n            \"Type\": \"\"\n        },\n        \"126\": {\n            \"ID\": \"126\",\n            \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n            \"Type\": \"\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Lock On\",\n            \"Type\": \"\"\n        },\n        \"130\": {\n            \"ID\": \"130\",\n            \"Name\": \"Parameter Reduction Counter\",\n            \"Type\": \"\"\n        },\n        \"131\": {\n            \"ID\": \"131\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"132\": {\n            \"ID\": \"132\",\n            \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"901\": {\n            \"ID\": \"901\",\n            \"Name\": \"Raid Heal (on Map)\",\n            \"Type\": \"\"\n        },\n        \"902\": {\n            \"ID\": \"902\",\n            \"Name\": \"Raid Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"903\": {\n            \"ID\": \"903\",\n            \"Name\": \"Raid Boss Reveal\",\n            \"Type\": \"\"\n        },\n        \"905\": {\n            \"ID\": \"905\",\n            \"Name\": \"Raid Teleport\",\n            \"Type\": \"\"\n        },\n        \"906\": {\n            \"ID\": \"906\",\n            \"Name\": \"Raid Flee\",\n            \"Type\": \"\"\n        },\n        \"907\": {\n            \"ID\": \"907\",\n            \"Name\": \"Raid Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"908\": {\n            \"ID\": \"908\",\n            \"Name\": \"Raid Item Drop Rate Boost\",\n            \"Type\": \"\"\n        },\n        \"10000\": {\n            \"ID\": \"10000\",\n            \"Name\": \"Taunt\",\n            \"Type\": \"\"\n        },\n        \"10001\": {\n            \"ID\": \"10001\",\n            \"Name\": \"Stealth\",\n            \"Type\": \"\"\n        },\n        \"10002\": {\n            \"ID\": \"10002\",\n            \"Name\": \"Shield (old)\",\n            \"Type\": \"\"\n        },\n        \"10003\": {\n            \"ID\": \"10003\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"10004\": {\n            \"ID\": \"10004\",\n            \"Name\": \"Damage Immunity\",\n            \"Type\": \"\"\n        },\n        \"10005\": {\n            \"ID\": \"10005\",\n            \"Name\": \"Turn Skip (short duration)\",\n            \"Type\": \"\"\n        },\n        \"10006\": {\n            \"ID\": \"10006\",\n            \"Name\": \"Turn Skip (long duration)\",\n            \"Type\": \"\"\n        },\n        \"10007\": {\n            \"ID\": \"10007\",\n            \"Name\": \"Evasion\",\n            \"Type\": \"\"\n        },\n        \"10009\": {\n            \"ID\": \"10009\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"10012\": {\n            \"ID\": \"10012\",\n            \"Name\": \"OD Drain\",\n            \"Type\": \"\"\n        },\n        \"10015\": {\n            \"ID\": \"10015\",\n            \"Name\": \"Elemental Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"10016\": {\n            \"ID\": \"10016\",\n            \"Name\": \"Element Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"10017\": {\n            \"ID\": \"10017\",\n            \"Name\": \"Elemental Shield\",\n            \"Type\": \"\"\n        },\n        \"10018\": {\n            \"ID\": \"10018\",\n            \"Name\": \"Max HP Reduction\",\n            \"Type\": \"\"\n        },\n        \"10019\": {\n            \"ID\": \"10019\",\n            \"Name\": \"Effect Purge\",\n            \"Type\": \"\"\n        },\n        \"10020\": {\n            \"ID\": \"10020\",\n            \"Name\": \"Piercing Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"10021\": {\n            \"ID\": \"10021\",\n            \"Name\": \"Active Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10022\": {\n            \"ID\": \"10022\",\n            \"Name\": \"Passive Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10023\": {\n            \"ID\": \"10023\",\n            \"Name\": \"HC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"10025\": {\n            \"ID\": \"10025\",\n            \"Name\": \"KO Resistance Negation\",\n            \"Type\": \"\"\n        },\n        \"10026\": {\n            \"ID\": \"10026\",\n            \"Name\": \"Doom\",\n            \"Type\": \"\"\n        },\n        \"11000\": {\n            \"ID\": \"11000\",\n            \"Name\": \"Negative HP-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"11001\": {\n            \"ID\": \"11001\",\n            \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n            \"Type\": \"\"\n        },\n        \"11002\": {\n            \"ID\": \"11002\",\n            \"Name\": \"HP Limit Break, Convert to HP\",\n            \"Type\": \"\"\n        },\n        \"11003\": {\n            \"ID\": \"11003\",\n            \"Name\": \"Effect Negation\",\n            \"Type\": \"\"\n        },\n        \"70001\": {\n            \"ID\": \"70001\",\n            \"Name\": \"Mana Bubble Shield\",\n            \"Type\": \"\"\n        },\n        \"70002\": {\n            \"ID\": \"70002\",\n            \"Name\": \"Recast\",\n            \"Type\": \"\"\n        },\n        \"2-5\": {\n            \"ID\": \"2-5\",\n            \"Name\": \"Burst Heal and DEF/REC Boost\",\n            \"Type\": \"\"\n        }\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given proc ID.\n     * @param id Proc ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForProc(id, metadata = PROC_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Determine if a given proc ID's type is an attack.\n     * @param id Proc ID to check.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n     */\n    function isAttackingProcId(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n    }\n\n    /**\n     * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n     * @param damageFrames Damage frames that each have their own proc ID.\n     * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Damage frames entry whose frames are based on the input damage frames.\n     */\n    function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n        // relevant frames are all effects for healing or attacking\n        const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n        const relevantFrames = inputFrames.filter(frame => {\n            const procId = getEffectId(frame);\n            return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n        });\n        const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n            const keepFirstFrame = index === 0;\n            const numFrames = frameEntry['frame times'].length;\n            const damageDistribution = frameEntry['hit dmg% distribution'];\n            const frameTimes = frameEntry['frame times'];\n            for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n                acc.push({\n                    damage: damageDistribution[frameIndex],\n                    time: frameTimes[frameIndex],\n                });\n            }\n            return acc;\n        }, []);\n        const resultDamageFramesEntry = {\n            'effect delay time(ms)/frame': effectDelay,\n            'frame times': [],\n            'hit dmg% distribution': [],\n            'hit dmg% distribution (total)': 0,\n            hits: 0,\n        };\n        unifiedFrames.sort((a, b) => a.time - b.time)\n            .forEach(({ time, damage }) => {\n            resultDamageFramesEntry['frame times'].push(time);\n            resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n            resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n        });\n        resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n        return resultDamageFramesEntry;\n    }\n\n    var index = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLevelEntryForBurst: getLevelEntryForBurst,\n        getEffectsForBurst: getEffectsForBurst,\n        getExtraAttackDamageFramesEntry: getExtraAttackDamageFramesEntry\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given passive ID.\n     * @param id Passive ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Get the associated name for a given proc ID.\n     * @param id Proc ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Name of the proc ID if it exists, empty string otherwise.\n     */\n    function getNameForProc(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Get the associated name for a given passive ID.\n     * @param id Passive ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Name of the passive ID if it exists, empty string otherwise.\n     */\n    function getNameForPassive(id, metadata) {\n        const metadataEntry = getMetadataForPassive(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Determine if a given effect object is a proc effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a proc effect based on its properties.\n     */\n    function isProcEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n    }\n\n    /**\n     * @description Determine if a given effect object is a passive effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a passive effect based on its properties.\n     */\n    function isPassiveEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n    }\n\n    var Ailment;\n    (function (Ailment) {\n        Ailment[\"Poison\"] = \"poison\";\n        Ailment[\"Weak\"] = \"weak\";\n        Ailment[\"Sick\"] = \"sick\";\n        Ailment[\"Injury\"] = \"injury\";\n        Ailment[\"Curse\"] = \"curse\";\n        Ailment[\"Paralysis\"] = \"paralysis\";\n        Ailment[\"AttackReduction\"] = \"atk down\";\n        Ailment[\"DefenseReduction\"] = \"def down\";\n        Ailment[\"RecoveryReduction\"] = \"rec down\";\n        Ailment[\"Unknown\"] = \"unknown\";\n    })(Ailment || (Ailment = {}));\n    var ArenaCondition;\n    (function (ArenaCondition) {\n        ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n        ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n        ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n        ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n        ArenaCondition[\"hp_min\"] = \"hp_min\";\n        ArenaCondition[\"hp_max\"] = \"hp_max\";\n        ArenaCondition[\"atk_max\"] = \"atk_max\";\n        ArenaCondition[\"random\"] = \"random\";\n    })(ArenaCondition || (ArenaCondition = {}));\n    var MoveType;\n    (function (MoveType) {\n        MoveType[\"Moving\"] = \"1\";\n        MoveType[\"Teleporting\"] = \"2\";\n        MoveType[\"NonMoving\"] = \"3\";\n    })(MoveType || (MoveType = {}));\n    var TargetArea;\n    (function (TargetArea) {\n        TargetArea[\"Aoe\"] = \"aoe\";\n        TargetArea[\"Single\"] = \"single\";\n        TargetArea[\"Random\"] = \"random\";\n    })(TargetArea || (TargetArea = {}));\n    var TargetAreaShorthand;\n    (function (TargetAreaShorthand) {\n        TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n        TargetAreaShorthand[\"Single\"] = \"ST\";\n        TargetAreaShorthand[\"Random\"] = \"RT\";\n    })(TargetAreaShorthand || (TargetAreaShorthand = {}));\n    var TargetType;\n    (function (TargetType) {\n        TargetType[\"Self\"] = \"self\";\n        TargetType[\"Party\"] = \"party\";\n        TargetType[\"Enemy\"] = \"enemy\";\n    })(TargetType || (TargetType = {}));\n    var SpPassiveType;\n    (function (SpPassiveType) {\n        SpPassiveType[\"AddPassive\"] = \"passive\";\n        SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n        SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n        SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n        SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n    })(SpPassiveType || (SpPassiveType = {}));\n    var SphereTypeName;\n    (function (SphereTypeName) {\n        SphereTypeName[\"None\"] = \"None\";\n        SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n        SphereTypeName[\"Critical\"] = \"Critical\";\n        SphereTypeName[\"Drop\"] = \"Drop\";\n        SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n        SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n        SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n        SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n        SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n        SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n        SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n        SphereTypeName[\"Spark\"] = \"Spark\";\n        SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n        SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n        SphereTypeName[\"Special\"] = \"Special\";\n    })(SphereTypeName || (SphereTypeName = {}));\n    var SphereTypeId;\n    (function (SphereTypeId) {\n        SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n        SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n        SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n        SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n        SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n        SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n        SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n        SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n        SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n        SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n        SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n        SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n        SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n        SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n        SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n    })(SphereTypeId || (SphereTypeId = {}));\n    var SpCategoryName;\n    (function (SpCategoryName) {\n        SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n        SpCategoryName[\"Spark\"] = \"Spark\";\n        SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n        SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n        SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n        SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n        SpCategoryName[\"Drops\"] = \"Drops\";\n        SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n        SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n        SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n        SpCategoryName[\"Special\"] = \"Special\";\n        SpCategoryName[\"Unknown\"] = \"Unknown\";\n    })(SpCategoryName || (SpCategoryName = {}));\n    var SpCategoryId;\n    (function (SpCategoryId) {\n        SpCategoryId[\"Parameter Boost\"] = \"1\";\n        SpCategoryId[\"Spark\"] = \"2\";\n        SpCategoryId[\"Critical Hits\"] = \"3\";\n        SpCategoryId[\"Attack Boost\"] = \"4\";\n        SpCategoryId[\"BB Gauge\"] = \"5\";\n        SpCategoryId[\"HP Recovery\"] = \"6\";\n        SpCategoryId[\"Drops\"] = \"7\";\n        SpCategoryId[\"Ailment Resistance\"] = \"8\";\n        SpCategoryId[\"Ailment Infliction\"] = \"9\";\n        SpCategoryId[\"Damage Reduction\"] = \"10\";\n        SpCategoryId[\"Special\"] = \"11\";\n    })(SpCategoryId || (SpCategoryId = {}));\n    var UnitAnimationKey;\n    (function (UnitAnimationKey) {\n        UnitAnimationKey[\"Attack\"] = \"attack\";\n        UnitAnimationKey[\"Idle\"] = \"idle\";\n        UnitAnimationKey[\"Move\"] = \"move\";\n    })(UnitAnimationKey || (UnitAnimationKey = {}));\n    var UnitElement;\n    (function (UnitElement) {\n        UnitElement[\"Fire\"] = \"fire\";\n        UnitElement[\"Water\"] = \"water\";\n        UnitElement[\"Earth\"] = \"earth\";\n        UnitElement[\"Thunder\"] = \"thunder\";\n        UnitElement[\"Light\"] = \"light\";\n        UnitElement[\"Dark\"] = \"dark\";\n    })(UnitElement || (UnitElement = {}));\n    var UnitGender;\n    (function (UnitGender) {\n        UnitGender[\"Male\"] = \"male\";\n        UnitGender[\"Female\"] = \"female\";\n        UnitGender[\"Other\"] = \"other\";\n    })(UnitGender || (UnitGender = {}));\n    var UnitGettingType;\n    (function (UnitGettingType) {\n        UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n        UnitGettingType[\"Farmable\"] = \"farmable\";\n        UnitGettingType[\"RareSummon\"] = \"rare summon\";\n        UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n    })(UnitGettingType || (UnitGettingType = {}));\n    var UnitKind;\n    (function (UnitKind) {\n        UnitKind[\"Normal\"] = \"normal\";\n        UnitKind[\"Evolution\"] = \"evo\";\n        UnitKind[\"Enhancing\"] = \"enhancing\";\n        UnitKind[\"Sale\"] = \"sale\";\n    })(UnitKind || (UnitKind = {}));\n    var UnitType;\n    (function (UnitType) {\n        UnitType[\"Lord\"] = \"lord\";\n        UnitType[\"Anima\"] = \"anima\";\n        UnitType[\"Breaker\"] = \"breaker\";\n        UnitType[\"Guardian\"] = \"guardian\";\n        UnitType[\"Oracle\"] = \"oracle\";\n        UnitType[\"Rex\"] = \"rex\";\n    })(UnitType || (UnitType = {}));\n    var ItemType;\n    (function (ItemType) {\n        ItemType[\"Consumable\"] = \"consumable\";\n        ItemType[\"Material\"] = \"material\";\n        ItemType[\"Sphere\"] = \"sphere\";\n        ItemType[\"EvolutionMaterial\"] = \"evomat\";\n        ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n        ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n    })(ItemType || (ItemType = {}));\n    var MimicUnitIds;\n    (function (MimicUnitIds) {\n        MimicUnitIds[\"Mimic\"] = \"60142\";\n        MimicUnitIds[\"BatMimic\"] = \"60143\";\n        MimicUnitIds[\"DragonMimic\"] = \"60144\";\n        MimicUnitIds[\"MetalMimic\"] = \"60224\";\n    })(MimicUnitIds || (MimicUnitIds = {}));\n    /**\n     * @description Known values for the monster groups used in {@link IMimicInfo}.\n     */\n    const MimicMonsterGroupMapping = {\n        '1000': MimicUnitIds.Mimic,\n        '1100': MimicUnitIds.BatMimic,\n        '1101': MimicUnitIds.BatMimic,\n        '1200': MimicUnitIds.DragonMimic,\n        '1300': MimicUnitIds.MetalMimic,\n    };\n\n    var datamineTypes = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get Ailment () { return Ailment; },\n        get ArenaCondition () { return ArenaCondition; },\n        get MoveType () { return MoveType; },\n        get TargetArea () { return TargetArea; },\n        get TargetAreaShorthand () { return TargetAreaShorthand; },\n        get TargetType () { return TargetType; },\n        get SpPassiveType () { return SpPassiveType; },\n        get SphereTypeName () { return SphereTypeName; },\n        get SphereTypeId () { return SphereTypeId; },\n        get SpCategoryName () { return SpCategoryName; },\n        get SpCategoryId () { return SpCategoryId; },\n        get UnitAnimationKey () { return UnitAnimationKey; },\n        get UnitElement () { return UnitElement; },\n        get UnitGender () { return UnitGender; },\n        get UnitGettingType () { return UnitGettingType; },\n        get UnitKind () { return UnitKind; },\n        get UnitType () { return UnitType; },\n        get ItemType () { return ItemType; },\n        get MimicUnitIds () { return MimicUnitIds; },\n        MimicMonsterGroupMapping: MimicMonsterGroupMapping\n    });\n\n    /**\n     * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n     * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n     * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n     * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n     */\n    function combineEffectsAndDamageFrames(effects, damageFrames) {\n        let combinedEntries = [];\n        if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n            combinedEntries = effects.map((effect, i) => {\n                const correspondingFrameEntry = damageFrames[i];\n                return {\n                    delay: effect['effect delay time(ms)/frame'],\n                    effect,\n                    frames: correspondingFrameEntry,\n                    id: `${effect['proc id'] || effect['unknown proc id']}`,\n                    targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                    targetType: effect['target type'],\n                };\n            });\n        }\n        return combinedEntries;\n    }\n\n    /**\n     * @description Get the name of a given object.\n     * @param effect Object to get the name from.\n     * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n     * @returns Name of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectName(effect, metadata = {}) {\n        let resultName = '';\n        const effectId = getEffectId(effect);\n        if (isPassiveEffect(effect)) {\n            resultName = getNameForPassive(effectId, metadata && metadata.passive);\n        }\n        else if (isProcEffect(effect)) {\n            resultName = getNameForProc(effectId, metadata && metadata.proc);\n        }\n        return resultName;\n    }\n\n    /**\n     * @description Provides info at a glance regarding a buff's source and how it stacks.\n     */\n    var BuffStackType;\n    (function (BuffStackType) {\n        /**\n         * @description The buff is activated via some skill and lasts for a number of turns.\n         * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n         * from different levels. Two possible levels of sources are:\n         * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n         * 2. Ultimate Brave Burst or Dual Brave Burst\n         */\n        BuffStackType[\"Active\"] = \"active\";\n        /**\n         * @description The buff is always active provided that the source is not nullified.\n         * Most passive buffs can stack with themselves.\n         */\n        BuffStackType[\"Passive\"] = \"passive\";\n        /**\n         * @description The buff is applied for a number of turns once a certain condition is met.\n         * Buffs of the same type are not able to stack.\n         */\n        BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n        /**\n         * @description Only one instance of the buff can be active at a time and can last indefinitely.\n         * A couple examples of this are Barrier and Max HP Boost.\n         */\n        BuffStackType[\"Singleton\"] = \"singleton\";\n        /**\n         * @description The buff's effects immediately apply to the target(s). This differs from singleton\n         * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n         * in the HP bar filling by the sum of those burst heals).\n         */\n        BuffStackType[\"Burst\"] = \"burst\";\n        /**\n         * @description A specific subset of `Burst` type buffs that deal damage to the target.\n         */\n        BuffStackType[\"Attack\"] = \"attack\";\n        /**\n         * @description Only for buffs that cannot be processed by the library yet.\n         */\n        BuffStackType[\"Unknown\"] = \"unknown\";\n    })(BuffStackType || (BuffStackType = {}));\n    var BuffSource;\n    (function (BuffSource) {\n        BuffSource[\"BraveBurst\"] = \"bb\";\n        BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n        BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n        BuffSource[\"DualBraveBurst\"] = \"dbb\";\n        BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n        BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n        BuffSource[\"SpEnhancement\"] = \"sp\";\n        BuffSource[\"Item\"] = \"item\";\n        BuffSource[\"LeaderSkill\"] = \"ls\";\n        BuffSource[\"ExtraSkill\"] = \"es\";\n        /**\n         * @description Buffs that result of having a number of OE+ units in the squad.\n         */\n        BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n        /**\n         * @description Buffs based on a units type. See {@link UnitType}.\n         */\n        BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n        /**\n         * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n         * as well as ambient turn reductions present in some late-game quests.\n         */\n        BuffSource[\"Quest\"] = \"quest\";\n    })(BuffSource || (BuffSource = {}));\n    /**\n     * @description Extra element values that can be used in addition to {@link UnitElement}.\n     */\n    var BuffConditionElement;\n    (function (BuffConditionElement) {\n        BuffConditionElement[\"Unknown\"] = \"unknown\";\n        BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n        BuffConditionElement[\"All\"] = \"all\";\n    })(BuffConditionElement || (BuffConditionElement = {}));\n    /**\n     * @description Stats on a unit that a buff can affect.\n     */\n    var UnitStat;\n    (function (UnitStat) {\n        UnitStat[\"hp\"] = \"hp\";\n        UnitStat[\"atk\"] = \"atk\";\n        UnitStat[\"def\"] = \"def\";\n        UnitStat[\"rec\"] = \"rec\";\n        UnitStat[\"crit\"] = \"crit\";\n        UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n        UnitStat[\"bbGauge\"] = \"bbGauge\";\n        UnitStat[\"odGauge\"] = \"odGauge\";\n        UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n        UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n        UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n        UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n        UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n        UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n        UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n        UnitStat[\"poisonResist\"] = \"poisonResist\";\n        UnitStat[\"weakResist\"] = \"weakResist\";\n        UnitStat[\"sickResist\"] = \"sickResist\";\n        UnitStat[\"injuryResist\"] = \"injuryResist\";\n        UnitStat[\"curseResist\"] = \"curseResist\";\n        UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n        UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n        UnitStat[\"weakInflict\"] = \"weakInflict\";\n        UnitStat[\"sickInflict\"] = \"sickInflict\";\n        UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n        UnitStat[\"curseInflict\"] = \"curseInflict\";\n        UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n        UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n        UnitStat[\"defDownResist\"] = \"defDownResist\";\n        UnitStat[\"recDownResist\"] = \"recDownResist\";\n        UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n        UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n        UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n        UnitStat[\"mitigation\"] = \"mitigation\";\n        UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n        UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n        UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n        UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n        UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n        UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n        UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n        UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n        UnitStat[\"koResistance\"] = \"koResistance\";\n        UnitStat[\"revive\"] = \"revive\";\n        UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n        UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n        UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n        UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n        UnitStat[\"damageReflect\"] = \"damageReflect\";\n        UnitStat[\"targetingModification\"] = \"targetingModification\";\n        UnitStat[\"elementModification\"] = \"elementModification\";\n        UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n        UnitStat[\"extraAction\"] = \"extraAction\";\n        UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n    })(UnitStat || (UnitStat = {}));\n    var IconId;\n    (function (IconId) {\n        IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n        IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n        IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n        IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n        IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n        IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n        IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n        IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n        IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n        IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n        IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n        IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n        IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n        IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n        IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n        IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n        IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n        IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n        IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n        IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n        IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n        IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n        IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n        IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n        IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n        IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n        IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n        IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n        IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n        IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n        IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n        IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n        IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n        IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n        IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n        IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n        IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n        IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n        IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n        IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n        IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n        IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n        IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n        IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n        IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n        IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n        IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n        IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n        IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n        IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n        IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n        IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n        IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n        IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n        IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n        IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n        IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n        IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n        IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n        IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n        IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n        IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n        IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n        IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n        IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n        IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n        IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n        IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n        IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n        IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n        IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n        IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n        IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n        IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n        IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n        IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n        IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n        IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n        IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n        IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n        IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n        IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n        IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n        IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n        IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n        IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n        IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n        IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n        IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n        IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n        IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n        IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n        IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n        IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n        IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n        IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n        IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n        IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n        IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n        IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n        IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n        IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n        IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n        IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n        IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n        IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n        IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n        IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n        IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n        IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n        IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n        IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n        IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n        IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n        IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n        IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n        IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n        IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n        IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n        IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n        IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n        IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n        IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n        IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n        IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n        IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n        IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n        IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n        IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n        IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n        IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n        IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n        IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n        IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n        IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n        IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n        IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n        IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n        IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n        IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n        IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n        IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n        IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n        IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n        IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n        IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n        IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n        IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n        IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n        IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n        IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n        IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n        IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n        IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n        IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n        IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n        IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n        IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n        IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n        IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n        IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n        IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n        IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n        IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n        IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n        IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n        IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n        IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n        IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n        IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n        IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n        IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n        IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n        IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n        IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n        IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n        IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n        IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n        IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n        IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n        IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n        IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n        IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n        IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n        IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n        IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n        IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n        IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n        IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n        IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n        IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n        IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n        IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n        IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n        IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n        IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n        IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n        IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n        IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n        IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n        IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n        IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n        IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n        IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n        IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n        IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n        IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n        IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n        IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n        IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n        IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n        IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n        IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n        IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n        IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n        IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n        IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n        IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n        IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n        IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n        IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n        IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n        IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n        IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n        IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n        IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n        IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n        IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n        IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n        IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n        IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n        IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n        IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n        IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n        IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n        IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n        IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n        IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n        IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n        IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n        IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n        IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n        IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n        IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n        IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n        IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n        IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n        IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n        IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n        IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n        IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n        IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n        IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n        IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n        IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n        IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n        IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n        IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n        IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n        IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n        IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n        IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n        IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n        IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n        IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n        IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n        IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n        IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n        IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n        IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n        IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n        IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n        IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n        IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n        IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n        IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n        IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n        IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n        IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n        IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n        IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n        IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n        IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n        IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n        IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n        IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n        IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n        IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n        IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n        IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n        IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n        IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n        IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n        IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n        IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n        IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n        IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n        IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n        IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n        IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n        IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n        IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n        IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n        IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n        IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n        IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n        IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n        IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n        IconId[\"ATK_ST\"] = \"ATK_ST\";\n        IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n        IconId[\"ATK_RT\"] = \"ATK_RT\";\n        IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n        IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n        IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n        IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n        IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n        IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n        IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n        IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n        IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n    })(IconId || (IconId = {}));\n    /**\n     * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n     * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n     * source of a given buff.\n     */\n    var BuffId;\n    (function (BuffId) {\n        BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n        BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n        BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n        BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n        BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n        BuffId[\"passive:1:def\"] = \"passive:1:def\";\n        BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n        BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n        BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n        BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n        BuffId[\"passive:2:def\"] = \"passive:2:def\";\n        BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n        BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n        BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n        BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n        BuffId[\"passive:3:def\"] = \"passive:3:def\";\n        BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n        BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n        BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n        BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n        BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n        BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n        BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n        BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n        BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n        BuffId[\"passive:5:water\"] = \"passive:5:water\";\n        BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n        BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n        BuffId[\"passive:5:light\"] = \"passive:5:light\";\n        BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n        BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n        BuffId[\"passive:8\"] = \"passive:8\";\n        BuffId[\"passive:9\"] = \"passive:9\";\n        BuffId[\"passive:10\"] = \"passive:10\";\n        BuffId[\"passive:11:atk\"] = \"passive:11:atk\";\n        BuffId[\"passive:11:def\"] = \"passive:11:def\";\n        BuffId[\"passive:11:rec\"] = \"passive:11:rec\";\n        BuffId[\"passive:11:crit\"] = \"passive:11:crit\";\n        BuffId[\"passive:12:bc\"] = \"passive:12:bc\";\n        BuffId[\"passive:12:hc\"] = \"passive:12:hc\";\n        BuffId[\"passive:12:item\"] = \"passive:12:item\";\n        BuffId[\"passive:12:zel\"] = \"passive:12:zel\";\n        BuffId[\"passive:12:karma\"] = \"passive:12:karma\";\n        BuffId[\"passive:13\"] = \"passive:13\";\n        BuffId[\"passive:14\"] = \"passive:14\";\n        BuffId[\"passive:15\"] = \"passive:15\";\n        BuffId[\"passive:16\"] = \"passive:16\";\n        BuffId[\"passive:17\"] = \"passive:17\";\n        BuffId[\"passive:19:bc\"] = \"passive:19:bc\";\n        BuffId[\"passive:19:hc\"] = \"passive:19:hc\";\n        BuffId[\"passive:19:item\"] = \"passive:19:item\";\n        BuffId[\"passive:19:zel\"] = \"passive:19:zel\";\n        BuffId[\"passive:19:karma\"] = \"passive:19:karma\";\n        BuffId[\"passive:20:poison\"] = \"passive:20:poison\";\n        BuffId[\"passive:20:weak\"] = \"passive:20:weak\";\n        BuffId[\"passive:20:sick\"] = \"passive:20:sick\";\n        BuffId[\"passive:20:injury\"] = \"passive:20:injury\";\n        BuffId[\"passive:20:curse\"] = \"passive:20:curse\";\n        BuffId[\"passive:20:paralysis\"] = \"passive:20:paralysis\";\n        BuffId[\"passive:20:atk down\"] = \"passive:20:atk down\";\n        BuffId[\"passive:20:def down\"] = \"passive:20:def down\";\n        BuffId[\"passive:20:rec down\"] = \"passive:20:rec down\";\n        BuffId[\"passive:20:unknown\"] = \"passive:20:unknown\";\n        BuffId[\"passive:21:atk\"] = \"passive:21:atk\";\n        BuffId[\"passive:21:def\"] = \"passive:21:def\";\n        BuffId[\"passive:21:rec\"] = \"passive:21:rec\";\n        BuffId[\"passive:21:crit\"] = \"passive:21:crit\";\n        BuffId[\"passive:23\"] = \"passive:23\";\n        BuffId[\"passive:24\"] = \"passive:24\";\n        BuffId[\"passive:25\"] = \"passive:25\";\n        BuffId[\"passive:26\"] = \"passive:26\";\n        BuffId[\"passive:27\"] = \"passive:27\";\n        BuffId[\"passive:28\"] = \"passive:28\";\n        BuffId[\"passive:29\"] = \"passive:29\";\n        BuffId[\"passive:30:atk\"] = \"passive:30:atk\";\n        BuffId[\"passive:30:def\"] = \"passive:30:def\";\n        BuffId[\"passive:30:rec\"] = \"passive:30:rec\";\n        BuffId[\"passive:30:crit\"] = \"passive:30:crit\";\n        BuffId[\"passive:31:damage\"] = \"passive:31:damage\";\n        BuffId[\"passive:31:bc\"] = \"passive:31:bc\";\n        BuffId[\"passive:31:hc\"] = \"passive:31:hc\";\n        BuffId[\"passive:31:item\"] = \"passive:31:item\";\n        BuffId[\"passive:31:zel\"] = \"passive:31:zel\";\n        BuffId[\"passive:31:karma\"] = \"passive:31:karma\";\n        BuffId[\"passive:32\"] = \"passive:32\";\n        BuffId[\"passive:33\"] = \"passive:33\";\n        BuffId[\"passive:34\"] = \"passive:34\";\n        BuffId[\"passive:35\"] = \"passive:35\";\n        BuffId[\"passive:36\"] = \"passive:36\";\n        BuffId[\"passive:37\"] = \"passive:37\";\n        BuffId[\"passive:40:atk\"] = \"passive:40:atk\";\n        BuffId[\"passive:40:def\"] = \"passive:40:def\";\n        BuffId[\"passive:40:rec\"] = \"passive:40:rec\";\n        BuffId[\"passive:41:hp\"] = \"passive:41:hp\";\n        BuffId[\"passive:41:atk\"] = \"passive:41:atk\";\n        BuffId[\"passive:41:def\"] = \"passive:41:def\";\n        BuffId[\"passive:41:rec\"] = \"passive:41:rec\";\n        BuffId[\"passive:41:crit\"] = \"passive:41:crit\";\n        BuffId[\"passive:42:hp\"] = \"passive:42:hp\";\n        BuffId[\"passive:42:atk\"] = \"passive:42:atk\";\n        BuffId[\"passive:42:def\"] = \"passive:42:def\";\n        BuffId[\"passive:42:rec\"] = \"passive:42:rec\";\n        BuffId[\"passive:42:crit\"] = \"passive:42:crit\";\n        BuffId[\"passive:43\"] = \"passive:43\";\n        BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n        BuffId[\"proc:1\"] = \"proc:1\";\n        BuffId[\"proc:2\"] = \"proc:2\";\n        BuffId[\"proc:3\"] = \"proc:3\";\n        BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n        BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n        BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n        BuffId[\"proc:5:def\"] = \"proc:5:def\";\n        BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n        BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n        BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n        BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n        BuffId[\"proc:6:item\"] = \"proc:6:item\";\n        BuffId[\"proc:7\"] = \"proc:7\";\n        BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n        BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n        BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n        BuffId[\"proc:9:def\"] = \"proc:9:def\";\n        BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n        BuffId[\"proc:9:unknown\"] = \"proc:9:unknown\";\n        BuffId[\"proc:10:poison\"] = \"proc:10:poison\";\n        BuffId[\"proc:10:weak\"] = \"proc:10:weak\";\n        BuffId[\"proc:10:sick\"] = \"proc:10:sick\";\n        BuffId[\"proc:10:injury\"] = \"proc:10:injury\";\n        BuffId[\"proc:10:curse\"] = \"proc:10:curse\";\n        BuffId[\"proc:10:paralysis\"] = \"proc:10:paralysis\";\n        BuffId[\"proc:10:atk down\"] = \"proc:10:atk down\";\n        BuffId[\"proc:10:def down\"] = \"proc:10:def down\";\n        BuffId[\"proc:10:rec down\"] = \"proc:10:rec down\";\n        BuffId[\"proc:10:unknown\"] = \"proc:10:unknown\";\n        BuffId[\"proc:11:poison\"] = \"proc:11:poison\";\n        BuffId[\"proc:11:weak\"] = \"proc:11:weak\";\n        BuffId[\"proc:11:sick\"] = \"proc:11:sick\";\n        BuffId[\"proc:11:injury\"] = \"proc:11:injury\";\n        BuffId[\"proc:11:curse\"] = \"proc:11:curse\";\n        BuffId[\"proc:11:paralysis\"] = \"proc:11:paralysis\";\n        BuffId[\"proc:11:atk down\"] = \"proc:11:atk down\";\n        BuffId[\"proc:11:def down\"] = \"proc:11:def down\";\n        BuffId[\"proc:11:rec down\"] = \"proc:11:rec down\";\n        BuffId[\"proc:11:unknown\"] = \"proc:11:unknown\";\n        BuffId[\"proc:12\"] = \"proc:12\";\n        BuffId[\"proc:13\"] = \"proc:13\";\n        BuffId[\"proc:14\"] = \"proc:14\";\n        BuffId[\"proc:16:fire\"] = \"proc:16:fire\";\n        BuffId[\"proc:16:water\"] = \"proc:16:water\";\n        BuffId[\"proc:16:earth\"] = \"proc:16:earth\";\n        BuffId[\"proc:16:thunder\"] = \"proc:16:thunder\";\n        BuffId[\"proc:16:light\"] = \"proc:16:light\";\n        BuffId[\"proc:16:dark\"] = \"proc:16:dark\";\n        BuffId[\"proc:16:all\"] = \"proc:16:all\";\n        BuffId[\"proc:16:unknown\"] = \"proc:16:unknown\";\n        BuffId[\"proc:17:poison\"] = \"proc:17:poison\";\n        BuffId[\"proc:17:weak\"] = \"proc:17:weak\";\n        BuffId[\"proc:17:sick\"] = \"proc:17:sick\";\n        BuffId[\"proc:17:injury\"] = \"proc:17:injury\";\n        BuffId[\"proc:17:curse\"] = \"proc:17:curse\";\n        BuffId[\"proc:17:paralysis\"] = \"proc:17:paralysis\";\n        BuffId[\"proc:18\"] = \"proc:18\";\n        BuffId[\"proc:19\"] = \"proc:19\";\n        BuffId[\"proc:20\"] = \"proc:20\";\n        BuffId[\"proc:22\"] = \"proc:22\";\n        BuffId[\"proc:23\"] = \"proc:23\";\n        BuffId[\"proc:24:atk\"] = \"proc:24:atk\";\n        BuffId[\"proc:24:def\"] = \"proc:24:def\";\n        BuffId[\"proc:24:rec\"] = \"proc:24:rec\";\n        BuffId[\"proc:26\"] = \"proc:26\";\n        BuffId[\"proc:27\"] = \"proc:27\";\n        BuffId[\"proc:28\"] = \"proc:28\";\n        BuffId[\"proc:29\"] = \"proc:29\";\n        BuffId[\"proc:30:fire\"] = \"proc:30:fire\";\n        BuffId[\"proc:30:water\"] = \"proc:30:water\";\n        BuffId[\"proc:30:earth\"] = \"proc:30:earth\";\n        BuffId[\"proc:30:thunder\"] = \"proc:30:thunder\";\n        BuffId[\"proc:30:light\"] = \"proc:30:light\";\n        BuffId[\"proc:30:dark\"] = \"proc:30:dark\";\n        BuffId[\"proc:30:unknown\"] = \"proc:30:unknown\";\n        BuffId[\"proc:31:flat\"] = \"proc:31:flat\";\n        BuffId[\"proc:31:percent\"] = \"proc:31:percent\";\n        BuffId[\"proc:32:fire\"] = \"proc:32:fire\";\n        BuffId[\"proc:32:water\"] = \"proc:32:water\";\n        BuffId[\"proc:32:earth\"] = \"proc:32:earth\";\n        BuffId[\"proc:32:thunder\"] = \"proc:32:thunder\";\n        BuffId[\"proc:32:light\"] = \"proc:32:light\";\n        BuffId[\"proc:32:dark\"] = \"proc:32:dark\";\n        BuffId[\"proc:32:unknown\"] = \"proc:32:unknown\";\n        BuffId[\"proc:33\"] = \"proc:33\";\n        BuffId[\"proc:34:flat\"] = \"proc:34:flat\";\n        BuffId[\"proc:34:percent\"] = \"proc:34:percent\";\n        BuffId[\"proc:36\"] = \"proc:36\";\n        BuffId[\"proc:37\"] = \"proc:37\";\n        BuffId[\"proc:38:poison\"] = \"proc:38:poison\";\n        BuffId[\"proc:38:weak\"] = \"proc:38:weak\";\n        BuffId[\"proc:38:sick\"] = \"proc:38:sick\";\n        BuffId[\"proc:38:injury\"] = \"proc:38:injury\";\n        BuffId[\"proc:38:curse\"] = \"proc:38:curse\";\n        BuffId[\"proc:38:paralysis\"] = \"proc:38:paralysis\";\n        BuffId[\"proc:38:atk down\"] = \"proc:38:atk down\";\n        BuffId[\"proc:38:def down\"] = \"proc:38:def down\";\n        BuffId[\"proc:38:rec down\"] = \"proc:38:rec down\";\n        BuffId[\"proc:38:unknown\"] = \"proc:38:unknown\";\n        BuffId[\"proc:39:fire\"] = \"proc:39:fire\";\n        BuffId[\"proc:39:water\"] = \"proc:39:water\";\n        BuffId[\"proc:39:earth\"] = \"proc:39:earth\";\n        BuffId[\"proc:39:thunder\"] = \"proc:39:thunder\";\n        BuffId[\"proc:39:light\"] = \"proc:39:light\";\n        BuffId[\"proc:39:dark\"] = \"proc:39:dark\";\n        BuffId[\"proc:39:unknown\"] = \"proc:39:unknown\";\n        BuffId[\"proc:40:poison\"] = \"proc:40:poison\";\n        BuffId[\"proc:40:weak\"] = \"proc:40:weak\";\n        BuffId[\"proc:40:sick\"] = \"proc:40:sick\";\n        BuffId[\"proc:40:injury\"] = \"proc:40:injury\";\n        BuffId[\"proc:40:curse\"] = \"proc:40:curse\";\n        BuffId[\"proc:40:paralysis\"] = \"proc:40:paralysis\";\n        BuffId[\"proc:40:atk down\"] = \"proc:40:atk down\";\n        BuffId[\"proc:40:def down\"] = \"proc:40:def down\";\n        BuffId[\"proc:40:rec down\"] = \"proc:40:rec down\";\n        BuffId[\"proc:40:unknown\"] = \"proc:40:unknown\";\n        BuffId[\"proc:42\"] = \"proc:42\";\n        BuffId[\"proc:43\"] = \"proc:43\";\n        BuffId[\"proc:44\"] = \"proc:44\";\n    })(BuffId || (BuffId = {}));\n\n    /**\n     * @description Helper function for creating an entry to be used in the `sources`\n     * property of {@link IBuff}.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourceEntryFromContext(context) {\n        return `${context.source}-${context.sourceId}`;\n    }\n    /**\n     * @description Helper function for creating an entries array to be used in the `sources`\n     * property of {@link IBuff}. It handles setting the order of the sources.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourcesFromContext(context) {\n        const resultArray = Array.isArray(context.previousSources)\n            ? context.previousSources.slice()\n            : [];\n        // Ensure that the current source is at the beginning of the array\n        resultArray.unshift(createSourceEntryFromContext(context));\n        return resultArray;\n    }\n    /**\n     * @description Given the conditions in an extra skill effect, normalize them into\n     * a simpler object containing the IDs of each condition type.\n     * @param effect Extra skill effect to process conditions from.\n     * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n     */\n    function processExtraSkillConditions(effect) {\n        const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n        const aggregate = {\n            units: new Set(),\n            items: new Set(),\n            sphereTypes: new Set(),\n            unknowns: new Set(),\n        };\n        conditions.forEach((condition, index) => {\n            if ('sphere category required (raw)' in condition) {\n                aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n            }\n            else if ('item required' in condition) {\n                condition['item required'].forEach((item) => {\n                    aggregate.items.add(item);\n                });\n            }\n            else if ('unit required' in condition) {\n                condition['unit required'].forEach((unit) => {\n                    aggregate.units.add(`${unit.id}`);\n                });\n            }\n            else {\n                aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n            }\n        });\n        // filter out properties that have no entries\n        const result = Object.entries(aggregate)\n            .filter((entry) => entry[1].size > 0)\n            .reduce((acc, entry) => {\n            acc[entry[0]] = Array.from(entry[1]);\n            return acc;\n        }, {});\n        return result;\n    }\n    /**\n     * @description Extract the target type and target area of a given passive effect.\n     * @param effect Passive effect to extract target data from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns The target data for the given effect and context. There are only two possible values:\n     * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n     */\n    function getPassiveTargetData(effect, context) {\n        const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n            (effect.sp_type === SpPassiveType.EnhancePassive);\n        const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n        return {\n            targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n            targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n        };\n    }\n    /**\n     * @description Extract the target type and target area of a given proc effect.\n     * @param effect Proc effect to extract target data from.\n     * @returns The target data for the given effect and context.\n     */\n    function getProcTargetData(effect) {\n        return {\n            targetArea: effect['target area'],\n            targetType: effect['target type'],\n        };\n    }\n    /**\n     * @description Try to parse the given value into a number or return a value if it is not a number.\n     * @param value Value to parse into a number.\n     * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n     * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n     */\n    function parseNumberOrDefault(value, defaultValue = 0) {\n        return (value !== null && !isNaN(value)) ? +value : defaultValue;\n    }\n    /**\n     * @description Create an object denoting values that cannot be processed yet. To be used\n     * in the `value` property of `IBuff` as needed.\n     * @param params Array of values that cannot be processed yet.\n     * @param startIndex The first index before which we know how to process an effect's values.\n     * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n     */\n    function createUnknownParamsValue(params = [], startIndex = 0) {\n        let hasValue = false;\n        const result = params\n            .reduce((acc, value, index) => {\n            if (value && value !== '0') {\n                acc[`param_${startIndex + index}`] = value;\n                hasValue = true;\n            }\n            return acc;\n        }, {});\n        return hasValue ? result : (void 0);\n    }\n    /**\n     * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n     * @param source Source value to check.\n     * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n     * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n     * bonded super brave burst, or bonded dual brave burst.\n     */\n    function buffSourceIsBurstType(source) {\n        return !!source && [\n            BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n            BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n        ].includes(source);\n    }\n\n    let mapping;\n    /**\n     * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of proc IDs to functions.\n     */\n    function getProcEffectToBuffMapping(reload) {\n        if (!mapping || reload) {\n            mapping = new Map();\n            setMapping(mapping);\n        }\n        return mapping;\n    }\n    /**\n     * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping(map) {\n        const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const effectDelay = effect['effect delay time(ms)/frame'];\n            return { targetData, sources, effectDelay };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n            effectDelay,\n            sources, value: unknownParams }, targetData));\n        const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n            sources, value: {\n                buffs,\n                duration: duration,\n            } }, targetData));\n        const createNoParamsEntry = ({ originalId, sources, }) => ({\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        });\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n        };\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        /**\n         * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n         * checked if all other known values in the effect are 0.\n         * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n         * @param turnDuration Parsed turn duration value to check.\n         * @param injectionContext Object whose main use is for injecting methods in testing.\n         * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n         */\n        const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n            let result = turnDuration !== 0;\n            if (result) {\n                result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n            }\n            return result;\n        };\n        /**\n         * @description Helper function to get attack information common across most attacks from the conversion context.\n         * @param context Given context that may contain attack information like damage frames.\n         * @returns Extracted attack information from the context (with defaults where applicable).\n         */\n        const getAttackInformationFromContext = (context) => {\n            const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n            const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n            return {\n                hits,\n                distribution,\n            };\n        };\n        const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                value = parseParamValue(rawValue);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect[effectValueKey]);\n                turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [buffId],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:1', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'healerRec%': 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                let recX, recY;\n                let extraParams;\n                [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n                params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['heal low'];\n                params.healHigh = effect['heal high'];\n                params['healerRec%'] = effect['rec added% (from healer)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const results = [];\n            if (params.healHigh !== 0 || params.healLow !== 0) {\n                results.push(Object.assign({ id: 'proc:2', originalId,\n                    sources,\n                    effectDelay, value: params }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'targetRec%': 0,\n                turnDuration: '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let rec;\n                let extraParams;\n                [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['gradual heal low'];\n                params.healHigh = effect['gradual heal high'];\n                params['targetRec%'] = effect['rec added% (from target)'];\n                params.turnDuration = effect['gradual heal turns (8)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n            const results = [];\n            if (hasAnyHealValues) {\n                results.push(Object.assign({ id: 'proc:3', originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: {\n                        healLow: params.healLow,\n                        healHigh: params.healHigh,\n                        'targetRec%': params['targetRec%'],\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:3'],\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('bb bc fill' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill']);\n                }\n                if ('bb bc fill%' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n                }\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                element: BuffConditionElement.All,\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        params[statType] = parseNumberOrDefault(effect[effectKey]);\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData);\n                        if (params.element !== BuffConditionElement.All) {\n                            buffEntry.conditions = {\n                                targetElements: [params.element],\n                            };\n                        }\n                        results.push(buffEntry);\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('6', (effect, context, injectionContext) => {\n            const originalId = '6';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                turnDuration: '0',\n            };\n            const dropRateProperties = ['bc', 'hc', 'item'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.bc = effect['bc drop rate% buff (10)'];\n                params.hc = effect['hc drop rate% buff (9)'];\n                params.item = effect['item drop rate% buff (11)'];\n                params.turnDuration = effect['drop buff rate turns'];\n            }\n            dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n            const results = [];\n            if (hasAnyRates) {\n                dropRateProperties.forEach((key) => {\n                    const value = params[key];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:6:${key}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('7', (effect, context, injectionContext) => {\n            const originalId = '7';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHpPercent = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:7', originalId,\n                    sources,\n                    effectDelay, value: recoveredHpPercent }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const originalId = '8';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatHpBoost = 0;\n            let percentHpBoost = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n                flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n                percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('max hp increase' in effect) {\n                    flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n                }\n                if ('max hp% increase' in effect) {\n                    percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n                }\n            }\n            const results = [];\n            if (flatHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:flat', originalId,\n                    sources,\n                    effectDelay, value: flatHpBoost }, targetData));\n            }\n            if (percentHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:percent', originalId,\n                    sources,\n                    effectDelay, value: percentHpBoost }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            const originalId = '9';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const STAT_TYPE_MAPPING = {\n                0: 'atk',\n                1: 'def',\n                2: 'rec',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const params = {\n                element: BuffConditionElement.All,\n                statReductionEntries: [],\n                turnDuration: 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n                [\n                    [statType1, value1, procChance1],\n                    [statType2, value2, procChance2],\n                ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                    const statType = parseNumberOrDefault(rawStatType) - 1;\n                    const value = parseNumberOrDefault(rawValue);\n                    const chance = parseNumberOrDefault(rawProcChance);\n                    if (statType === 3) { // all stats\n                        params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                            stat,\n                            value,\n                            chance,\n                        })));\n                    }\n                    else {\n                        params.statReductionEntries.push({\n                            stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                            value,\n                            chance,\n                        });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                ['buff #1', 'buff #2'].forEach((buffKey) => {\n                    const entry = effect[buffKey];\n                    if (entry) {\n                        const chance = parseNumberOrDefault(entry['proc chance%']);\n                        const keys = Object.keys(entry);\n                        coreStatProperties.forEach((statType) => {\n                            const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                            if (effectKey) {\n                                params.statReductionEntries.push({\n                                    stat: statType,\n                                    value: parseNumberOrDefault(entry[effectKey]),\n                                    chance,\n                                });\n                            }\n                        });\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            let hasAnyValues = false;\n            params.statReductionEntries.forEach(({ stat, value, chance }) => {\n                if (value !== 0 || chance !== 0) {\n                    hasAnyValues = true;\n                    const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n            if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            const originalId = '10';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 8);\n                const extraParams = splitParams.slice(8);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    if (`remove ${ailment}` in effect) { // mainly for items\n                        curedAilments.push(ailment);\n                    }\n                });\n                if ('remove all status ailments' in effect) {\n                    curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                let params = splitEffectParams(effect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:${ailment}`, originalId,\n                sources,\n                effectDelay, value: chance }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let reviveToHp = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n                reviveToHp = parseNumberOrDefault(rawReviveToHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:12', originalId,\n                    sources,\n                    effectDelay, value: reviveToHp }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const originalId = '13';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hits = 0;\n            const { distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawHits;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n                hits = parseNumberOrDefault(rawHits);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                hits = parseNumberOrDefault(effect.hits);\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push({\n                    id: 'proc:13',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }),\n                    targetType: targetData.targetType,\n                    targetArea: TargetArea.Random,\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n                'drainLow%': '0',\n                'drainHigh%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n                params['drainLow%'] = effect['hp drain% low'];\n                params['drainHigh%'] = effect['hp drain% high'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:14', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let mitigation = 0;\n            let element;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                mitigation = parseNumberOrDefault(rawMitigation);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n                element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n                if (mitigationKey) {\n                    mitigation = parseNumberOrDefault(effect[mitigationKey]);\n                }\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (mitigation !== 0) {\n                results.push(Object.assign({ id: `proc:16:${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            const originalId = '17';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        resistances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:17:${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:17:${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('18', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'dmg% reduction',\n                effectTurnDurationKey: 'dmg% reduction turns (36)',\n                buffId: 'proc:18',\n                originalId: '18',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'increase bb gauge gradual',\n                effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'proc:19',\n                originalId: '19',\n            });\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const originalId = '20';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let fillLow = 0;\n            let fillHigh = 0;\n            let chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFillLow, rawFillHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(effect['bc fill when attacked low']);\n                fillHigh = parseNumberOrDefault(effect['bc fill when attacked high']);\n                chance = parseNumberOrDefault(effect['bc fill when attacked%']);\n                turnDuration = parseNumberOrDefault(effect['bc fill when attacked turns (38)']);\n            }\n            const hasAnyFillValues = fillLow !== 0 || fillHigh !== 0;\n            const results = [];\n            if (hasAnyFillValues) {\n                results.push(Object.assign({ id: 'proc:20', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, conditions: {\n                        whenAttacked: true,\n                    }, value: {\n                        fillLow,\n                        fillHigh,\n                        chance,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:20'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('22', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'defense% ignore',\n                effectTurnDurationKey: 'defense% ignore turns (39)',\n                buffId: 'proc:22',\n                originalId: '22',\n            });\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                value = parseNumberOrDefault(params[0]);\n                turnDuration = parseNumberOrDefault(params[6]);\n                const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'proc:23', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:23'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            const originalId = '24';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let turnDuration = 0;\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawConvertedStat, rawTurnDuration;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                const rawConvertedStat = effect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        stats[statType] = effect[effectKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['% converted turns']);\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:24:${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: {\n                            convertedStat,\n                            value,\n                        } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:24:${statKey}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            const originalId = '26';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n                turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'proc:26', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:26'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            const originalId = '27';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'hpDamageLow%': '0',\n                'hpDamageHigh%': '0',\n                'hpDamageChance%': '0',\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else {\n                params['hpDamageLow%'] = effect['hp% damage low'];\n                params['hpDamageHigh%'] = effect['hp% damage high'];\n                params['hpDamageChance%'] = effect['hp% damage chance%'];\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:27', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            let value = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                value = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['fixed damage']);\n            }\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || value !== 0) {\n                const entry = Object.assign({ id: 'proc:28', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (value !== 0) {\n                    entry.value.value = value;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            const originalId = '29';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let attackElements = [];\n            let unknownParams;\n            if (effect.params) {\n                let element1, element2, element3;\n                let extraParams;\n                [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                [element1, element2, element3].forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                    unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n                });\n            }\n            else {\n                if (Array.isArray(effect['bb elements'])) {\n                    attackElements = effect['bb elements'].slice();\n                }\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n                const entry = Object.assign({ id: 'proc:29', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData);\n                if (attackElements.length > 0) {\n                    entry.value.elements = attackElements;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let elements = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                elements = params\n                    .slice(0, 6)\n                    .filter((p) => p !== '0')\n                    .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n                turnDuration = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                if ('elements added' in effect) {\n                    if (Array.isArray(effect['elements added'])) {\n                        elements = effect['elements added'];\n                    }\n                    else {\n                        elements = [BuffConditionElement.Unknown];\n                    }\n                }\n                turnDuration = parseNumberOrDefault(effect['elements added turns']);\n            }\n            const results = [];\n            const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n            if (elements.length > 0) {\n                elements.forEach((inputElement) => {\n                    const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                    results.push(Object.assign({ id: `proc:30:${sanitizedElement}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration }, targetData));\n                });\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('increase bb gauge' in effect) {\n                    flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n                }\n                // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n                // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            const originalId = '32';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let element;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, ...extraParams] = splitEffectParams(effect);\n                if (rawElement && rawElement !== '0') {\n                    element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                const effectElement = effect['set attack element attribute'];\n                if (effectElement) {\n                    const sanitizedElement = Object.values(ELEMENT_MAPPING).find((e) => effectElement === e);\n                    if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                        element = sanitizedElement;\n                    }\n                    else {\n                        element = BuffConditionElement.Unknown;\n                    }\n                }\n            }\n            const results = [];\n            if (element) {\n                results.push(Object.assign({ id: `proc:32:${element}`, originalId,\n                    sources,\n                    effectDelay, value: true }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                chance = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(effect['clear buff chance%']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:33', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            const originalId = '34';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatDrainLow = 0, flatDrainHigh = 0;\n            let percentDrainLow = 0, percentDrainHigh = 0;\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n                flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n                flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n                percentDrainLow = parseNumberOrDefault(rawPercentLow);\n                percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n                flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n                percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n                percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n                chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n            }\n            const results = [];\n            if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:flat', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: flatDrainLow,\n                        drainHigh: flatDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:percent', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: percentDrainLow,\n                        drainHigh: percentDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'invalidate LS chance%',\n                effectTurnDurationKey: 'invalidate LS turns (60)',\n                buffId: 'proc:36',\n                originalId: '36',\n            });\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n            const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectParams({ params: rawParams });\n            const positionX = parseNumberOrDefault(rawPositionX);\n            const positionY = parseNumberOrDefault(rawPositionY);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const results = [];\n            if (summonGroup || summonId) {\n                results.push(Object.assign({ id: 'proc:37', originalId,\n                    sources,\n                    effectDelay, value: {\n                        summonGroup,\n                        summonId,\n                        positionX,\n                        positionY,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('38', (effect, context, injectionContext) => {\n            const originalId = '38';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 9);\n                const extraParams = splitParams.slice(9);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else if (Array.isArray(effect['ailments cured'])) {\n                const effectAilmentsCured = effect['ailments cured'];\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                    if (effectAilmentsCured.includes(effectKey)) {\n                        curedAilments.push(ailment);\n                    }\n                });\n                if (effectAilmentsCured.length > curedAilments.length) {\n                    const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                    for (let i = 0; i < unknownAilmentCount; ++i) {\n                        curedAilments.push(Ailment.Unknown);\n                    }\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('39', (effect, context, injectionContext) => {\n            const originalId = '39';\n            const ELEMENT_MAPPING = {\n                1: UnitElement.Fire,\n                2: UnitElement.Water,\n                3: UnitElement.Earth,\n                4: UnitElement.Thunder,\n                5: UnitElement.Light,\n                6: UnitElement.Dark,\n            };\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const elements = [];\n            let mitigation = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                const rawElementsMitigated = params.slice(0, 6);\n                mitigation = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                rawElementsMitigated.forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        elements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                Object.values(ELEMENT_MAPPING).forEach((element) => {\n                    if (effect[`mitigate ${element} attacks`]) {\n                        elements.push(element);\n                    }\n                });\n                mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n                turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n            }\n            const results = [];\n            if (elements.length > 0) {\n                elements.forEach((element) => {\n                    results.push(Object.assign({ id: `proc:39:${element}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: mitigation }, targetData));\n                });\n            }\n            else if (mitigation !== 0) {\n                results.push(Object.assign({ id: 'proc:39:unknown', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                for (let index = 0; index < 8; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n                turnDuration = parseNumberOrDefault(params[8]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken% buff';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = `${ailment} buff`;\n                    }\n                    else {\n                        effectKey = `${ailment}% buff`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:${ailment}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: chance }, targetData)));\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    duration: turnDuration,\n                    buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:${a}`),\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n            const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectParams({ params: rawParams });\n            const params = {\n                'atkLow%': rawModLow,\n                'atkHigh%': rawModHigh,\n                flatAtk: rawFlatAtk,\n            };\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:42', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            const originalId = '43';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let overdriveFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n                overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n            }\n            const results = [];\n            if (overdriveFill !== 0) {\n                results.push(Object.assign({ id: 'proc:43', originalId,\n                    sources,\n                    effectDelay, value: overdriveFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const damageParams = {\n                'atk%': '0',\n                flatAtk: '0',\n                'dmg%': '0',\n            };\n            let affectsElement = false, unitIndex = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n                [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n                unitIndex = parseNumberOrDefault(rawUnitIndex);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                damageParams['atk%'] = effect['dot atk%'];\n                damageParams.flatAtk = effect['dot flat atk'];\n                damageParams['dmg%'] = effect['dot dmg%'];\n                affectsElement = !!(effect['dot element affected']);\n                unitIndex = parseNumberOrDefault(effect['dot unit index']);\n                turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n            }\n            const filteredDamageParams = Object.entries(damageParams)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (Object.keys(filteredDamageParams).length > 0) {\n                results.push(Object.assign({ id: 'proc:44', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                        unitIndex }) }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:44'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given proc effect.\n     */\n    function defaultConversionFunction(effect, context) {\n        const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n                originalId: id,\n                effectDelay: effect['effect delay time(ms)/frame'],\n                targetType: effect['target type'],\n                targetArea: effect['target area'],\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given proc effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Proc effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given proc effect object.\n     */\n    function convertProcEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isProcEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction(effect, context);\n    }\n\n    let mapping$1;\n    /**\n     * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of passive IDs to functions.\n     */\n    function getPassiveEffectToBuffMapping(reload) {\n        if (!mapping$1 || reload) {\n            mapping$1 = new Map();\n            setMapping$1(mapping$1);\n        }\n        return mapping$1;\n    }\n    /**\n     * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$1(map) {\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n            X: BuffConditionElement.OmniParadigm,\n        };\n        const TYPE_MAPPING = {\n            1: UnitType.Lord,\n            2: UnitType.Anima,\n            3: UnitType.Breaker,\n            4: UnitType.Guardian,\n            5: UnitType.Oracle,\n            6: UnitType.Rex,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n        const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n        const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n            const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            return { conditionInfo, targetData, sources };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n            sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n        const createNoParamsEntry = ({ originalId, sources, }) => ({\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        });\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n        };\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        let ThresholdType;\n        (function (ThresholdType) {\n            ThresholdType[\"Hp\"] = \"hp\";\n            ThresholdType[\"Bb\"] = \"bb gauge\";\n        })(ThresholdType || (ThresholdType = {}));\n        const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n            return {\n                threshold: parseNumberOrDefault(rawThreshold),\n                requireAbove: rawRequireAboveFlag === '1',\n                type: thresholdType,\n            };\n        };\n        const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n            let threshold = 0, requireAbove = false;\n            if (`${thresholdType} above % ${suffix}` in effect) {\n                threshold = parseNumberOrDefault(effect[`${thresholdType} above % ${suffix}`]);\n                requireAbove = true;\n            }\n            else {\n                threshold = parseNumberOrDefault(effect[`${thresholdType} below % ${suffix}`]);\n                requireAbove = false;\n            }\n            return { threshold, requireAbove, type: thresholdType };\n        };\n        const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n            let conditions;\n            if (type === ThresholdType.Hp) {\n                if (requireAbove) {\n                    conditions = { hpGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { hpLessThanOrEqualTo: threshold };\n                }\n            }\n            else if (type === ThresholdType.Bb) {\n                if (requireAbove) {\n                    conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { bbGaugeLessThanOrEqualTo: threshold };\n                }\n            }\n            return conditions;\n        };\n        const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let value = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseParamValue(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect[effectKey]);\n            }\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let valueLow, valueHigh, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                valueLow = parseParamValue(rawLowValue);\n                valueHigh = parseParamValue(rawHighValue);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n                valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n                chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n            }\n            const results = [];\n            if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources, value: {\n                        [buffKeyLow]: valueLow,\n                        [buffKeyHigh]: valueHigh,\n                        chance,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                elements: [],\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let element1, element2;\n                [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                [element1, element2].forEach((elementValue) => {\n                    if (elementValue && elementValue !== '0') {\n                        stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                if (Array.isArray(typedEffect['elements buffed'])) {\n                    stats.elements = typedEffect['elements buffed'];\n                }\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId,\n                sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n            if (stats.elements.length > 0) {\n                stats.elements.forEach((element) => {\n                    STATS_ORDER.forEach((stat) => {\n                        const value = parseNumberOrDefault(stats[stat]);\n                        if (value !== 0) {\n                            results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                        }\n                    });\n                });\n            }\n            else {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                    }\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                unitType: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let unitType;\n                [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                if (unitType && unitType !== '0') {\n                    stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.unitType = typedEffect['unit type buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetUnitType = stats.unitType || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:3:${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:4:${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let element;\n            let mitigation = '0';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n                if (element !== BuffConditionElement.Unknown) {\n                    mitigation = typedEffect[`${element} resist%`];\n                }\n            }\n            const value = parseNumberOrDefault(mitigation);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:5:${element}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'dmg% mitigation',\n                buffId: 'passive:8',\n                originalId: '8',\n            });\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bc fill per turn',\n                buffId: 'passive:9',\n                originalId: '9',\n            });\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'hc effectiveness%',\n                buffId: 'passive:10',\n                originalId: '10',\n            });\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:11:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    const entry = Object.assign({ id: `passive:12:${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '13',\n                effectKeyLow: 'bc fill on enemy defeat low',\n                effectKeyHigh: 'bc fill on enemy defeat high',\n                effectKeyChance: 'bc fill on enemy defeat%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                buffId: 'passive:13',\n            });\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageReduction, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                damageReduction = parseNumberOrDefault(rawReduction);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n                chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n            }\n            const results = [];\n            if (damageReduction !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:14', originalId,\n                    sources, value: {\n                        value: damageReduction,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('15', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '15',\n                effectKeyLow: 'hp% recover on enemy defeat low',\n                effectKeyHigh: 'hp% recover on enemy defeat high',\n                effectKeyChance: 'hp% recover on enemy defeat chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                defaultEffectChance: 100,\n                buffId: 'passive:15',\n            });\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n                healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:16', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '17',\n                effectKeyLow: 'hp drain% low',\n                effectKeyHigh: 'hp drain% high',\n                effectKeyChance: 'hp drain chance%',\n                buffKeyLow: 'drainHealLow',\n                buffKeyHigh: 'drainHealHigh',\n                buffId: 'passive:17',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            const originalId = '19';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:19:${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const originalId = '20';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                let params = splitEffectParams(typedEffect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(typedEffect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = [];\n            inflictedAilments.forEach(({ ailment, chance }) => {\n                if (chance !== 0) {\n                    results.push(Object.assign({ id: `passive:20:${ailment}`, originalId,\n                        sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('21', (effect, context, injectionContext) => {\n            const originalId = '21';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let rawDuration, extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['first x turns atk% (1)'];\n                stats.def = typedEffect['first x turns def% (3)'];\n                stats.rec = typedEffect['first x turns rec% (5)'];\n                stats.crit = typedEffect['first x turns crit% (7)'];\n                turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:21:${stat}`, originalId,\n                        sources,\n                        value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let fillLow, fillHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n                fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n            }\n            const results = [];\n            if (fillLow !== 0 || fillHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:23', originalId,\n                    sources, value: {\n                        fillLow,\n                        fillHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '24',\n                effectKeyLow: 'dmg% to hp when attacked low',\n                effectKeyHigh: 'dmg% to hp when attacked high',\n                effectKeyChance: 'dmg% to hp when attacked chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:24',\n            });\n        });\n        map.set('25', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '25',\n                effectKeyLow: 'bc fill when attacked low',\n                effectKeyHigh: 'bc fill when attacked high',\n                effectKeyChance: 'bc fill when attacked%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:25',\n            });\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '26',\n                effectKeyLow: 'dmg% reflect low',\n                effectKeyHigh: 'dmg% reflect high',\n                effectKeyChance: 'dmg% reflect chance%',\n                buffKeyLow: 'damageReflectLow',\n                buffKeyHigh: 'damageReflectHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:26',\n            });\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'target% chance',\n                buffId: 'passive:27',\n                originalId: '27',\n            });\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let value = 0;\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseNumberOrDefault(rawValue);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect['target% chance']);\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n            }\n            const results = [];\n            if (value !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                const entry = Object.assign({ id: 'passive:28', originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'ignore def%',\n                buffId: 'passive:29',\n                originalId: '29',\n            });\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:30:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let sparkDamageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawSparkDamageBoost;\n                [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n                });\n            }\n            const results = [];\n            if (sparkDamageBoost !== 0) {\n                results.push(Object.assign({ id: 'passive:31:damage', originalId,\n                    sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:31:${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bb gauge fill rate%',\n                buffId: 'passive:32',\n                originalId: '32',\n            });\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh, addedRec;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n                healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n                addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:33', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                        'addedRec%': addedRec,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'crit multiplier%',\n                buffId: 'passive:34',\n                originalId: '34',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            });\n        });\n        map.set('35', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '35',\n                effectKeyLow: 'bc fill when attacking low',\n                effectKeyHigh: 'bc fill when attacking high',\n                effectKeyChance: 'bc fill when attacking%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onNormalAttack: true }),\n                buffId: 'passive:35',\n            });\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            const originalId = '36';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let additionalActions = 0, damageModifier = 0, chance = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                additionalActions = parseNumberOrDefault(rawAdditionalActions);\n                damageModifier = parseNumberOrDefault(rawDamageModifier);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n            }\n            const results = [];\n            if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:36', originalId,\n                    sources, value: {\n                        additionalActions,\n                        damageModifier,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let hitIncreasePerHit = 0, extraHitDamage = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'passive:37', originalId,\n                    sources, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawConvertedStat;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const rawConvertedStat = typedEffect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = `${statType}% buff`;\n                    if (effectKey in typedEffect) {\n                        stats[statType] = typedEffect[effectKey];\n                    }\n                });\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:40:${stat}`, originalId,\n                        sources, value: {\n                            convertedStat,\n                            value,\n                        }, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('41', (effect, context, injectionContext) => {\n            const originalId = '41';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                minimumElements: '0',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.minimumElements = typedEffect['unique elements required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const minimumElements = parseNumberOrDefault(stats.minimumElements);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:41:${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minumumUniqueElements: minimumElements }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const GENDER_MAPPING = {\n                0: UnitGender.Other,\n                1: UnitGender.Male,\n                2: UnitGender.Female,\n            };\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                gender: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawGender;\n                [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.gender = typedEffect['gender required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetGender = stats.gender || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:42:${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'take 1 dmg%',\n                buffId: 'passive:43',\n                originalId: '43',\n            });\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given passive effect.\n     */\n    function defaultConversionFunction$1(effect, context) {\n        const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given passive effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Passive effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertPassiveEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isPassiveEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$1(effect, context);\n    }\n\n    const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'TURN_DURATION_MODIFICATION': {\n            id: BuffId.TURN_DURATION_MODIFICATION,\n            name: 'Passive Turn Duration Modification',\n            stat: UnitStat.turnDurationModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [\n                (buff && buff.value &&\n                    buff.value.duration &&\n                    buff.value.duration < 0) ?\n                    IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n            ],\n        }, 'NO_PARAMS_SPECIFIED': {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            name: 'No Parameters Specified',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PASSIVE_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            name: 'Unknown Passive Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n            name: 'Unknown Passive Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'passive:1:hp': {\n            id: BuffId['passive:1:hp'],\n            name: 'Passive HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:1:atk': {\n            id: BuffId['passive:1:atk'],\n            name: 'Passive Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:1:def': {\n            id: BuffId['passive:1:def'],\n            name: 'Passive Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:1:rec': {\n            id: BuffId['passive:1:rec'],\n            name: 'Passive Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:1:crit': {\n            id: BuffId['passive:1:crit'],\n            name: 'Passive Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        } }, (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:2:hp': {\n                id: BuffId['passive:2:hp'],\n                name: 'Passive Elemental HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:2:atk': {\n                id: BuffId['passive:2:atk'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:2:def': {\n                id: BuffId['passive:2:def'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:2:rec': {\n                id: BuffId['passive:2:rec'],\n                name: 'Passive Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:2:crit': {\n                id: BuffId['passive:2:crit'],\n                name: 'Passive Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let unitType = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        unitType = buff.conditions.targetUnitType || '';\n                    }\n                }\n                if (typeof unitType !== 'string' || !unitType) {\n                    unitType = 'unknown';\n                }\n                let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n                if (!unitType || !(iconKey in IconId)) {\n                    iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:3:hp': {\n                id: BuffId['passive:3:hp'],\n                name: 'Passive Type-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:3:atk': {\n                id: BuffId['passive:3:atk'],\n                name: 'Passive Type-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:3:def': {\n                id: BuffId['passive:3:def'],\n                name: 'Passive Type-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:3:rec': {\n                id: BuffId['passive:3:rec'],\n                name: 'Passive Type-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:3:crit': {\n                id: BuffId['passive:3:crit'],\n                name: 'Passive Type-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:4:poison': {\n            id: BuffId['passive:4:poison'],\n            name: 'Passive Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:4:weak': {\n            id: BuffId['passive:4:weak'],\n            name: 'Passive Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:4:sick': {\n            id: BuffId['passive:4:sick'],\n            name: 'Passive Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:4:injury': {\n            id: BuffId['passive:4:injury'],\n            name: 'Passive Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:4:curse': {\n            id: BuffId['passive:4:curse'],\n            name: 'Passive Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:4:paralysis': {\n            id: BuffId['passive:4:paralysis'],\n            name: 'Passive Paralysis Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:5:fire': {\n            id: BuffId['passive:5:fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:5:water': {\n            id: BuffId['passive:5:water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:5:earth': {\n            id: BuffId['passive:5:earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:5:thunder': {\n            id: BuffId['passive:5:thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:5:light': {\n            id: BuffId['passive:5:light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:5:dark': {\n            id: BuffId['passive:5:dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:5:unknown': {\n            id: BuffId['passive:5:unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:8': {\n            id: BuffId['passive:8'],\n            name: 'Passive Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:9': {\n            id: BuffId['passive:9'],\n            name: 'Passive Gradual BB Gauge Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:10': {\n            id: BuffId['passive:10'],\n            name: 'Passive HC Efficacy',\n            stat: UnitStat.hcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HCREC],\n        }, 'passive:11:atk': {\n            id: BuffId['passive:11:atk'],\n            name: 'Passive HP-Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n        }, 'passive:11:def': {\n            id: BuffId['passive:11:def'],\n            name: 'Passive HP-Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n        }, 'passive:11:rec': {\n            id: BuffId['passive:11:rec'],\n            name: 'Passive HP-Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n        }, 'passive:11:crit': {\n            id: BuffId['passive:11:crit'],\n            name: 'Passive HP-Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n        }, 'passive:12:bc': {\n            id: BuffId['passive:12:bc'],\n            name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n        }, 'passive:12:hc': {\n            id: BuffId['passive:12:hc'],\n            name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n        }, 'passive:12:item': {\n            id: BuffId['passive:12:item'],\n            name: 'Passive HP-Conditional Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n        }, 'passive:12:zel': {\n            id: BuffId['passive:12:zel'],\n            name: 'Passive HP-Conditional Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n        }, 'passive:12:karma': {\n            id: BuffId['passive:12:karma'],\n            name: 'Passive HP-Conditional Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n        }, 'passive:13': {\n            id: BuffId['passive:13'],\n            name: 'Passive BB Gauge Fill on Enemy Defeat',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:14': {\n            id: BuffId['passive:14'],\n            name: 'Passive Damage Reduction (Chance)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:15': {\n            id: BuffId['passive:15'],\n            name: 'Passive Heal on Enemy Defeat',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:16': {\n            id: BuffId['passive:16'],\n            name: 'Passive Heal on Battle Win',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:17': {\n            id: BuffId['passive:17'],\n            name: 'HP Absorption',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPABS],\n        }, 'passive:19:bc': {\n            id: BuffId['passive:19:bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'passive:19:hc': {\n            id: BuffId['passive:19:hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'passive:19:item': {\n            id: BuffId['passive:19:item'],\n            name: 'Passive Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'passive:19:zel': {\n            id: BuffId['passive:19:zel'],\n            name: 'Passive Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n        }, 'passive:19:karma': {\n            id: BuffId['passive:19:karma'],\n            name: 'Passive Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n        }, 'passive:20:poison': {\n            id: BuffId['passive:20:poison'],\n            name: 'Passive Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'passive:20:weak': {\n            id: BuffId['passive:20:weak'],\n            name: 'Passive Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'passive:20:sick': {\n            id: BuffId['passive:20:sick'],\n            name: 'Passive Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'passive:20:injury': {\n            id: BuffId['passive:20:injury'],\n            name: 'Passive Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'passive:20:curse': {\n            id: BuffId['passive:20:curse'],\n            name: 'Passive Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'passive:20:paralysis': {\n            id: BuffId['passive:20:paralysis'],\n            name: 'Passive Paralysis Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'passive:20:atk down': {\n            id: BuffId['passive:20:atk down'],\n            name: 'Passive Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'passive:20:def down': {\n            id: BuffId['passive:20:def down'],\n            name: 'Passive Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'passive:20:rec down': {\n            id: BuffId['passive:20:rec down'],\n            name: 'Passive Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'passive:20:unknown': {\n            id: BuffId['passive:20:unknown'],\n            name: 'Passive Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'passive:21:atk': {\n            id: BuffId['passive:21:atk'],\n            name: 'Attack Boost for X Turns',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:21:def': {\n            id: BuffId['passive:21:def'],\n            name: 'Defense Boost for X Turns',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:21:rec': {\n            id: BuffId['passive:21:rec'],\n            name: 'Recovery Boost for X Turns',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:21:crit': {\n            id: BuffId['passive:21:crit'],\n            name: 'Critical Hit Rate Boost for X Turns',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:23': {\n            id: BuffId['passive:23'],\n            name: 'Passive BC Fill on Battle Win',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:24': {\n            id: BuffId['passive:24'],\n            name: 'Passive Heal when Attacked',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'passive:25': {\n            id: BuffId['passive:25'],\n            name: 'Passive BC Fill when Attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:26': {\n            id: BuffId['passive:26'],\n            name: 'Passive Damage Counter',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'passive:27': {\n            id: BuffId['passive:27'],\n            name: 'Passive Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n        }, 'passive:28': {\n            id: BuffId['passive:28'],\n            name: 'Passive HP-Conditional Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n        }, 'passive:29': {\n            id: BuffId['passive:29'],\n            name: 'Passive Defense Ignore (Chance)',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'passive:30:atk': {\n            id: BuffId['passive:30:atk'],\n            name: 'Passive BB Gauge Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n        }, 'passive:30:def': {\n            id: BuffId['passive:30:def'],\n            name: 'Passive BB Gauge Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n        }, 'passive:30:rec': {\n            id: BuffId['passive:30:rec'],\n            name: 'Passive BB Gauge Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n        }, 'passive:30:crit': {\n            id: BuffId['passive:30:crit'],\n            name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n        }, 'passive:31:damage': {\n            id: BuffId['passive:31:damage'],\n            name: 'Passive Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'passive:31:bc': {\n            id: BuffId['passive:31:bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n        }, 'passive:31:hc': {\n            id: BuffId['passive:31:hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n        }, 'passive:31:item': {\n            id: BuffId['passive:31:item'],\n            name: 'Passive Item Drop Rate Boost during Spark',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n        }, 'passive:31:zel': {\n            id: BuffId['passive:31:zel'],\n            name: 'Passive Zel Drop Rate Boost during Spark',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n        }, 'passive:31:karma': {\n            id: BuffId['passive:31:karma'],\n            name: 'Passive Karma Drop Rate Boost during Spark',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n        }, 'passive:32': {\n            id: BuffId['passive:32'],\n            name: 'Passive BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'passive:33': {\n            id: BuffId['passive:33'],\n            name: 'Passive Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:34': {\n            id: BuffId['passive:34'],\n            name: 'Passive Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'passive:35': {\n            id: BuffId['passive:35'],\n            name: 'Passive BB Gauge Fill when Normal Attacking',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:36': {\n            id: BuffId['passive:36'],\n            name: 'Passive Extra Action',\n            stat: UnitStat.extraAction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DBLSTRIKE],\n        }, 'passive:37': {\n            id: BuffId['passive:37'],\n            name: 'Passive Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'passive:40:atk': {\n            id: BuffId['passive:40:atk'],\n            name: 'Passive Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'passive:40:def': {\n            id: BuffId['passive:40:def'],\n            name: 'Passive Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'passive:40:rec': {\n            id: BuffId['passive:40:rec'],\n            name: 'Passive Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'passive:41:hp': {\n            id: BuffId['passive:41:hp'],\n            name: 'Passive Element Squad-based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n        }, 'passive:41:atk': {\n            id: BuffId['passive:41:atk'],\n            name: 'Passive Element Squad-based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n        }, 'passive:41:def': {\n            id: BuffId['passive:41:def'],\n            name: 'Passive Element Squad-based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n        }, 'passive:41:rec': {\n            id: BuffId['passive:41:rec'],\n            name: 'Passive Element Squad-based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n        }, 'passive:41:crit': {\n            id: BuffId['passive:41:crit'],\n            name: 'Passive Element Squad-based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let gender = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        gender = buff.conditions.targetGender || '';\n                    }\n                }\n                if (typeof gender !== 'string' || !gender) {\n                    gender = 'unknown';\n                }\n                let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n                if (!gender || !(iconKey in IconId)) {\n                    iconKey = `BUFF_GENDER${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:42:hp': {\n                id: BuffId['passive:42:hp'],\n                name: 'Passive Gender-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:42:atk': {\n                id: BuffId['passive:42:atk'],\n                name: 'Passive Gender-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:42:def': {\n                id: BuffId['passive:42:def'],\n                name: 'Passive Gender-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:42:rec': {\n                id: BuffId['passive:42:rec'],\n                name: 'Passive Gender-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:42:crit': {\n                id: BuffId['passive:42:crit'],\n                name: 'Passive Gender-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:43': {\n            id: BuffId['passive:43'],\n            name: 'Passive Damage Reduction To One (Chance)',\n            stat: UnitStat.reduceDamageToOne,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n        }, 'UNKNOWN_PROC_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            name: 'Unknown Proc Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n            name: 'Unknown Proc Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'proc:1': {\n            id: BuffId['proc:1'],\n            name: 'Regular Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:2': {\n            id: BuffId['proc:2'],\n            name: 'Burst Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:3': {\n            id: BuffId['proc:3'],\n            name: 'Active Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:4:flat': {\n            id: BuffId['proc:4:flat'],\n            name: 'Burst BB Gauge Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:4:percent': {\n            id: BuffId['proc:4:percent'],\n            name: 'Burst BB Gauge Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:5:atk': {\n                id: BuffId['proc:5:atk'],\n                name: 'Active Regular/Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:5:def': {\n                id: BuffId['proc:5:def'],\n                name: 'Active Regular/Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:5:rec': {\n                id: BuffId['proc:5:rec'],\n                name: 'Active Regular/Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:5:crit': {\n                id: BuffId['proc:5:crit'],\n                name: 'Active Regular/Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'proc:6:bc': {\n            id: BuffId['proc:6:bc'],\n            name: 'Active Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'proc:6:hc': {\n            id: BuffId['proc:6:hc'],\n            name: 'Active Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'proc:6:item': {\n            id: BuffId['proc:6:item'],\n            name: 'Active Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'proc:7': {\n            id: BuffId['proc:7'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:8:flat': {\n            id: BuffId['proc:8:flat'],\n            name: 'Max HP Boost (Flat Amount)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        }, 'proc:8:percent': {\n            id: BuffId['proc:8:percent'],\n            name: 'Max HP Boost (Percentage)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'DOWN'; // default to down since these are reduction buffs\n                if (buff) {\n                    if (buff.value && buff.value > 0) {\n                        polarity = 'UP';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:9:atk': {\n                id: BuffId['proc:9:atk'],\n                name: 'Active Regular/Elemental Attack Reduction',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:9:def': {\n                id: BuffId['proc:9:def'],\n                name: 'Active Regular/Elemental Defense Reduction',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:9:rec': {\n                id: BuffId['proc:9:rec'],\n                name: 'Active Regular/Elemental Recovery Reduction',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:9:unknown': {\n                id: BuffId['proc:9:unknown'],\n                name: 'Active Regular/Elemental Unknown Stat Reduction',\n                stackType: BuffStackType.Active,\n                icons: () => [IconId.UNKNOWN],\n            },\n        };\n    })()), { 'proc:10:poison': {\n            id: BuffId['proc:10:poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:10:weak': {\n            id: BuffId['proc:10:weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:10:sick': {\n            id: BuffId['proc:10:sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:10:injury': {\n            id: BuffId['proc:10:injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:10:curse': {\n            id: BuffId['proc:10:curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:10:paralysis': {\n            id: BuffId['proc:10:paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:10:atk down': {\n            id: BuffId['proc:10:atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWNBLK],\n        }, 'proc:10:def down': {\n            id: BuffId['proc:10:def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWNBLK],\n        }, 'proc:10:rec down': {\n            id: BuffId['proc:10:rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWNBLK],\n        }, 'proc:10:unknown': {\n            id: BuffId['proc:10:unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:11:poison': {\n            id: BuffId['proc:11:poison'],\n            name: 'Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_POISON],\n        }, 'proc:11:weak': {\n            id: BuffId['proc:11:weak'],\n            name: 'Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_WEAK],\n        }, 'proc:11:sick': {\n            id: BuffId['proc:11:sick'],\n            name: 'Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_SICK],\n        }, 'proc:11:injury': {\n            id: BuffId['proc:11:injury'],\n            name: 'Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_INJURY],\n        }, 'proc:11:curse': {\n            id: BuffId['proc:11:curse'],\n            name: 'Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_CURSE],\n        }, 'proc:11:paralysis': {\n            id: BuffId['proc:11:paralysis'],\n            name: 'Paralysis Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_PARALYSIS],\n        }, 'proc:11:atk down': {\n            id: BuffId['proc:11:atk down'],\n            name: 'Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWN],\n        }, 'proc:11:def down': {\n            id: BuffId['proc:11:def down'],\n            name: 'Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWN],\n        }, 'proc:11:rec down': {\n            id: BuffId['proc:11:rec down'],\n            name: 'Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWN],\n        }, 'proc:11:unknown': {\n            id: BuffId['proc:11:unknown'],\n            name: 'Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.DEBUFF_AILMENT],\n        }, 'proc:12': {\n            id: BuffId['proc:12'],\n            name: 'Instant Revive (Guaranteed)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:13': {\n            id: BuffId['proc:13'],\n            name: 'Random Target Damage',\n            stackType: BuffStackType.Attack,\n            icons: () => [IconId.ATK_RT],\n        }, 'proc:14': {\n            id: BuffId['proc:14'],\n            name: 'Lifesteal Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n        }, 'proc:16:fire': {\n            id: BuffId['proc:16:fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:16:water': {\n            id: BuffId['proc:16:water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:16:earth': {\n            id: BuffId['proc:16:earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:16:thunder': {\n            id: BuffId['proc:16:thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:16:light': {\n            id: BuffId['proc:16:light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:16:dark': {\n            id: BuffId['proc:16:dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:16:all': {\n            id: BuffId['proc:16:all'],\n            name: 'Active Elemental Damage Reduction (All Elements)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:16:unknown': {\n            id: BuffId['proc:16:unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:17:poison': {\n            id: BuffId['proc:17:poison'],\n            name: 'Active Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:17:weak': {\n            id: BuffId['proc:17:weak'],\n            name: 'Active Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:17:sick': {\n            id: BuffId['proc:17:sick'],\n            name: 'Active Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:17:injury': {\n            id: BuffId['proc:17:injury'],\n            name: 'Active Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:17:curse': {\n            id: BuffId['proc:17:curse'],\n            name: 'Active Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:17:paralysis': {\n            id: BuffId['proc:17:paralysis'],\n            name: 'Active Paralysis Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:18': {\n            id: BuffId['proc:18'],\n            name: 'Active Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'proc:19': {\n            id: BuffId['proc:19'],\n            name: 'Active Gradual BB Gauge Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:20': {\n            id: BuffId['proc:20'],\n            name: 'Active BC Fill when attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'proc:22': {\n            id: BuffId['proc:22'],\n            name: 'Active Defense Ignore',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'proc:23': {\n            id: BuffId['proc:23'],\n            name: 'Active Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'proc:24:atk': {\n            id: BuffId['proc:24:atk'],\n            name: 'Active Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'proc:24:def': {\n            id: BuffId['proc:24:def'],\n            name: 'Active Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'proc:24:rec': {\n            id: BuffId['proc:24:rec'],\n            name: 'Active Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'proc:26': {\n            id: BuffId['proc:26'],\n            name: 'Active Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'proc:27': {\n            id: BuffId['proc:27'],\n            name: 'Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:28': {\n            id: BuffId['proc:28'],\n            name: 'Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n        }, 'proc:29': {\n            id: BuffId['proc:29'],\n            name: 'Multi-Element Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n        }, 'proc:30:fire': {\n            id: BuffId['proc:30:fire'],\n            name: 'Active Added Element to Attack (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDFIRE],\n        }, 'proc:30:water': {\n            id: BuffId['proc:30:water'],\n            name: 'Active Added Element to Attack (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWATER],\n        }, 'proc:30:earth': {\n            id: BuffId['proc:30:earth'],\n            name: 'Active Added Element to Attack (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDEARTH],\n        }, 'proc:30:thunder': {\n            id: BuffId['proc:30:thunder'],\n            name: 'Active Added Element to Attack (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDTHUNDER],\n        }, 'proc:30:light': {\n            id: BuffId['proc:30:light'],\n            name: 'Active Added Element to Attack (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDLIGHT],\n        }, 'proc:30:dark': {\n            id: BuffId['proc:30:dark'],\n            name: 'Active Added Element to Attack (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDARK],\n        }, 'proc:30:unknown': {\n            id: BuffId['proc:30:unknown'],\n            name: 'Active Added Element to Attack (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDELEMENT],\n        }, 'proc:31:flat': {\n            id: BuffId['proc:31:flat'],\n            name: 'Burst BB Gauge Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:31:percent': {\n            id: BuffId['proc:31:percent'],\n            name: 'Burst BB Gauge Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:32:fire': {\n            id: BuffId['proc:32:fire'],\n            name: 'Element Shift (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTFIRE],\n        }, 'proc:32:water': {\n            id: BuffId['proc:32:water'],\n            name: 'Element Shift (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTWATER],\n        }, 'proc:32:earth': {\n            id: BuffId['proc:32:earth'],\n            name: 'Element Shift (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTEARTH],\n        }, 'proc:32:thunder': {\n            id: BuffId['proc:32:thunder'],\n            name: 'Element Shift (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTTHUNDER],\n        }, 'proc:32:light': {\n            id: BuffId['proc:32:light'],\n            name: 'Element Shift (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTLIGHT],\n        }, 'proc:32:dark': {\n            id: BuffId['proc:32:dark'],\n            name: 'Element Shift (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTDARK],\n        }, 'proc:32:unknown': {\n            id: BuffId['proc:32:unknown'],\n            name: 'Element Shift (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTELEMENT],\n        }, 'proc:33': {\n            id: BuffId['proc:33'],\n            name: 'Buff Removal',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_REMOVEBUFF],\n        }, 'proc:34:flat': {\n            id: BuffId['proc:34:flat'],\n            name: 'Burst BB Gauge Drain (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:34:percent': {\n            id: BuffId['proc:34:percent'],\n            name: 'Burst BB Gauge Drain (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:36': {\n            id: BuffId['proc:36'],\n            name: 'Active Leader Skill Lock',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DISABLELS],\n        }, 'proc:37': {\n            id: BuffId['proc:37'],\n            name: 'Summon Unit',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SUMMONUNIT],\n        }, 'proc:38:poison': {\n            id: BuffId['proc:38:poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:38:weak': {\n            id: BuffId['proc:38:weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:38:sick': {\n            id: BuffId['proc:38:sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:38:injury': {\n            id: BuffId['proc:38:injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:38:curse': {\n            id: BuffId['proc:38:curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:38:paralysis': {\n            id: BuffId['proc:38:paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:38:atk down': {\n            id: BuffId['proc:38:atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWNBLK],\n        }, 'proc:38:def down': {\n            id: BuffId['proc:38:def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWNBLK],\n        }, 'proc:38:rec down': {\n            id: BuffId['proc:38:rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWNBLK],\n        }, 'proc:38:unknown': {\n            id: BuffId['proc:38:unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:39:fire': {\n            id: BuffId['proc:39:fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:39:water': {\n            id: BuffId['proc:39:water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:39:earth': {\n            id: BuffId['proc:39:earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:39:thunder': {\n            id: BuffId['proc:39:thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:39:light': {\n            id: BuffId['proc:39:light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:39:dark': {\n            id: BuffId['proc:39:dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:39:unknown': {\n            id: BuffId['proc:39:unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:40:poison': {\n            id: BuffId['proc:40:poison'],\n            name: 'Active Poison Infliction Added to Attack',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'proc:40:weak': {\n            id: BuffId['proc:40:weak'],\n            name: 'Active Weak Infliction Added to Attack',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'proc:40:sick': {\n            id: BuffId['proc:40:sick'],\n            name: 'Active Sick Infliction Added to Attack',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'proc:40:injury': {\n            id: BuffId['proc:40:injury'],\n            name: 'Active Injury Infliction Added to Attack',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'proc:40:curse': {\n            id: BuffId['proc:40:curse'],\n            name: 'Active Curse Infliction Added to Attack',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'proc:40:paralysis': {\n            id: BuffId['proc:40:paralysis'],\n            name: 'Active Paralysis Infliction Added to Attack',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'proc:40:atk down': {\n            id: BuffId['proc:40:atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:40:def down': {\n            id: BuffId['proc:40:def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:40:rec down': {\n            id: BuffId['proc:40:rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:40:unknown': {\n            id: BuffId['proc:40:unknown'],\n            name: 'Active Unknown Ailment Infliction Added to Attack',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'proc:42': {\n            id: BuffId['proc:42'],\n            name: 'Sacrificial Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n        }, 'proc:43': {\n            id: BuffId['proc:43'],\n            name: 'Burst OD Gauge Fill (Percentage)',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_OVERDRIVEUP],\n        }, 'proc:44': {\n            id: BuffId['proc:44'],\n            name: 'Active Damage over Time',\n            stat: UnitStat.damageOverTime,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_TURNDMG],\n        } }));\n\n    /**\n     * @description Get the associated metadata entry for a given buff ID.\n     * @param id Buff ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n     * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    var index$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        convertProcEffectToBuffs: convertProcEffectToBuffs,\n        convertPassiveEffectToBuffs: convertPassiveEffectToBuffs,\n        get BuffSource () { return BuffSource; },\n        get BuffStackType () { return BuffStackType; },\n        BUFF_METADATA: BUFF_METADATA,\n        getMetadataForBuff: getMetadataForBuff\n    });\n\n    var index$2 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        constants: constants,\n        parsers: index$1,\n        getMetadataForProc: getMetadataForProc,\n        getMetadataForPassive: getMetadataForPassive,\n        isAttackingProcId: isAttackingProcId,\n        getNameForProc: getNameForProc,\n        getNameForPassive: getNameForPassive,\n        isProcEffect: isProcEffect,\n        isPassiveEffect: isPassiveEffect,\n        combineEffectsAndDamageFrames: combineEffectsAndDamageFrames,\n        getEffectId: getEffectId,\n        getEffectName: getEffectName,\n        get ProcBuffType () { return ProcBuffType; },\n        PASSIVE_METADATA: PASSIVE_METADATA,\n        PROC_METADATA: PROC_METADATA\n    });\n\n    /**\n     * @description Get the effects of a given extra skill.\n     * @param skill Extra skill to get the effects of.\n     * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForExtraSkill(skill) {\n        return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n    }\n\n    var index$3 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForExtraSkill: getEffectsForExtraSkill\n    });\n\n    /**\n     * @description Get the effects of a given item.\n     * @param item Item to get the effects of, if any are present,\n     * @returns Effects of the given item if they exist, an empty array otherwise.\n     */\n    function getEffectsForItem(item) {\n        let result = [];\n        if (item && item.effect) {\n            if (Array.isArray(item.effect)) {\n                result = item.effect;\n            }\n            else if (Array.isArray(item.effect.effect)) {\n                const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n                result = effect.map(e => {\n                    // apply target data to each effect\n                    const fullProcEffect = Object.assign({}, e);\n                    fullProcEffect['target area'] = targetArea;\n                    fullProcEffect['target type'] = targetType;\n                    return fullProcEffect;\n                });\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given item thumbnail filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents the thumbnail image for a given item.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getItemImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/item/${fileName || ''}`;\n    }\n\n    var index$4 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForItem: getEffectsForItem,\n        getItemImageUrl: getItemImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given leader skill.\n     * @param skill Leader skill to get the effects of.\n     * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForLeaderSkill(skill) {\n        return skill && Array.isArray(skill.effects) ? skill.effects : [];\n    }\n\n    var index$5 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForLeaderSkill: getEffectsForLeaderSkill\n    });\n\n    /**\n     * @description Generate the file names for each of the image type for a given unit ID.\n     * @param id Unit ID to use to generate the file names.\n     * @param suffix Optional parameter that's useful for things like alternate art.\n     * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n     */\n    function getUnitImageFileNames(id, suffix = '') {\n        const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n        return {\n            spritesheet: `unit_anime_${fileNameSuffix}`,\n            battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n            guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n            fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n        };\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given unit filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents an image for a given unit.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getUnitImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n    }\n\n    var index$6 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getUnitImageFileNames: getUnitImageFileNames,\n        getUnitImageUrl: getUnitImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given SP Enhancement Entry.\n     * @param entry SP Enhancement Entry to get the effects of.\n     * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n     */\n    function getEffectsForSpEnhancement(entry) {\n        const result = [];\n        if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n            const effectWrappers = entry.skill.effects;\n            effectWrappers.forEach(effectWrapper => {\n                Object.keys(effectWrapper).forEach(spType => {\n                    const originalEffect = effectWrapper[spType];\n                    const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                    result.push(unwrappedEffect);\n                });\n            });\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the associated category name with a given category ID.\n     * @param categoryId Category ID to get the name of.\n     * @returns Name of the given category ID or the string 'Unknown'.\n     */\n    function getSpCategoryName(categoryId) {\n        let result;\n        const numericalCategoryId = +categoryId;\n        switch (numericalCategoryId) {\n            case 1:\n                result = SpCategoryName['Parameter Boost'];\n                break;\n            case 2:\n                result = SpCategoryName.Spark;\n                break;\n            case 3:\n                result = SpCategoryName['Critical Hits'];\n                break;\n            case 4:\n                result = SpCategoryName['Attack Boost'];\n                break;\n            case 5:\n                result = SpCategoryName['BB Gauge'];\n                break;\n            case 6:\n                result = SpCategoryName['HP Recovery'];\n                break;\n            case 7:\n                result = SpCategoryName.Drops;\n                break;\n            case 8:\n                result = SpCategoryName['Ailment Resistance'];\n                break;\n            case 9:\n                result = SpCategoryName['Ailment Infliction'];\n                break;\n            case 10:\n                result = SpCategoryName['Damage Reduction'];\n                break;\n            case 11:\n                result = SpCategoryName.Special;\n                break;\n            default:\n                result = SpCategoryName.Unknown;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n\n    /**\n     * @description Get the corresponding character code for a given index.\n     * It expects an index between 0 and 61 inclusive; will return an empty string if\n     * the given value is outside of the range.\n     * @param index Index of an SP entry in a given skills array.\n     * @returns Corresponding single alphanumeric character to the given index\n     * or an empty string if the index is invalid.\n     */\n    function spIndexToCode(index) {\n        let result = '';\n        let correspondingCharacterCode = -1;\n        if (Number.isInteger(index)) {\n            if (index >= 0 && index <= 25) { // A-Z\n                correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (index >= 26 && index <= 51) { // a-z\n                correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n            }\n            else if (index >= 52 && index <= 61) { // 0-9\n                correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n            }\n        }\n        if (correspondingCharacterCode !== -1) {\n            result = String.fromCharCode(correspondingCharacterCode);\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the corresponding index for a given character code.\n     * It expects an alphanumeric character and will return -1 otherwise.\n     * @param code Character code an SP entry in a given skills array.\n     * @returns Corresponding index to the given character or -1 if the\n     * character is invalid.\n     */\n    function spCodeToIndex(code) {\n        let result = -1;\n        let characterCodeOffset = -1;\n        if (!!code && typeof code === 'string' && code.length === 1) {\n            if (code >= 'A' && code <= 'Z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (code >= 'a' && code <= 'z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n            }\n            else if (code >= '0' && code <= '9') {\n                characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n            }\n        }\n        if (characterCodeOffset !== -1) {\n            result = code.charCodeAt(0) - characterCodeOffset;\n        }\n        return result;\n    }\n\n    /**\n     * @description Extract the ID of a string in the format of `number@actualId`. If there\n     * is no value after the @ character or if no @ character is present, the original ID is returned.\n     * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n     * @param id Original SP Enhancement Entry ID.\n     * @returns The ID of a string in the format of `number@actualId`, or the original input if\n     * there is no @ character or no value after the @ character.\n     */\n    function getSpEntryId(id) {\n        return (typeof id === 'string' && id.split('@')[1]) || id;\n    }\n\n    /**\n     * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n     * @param id SP Enhancement entry ID.\n     * @param entries Collection of SP Enhancement entries to search in.\n     * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n     */\n    function getSpEntryWithId(id, entries) {\n        const spId = getSpEntryId(id);\n        return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n     * @param entry SP Entry to get dependencies for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n     */\n    function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependencies = [];\n        if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n            const dependencyId = getSpEntryId(entry.dependency);\n            const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n            if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n                addedEntries.add(dependencyEntry);\n                const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n                dependencies = [dependencyEntry].concat(subDependencies);\n            }\n        }\n        return dependencies;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n     * @param entry SP Entry to get dependents for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n     */\n    function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependents = [];\n        if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n            const entryId = entry.id;\n            dependents = allEntries\n                .filter(s => {\n                return s.dependency &&\n                    s.dependency.includes(entryId) &&\n                    !addedEntries.has(s);\n            });\n            dependents.forEach(dependent => {\n                addedEntries.add(dependent);\n                const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n                dependents = dependents.concat(subDependents);\n            });\n        }\n        return dependents;\n    }\n\n    var index$7 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForSpEnhancement: getEffectsForSpEnhancement,\n        getSpCategoryName: getSpCategoryName,\n        spIndexToCode: spIndexToCode,\n        spCodeToIndex: spCodeToIndex,\n        getSpEntryId: getSpEntryId,\n        getSpEntryWithId: getSpEntryWithId,\n        getAllDependenciesForSpEntry: getAllDependenciesForSpEntry,\n        getAllEntriesThatDependOnSpEntry: getAllEntriesThatDependOnSpEntry\n    });\n\n    /* NOTE: this file is automatically generated; do not edit this file */\n    var version = '0.7.0';\n\n    exports.buffs = index$2;\n    exports.bursts = index;\n    exports.datamineTypes = datamineTypes;\n    exports.extraSkills = index$3;\n    exports.items = index$4;\n    exports.leaderSkills = index$5;\n    exports.spEnhancements = index$7;\n    exports.units = index$6;\n    exports.version = version;\n\n    return exports;\n\n}({}));\n\n","/**\n * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get level entry from.\n * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n */\nexport default function getLevelEntryForBurst(burst, level) {\n    const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n    let levelIndex;\n    if (level !== null && !isNaN(level)) {\n        // 1-indexed\n        levelIndex = (+level - 1);\n    }\n    else {\n        // default to last entry in burst\n        levelIndex = burstEffectsByLevel.length - 1;\n    }\n    return burstEffectsByLevel[levelIndex];\n}\n","/**\n * @description Get the proc/passive ID of a given object.\n * @param effect Object to get the effect ID from.\n * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectId(effect) {\n    let resultId = '';\n    if (effect) {\n        resultId = effect['proc id'] || effect['unknown proc id'] ||\n            effect['passive id'] || effect['unknown passive id'] || '';\n    }\n    return resultId;\n}\n","export var KNOWN_PROC_ID;\n(function (KNOWN_PROC_ID) {\n    KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n    KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n})(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\nexport var KNOWN_PASSIVE_ID;\n(function (KNOWN_PASSIVE_ID) {\n    KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n    KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n})(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n","export var ProcBuffType;\n(function (ProcBuffType) {\n    ProcBuffType[\"Attack\"] = \"Attack\";\n})(ProcBuffType || (ProcBuffType = {}));\n/* eslint-disable */\n/**\n * @ignore\n */\nexport const PASSIVE_METADATA = Object.freeze({\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Parameter Boost\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Elemental Parameter Boost\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Type-Based Parameter Boost\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"Status Negation\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Damage Reduction\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Gradual BB Gauge Boost\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"HC Efficacy\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"HP-Conditional Parameter Boost\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"HP-Conditional Drop Rate Boost\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"BC Fill on Enemy Defeat\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Damage Reduction (Chance)\"\n    },\n    \"15\": {\n        \"ID\": \"15\",\n        \"Name\": \"Heal on Enemy Defeat\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Heal on Battle Victory\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"HP Absorption\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Drop Rate Boost\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"Status Infliction\"\n    },\n    \"21\": {\n        \"ID\": \"21\",\n        \"Name\": \"Parameter Boost for First X Turns\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"BC Fill on Battle Victory\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Heal when Attacked (Chance)\"\n    },\n    \"25\": {\n        \"ID\": \"25\",\n        \"Name\": \"BC Fill when Hit (Chance)\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Damage Counter (Chance)\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Increased Target Chance\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Decreased Target Chance\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Defense Ignore (Chance)\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"BB Conditional Parameter Boost\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"BC Efficacy\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Heal over Time\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"Critical Damage Boost\"\n    },\n    \"35\": {\n        \"ID\": \"35\",\n        \"Name\": \"BC Fill when Normal Attacking\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Extra Action\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Hit Count Boost\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Parameter Conversion\"\n    },\n    \"41\": {\n        \"ID\": \"41\",\n        \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"Gender Parameter Boost\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Damage Reduction to 1\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Flat Parameter Boost\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"Critical Damage Negation\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"BC Fill on Spark\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"BC Cost Reduction\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"BB Gauge Consumption Reduction\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Elemental Damage Boost\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Conditional Effect based on HP Threshold\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Damage Reduction when Guarding\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BC Fill when Attacked when Guarding\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BC Fill on Guard\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Elemental Damage Reduction for first X Turns\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"BB Atk Boost\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"BC Fill on Critical\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Add buff to Brave Burst\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"OD Gauge Fill Rate Boost\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"Status Counter\"\n    },\n    \"72\": {\n        \"ID\": \"72\",\n        \"Name\": \"Turn End Effects Activate at Turn Start\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\"\n    },\n    \"74\": {\n        \"ID\": \"74\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Spark Vulnerability\"\n    },\n    \"77\": {\n        \"ID\": \"77\",\n        \"Name\": \"Spark Damage Reduction\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Conditional Effect after Damage Received Threshold\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"BC Fill after Damage Received Threshold\"\n    },\n    \"80\": {\n        \"ID\": \"80\",\n        \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n    },\n    \"81\": {\n        \"ID\": \"81\",\n        \"Name\": \"BC Fill after Damage Dealt Threshold\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"Conditional Effect after BC Received Threshold\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"Conditional Effect after HC Received Threshold\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"BC Fill after HC Received Threshold\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"Conditional Effect after Spark Threshold\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Conditional Effect on Guard\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Conditional Effect on Critical\"\n    },\n    \"90\": {\n        \"ID\": \"90\",\n        \"Name\": \"Status Infliction on Critical\"\n    },\n    \"91\": {\n        \"ID\": \"91\",\n        \"Name\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Negate Defense Ignore\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Added Elements\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Normal Attacks Hit All Foes\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Player EXP Boost\"\n    },\n    \"99\": {\n        \"ID\": \"99\",\n        \"Name\": \"\"\n    },\n    \"100\": {\n        \"ID\": \"100\",\n        \"Name\": \"Spark Critical\"\n    },\n    \"101\": {\n        \"ID\": \"101\",\n        \"Name\": \"Heal on Spark\"\n    },\n    \"102\": {\n        \"ID\": \"102\",\n        \"Name\": \"Added Elements\"\n    },\n    \"103\": {\n        \"ID\": \"103\",\n        \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n    },\n    \"104\": {\n        \"ID\": \"104\",\n        \"Name\": \"Spark Boost when HP Passes Threshold\"\n    },\n    \"105\": {\n        \"ID\": \"105\",\n        \"Name\": \"Turn-Based Parameter Boost\"\n    },\n    \"106\": {\n        \"ID\": \"106\",\n        \"Name\": \"Conditional Effect after Activating Overdrive\"\n    },\n    \"107\": {\n        \"ID\": \"107\",\n        \"Name\": \"Add Effect to Leader Skill\"\n    },\n    \"109\": {\n        \"ID\": \"109\",\n        \"Name\": \"BB Gauge Reduction (Chance)\"\n    },\n    \"110\": {\n        \"ID\": \"110\",\n        \"Name\": \"BC Efficacy Reduction (Chance)\"\n    },\n    \"111\": {\n        \"ID\": \"111\",\n        \"Name\": \"Increase Brave Burst Activation Rate\"\n    },\n    \"112\": {\n        \"ID\": \"112\",\n        \"Name\": \"ABP/CBP Boost\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Conditional Effect after HP Threshold\"\n    },\n    \"114\": {\n        \"ID\": \"114\",\n        \"Name\": \"Inflict Buff when Attacked\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n    },\n    \"128\": {\n        \"ID\": \"128\",\n        \"Name\": \"Damage Reduction from Normal Attacks\"\n    },\n    \"143\": {\n        \"ID\": \"143\",\n        \"Name\": \"Break Atk Parameter Limit\"\n    },\n    \"10008\": {\n        \"ID\": \"10008\",\n        \"Name\": \"Damage Reduction from Specific Sources\"\n    },\n    \"11004\": {\n        \"ID\": \"11004\",\n        \"Name\": \"Elemental Spark Damage Boost\"\n    },\n    \"11005\": {\n        \"ID\": \"11005\",\n        \"Name\": \"Elemental Critical Damage Boost\"\n    },\n    \"11006\": {\n        \"ID\": \"11006\",\n        \"Name\": \"Summoner EXP Boost\"\n    },\n    \"11009\": {\n        \"ID\": \"11009\",\n        \"Name\": \"Effect Duration Boost\"\n    },\n    \"66,1\": {\n        \"ID\": \"66,1\",\n        \"Name\": \"\"\n    }\n});\n/**\n * @ignore\n */\nexport const PROC_METADATA = Object.freeze({\n    \"0\": {\n        \"ID\": \"0\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Regular Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Burst Heal\",\n        \"Type\": \"\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Heal over Time\",\n        \"Type\": \"\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"BB Gauge Refill\",\n        \"Type\": \"\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"Drop Rate\",\n        \"Type\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Parameter Reduction\",\n        \"Type\": \"\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"Status Cleanse\",\n        \"Type\": \"\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"Status Infliction\",\n        \"Type\": \"\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"Revive (Guaranteed)\",\n        \"Type\": \"\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"Random Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Lifesteal Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"Status Negation\",\n        \"Type\": \"\"\n    },\n    \"18\": {\n        \"ID\": \"18\",\n        \"Name\": \"Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Gradual BB Gauge Boost\",\n        \"Type\": \"\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"BC Fill on Hit\",\n        \"Type\": \"\"\n    },\n    \"22\": {\n        \"ID\": \"22\",\n        \"Name\": \"Defense Ignore\",\n        \"Type\": \"\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Hit Count Boost\",\n        \"Type\": \"\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Fixed Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Multi-Element Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"Add Elements\",\n        \"Type\": \"\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Instant BB Gauge Fill\",\n        \"Type\": \"\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"Element Shift\",\n        \"Type\": \"\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Buff Removal (Chance)\",\n        \"Type\": \"\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"BB Gauge Reduction (Chance)\",\n        \"Type\": \"\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Leader Skill Lock (Chance)\",\n        \"Type\": \"\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Summon Unit\",\n        \"Type\": \"\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"Status Cure\",\n        \"Type\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Status Infliction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Instant OD Fill\",\n        \"Type\": \"\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Damage over Time (Additional Damage)\",\n        \"Type\": \"\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"BB Atk Boost\",\n        \"Type\": \"\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Non-Lethal Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"HP Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"Piercing Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"Retire\",\n        \"Type\": \"\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Damage Counter\",\n        \"Type\": \"\"\n    },\n    \"51\": {\n        \"ID\": \"51\",\n        \"Name\": \"Parameter Reduction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"BC Efficacy\",\n        \"Type\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Status Counter\",\n        \"Type\": \"\"\n    },\n    \"54\": {\n        \"ID\": \"54\",\n        \"Name\": \"Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Elemental Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"56\": {\n        \"ID\": \"56\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"57\": {\n        \"ID\": \"57\",\n        \"Name\": \"BC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Spark Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BB Atk Reduction\",\n        \"Type\": \"\"\n    },\n    \"60\": {\n        \"ID\": \"60\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BB-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Barrier\",\n        \"Type\": \"\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Selective Buff Wipe\",\n        \"Type\": \"\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"Consecutive Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\",\n        \"Type\": \"\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Revive (Chance)\",\n        \"Type\": \"\"\n    },\n    \"67\": {\n        \"ID\": \"67\",\n        \"Name\": \"BC Fill on Spark\",\n        \"Type\": \"\"\n    },\n    \"68\": {\n        \"ID\": \"68\",\n        \"Name\": \"Damage Reduction when Guarding\",\n        \"Type\": \"\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"BC Fill on Guard\",\n        \"Type\": \"\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"BB Gauge Fill Rate Debuff\",\n        \"Type\": \"\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\",\n        \"Type\": \"\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Element Squad-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"76\": {\n        \"ID\": \"76\",\n        \"Name\": \"Extra Action\",\n        \"Type\": \"\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Self Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"Player EXP Boost\",\n        \"Type\": \"\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"83\": {\n        \"ID\": \"83\",\n        \"Name\": \"Spark Critical\",\n        \"Type\": \"\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"OD Gauge Fill Rate\",\n        \"Type\": \"\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"Heal when Attacked\",\n        \"Type\": \"\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"HP Absorption\",\n        \"Type\": \"\"\n    },\n    \"87\": {\n        \"ID\": \"87\",\n        \"Name\": \"Heal on Spark\",\n        \"Type\": \"\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Self Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Self Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Self Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"94\": {\n        \"ID\": \"94\",\n        \"Name\": \"Normal Attacks Hit All Foes\",\n        \"Type\": \"\"\n    },\n    \"95\": {\n        \"ID\": \"95\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n        \"Type\": \"\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Element Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Gradual OD Fill\",\n        \"Type\": \"\"\n    },\n    \"119\": {\n        \"ID\": \"119\",\n        \"Name\": \"Gradual BC Drain\",\n        \"Type\": \"\"\n    },\n    \"123\": {\n        \"ID\": \"123\",\n        \"Name\": \"OD Gauge Reduction\",\n        \"Type\": \"\"\n    },\n    \"126\": {\n        \"ID\": \"126\",\n        \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n        \"Type\": \"\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Lock On\",\n        \"Type\": \"\"\n    },\n    \"130\": {\n        \"ID\": \"130\",\n        \"Name\": \"Parameter Reduction Counter\",\n        \"Type\": \"\"\n    },\n    \"131\": {\n        \"ID\": \"131\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"132\": {\n        \"ID\": \"132\",\n        \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"901\": {\n        \"ID\": \"901\",\n        \"Name\": \"Raid Heal (on Map)\",\n        \"Type\": \"\"\n    },\n    \"902\": {\n        \"ID\": \"902\",\n        \"Name\": \"Raid Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"903\": {\n        \"ID\": \"903\",\n        \"Name\": \"Raid Boss Reveal\",\n        \"Type\": \"\"\n    },\n    \"905\": {\n        \"ID\": \"905\",\n        \"Name\": \"Raid Teleport\",\n        \"Type\": \"\"\n    },\n    \"906\": {\n        \"ID\": \"906\",\n        \"Name\": \"Raid Flee\",\n        \"Type\": \"\"\n    },\n    \"907\": {\n        \"ID\": \"907\",\n        \"Name\": \"Raid Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"908\": {\n        \"ID\": \"908\",\n        \"Name\": \"Raid Item Drop Rate Boost\",\n        \"Type\": \"\"\n    },\n    \"10000\": {\n        \"ID\": \"10000\",\n        \"Name\": \"Taunt\",\n        \"Type\": \"\"\n    },\n    \"10001\": {\n        \"ID\": \"10001\",\n        \"Name\": \"Stealth\",\n        \"Type\": \"\"\n    },\n    \"10002\": {\n        \"ID\": \"10002\",\n        \"Name\": \"Shield (old)\",\n        \"Type\": \"\"\n    },\n    \"10003\": {\n        \"ID\": \"10003\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"10004\": {\n        \"ID\": \"10004\",\n        \"Name\": \"Damage Immunity\",\n        \"Type\": \"\"\n    },\n    \"10005\": {\n        \"ID\": \"10005\",\n        \"Name\": \"Turn Skip (short duration)\",\n        \"Type\": \"\"\n    },\n    \"10006\": {\n        \"ID\": \"10006\",\n        \"Name\": \"Turn Skip (long duration)\",\n        \"Type\": \"\"\n    },\n    \"10007\": {\n        \"ID\": \"10007\",\n        \"Name\": \"Evasion\",\n        \"Type\": \"\"\n    },\n    \"10009\": {\n        \"ID\": \"10009\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"10012\": {\n        \"ID\": \"10012\",\n        \"Name\": \"OD Drain\",\n        \"Type\": \"\"\n    },\n    \"10015\": {\n        \"ID\": \"10015\",\n        \"Name\": \"Elemental Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"10016\": {\n        \"ID\": \"10016\",\n        \"Name\": \"Element Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"10017\": {\n        \"ID\": \"10017\",\n        \"Name\": \"Elemental Shield\",\n        \"Type\": \"\"\n    },\n    \"10018\": {\n        \"ID\": \"10018\",\n        \"Name\": \"Max HP Reduction\",\n        \"Type\": \"\"\n    },\n    \"10019\": {\n        \"ID\": \"10019\",\n        \"Name\": \"Effect Purge\",\n        \"Type\": \"\"\n    },\n    \"10020\": {\n        \"ID\": \"10020\",\n        \"Name\": \"Piercing Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"10021\": {\n        \"ID\": \"10021\",\n        \"Name\": \"Active Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10022\": {\n        \"ID\": \"10022\",\n        \"Name\": \"Passive Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10023\": {\n        \"ID\": \"10023\",\n        \"Name\": \"HC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"10025\": {\n        \"ID\": \"10025\",\n        \"Name\": \"KO Resistance Negation\",\n        \"Type\": \"\"\n    },\n    \"10026\": {\n        \"ID\": \"10026\",\n        \"Name\": \"Doom\",\n        \"Type\": \"\"\n    },\n    \"11000\": {\n        \"ID\": \"11000\",\n        \"Name\": \"Negative HP-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"11001\": {\n        \"ID\": \"11001\",\n        \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n        \"Type\": \"\"\n    },\n    \"11002\": {\n        \"ID\": \"11002\",\n        \"Name\": \"HP Limit Break, Convert to HP\",\n        \"Type\": \"\"\n    },\n    \"11003\": {\n        \"ID\": \"11003\",\n        \"Name\": \"Effect Negation\",\n        \"Type\": \"\"\n    },\n    \"70001\": {\n        \"ID\": \"70001\",\n        \"Name\": \"Mana Bubble Shield\",\n        \"Type\": \"\"\n    },\n    \"70002\": {\n        \"ID\": \"70002\",\n        \"Name\": \"Recast\",\n        \"Type\": \"\"\n    },\n    \"2-5\": {\n        \"ID\": \"2-5\",\n        \"Name\": \"Burst Heal and DEF/REC Boost\",\n        \"Type\": \"\"\n    }\n});\n","import { PROC_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given proc ID.\n * @param id Proc ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForProc(id, metadata = PROC_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\nimport { ProcBuffType } from './effect-metadata';\n/**\n * @description Determine if a given proc ID's type is an attack.\n * @param id Proc ID to check.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n */\nexport default function isAttackingProcId(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n}\n","export var Ailment;\n(function (Ailment) {\n    Ailment[\"Poison\"] = \"poison\";\n    Ailment[\"Weak\"] = \"weak\";\n    Ailment[\"Sick\"] = \"sick\";\n    Ailment[\"Injury\"] = \"injury\";\n    Ailment[\"Curse\"] = \"curse\";\n    Ailment[\"Paralysis\"] = \"paralysis\";\n    Ailment[\"AttackReduction\"] = \"atk down\";\n    Ailment[\"DefenseReduction\"] = \"def down\";\n    Ailment[\"RecoveryReduction\"] = \"rec down\";\n    Ailment[\"Unknown\"] = \"unknown\";\n})(Ailment || (Ailment = {}));\nexport var ArenaCondition;\n(function (ArenaCondition) {\n    ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n    ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n    ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n    ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n    ArenaCondition[\"hp_min\"] = \"hp_min\";\n    ArenaCondition[\"hp_max\"] = \"hp_max\";\n    ArenaCondition[\"atk_max\"] = \"atk_max\";\n    ArenaCondition[\"random\"] = \"random\";\n})(ArenaCondition || (ArenaCondition = {}));\nexport var MoveType;\n(function (MoveType) {\n    MoveType[\"Moving\"] = \"1\";\n    MoveType[\"Teleporting\"] = \"2\";\n    MoveType[\"NonMoving\"] = \"3\";\n})(MoveType || (MoveType = {}));\nexport var TargetArea;\n(function (TargetArea) {\n    TargetArea[\"Aoe\"] = \"aoe\";\n    TargetArea[\"Single\"] = \"single\";\n    TargetArea[\"Random\"] = \"random\";\n})(TargetArea || (TargetArea = {}));\nexport var TargetAreaShorthand;\n(function (TargetAreaShorthand) {\n    TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n    TargetAreaShorthand[\"Single\"] = \"ST\";\n    TargetAreaShorthand[\"Random\"] = \"RT\";\n})(TargetAreaShorthand || (TargetAreaShorthand = {}));\nexport var TargetType;\n(function (TargetType) {\n    TargetType[\"Self\"] = \"self\";\n    TargetType[\"Party\"] = \"party\";\n    TargetType[\"Enemy\"] = \"enemy\";\n})(TargetType || (TargetType = {}));\nexport var SpPassiveType;\n(function (SpPassiveType) {\n    SpPassiveType[\"AddPassive\"] = \"passive\";\n    SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n    SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n    SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n    SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n})(SpPassiveType || (SpPassiveType = {}));\nexport var SphereTypeName;\n(function (SphereTypeName) {\n    SphereTypeName[\"None\"] = \"None\";\n    SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n    SphereTypeName[\"Critical\"] = \"Critical\";\n    SphereTypeName[\"Drop\"] = \"Drop\";\n    SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n    SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n    SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n    SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n    SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n    SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n    SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n    SphereTypeName[\"Spark\"] = \"Spark\";\n    SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n    SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n    SphereTypeName[\"Special\"] = \"Special\";\n})(SphereTypeName || (SphereTypeName = {}));\nexport var SphereTypeId;\n(function (SphereTypeId) {\n    SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n    SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n    SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n    SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n    SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n    SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n    SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n    SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n    SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n    SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n    SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n    SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n    SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n    SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n    SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n})(SphereTypeId || (SphereTypeId = {}));\nexport var SpCategoryName;\n(function (SpCategoryName) {\n    SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n    SpCategoryName[\"Spark\"] = \"Spark\";\n    SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n    SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n    SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n    SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n    SpCategoryName[\"Drops\"] = \"Drops\";\n    SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n    SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n    SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n    SpCategoryName[\"Special\"] = \"Special\";\n    SpCategoryName[\"Unknown\"] = \"Unknown\";\n})(SpCategoryName || (SpCategoryName = {}));\nexport var SpCategoryId;\n(function (SpCategoryId) {\n    SpCategoryId[\"Parameter Boost\"] = \"1\";\n    SpCategoryId[\"Spark\"] = \"2\";\n    SpCategoryId[\"Critical Hits\"] = \"3\";\n    SpCategoryId[\"Attack Boost\"] = \"4\";\n    SpCategoryId[\"BB Gauge\"] = \"5\";\n    SpCategoryId[\"HP Recovery\"] = \"6\";\n    SpCategoryId[\"Drops\"] = \"7\";\n    SpCategoryId[\"Ailment Resistance\"] = \"8\";\n    SpCategoryId[\"Ailment Infliction\"] = \"9\";\n    SpCategoryId[\"Damage Reduction\"] = \"10\";\n    SpCategoryId[\"Special\"] = \"11\";\n})(SpCategoryId || (SpCategoryId = {}));\nexport var UnitAnimationKey;\n(function (UnitAnimationKey) {\n    UnitAnimationKey[\"Attack\"] = \"attack\";\n    UnitAnimationKey[\"Idle\"] = \"idle\";\n    UnitAnimationKey[\"Move\"] = \"move\";\n})(UnitAnimationKey || (UnitAnimationKey = {}));\nexport var UnitElement;\n(function (UnitElement) {\n    UnitElement[\"Fire\"] = \"fire\";\n    UnitElement[\"Water\"] = \"water\";\n    UnitElement[\"Earth\"] = \"earth\";\n    UnitElement[\"Thunder\"] = \"thunder\";\n    UnitElement[\"Light\"] = \"light\";\n    UnitElement[\"Dark\"] = \"dark\";\n})(UnitElement || (UnitElement = {}));\nexport var UnitGender;\n(function (UnitGender) {\n    UnitGender[\"Male\"] = \"male\";\n    UnitGender[\"Female\"] = \"female\";\n    UnitGender[\"Other\"] = \"other\";\n})(UnitGender || (UnitGender = {}));\nexport var UnitGettingType;\n(function (UnitGettingType) {\n    UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n    UnitGettingType[\"Farmable\"] = \"farmable\";\n    UnitGettingType[\"RareSummon\"] = \"rare summon\";\n    UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n})(UnitGettingType || (UnitGettingType = {}));\nexport var UnitKind;\n(function (UnitKind) {\n    UnitKind[\"Normal\"] = \"normal\";\n    UnitKind[\"Evolution\"] = \"evo\";\n    UnitKind[\"Enhancing\"] = \"enhancing\";\n    UnitKind[\"Sale\"] = \"sale\";\n})(UnitKind || (UnitKind = {}));\nexport var UnitType;\n(function (UnitType) {\n    UnitType[\"Lord\"] = \"lord\";\n    UnitType[\"Anima\"] = \"anima\";\n    UnitType[\"Breaker\"] = \"breaker\";\n    UnitType[\"Guardian\"] = \"guardian\";\n    UnitType[\"Oracle\"] = \"oracle\";\n    UnitType[\"Rex\"] = \"rex\";\n})(UnitType || (UnitType = {}));\nexport var ItemType;\n(function (ItemType) {\n    ItemType[\"Consumable\"] = \"consumable\";\n    ItemType[\"Material\"] = \"material\";\n    ItemType[\"Sphere\"] = \"sphere\";\n    ItemType[\"EvolutionMaterial\"] = \"evomat\";\n    ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n    ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n})(ItemType || (ItemType = {}));\nexport var MimicUnitIds;\n(function (MimicUnitIds) {\n    MimicUnitIds[\"Mimic\"] = \"60142\";\n    MimicUnitIds[\"BatMimic\"] = \"60143\";\n    MimicUnitIds[\"DragonMimic\"] = \"60144\";\n    MimicUnitIds[\"MetalMimic\"] = \"60224\";\n})(MimicUnitIds || (MimicUnitIds = {}));\n/**\n * @description Known values for the monster groups used in {@link IMimicInfo}.\n */\nexport const MimicMonsterGroupMapping = {\n    '1000': MimicUnitIds.Mimic,\n    '1100': MimicUnitIds.BatMimic,\n    '1101': MimicUnitIds.BatMimic,\n    '1200': MimicUnitIds.DragonMimic,\n    '1300': MimicUnitIds.MetalMimic,\n};\n","import getLevelEntryForBurst from './getLevelEntryForBurst';\n/**\n * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get effects from.\n * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n */\nexport default function getEffectsForBurst(burst, level) {\n    const levelEntry = getLevelEntryForBurst(burst, level);\n    return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n}\n","import getEffectId from '../buffs/getEffectId';\nimport { KNOWN_PROC_ID } from '../buffs/constants';\nimport isAttackingProcId from '../buffs/isAttackingProcId';\n/**\n * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n * @param damageFrames Damage frames that each have their own proc ID.\n * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Damage frames entry whose frames are based on the input damage frames.\n */\nexport default function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n    // relevant frames are all effects for healing or attacking\n    const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n    const relevantFrames = inputFrames.filter(frame => {\n        const procId = getEffectId(frame);\n        return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n    });\n    const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n        const keepFirstFrame = index === 0;\n        const numFrames = frameEntry['frame times'].length;\n        const damageDistribution = frameEntry['hit dmg% distribution'];\n        const frameTimes = frameEntry['frame times'];\n        for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n            acc.push({\n                damage: damageDistribution[frameIndex],\n                time: frameTimes[frameIndex],\n            });\n        }\n        return acc;\n    }, []);\n    const resultDamageFramesEntry = {\n        'effect delay time(ms)/frame': effectDelay,\n        'frame times': [],\n        'hit dmg% distribution': [],\n        'hit dmg% distribution (total)': 0,\n        hits: 0,\n    };\n    unifiedFrames.sort((a, b) => a.time - b.time)\n        .forEach(({ time, damage }) => {\n        resultDamageFramesEntry['frame times'].push(time);\n        resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n        resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n    });\n    resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n    return resultDamageFramesEntry;\n}\n","import { PASSIVE_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given passive ID.\n * @param id Passive ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\n/**\n * @description Get the associated name for a given proc ID.\n * @param id Proc ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Name of the proc ID if it exists, empty string otherwise.\n */\nexport default function getNameForProc(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","import getMetadataForPassive from './getMetadataForPassive';\n/**\n * @description Get the associated name for a given passive ID.\n * @param id Passive ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Name of the passive ID if it exists, empty string otherwise.\n */\nexport default function getNameForPassive(id, metadata) {\n    const metadataEntry = getMetadataForPassive(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","/**\n * @description Determine if a given effect object is a proc effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a proc effect based on its properties.\n */\nexport default function isProcEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n}\n","/**\n * @description Determine if a given effect object is a passive effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a passive effect based on its properties.\n */\nexport default function isPassiveEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n}\n","/**\n * @description Provides info at a glance regarding a buff's source and how it stacks.\n */\nexport var BuffStackType;\n(function (BuffStackType) {\n    /**\n     * @description The buff is activated via some skill and lasts for a number of turns.\n     * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n     * from different levels. Two possible levels of sources are:\n     * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n     * 2. Ultimate Brave Burst or Dual Brave Burst\n     */\n    BuffStackType[\"Active\"] = \"active\";\n    /**\n     * @description The buff is always active provided that the source is not nullified.\n     * Most passive buffs can stack with themselves.\n     */\n    BuffStackType[\"Passive\"] = \"passive\";\n    /**\n     * @description The buff is applied for a number of turns once a certain condition is met.\n     * Buffs of the same type are not able to stack.\n     */\n    BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n    /**\n     * @description Only one instance of the buff can be active at a time and can last indefinitely.\n     * A couple examples of this are Barrier and Max HP Boost.\n     */\n    BuffStackType[\"Singleton\"] = \"singleton\";\n    /**\n     * @description The buff's effects immediately apply to the target(s). This differs from singleton\n     * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n     * in the HP bar filling by the sum of those burst heals).\n     */\n    BuffStackType[\"Burst\"] = \"burst\";\n    /**\n     * @description A specific subset of `Burst` type buffs that deal damage to the target.\n     */\n    BuffStackType[\"Attack\"] = \"attack\";\n    /**\n     * @description Only for buffs that cannot be processed by the library yet.\n     */\n    BuffStackType[\"Unknown\"] = \"unknown\";\n})(BuffStackType || (BuffStackType = {}));\nexport var BuffSource;\n(function (BuffSource) {\n    BuffSource[\"BraveBurst\"] = \"bb\";\n    BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n    BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n    BuffSource[\"DualBraveBurst\"] = \"dbb\";\n    BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n    BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n    BuffSource[\"SpEnhancement\"] = \"sp\";\n    BuffSource[\"Item\"] = \"item\";\n    BuffSource[\"LeaderSkill\"] = \"ls\";\n    BuffSource[\"ExtraSkill\"] = \"es\";\n    /**\n     * @description Buffs that result of having a number of OE+ units in the squad.\n     */\n    BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n    /**\n     * @description Buffs based on a units type. See {@link UnitType}.\n     */\n    BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n    /**\n     * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n     * as well as ambient turn reductions present in some late-game quests.\n     */\n    BuffSource[\"Quest\"] = \"quest\";\n})(BuffSource || (BuffSource = {}));\n/**\n * @description Extra element values that can be used in addition to {@link UnitElement}.\n */\nexport var BuffConditionElement;\n(function (BuffConditionElement) {\n    BuffConditionElement[\"Unknown\"] = \"unknown\";\n    BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n    BuffConditionElement[\"All\"] = \"all\";\n})(BuffConditionElement || (BuffConditionElement = {}));\n/**\n * @description Stats on a unit that a buff can affect.\n */\nexport var UnitStat;\n(function (UnitStat) {\n    UnitStat[\"hp\"] = \"hp\";\n    UnitStat[\"atk\"] = \"atk\";\n    UnitStat[\"def\"] = \"def\";\n    UnitStat[\"rec\"] = \"rec\";\n    UnitStat[\"crit\"] = \"crit\";\n    UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n    UnitStat[\"bbGauge\"] = \"bbGauge\";\n    UnitStat[\"odGauge\"] = \"odGauge\";\n    UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n    UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n    UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n    UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n    UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n    UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n    UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n    UnitStat[\"poisonResist\"] = \"poisonResist\";\n    UnitStat[\"weakResist\"] = \"weakResist\";\n    UnitStat[\"sickResist\"] = \"sickResist\";\n    UnitStat[\"injuryResist\"] = \"injuryResist\";\n    UnitStat[\"curseResist\"] = \"curseResist\";\n    UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n    UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n    UnitStat[\"weakInflict\"] = \"weakInflict\";\n    UnitStat[\"sickInflict\"] = \"sickInflict\";\n    UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n    UnitStat[\"curseInflict\"] = \"curseInflict\";\n    UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n    UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n    UnitStat[\"defDownResist\"] = \"defDownResist\";\n    UnitStat[\"recDownResist\"] = \"recDownResist\";\n    UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n    UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n    UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n    UnitStat[\"mitigation\"] = \"mitigation\";\n    UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n    UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n    UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n    UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n    UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n    UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n    UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n    UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n    UnitStat[\"koResistance\"] = \"koResistance\";\n    UnitStat[\"revive\"] = \"revive\";\n    UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n    UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n    UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n    UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n    UnitStat[\"damageReflect\"] = \"damageReflect\";\n    UnitStat[\"targetingModification\"] = \"targetingModification\";\n    UnitStat[\"elementModification\"] = \"elementModification\";\n    UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n    UnitStat[\"extraAction\"] = \"extraAction\";\n    UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n})(UnitStat || (UnitStat = {}));\nexport var IconId;\n(function (IconId) {\n    IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n    IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n    IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n    IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n    IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n    IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n    IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n    IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n    IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n    IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n    IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n    IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n    IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n    IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n    IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n    IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n    IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n    IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n    IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n    IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n    IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n    IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n    IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n    IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n    IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n    IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n    IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n    IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n    IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n    IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n    IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n    IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n    IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n    IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n    IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n    IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n    IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n    IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n    IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n    IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n    IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n    IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n    IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n    IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n    IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n    IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n    IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n    IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n    IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n    IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n    IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n    IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n    IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n    IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n    IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n    IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n    IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n    IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n    IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n    IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n    IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n    IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n    IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n    IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n    IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n    IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n    IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n    IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n    IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n    IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n    IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n    IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n    IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n    IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n    IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n    IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n    IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n    IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n    IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n    IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n    IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n    IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n    IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n    IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n    IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n    IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n    IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n    IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n    IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n    IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n    IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n    IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n    IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n    IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n    IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n    IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n    IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n    IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n    IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n    IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n    IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n    IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n    IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n    IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n    IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n    IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n    IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n    IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n    IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n    IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n    IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n    IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n    IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n    IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n    IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n    IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n    IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n    IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n    IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n    IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n    IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n    IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n    IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n    IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n    IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n    IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n    IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n    IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n    IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n    IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n    IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n    IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n    IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n    IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n    IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n    IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n    IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n    IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n    IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n    IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n    IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n    IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n    IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n    IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n    IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n    IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n    IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n    IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n    IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n    IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n    IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n    IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n    IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n    IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n    IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n    IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n    IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n    IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n    IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n    IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n    IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n    IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n    IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n    IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n    IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n    IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n    IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n    IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n    IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n    IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n    IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n    IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n    IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n    IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n    IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n    IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n    IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n    IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n    IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n    IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n    IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n    IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n    IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n    IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n    IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n    IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n    IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n    IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n    IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n    IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n    IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n    IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n    IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n    IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n    IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n    IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n    IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n    IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n    IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n    IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n    IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n    IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n    IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n    IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n    IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n    IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n    IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n    IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n    IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n    IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n    IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n    IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n    IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n    IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n    IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n    IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n    IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n    IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n    IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n    IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n    IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n    IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n    IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n    IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n    IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n    IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n    IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n    IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n    IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n    IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n    IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n    IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n    IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n    IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n    IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n    IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n    IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n    IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n    IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n    IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n    IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n    IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n    IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n    IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n    IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n    IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n    IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n    IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n    IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n    IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n    IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n    IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n    IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n    IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n    IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n    IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n    IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n    IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n    IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n    IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n    IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n    IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n    IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n    IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n    IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n    IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n    IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n    IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n    IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n    IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n    IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n    IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n    IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n    IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n    IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n    IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n    IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n    IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n    IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n    IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n    IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n    IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n    IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n    IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n    IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n    IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n    IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n    IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n    IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n    IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n    IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n    IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n    IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n    IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n    IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n    IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n    IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n    IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n    IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n    IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n    IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n    IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n    IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n    IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n    IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n    IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n    IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n    IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n    IconId[\"ATK_ST\"] = \"ATK_ST\";\n    IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n    IconId[\"ATK_RT\"] = \"ATK_RT\";\n    IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n    IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n    IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n    IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n    IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n    IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n    IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n    IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n    IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n})(IconId || (IconId = {}));\n/**\n * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n * source of a given buff.\n */\nexport var BuffId;\n(function (BuffId) {\n    BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n    BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n    BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n    BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n    BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n    BuffId[\"passive:1:def\"] = \"passive:1:def\";\n    BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n    BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n    BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n    BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n    BuffId[\"passive:2:def\"] = \"passive:2:def\";\n    BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n    BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n    BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n    BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n    BuffId[\"passive:3:def\"] = \"passive:3:def\";\n    BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n    BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n    BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n    BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n    BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n    BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n    BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n    BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n    BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n    BuffId[\"passive:5:water\"] = \"passive:5:water\";\n    BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n    BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n    BuffId[\"passive:5:light\"] = \"passive:5:light\";\n    BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n    BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n    BuffId[\"passive:8\"] = \"passive:8\";\n    BuffId[\"passive:9\"] = \"passive:9\";\n    BuffId[\"passive:10\"] = \"passive:10\";\n    BuffId[\"passive:11:atk\"] = \"passive:11:atk\";\n    BuffId[\"passive:11:def\"] = \"passive:11:def\";\n    BuffId[\"passive:11:rec\"] = \"passive:11:rec\";\n    BuffId[\"passive:11:crit\"] = \"passive:11:crit\";\n    BuffId[\"passive:12:bc\"] = \"passive:12:bc\";\n    BuffId[\"passive:12:hc\"] = \"passive:12:hc\";\n    BuffId[\"passive:12:item\"] = \"passive:12:item\";\n    BuffId[\"passive:12:zel\"] = \"passive:12:zel\";\n    BuffId[\"passive:12:karma\"] = \"passive:12:karma\";\n    BuffId[\"passive:13\"] = \"passive:13\";\n    BuffId[\"passive:14\"] = \"passive:14\";\n    BuffId[\"passive:15\"] = \"passive:15\";\n    BuffId[\"passive:16\"] = \"passive:16\";\n    BuffId[\"passive:17\"] = \"passive:17\";\n    BuffId[\"passive:19:bc\"] = \"passive:19:bc\";\n    BuffId[\"passive:19:hc\"] = \"passive:19:hc\";\n    BuffId[\"passive:19:item\"] = \"passive:19:item\";\n    BuffId[\"passive:19:zel\"] = \"passive:19:zel\";\n    BuffId[\"passive:19:karma\"] = \"passive:19:karma\";\n    BuffId[\"passive:20:poison\"] = \"passive:20:poison\";\n    BuffId[\"passive:20:weak\"] = \"passive:20:weak\";\n    BuffId[\"passive:20:sick\"] = \"passive:20:sick\";\n    BuffId[\"passive:20:injury\"] = \"passive:20:injury\";\n    BuffId[\"passive:20:curse\"] = \"passive:20:curse\";\n    BuffId[\"passive:20:paralysis\"] = \"passive:20:paralysis\";\n    BuffId[\"passive:20:atk down\"] = \"passive:20:atk down\";\n    BuffId[\"passive:20:def down\"] = \"passive:20:def down\";\n    BuffId[\"passive:20:rec down\"] = \"passive:20:rec down\";\n    BuffId[\"passive:20:unknown\"] = \"passive:20:unknown\";\n    BuffId[\"passive:21:atk\"] = \"passive:21:atk\";\n    BuffId[\"passive:21:def\"] = \"passive:21:def\";\n    BuffId[\"passive:21:rec\"] = \"passive:21:rec\";\n    BuffId[\"passive:21:crit\"] = \"passive:21:crit\";\n    BuffId[\"passive:23\"] = \"passive:23\";\n    BuffId[\"passive:24\"] = \"passive:24\";\n    BuffId[\"passive:25\"] = \"passive:25\";\n    BuffId[\"passive:26\"] = \"passive:26\";\n    BuffId[\"passive:27\"] = \"passive:27\";\n    BuffId[\"passive:28\"] = \"passive:28\";\n    BuffId[\"passive:29\"] = \"passive:29\";\n    BuffId[\"passive:30:atk\"] = \"passive:30:atk\";\n    BuffId[\"passive:30:def\"] = \"passive:30:def\";\n    BuffId[\"passive:30:rec\"] = \"passive:30:rec\";\n    BuffId[\"passive:30:crit\"] = \"passive:30:crit\";\n    BuffId[\"passive:31:damage\"] = \"passive:31:damage\";\n    BuffId[\"passive:31:bc\"] = \"passive:31:bc\";\n    BuffId[\"passive:31:hc\"] = \"passive:31:hc\";\n    BuffId[\"passive:31:item\"] = \"passive:31:item\";\n    BuffId[\"passive:31:zel\"] = \"passive:31:zel\";\n    BuffId[\"passive:31:karma\"] = \"passive:31:karma\";\n    BuffId[\"passive:32\"] = \"passive:32\";\n    BuffId[\"passive:33\"] = \"passive:33\";\n    BuffId[\"passive:34\"] = \"passive:34\";\n    BuffId[\"passive:35\"] = \"passive:35\";\n    BuffId[\"passive:36\"] = \"passive:36\";\n    BuffId[\"passive:37\"] = \"passive:37\";\n    BuffId[\"passive:40:atk\"] = \"passive:40:atk\";\n    BuffId[\"passive:40:def\"] = \"passive:40:def\";\n    BuffId[\"passive:40:rec\"] = \"passive:40:rec\";\n    BuffId[\"passive:41:hp\"] = \"passive:41:hp\";\n    BuffId[\"passive:41:atk\"] = \"passive:41:atk\";\n    BuffId[\"passive:41:def\"] = \"passive:41:def\";\n    BuffId[\"passive:41:rec\"] = \"passive:41:rec\";\n    BuffId[\"passive:41:crit\"] = \"passive:41:crit\";\n    BuffId[\"passive:42:hp\"] = \"passive:42:hp\";\n    BuffId[\"passive:42:atk\"] = \"passive:42:atk\";\n    BuffId[\"passive:42:def\"] = \"passive:42:def\";\n    BuffId[\"passive:42:rec\"] = \"passive:42:rec\";\n    BuffId[\"passive:42:crit\"] = \"passive:42:crit\";\n    BuffId[\"passive:43\"] = \"passive:43\";\n    BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n    BuffId[\"proc:1\"] = \"proc:1\";\n    BuffId[\"proc:2\"] = \"proc:2\";\n    BuffId[\"proc:3\"] = \"proc:3\";\n    BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n    BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n    BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n    BuffId[\"proc:5:def\"] = \"proc:5:def\";\n    BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n    BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n    BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n    BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n    BuffId[\"proc:6:item\"] = \"proc:6:item\";\n    BuffId[\"proc:7\"] = \"proc:7\";\n    BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n    BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n    BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n    BuffId[\"proc:9:def\"] = \"proc:9:def\";\n    BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n    BuffId[\"proc:9:unknown\"] = \"proc:9:unknown\";\n    BuffId[\"proc:10:poison\"] = \"proc:10:poison\";\n    BuffId[\"proc:10:weak\"] = \"proc:10:weak\";\n    BuffId[\"proc:10:sick\"] = \"proc:10:sick\";\n    BuffId[\"proc:10:injury\"] = \"proc:10:injury\";\n    BuffId[\"proc:10:curse\"] = \"proc:10:curse\";\n    BuffId[\"proc:10:paralysis\"] = \"proc:10:paralysis\";\n    BuffId[\"proc:10:atk down\"] = \"proc:10:atk down\";\n    BuffId[\"proc:10:def down\"] = \"proc:10:def down\";\n    BuffId[\"proc:10:rec down\"] = \"proc:10:rec down\";\n    BuffId[\"proc:10:unknown\"] = \"proc:10:unknown\";\n    BuffId[\"proc:11:poison\"] = \"proc:11:poison\";\n    BuffId[\"proc:11:weak\"] = \"proc:11:weak\";\n    BuffId[\"proc:11:sick\"] = \"proc:11:sick\";\n    BuffId[\"proc:11:injury\"] = \"proc:11:injury\";\n    BuffId[\"proc:11:curse\"] = \"proc:11:curse\";\n    BuffId[\"proc:11:paralysis\"] = \"proc:11:paralysis\";\n    BuffId[\"proc:11:atk down\"] = \"proc:11:atk down\";\n    BuffId[\"proc:11:def down\"] = \"proc:11:def down\";\n    BuffId[\"proc:11:rec down\"] = \"proc:11:rec down\";\n    BuffId[\"proc:11:unknown\"] = \"proc:11:unknown\";\n    BuffId[\"proc:12\"] = \"proc:12\";\n    BuffId[\"proc:13\"] = \"proc:13\";\n    BuffId[\"proc:14\"] = \"proc:14\";\n    BuffId[\"proc:16:fire\"] = \"proc:16:fire\";\n    BuffId[\"proc:16:water\"] = \"proc:16:water\";\n    BuffId[\"proc:16:earth\"] = \"proc:16:earth\";\n    BuffId[\"proc:16:thunder\"] = \"proc:16:thunder\";\n    BuffId[\"proc:16:light\"] = \"proc:16:light\";\n    BuffId[\"proc:16:dark\"] = \"proc:16:dark\";\n    BuffId[\"proc:16:all\"] = \"proc:16:all\";\n    BuffId[\"proc:16:unknown\"] = \"proc:16:unknown\";\n    BuffId[\"proc:17:poison\"] = \"proc:17:poison\";\n    BuffId[\"proc:17:weak\"] = \"proc:17:weak\";\n    BuffId[\"proc:17:sick\"] = \"proc:17:sick\";\n    BuffId[\"proc:17:injury\"] = \"proc:17:injury\";\n    BuffId[\"proc:17:curse\"] = \"proc:17:curse\";\n    BuffId[\"proc:17:paralysis\"] = \"proc:17:paralysis\";\n    BuffId[\"proc:18\"] = \"proc:18\";\n    BuffId[\"proc:19\"] = \"proc:19\";\n    BuffId[\"proc:20\"] = \"proc:20\";\n    BuffId[\"proc:22\"] = \"proc:22\";\n    BuffId[\"proc:23\"] = \"proc:23\";\n    BuffId[\"proc:24:atk\"] = \"proc:24:atk\";\n    BuffId[\"proc:24:def\"] = \"proc:24:def\";\n    BuffId[\"proc:24:rec\"] = \"proc:24:rec\";\n    BuffId[\"proc:26\"] = \"proc:26\";\n    BuffId[\"proc:27\"] = \"proc:27\";\n    BuffId[\"proc:28\"] = \"proc:28\";\n    BuffId[\"proc:29\"] = \"proc:29\";\n    BuffId[\"proc:30:fire\"] = \"proc:30:fire\";\n    BuffId[\"proc:30:water\"] = \"proc:30:water\";\n    BuffId[\"proc:30:earth\"] = \"proc:30:earth\";\n    BuffId[\"proc:30:thunder\"] = \"proc:30:thunder\";\n    BuffId[\"proc:30:light\"] = \"proc:30:light\";\n    BuffId[\"proc:30:dark\"] = \"proc:30:dark\";\n    BuffId[\"proc:30:unknown\"] = \"proc:30:unknown\";\n    BuffId[\"proc:31:flat\"] = \"proc:31:flat\";\n    BuffId[\"proc:31:percent\"] = \"proc:31:percent\";\n    BuffId[\"proc:32:fire\"] = \"proc:32:fire\";\n    BuffId[\"proc:32:water\"] = \"proc:32:water\";\n    BuffId[\"proc:32:earth\"] = \"proc:32:earth\";\n    BuffId[\"proc:32:thunder\"] = \"proc:32:thunder\";\n    BuffId[\"proc:32:light\"] = \"proc:32:light\";\n    BuffId[\"proc:32:dark\"] = \"proc:32:dark\";\n    BuffId[\"proc:32:unknown\"] = \"proc:32:unknown\";\n    BuffId[\"proc:33\"] = \"proc:33\";\n    BuffId[\"proc:34:flat\"] = \"proc:34:flat\";\n    BuffId[\"proc:34:percent\"] = \"proc:34:percent\";\n    BuffId[\"proc:36\"] = \"proc:36\";\n    BuffId[\"proc:37\"] = \"proc:37\";\n    BuffId[\"proc:38:poison\"] = \"proc:38:poison\";\n    BuffId[\"proc:38:weak\"] = \"proc:38:weak\";\n    BuffId[\"proc:38:sick\"] = \"proc:38:sick\";\n    BuffId[\"proc:38:injury\"] = \"proc:38:injury\";\n    BuffId[\"proc:38:curse\"] = \"proc:38:curse\";\n    BuffId[\"proc:38:paralysis\"] = \"proc:38:paralysis\";\n    BuffId[\"proc:38:atk down\"] = \"proc:38:atk down\";\n    BuffId[\"proc:38:def down\"] = \"proc:38:def down\";\n    BuffId[\"proc:38:rec down\"] = \"proc:38:rec down\";\n    BuffId[\"proc:38:unknown\"] = \"proc:38:unknown\";\n    BuffId[\"proc:39:fire\"] = \"proc:39:fire\";\n    BuffId[\"proc:39:water\"] = \"proc:39:water\";\n    BuffId[\"proc:39:earth\"] = \"proc:39:earth\";\n    BuffId[\"proc:39:thunder\"] = \"proc:39:thunder\";\n    BuffId[\"proc:39:light\"] = \"proc:39:light\";\n    BuffId[\"proc:39:dark\"] = \"proc:39:dark\";\n    BuffId[\"proc:39:unknown\"] = \"proc:39:unknown\";\n    BuffId[\"proc:40:poison\"] = \"proc:40:poison\";\n    BuffId[\"proc:40:weak\"] = \"proc:40:weak\";\n    BuffId[\"proc:40:sick\"] = \"proc:40:sick\";\n    BuffId[\"proc:40:injury\"] = \"proc:40:injury\";\n    BuffId[\"proc:40:curse\"] = \"proc:40:curse\";\n    BuffId[\"proc:40:paralysis\"] = \"proc:40:paralysis\";\n    BuffId[\"proc:40:atk down\"] = \"proc:40:atk down\";\n    BuffId[\"proc:40:def down\"] = \"proc:40:def down\";\n    BuffId[\"proc:40:rec down\"] = \"proc:40:rec down\";\n    BuffId[\"proc:40:unknown\"] = \"proc:40:unknown\";\n    BuffId[\"proc:42\"] = \"proc:42\";\n    BuffId[\"proc:43\"] = \"proc:43\";\n    BuffId[\"proc:44\"] = \"proc:44\";\n})(BuffId || (BuffId = {}));\n","import { BuffSource, } from './buff-types';\nimport { SpPassiveType, TargetType, TargetArea, } from '../../datamine-types';\n/**\n * @description Helper function for creating an entry to be used in the `sources`\n * property of {@link IBuff}.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourceEntryFromContext(context) {\n    return `${context.source}-${context.sourceId}`;\n}\n/**\n * @description Helper function for creating an entries array to be used in the `sources`\n * property of {@link IBuff}. It handles setting the order of the sources.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourcesFromContext(context) {\n    const resultArray = Array.isArray(context.previousSources)\n        ? context.previousSources.slice()\n        : [];\n    // Ensure that the current source is at the beginning of the array\n    resultArray.unshift(createSourceEntryFromContext(context));\n    return resultArray;\n}\n/**\n * @description Given the conditions in an extra skill effect, normalize them into\n * a simpler object containing the IDs of each condition type.\n * @param effect Extra skill effect to process conditions from.\n * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n */\nexport function processExtraSkillConditions(effect) {\n    const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n    const aggregate = {\n        units: new Set(),\n        items: new Set(),\n        sphereTypes: new Set(),\n        unknowns: new Set(),\n    };\n    conditions.forEach((condition, index) => {\n        if ('sphere category required (raw)' in condition) {\n            aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n        }\n        else if ('item required' in condition) {\n            condition['item required'].forEach((item) => {\n                aggregate.items.add(item);\n            });\n        }\n        else if ('unit required' in condition) {\n            condition['unit required'].forEach((unit) => {\n                aggregate.units.add(`${unit.id}`);\n            });\n        }\n        else {\n            aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n        }\n    });\n    // filter out properties that have no entries\n    const result = Object.entries(aggregate)\n        .filter((entry) => entry[1].size > 0)\n        .reduce((acc, entry) => {\n        acc[entry[0]] = Array.from(entry[1]);\n        return acc;\n    }, {});\n    return result;\n}\n/**\n * @description Extract the target type and target area of a given passive effect.\n * @param effect Passive effect to extract target data from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns The target data for the given effect and context. There are only two possible values:\n * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n */\nexport function getPassiveTargetData(effect, context) {\n    const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n        (effect.sp_type === SpPassiveType.EnhancePassive);\n    const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n    return {\n        targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n        targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n    };\n}\n/**\n * @description Extract the target type and target area of a given proc effect.\n * @param effect Proc effect to extract target data from.\n * @returns The target data for the given effect and context.\n */\nexport function getProcTargetData(effect) {\n    return {\n        targetArea: effect['target area'],\n        targetType: effect['target type'],\n    };\n}\n/**\n * @description Try to parse the given value into a number or return a value if it is not a number.\n * @param value Value to parse into a number.\n * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n */\nexport function parseNumberOrDefault(value, defaultValue = 0) {\n    return (value !== null && !isNaN(value)) ? +value : defaultValue;\n}\n/**\n * @description Create an object denoting values that cannot be processed yet. To be used\n * in the `value` property of `IBuff` as needed.\n * @param params Array of values that cannot be processed yet.\n * @param startIndex The first index before which we know how to process an effect's values.\n * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n */\nexport function createUnknownParamsValue(params = [], startIndex = 0) {\n    let hasValue = false;\n    const result = params\n        .reduce((acc, value, index) => {\n        if (value && value !== '0') {\n            acc[`param_${startIndex + index}`] = value;\n            hasValue = true;\n        }\n        return acc;\n    }, {});\n    return hasValue ? result : (void 0);\n}\n/**\n * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n * @param source Source value to check.\n * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n * bonded super brave burst, or bonded dual brave burst.\n */\nexport function buffSourceIsBurstType(source) {\n    return !!source && [\n        BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n        BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n    ].includes(source);\n}\n","import { UnitElement, Ailment, TargetArea } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { getProcTargetData, createSourcesFromContext, parseNumberOrDefault, createUnknownParamsValue, buffSourceIsBurstType } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of proc IDs to functions.\n */\nexport function getProcEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const effectDelay = effect['effect delay time(ms)/frame'];\n        return { targetData, sources, effectDelay };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n        effectDelay,\n        sources, value: unknownParams }, targetData));\n    const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n        sources, value: {\n            buffs,\n            duration: duration,\n        } }, targetData));\n    const createNoParamsEntry = ({ originalId, sources, }) => ({\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    });\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n    };\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    /**\n     * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n     * checked if all other known values in the effect are 0.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @param turnDuration Parsed turn duration value to check.\n     * @param injectionContext Object whose main use is for injecting methods in testing.\n     * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n     */\n    const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n        let result = turnDuration !== 0;\n        if (result) {\n            result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n        }\n        return result;\n    };\n    /**\n     * @description Helper function to get attack information common across most attacks from the conversion context.\n     * @param context Given context that may contain attack information like damage frames.\n     * @returns Extracted attack information from the context (with defaults where applicable).\n     */\n    const getAttackInformationFromContext = (context) => {\n        const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n        const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n        return {\n            hits,\n            distribution,\n        };\n    };\n    const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            value = parseParamValue(rawValue);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect[effectValueKey]);\n            turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [buffId],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:1', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'healerRec%': 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            let recX, recY;\n            let extraParams;\n            [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n            params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['heal low'];\n            params.healHigh = effect['heal high'];\n            params['healerRec%'] = effect['rec added% (from healer)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const results = [];\n        if (params.healHigh !== 0 || params.healLow !== 0) {\n            results.push(Object.assign({ id: 'proc:2', originalId,\n                sources,\n                effectDelay, value: params }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'targetRec%': 0,\n            turnDuration: '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let rec;\n            let extraParams;\n            [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['gradual heal low'];\n            params.healHigh = effect['gradual heal high'];\n            params['targetRec%'] = effect['rec added% (from target)'];\n            params.turnDuration = effect['gradual heal turns (8)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n        const results = [];\n        if (hasAnyHealValues) {\n            results.push(Object.assign({ id: 'proc:3', originalId,\n                sources,\n                effectDelay, duration: params.turnDuration, value: {\n                    healLow: params.healLow,\n                    healHigh: params.healHigh,\n                    'targetRec%': params['targetRec%'],\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:3'],\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('bb bc fill' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill']);\n            }\n            if ('bb bc fill%' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n            }\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            element: BuffConditionElement.All,\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    params[statType] = parseNumberOrDefault(effect[effectKey]);\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('6', (effect, context, injectionContext) => {\n        const originalId = '6';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            turnDuration: '0',\n        };\n        const dropRateProperties = ['bc', 'hc', 'item'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.bc = effect['bc drop rate% buff (10)'];\n            params.hc = effect['hc drop rate% buff (9)'];\n            params.item = effect['item drop rate% buff (11)'];\n            params.turnDuration = effect['drop buff rate turns'];\n        }\n        dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n        const results = [];\n        if (hasAnyRates) {\n            dropRateProperties.forEach((key) => {\n                const value = params[key];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:6:${key}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('7', (effect, context, injectionContext) => {\n        const originalId = '7';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHpPercent = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:7', originalId,\n                sources,\n                effectDelay, value: recoveredHpPercent }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const originalId = '8';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatHpBoost = 0;\n        let percentHpBoost = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n            flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n            percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('max hp increase' in effect) {\n                flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n            }\n            if ('max hp% increase' in effect) {\n                percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n            }\n        }\n        const results = [];\n        if (flatHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:flat', originalId,\n                sources,\n                effectDelay, value: flatHpBoost }, targetData));\n        }\n        if (percentHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:percent', originalId,\n                sources,\n                effectDelay, value: percentHpBoost }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        const originalId = '9';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const STAT_TYPE_MAPPING = {\n            0: 'atk',\n            1: 'def',\n            2: 'rec',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const params = {\n            element: BuffConditionElement.All,\n            statReductionEntries: [],\n            turnDuration: 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n            [\n                [statType1, value1, procChance1],\n                [statType2, value2, procChance2],\n            ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                const statType = parseNumberOrDefault(rawStatType) - 1;\n                const value = parseNumberOrDefault(rawValue);\n                const chance = parseNumberOrDefault(rawProcChance);\n                if (statType === 3) { // all stats\n                    params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                        stat,\n                        value,\n                        chance,\n                    })));\n                }\n                else {\n                    params.statReductionEntries.push({\n                        stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                        value,\n                        chance,\n                    });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            ['buff #1', 'buff #2'].forEach((buffKey) => {\n                const entry = effect[buffKey];\n                if (entry) {\n                    const chance = parseNumberOrDefault(entry['proc chance%']);\n                    const keys = Object.keys(entry);\n                    coreStatProperties.forEach((statType) => {\n                        const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                        if (effectKey) {\n                            params.statReductionEntries.push({\n                                stat: statType,\n                                value: parseNumberOrDefault(entry[effectKey]),\n                                chance,\n                            });\n                        }\n                    });\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        let hasAnyValues = false;\n        params.statReductionEntries.forEach(({ stat, value, chance }) => {\n            if (value !== 0 || chance !== 0) {\n                hasAnyValues = true;\n                const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                if (params.element !== BuffConditionElement.All) {\n                    buffEntry.conditions = {\n                        targetElements: [params.element],\n                    };\n                }\n                results.push(buffEntry);\n            }\n        });\n        if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        const originalId = '10';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 8);\n            const extraParams = splitParams.slice(8);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                if (`remove ${ailment}` in effect) { // mainly for items\n                    curedAilments.push(ailment);\n                }\n            });\n            if ('remove all status ailments' in effect) {\n                curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            let params = splitEffectParams(effect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:${ailment}`, originalId,\n            sources,\n            effectDelay, value: chance }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let reviveToHp = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n            reviveToHp = parseNumberOrDefault(rawReviveToHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:12', originalId,\n                sources,\n                effectDelay, value: reviveToHp }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const originalId = '13';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hits = 0;\n        const { distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawHits;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n            hits = parseNumberOrDefault(rawHits);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            hits = parseNumberOrDefault(effect.hits);\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push({\n                id: 'proc:13',\n                originalId,\n                sources,\n                effectDelay,\n                value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }),\n                targetType: targetData.targetType,\n                targetArea: TargetArea.Random,\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n            'drainLow%': '0',\n            'drainHigh%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n            params['drainLow%'] = effect['hp drain% low'];\n            params['drainHigh%'] = effect['hp drain% high'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:14', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let mitigation = 0;\n        let element;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            mitigation = parseNumberOrDefault(rawMitigation);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n            element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n            if (mitigationKey) {\n                mitigation = parseNumberOrDefault(effect[mitigationKey]);\n            }\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (mitigation !== 0) {\n            results.push(Object.assign({ id: `proc:16:${element}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        const originalId = '17';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    resistances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:17:${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:17:${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('18', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'dmg% reduction',\n            effectTurnDurationKey: 'dmg% reduction turns (36)',\n            buffId: 'proc:18',\n            originalId: '18',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'increase bb gauge gradual',\n            effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'proc:19',\n            originalId: '19',\n        });\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const originalId = '20';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let fillLow = 0;\n        let fillHigh = 0;\n        let chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFillLow, rawFillHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(effect['bc fill when attacked low']);\n            fillHigh = parseNumberOrDefault(effect['bc fill when attacked high']);\n            chance = parseNumberOrDefault(effect['bc fill when attacked%']);\n            turnDuration = parseNumberOrDefault(effect['bc fill when attacked turns (38)']);\n        }\n        const hasAnyFillValues = fillLow !== 0 || fillHigh !== 0;\n        const results = [];\n        if (hasAnyFillValues) {\n            results.push(Object.assign({ id: 'proc:20', originalId,\n                sources,\n                effectDelay, duration: turnDuration, conditions: {\n                    whenAttacked: true,\n                }, value: {\n                    fillLow,\n                    fillHigh,\n                    chance,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:20'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('22', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'defense% ignore',\n            effectTurnDurationKey: 'defense% ignore turns (39)',\n            buffId: 'proc:22',\n            originalId: '22',\n        });\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            value = parseNumberOrDefault(params[0]);\n            turnDuration = parseNumberOrDefault(params[6]);\n            const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'proc:23', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:23'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        const originalId = '24';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let turnDuration = 0;\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawConvertedStat, rawTurnDuration;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            const rawConvertedStat = effect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    stats[statType] = effect[effectKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['% converted turns']);\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:24:${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        convertedStat,\n                        value,\n                    } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:24:${statKey}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        const originalId = '26';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n            turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'proc:26', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:26'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        const originalId = '27';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'hpDamageLow%': '0',\n            'hpDamageHigh%': '0',\n            'hpDamageChance%': '0',\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else {\n            params['hpDamageLow%'] = effect['hp% damage low'];\n            params['hpDamageHigh%'] = effect['hp% damage high'];\n            params['hpDamageChance%'] = effect['hp% damage chance%'];\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:27', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        let value = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            value = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['fixed damage']);\n        }\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || value !== 0) {\n            const entry = Object.assign({ id: 'proc:28', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (value !== 0) {\n                entry.value.value = value;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        const originalId = '29';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let attackElements = [];\n        let unknownParams;\n        if (effect.params) {\n            let element1, element2, element3;\n            let extraParams;\n            [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            [element1, element2, element3].forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            });\n        }\n        else {\n            if (Array.isArray(effect['bb elements'])) {\n                attackElements = effect['bb elements'].slice();\n            }\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n            const entry = Object.assign({ id: 'proc:29', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData);\n            if (attackElements.length > 0) {\n                entry.value.elements = attackElements;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let elements = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            elements = params\n                .slice(0, 6)\n                .filter((p) => p !== '0')\n                .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n            turnDuration = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            if ('elements added' in effect) {\n                if (Array.isArray(effect['elements added'])) {\n                    elements = effect['elements added'];\n                }\n                else {\n                    elements = [BuffConditionElement.Unknown];\n                }\n            }\n            turnDuration = parseNumberOrDefault(effect['elements added turns']);\n        }\n        const results = [];\n        const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n        if (elements.length > 0) {\n            elements.forEach((inputElement) => {\n                const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                results.push(Object.assign({ id: `proc:30:${sanitizedElement}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration }, targetData));\n            });\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('increase bb gauge' in effect) {\n                flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n            }\n            // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n            // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        const originalId = '32';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let element;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, ...extraParams] = splitEffectParams(effect);\n            if (rawElement && rawElement !== '0') {\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            const effectElement = effect['set attack element attribute'];\n            if (effectElement) {\n                const sanitizedElement = Object.values(ELEMENT_MAPPING).find((e) => effectElement === e);\n                if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                    element = sanitizedElement;\n                }\n                else {\n                    element = BuffConditionElement.Unknown;\n                }\n            }\n        }\n        const results = [];\n        if (element) {\n            results.push(Object.assign({ id: `proc:32:${element}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            chance = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(effect['clear buff chance%']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:33', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        const originalId = '34';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatDrainLow = 0, flatDrainHigh = 0;\n        let percentDrainLow = 0, percentDrainHigh = 0;\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n            flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n            flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n            percentDrainLow = parseNumberOrDefault(rawPercentLow);\n            percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n            flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n            percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n            percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n            chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n        }\n        const results = [];\n        if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:flat', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: flatDrainLow,\n                    drainHigh: flatDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:percent', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: percentDrainLow,\n                    drainHigh: percentDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'invalidate LS chance%',\n            effectTurnDurationKey: 'invalidate LS turns (60)',\n            buffId: 'proc:36',\n            originalId: '36',\n        });\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n        const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectParams({ params: rawParams });\n        const positionX = parseNumberOrDefault(rawPositionX);\n        const positionY = parseNumberOrDefault(rawPositionY);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const results = [];\n        if (summonGroup || summonId) {\n            results.push(Object.assign({ id: 'proc:37', originalId,\n                sources,\n                effectDelay, value: {\n                    summonGroup,\n                    summonId,\n                    positionX,\n                    positionY,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('38', (effect, context, injectionContext) => {\n        const originalId = '38';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 9);\n            const extraParams = splitParams.slice(9);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else if (Array.isArray(effect['ailments cured'])) {\n            const effectAilmentsCured = effect['ailments cured'];\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                if (effectAilmentsCured.includes(effectKey)) {\n                    curedAilments.push(ailment);\n                }\n            });\n            if (effectAilmentsCured.length > curedAilments.length) {\n                const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                for (let i = 0; i < unknownAilmentCount; ++i) {\n                    curedAilments.push(Ailment.Unknown);\n                }\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('39', (effect, context, injectionContext) => {\n        const originalId = '39';\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const elements = [];\n        let mitigation = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            const rawElementsMitigated = params.slice(0, 6);\n            mitigation = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            rawElementsMitigated.forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    elements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            Object.values(ELEMENT_MAPPING).forEach((element) => {\n                if (effect[`mitigate ${element} attacks`]) {\n                    elements.push(element);\n                }\n            });\n            mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n            turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n        }\n        const results = [];\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                results.push(Object.assign({ id: `proc:39:${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            });\n        }\n        else if (mitigation !== 0) {\n            results.push(Object.assign({ id: 'proc:39:unknown', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            for (let index = 0; index < 8; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n            turnDuration = parseNumberOrDefault(params[8]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken% buff';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = `${ailment} buff`;\n                }\n                else {\n                    effectKey = `${ailment}% buff`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:${ailment}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: chance }, targetData)));\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                duration: turnDuration,\n                buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:${a}`),\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n        const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectParams({ params: rawParams });\n        const params = {\n            'atkLow%': rawModLow,\n            'atkHigh%': rawModHigh,\n            flatAtk: rawFlatAtk,\n        };\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:42', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        const originalId = '43';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let overdriveFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n            overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n        }\n        const results = [];\n        if (overdriveFill !== 0) {\n            results.push(Object.assign({ id: 'proc:43', originalId,\n                sources,\n                effectDelay, value: overdriveFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const damageParams = {\n            'atk%': '0',\n            flatAtk: '0',\n            'dmg%': '0',\n        };\n        let affectsElement = false, unitIndex = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n            [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n            unitIndex = parseNumberOrDefault(rawUnitIndex);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            damageParams['atk%'] = effect['dot atk%'];\n            damageParams.flatAtk = effect['dot flat atk'];\n            damageParams['dmg%'] = effect['dot dmg%'];\n            affectsElement = !!(effect['dot element affected']);\n            unitIndex = parseNumberOrDefault(effect['dot unit index']);\n            turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n        }\n        const filteredDamageParams = Object.entries(damageParams)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (Object.keys(filteredDamageParams).length > 0) {\n            results.push(Object.assign({ id: 'proc:44', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                    unitIndex }) }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:44'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n}\n","import { UnitElement, UnitType, Ailment, UnitGender } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { createSourcesFromContext, processExtraSkillConditions, getPassiveTargetData, createUnknownParamsValue, parseNumberOrDefault } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of passive IDs to functions.\n */\nexport function getPassiveEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n        X: BuffConditionElement.OmniParadigm,\n    };\n    const TYPE_MAPPING = {\n        1: UnitType.Lord,\n        2: UnitType.Anima,\n        3: UnitType.Breaker,\n        4: UnitType.Guardian,\n        5: UnitType.Oracle,\n        6: UnitType.Rex,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n    const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n    const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n        const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        return { conditionInfo, targetData, sources };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n        sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n    const createNoParamsEntry = ({ originalId, sources, }) => ({\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    });\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n    };\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    let ThresholdType;\n    (function (ThresholdType) {\n        ThresholdType[\"Hp\"] = \"hp\";\n        ThresholdType[\"Bb\"] = \"bb gauge\";\n    })(ThresholdType || (ThresholdType = {}));\n    const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n        return {\n            threshold: parseNumberOrDefault(rawThreshold),\n            requireAbove: rawRequireAboveFlag === '1',\n            type: thresholdType,\n        };\n    };\n    const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n        let threshold = 0, requireAbove = false;\n        if (`${thresholdType} above % ${suffix}` in effect) {\n            threshold = parseNumberOrDefault(effect[`${thresholdType} above % ${suffix}`]);\n            requireAbove = true;\n        }\n        else {\n            threshold = parseNumberOrDefault(effect[`${thresholdType} below % ${suffix}`]);\n            requireAbove = false;\n        }\n        return { threshold, requireAbove, type: thresholdType };\n    };\n    const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n        let conditions;\n        if (type === ThresholdType.Hp) {\n            if (requireAbove) {\n                conditions = { hpGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { hpLessThanOrEqualTo: threshold };\n            }\n        }\n        else if (type === ThresholdType.Bb) {\n            if (requireAbove) {\n                conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { bbGaugeLessThanOrEqualTo: threshold };\n            }\n        }\n        return conditions;\n    };\n    const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let value = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseParamValue(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect[effectKey]);\n        }\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let valueLow, valueHigh, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            valueLow = parseParamValue(rawLowValue);\n            valueHigh = parseParamValue(rawHighValue);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n            valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n            chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n        }\n        const results = [];\n        if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources, value: {\n                    [buffKeyLow]: valueLow,\n                    [buffKeyHigh]: valueHigh,\n                    chance,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            elements: [],\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let element1, element2;\n            [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            [element1, element2].forEach((elementValue) => {\n                if (elementValue && elementValue !== '0') {\n                    stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            if (Array.isArray(typedEffect['elements buffed'])) {\n                stats.elements = typedEffect['elements buffed'];\n            }\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId,\n            sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n        if (stats.elements.length > 0) {\n            stats.elements.forEach((element) => {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                    }\n                });\n            });\n        }\n        else {\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                }\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            unitType: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let unitType;\n            [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            if (unitType && unitType !== '0') {\n                stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.unitType = typedEffect['unit type buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetUnitType = stats.unitType || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:3:${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:4:${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let element;\n        let mitigation = '0';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n            if (element !== BuffConditionElement.Unknown) {\n                mitigation = typedEffect[`${element} resist%`];\n            }\n        }\n        const value = parseNumberOrDefault(mitigation);\n        if (value !== 0) {\n            results.push(Object.assign({ id: `passive:5:${element}`, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'dmg% mitigation',\n            buffId: 'passive:8',\n            originalId: '8',\n        });\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bc fill per turn',\n            buffId: 'passive:9',\n            originalId: '9',\n        });\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'hc effectiveness%',\n            buffId: 'passive:10',\n            originalId: '10',\n        });\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:11:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                const entry = Object.assign({ id: `passive:12:${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '13',\n            effectKeyLow: 'bc fill on enemy defeat low',\n            effectKeyHigh: 'bc fill on enemy defeat high',\n            effectKeyChance: 'bc fill on enemy defeat%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            buffId: 'passive:13',\n        });\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageReduction, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            damageReduction = parseNumberOrDefault(rawReduction);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n            chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n        }\n        const results = [];\n        if (damageReduction !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:14', originalId,\n                sources, value: {\n                    value: damageReduction,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('15', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '15',\n            effectKeyLow: 'hp% recover on enemy defeat low',\n            effectKeyHigh: 'hp% recover on enemy defeat high',\n            effectKeyChance: 'hp% recover on enemy defeat chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            defaultEffectChance: 100,\n            buffId: 'passive:15',\n        });\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n            healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:16', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '17',\n            effectKeyLow: 'hp drain% low',\n            effectKeyHigh: 'hp drain% high',\n            effectKeyChance: 'hp drain chance%',\n            buffKeyLow: 'drainHealLow',\n            buffKeyHigh: 'drainHealHigh',\n            buffId: 'passive:17',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        const originalId = '19';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:19:${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const originalId = '20';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            let params = splitEffectParams(typedEffect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(typedEffect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = [];\n        inflictedAilments.forEach(({ ailment, chance }) => {\n            if (chance !== 0) {\n                results.push(Object.assign({ id: `passive:20:${ailment}`, originalId,\n                    sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('21', (effect, context, injectionContext) => {\n        const originalId = '21';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let rawDuration, extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['first x turns atk% (1)'];\n            stats.def = typedEffect['first x turns def% (3)'];\n            stats.rec = typedEffect['first x turns rec% (5)'];\n            stats.crit = typedEffect['first x turns crit% (7)'];\n            turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:21:${stat}`, originalId,\n                    sources,\n                    value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let fillLow, fillHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n            fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n        }\n        const results = [];\n        if (fillLow !== 0 || fillHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:23', originalId,\n                sources, value: {\n                    fillLow,\n                    fillHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '24',\n            effectKeyLow: 'dmg% to hp when attacked low',\n            effectKeyHigh: 'dmg% to hp when attacked high',\n            effectKeyChance: 'dmg% to hp when attacked chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:24',\n        });\n    });\n    map.set('25', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '25',\n            effectKeyLow: 'bc fill when attacked low',\n            effectKeyHigh: 'bc fill when attacked high',\n            effectKeyChance: 'bc fill when attacked%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:25',\n        });\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '26',\n            effectKeyLow: 'dmg% reflect low',\n            effectKeyHigh: 'dmg% reflect high',\n            effectKeyChance: 'dmg% reflect chance%',\n            buffKeyLow: 'damageReflectLow',\n            buffKeyHigh: 'damageReflectHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:26',\n        });\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'target% chance',\n            buffId: 'passive:27',\n            originalId: '27',\n        });\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let value = 0;\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseNumberOrDefault(rawValue);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect['target% chance']);\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n        }\n        const results = [];\n        if (value !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            const entry = Object.assign({ id: 'passive:28', originalId,\n                sources,\n                value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'ignore def%',\n            buffId: 'passive:29',\n            originalId: '29',\n        });\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:30:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let sparkDamageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawSparkDamageBoost;\n            [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n            });\n        }\n        const results = [];\n        if (sparkDamageBoost !== 0) {\n            results.push(Object.assign({ id: 'passive:31:damage', originalId,\n                sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:31:${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bb gauge fill rate%',\n            buffId: 'passive:32',\n            originalId: '32',\n        });\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh, addedRec;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n            healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n            addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:33', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                    'addedRec%': addedRec,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'crit multiplier%',\n            buffId: 'passive:34',\n            originalId: '34',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n        });\n    });\n    map.set('35', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '35',\n            effectKeyLow: 'bc fill when attacking low',\n            effectKeyHigh: 'bc fill when attacking high',\n            effectKeyChance: 'bc fill when attacking%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onNormalAttack: true }),\n            buffId: 'passive:35',\n        });\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        const originalId = '36';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let additionalActions = 0, damageModifier = 0, chance = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            additionalActions = parseNumberOrDefault(rawAdditionalActions);\n            damageModifier = parseNumberOrDefault(rawDamageModifier);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n        }\n        const results = [];\n        if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:36', originalId,\n                sources, value: {\n                    additionalActions,\n                    damageModifier,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let hitIncreasePerHit = 0, extraHitDamage = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'passive:37', originalId,\n                sources, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawConvertedStat;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const rawConvertedStat = typedEffect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            coreStatProperties.forEach((statType) => {\n                const effectKey = `${statType}% buff`;\n                if (effectKey in typedEffect) {\n                    stats[statType] = typedEffect[effectKey];\n                }\n            });\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:40:${stat}`, originalId,\n                    sources, value: {\n                        convertedStat,\n                        value,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('41', (effect, context, injectionContext) => {\n        const originalId = '41';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            minimumElements: '0',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.minimumElements = typedEffect['unique elements required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const minimumElements = parseNumberOrDefault(stats.minimumElements);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:41:${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minumumUniqueElements: minimumElements }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const GENDER_MAPPING = {\n            0: UnitGender.Other,\n            1: UnitGender.Male,\n            2: UnitGender.Female,\n        };\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            gender: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawGender;\n            [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.gender = typedEffect['gender required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetGender = stats.gender || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:42:${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'take 1 dmg%',\n            buffId: 'passive:43',\n            originalId: '43',\n        });\n    });\n}\n","import { BuffId, UnitStat, BuffStackType, IconId, } from './buff-types';\nimport { TargetArea } from '../../datamine-types';\nexport const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'TURN_DURATION_MODIFICATION': {\n        id: BuffId.TURN_DURATION_MODIFICATION,\n        name: 'Passive Turn Duration Modification',\n        stat: UnitStat.turnDurationModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [\n            (buff && buff.value &&\n                buff.value.duration &&\n                buff.value.duration < 0) ?\n                IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n        ],\n    }, 'NO_PARAMS_SPECIFIED': {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        name: 'No Parameters Specified',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PASSIVE_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n        name: 'Unknown Passive Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n        name: 'Unknown Passive Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'passive:1:hp': {\n        id: BuffId['passive:1:hp'],\n        name: 'Passive HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:1:atk': {\n        id: BuffId['passive:1:atk'],\n        name: 'Passive Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:1:def': {\n        id: BuffId['passive:1:def'],\n        name: 'Passive Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:1:rec': {\n        id: BuffId['passive:1:rec'],\n        name: 'Passive Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:1:crit': {\n        id: BuffId['passive:1:crit'],\n        name: 'Passive Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    } }, (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:2:hp': {\n            id: BuffId['passive:2:hp'],\n            name: 'Passive Elemental HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:2:atk': {\n            id: BuffId['passive:2:atk'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:2:def': {\n            id: BuffId['passive:2:def'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:2:rec': {\n            id: BuffId['passive:2:rec'],\n            name: 'Passive Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:2:crit': {\n            id: BuffId['passive:2:crit'],\n            name: 'Passive Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let unitType = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    unitType = buff.conditions.targetUnitType || '';\n                }\n            }\n            if (typeof unitType !== 'string' || !unitType) {\n                unitType = 'unknown';\n            }\n            let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n            if (!unitType || !(iconKey in IconId)) {\n                iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:3:hp': {\n            id: BuffId['passive:3:hp'],\n            name: 'Passive Type-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:3:atk': {\n            id: BuffId['passive:3:atk'],\n            name: 'Passive Type-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:3:def': {\n            id: BuffId['passive:3:def'],\n            name: 'Passive Type-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:3:rec': {\n            id: BuffId['passive:3:rec'],\n            name: 'Passive Type-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:3:crit': {\n            id: BuffId['passive:3:crit'],\n            name: 'Passive Type-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:4:poison': {\n        id: BuffId['passive:4:poison'],\n        name: 'Passive Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:4:weak': {\n        id: BuffId['passive:4:weak'],\n        name: 'Passive Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:4:sick': {\n        id: BuffId['passive:4:sick'],\n        name: 'Passive Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:4:injury': {\n        id: BuffId['passive:4:injury'],\n        name: 'Passive Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:4:curse': {\n        id: BuffId['passive:4:curse'],\n        name: 'Passive Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:4:paralysis': {\n        id: BuffId['passive:4:paralysis'],\n        name: 'Passive Paralysis Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:5:fire': {\n        id: BuffId['passive:5:fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:5:water': {\n        id: BuffId['passive:5:water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:5:earth': {\n        id: BuffId['passive:5:earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:5:thunder': {\n        id: BuffId['passive:5:thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:5:light': {\n        id: BuffId['passive:5:light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:5:dark': {\n        id: BuffId['passive:5:dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:5:unknown': {\n        id: BuffId['passive:5:unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:8': {\n        id: BuffId['passive:8'],\n        name: 'Passive Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:9': {\n        id: BuffId['passive:9'],\n        name: 'Passive Gradual BB Gauge Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:10': {\n        id: BuffId['passive:10'],\n        name: 'Passive HC Efficacy',\n        stat: UnitStat.hcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HCREC],\n    }, 'passive:11:atk': {\n        id: BuffId['passive:11:atk'],\n        name: 'Passive HP-Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n    }, 'passive:11:def': {\n        id: BuffId['passive:11:def'],\n        name: 'Passive HP-Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n    }, 'passive:11:rec': {\n        id: BuffId['passive:11:rec'],\n        name: 'Passive HP-Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n    }, 'passive:11:crit': {\n        id: BuffId['passive:11:crit'],\n        name: 'Passive HP-Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n    }, 'passive:12:bc': {\n        id: BuffId['passive:12:bc'],\n        name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n    }, 'passive:12:hc': {\n        id: BuffId['passive:12:hc'],\n        name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n    }, 'passive:12:item': {\n        id: BuffId['passive:12:item'],\n        name: 'Passive HP-Conditional Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n    }, 'passive:12:zel': {\n        id: BuffId['passive:12:zel'],\n        name: 'Passive HP-Conditional Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n    }, 'passive:12:karma': {\n        id: BuffId['passive:12:karma'],\n        name: 'Passive HP-Conditional Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n    }, 'passive:13': {\n        id: BuffId['passive:13'],\n        name: 'Passive BB Gauge Fill on Enemy Defeat',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:14': {\n        id: BuffId['passive:14'],\n        name: 'Passive Damage Reduction (Chance)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:15': {\n        id: BuffId['passive:15'],\n        name: 'Passive Heal on Enemy Defeat',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:16': {\n        id: BuffId['passive:16'],\n        name: 'Passive Heal on Battle Win',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:17': {\n        id: BuffId['passive:17'],\n        name: 'HP Absorption',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPABS],\n    }, 'passive:19:bc': {\n        id: BuffId['passive:19:bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'passive:19:hc': {\n        id: BuffId['passive:19:hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'passive:19:item': {\n        id: BuffId['passive:19:item'],\n        name: 'Passive Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'passive:19:zel': {\n        id: BuffId['passive:19:zel'],\n        name: 'Passive Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n    }, 'passive:19:karma': {\n        id: BuffId['passive:19:karma'],\n        name: 'Passive Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n    }, 'passive:20:poison': {\n        id: BuffId['passive:20:poison'],\n        name: 'Passive Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'passive:20:weak': {\n        id: BuffId['passive:20:weak'],\n        name: 'Passive Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'passive:20:sick': {\n        id: BuffId['passive:20:sick'],\n        name: 'Passive Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'passive:20:injury': {\n        id: BuffId['passive:20:injury'],\n        name: 'Passive Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'passive:20:curse': {\n        id: BuffId['passive:20:curse'],\n        name: 'Passive Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'passive:20:paralysis': {\n        id: BuffId['passive:20:paralysis'],\n        name: 'Passive Paralysis Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'passive:20:atk down': {\n        id: BuffId['passive:20:atk down'],\n        name: 'Passive Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'passive:20:def down': {\n        id: BuffId['passive:20:def down'],\n        name: 'Passive Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'passive:20:rec down': {\n        id: BuffId['passive:20:rec down'],\n        name: 'Passive Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'passive:20:unknown': {\n        id: BuffId['passive:20:unknown'],\n        name: 'Passive Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'passive:21:atk': {\n        id: BuffId['passive:21:atk'],\n        name: 'Attack Boost for X Turns',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:21:def': {\n        id: BuffId['passive:21:def'],\n        name: 'Defense Boost for X Turns',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:21:rec': {\n        id: BuffId['passive:21:rec'],\n        name: 'Recovery Boost for X Turns',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:21:crit': {\n        id: BuffId['passive:21:crit'],\n        name: 'Critical Hit Rate Boost for X Turns',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:23': {\n        id: BuffId['passive:23'],\n        name: 'Passive BC Fill on Battle Win',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:24': {\n        id: BuffId['passive:24'],\n        name: 'Passive Heal when Attacked',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'passive:25': {\n        id: BuffId['passive:25'],\n        name: 'Passive BC Fill when Attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:26': {\n        id: BuffId['passive:26'],\n        name: 'Passive Damage Counter',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'passive:27': {\n        id: BuffId['passive:27'],\n        name: 'Passive Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n    }, 'passive:28': {\n        id: BuffId['passive:28'],\n        name: 'Passive HP-Conditional Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n    }, 'passive:29': {\n        id: BuffId['passive:29'],\n        name: 'Passive Defense Ignore (Chance)',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'passive:30:atk': {\n        id: BuffId['passive:30:atk'],\n        name: 'Passive BB Gauge Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n    }, 'passive:30:def': {\n        id: BuffId['passive:30:def'],\n        name: 'Passive BB Gauge Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n    }, 'passive:30:rec': {\n        id: BuffId['passive:30:rec'],\n        name: 'Passive BB Gauge Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n    }, 'passive:30:crit': {\n        id: BuffId['passive:30:crit'],\n        name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n    }, 'passive:31:damage': {\n        id: BuffId['passive:31:damage'],\n        name: 'Passive Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'passive:31:bc': {\n        id: BuffId['passive:31:bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n    }, 'passive:31:hc': {\n        id: BuffId['passive:31:hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n    }, 'passive:31:item': {\n        id: BuffId['passive:31:item'],\n        name: 'Passive Item Drop Rate Boost during Spark',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n    }, 'passive:31:zel': {\n        id: BuffId['passive:31:zel'],\n        name: 'Passive Zel Drop Rate Boost during Spark',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n    }, 'passive:31:karma': {\n        id: BuffId['passive:31:karma'],\n        name: 'Passive Karma Drop Rate Boost during Spark',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n    }, 'passive:32': {\n        id: BuffId['passive:32'],\n        name: 'Passive BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'passive:33': {\n        id: BuffId['passive:33'],\n        name: 'Passive Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:34': {\n        id: BuffId['passive:34'],\n        name: 'Passive Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'passive:35': {\n        id: BuffId['passive:35'],\n        name: 'Passive BB Gauge Fill when Normal Attacking',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:36': {\n        id: BuffId['passive:36'],\n        name: 'Passive Extra Action',\n        stat: UnitStat.extraAction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DBLSTRIKE],\n    }, 'passive:37': {\n        id: BuffId['passive:37'],\n        name: 'Passive Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'passive:40:atk': {\n        id: BuffId['passive:40:atk'],\n        name: 'Passive Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'passive:40:def': {\n        id: BuffId['passive:40:def'],\n        name: 'Passive Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'passive:40:rec': {\n        id: BuffId['passive:40:rec'],\n        name: 'Passive Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'passive:41:hp': {\n        id: BuffId['passive:41:hp'],\n        name: 'Passive Element Squad-based HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n    }, 'passive:41:atk': {\n        id: BuffId['passive:41:atk'],\n        name: 'Passive Element Squad-based Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n    }, 'passive:41:def': {\n        id: BuffId['passive:41:def'],\n        name: 'Passive Element Squad-based Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n    }, 'passive:41:rec': {\n        id: BuffId['passive:41:rec'],\n        name: 'Passive Element Squad-based Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n    }, 'passive:41:crit': {\n        id: BuffId['passive:41:crit'],\n        name: 'Passive Element Squad-based Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let gender = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    gender = buff.conditions.targetGender || '';\n                }\n            }\n            if (typeof gender !== 'string' || !gender) {\n                gender = 'unknown';\n            }\n            let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n            if (!gender || !(iconKey in IconId)) {\n                iconKey = `BUFF_GENDER${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:42:hp': {\n            id: BuffId['passive:42:hp'],\n            name: 'Passive Gender-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:42:atk': {\n            id: BuffId['passive:42:atk'],\n            name: 'Passive Gender-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:42:def': {\n            id: BuffId['passive:42:def'],\n            name: 'Passive Gender-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:42:rec': {\n            id: BuffId['passive:42:rec'],\n            name: 'Passive Gender-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:42:crit': {\n            id: BuffId['passive:42:crit'],\n            name: 'Passive Gender-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:43': {\n        id: BuffId['passive:43'],\n        name: 'Passive Damage Reduction To One (Chance)',\n        stat: UnitStat.reduceDamageToOne,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n    }, 'UNKNOWN_PROC_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n        name: 'Unknown Proc Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n        name: 'Unknown Proc Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'proc:1': {\n        id: BuffId['proc:1'],\n        name: 'Regular Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:2': {\n        id: BuffId['proc:2'],\n        name: 'Burst Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:3': {\n        id: BuffId['proc:3'],\n        name: 'Active Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:4:flat': {\n        id: BuffId['proc:4:flat'],\n        name: 'Burst BB Gauge Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:4:percent': {\n        id: BuffId['proc:4:percent'],\n        name: 'Burst BB Gauge Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:5:atk': {\n            id: BuffId['proc:5:atk'],\n            name: 'Active Regular/Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:5:def': {\n            id: BuffId['proc:5:def'],\n            name: 'Active Regular/Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:5:rec': {\n            id: BuffId['proc:5:rec'],\n            name: 'Active Regular/Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:5:crit': {\n            id: BuffId['proc:5:crit'],\n            name: 'Active Regular/Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'proc:6:bc': {\n        id: BuffId['proc:6:bc'],\n        name: 'Active Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'proc:6:hc': {\n        id: BuffId['proc:6:hc'],\n        name: 'Active Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'proc:6:item': {\n        id: BuffId['proc:6:item'],\n        name: 'Active Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'proc:7': {\n        id: BuffId['proc:7'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:8:flat': {\n        id: BuffId['proc:8:flat'],\n        name: 'Max HP Boost (Flat Amount)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    }, 'proc:8:percent': {\n        id: BuffId['proc:8:percent'],\n        name: 'Max HP Boost (Percentage)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'DOWN'; // default to down since these are reduction buffs\n            if (buff) {\n                if (buff.value && buff.value > 0) {\n                    polarity = 'UP';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:9:atk': {\n            id: BuffId['proc:9:atk'],\n            name: 'Active Regular/Elemental Attack Reduction',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:9:def': {\n            id: BuffId['proc:9:def'],\n            name: 'Active Regular/Elemental Defense Reduction',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:9:rec': {\n            id: BuffId['proc:9:rec'],\n            name: 'Active Regular/Elemental Recovery Reduction',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:9:unknown': {\n            id: BuffId['proc:9:unknown'],\n            name: 'Active Regular/Elemental Unknown Stat Reduction',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.UNKNOWN],\n        },\n    };\n})()), { 'proc:10:poison': {\n        id: BuffId['proc:10:poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:10:weak': {\n        id: BuffId['proc:10:weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:10:sick': {\n        id: BuffId['proc:10:sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:10:injury': {\n        id: BuffId['proc:10:injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:10:curse': {\n        id: BuffId['proc:10:curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:10:paralysis': {\n        id: BuffId['proc:10:paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:10:atk down': {\n        id: BuffId['proc:10:atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWNBLK],\n    }, 'proc:10:def down': {\n        id: BuffId['proc:10:def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWNBLK],\n    }, 'proc:10:rec down': {\n        id: BuffId['proc:10:rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWNBLK],\n    }, 'proc:10:unknown': {\n        id: BuffId['proc:10:unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:11:poison': {\n        id: BuffId['proc:11:poison'],\n        name: 'Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_POISON],\n    }, 'proc:11:weak': {\n        id: BuffId['proc:11:weak'],\n        name: 'Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_WEAK],\n    }, 'proc:11:sick': {\n        id: BuffId['proc:11:sick'],\n        name: 'Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_SICK],\n    }, 'proc:11:injury': {\n        id: BuffId['proc:11:injury'],\n        name: 'Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_INJURY],\n    }, 'proc:11:curse': {\n        id: BuffId['proc:11:curse'],\n        name: 'Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_CURSE],\n    }, 'proc:11:paralysis': {\n        id: BuffId['proc:11:paralysis'],\n        name: 'Paralysis Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_PARALYSIS],\n    }, 'proc:11:atk down': {\n        id: BuffId['proc:11:atk down'],\n        name: 'Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWN],\n    }, 'proc:11:def down': {\n        id: BuffId['proc:11:def down'],\n        name: 'Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWN],\n    }, 'proc:11:rec down': {\n        id: BuffId['proc:11:rec down'],\n        name: 'Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWN],\n    }, 'proc:11:unknown': {\n        id: BuffId['proc:11:unknown'],\n        name: 'Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.DEBUFF_AILMENT],\n    }, 'proc:12': {\n        id: BuffId['proc:12'],\n        name: 'Instant Revive (Guaranteed)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:13': {\n        id: BuffId['proc:13'],\n        name: 'Random Target Damage',\n        stackType: BuffStackType.Attack,\n        icons: () => [IconId.ATK_RT],\n    }, 'proc:14': {\n        id: BuffId['proc:14'],\n        name: 'Lifesteal Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n    }, 'proc:16:fire': {\n        id: BuffId['proc:16:fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:16:water': {\n        id: BuffId['proc:16:water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:16:earth': {\n        id: BuffId['proc:16:earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:16:thunder': {\n        id: BuffId['proc:16:thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:16:light': {\n        id: BuffId['proc:16:light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:16:dark': {\n        id: BuffId['proc:16:dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:16:all': {\n        id: BuffId['proc:16:all'],\n        name: 'Active Elemental Damage Reduction (All Elements)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:16:unknown': {\n        id: BuffId['proc:16:unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:17:poison': {\n        id: BuffId['proc:17:poison'],\n        name: 'Active Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:17:weak': {\n        id: BuffId['proc:17:weak'],\n        name: 'Active Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:17:sick': {\n        id: BuffId['proc:17:sick'],\n        name: 'Active Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:17:injury': {\n        id: BuffId['proc:17:injury'],\n        name: 'Active Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:17:curse': {\n        id: BuffId['proc:17:curse'],\n        name: 'Active Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:17:paralysis': {\n        id: BuffId['proc:17:paralysis'],\n        name: 'Active Paralysis Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:18': {\n        id: BuffId['proc:18'],\n        name: 'Active Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'proc:19': {\n        id: BuffId['proc:19'],\n        name: 'Active Gradual BB Gauge Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:20': {\n        id: BuffId['proc:20'],\n        name: 'Active BC Fill when attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'proc:22': {\n        id: BuffId['proc:22'],\n        name: 'Active Defense Ignore',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'proc:23': {\n        id: BuffId['proc:23'],\n        name: 'Active Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'proc:24:atk': {\n        id: BuffId['proc:24:atk'],\n        name: 'Active Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'proc:24:def': {\n        id: BuffId['proc:24:def'],\n        name: 'Active Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'proc:24:rec': {\n        id: BuffId['proc:24:rec'],\n        name: 'Active Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'proc:26': {\n        id: BuffId['proc:26'],\n        name: 'Active Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'proc:27': {\n        id: BuffId['proc:27'],\n        name: 'Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:28': {\n        id: BuffId['proc:28'],\n        name: 'Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n    }, 'proc:29': {\n        id: BuffId['proc:29'],\n        name: 'Multi-Element Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n    }, 'proc:30:fire': {\n        id: BuffId['proc:30:fire'],\n        name: 'Active Added Element to Attack (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDFIRE],\n    }, 'proc:30:water': {\n        id: BuffId['proc:30:water'],\n        name: 'Active Added Element to Attack (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWATER],\n    }, 'proc:30:earth': {\n        id: BuffId['proc:30:earth'],\n        name: 'Active Added Element to Attack (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDEARTH],\n    }, 'proc:30:thunder': {\n        id: BuffId['proc:30:thunder'],\n        name: 'Active Added Element to Attack (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDTHUNDER],\n    }, 'proc:30:light': {\n        id: BuffId['proc:30:light'],\n        name: 'Active Added Element to Attack (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDLIGHT],\n    }, 'proc:30:dark': {\n        id: BuffId['proc:30:dark'],\n        name: 'Active Added Element to Attack (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDARK],\n    }, 'proc:30:unknown': {\n        id: BuffId['proc:30:unknown'],\n        name: 'Active Added Element to Attack (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDELEMENT],\n    }, 'proc:31:flat': {\n        id: BuffId['proc:31:flat'],\n        name: 'Burst BB Gauge Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:31:percent': {\n        id: BuffId['proc:31:percent'],\n        name: 'Burst BB Gauge Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:32:fire': {\n        id: BuffId['proc:32:fire'],\n        name: 'Element Shift (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTFIRE],\n    }, 'proc:32:water': {\n        id: BuffId['proc:32:water'],\n        name: 'Element Shift (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTWATER],\n    }, 'proc:32:earth': {\n        id: BuffId['proc:32:earth'],\n        name: 'Element Shift (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTEARTH],\n    }, 'proc:32:thunder': {\n        id: BuffId['proc:32:thunder'],\n        name: 'Element Shift (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTTHUNDER],\n    }, 'proc:32:light': {\n        id: BuffId['proc:32:light'],\n        name: 'Element Shift (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTLIGHT],\n    }, 'proc:32:dark': {\n        id: BuffId['proc:32:dark'],\n        name: 'Element Shift (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTDARK],\n    }, 'proc:32:unknown': {\n        id: BuffId['proc:32:unknown'],\n        name: 'Element Shift (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTELEMENT],\n    }, 'proc:33': {\n        id: BuffId['proc:33'],\n        name: 'Buff Removal',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_REMOVEBUFF],\n    }, 'proc:34:flat': {\n        id: BuffId['proc:34:flat'],\n        name: 'Burst BB Gauge Drain (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:34:percent': {\n        id: BuffId['proc:34:percent'],\n        name: 'Burst BB Gauge Drain (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:36': {\n        id: BuffId['proc:36'],\n        name: 'Active Leader Skill Lock',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DISABLELS],\n    }, 'proc:37': {\n        id: BuffId['proc:37'],\n        name: 'Summon Unit',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SUMMONUNIT],\n    }, 'proc:38:poison': {\n        id: BuffId['proc:38:poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:38:weak': {\n        id: BuffId['proc:38:weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:38:sick': {\n        id: BuffId['proc:38:sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:38:injury': {\n        id: BuffId['proc:38:injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:38:curse': {\n        id: BuffId['proc:38:curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:38:paralysis': {\n        id: BuffId['proc:38:paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:38:atk down': {\n        id: BuffId['proc:38:atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWNBLK],\n    }, 'proc:38:def down': {\n        id: BuffId['proc:38:def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWNBLK],\n    }, 'proc:38:rec down': {\n        id: BuffId['proc:38:rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWNBLK],\n    }, 'proc:38:unknown': {\n        id: BuffId['proc:38:unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:39:fire': {\n        id: BuffId['proc:39:fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:39:water': {\n        id: BuffId['proc:39:water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:39:earth': {\n        id: BuffId['proc:39:earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:39:thunder': {\n        id: BuffId['proc:39:thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:39:light': {\n        id: BuffId['proc:39:light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:39:dark': {\n        id: BuffId['proc:39:dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:39:unknown': {\n        id: BuffId['proc:39:unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:40:poison': {\n        id: BuffId['proc:40:poison'],\n        name: 'Active Poison Infliction Added to Attack',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'proc:40:weak': {\n        id: BuffId['proc:40:weak'],\n        name: 'Active Weak Infliction Added to Attack',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'proc:40:sick': {\n        id: BuffId['proc:40:sick'],\n        name: 'Active Sick Infliction Added to Attack',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'proc:40:injury': {\n        id: BuffId['proc:40:injury'],\n        name: 'Active Injury Infliction Added to Attack',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'proc:40:curse': {\n        id: BuffId['proc:40:curse'],\n        name: 'Active Curse Infliction Added to Attack',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'proc:40:paralysis': {\n        id: BuffId['proc:40:paralysis'],\n        name: 'Active Paralysis Infliction Added to Attack',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'proc:40:atk down': {\n        id: BuffId['proc:40:atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:40:def down': {\n        id: BuffId['proc:40:def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:40:rec down': {\n        id: BuffId['proc:40:rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:40:unknown': {\n        id: BuffId['proc:40:unknown'],\n        name: 'Active Unknown Ailment Infliction Added to Attack',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'proc:42': {\n        id: BuffId['proc:42'],\n        name: 'Sacrificial Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n    }, 'proc:43': {\n        id: BuffId['proc:43'],\n        name: 'Burst OD Gauge Fill (Percentage)',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_OVERDRIVEUP],\n    }, 'proc:44': {\n        id: BuffId['proc:44'],\n        name: 'Active Damage over Time',\n        stat: UnitStat.damageOverTime,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_TURNDMG],\n    } }));\n","import { BuffId } from './buff-types';\nimport { getProcEffectToBuffMapping } from './proc-effect-mapping';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PROC_ID } from '../constants';\nimport isProcEffect from '../isProcEffect';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given proc effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            originalId: id,\n            effectDelay: effect['effect delay time(ms)/frame'],\n            targetType: effect['target type'],\n            targetArea: effect['target area'],\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given proc effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Proc effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given proc effect object.\n */\nexport default function convertProcEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isProcEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId } from './buff-types';\nimport isPassiveEffect from '../isPassiveEffect';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PASSIVE_ID } from '../constants';\nimport { getPassiveEffectToBuffMapping } from './passive-effect-mapping';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given passive effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given passive effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Passive effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertPassiveEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isPassiveEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BUFF_METADATA } from './buff-metadata';\n/**\n * @description Get the associated metadata entry for a given buff ID.\n * @param id Buff ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import { TargetArea, } from '../datamine-types';\n/**\n * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n */\nexport default function combineEffectsAndDamageFrames(effects, damageFrames) {\n    let combinedEntries = [];\n    if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n        combinedEntries = effects.map((effect, i) => {\n            const correspondingFrameEntry = damageFrames[i];\n            return {\n                delay: effect['effect delay time(ms)/frame'],\n                effect,\n                frames: correspondingFrameEntry,\n                id: `${effect['proc id'] || effect['unknown proc id']}`,\n                targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                targetType: effect['target type'],\n            };\n        });\n    }\n    return combinedEntries;\n}\n","import getEffectId from './getEffectId';\nimport isPassiveEffect from './isPassiveEffect';\nimport getNameForPassive from './getNameForPassive';\nimport isProcEffect from './isProcEffect';\nimport getNameForProc from './getNameForProc';\n/**\n * @description Get the name of a given object.\n * @param effect Object to get the name from.\n * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n * @returns Name of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectName(effect, metadata = {}) {\n    let resultName = '';\n    const effectId = getEffectId(effect);\n    if (isPassiveEffect(effect)) {\n        resultName = getNameForPassive(effectId, metadata && metadata.passive);\n    }\n    else if (isProcEffect(effect)) {\n        resultName = getNameForProc(effectId, metadata && metadata.proc);\n    }\n    return resultName;\n}\n","/**\n * @description Get the effects of a given extra skill.\n * @param skill Extra skill to get the effects of.\n * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForExtraSkill(skill) {\n    return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n}\n","/**\n * @description Get the effects of a given item.\n * @param item Item to get the effects of, if any are present,\n * @returns Effects of the given item if they exist, an empty array otherwise.\n */\nexport default function getEffectsForItem(item) {\n    let result = [];\n    if (item && item.effect) {\n        if (Array.isArray(item.effect)) {\n            result = item.effect;\n        }\n        else if (Array.isArray(item.effect.effect)) {\n            const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n            result = effect.map(e => {\n                // apply target data to each effect\n                const fullProcEffect = Object.assign({}, e);\n                fullProcEffect['target area'] = targetArea;\n                fullProcEffect['target type'] = targetType;\n                return fullProcEffect;\n            });\n        }\n    }\n    return result;\n}\n","/**\n * @description Generate a URL to display the image with the given item thumbnail filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents the thumbnail image for a given item.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getItemImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/item/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given leader skill.\n * @param skill Leader skill to get the effects of.\n * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForLeaderSkill(skill) {\n    return skill && Array.isArray(skill.effects) ? skill.effects : [];\n}\n","/**\n * @description Generate the file names for each of the image type for a given unit ID.\n * @param id Unit ID to use to generate the file names.\n * @param suffix Optional parameter that's useful for things like alternate art.\n * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n */\nexport default function getUnitImageFileNames(id, suffix = '') {\n    const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n    return {\n        spritesheet: `unit_anime_${fileNameSuffix}`,\n        battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n        guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n        fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n    };\n}\n","/**\n * @description Generate a URL to display the image with the given unit filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents an image for a given unit.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getUnitImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n}\n","/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n","/**\n * @description Extract the ID of a string in the format of `number@actualId`. If there\n * is no value after the @ character or if no @ character is present, the original ID is returned.\n * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n * @param id Original SP Enhancement Entry ID.\n * @returns The ID of a string in the format of `number@actualId`, or the original input if\n * there is no @ character or no value after the @ character.\n */\nexport default function getSpEntryId(id) {\n    return (typeof id === 'string' && id.split('@')[1]) || id;\n}\n","/**\n * @description Get the effects of a given SP Enhancement Entry.\n * @param entry SP Enhancement Entry to get the effects of.\n * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n */\nexport default function getEffectsForSpEnhancement(entry) {\n    const result = [];\n    if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n        const effectWrappers = entry.skill.effects;\n        effectWrappers.forEach(effectWrapper => {\n            Object.keys(effectWrapper).forEach(spType => {\n                const originalEffect = effectWrapper[spType];\n                const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                result.push(unwrappedEffect);\n            });\n        });\n    }\n    return result;\n}\n","import { SpCategoryName } from '../datamine-types';\n/**\n * @description Get the associated category name with a given category ID.\n * @param categoryId Category ID to get the name of.\n * @returns Name of the given category ID or the string 'Unknown'.\n */\nexport default function getSpCategoryName(categoryId) {\n    let result;\n    const numericalCategoryId = +categoryId;\n    switch (numericalCategoryId) {\n        case 1:\n            result = SpCategoryName['Parameter Boost'];\n            break;\n        case 2:\n            result = SpCategoryName.Spark;\n            break;\n        case 3:\n            result = SpCategoryName['Critical Hits'];\n            break;\n        case 4:\n            result = SpCategoryName['Attack Boost'];\n            break;\n        case 5:\n            result = SpCategoryName['BB Gauge'];\n            break;\n        case 6:\n            result = SpCategoryName['HP Recovery'];\n            break;\n        case 7:\n            result = SpCategoryName.Drops;\n            break;\n        case 8:\n            result = SpCategoryName['Ailment Resistance'];\n            break;\n        case 9:\n            result = SpCategoryName['Ailment Infliction'];\n            break;\n        case 10:\n            result = SpCategoryName['Damage Reduction'];\n            break;\n        case 11:\n            result = SpCategoryName.Special;\n            break;\n        default:\n            result = SpCategoryName.Unknown;\n            break;\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding character code for a given index.\n * It expects an index between 0 and 61 inclusive; will return an empty string if\n * the given value is outside of the range.\n * @param index Index of an SP entry in a given skills array.\n * @returns Corresponding single alphanumeric character to the given index\n * or an empty string if the index is invalid.\n */\nexport default function spIndexToCode(index) {\n    let result = '';\n    let correspondingCharacterCode = -1;\n    if (Number.isInteger(index)) {\n        if (index >= 0 && index <= 25) { // A-Z\n            correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (index >= 26 && index <= 51) { // a-z\n            correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n        }\n        else if (index >= 52 && index <= 61) { // 0-9\n            correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n        }\n    }\n    if (correspondingCharacterCode !== -1) {\n        result = String.fromCharCode(correspondingCharacterCode);\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding index for a given character code.\n * It expects an alphanumeric character and will return -1 otherwise.\n * @param code Character code an SP entry in a given skills array.\n * @returns Corresponding index to the given character or -1 if the\n * character is invalid.\n */\nexport default function spCodeToIndex(code) {\n    let result = -1;\n    let characterCodeOffset = -1;\n    if (!!code && typeof code === 'string' && code.length === 1) {\n        if (code >= 'A' && code <= 'Z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (code >= 'a' && code <= 'z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n        }\n        else if (code >= '0' && code <= '9') {\n            characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n        }\n    }\n    if (characterCodeOffset !== -1) {\n        result = code.charCodeAt(0) - characterCodeOffset;\n    }\n    return result;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n * @param id SP Enhancement entry ID.\n * @param entries Collection of SP Enhancement entries to search in.\n * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n */\nexport default function getSpEntryWithId(id, entries) {\n    const spId = getSpEntryId(id);\n    return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n * @param entry SP Entry to get dependencies for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n */\nexport default function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependencies = [];\n    if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n        const dependencyId = getSpEntryId(entry.dependency);\n        const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n        if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n            addedEntries.add(dependencyEntry);\n            const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n            dependencies = [dependencyEntry].concat(subDependencies);\n        }\n    }\n    return dependencies;\n}\n","/**\n * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n * @param entry SP Entry to get dependents for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n */\nexport default function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependents = [];\n    if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n        const entryId = entry.id;\n        dependents = allEntries\n            .filter(s => {\n            return s.dependency &&\n                s.dependency.includes(entryId) &&\n                !addedEntries.has(s);\n        });\n        dependents.forEach(dependent => {\n            addedEntries.add(dependent);\n            const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n            dependents = dependents.concat(subDependents);\n        });\n    }\n    return dependents;\n}\n","/* NOTE: this file is automatically generated; do not edit this file */\nexport default '0.7.0';\n"]}