{"version":3,"sources":["index.browser.min.js","index.browser.js","bursts/getLevelEntryForBurst.js","buffs/getEffectId.js","buffs/constants.js","buffs/effect-metadata.js","buffs/getMetadataForProc.js","buffs/isAttackingProcId.js","datamine-types.js","bursts/getEffectsForBurst.js","bursts/getExtraAttackDamageFramesEntry.js","buffs/getMetadataForPassive.js","buffs/getNameForProc.js","buffs/getNameForPassive.js","buffs/isProcEffect.js","buffs/isPassiveEffect.js","buffs/parsers/buff-types.js","buffs/parsers/_helpers.js","buffs/parsers/proc-effect-mapping.js","buffs/parsers/passive-effect-mapping.js","buffs/parsers/buff-metadata.js","buffs/parsers/convertProcEffectToBuffs.js","buffs/parsers/convertPassiveEffectToBuffs.js","buffs/parsers/getMetadataForBuff.js","buffs/combineEffectsAndDamageFrames.js","buffs/getEffectName.js","extra-skills/getEffectsForExtraSkill.js","items/getEffectsForItem.js","items/getItemImageUrl.js","leader-skills/getEffectsForLeaderSkill.js","units/getUnitImageFileNames.js","units/getUnitImageUrl.js","sp-enhancements/_constants.js","sp-enhancements/getSpEntryId.js","sp-enhancements/getEffectsForSpEnhancement.js","sp-enhancements/getSpCategoryName.js","sp-enhancements/spIndexToCode.js","sp-enhancements/spCodeToIndex.js","sp-enhancements/getSpEntryWithId.js","sp-enhancements/getAllDependenciesForSpEntry.js","sp-enhancements/getAllEntriesThatDependOnSpEntry.js","version.js"],"names":["bfmtUtilities","exports","getLevelEntryForBurst","burst","level","burstEffectsByLevel","Array","isArray","levels","levelIndex","isNaN","length","getEffectId","effect","resultId","KNOWN_PROC_ID","KNOWN_PASSIVE_ID","ProcBuffType","constants","Object","freeze","__proto__","PASSIVE_METADATA","1","ID","Name","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","19","20","21","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","52","53","55","58","59","61","62","63","64","65","66","69","70","71","72","73","74","75","77","78","79","80","81","82","84","85","86","88","89","90","91","92","93","96","97","99","100","101","102","103","104","105","106","107","109","110","111","112","113","114","127","128","143","10008","11004","11005","11006","11009","66,1","PROC_METADATA","0","Type","18","22","51","54","56","57","60","67","68","76","83","87","94","95","119","123","126","130","131","132","901","902","903","905","906","907","908","10000","10001","10002","10003","10004","10005","10006","10007","10009","10012","10015","10016","10017","10018","10019","10020","10021","10022","10023","10025","10026","11000","11001","11002","11003","70001","70002","2-5","getMetadataForProc","id","metadata","hasOwnProperty","call","isAttackingProcId","metadataEntry","Attack","Ailment","ArenaCondition","MoveType","TargetArea","TargetAreaShorthand","TargetType","SpPassiveType","SphereTypeName","SphereTypeId","SpCategoryName","SpCategoryId","UnitAnimationKey","UnitElement","UnitGender","UnitGettingType","UnitKind","UnitType","ItemType","MimicUnitIds","index","getEffectsForBurst","levelEntry","effects","getExtraAttackDamageFramesEntry","damageFrames","effectDelay","unifiedFrames","filter","frame","procId","BurstHeal","reduce","acc","frameEntry","keepFirstFrame","numFrames","damageDistribution","frameTimes","frameIndex","push","damage","time","resultDamageFramesEntry","effect delay time(ms)/frame","frame times","hit dmg% distribution","hit dmg% distribution (total)","hits","sort","a","b","forEach","getMetadataForPassive","getNameForProc","getNameForPassive","isProcEffect","isPassiveEffect","MimicMonsterGroupMapping","1000","Mimic","1100","BatMimic","1101","1200","DragonMimic","1300","MetalMimic","BuffStackType","BuffSource","BuffConditionElement","UnitStat","IconId","BuffId","datamineTypes","createSourcesFromContext","context","resultArray","previousSources","slice","unshift","source","sourceId","createSourceEntryFromContext","processExtraSkillConditions","conditions","aggregate","units","Set","items","sphereTypes","unknowns","condition","add","item","unit","type_id","condition_id","entries","entry","size","from","getPassiveTargetData","isPartyEffect","LeaderSkill","sp_type","EnhancePassive","Party","targetType","Self","targetArea","Aoe","Single","getProcTargetData","parseNumberOrDefault","value","defaultValue","createUnknownParamsValue","params","startIndex","hasValue","result","mapping","getProcEffectToBuffMapping","reload","map","ELEMENT_MAPPING","All","Fire","Water","Earth","Thunder","Light","Dark","AILMENT_MAPPING","Poison","Weak","Sick","Injury","Curse","Paralysis","AttackReduction","DefenseReduction","RecoveryReduction","retrieveCommonInfoForEffects","injectionContext","targetData","sources","splitEffectParams","split","createUnknownParamsEntry","unknownParams","originalId","assign","UNKNOWN_PROC_BUFF_PARAMS","createTurnDurationEntry","buffs","duration","TURN_DURATION_MODIFICATION","createUnknownParamsEntryFromExtraParams","extraParams","parseProcWithSingleNumericalParameterAndTurnDuration","effectValueKey","effectTurnDurationKey","parseParamValue","rawValue","buffId","turnDuration","rawTurnDuration","results","set","distribution","atk%","flatAtk","crit%","bc%","hc%","dmg%","filteredValue","key","healLow","healHigh","healerRec%","recX","recY","keys","targetRec%","rec","flatFill","percentFill","rawFlatFill","rawPercentFill","element","atk","def","crit","coreStatProperties","rawElement","Unknown","effectElement","statType","effectKey","find","k","startsWith","concat","prop","hasAnyStats","some","statKey","buffEntry","targetElements","bc","hc","dropRateProperties","hasAnyRates","recoveredHpPercent","rawRecoveredHp","flatHpBoost","percentHpBoost","rawFlatBoost","rawPercentBoost","STAT_TYPE_MAPPING","statReductionEntries","statType1","value1","procChance1","statType2","value2","procChance2","rawStatType","rawProcChance","chance","stat","buffKey","hasAnyValues","curedAilments","splitParams","knownParams","p","param","values","ailment","inflictedAilments","numParams","ailmentValue","ailmentType","reviveToHp","rawReviveToHp","rawHits","Random","drainLow%","drainHigh%","mitigation","rawMitigation","mitigationKey","e","includes","AILMENTS_ORDER","resistances","poison","weak","sick","injury","curse","paralysis","rawDuration","ailmentKeysInEffect","correspondingKey","setMapping","Map","getPassiveEffectToBuffMapping","X","OmniParadigm","TYPE_MAPPING","Lord","Anima","Breaker","Guardian","Oracle","Rex","STATS_ORDER","conditionInfo","createaUnknownParamsEntry","UNKNOWN_PASSIVE_BUFF_PARAMS","parsePassiveWithSingleNumericalParameter","typedEffect","stats","hp","elements","element1","element2","elementValue","createBaseStatObject","unitType","targetUnitType","elem","requireHpAbove","hpThreshold","rawRequireHpAboveFlag","rawHpThreshold","hpGreaterThanOrEqualTo","hpLessThanOrEqualTo","DROP_TYPES_ORDER","dropRates","zel","karma","dropType","fillLow","fillHigh","rawFillLow","rawFillHigh","rawChance","onEnemyDefeat","damageReduction","rawReduction","rawHealLow","rawHealHigh","onBattleWin","drainHealLow","drainHealHigh","BUFF_METADATA","UNKNOWN_PASSIVE_EFFECT_ID","name","stackType","icons","UNKNOWN","turnDurationModification","Passive","buff","TURN_DURATION_DOWN","TURN_DURATION_UP","passive:1:hp","BUFF_HPDOWN","BUFF_HPUP","passive:1:atk","BUFF_ATKDOWN","BUFF_ATKUP","passive:1:def","BUFF_DEFDOWN","BUFF_DEFUP","passive:1:rec","BUFF_RECDOWN","BUFF_RECUP","passive:1:crit","BUFF_CRTRATEDOWN","BUFF_CRTRATEUP","createIconGetterForStat","polarity","iconKey","toUpperCase","passive:2:hp","passive:2:atk","passive:2:def","passive:2:rec","passive:2:crit","passive:3:hp","passive:3:atk","passive:3:def","passive:3:rec","passive:3:crit","passive:4:poison","poisonResist","BUFF_POISONBLK","passive:4:weak","weakResist","BUFF_WEAKBLK","passive:4:sick","sickResist","BUFF_SICKBLK","passive:4:injury","injuryResist","BUFF_INJURYBLK","passive:4:curse","curseResist","BUFF_CURSEBLK","passive:4:paralysis","BUFF_PARALYSISBLK","passive:5:fire","fireMitigation","BUFF_FIREDMGDOWN","passive:5:water","waterMitigation","BUFF_WATERDMGDOWN","passive:5:earth","earthMitigation","BUFF_EARTHDMGDOWN","passive:5:thunder","thunderMitigation","BUFF_THUNDERDMGDOWN","passive:5:light","lightMitigation","BUFF_LIGHTDMGDOWN","passive:5:dark","darkMitigation","BUFF_DARKDMGDOWN","passive:5:unknown","BUFF_ELEMENTDMGDOWN","passive:8","BUFF_DAMAGECUT","passive:9","bbGauge","BUFF_BBREC","passive:10","hcEfficacy","BUFF_HCREC","passive:11:atk","BUFF_HPTHRESHATKDOWN","BUFF_HPTHRESHATKUP","passive:11:def","BUFF_HPTHRESHDEFDOWN","BUFF_HPTHRESHDEFUP","passive:11:rec","BUFF_HPTHRESHRECDOWN","BUFF_HPTHRESHRECUP","passive:11:crit","BUFF_HPTHRESHCRTRATEDOWN","BUFF_HPTHRESHCRTRATEUP","passive:12:bc","bcDropRate","BUFF_BCDOWN","BUFF_BCDROP","passive:12:hc","hcDropRate","BUFF_HCDOWN","BUFF_HCDROP","passive:12:item","itemDropRate","BUFF_ITEMDOWN","BUFF_ITEMDROP","passive:12:zel","zelDropRate","BUFF_ZELDOWN","BUFF_ZELDROP","passive:12:karma","karmaDropRate","BUFF_KARMADOWN","BUFF_KARMADROP","passive:13","Burst","passive:14","passive:15","BUFF_HPREC","passive:16","passive:17","healOnAttack","BUFF_HPABS","passive:19:bc","passive:19:hc","passive:19:item","passive:19:zel","passive:19:karma","UNKNOWN_PROC_EFFECT_ID","proc:1","ATK_ST","ATK_AOE","proc:2","proc:3","Active","proc:4:flat","proc:4:percent","hasElement","proc:5:atk","proc:5:def","proc:5:rec","proc:5:crit","proc:6:bc","proc:6:hc","proc:6:item","proc:7","koResistance","Singleton","BUFF_KOBLK","proc:8:flat","proc:8:percent","proc:9:atk","proc:9:def","proc:9:rec","proc:9:unknown","proc:10:poison","proc:10:weak","proc:10:sick","proc:10:injury","proc:10:curse","proc:10:paralysis","proc:10:atk down","atkDownResist","BUFF_ATKDOWNBLK","proc:10:def down","defDownResist","BUFF_DEFDOWNBLK","proc:10:rec down","recDownResist","BUFF_RECDOWNBLK","proc:10:unknown","BUFF_AILMENTBLK","proc:11:poison","poisonInflict","DEBUFF_POISON","proc:11:weak","weakInflict","DEBUFF_WEAK","proc:11:sick","sickInflict","DEBUFF_SICK","proc:11:injury","injuryInflict","DEBUFF_INJURY","proc:11:curse","curseInflict","DEBUFF_CURSE","proc:11:paralysis","DEBUFF_PARALYSIS","proc:11:atk down","atkDownInflict","proc:11:def down","defDownInflict","proc:11:rec down","recDownInflict","proc:11:unknown","DEBUFF_AILMENT","proc:12","proc:13","ATK_RT","proc:14","ATK_ST_HPREC","ATK_AOE_HPREC","proc:16:fire","proc:16:water","proc:16:earth","proc:16:thunder","proc:16:light","proc:16:dark","proc:16:all","proc:16:unknown","proc:17:poison","proc:17:weak","proc:17:sick","proc:17:injury","proc:17:curse","proc:17:paralysis","proc:18","proc:19","index$1","convertProcEffectToBuffs","TypeError","conversionFunction","reloadMapping","get","defaultConversionFunction","convertPassiveEffectToBuffs","getMetadataForBuff","index$2","parsers","combineEffectsAndDamageFrames","combinedEntries","i","correspondingFrameEntry","delay","frames","getEffectName","resultName","effectId","passive","proc","index$3","getEffectsForExtraSkill","skill","index$4","getEffectsForItem","target_area","target_type","fullProcEffect","getItemImageUrl","baseContentUrl","fileName","index$5","getEffectsForLeaderSkill","index$6","getUnitImageFileNames","suffix","fileNameSuffix","spritesheet","battleAvatar","guideAvatar","fullIllustration","getUnitImageUrl","CHARACTER_CODE_FOR_UPPERCASE_A","charCodeAt","CHARACTER_CODE_FOR_LOWERCASE_A","CHARACTER_CODE_FOR_NUMBER_0","getSpEntryId","index$7","getEffectsForSpEnhancement","effectWrapper","spType","originalEffect","unwrappedEffect","getSpCategoryName","categoryId","Spark","Drops","Special","spIndexToCode","correspondingCharacterCode","Number","isInteger","String","fromCharCode","spCodeToIndex","code","characterCodeOffset","getSpEntryWithId","spId","getAllDependenciesForSpEntry","allEntries","addedEntries","dependencies","dependency","dependencyId","dependencyEntry","s","has","subDependencies","getAllEntriesThatDependOnSpEntry","dependents","entryId","dependent","subDependents","bursts","extraSkills","leaderSkills","spEnhancements","version"],"mappings":"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","file":"index.browser.min.js","sourcesContent":["\"use strict\";var bfmtUtilities=function(e){function a(e,a){const t=e&&Array.isArray(e.levels)?e.levels:[];let s;return t[s=null===a||isNaN(a)?t.length-1:+a-1]}function t(e){let a=\"\";return e&&(a=e[\"proc id\"]||e[\"unknown proc id\"]||e[\"passive id\"]||e[\"unknown passive id\"]||\"\"),a}var s,i;!function(e){e.BurstHeal=\"2\",e.Unknown=\"UNKNOWN_PROC_EFFECT_ID\"}(s||(s={})),function(e){e.TriggeredEffect=\"66\",e.Unknown=\"UNKNOWN_PASSIVE_EFFECT_ID\"}(i||(i={}));var n,r=Object.freeze({__proto__:null,get KNOWN_PROC_ID(){return s},get KNOWN_PASSIVE_ID(){return i}});!function(e){e.Attack=\"Attack\"}(n||(n={}));const o=Object.freeze({1:{ID:\"1\",Name:\"Parameter Boost\"},2:{ID:\"2\",Name:\"Elemental Parameter Boost\"},3:{ID:\"3\",Name:\"Type-Based Parameter Boost\"},4:{ID:\"4\",Name:\"Status Negation\"},5:{ID:\"5\",Name:\"Elemental Damage Reduction\"},6:{ID:\"6\",Name:\"\"},7:{ID:\"7\",Name:\"\"},8:{ID:\"8\",Name:\"Damage Reduction\"},9:{ID:\"9\",Name:\"Gradual BB Gauge Boost\"},10:{ID:\"10\",Name:\"HC Efficacy\"},11:{ID:\"11\",Name:\"HP-Conditional Parameter Boost\"},12:{ID:\"12\",Name:\"HP-Conditional Drop Rate Boost\"},13:{ID:\"13\",Name:\"BC Fill on Enemy Defeat\"},14:{ID:\"14\",Name:\"Damage Reduction (Chance)\"},15:{ID:\"15\",Name:\"Heal on Enemy Defeat\"},16:{ID:\"16\",Name:\"Heal on Battle Victory\"},17:{ID:\"17\",Name:\"HP Absorption\"},19:{ID:\"19\",Name:\"Drop Rate Boost\"},20:{ID:\"20\",Name:\"Status Infliction\"},21:{ID:\"21\",Name:\"Parameter Boost for First X Turns\"},23:{ID:\"23\",Name:\"BC Fill on Battle Victory\"},24:{ID:\"24\",Name:\"Heal when Attacked (Chance)\"},25:{ID:\"25\",Name:\"BC Fill when Hit (Chance)\"},26:{ID:\"26\",Name:\"Damage Counter (Chance)\"},27:{ID:\"27\",Name:\"Increased Target Chance\"},28:{ID:\"28\",Name:\"Decreased Target Chance\"},29:{ID:\"29\",Name:\"Defense Ignore (Chance)\"},30:{ID:\"30\",Name:\"BB Conditional Parameter Boost\"},31:{ID:\"31\",Name:\"Spark Damage Boost, Boost Drop Rate on Spark\"},32:{ID:\"32\",Name:\"BC Efficacy\"},33:{ID:\"33\",Name:\"Heal over Time\"},34:{ID:\"34\",Name:\"Critical Damage Boost\"},35:{ID:\"35\",Name:\"BC Fill when Normal Attacking\"},36:{ID:\"36\",Name:\"Extra Action\"},37:{ID:\"37\",Name:\"Hit Count Boost\"},38:{ID:\"38\",Name:\"\"},39:{ID:\"39\",Name:\"\"},40:{ID:\"40\",Name:\"Parameter Conversion\"},41:{ID:\"41\",Name:\"Unique Element Count Conditional Parameter Boost\"},42:{ID:\"42\",Name:\"Gender Parameter Boost\"},43:{ID:\"43\",Name:\"Damage Reduction to 1\"},44:{ID:\"44\",Name:\"Flat Parameter Boost\"},45:{ID:\"45\",Name:\"Critical Damage Negation\"},46:{ID:\"46\",Name:\"Parameter Boost Relative to HP Remainaing\"},47:{ID:\"47\",Name:\"BC Fill on Spark\"},48:{ID:\"48\",Name:\"BC Cost Reduction\"},49:{ID:\"49\",Name:\"BB Gauge Consumption Reduction\"},50:{ID:\"50\",Name:\"Elemental Damage Boost\"},52:{ID:\"52\",Name:\"\"},53:{ID:\"53\",Name:\"Critical/Elemental Weakness Damage Negation\"},55:{ID:\"55\",Name:\"Conditional Effect based on HP Threshold\"},58:{ID:\"58\",Name:\"Damage Reduction when Guarding\"},59:{ID:\"59\",Name:\"BC Fill when Attacked when Guarding\"},61:{ID:\"61\",Name:\"BC Fill on Guard\"},62:{ID:\"62\",Name:\"Elemental Damage Reduction\"},63:{ID:\"63\",Name:\"Elemental Damage Reduction for first X Turns\"},64:{ID:\"64\",Name:\"BB Atk Boost\"},65:{ID:\"65\",Name:\"BC Fill on Critical\"},66:{ID:\"66\",Name:\"Add buff to Brave Burst\"},69:{ID:\"69\",Name:\"Chance KO Resistance (Angel Idol)\"},70:{ID:\"70\",Name:\"OD Gauge Fill Rate Boost\"},71:{ID:\"71\",Name:\"Status Counter\"},72:{ID:\"72\",Name:\"Turn End Effects Activate at Turn Start\"},73:{ID:\"73\",Name:\"Parameter Reduction Negation\"},74:{ID:\"74\",Name:\"Attack Boost on Status Afflicted Foes\"},75:{ID:\"75\",Name:\"Spark Vulnerability\"},77:{ID:\"77\",Name:\"Spark Damage Reduction\"},78:{ID:\"78\",Name:\"Conditional Effect after Damage Received Threshold\"},79:{ID:\"79\",Name:\"BC Fill after Damage Received Threshold\"},80:{ID:\"80\",Name:\"Conditional Effect after Damage Dealt Threshold\"},81:{ID:\"81\",Name:\"BC Fill after Damage Dealt Threshold\"},82:{ID:\"82\",Name:\"Conditional Effect after BC Received Threshold\"},84:{ID:\"84\",Name:\"Conditional Effect after HC Received Threshold\"},85:{ID:\"85\",Name:\"BC Fill after HC Received Threshold\"},86:{ID:\"86\",Name:\"Conditional Effect after Spark Threshold\"},88:{ID:\"88\",Name:\"Conditional Effect on Guard\"},89:{ID:\"89\",Name:\"Conditional Effect on Critical\"},90:{ID:\"90\",Name:\"Status Infliction on Critical\"},91:{ID:\"91\",Name:\"\"},92:{ID:\"92\",Name:\"Negate Defense Ignore\"},93:{ID:\"93\",Name:\"Added Elements\"},96:{ID:\"96\",Name:\"Normal Attacks Hit All Foes\"},97:{ID:\"97\",Name:\"Player EXP Boost\"},99:{ID:\"99\",Name:\"\"},100:{ID:\"100\",Name:\"Spark Critical\"},101:{ID:\"101\",Name:\"Heal on Spark\"},102:{ID:\"102\",Name:\"Added Elements\"},103:{ID:\"103\",Name:\"BB Atk Boost when HP Passes Threshold\"},104:{ID:\"104\",Name:\"Spark Boost when HP Passes Threshold\"},105:{ID:\"105\",Name:\"Turn-Based Parameter Boost\"},106:{ID:\"106\",Name:\"Conditional Effect after Activating Overdrive\"},107:{ID:\"107\",Name:\"Add Effect to Leader Skill\"},109:{ID:\"109\",Name:\"BB Gauge Reduction (Chance)\"},110:{ID:\"110\",Name:\"BC Efficacy Reduction (Chance)\"},111:{ID:\"111\",Name:\"Increase Brave Burst Activation Rate\"},112:{ID:\"112\",Name:\"ABP/CBP Boost\"},113:{ID:\"113\",Name:\"Conditional Effect after HP Threshold\"},114:{ID:\"114\",Name:\"Inflict Buff when Attacked\"},127:{ID:\"127\",Name:\"Additional Damage (Damage over Time) Reduction\"},128:{ID:\"128\",Name:\"Damage Reduction from Normal Attacks\"},143:{ID:\"143\",Name:\"Break Atk Parameter Limit\"},10008:{ID:\"10008\",Name:\"Damage Reduction from Specific Sources\"},11004:{ID:\"11004\",Name:\"Elemental Spark Damage Boost\"},11005:{ID:\"11005\",Name:\"Elemental Critical Damage Boost\"},11006:{ID:\"11006\",Name:\"Summoner EXP Boost\"},11009:{ID:\"11009\",Name:\"Effect Duration Boost\"},\"66,1\":{ID:\"66,1\",Name:\"\"}}),c=Object.freeze({0:{ID:\"0\",Name:\"\",Type:\"\"},1:{ID:\"1\",Name:\"Regular Damage\",Type:\"Attack\"},2:{ID:\"2\",Name:\"Burst Heal\",Type:\"\"},3:{ID:\"3\",Name:\"Heal over Time\",Type:\"\"},4:{ID:\"4\",Name:\"BB Gauge Refill\",Type:\"\"},5:{ID:\"5\",Name:\"Parameter Boost\",Type:\"\"},6:{ID:\"6\",Name:\"Drop Rate\",Type:\"\"},7:{ID:\"7\",Name:\"Guaranteed KO Resistance (Angel Idol)\",Type:\"\"},8:{ID:\"8\",Name:\"Max HP Boost\",Type:\"\"},9:{ID:\"9\",Name:\"Parameter Reduction\",Type:\"\"},10:{ID:\"10\",Name:\"Status Cleanse\",Type:\"\"},11:{ID:\"11\",Name:\"Status Infliction\",Type:\"\"},12:{ID:\"12\",Name:\"Revive (Guaranteed)\",Type:\"\"},13:{ID:\"13\",Name:\"Random Target Damage\",Type:\"Attack\"},14:{ID:\"14\",Name:\"Lifesteal Damage\",Type:\"Attack\"},16:{ID:\"16\",Name:\"Elemental Damage Reduction\",Type:\"\"},17:{ID:\"17\",Name:\"Status Negation\",Type:\"\"},18:{ID:\"18\",Name:\"Damage Reduction\",Type:\"\"},19:{ID:\"19\",Name:\"Gradual BB Gauge Boost\",Type:\"\"},20:{ID:\"20\",Name:\"BC Fill on Hit\",Type:\"\"},22:{ID:\"22\",Name:\"Defense Ignore\",Type:\"\"},23:{ID:\"23\",Name:\"Spark Boost\",Type:\"\"},24:{ID:\"24\",Name:\"Parameter Conversion\",Type:\"\"},26:{ID:\"26\",Name:\"Hit Count Boost\",Type:\"\"},27:{ID:\"27\",Name:\"Proportional Damage\",Type:\"Attack\"},28:{ID:\"28\",Name:\"Fixed Damage\",Type:\"Attack\"},29:{ID:\"29\",Name:\"Multi-Element Damage\",Type:\"Attack\"},30:{ID:\"30\",Name:\"Add Elements\",Type:\"\"},31:{ID:\"31\",Name:\"Instant BB Gauge Fill\",Type:\"\"},32:{ID:\"32\",Name:\"Element Shift\",Type:\"\"},33:{ID:\"33\",Name:\"Buff Removal (Chance)\",Type:\"\"},34:{ID:\"34\",Name:\"BB Gauge Reduction (Chance)\",Type:\"\"},36:{ID:\"36\",Name:\"Leader Skill Lock (Chance)\",Type:\"\"},37:{ID:\"37\",Name:\"Summon Unit\",Type:\"\"},38:{ID:\"38\",Name:\"Status Cure\",Type:\"\"},39:{ID:\"39\",Name:\"Elemental Damage Reduction\",Type:\"\"},40:{ID:\"40\",Name:\"Status Infliction Added to Attack\",Type:\"\"},42:{ID:\"42\",Name:\"\",Type:\"\"},43:{ID:\"43\",Name:\"Instant OD Fill\",Type:\"\"},44:{ID:\"44\",Name:\"Damage over Time (Additional Damage)\",Type:\"\"},45:{ID:\"45\",Name:\"BB Atk Boost\",Type:\"\"},46:{ID:\"46\",Name:\"Non-Lethal Proportional Damage\",Type:\"Attack\"},47:{ID:\"47\",Name:\"HP Scaled Damage\",Type:\"Attack\"},48:{ID:\"48\",Name:\"Piercing Proportional Damage\",Type:\"Attack\"},49:{ID:\"49\",Name:\"Retire\",Type:\"\"},50:{ID:\"50\",Name:\"Damage Counter\",Type:\"\"},51:{ID:\"51\",Name:\"Parameter Reduction Added to Attack\",Type:\"\"},52:{ID:\"52\",Name:\"BC Efficacy\",Type:\"\"},53:{ID:\"53\",Name:\"Status Counter\",Type:\"\"},54:{ID:\"54\",Name:\"Critical Damage Boost\",Type:\"\"},55:{ID:\"55\",Name:\"Elemental Damage Boost\",Type:\"\"},56:{ID:\"56\",Name:\"Chance KO Resistance (Angel Idol)\",Type:\"\"},57:{ID:\"57\",Name:\"BC Efficacy Reduction\",Type:\"\"},58:{ID:\"58\",Name:\"Spark Vulnerability\",Type:\"\"},59:{ID:\"59\",Name:\"BB Atk Reduction\",Type:\"\"},60:{ID:\"60\",Name:\"\",Type:\"\"},61:{ID:\"61\",Name:\"BB-Scaled Damage\",Type:\"Attack\"},62:{ID:\"62\",Name:\"Barrier\",Type:\"\"},63:{ID:\"63\",Name:\"Selective Buff Wipe\",Type:\"\"},64:{ID:\"64\",Name:\"Consecutive Damage\",Type:\"Attack\"},65:{ID:\"65\",Name:\"Attack Boost on Status Afflicted Foes\",Type:\"\"},66:{ID:\"66\",Name:\"Revive (Chance)\",Type:\"\"},67:{ID:\"67\",Name:\"BC Fill on Spark\",Type:\"\"},68:{ID:\"68\",Name:\"Damage Reduction when Guarding\",Type:\"\"},69:{ID:\"69\",Name:\"BC Fill on Guard\",Type:\"\"},70:{ID:\"70\",Name:\"\",Type:\"\"},71:{ID:\"71\",Name:\"BB Gauge Fill Rate Debuff\",Type:\"\"},73:{ID:\"73\",Name:\"Parameter Reduction Negation\",Type:\"\"},75:{ID:\"75\",Name:\"Element Squad-Scaled Damage\",Type:\"Attack\"},76:{ID:\"76\",Name:\"Extra Action\",Type:\"\"},78:{ID:\"78\",Name:\"Self Parameter Boost\",Type:\"\"},79:{ID:\"79\",Name:\"Player EXP Boost\",Type:\"\"},82:{ID:\"82\",Name:\"\",Type:\"\"},83:{ID:\"83\",Name:\"Spark Critical\",Type:\"\"},84:{ID:\"84\",Name:\"OD Gauge Fill Rate\",Type:\"\"},85:{ID:\"85\",Name:\"Heal when Attacked\",Type:\"\"},86:{ID:\"86\",Name:\"HP Absorption\",Type:\"\"},87:{ID:\"87\",Name:\"Heal on Spark\",Type:\"\"},88:{ID:\"88\",Name:\"Self Spark Boost\",Type:\"\"},89:{ID:\"89\",Name:\"Self Parameter Conversion\",Type:\"\"},92:{ID:\"92\",Name:\"Self Max HP Boost\",Type:\"\"},93:{ID:\"93\",Name:\"Spark/Critical/Elemental Weakness Damage Reduction\",Type:\"\"},94:{ID:\"94\",Name:\"Normal Attacks Hit All Foes\",Type:\"\"},95:{ID:\"95\",Name:\"Nullify Sphere Effects (Sphere Lock)\",Type:\"\"},96:{ID:\"96\",Name:\"Nullify Extra Skill Effects (ES Lock)\",Type:\"\"},97:{ID:\"97\",Name:\"Element Target Damage\",Type:\"Attack\"},113:{ID:\"113\",Name:\"Gradual OD Fill\",Type:\"\"},119:{ID:\"119\",Name:\"Gradual BC Drain\",Type:\"\"},123:{ID:\"123\",Name:\"OD Gauge Reduction\",Type:\"\"},126:{ID:\"126\",Name:\"Damage over Time (Additional Damage) Mitigation\",Type:\"\"},127:{ID:\"127\",Name:\"Lock On\",Type:\"\"},130:{ID:\"130\",Name:\"Parameter Reduction Counter\",Type:\"\"},131:{ID:\"131\",Name:\"\",Type:\"\"},132:{ID:\"132\",Name:\"Critical/Elemental Weakness Vulnerability\",Type:\"\"},901:{ID:\"901\",Name:\"Raid Heal (on Map)\",Type:\"\"},902:{ID:\"902\",Name:\"Raid Parameter Boost\",Type:\"\"},903:{ID:\"903\",Name:\"Raid Boss Reveal\",Type:\"\"},905:{ID:\"905\",Name:\"Raid Teleport\",Type:\"\"},906:{ID:\"906\",Name:\"Raid Flee\",Type:\"\"},907:{ID:\"907\",Name:\"Raid Damage Reduction\",Type:\"\"},908:{ID:\"908\",Name:\"Raid Item Drop Rate Boost\",Type:\"\"},1e4:{ID:\"10000\",Name:\"Taunt\",Type:\"\"},10001:{ID:\"10001\",Name:\"Stealth\",Type:\"\"},10002:{ID:\"10002\",Name:\"Shield (old)\",Type:\"\"},10003:{ID:\"10003\",Name:\"Nullify Sphere Effects (Sphere Lock)\",Type:\"\"},10004:{ID:\"10004\",Name:\"Damage Immunity\",Type:\"\"},10005:{ID:\"10005\",Name:\"Turn Skip (short duration)\",Type:\"\"},10006:{ID:\"10006\",Name:\"Turn Skip (long duration)\",Type:\"\"},10007:{ID:\"10007\",Name:\"Evasion\",Type:\"\"},10009:{ID:\"10009\",Name:\"\",Type:\"\"},10012:{ID:\"10012\",Name:\"OD Drain\",Type:\"\"},10015:{ID:\"10015\",Name:\"Elemental Spark Boost\",Type:\"\"},10016:{ID:\"10016\",Name:\"Element Critical Damage Boost\",Type:\"\"},10017:{ID:\"10017\",Name:\"Elemental Shield\",Type:\"\"},10018:{ID:\"10018\",Name:\"Max HP Reduction\",Type:\"\"},10019:{ID:\"10019\",Name:\"Effect Purge\",Type:\"\"},10020:{ID:\"10020\",Name:\"Piercing Damage\",Type:\"Attack\"},10021:{ID:\"10021\",Name:\"Active Healing Reduction\",Type:\"\"},10022:{ID:\"10022\",Name:\"Passive Healing Reduction\",Type:\"\"},10023:{ID:\"10023\",Name:\"HC Efficacy Reduction\",Type:\"\"},10025:{ID:\"10025\",Name:\"KO Resistance Negation\",Type:\"\"},10026:{ID:\"10026\",Name:\"Doom\",Type:\"\"},11e3:{ID:\"11000\",Name:\"Negative HP-Scaled Damage\",Type:\"Attack\"},11001:{ID:\"11001\",Name:\"Max HP% DoT of Weaker Element Enemies\",Type:\"\"},11002:{ID:\"11002\",Name:\"HP Limit Break, Convert to HP\",Type:\"\"},11003:{ID:\"11003\",Name:\"Effect Negation\",Type:\"\"},70001:{ID:\"70001\",Name:\"Mana Bubble Shield\",Type:\"\"},70002:{ID:\"70002\",Name:\"Recast\",Type:\"\"},\"2-5\":{ID:\"2-5\",Name:\"Burst Heal and DEF/REC Boost\",Type:\"\"}});function F(e,a=c){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}function p(e,a){const t=F(e,a);return!!t&&t.Type===n.Attack}var D,l,u,U,E,B,R,f,m,T,d,N,_,A,I,g,P,y,v,O=Object.freeze({__proto__:null,getLevelEntryForBurst:a,getEffectsForBurst:function(e,t){const s=a(e,t);return s&&Array.isArray(s.effects)?s.effects:[]},getExtraAttackDamageFramesEntry:function(e,a=\"0.0/0\",i){const n=(Array.isArray(e)?e:[]).filter(e=>{const a=t(e);return a===s.BurstHeal||p(a,i)}).reduce((e,a,t)=>{const s=0===t,i=a[\"frame times\"].length,n=a[\"hit dmg% distribution\"],r=a[\"frame times\"];for(let a=s?0:1;a<i;++a)e.push({damage:n[a],time:r[a]});return e},[]),r={\"effect delay time(ms)/frame\":a,\"frame times\":[],\"hit dmg% distribution\":[],\"hit dmg% distribution (total)\":0,hits:0};return n.sort((e,a)=>e.time-a.time).forEach(({time:e,damage:a})=>{r[\"frame times\"].push(e),r[\"hit dmg% distribution\"].push(a),r[\"hit dmg% distribution (total)\"]+=a}),r.hits=r[\"frame times\"].length,r}});function k(e,a=o){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}function h(e,a){const t=F(e,a);return!!t&&t.Name||\"\"}function C(e,a){const t=k(e,a);return!!t&&t.Name||\"\"}function b(e){return!!e&&\"object\"==typeof e&&(Object.hasOwnProperty.call(e,\"proc id\")||Object.hasOwnProperty.call(e,\"unknown proc id\"))}function H(e){return!!e&&\"object\"==typeof e&&(Object.hasOwnProperty.call(e,\"passive id\")||Object.hasOwnProperty.call(e,\"unknown passive id\"))}!function(e){e.Poison=\"poison\",e.Weak=\"weak\",e.Sick=\"sick\",e.Injury=\"injury\",e.Curse=\"curse\",e.Paralysis=\"paralysis\",e.AttackReduction=\"atk down\",e.DefenseReduction=\"def down\",e.RecoveryReduction=\"rec down\",e.Unknown=\"unknown\"}(D||(D={})),function(e){e.hp_50pr_under=\"hp_50pr_under\",e.hp_50pr_over=\"hp_50pr_over\",e.hp_75pr_under=\"hp_75pr_under\",e.hp_25pr_under=\"hp_25pr_under\",e.hp_min=\"hp_min\",e.hp_max=\"hp_max\",e.atk_max=\"atk_max\",e.random=\"random\"}(l||(l={})),function(e){e.Moving=\"1\",e.Teleporting=\"2\",e.NonMoving=\"3\"}(u||(u={})),function(e){e.Aoe=\"aoe\",e.Single=\"single\",e.Random=\"random\"}(U||(U={})),function(e){e.Aoe=\"AOE\",e.Single=\"ST\",e.Random=\"RT\"}(E||(E={})),function(e){e.Self=\"self\",e.Party=\"party\",e.Enemy=\"enemy\"}(B||(B={})),function(e){e.AddPassive=\"passive\",e.EnhanceBb=\"add to bb\",e.EnhanceSbb=\"add to sbb\",e.EnhanceUbb=\"add to ubb\",e.EnhancePassive=\"add to passive\"}(R||(R={})),function(e){e.None=\"None\",e[\"Status Enhancing\"]=\"Status Enhancing\",e.Critical=\"Critical\",e.Drop=\"Drop\",e[\"Ailment Inducing\"]=\"Ailment Inducing\",e[\"Element Fusion\"]=\"Element Fusion\",e[\"BB Gauge\"]=\"BB Gauge\",e[\"HP Recovery\"]=\"HP Recovery\",e[\"Target Setting\"]=\"Target Setting\",e[\"Damage Deflecting\"]=\"Damage Deflecting\",e[\"Damage Reducing\"]=\"Damage Reducing\",e.Spark=\"Spark\",e[\"Defense Piercing\"]=\"Defense Piercing\",e[\"Attack Boosting\"]=\"Attack Boosting\",e.Special=\"Special\"}(f||(f={})),function(e){e[e.None=0]=\"None\",e[e[\"Status Enhancing\"]=1]=\"Status Enhancing\",e[e.Critical=2]=\"Critical\",e[e.Drop=3]=\"Drop\",e[e[\"Ailment Inducing\"]=4]=\"Ailment Inducing\",e[e[\"Element Fusion\"]=5]=\"Element Fusion\",e[e[\"BB Gauge\"]=6]=\"BB Gauge\",e[e[\"HP Recovery\"]=7]=\"HP Recovery\",e[e[\"Target Setting\"]=8]=\"Target Setting\",e[e[\"Damage Deflecting\"]=9]=\"Damage Deflecting\",e[e[\"Damage Reducing\"]=10]=\"Damage Reducing\",e[e.Spark=11]=\"Spark\",e[e[\"Defense Piercing\"]=12]=\"Defense Piercing\",e[e[\"Attack Boosting\"]=13]=\"Attack Boosting\",e[e.Special=14]=\"Special\"}(m||(m={})),function(e){e[\"Parameter Boost\"]=\"Parameter Boost\",e.Spark=\"Spark\",e[\"Critical Hits\"]=\"Critical Hits\",e[\"Attack Boost\"]=\"Attack Boost\",e[\"BB Gauge\"]=\"BB Gauge\",e[\"HP Recovery\"]=\"HP Recovery\",e.Drops=\"Drops\",e[\"Ailment Resistance\"]=\"Ailment Resistance\",e[\"Ailment Infliction\"]=\"Ailment Infliction\",e[\"Damage Reduction\"]=\"Damage Reduction\",e.Special=\"Special\",e.Unknown=\"Unknown\"}(T||(T={})),function(e){e[\"Parameter Boost\"]=\"1\",e.Spark=\"2\",e[\"Critical Hits\"]=\"3\",e[\"Attack Boost\"]=\"4\",e[\"BB Gauge\"]=\"5\",e[\"HP Recovery\"]=\"6\",e.Drops=\"7\",e[\"Ailment Resistance\"]=\"8\",e[\"Ailment Infliction\"]=\"9\",e[\"Damage Reduction\"]=\"10\",e.Special=\"11\"}(d||(d={})),function(e){e.Attack=\"attack\",e.Idle=\"idle\",e.Move=\"move\"}(N||(N={})),function(e){e.Fire=\"fire\",e.Water=\"water\",e.Earth=\"earth\",e.Thunder=\"thunder\",e.Light=\"light\",e.Dark=\"dark\"}(_||(_={})),function(e){e.Male=\"male\",e.Female=\"female\",e.Other=\"other\"}(A||(A={})),function(e){e.Ineligible=\"not eligible for achievement\",e.Farmable=\"farmable\",e.RareSummon=\"rare summon\",e.ExtraSkillElgif=\"extra skill elgif\"}(I||(I={})),function(e){e.Normal=\"normal\",e.Evolution=\"evo\",e.Enhancing=\"enhancing\",e.Sale=\"sale\"}(g||(g={})),function(e){e.Lord=\"lord\",e.Anima=\"anima\",e.Breaker=\"breaker\",e.Guardian=\"guardian\",e.Oracle=\"oracle\",e.Rex=\"rex\"}(P||(P={})),function(e){e.Consumable=\"consumable\",e.Material=\"material\",e.Sphere=\"sphere\",e.EvolutionMaterial=\"evomat\",e.SummonerConsumable=\"summoner_consumable\",e.LeaderSkillSphere=\"ls_sphere\"}(y||(y={})),function(e){e.Mimic=\"60142\",e.BatMimic=\"60143\",e.DragonMimic=\"60144\",e.MetalMimic=\"60224\"}(v||(v={}));const W={1e3:v.Mimic,1100:v.BatMimic,1101:v.BatMimic,1200:v.DragonMimic,1300:v.MetalMimic};var S,K,w,L,M,j,G=Object.freeze({__proto__:null,get Ailment(){return D},get ArenaCondition(){return l},get MoveType(){return u},get TargetArea(){return U},get TargetAreaShorthand(){return E},get TargetType(){return B},get SpPassiveType(){return R},get SphereTypeName(){return f},get SphereTypeId(){return m},get SpCategoryName(){return T},get SpCategoryId(){return d},get UnitAnimationKey(){return N},get UnitElement(){return _},get UnitGender(){return A},get UnitGettingType(){return I},get UnitKind(){return g},get UnitType(){return P},get ItemType(){return y},get MimicUnitIds(){return v},MimicMonsterGroupMapping:W});function $(e){const a=Array.isArray(e.previousSources)?e.previousSources.slice():[];return a.unshift(function(e){return`${e.source}-${e.sourceId}`}(e)),a}function x(e){const a=e&&Array.isArray(e.conditions)&&e.conditions||[],t={units:new Set,items:new Set,sphereTypes:new Set,unknowns:new Set};return a.forEach((e,a)=>{\"sphere category required (raw)\"in e?t.sphereTypes.add(e[\"sphere category required (raw)\"]):\"item required\"in e?e[\"item required\"].forEach(e=>{t.items.add(e)}):\"unit required\"in e?e[\"unit required\"].forEach(e=>{t.units.add(`${e.id}`)}):t.unknowns.add(`type:${e.type_id||a},condition:${e.condition_id||a}`)}),Object.entries(t).filter(e=>e[1].size>0).reduce((e,a)=>(e[a[0]]=Array.from(a[1]),e),{})}function Y(e,a){const t=a.source===K.LeaderSkill||e.sp_type===R.EnhancePassive||e[\"passive target\"]===B.Party;return{targetType:t?B.Party:B.Self,targetArea:t?U.Aoe:U.Single}}function X(e){return{targetArea:e[\"target area\"],targetType:e[\"target type\"]}}function z(e,a=0){return null===e||isNaN(e)?a:+e}function V(e=[],a=0){let t=!1;const s=e.reduce((e,s,i)=>(s&&\"0\"!==s&&(e[`param_${a+i}`]=s,t=!0),e),{});return t?s:void 0}let q,Z;function J(e){return q&&!e||function(e){const a={0:w.All,1:_.Fire,2:_.Water,3:_.Earth,4:_.Thunder,5:_.Light,6:_.Dark},t={1:D.Poison,2:D.Weak,3:D.Sick,4:D.Injury,5:D.Curse,6:D.Paralysis,7:D.AttackReduction,8:D.DefenseReduction,9:D.RecoveryReduction},s=(e,a,t)=>{return{targetData:(t&&t.getProcTargetData||X)(e),sources:(t&&t.createSourcesFromContext||$)(a),effectDelay:e[\"effect delay time(ms)/frame\"]}},i=e=>e.params.split(\",\"),n=(e,{originalId:a,sources:t,targetData:s,effectDelay:i})=>Object.assign({id:j.UNKNOWN_PROC_BUFF_PARAMS,originalId:a,effectDelay:i,sources:t,value:e},s),r=({originalId:e,sources:a,buffs:t,duration:s,targetData:i})=>Object.assign({id:j.TURN_DURATION_MODIFICATION,originalId:e,sources:a,value:{buffs:t,duration:s}},i),o=(e,a,t)=>{let s;return e&&e.length>0&&(s=(t&&t.createUnknownParamsValue||V)(e,a)),s};e.set(\"1\",(e,a,t)=>{const{targetData:r,sources:c,effectDelay:F}=s(e,a,t),p=+(a.damageFrames&&a.damageFrames.hits||0),D=+(a.damageFrames&&a.damageFrames[\"hit dmg% distribution (total)\"]||0),l={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let u;if(e.params){let a;[l[\"atk%\"],l.flatAtk,l[\"crit%\"],l[\"bc%\"],l[\"hc%\"],l[\"dmg%\"],...a]=i(e),u=o(a,6,t)}else l[\"atk%\"]=e[\"bb atk%\"],l.flatAtk=e[\"bb flat atk\"],l[\"crit%\"]=e[\"bb crit%\"],l[\"bc%\"]=e[\"bb bc%\"],l[\"hc%\"]=e[\"bb hc%\"],l[\"dmg%\"]=e[\"bb dmg%\"];const U=Object.entries(l).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=z(t),e),{}),E=[Object.assign({id:\"proc:1\",originalId:\"1\",sources:c,effectDelay:F,value:Object.assign(Object.assign({},U),{hits:p,distribution:D})},r)];return u&&E.push(n(u,{originalId:\"1\",sources:c,targetData:r,effectDelay:F})),E}),e.set(\"2\",(e,a,t)=>{const{targetData:r,sources:c,effectDelay:F}=s(e,a,t),p={healLow:\"0\",healHigh:\"0\",\"healerRec%\":0};let D;if(e.params){let a,s,n;[p.healLow,p.healHigh,a,s,...n]=i(e),p[\"healerRec%\"]=(100+z(a))*(1+z(s)/100)/10,D=o(n,4,t)}else p.healLow=e[\"heal low\"],p.healHigh=e[\"heal high\"],p[\"healerRec%\"]=e[\"rec added% (from healer)\"];Object.keys(p).forEach(e=>{p[e]=z(p[e])});const l=[Object.assign({id:\"proc:2\",originalId:\"2\",sources:c,effectDelay:F,value:p},r)];return D&&l.push(n(D,{originalId:\"2\",sources:c,targetData:r,effectDelay:F})),l}),e.set(\"3\",(e,a,t)=>{const{targetData:c,sources:F,effectDelay:p}=s(e,a,t),D={healLow:\"0\",healHigh:\"0\",\"targetRec%\":0,turnDuration:\"0\"};let l;if(e.params){let a,s;[D.healLow,D.healHigh,a,D.turnDuration,...s]=i(e),D[\"targetRec%\"]=10*(1+z(a)/100),l=o(s,4,t)}else D.healLow=e[\"gradual heal low\"],D.healHigh=e[\"gradual heal high\"],D[\"targetRec%\"]=e[\"rec added% (from target)\"],D.turnDuration=e[\"gradual heal turns (8)\"];Object.keys(D).forEach(e=>{D[e]=z(D[e])});const u=[];return 0!==D.healLow||0!==D.healHigh?u.push(Object.assign({id:\"proc:3\",originalId:\"3\",sources:F,effectDelay:p,duration:D.turnDuration,value:{healLow:D.healLow,healHigh:D.healHigh,\"targetRec%\":D[\"targetRec%\"]}},c)):0!==D.turnDuration&&u.push(r({originalId:\"3\",sources:F,buffs:[\"proc:3\"],duration:D.turnDuration,targetData:c})),l&&u.push(n(l,{originalId:\"3\",sources:F,targetData:c,effectDelay:p})),u}),e.set(\"4\",(e,a,t)=>{const{targetData:r,sources:c,effectDelay:F}=s(e,a,t);let p,D=0,l=0;if(e.params){const[a,s,...n]=i(e);D=z(a),l=z(s),p=o(n,2,t)}else\"bb bc fill\"in e&&(D=z(e[\"bb bc fill\"])),\"bb bc fill%\"in e&&(l=z(e[\"bb bc fill%\"]));const u=[];return 0!==D&&u.push(Object.assign({id:\"proc:4:flat\",originalId:\"4\",sources:c,effectDelay:F,value:D},r)),0!==l&&u.push(Object.assign({id:\"proc:4:percent\",originalId:\"4\",sources:c,effectDelay:F,value:l},r)),p&&u.push(n(p,{originalId:\"4\",sources:c,targetData:r,effectDelay:F})),u}),e.set(\"5\",(e,t,c)=>{const{targetData:F,sources:p,effectDelay:D}=s(e,t,c),l={element:w.All,atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",turnDuration:\"0\"},u=[\"atk\",\"def\",\"rec\",\"crit\"];let U;if(e.params){let t,s;[s,l.atk,l.def,l.rec,l.crit,l.turnDuration,...t]=i(e),l.element=a[s]||w.Unknown,U=o(t,6,c)}else{const a=e[\"element buffed\"];l.element=\"all\"===a?w.All:a||w.Unknown;const t=Object.keys(e);u.forEach(a=>{const s=t.find(e=>e.startsWith(`${a}% buff`));s&&(l[a]=z(e[s]))}),l.turnDuration=z(e[\"buff turns\"])}u.concat([\"turnDuration\"]).forEach(e=>{l[e]=z(l[e])});const E=u.some(e=>0!==l[e]),B=[];return E?u.forEach(e=>{const a=l[e];if(0!==a){const t=Object.assign({id:`proc:5:${e}`,originalId:\"5\",sources:p,effectDelay:D,duration:l.turnDuration,value:a},F);l.element!==w.All&&(t.conditions={targetElements:[l.element]}),B.push(t)}}):0!==l.turnDuration&&B.push(r({originalId:\"5\",sources:p,buffs:u.map(e=>`proc:5:${e}`),duration:l.turnDuration,targetData:F})),U&&B.push(n(U,{originalId:\"5\",sources:p,targetData:F,effectDelay:D})),B}),e.set(\"6\",(e,a,t)=>{const{targetData:c,sources:F,effectDelay:p}=s(e,a,t),D={bc:\"0\",hc:\"0\",item:\"0\",turnDuration:\"0\"},l=[\"bc\",\"hc\",\"item\"];let u;if(e.params){let a;[D.bc,D.hc,D.item,D.turnDuration,...a]=i(e),u=o(a,4,t)}else D.bc=e[\"bc drop rate% buff (10)\"],D.hc=e[\"hc drop rate% buff (9)\"],D.item=e[\"item drop rate% buff (11)\"],D.turnDuration=e[\"drop buff rate turns\"];l.concat([\"turnDuration\"]).forEach(e=>{D[e]=z(D[e])});const U=l.some(e=>0!==D[e]),E=[];return U?l.forEach(e=>{const a=D[e];0!==a&&E.push(Object.assign({id:`proc:6:${e}`,originalId:\"6\",sources:F,effectDelay:p,duration:D.turnDuration,value:a},c))}):0!==D.turnDuration&&E.push(r({originalId:\"6\",sources:F,buffs:l.map(e=>`proc:6:${e}`),duration:D.turnDuration,targetData:c})),u&&E.push(n(u,{originalId:\"6\",sources:F,targetData:c,effectDelay:p})),E}),e.set(\"7\",(e,a,t)=>{const{targetData:r,sources:c,effectDelay:F}=s(e,a,t);let p,D=0;if(e.params){const[a,...s]=i(e);D=z(a),p=o(s,1,t)}else D=z(e[\"angel idol recover hp%\"]);const l=[Object.assign({id:\"proc:7\",originalId:\"7\",sources:c,effectDelay:F,value:D},r)];return p&&l.push(n(p,{originalId:\"7\",sources:c,targetData:r,effectDelay:F})),l}),e.set(\"8\",(e,a,t)=>{const{targetData:r,sources:c,effectDelay:F}=s(e,a,t);let p,D=0,l=0;if(e.params){const[a,s,...n]=i(e);D=z(a),l=z(s),p=o(n,2,t)}else\"max hp increase\"in e&&(D=z(e[\"max hp increase\"])),\"max hp% increase\"in e&&(l=z(e[\"max hp% increase\"]));const u=[];return 0!==D&&u.push(Object.assign({id:\"proc:8:flat\",originalId:\"8\",sources:c,effectDelay:F,value:D},r)),0!==l&&u.push(Object.assign({id:\"proc:8:percent\",originalId:\"8\",sources:c,effectDelay:F,value:l},r)),p&&u.push(n(p,{originalId:\"8\",sources:c,targetData:r,effectDelay:F})),u}),e.set(\"9\",(e,t,c)=>{const{targetData:F,sources:p,effectDelay:D}=s(e,t,c),l={0:\"atk\",1:\"def\",2:\"rec\"},u=[\"atk\",\"def\",\"rec\"],U={element:w.All,statReductionEntries:[],turnDuration:0};let E;if(e.params){const[t,s,n,r,F,p,D,B,...R]=i(e);U.element=a[t]||w.Unknown,U.turnDuration=z(B),[[s,n,r],[F,p,D]].forEach(([e,a,t])=>{const s=z(e)-1,i=z(a),n=z(t);3===s?U.statReductionEntries.push(...u.map(e=>({stat:e,value:i,chance:n}))):U.statReductionEntries.push({stat:l[s]||\"unknown\",value:i,chance:n})}),E=o(R,8,c)}else{const a=e[\"element buffed\"];U.element=\"all\"===a?w.All:a||w.Unknown,[\"buff #1\",\"buff #2\"].forEach(a=>{const t=e[a];if(t){const e=z(t[\"proc chance%\"]),a=Object.keys(t);u.forEach(s=>{const i=a.find(e=>e.startsWith(`${s}% buff`));i&&U.statReductionEntries.push({stat:s,value:z(t[i]),chance:e})})}}),U.turnDuration=z(e[\"buff turns\"])}const B=[];let R=!1;return U.statReductionEntries.forEach(({stat:e,value:a,chance:t})=>{if(0!==a||0!==t){R=!0;const s=Object.assign({id:`proc:9:${e}`,originalId:\"9\",sources:p,effectDelay:D,duration:U.turnDuration,value:{value:a,chance:t}},F);U.element!==w.All&&(s.conditions={targetElements:[U.element]}),B.push(s)}}),R||0===U.turnDuration||B.push(r({originalId:\"9\",sources:p,buffs:u.map(e=>`proc:9:${e}`),duration:U.turnDuration,targetData:F})),E&&B.push(n(E,{originalId:\"9\",sources:p,targetData:F,effectDelay:D})),B}),e.set(\"10\",(e,a,r)=>{const{targetData:c,sources:F,effectDelay:p}=s(e,a,r),l=[];let u;if(e.params){const a=i(e),s=a.slice(0,8),n=a.slice(8);s.filter(e=>\"0\"!==e).forEach(e=>{l.push(t[e]||D.Unknown)}),u=o(n,8,r)}else Object.values(t).forEach(a=>{`remove ${a}`in e&&l.push(a)}),\"remove all status ailments\"in e&&l.push(D.Unknown);const U=l.map(e=>Object.assign({id:`proc:10:${e}`,originalId:\"10\",sources:F,effectDelay:p,value:!0},c));return u&&U.push(n(u,{originalId:\"10\",sources:F,targetData:c,effectDelay:p})),U}),e.set(\"11\",(e,a,r)=>{const{targetData:c,sources:F,effectDelay:p}=s(e,a,r),l=[];let u;if(e.params){let a=i(e);a.length%2!=0&&\"0\"!==a[a.length-1]&&(u=o(a.slice(-1),a.length-1,r),a=a.slice(0,a.length-1));const s=a.length;for(let e=0;e<s;e+=2){const s=a[e],i=z(a[e+1]);if(\"0\"!==s||0!==i){const e=t[s]||D.Unknown;l.push({ailment:e,chance:i})}}}else Object.values(t).forEach(a=>{let t;(t=a===D.Weak?\"weaken%\":a===D.AttackReduction||a===D.DefenseReduction||a===D.RecoveryReduction?a:`${a}%`)in e&&l.push({ailment:a,chance:z(e[t])})});const U=l.map(({ailment:e,chance:a})=>Object.assign({id:`proc:11:${e}`,originalId:\"11\",sources:F,effectDelay:p,value:a},c));return u&&U.push(n(u,{originalId:\"11\",sources:F,targetData:c,effectDelay:p})),U}),e.set(\"12\",(e,a,t)=>{const{targetData:r,sources:c,effectDelay:F}=s(e,a,t);let p,D=0;if(e.params){const[a,...s]=i(e);D=z(a),p=o(s,1,t)}else D=z(e[\"revive to hp%\"]);const l=[Object.assign({id:\"proc:12\",originalId:\"12\",sources:c,effectDelay:F,value:D},r)];return p&&l.push(n(p,{originalId:\"12\",sources:c,targetData:r,effectDelay:F})),l}),e.set(\"13\",(e,a,t)=>{const{targetData:r,sources:c,effectDelay:F}=s(e,a,t);let p=0;const D=+(a.damageFrames&&a.damageFrames[\"hit dmg% distribution (total)\"]||0),l={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\"};let u;if(e.params){let a,s;[l[\"atk%\"],l.flatAtk,l[\"crit%\"],l[\"bc%\"],l[\"hc%\"],s,...a]=i(e),p=z(s),u=o(a,6,t)}else l[\"atk%\"]=e[\"bb atk%\"],l.flatAtk=e[\"bb flat atk\"],l[\"crit%\"]=e[\"bb crit%\"],l[\"bc%\"]=e[\"bb bc%\"],l[\"hc%\"]=e[\"bb hc%\"],p=z(e.hits);const E=Object.entries(l).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=z(t),e),{}),B=[{id:\"proc:13\",originalId:\"13\",sources:c,effectDelay:F,value:Object.assign(Object.assign({},E),{hits:p,distribution:D}),targetType:r.targetType,targetArea:U.Random}];return u&&B.push(n(u,{originalId:\"13\",sources:c,targetData:r,effectDelay:F})),B})}(q=new Map),q}function Q(e){return Z&&!e||function(e){const a={1:_.Fire,2:_.Water,3:_.Earth,4:_.Thunder,5:_.Light,6:_.Dark,X:w.OmniParadigm},t={1:P.Lord,2:P.Anima,3:P.Breaker,4:P.Guardian,5:P.Oracle,6:P.Rex},s=[\"atk\",\"def\",\"rec\",\"crit\",\"hp\"],i=[\"poison\",\"weak\",\"sick\",\"injury\",\"curse\",\"paralysis\"],n=(e,a,t)=>{return{conditionInfo:(t&&t.processExtraSkillConditions||x)(e),targetData:(t&&t.getPassiveTargetData||Y)(e,a),sources:(t&&t.createSourcesFromContext||$)(a)}},r=e=>e.params.split(\",\"),o=(e,{originalId:a,sources:t,targetData:s,conditionInfo:i})=>Object.assign({id:j.UNKNOWN_PASSIVE_BUFF_PARAMS,originalId:a,sources:t,value:e,conditions:Object.assign({},i)},s),c=(e,a,t)=>{let s;return e&&e.length>0&&(s=(t&&t.createUnknownParamsValue||V)(e,a)),s},F=({effect:e,context:a,injectionContext:t,effectKey:s,buffId:i,originalId:F})=>{const{conditionInfo:p,targetData:D,sources:l}=n(e,a,t),u=e,U=[];let E,B=0;if(u.params){const[e,...a]=r(u);B=z(e),E=c(a,1,t)}else B=z(u[s]);return 0!==B&&U.push(Object.assign({id:i,originalId:F,sources:l,value:B,conditions:Object.assign({},p)},D)),E&&U.push(o(E,{originalId:F,sources:l,targetData:D,conditionInfo:p})),U};e.set(\"1\",(e,a,t)=>{const{conditionInfo:i,targetData:F,sources:p}=n(e,a,t),D=e,l=[],u={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let U;if(D.params){let e;[u.atk,u.def,u.rec,u.crit,u.hp,...e]=r(D),U=c(e,5,t)}else u.hp=D[\"hp% buff\"],u.atk=D[\"atk% buff\"],u.def=D[\"def% buff\"],u.rec=D[\"rec% buff\"],u.crit=D[\"crit% buff\"];return s.forEach(e=>{const a=z(u[e]);0!==a&&l.push(Object.assign({id:`passive:1:${e}`,originalId:\"1\",sources:p,value:a,conditions:Object.assign({},i)},F))}),U&&l.push(o(U,{originalId:\"1\",sources:p,targetData:F,conditionInfo:i})),l}),e.set(\"2\",(e,t,i)=>{const{conditionInfo:F,targetData:p,sources:D}=n(e,t,i),l=e,u=[],U={elements:[],atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let E;if(l.params){let e,t,s;[t,s,U.atk,U.def,U.rec,U.crit,U.hp,...e]=r(l),[t,s].forEach(e=>{e&&\"0\"!==e&&U.elements.push(a[e]||w.Unknown)}),E=c(e,7,i)}else U.elements=l[\"elements buffed\"],U.hp=l[\"hp% buff\"],U.atk=l[\"atk% buff\"],U.def=l[\"def% buff\"],U.rec=l[\"rec% buff\"],U.crit=l[\"crit% buff\"];const B=e=>Object.assign({id:`passive:2:${e}`,originalId:\"2\",sources:D,value:z(U[e])},p);return U.elements.length>0?U.elements.forEach(e=>{s.forEach(a=>{0!==z(U[a])&&u.push(Object.assign(Object.assign({},B(a)),{conditions:Object.assign(Object.assign({},F),{targetElements:[e]})}))})}):s.forEach(e=>{0!==z(U[e])&&u.push(Object.assign(Object.assign({},B(e)),{conditions:Object.assign(Object.assign({},F),{targetElements:[w.Unknown]})}))}),E&&u.push(o(E,{originalId:\"2\",sources:D,targetData:p,conditionInfo:F})),u}),e.set(\"3\",(e,a,i)=>{const{conditionInfo:F,targetData:p,sources:D}=n(e,a,i),l=e,u=[],U={unitType:\"\",atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let E;if(l.params){let e,a;[a,U.atk,U.def,U.rec,U.crit,U.hp,...e]=r(l),a&&\"0\"!==a&&(U.unitType=t[a]||\"unknown\"),E=c(e,6,i)}else U.unitType=l[\"unit type buffed\"],U.hp=l[\"hp% buff\"],U.atk=l[\"atk% buff\"],U.def=l[\"def% buff\"],U.rec=l[\"rec% buff\"],U.crit=l[\"crit% buff\"];const B=U.unitType||\"unknown\";return s.forEach(e=>{const a=z(U[e]);0!==a&&u.push(Object.assign({id:`passive:3:${e}`,originalId:\"3\",sources:D,value:+a,conditions:Object.assign(Object.assign({},F),{targetUnitType:B})},p))}),E&&u.push(o(E,{originalId:\"3\",sources:D,targetData:p,conditionInfo:F})),u}),e.set(\"4\",(e,a,t)=>{const{conditionInfo:s,targetData:F,sources:p}=n(e,a,t),D=e,l=[],u={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\"};let U;if(D.params){let e;[u.poison,u.weak,u.sick,u.injury,u.curse,u.paralysis,...e]=r(D),U=c(e,6,t)}else i.forEach(e=>{const a=\"weak\"!==e?e:\"weaken\";u[e]=D[`${a} resist%`]});return i.forEach(e=>{const a=z(u[e]);0!==a&&l.push(Object.assign({id:`passive:4:${e}`,originalId:\"4\",sources:p,value:a,conditions:Object.assign({},s)},F))}),U&&l.push(o(U,{originalId:\"4\",sources:p,targetData:F,conditionInfo:s})),l}),e.set(\"5\",(e,t,s)=>{const{conditionInfo:i,targetData:F,sources:p}=n(e,t,s),D=e,l=[];let u,U,E=\"0\";if(D.params){let e,t;[t,E,...e]=r(D),u=a[t]||w.Unknown,U=c(e,2,s)}else(u=Object.values(a).find(a=>`${a} resist%`in e)||w.Unknown)!==w.Unknown&&(E=D[`${u} resist%`]);const B=z(E);return 0!==B&&l.push(Object.assign({id:`passive:5:${u}`,originalId:\"5\",sources:p,value:B,conditions:Object.assign({},i)},F)),U&&l.push(o(U,{originalId:\"5\",sources:p,targetData:F,conditionInfo:i})),l}),e.set(\"8\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectKey:\"dmg% mitigation\",buffId:\"passive:8\",originalId:\"8\"})),e.set(\"9\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectKey:\"bc fill per turn\",buffId:\"passive:9\",originalId:\"9\"})),e.set(\"10\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectKey:\"hc effectiveness%\",buffId:\"passive:10\",originalId:\"10\"})),e.set(\"11\",(e,a,t)=>{const{conditionInfo:i,targetData:F,sources:p}=n(e,a,t),D=e,l=[],u={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\"};let U,E=!1,B=0;if(D.params){let e,a,s;[u.atk,u.def,u.rec,u.crit,s,a,...e]=r(D),E=\"1\"===a,B=z(s),U=c(e,6,t)}else u.atk=D[\"atk% buff\"],u.def=D[\"def% buff\"],u.rec=D[\"rec% buff\"],u.crit=D[\"crit% buff\"],\"hp above % buff requirement\"in D?(B=z(D[\"hp above % buff requirement\"]),E=!0):(B=z(D[\"hp below % buff requirement\"]),E=!1);return s.forEach(e=>{const a=z(u[e]);if(\"hp\"!==e&&0!==a){const t=Object.assign({id:`passive:11:${e}`,originalId:\"11\",sources:p,value:a,conditions:Object.assign({},i)},F);E?t.conditions.hpGreaterThanOrEqualTo=B:t.conditions.hpLessThanOrEqualTo=B,l.push(t)}}),U&&l.push(o(U,{originalId:\"11\",sources:p,targetData:F,conditionInfo:i})),l}),e.set(\"12\",(e,a,t)=>{const{conditionInfo:s,targetData:i,sources:F}=n(e,a,t),p=[\"bc\",\"hc\",\"item\",\"zel\",\"karma\"],D=e,l=[],u={bc:\"0\",hc:\"0\",item:\"0\",zel:\"0\",karma:\"0\"};let U,E=!1,B=0;if(D.params){let e,a,s;[u.bc,u.hc,u.item,u.zel,u.karma,s,a,...e]=r(D),E=\"1\"===a,B=z(s),U=c(e,7,t)}else p.forEach(e=>{u[e]=D[`${e} drop rate% buff`]}),\"hp above % buff requirement\"in D?(B=z(D[\"hp above % buff requirement\"]),E=!0):(B=z(D[\"hp below % buff requirement\"]),E=!1);return p.forEach(e=>{const a=z(u[e]);if(0!==a){const t=Object.assign({id:`passive:12:${e}`,originalId:\"12\",sources:F,value:a,conditions:Object.assign({},s)},i);E?t.conditions.hpGreaterThanOrEqualTo=B:t.conditions.hpLessThanOrEqualTo=B,l.push(t)}}),U&&l.push(o(U,{originalId:\"12\",sources:F,targetData:i,conditionInfo:s})),l})}(Z=new Map),Z}!function(e){e.Active=\"active\",e.Passive=\"passive\",e.ConditionalTimed=\"conditionalTimed\",e.Singleton=\"singleton\",e.Burst=\"burst\",e.Attack=\"attack\",e.Unknown=\"unknown\"}(S||(S={})),function(e){e.BraveBurst=\"bb\",e.SuperBraveBurst=\"sbb\",e.UltimateBraveBurst=\"ubb\",e.DualBraveBurst=\"dbb\",e.BondedBraveBurst=\"bbb\",e.BondedSuperBraveBurst=\"dsbb\",e.SpEnhancement=\"sp\",e.Item=\"item\",e.LeaderSkill=\"ls\",e.ExtraSkill=\"es\",e.OmniParadigm=\"omniParadigm\",e.UnitTypeBonus=\"unitTypeBonus\",e.Quest=\"quest\"}(K||(K={})),function(e){e.Unknown=\"unknown\",e.OmniParadigm=\"omniParadigm\",e.All=\"all\"}(w||(w={})),function(e){e.hp=\"hp\",e.atk=\"atk\",e.def=\"def\",e.rec=\"rec\",e.crit=\"crit\",e.bbGauge=\"bbGauge\",e.bcDropRate=\"bcDropRate\",e.hcDropRate=\"hcDropRate\",e.itemDropRate=\"itemDropRate\",e.zelDropRate=\"zelDropRate\",e.karmaDropRate=\"karmaDropRate\",e.hcEfficacy=\"hcEfficacy\",e.poisonResist=\"poisonResist\",e.weakResist=\"weakResist\",e.sickResist=\"sickResist\",e.injuryResist=\"injuryResist\",e.curseResist=\"curseResist\",e.paralysisResist=\"paralysisResist\",e.poisonInflict=\"poisonInflict\",e.weakInflict=\"weakInflict\",e.sickInflict=\"sickInflict\",e.injuryInflict=\"injuryInflict\",e.curseInflict=\"curseInflict\",e.paralysisInflict=\"paralysisInflict\",e.atkDownResist=\"atkDownResist\",e.defDownResist=\"defDownResist\",e.recDownResist=\"recDownResist\",e.atkDownInflict=\"atkDownInflict\",e.defDownInflict=\"defDownInflict\",e.recDownInflict=\"recDownInflict\",e.mitigation=\"mitigation\",e.fireMitigation=\"fireMitigation\",e.waterMitigation=\"waterMitigation\",e.earthMitigation=\"earthMitigation\",e.thunderMitigation=\"thunderMitigation\",e.lightMitigation=\"lightMitigation\",e.darkMitigation=\"darkMitigation\",e.turnDurationModification=\"turnDurationModification\",e.koResistance=\"koResistance\",e.revive=\"revive\"}(L||(L={})),function(e){e.UNKNOWN=\"UNKNOWN\",e.TURN_DURATION_UP=\"TURN_DURATION_UP\",e.TURN_DURATION_DOWN=\"TURN_DURATION_DOWN\",e.BUFF_HPUP=\"BUFF_HPUP\",e.BUFF_HPDOWN=\"BUFF_HPDOWN\",e.BUFF_ATKUP=\"BUFF_ATKUP\",e.BUFF_ATKDOWN=\"BUFF_ATKDOWN\",e.BUFF_DEFUP=\"BUFF_DEFUP\",e.BUFF_DEFDOWN=\"BUFF_DEFDOWN\",e.BUFF_RECUP=\"BUFF_RECUP\",e.BUFF_RECDOWN=\"BUFF_RECDOWN\",e.BUFF_CRTRATEUP=\"BUFF_CRTRATEUP\",e.BUFF_CRTRATEDOWN=\"BUFF_CRTRATEDOWN\",e.BUFF_HPTHRESHATKUP=\"BUFF_HPTHRESHATKUP\",e.BUFF_HPTHRESHATKDOWN=\"BUFF_HPTHRESHATKDOWN\",e.BUFF_HPTHRESHDEFUP=\"BUFF_HPTHRESHDEFUP\",e.BUFF_HPTHRESHDEFDOWN=\"BUFF_HPTHRESHDEFDOWN\",e.BUFF_HPTHRESHRECUP=\"BUFF_HPTHRESHRECUP\",e.BUFF_HPTHRESHRECDOWN=\"BUFF_HPTHRESHRECDOWN\",e.BUFF_HPTHRESHCRTRATEUP=\"BUFF_HPTHRESHCRTRATEUP\",e.BUFF_HPTHRESHCRTRATEDOWN=\"BUFF_HPTHRESHCRTRATEDOWN\",e.BUFF_HPREC=\"BUFF_HPREC\",e.BUFF_BBREC=\"BUFF_BBREC\",e.BUFF_FIREHPUP=\"BUFF_FIREHPUP\",e.BUFF_FIREHPDOWN=\"BUFF_FIREHPDOWN\",e.BUFF_FIREATKUP=\"BUFF_FIREATKUP\",e.BUFF_FIREATKDOWN=\"BUFF_FIREATKDOWN\",e.BUFF_FIREDEFUP=\"BUFF_FIREDEFUP\",e.BUFF_FIREDEFDOWN=\"BUFF_FIREDEFDOWN\",e.BUFF_FIRERECUP=\"BUFF_FIRERECUP\",e.BUFF_FIRERECDOWN=\"BUFF_FIRERECDOWN\",e.BUFF_FIRECRTRATEUP=\"BUFF_FIRECRTRATEUP\",e.BUFF_FIRECRTRATEDOWN=\"BUFF_FIRECRTRATEDOWN\",e.BUFF_WATERHPUP=\"BUFF_WATERHPUP\",e.BUFF_WATERHPDOWN=\"BUFF_WATERHPDOWN\",e.BUFF_WATERATKUP=\"BUFF_WATERATKUP\",e.BUFF_WATERATKDOWN=\"BUFF_WATERATKDOWN\",e.BUFF_WATERDEFUP=\"BUFF_WATERDEFUP\",e.BUFF_WATERDEFDOWN=\"BUFF_WATERDEFDOWN\",e.BUFF_WATERRECUP=\"BUFF_WATERRECUP\",e.BUFF_WATERRECDOWN=\"BUFF_WATERRECDOWN\",e.BUFF_WATERCRTRATEUP=\"BUFF_WATERCRTRATEUP\",e.BUFF_WATERCRTRATEDOWN=\"BUFF_WATERCRTRATEDOWN\",e.BUFF_EARTHHPUP=\"BUFF_EARTHHPUP\",e.BUFF_EARTHHPDOWN=\"BUFF_EARTHHPDOWN\",e.BUFF_EARTHATKUP=\"BUFF_EARTHATKUP\",e.BUFF_EARTHATKDOWN=\"BUFF_EARTHATKDOWN\",e.BUFF_EARTHDEFUP=\"BUFF_EARTHDEFUP\",e.BUFF_EARTHDEFDOWN=\"BUFF_EARTHDEFDOWN\",e.BUFF_EARTHRECUP=\"BUFF_EARTHRECUP\",e.BUFF_EARTHRECDOWN=\"BUFF_EARTHRECDOWN\",e.BUFF_EARTHCRTRATEUP=\"BUFF_EARTHCRTRATEUP\",e.BUFF_EARTHCRTRATEDOWN=\"BUFF_EARTHCRTRATEDOWN\",e.BUFF_THUNDERHPUP=\"BUFF_THUNDERHPUP\",e.BUFF_THUNDERHPDOWN=\"BUFF_THUNDERHPDOWN\",e.BUFF_THUNDERATKUP=\"BUFF_THUNDERATKUP\",e.BUFF_THUNDERATKDOWN=\"BUFF_THUNDERATKDOWN\",e.BUFF_THUNDERDEFUP=\"BUFF_THUNDERDEFUP\",e.BUFF_THUNDERDEFDOWN=\"BUFF_THUNDERDEFDOWN\",e.BUFF_THUNDERRECUP=\"BUFF_THUNDERRECUP\",e.BUFF_THUNDERRECDOWN=\"BUFF_THUNDERRECDOWN\",e.BUFF_THUNDERCRTRATEUP=\"BUFF_THUNDERCRTRATEUP\",e.BUFF_THUNDERCRTRATEDOWN=\"BUFF_THUNDERCRTRATEDOWN\",e.BUFF_LIGHTHPUP=\"BUFF_LIGHTHPUP\",e.BUFF_LIGHTHPDOWN=\"BUFF_LIGHTHPDOWN\",e.BUFF_LIGHTATKUP=\"BUFF_LIGHTATKUP\",e.BUFF_LIGHTATKDOWN=\"BUFF_LIGHTATKDOWN\",e.BUFF_LIGHTDEFUP=\"BUFF_LIGHTDEFUP\",e.BUFF_LIGHTDEFDOWN=\"BUFF_LIGHTDEFDOWN\",e.BUFF_LIGHTRECUP=\"BUFF_LIGHTRECUP\",e.BUFF_LIGHTRECDOWN=\"BUFF_LIGHTRECDOWN\",e.BUFF_LIGHTCRTRATEUP=\"BUFF_LIGHTCRTRATEUP\",e.BUFF_LIGHTCRTRATEDOWN=\"BUFF_LIGHTCRTRATEDOWN\",e.BUFF_DARKHPUP=\"BUFF_DARKHPUP\",e.BUFF_DARKHPDOWN=\"BUFF_DARKHPDOWN\",e.BUFF_DARKATKUP=\"BUFF_DARKATKUP\",e.BUFF_DARKATKDOWN=\"BUFF_DARKATKDOWN\",e.BUFF_DARKDEFUP=\"BUFF_DARKDEFUP\",e.BUFF_DARKDEFDOWN=\"BUFF_DARKDEFDOWN\",e.BUFF_DARKRECUP=\"BUFF_DARKRECUP\",e.BUFF_DARKRECDOWN=\"BUFF_DARKRECDOWN\",e.BUFF_DARKCRTRATEUP=\"BUFF_DARKCRTRATEUP\",e.BUFF_DARKCRTRATEDOWN=\"BUFF_DARKCRTRATEDOWN\",e.BUFF_ELEMENTHPUP=\"BUFF_ELEMENTHPUP\",e.BUFF_ELEMENTHPDOWN=\"BUFF_ELEMENTHPDOWN\",e.BUFF_ELEMENTATKUP=\"BUFF_ELEMENTATKUP\",e.BUFF_ELEMENTATKDOWN=\"BUFF_ELEMENTATKDOWN\",e.BUFF_ELEMENTDEFUP=\"BUFF_ELEMENTDEFUP\",e.BUFF_ELEMENTDEFDOWN=\"BUFF_ELEMENTDEFDOWN\",e.BUFF_ELEMENTRECUP=\"BUFF_ELEMENTRECUP\",e.BUFF_ELEMENTRECDOWN=\"BUFF_ELEMENTRECDOWN\",e.BUFF_ELEMENTCRTRATEUP=\"BUFF_ELEMENTCRTRATEUP\",e.BUFF_ELEMENTCRTRATEDOWN=\"BUFF_ELEMENTCRTRATEDOWN\",e.BUFF_LORDHPUP=\"BUFF_LORDHPUP\",e.BUFF_LORDHPDOWN=\"BUFF_LORDHPDOWN\",e.BUFF_LORDATKUP=\"BUFF_LORDATKUP\",e.BUFF_LORDATKDOWN=\"BUFF_LORDATKDOWN\",e.BUFF_LORDDEFUP=\"BUFF_LORDDEFUP\",e.BUFF_LORDDEFDOWN=\"BUFF_LORDDEFDOWN\",e.BUFF_LORDRECUP=\"BUFF_LORDRECUP\",e.BUFF_LORDRECDOWN=\"BUFF_LORDRECDOWN\",e.BUFF_LORDCRTRATEUP=\"BUFF_LORDCRTRATEUP\",e.BUFF_LORDCRTRATEDOWN=\"BUFF_LORDCRTRATEDOWN\",e.BUFF_ANIMAHPUP=\"BUFF_ANIMAHPUP\",e.BUFF_ANIMAHPDOWN=\"BUFF_ANIMAHPDOWN\",e.BUFF_ANIMAATKUP=\"BUFF_ANIMAATKUP\",e.BUFF_ANIMAATKDOWN=\"BUFF_ANIMAATKDOWN\",e.BUFF_ANIMADEFUP=\"BUFF_ANIMADEFUP\",e.BUFF_ANIMADEFDOWN=\"BUFF_ANIMADEFDOWN\",e.BUFF_ANIMARECUP=\"BUFF_ANIMARECUP\",e.BUFF_ANIMARECDOWN=\"BUFF_ANIMARECDOWN\",e.BUFF_ANIMACRTRATEUP=\"BUFF_ANIMACRTRATEUP\",e.BUFF_ANIMACRTRATEDOWN=\"BUFF_ANIMACRTRATEDOWN\",e.BUFF_BREAKERHPUP=\"BUFF_BREAKERHPUP\",e.BUFF_BREAKERHPDOWN=\"BUFF_BREAKERHPDOWN\",e.BUFF_BREAKERATKUP=\"BUFF_BREAKERATKUP\",e.BUFF_BREAKERATKDOWN=\"BUFF_BREAKERATKDOWN\",e.BUFF_BREAKERDEFUP=\"BUFF_BREAKERDEFUP\",e.BUFF_BREAKERDEFDOWN=\"BUFF_BREAKERDEFDOWN\",e.BUFF_BREAKERRECUP=\"BUFF_BREAKERRECUP\",e.BUFF_BREAKERRECDOWN=\"BUFF_BREAKERRECDOWN\",e.BUFF_BREAKERCRTRATEUP=\"BUFF_BREAKERCRTRATEUP\",e.BUFF_BREAKERCRTRATEDOWN=\"BUFF_BREAKERCRTRATEDOWN\",e.BUFF_GUARDIANHPUP=\"BUFF_GUARDIANHPUP\",e.BUFF_GUARDIANHPDOWN=\"BUFF_GUARDIANHPDOWN\",e.BUFF_GUARDIANATKUP=\"BUFF_GUARDIANATKUP\",e.BUFF_GUARDIANATKDOWN=\"BUFF_GUARDIANATKDOWN\",e.BUFF_GUARDIANDEFUP=\"BUFF_GUARDIANDEFUP\",e.BUFF_GUARDIANDEFDOWN=\"BUFF_GUARDIANDEFDOWN\",e.BUFF_GUARDIANRECUP=\"BUFF_GUARDIANRECUP\",e.BUFF_GUARDIANRECDOWN=\"BUFF_GUARDIANRECDOWN\",e.BUFF_GUARDIANCRTRATEUP=\"BUFF_GUARDIANCRTRATEUP\",e.BUFF_GUARDIANCRTRATEDOWN=\"BUFF_GUARDIANCRTRATEDOWN\",e.BUFF_ORACLEHPUP=\"BUFF_ORACLEHPUP\",e.BUFF_ORACLEHPDOWN=\"BUFF_ORACLEHPDOWN\",e.BUFF_ORACLEATKUP=\"BUFF_ORACLEATKUP\",e.BUFF_ORACLEATKDOWN=\"BUFF_ORACLEATKDOWN\",e.BUFF_ORACLEDEFUP=\"BUFF_ORACLEDEFUP\",e.BUFF_ORACLEDEFDOWN=\"BUFF_ORACLEDEFDOWN\",e.BUFF_ORACLERECUP=\"BUFF_ORACLERECUP\",e.BUFF_ORACLERECDOWN=\"BUFF_ORACLERECDOWN\",e.BUFF_ORACLECRTRATEUP=\"BUFF_ORACLECRTRATEUP\",e.BUFF_ORACLECRTRATEDOWN=\"BUFF_ORACLECRTRATEDOWN\",e.BUFF_REXHPUP=\"BUFF_REXHPUP\",e.BUFF_REXHPDOWN=\"BUFF_REXHPDOWN\",e.BUFF_REXATKUP=\"BUFF_REXATKUP\",e.BUFF_REXATKDOWN=\"BUFF_REXATKDOWN\",e.BUFF_REXDEFUP=\"BUFF_REXDEFUP\",e.BUFF_REXDEFDOWN=\"BUFF_REXDEFDOWN\",e.BUFF_REXRECUP=\"BUFF_REXRECUP\",e.BUFF_REXRECDOWN=\"BUFF_REXRECDOWN\",e.BUFF_REXCRTRATEUP=\"BUFF_REXCRTRATEUP\",e.BUFF_REXCRTRATEDOWN=\"BUFF_REXCRTRATEDOWN\",e.BUFF_UNITTYPEHPUP=\"BUFF_UNITTYPEHPUP\",e.BUFF_UNITTYPEHPDOWN=\"BUFF_UNITTYPEHPDOWN\",e.BUFF_UNITTYPEATKUP=\"BUFF_UNITTYPEATKUP\",e.BUFF_UNITTYPEATKDOWN=\"BUFF_UNITTYPEATKDOWN\",e.BUFF_UNITTYPEDEFUP=\"BUFF_UNITTYPEDEFUP\",e.BUFF_UNITTYPEDEFDOWN=\"BUFF_UNITTYPEDEFDOWN\",e.BUFF_UNITTYPERECUP=\"BUFF_UNITTYPERECUP\",e.BUFF_UNITTYPERECDOWN=\"BUFF_UNITTYPERECDOWN\",e.BUFF_UNITTYPECRTRATEUP=\"BUFF_UNITTYPECRTRATEUP\",e.BUFF_UNITTYPECRTRATEDOWN=\"BUFF_UNITTYPECRTRATEDOWN\",e.BUFF_POISONBLK=\"BUFF_POISONBLK\",e.BUFF_WEAKBLK=\"BUFF_WEAKBLK\",e.BUFF_SICKBLK=\"BUFF_SICKBLK\",e.BUFF_INJURYBLK=\"BUFF_INJURYBLK\",e.BUFF_CURSEBLK=\"BUFF_CURSEBLK\",e.BUFF_PARALYSISBLK=\"BUFF_PARALYSISBLK\",e.BUFF_ATKDOWNBLK=\"BUFF_ATKDOWNBLK\",e.BUFF_DEFDOWNBLK=\"BUFF_DEFDOWNBLK\",e.BUFF_RECDOWNBLK=\"BUFF_RECDOWNBLK\",e.BUFF_AILMENTBLK=\"BUFF_AILMENTBLK\",e.DEBUFF_POISON=\"DEBUFF_POISON\",e.DEBUFF_WEAK=\"DEBUFF_WEAK\",e.DEBUFF_SICK=\"DEBUFF_SICK\",e.DEBUFF_INJURY=\"DEBUFF_INJURY\",e.DEBUFF_CURSE=\"DEBUFF_CURSE\",e.DEBUFF_PARALYSIS=\"DEBUFF_PARALYSIS\",e.DEBUFF_AILMENT=\"DEBUFF_AILMENT\",e.BUFF_DAMAGECUT=\"BUFF_DAMAGECUT\",e.BUFF_FIREDMGDOWN=\"BUFF_FIREDMGDOWN\",e.BUFF_WATERDMGDOWN=\"BUFF_WATERDMGDOWN\",e.BUFF_EARTHDMGDOWN=\"BUFF_EARTHDMGDOWN\",e.BUFF_THUNDERDMGDOWN=\"BUFF_THUNDERDMGDOWN\",e.BUFF_LIGHTDMGDOWN=\"BUFF_LIGHTDMGDOWN\",e.BUFF_DARKDMGDOWN=\"BUFF_DARKDMGDOWN\",e.BUFF_ELEMENTDMGDOWN=\"BUFF_ELEMENTDMGDOWN\",e.BUFF_HCDROP=\"BUFF_HCDROP\",e.BUFF_HCDOWN=\"BUFF_HCDOWN\",e.BUFF_BCDROP=\"BUFF_BCDROP\",e.BUFF_BCDOWN=\"BUFF_BCDOWN\",e.BUFF_ITEMDROP=\"BUFF_ITEMDROP\",e.BUFF_ITEMDOWN=\"BUFF_ITEMDOWN\",e.BUFF_ZELDROP=\"BUFF_ZELDROP\",e.BUFF_ZELDOWN=\"BUFF_ZELDOWN\",e.BUFF_KARMADROP=\"BUFF_KARMADROP\",e.BUFF_KARMADOWN=\"BUFF_KARMADOWN\",e.BUFF_HCREC=\"BUFF_HCREC\",e.BUFF_KOBLK=\"BUFF_KOBLK\",e.ATK_ST=\"ATK_ST\",e.ATK_AOE=\"ATK_AOE\",e.ATK_RT=\"ATK_RT\"}(M||(M={})),function(e){e.UNKNOWN_PASSIVE_EFFECT_ID=\"UNKNOWN_PASSIVE_EFFECT_ID\",e.UNKNOWN_PASSIVE_BUFF_PARAMS=\"UNKNOWN_PASSIVE_BUFF_PARAMS\",e.TURN_DURATION_MODIFICATION=\"TURN_DURATION_MODIFICATION\",e[\"passive:1:hp\"]=\"passive:1:hp\",e[\"passive:1:atk\"]=\"passive:1:atk\",e[\"passive:1:def\"]=\"passive:1:def\",e[\"passive:1:rec\"]=\"passive:1:rec\",e[\"passive:1:crit\"]=\"passive:1:crit\",e[\"passive:2:hp\"]=\"passive:2:hp\",e[\"passive:2:atk\"]=\"passive:2:atk\",e[\"passive:2:def\"]=\"passive:2:def\",e[\"passive:2:rec\"]=\"passive:2:rec\",e[\"passive:2:crit\"]=\"passive:2:crit\",e[\"passive:3:hp\"]=\"passive:3:hp\",e[\"passive:3:atk\"]=\"passive:3:atk\",e[\"passive:3:def\"]=\"passive:3:def\",e[\"passive:3:rec\"]=\"passive:3:rec\",e[\"passive:3:crit\"]=\"passive:3:crit\",e[\"passive:4:poison\"]=\"passive:4:poison\",e[\"passive:4:weak\"]=\"passive:4:weak\",e[\"passive:4:sick\"]=\"passive:4:sick\",e[\"passive:4:injury\"]=\"passive:4:injury\",e[\"passive:4:curse\"]=\"passive:4:curse\",e[\"passive:4:paralysis\"]=\"passive:4:paralysis\",e[\"passive:5:fire\"]=\"passive:5:fire\",e[\"passive:5:water\"]=\"passive:5:water\",e[\"passive:5:earth\"]=\"passive:5:earth\",e[\"passive:5:thunder\"]=\"passive:5:thunder\",e[\"passive:5:light\"]=\"passive:5:light\",e[\"passive:5:dark\"]=\"passive:5:dark\",e[\"passive:5:unknown\"]=\"passive:5:unknown\",e[\"passive:8\"]=\"passive:8\",e[\"passive:9\"]=\"passive:9\",e[\"passive:10\"]=\"passive:10\",e[\"passive:11:atk\"]=\"passive:11:atk\",e[\"passive:11:def\"]=\"passive:11:def\",e[\"passive:11:rec\"]=\"passive:11:rec\",e[\"passive:11:crit\"]=\"passive:11:crit\",e[\"passive:12:bc\"]=\"passive:12:bc\",e[\"passive:12:hc\"]=\"passive:12:hc\",e[\"passive:12:item\"]=\"passive:12:item\",e[\"passive:12:zel\"]=\"passive:12:zel\",e[\"passive:12:karma\"]=\"passive:12:karma\",e.UNKNOWN_PROC_EFFECT_ID=\"UNKNOWN_PROC_EFFECT_ID\",e.UNKNOWN_PROC_BUFF_PARAMS=\"UNKNOWN_PROC_BUFF_PARAMS\",e[\"proc:1\"]=\"proc:1\",e[\"proc:2\"]=\"proc:2\",e[\"proc:3\"]=\"proc:3\",e[\"proc:4:flat\"]=\"proc:4:flat\",e[\"proc:4:percent\"]=\"proc:4:percent\",e[\"proc:5:atk\"]=\"proc:5:atk\",e[\"proc:5:def\"]=\"proc:5:def\",e[\"proc:5:rec\"]=\"proc:5:rec\",e[\"proc:5:crit\"]=\"proc:5:crit\",e[\"proc:6:bc\"]=\"proc:6:bc\",e[\"proc:6:hc\"]=\"proc:6:hc\",e[\"proc:6:item\"]=\"proc:6:item\",e[\"proc:7\"]=\"proc:7\",e[\"proc:8:flat\"]=\"proc:8:flat\",e[\"proc:8:percent\"]=\"proc:8:percent\",e[\"proc:9:atk\"]=\"proc:9:atk\",e[\"proc:9:def\"]=\"proc:9:def\",e[\"proc:9:rec\"]=\"proc:9:rec\",e[\"proc:9:unknown\"]=\"proc:9:unknown\",e[\"proc:10:poison\"]=\"proc:10:poison\",e[\"proc:10:weak\"]=\"proc:10:weak\",e[\"proc:10:sick\"]=\"proc:10:sick\",e[\"proc:10:injury\"]=\"proc:10:injury\",e[\"proc:10:curse\"]=\"proc:10:curse\",e[\"proc:10:paralysis\"]=\"proc:10:paralysis\",e[\"proc:10:atk down\"]=\"proc:10:atk down\",e[\"proc:10:def down\"]=\"proc:10:def down\",e[\"proc:10:rec down\"]=\"proc:10:rec down\",e[\"proc:10:unknown\"]=\"proc:10:unknown\",e[\"proc:11:poison\"]=\"proc:11:poison\",e[\"proc:11:weak\"]=\"proc:11:weak\",e[\"proc:11:sick\"]=\"proc:11:sick\",e[\"proc:11:injury\"]=\"proc:11:injury\",e[\"proc:11:curse\"]=\"proc:11:curse\",e[\"proc:11:paralysis\"]=\"proc:11:paralysis\",e[\"proc:11:atk down\"]=\"proc:11:atk down\",e[\"proc:11:def down\"]=\"proc:11:def down\",e[\"proc:11:rec down\"]=\"proc:11:rec down\",e[\"proc:11:unknown\"]=\"proc:11:unknown\",e[\"proc:12\"]=\"proc:12\",e[\"proc:13\"]=\"proc:13\"}(j||(j={}));const ee=Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({UNKNOWN_PASSIVE_EFFECT_ID:{id:j.UNKNOWN_PASSIVE_EFFECT_ID,name:\"Unknown Passive Effect\",stackType:S.Unknown,icons:()=>[M.UNKNOWN]},UNKNOWN_PASSIVE_BUFF_PARAMS:{id:j.UNKNOWN_PASSIVE_BUFF_PARAMS,name:\"Unknown Passive Buff Parameters\",stackType:S.Unknown,icons:()=>[M.UNKNOWN]},TURN_DURATION_MODIFICATION:{id:j.TURN_DURATION_MODIFICATION,name:\"Passive Turn Duration Modification\",stat:L.turnDurationModification,stackType:S.Passive,icons:e=>[e&&e.value&&e.value.duration&&e.value.duration<0?M.TURN_DURATION_DOWN:M.TURN_DURATION_UP]},\"passive:1:hp\":{id:j[\"passive:1:hp\"],name:\"Passive HP Boost\",stat:L.hp,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPDOWN:M.BUFF_HPUP]},\"passive:1:atk\":{id:j[\"passive:1:atk\"],name:\"Passive Attack Boost\",stat:L.atk,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ATKDOWN:M.BUFF_ATKUP]},\"passive:1:def\":{id:j[\"passive:1:def\"],name:\"Passive Defense Boost\",stat:L.def,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_DEFDOWN:M.BUFF_DEFUP]},\"passive:1:rec\":{id:j[\"passive:1:rec\"],name:\"Passive Recovery Boost\",stat:L.rec,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_RECDOWN:M.BUFF_RECUP]},\"passive:1:crit\":{id:j[\"passive:1:crit\"],name:\"Passive Critical Hit Rate Boost\",stat:L.crit,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_CRTRATEDOWN:M.BUFF_CRTRATEUP]}},(()=>{const e=e=>a=>{let t=\"\",s=\"UP\";a&&(a.value&&a.value<0&&(s=\"DOWN\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0])),\"string\"!=typeof t&&(t=\"\");let i=`BUFF_${t.toUpperCase()}${e}${s}`;return t&&i in M||(i=`BUFF_ELEMENT${e}${s}`),[M[i]]};return{\"passive:2:hp\":{id:j[\"passive:2:hp\"],name:\"Passive Elemental HP Boost\",stat:L.hp,stackType:S.Passive,icons:e(\"HP\")},\"passive:2:atk\":{id:j[\"passive:2:atk\"],name:\"Passive Elemental Attack Boost\",stat:L.atk,stackType:S.Passive,icons:e(\"ATK\")},\"passive:2:def\":{id:j[\"passive:2:def\"],name:\"Passive Elemental Defense Boost\",stat:L.def,stackType:S.Passive,icons:e(\"DEF\")},\"passive:2:rec\":{id:j[\"passive:2:rec\"],name:\"Passive Elemental Recovery Boost\",stat:L.rec,stackType:S.Passive,icons:e(\"REC\")},\"passive:2:crit\":{id:j[\"passive:2:crit\"],name:\"Passive Elemental Critical Hit Rate Boost\",stat:L.crit,stackType:S.Passive,icons:e(\"CRTRATE\")}}})()),(()=>{const e=e=>a=>{let t=\"\",s=\"UP\";a&&(a.value&&a.value<0&&(s=\"DOWN\"),a.conditions&&(t=a.conditions.targetUnitType||\"\")),\"string\"==typeof t&&t||(t=\"unknown\");let i=`BUFF_${t.toUpperCase()}${e}${s}`;return t&&i in M||(i=`BUFF_UNITTYPE${e}${s}`),[M[i]]};return{\"passive:3:hp\":{id:j[\"passive:3:hp\"],name:\"Passive Type-Based HP Boost\",stat:L.hp,stackType:S.Passive,icons:e(\"HP\")},\"passive:3:atk\":{id:j[\"passive:3:atk\"],name:\"Passive Type-Based Attack Boost\",stat:L.atk,stackType:S.Passive,icons:e(\"ATK\")},\"passive:3:def\":{id:j[\"passive:3:def\"],name:\"Passive Type-Based Defense Boost\",stat:L.def,stackType:S.Passive,icons:e(\"DEF\")},\"passive:3:rec\":{id:j[\"passive:3:rec\"],name:\"Passive Type-Based Recovery Boost\",stat:L.rec,stackType:S.Passive,icons:e(\"REC\")},\"passive:3:crit\":{id:j[\"passive:3:crit\"],name:\"Passive Type-Based Critical Hit Rate Boost\",stat:L.crit,stackType:S.Passive,icons:e(\"CRTRATE\")}}})()),{\"passive:4:poison\":{id:j[\"passive:4:poison\"],name:\"Passive Poison Resist\",stat:L.poisonResist,stackType:S.Passive,icons:()=>[M.BUFF_POISONBLK]},\"passive:4:weak\":{id:j[\"passive:4:weak\"],name:\"Passive Weak Resist\",stat:L.weakResist,stackType:S.Passive,icons:()=>[M.BUFF_WEAKBLK]},\"passive:4:sick\":{id:j[\"passive:4:sick\"],name:\"Passive Sick Resist\",stat:L.sickResist,stackType:S.Passive,icons:()=>[M.BUFF_SICKBLK]},\"passive:4:injury\":{id:j[\"passive:4:injury\"],name:\"Passive Injury Resist\",stat:L.injuryResist,stackType:S.Passive,icons:()=>[M.BUFF_INJURYBLK]},\"passive:4:curse\":{id:j[\"passive:4:curse\"],name:\"Passive Curse Resist\",stat:L.curseResist,stackType:S.Passive,icons:()=>[M.BUFF_CURSEBLK]},\"passive:4:paralysis\":{id:j[\"passive:4:paralysis\"],name:\"Passive Paralysis Resist\",stat:L.poisonResist,stackType:S.Passive,icons:()=>[M.BUFF_PARALYSISBLK]},\"passive:5:fire\":{id:j[\"passive:5:fire\"],name:\"Passive Fire Damage Reduction\",stat:L.fireMitigation,stackType:S.Passive,icons:()=>[M.BUFF_FIREDMGDOWN]},\"passive:5:water\":{id:j[\"passive:5:water\"],name:\"Passive Water Damage Reduction\",stat:L.waterMitigation,stackType:S.Passive,icons:()=>[M.BUFF_WATERDMGDOWN]},\"passive:5:earth\":{id:j[\"passive:5:earth\"],name:\"Passive Earth Damage Reduction\",stat:L.earthMitigation,stackType:S.Passive,icons:()=>[M.BUFF_EARTHDMGDOWN]},\"passive:5:thunder\":{id:j[\"passive:5:thunder\"],name:\"Passive Thunder Damage Reduction\",stat:L.thunderMitigation,stackType:S.Passive,icons:()=>[M.BUFF_THUNDERDMGDOWN]},\"passive:5:light\":{id:j[\"passive:5:light\"],name:\"Passive Light Damage Reduction\",stat:L.lightMitigation,stackType:S.Passive,icons:()=>[M.BUFF_LIGHTDMGDOWN]},\"passive:5:dark\":{id:j[\"passive:5:dark\"],name:\"Passive Dark Damage Reduction\",stat:L.darkMitigation,stackType:S.Passive,icons:()=>[M.BUFF_DARKDMGDOWN]},\"passive:5:unknown\":{id:j[\"passive:5:unknown\"],name:\"Passive Elemental Damage Reduction (Unspecified Element)\",stat:L.mitigation,stackType:S.Passive,icons:()=>[M.BUFF_ELEMENTDMGDOWN]},\"passive:8\":{id:j[\"passive:8\"],name:\"Passive Damage Reduction\",stat:L.mitigation,stackType:S.Passive,icons:()=>[M.BUFF_DAMAGECUT]},\"passive:9\":{id:j[\"passive:9\"],name:\"Passive Gradual BB Gauge Fill\",stat:L.bbGauge,stackType:S.Passive,icons:()=>[M.BUFF_BBREC]},\"passive:10\":{id:j[\"passive:10\"],name:\"Passive HC Efficacy\",stat:L.hcEfficacy,stackType:S.Passive,icons:()=>[M.BUFF_HCREC]},\"passive:11:atk\":{id:j[\"passive:11:atk\"],name:\"Passive HP-Conditional Attack Boost\",stat:L.atk,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHATKDOWN:M.BUFF_HPTHRESHATKUP]},\"passive:11:def\":{id:j[\"passive:11:def\"],name:\"Passive HP-Conditional Defense Boost\",stat:L.def,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHDEFDOWN:M.BUFF_HPTHRESHDEFUP]},\"passive:11:rec\":{id:j[\"passive:11:rec\"],name:\"Passive HP-Conditional Recovery Boost\",stat:L.rec,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHRECDOWN:M.BUFF_HPTHRESHRECUP]},\"passive:11:crit\":{id:j[\"passive:11:crit\"],name:\"Passive HP-Conditional Critical Hit Rate Boost\",stat:L.crit,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HPTHRESHCRTRATEDOWN:M.BUFF_HPTHRESHCRTRATEUP]},\"passive:12:bc\":{id:j[\"passive:12:bc\"],name:\"Passive Battle Crystal Drop Rate Boost\",stat:L.bcDropRate,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_BCDOWN:M.BUFF_BCDROP]},\"passive:12:hc\":{id:j[\"passive:12:hc\"],name:\"Passive Heart Crystal Drop Rate Boost\",stat:L.hcDropRate,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HCDOWN:M.BUFF_HCDROP]},\"passive:12:item\":{id:j[\"passive:12:item\"],name:\"Passive Item Drop Rate Boost\",stat:L.itemDropRate,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ITEMDOWN:M.BUFF_ITEMDROP]},\"passive:12:zel\":{id:j[\"passive:12:zel\"],name:\"Passive Zel Drop Rate Boost\",stat:L.zelDropRate,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ZELDOWN:M.BUFF_ZELDROP]},\"passive:12:karma\":{id:j[\"passive:12:karma\"],name:\"Passive Karma Drop Rate Boost\",stat:L.karmaDropRate,stackType:S.Passive,icons:e=>[e&&e.value&&e.value<0?M.BUFF_KARMADOWN:M.BUFF_KARMADROP]},UNKNOWN_PROC_EFFECT_ID:{id:j.UNKNOWN_PROC_EFFECT_ID,name:\"Unknown Proc Effect\",stackType:S.Unknown,icons:()=>[M.UNKNOWN]},UNKNOWN_PROC_BUFF_PARAMS:{id:j.UNKNOWN_PROC_BUFF_PARAMS,name:\"Unknown Proc Buff Parameters\",stackType:S.Unknown,icons:()=>[M.UNKNOWN]},\"proc:1\":{id:j[\"proc:1\"],name:\"Regular Damage\",stackType:S.Attack,icons:e=>[e&&e.targetArea===U.Single?M.ATK_ST:M.ATK_AOE]},\"proc:2\":{id:j[\"proc:2\"],name:\"Burst Heal\",stat:L.hp,stackType:S.Burst,icons:()=>[M.BUFF_HPREC]},\"proc:3\":{id:j[\"proc:3\"],name:\"Active Gradual Heal\",stat:L.hp,stackType:S.Active,icons:()=>[M.BUFF_HPREC]},\"proc:4:flat\":{id:j[\"proc:4:flat\"],name:\"Burst BB Gauge Fill (Flat Amount)\",stat:L.bbGauge,stackType:S.Burst,icons:()=>[M.BUFF_BBREC]},\"proc:4:percent\":{id:j[\"proc:4:percent\"],name:\"Burst BB Gauge Fill (Percentage)\",stat:L.bbGauge,stackType:S.Burst,icons:()=>[M.BUFF_BBREC]}}),(()=>{const e=e=>a=>{let t=\"\",s=!1,i=\"UP\";a&&(a.value&&a.value<0&&(i=\"DOWN\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0],s=!0)),\"string\"!=typeof t&&(t=\"\");let n=`BUFF_${t.toUpperCase()}${e}${i}`;return t&&n in M||(n=`BUFF_${s?\"ELEMENT\":\"\"}${e}${i}`),[M[n]]};return{\"proc:5:atk\":{id:j[\"proc:5:atk\"],name:\"Active Regular/Elemental Attack Boost\",stat:L.atk,stackType:S.Active,icons:e(\"ATK\")},\"proc:5:def\":{id:j[\"proc:5:def\"],name:\"Active Regular/Elemental Defense Boost\",stat:L.def,stackType:S.Active,icons:e(\"DEF\")},\"proc:5:rec\":{id:j[\"proc:5:rec\"],name:\"Active Regular/Elemental Recovery Boost\",stat:L.rec,stackType:S.Active,icons:e(\"REC\")},\"proc:5:crit\":{id:j[\"proc:5:crit\"],name:\"Active Regular/Elemental Critical Hit Rate Boost\",stat:L.crit,stackType:S.Active,icons:e(\"CRTRATE\")}}})()),{\"proc:6:bc\":{id:j[\"proc:6:bc\"],name:\"Active Battle Crystal Drop Rate Boost\",stat:L.bcDropRate,stackType:S.Active,icons:e=>[e&&e.value&&e.value<0?M.BUFF_BCDOWN:M.BUFF_BCDROP]},\"proc:6:hc\":{id:j[\"proc:6:hc\"],name:\"Active Heart Crystal Drop Rate Boost\",stat:L.hcDropRate,stackType:S.Active,icons:e=>[e&&e.value&&e.value<0?M.BUFF_HCDOWN:M.BUFF_HCDROP]},\"proc:6:item\":{id:j[\"proc:6:item\"],name:\"Active Item Drop Rate Boost\",stat:L.itemDropRate,stackType:S.Active,icons:e=>[e&&e.value&&e.value<0?M.BUFF_ITEMDOWN:M.BUFF_ITEMDROP]},\"proc:7\":{id:j[\"proc:7\"],name:\"Guaranteed KO Resistance\",stat:L.koResistance,stackType:S.Singleton,icons:()=>[M.BUFF_KOBLK]},\"proc:8:flat\":{id:j[\"proc:8:flat\"],name:\"Max HP Boost (Flat Amount)\",stat:L.hp,stackType:S.Singleton,icons:()=>[M.BUFF_HPUP]},\"proc:8:percent\":{id:j[\"proc:8:percent\"],name:\"Max HP Boost (Percentage)\",stat:L.hp,stackType:S.Singleton,icons:()=>[M.BUFF_HPUP]}}),(()=>{const e=e=>a=>{let t=\"\",s=!1,i=\"DOWN\";a&&(a.value&&a.value>0&&(i=\"UP\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0],s=!0)),\"string\"!=typeof t&&(t=\"\");let n=`BUFF_${t.toUpperCase()}${e}${i}`;return t&&n in M||(n=`BUFF_${s?\"ELEMENT\":\"\"}${e}${i}`),[M[n]]};return{\"proc:9:atk\":{id:j[\"proc:9:atk\"],name:\"Active Regular/Elemental Attack Reduction\",stat:L.atk,stackType:S.Active,icons:e(\"ATK\")},\"proc:9:def\":{id:j[\"proc:9:def\"],name:\"Active Regular/Elemental Defense Reduction\",stat:L.def,stackType:S.Active,icons:e(\"DEF\")},\"proc:9:rec\":{id:j[\"proc:9:rec\"],name:\"Active Regular/Elemental Recovery Reduction\",stat:L.rec,stackType:S.Active,icons:e(\"REC\")},\"proc:9:unknown\":{id:j[\"proc:9:unknown\"],name:\"Active Regular/Elemental Unknown Stat Reduction\",stackType:S.Active,icons:()=>[M.UNKNOWN]}}})()),{\"proc:10:poison\":{id:j[\"proc:10:poison\"],name:\"Poison Cleanse\",stat:L.poisonResist,stackType:S.Burst,icons:()=>[M.BUFF_POISONBLK]},\"proc:10:weak\":{id:j[\"proc:10:weak\"],name:\"Weak Cleanse\",stat:L.weakResist,stackType:S.Burst,icons:()=>[M.BUFF_WEAKBLK]},\"proc:10:sick\":{id:j[\"proc:10:sick\"],name:\"Sick Cleanse\",stat:L.sickResist,stackType:S.Burst,icons:()=>[M.BUFF_SICKBLK]},\"proc:10:injury\":{id:j[\"proc:10:injury\"],name:\"Injury Cleanse\",stat:L.injuryResist,stackType:S.Burst,icons:()=>[M.BUFF_INJURYBLK]},\"proc:10:curse\":{id:j[\"proc:10:curse\"],name:\"Curse Cleanse\",stat:L.curseResist,stackType:S.Burst,icons:()=>[M.BUFF_CURSEBLK]},\"proc:10:paralysis\":{id:j[\"proc:10:paralysis\"],name:\"Paralysis Cleanse\",stat:L.poisonResist,stackType:S.Burst,icons:()=>[M.BUFF_PARALYSISBLK]},\"proc:10:atk down\":{id:j[\"proc:10:atk down\"],name:\"Attack Reduction Cleanse\",stat:L.atkDownResist,stackType:S.Burst,icons:()=>[M.BUFF_ATKDOWNBLK]},\"proc:10:def down\":{id:j[\"proc:10:def down\"],name:\"Defense Reduction Cleanse\",stat:L.defDownResist,stackType:S.Burst,icons:()=>[M.BUFF_DEFDOWNBLK]},\"proc:10:rec down\":{id:j[\"proc:10:rec down\"],name:\"Recovery Reduction Cleanse\",stat:L.recDownResist,stackType:S.Burst,icons:()=>[M.BUFF_RECDOWNBLK]},\"proc:10:unknown\":{id:j[\"proc:10:unknown\"],name:\"Unknown Ailment Cleanse\",stackType:S.Unknown,icons:()=>[M.BUFF_AILMENTBLK]},\"proc:11:poison\":{id:j[\"proc:11:poison\"],name:\"Poison Infliction\",stat:L.poisonInflict,stackType:S.Burst,icons:()=>[M.DEBUFF_POISON]},\"proc:11:weak\":{id:j[\"proc:11:weak\"],name:\"Weak Infliction\",stat:L.weakInflict,stackType:S.Burst,icons:()=>[M.DEBUFF_WEAK]},\"proc:11:sick\":{id:j[\"proc:11:sick\"],name:\"Sick Infliction\",stat:L.sickInflict,stackType:S.Burst,icons:()=>[M.DEBUFF_SICK]},\"proc:11:injury\":{id:j[\"proc:11:injury\"],name:\"Injury Infliction\",stat:L.injuryInflict,stackType:S.Burst,icons:()=>[M.DEBUFF_INJURY]},\"proc:11:curse\":{id:j[\"proc:11:curse\"],name:\"Curse Infliction\",stat:L.curseInflict,stackType:S.Burst,icons:()=>[M.DEBUFF_CURSE]},\"proc:11:paralysis\":{id:j[\"proc:11:paralysis\"],name:\"Paralysis Infliction\",stat:L.poisonInflict,stackType:S.Burst,icons:()=>[M.DEBUFF_PARALYSIS]},\"proc:11:atk down\":{id:j[\"proc:11:atk down\"],name:\"Attack Reduction Infliction\",stat:L.atkDownInflict,stackType:S.Burst,icons:()=>[M.BUFF_ATKDOWN]},\"proc:11:def down\":{id:j[\"proc:11:def down\"],name:\"Defense Reduction Infliction\",stat:L.defDownInflict,stackType:S.Burst,icons:()=>[M.BUFF_DEFDOWN]},\"proc:11:rec down\":{id:j[\"proc:11:rec down\"],name:\"Recovery Reduction Infliction\",stat:L.recDownInflict,stackType:S.Burst,icons:()=>[M.BUFF_RECDOWN]},\"proc:11:unknown\":{id:j[\"proc:11:unknown\"],name:\"Unknown Ailment Infliction\",stackType:S.Unknown,icons:()=>[M.DEBUFF_AILMENT]},\"proc:12\":{id:j[\"proc:12\"],name:\"Instant Revive (Guaranteed)\",stackType:S.Burst,icons:()=>[M.BUFF_KOBLK]},\"proc:13\":{id:j[\"proc:13\"],name:\"Random Target Damage\",stackType:S.Attack,icons:()=>[M.ATK_RT]}}));var ae=Object.freeze({__proto__:null,convertProcEffectToBuffs:function(e,a){if(!e||\"object\"!=typeof e)throw new TypeError(\"effect parameter should be an object\");if(!a||\"object\"!=typeof a)throw new TypeError(\"context parameter should be an object\");const i=b(e)&&t(e),n=i&&J(a.reloadMapping).get(i);return\"function\"==typeof n?n(e,a):function(e,a){const i=b(e)&&t(e)||s.Unknown;return[{id:j.UNKNOWN_PROC_EFFECT_ID,originalId:i,effectDelay:e[\"effect delay time(ms)/frame\"],targetType:e[\"target type\"],targetArea:e[\"target area\"],sources:$(a)}]}(e,a)},convertPassiveEffectToBuffs:function(e,a){if(!e||\"object\"!=typeof e)throw new TypeError(\"effect parameter should be an object\");if(!a||\"object\"!=typeof a)throw new TypeError(\"context parameter should be an object\");const s=H(e)&&t(e),n=s&&Q(a.reloadMapping).get(s);return\"function\"==typeof n?n(e,a):function(e,a){const s=H(e)&&t(e)||i.Unknown;return[{id:j.UNKNOWN_PASSIVE_EFFECT_ID,originalId:s,sources:$(a)}]}(e,a)},get BuffSource(){return K},get BuffStackType(){return S},BUFF_METADATA:ee,getMetadataForBuff:function(e,a=ee){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}}),te=Object.freeze({__proto__:null,constants:r,parsers:ae,getMetadataForProc:F,getMetadataForPassive:k,isAttackingProcId:p,getNameForProc:h,getNameForPassive:C,isProcEffect:b,isPassiveEffect:H,combineEffectsAndDamageFrames:function(e,a){let t=[];return Array.isArray(e)&&e.length>0&&Array.isArray(a)&&e.length===a.length&&(t=e.map((e,t)=>{const s=a[t];return{delay:e[\"effect delay time(ms)/frame\"],effect:e,frames:s,id:`${e[\"proc id\"]||e[\"unknown proc id\"]}`,targetArea:e[\"random attack\"]?U.Random:e[\"target area\"],targetType:e[\"target type\"]}})),t},getEffectId:t,getEffectName:function(e,a={}){let s=\"\";const i=t(e);return H(e)?s=C(i,a&&a.passive):b(e)&&(s=h(i,a&&a.proc)),s},get ProcBuffType(){return n},PASSIVE_METADATA:o,PROC_METADATA:c});var se=Object.freeze({__proto__:null,getEffectsForExtraSkill:function(e){return e&&Array.isArray(e.effects)?e.effects:[]}});var ie=Object.freeze({__proto__:null,getEffectsForItem:function(e){let a=[];if(e&&e.effect)if(Array.isArray(e.effect))a=e.effect;else if(Array.isArray(e.effect.effect)){const{effect:t,target_area:s,target_type:i}=e.effect;a=t.map(e=>{const a=Object.assign({},e);return a[\"target area\"]=s,a[\"target type\"]=i,a})}return a},getItemImageUrl:function(e,a){return`${e||\"\"}/item/${a||\"\"}`}});var ne=Object.freeze({__proto__:null,getEffectsForLeaderSkill:function(e){return e&&Array.isArray(e.effects)?e.effects:[]}});var re=Object.freeze({__proto__:null,getUnitImageFileNames:function(e,a=\"\"){const t=`${e||\"\"}${a||\"\"}.png`;return{spritesheet:`unit_anime_${t}`,battleAvatar:`unit_ills_battle_${t}`,guideAvatar:`unit_ills_thum_${t}`,fullIllustration:`unit_ills_full_${t}`}},getUnitImageUrl:function(e,a){return`${e||\"\"}/unit/img/${a||\"\"}`}});const oe=\"A\".charCodeAt(0),ce=\"a\".charCodeAt(0),Fe=\"0\".charCodeAt(0);function pe(e){return\"string\"==typeof e&&e.split(\"@\")[1]||e}var De=Object.freeze({__proto__:null,getEffectsForSpEnhancement:function(e){const a=[];if(e&&e.skill&&Array.isArray(e.skill.effects)){e.skill.effects.forEach(e=>{Object.keys(e).forEach(t=>{const s=e[t],i=Object.assign(Object.assign({},s),{sp_type:t});a.push(i)})})}return a},getSpCategoryName:function(e){let a;switch(+e){case 1:a=T[\"Parameter Boost\"];break;case 2:a=T.Spark;break;case 3:a=T[\"Critical Hits\"];break;case 4:a=T[\"Attack Boost\"];break;case 5:a=T[\"BB Gauge\"];break;case 6:a=T[\"HP Recovery\"];break;case 7:a=T.Drops;break;case 8:a=T[\"Ailment Resistance\"];break;case 9:a=T[\"Ailment Infliction\"];break;case 10:a=T[\"Damage Reduction\"];break;case 11:a=T.Special;break;default:a=T.Unknown}return a},spIndexToCode:function(e){let a=\"\",t=-1;return Number.isInteger(e)&&(e>=0&&e<=25?t=e+oe:e>=26&&e<=51?t=e-26+ce:e>=52&&e<=61&&(t=e-52+Fe)),-1!==t&&(a=String.fromCharCode(t)),a},spCodeToIndex:function(e){let a=-1,t=-1;return e&&\"string\"==typeof e&&1===e.length&&(e>=\"A\"&&e<=\"Z\"?t=oe:e>=\"a\"&&e<=\"z\"?t=ce-26:e>=\"0\"&&e<=\"9\"&&(t=Fe-52)),-1!==t&&(a=e.charCodeAt(0)-t),a},getSpEntryId:pe,getSpEntryWithId:function(e,a){const t=pe(e);return e&&Array.isArray(a)&&a.find(e=>pe(e&&e.id)===t)||void 0},getAllDependenciesForSpEntry:function e(a,t,s=new Set){let i=[];if(a&&a.dependency&&Array.isArray(t)&&t.length>0){const n=pe(a.dependency),r=t.find(e=>pe(e&&e.id)===n);if(r&&!s.has(r)){s.add(r);const a=e(r,t,s);i=[r].concat(a)}}return i},getAllEntriesThatDependOnSpEntry:function e(a,t,s=new Set){let i=[];if(a&&a.id&&Array.isArray(t)&&t.length>0){const n=a.id;(i=t.filter(e=>e.dependency&&e.dependency.includes(n)&&!s.has(e))).forEach(a=>{s.add(a);const n=e(a,t,s);i=i.concat(n)})}return i}});return e.buffs=te,e.bursts=O,e.datamineTypes=G,e.extraSkills=se,e.items=ie,e.leaderSkills=ne,e.spEnhancements=De,e.units=re,e.version=\"0.7.0\",e}({});\n//# sourceMappingURL=index.browser.min.js.map\n","var bfmtUtilities = (function (exports) {\n    'use strict';\n\n    /**\n     * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get level entry from.\n     * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n     * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n     */\n    function getLevelEntryForBurst(burst, level) {\n        const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n        let levelIndex;\n        if (level !== null && !isNaN(level)) {\n            // 1-indexed\n            levelIndex = (+level - 1);\n        }\n        else {\n            // default to last entry in burst\n            levelIndex = burstEffectsByLevel.length - 1;\n        }\n        return burstEffectsByLevel[levelIndex];\n    }\n\n    /**\n     * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get effects from.\n     * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n     * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n     */\n    function getEffectsForBurst(burst, level) {\n        const levelEntry = getLevelEntryForBurst(burst, level);\n        return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n    }\n\n    /**\n     * @description Get the proc/passive ID of a given object.\n     * @param effect Object to get the effect ID from.\n     * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectId(effect) {\n        let resultId = '';\n        if (effect) {\n            resultId = effect['proc id'] || effect['unknown proc id'] ||\n                effect['passive id'] || effect['unknown passive id'] || '';\n        }\n        return resultId;\n    }\n\n    var KNOWN_PROC_ID;\n    (function (KNOWN_PROC_ID) {\n        KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n        KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    })(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\n    var KNOWN_PASSIVE_ID;\n    (function (KNOWN_PASSIVE_ID) {\n        KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n        KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    })(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n\n    var constants = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get KNOWN_PROC_ID () { return KNOWN_PROC_ID; },\n        get KNOWN_PASSIVE_ID () { return KNOWN_PASSIVE_ID; }\n    });\n\n    var ProcBuffType;\n    (function (ProcBuffType) {\n        ProcBuffType[\"Attack\"] = \"Attack\";\n    })(ProcBuffType || (ProcBuffType = {}));\n    /* eslint-disable */\n    /**\n     * @ignore\n     */\n    const PASSIVE_METADATA = Object.freeze({\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Parameter Boost\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Elemental Parameter Boost\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Type-Based Parameter Boost\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"Status Negation\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Damage Reduction\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Gradual BB Gauge Boost\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"HC Efficacy\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"HP-Conditional Parameter Boost\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"HP-Conditional Drop Rate Boost\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"BC Fill on Enemy Defeat\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Damage Reduction (Chance)\"\n        },\n        \"15\": {\n            \"ID\": \"15\",\n            \"Name\": \"Heal on Enemy Defeat\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Heal on Battle Victory\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"HP Absorption\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Drop Rate Boost\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"Status Infliction\"\n        },\n        \"21\": {\n            \"ID\": \"21\",\n            \"Name\": \"Parameter Boost for First X Turns\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"BC Fill on Battle Victory\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Heal when Attacked (Chance)\"\n        },\n        \"25\": {\n            \"ID\": \"25\",\n            \"Name\": \"BC Fill when Hit (Chance)\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Damage Counter (Chance)\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Increased Target Chance\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Decreased Target Chance\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Defense Ignore (Chance)\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"BB Conditional Parameter Boost\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"BC Efficacy\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Heal over Time\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"Critical Damage Boost\"\n        },\n        \"35\": {\n            \"ID\": \"35\",\n            \"Name\": \"BC Fill when Normal Attacking\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Extra Action\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Hit Count Boost\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Parameter Conversion\"\n        },\n        \"41\": {\n            \"ID\": \"41\",\n            \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"Gender Parameter Boost\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Damage Reduction to 1\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Flat Parameter Boost\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"Critical Damage Negation\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"BC Fill on Spark\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"BC Cost Reduction\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"BB Gauge Consumption Reduction\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Elemental Damage Boost\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Conditional Effect based on HP Threshold\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Damage Reduction when Guarding\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BC Fill when Attacked when Guarding\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BC Fill on Guard\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Elemental Damage Reduction for first X Turns\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"BB Atk Boost\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"BC Fill on Critical\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Add buff to Brave Burst\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"OD Gauge Fill Rate Boost\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"Status Counter\"\n        },\n        \"72\": {\n            \"ID\": \"72\",\n            \"Name\": \"Turn End Effects Activate at Turn Start\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\"\n        },\n        \"74\": {\n            \"ID\": \"74\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Spark Vulnerability\"\n        },\n        \"77\": {\n            \"ID\": \"77\",\n            \"Name\": \"Spark Damage Reduction\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Conditional Effect after Damage Received Threshold\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"BC Fill after Damage Received Threshold\"\n        },\n        \"80\": {\n            \"ID\": \"80\",\n            \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n        },\n        \"81\": {\n            \"ID\": \"81\",\n            \"Name\": \"BC Fill after Damage Dealt Threshold\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"Conditional Effect after BC Received Threshold\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"Conditional Effect after HC Received Threshold\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"BC Fill after HC Received Threshold\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"Conditional Effect after Spark Threshold\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Conditional Effect on Guard\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Conditional Effect on Critical\"\n        },\n        \"90\": {\n            \"ID\": \"90\",\n            \"Name\": \"Status Infliction on Critical\"\n        },\n        \"91\": {\n            \"ID\": \"91\",\n            \"Name\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Negate Defense Ignore\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Added Elements\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Normal Attacks Hit All Foes\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Player EXP Boost\"\n        },\n        \"99\": {\n            \"ID\": \"99\",\n            \"Name\": \"\"\n        },\n        \"100\": {\n            \"ID\": \"100\",\n            \"Name\": \"Spark Critical\"\n        },\n        \"101\": {\n            \"ID\": \"101\",\n            \"Name\": \"Heal on Spark\"\n        },\n        \"102\": {\n            \"ID\": \"102\",\n            \"Name\": \"Added Elements\"\n        },\n        \"103\": {\n            \"ID\": \"103\",\n            \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n        },\n        \"104\": {\n            \"ID\": \"104\",\n            \"Name\": \"Spark Boost when HP Passes Threshold\"\n        },\n        \"105\": {\n            \"ID\": \"105\",\n            \"Name\": \"Turn-Based Parameter Boost\"\n        },\n        \"106\": {\n            \"ID\": \"106\",\n            \"Name\": \"Conditional Effect after Activating Overdrive\"\n        },\n        \"107\": {\n            \"ID\": \"107\",\n            \"Name\": \"Add Effect to Leader Skill\"\n        },\n        \"109\": {\n            \"ID\": \"109\",\n            \"Name\": \"BB Gauge Reduction (Chance)\"\n        },\n        \"110\": {\n            \"ID\": \"110\",\n            \"Name\": \"BC Efficacy Reduction (Chance)\"\n        },\n        \"111\": {\n            \"ID\": \"111\",\n            \"Name\": \"Increase Brave Burst Activation Rate\"\n        },\n        \"112\": {\n            \"ID\": \"112\",\n            \"Name\": \"ABP/CBP Boost\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Conditional Effect after HP Threshold\"\n        },\n        \"114\": {\n            \"ID\": \"114\",\n            \"Name\": \"Inflict Buff when Attacked\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n        },\n        \"128\": {\n            \"ID\": \"128\",\n            \"Name\": \"Damage Reduction from Normal Attacks\"\n        },\n        \"143\": {\n            \"ID\": \"143\",\n            \"Name\": \"Break Atk Parameter Limit\"\n        },\n        \"10008\": {\n            \"ID\": \"10008\",\n            \"Name\": \"Damage Reduction from Specific Sources\"\n        },\n        \"11004\": {\n            \"ID\": \"11004\",\n            \"Name\": \"Elemental Spark Damage Boost\"\n        },\n        \"11005\": {\n            \"ID\": \"11005\",\n            \"Name\": \"Elemental Critical Damage Boost\"\n        },\n        \"11006\": {\n            \"ID\": \"11006\",\n            \"Name\": \"Summoner EXP Boost\"\n        },\n        \"11009\": {\n            \"ID\": \"11009\",\n            \"Name\": \"Effect Duration Boost\"\n        },\n        \"66,1\": {\n            \"ID\": \"66,1\",\n            \"Name\": \"\"\n        }\n    });\n    /**\n     * @ignore\n     */\n    const PROC_METADATA = Object.freeze({\n        \"0\": {\n            \"ID\": \"0\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Regular Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Burst Heal\",\n            \"Type\": \"\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Heal over Time\",\n            \"Type\": \"\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"BB Gauge Refill\",\n            \"Type\": \"\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"Drop Rate\",\n            \"Type\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Parameter Reduction\",\n            \"Type\": \"\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"Status Cleanse\",\n            \"Type\": \"\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"Status Infliction\",\n            \"Type\": \"\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"Revive (Guaranteed)\",\n            \"Type\": \"\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"Random Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Lifesteal Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"Status Negation\",\n            \"Type\": \"\"\n        },\n        \"18\": {\n            \"ID\": \"18\",\n            \"Name\": \"Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Gradual BB Gauge Boost\",\n            \"Type\": \"\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"BC Fill on Hit\",\n            \"Type\": \"\"\n        },\n        \"22\": {\n            \"ID\": \"22\",\n            \"Name\": \"Defense Ignore\",\n            \"Type\": \"\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Hit Count Boost\",\n            \"Type\": \"\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Fixed Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Multi-Element Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"Add Elements\",\n            \"Type\": \"\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Instant BB Gauge Fill\",\n            \"Type\": \"\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"Element Shift\",\n            \"Type\": \"\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Buff Removal (Chance)\",\n            \"Type\": \"\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"BB Gauge Reduction (Chance)\",\n            \"Type\": \"\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Leader Skill Lock (Chance)\",\n            \"Type\": \"\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Summon Unit\",\n            \"Type\": \"\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"Status Cure\",\n            \"Type\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Status Infliction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Instant OD Fill\",\n            \"Type\": \"\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Damage over Time (Additional Damage)\",\n            \"Type\": \"\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"BB Atk Boost\",\n            \"Type\": \"\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Non-Lethal Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"HP Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"Piercing Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"Retire\",\n            \"Type\": \"\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Damage Counter\",\n            \"Type\": \"\"\n        },\n        \"51\": {\n            \"ID\": \"51\",\n            \"Name\": \"Parameter Reduction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"BC Efficacy\",\n            \"Type\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Status Counter\",\n            \"Type\": \"\"\n        },\n        \"54\": {\n            \"ID\": \"54\",\n            \"Name\": \"Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Elemental Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"56\": {\n            \"ID\": \"56\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"57\": {\n            \"ID\": \"57\",\n            \"Name\": \"BC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Spark Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BB Atk Reduction\",\n            \"Type\": \"\"\n        },\n        \"60\": {\n            \"ID\": \"60\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BB-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Barrier\",\n            \"Type\": \"\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Selective Buff Wipe\",\n            \"Type\": \"\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"Consecutive Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\",\n            \"Type\": \"\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Revive (Chance)\",\n            \"Type\": \"\"\n        },\n        \"67\": {\n            \"ID\": \"67\",\n            \"Name\": \"BC Fill on Spark\",\n            \"Type\": \"\"\n        },\n        \"68\": {\n            \"ID\": \"68\",\n            \"Name\": \"Damage Reduction when Guarding\",\n            \"Type\": \"\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"BC Fill on Guard\",\n            \"Type\": \"\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"BB Gauge Fill Rate Debuff\",\n            \"Type\": \"\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\",\n            \"Type\": \"\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Element Squad-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"76\": {\n            \"ID\": \"76\",\n            \"Name\": \"Extra Action\",\n            \"Type\": \"\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Self Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"Player EXP Boost\",\n            \"Type\": \"\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"83\": {\n            \"ID\": \"83\",\n            \"Name\": \"Spark Critical\",\n            \"Type\": \"\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"OD Gauge Fill Rate\",\n            \"Type\": \"\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"Heal when Attacked\",\n            \"Type\": \"\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"HP Absorption\",\n            \"Type\": \"\"\n        },\n        \"87\": {\n            \"ID\": \"87\",\n            \"Name\": \"Heal on Spark\",\n            \"Type\": \"\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Self Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Self Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Self Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"94\": {\n            \"ID\": \"94\",\n            \"Name\": \"Normal Attacks Hit All Foes\",\n            \"Type\": \"\"\n        },\n        \"95\": {\n            \"ID\": \"95\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n            \"Type\": \"\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Element Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Gradual OD Fill\",\n            \"Type\": \"\"\n        },\n        \"119\": {\n            \"ID\": \"119\",\n            \"Name\": \"Gradual BC Drain\",\n            \"Type\": \"\"\n        },\n        \"123\": {\n            \"ID\": \"123\",\n            \"Name\": \"OD Gauge Reduction\",\n            \"Type\": \"\"\n        },\n        \"126\": {\n            \"ID\": \"126\",\n            \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n            \"Type\": \"\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Lock On\",\n            \"Type\": \"\"\n        },\n        \"130\": {\n            \"ID\": \"130\",\n            \"Name\": \"Parameter Reduction Counter\",\n            \"Type\": \"\"\n        },\n        \"131\": {\n            \"ID\": \"131\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"132\": {\n            \"ID\": \"132\",\n            \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"901\": {\n            \"ID\": \"901\",\n            \"Name\": \"Raid Heal (on Map)\",\n            \"Type\": \"\"\n        },\n        \"902\": {\n            \"ID\": \"902\",\n            \"Name\": \"Raid Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"903\": {\n            \"ID\": \"903\",\n            \"Name\": \"Raid Boss Reveal\",\n            \"Type\": \"\"\n        },\n        \"905\": {\n            \"ID\": \"905\",\n            \"Name\": \"Raid Teleport\",\n            \"Type\": \"\"\n        },\n        \"906\": {\n            \"ID\": \"906\",\n            \"Name\": \"Raid Flee\",\n            \"Type\": \"\"\n        },\n        \"907\": {\n            \"ID\": \"907\",\n            \"Name\": \"Raid Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"908\": {\n            \"ID\": \"908\",\n            \"Name\": \"Raid Item Drop Rate Boost\",\n            \"Type\": \"\"\n        },\n        \"10000\": {\n            \"ID\": \"10000\",\n            \"Name\": \"Taunt\",\n            \"Type\": \"\"\n        },\n        \"10001\": {\n            \"ID\": \"10001\",\n            \"Name\": \"Stealth\",\n            \"Type\": \"\"\n        },\n        \"10002\": {\n            \"ID\": \"10002\",\n            \"Name\": \"Shield (old)\",\n            \"Type\": \"\"\n        },\n        \"10003\": {\n            \"ID\": \"10003\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"10004\": {\n            \"ID\": \"10004\",\n            \"Name\": \"Damage Immunity\",\n            \"Type\": \"\"\n        },\n        \"10005\": {\n            \"ID\": \"10005\",\n            \"Name\": \"Turn Skip (short duration)\",\n            \"Type\": \"\"\n        },\n        \"10006\": {\n            \"ID\": \"10006\",\n            \"Name\": \"Turn Skip (long duration)\",\n            \"Type\": \"\"\n        },\n        \"10007\": {\n            \"ID\": \"10007\",\n            \"Name\": \"Evasion\",\n            \"Type\": \"\"\n        },\n        \"10009\": {\n            \"ID\": \"10009\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"10012\": {\n            \"ID\": \"10012\",\n            \"Name\": \"OD Drain\",\n            \"Type\": \"\"\n        },\n        \"10015\": {\n            \"ID\": \"10015\",\n            \"Name\": \"Elemental Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"10016\": {\n            \"ID\": \"10016\",\n            \"Name\": \"Element Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"10017\": {\n            \"ID\": \"10017\",\n            \"Name\": \"Elemental Shield\",\n            \"Type\": \"\"\n        },\n        \"10018\": {\n            \"ID\": \"10018\",\n            \"Name\": \"Max HP Reduction\",\n            \"Type\": \"\"\n        },\n        \"10019\": {\n            \"ID\": \"10019\",\n            \"Name\": \"Effect Purge\",\n            \"Type\": \"\"\n        },\n        \"10020\": {\n            \"ID\": \"10020\",\n            \"Name\": \"Piercing Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"10021\": {\n            \"ID\": \"10021\",\n            \"Name\": \"Active Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10022\": {\n            \"ID\": \"10022\",\n            \"Name\": \"Passive Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10023\": {\n            \"ID\": \"10023\",\n            \"Name\": \"HC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"10025\": {\n            \"ID\": \"10025\",\n            \"Name\": \"KO Resistance Negation\",\n            \"Type\": \"\"\n        },\n        \"10026\": {\n            \"ID\": \"10026\",\n            \"Name\": \"Doom\",\n            \"Type\": \"\"\n        },\n        \"11000\": {\n            \"ID\": \"11000\",\n            \"Name\": \"Negative HP-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"11001\": {\n            \"ID\": \"11001\",\n            \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n            \"Type\": \"\"\n        },\n        \"11002\": {\n            \"ID\": \"11002\",\n            \"Name\": \"HP Limit Break, Convert to HP\",\n            \"Type\": \"\"\n        },\n        \"11003\": {\n            \"ID\": \"11003\",\n            \"Name\": \"Effect Negation\",\n            \"Type\": \"\"\n        },\n        \"70001\": {\n            \"ID\": \"70001\",\n            \"Name\": \"Mana Bubble Shield\",\n            \"Type\": \"\"\n        },\n        \"70002\": {\n            \"ID\": \"70002\",\n            \"Name\": \"Recast\",\n            \"Type\": \"\"\n        },\n        \"2-5\": {\n            \"ID\": \"2-5\",\n            \"Name\": \"Burst Heal and DEF/REC Boost\",\n            \"Type\": \"\"\n        }\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given proc ID.\n     * @param id Proc ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForProc(id, metadata = PROC_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Determine if a given proc ID's type is an attack.\n     * @param id Proc ID to check.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n     */\n    function isAttackingProcId(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n    }\n\n    /**\n     * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n     * @param damageFrames Damage frames that each have their own proc ID.\n     * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Damage frames entry whose frames are based on the input damage frames.\n     */\n    function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n        // relevant frames are all effects for healing or attacking\n        const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n        const relevantFrames = inputFrames.filter(frame => {\n            const procId = getEffectId(frame);\n            return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n        });\n        const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n            const keepFirstFrame = index === 0;\n            const numFrames = frameEntry['frame times'].length;\n            const damageDistribution = frameEntry['hit dmg% distribution'];\n            const frameTimes = frameEntry['frame times'];\n            for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n                acc.push({\n                    damage: damageDistribution[frameIndex],\n                    time: frameTimes[frameIndex],\n                });\n            }\n            return acc;\n        }, []);\n        const resultDamageFramesEntry = {\n            'effect delay time(ms)/frame': effectDelay,\n            'frame times': [],\n            'hit dmg% distribution': [],\n            'hit dmg% distribution (total)': 0,\n            hits: 0,\n        };\n        unifiedFrames.sort((a, b) => a.time - b.time)\n            .forEach(({ time, damage }) => {\n            resultDamageFramesEntry['frame times'].push(time);\n            resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n            resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n        });\n        resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n        return resultDamageFramesEntry;\n    }\n\n    var index = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLevelEntryForBurst: getLevelEntryForBurst,\n        getEffectsForBurst: getEffectsForBurst,\n        getExtraAttackDamageFramesEntry: getExtraAttackDamageFramesEntry\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given passive ID.\n     * @param id Passive ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Get the associated name for a given proc ID.\n     * @param id Proc ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Name of the proc ID if it exists, empty string otherwise.\n     */\n    function getNameForProc(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Get the associated name for a given passive ID.\n     * @param id Passive ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Name of the passive ID if it exists, empty string otherwise.\n     */\n    function getNameForPassive(id, metadata) {\n        const metadataEntry = getMetadataForPassive(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Determine if a given effect object is a proc effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a proc effect based on its properties.\n     */\n    function isProcEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n    }\n\n    /**\n     * @description Determine if a given effect object is a passive effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a passive effect based on its properties.\n     */\n    function isPassiveEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n    }\n\n    var Ailment;\n    (function (Ailment) {\n        Ailment[\"Poison\"] = \"poison\";\n        Ailment[\"Weak\"] = \"weak\";\n        Ailment[\"Sick\"] = \"sick\";\n        Ailment[\"Injury\"] = \"injury\";\n        Ailment[\"Curse\"] = \"curse\";\n        Ailment[\"Paralysis\"] = \"paralysis\";\n        Ailment[\"AttackReduction\"] = \"atk down\";\n        Ailment[\"DefenseReduction\"] = \"def down\";\n        Ailment[\"RecoveryReduction\"] = \"rec down\";\n        Ailment[\"Unknown\"] = \"unknown\";\n    })(Ailment || (Ailment = {}));\n    var ArenaCondition;\n    (function (ArenaCondition) {\n        ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n        ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n        ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n        ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n        ArenaCondition[\"hp_min\"] = \"hp_min\";\n        ArenaCondition[\"hp_max\"] = \"hp_max\";\n        ArenaCondition[\"atk_max\"] = \"atk_max\";\n        ArenaCondition[\"random\"] = \"random\";\n    })(ArenaCondition || (ArenaCondition = {}));\n    var MoveType;\n    (function (MoveType) {\n        MoveType[\"Moving\"] = \"1\";\n        MoveType[\"Teleporting\"] = \"2\";\n        MoveType[\"NonMoving\"] = \"3\";\n    })(MoveType || (MoveType = {}));\n    var TargetArea;\n    (function (TargetArea) {\n        TargetArea[\"Aoe\"] = \"aoe\";\n        TargetArea[\"Single\"] = \"single\";\n        TargetArea[\"Random\"] = \"random\";\n    })(TargetArea || (TargetArea = {}));\n    var TargetAreaShorthand;\n    (function (TargetAreaShorthand) {\n        TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n        TargetAreaShorthand[\"Single\"] = \"ST\";\n        TargetAreaShorthand[\"Random\"] = \"RT\";\n    })(TargetAreaShorthand || (TargetAreaShorthand = {}));\n    var TargetType;\n    (function (TargetType) {\n        TargetType[\"Self\"] = \"self\";\n        TargetType[\"Party\"] = \"party\";\n        TargetType[\"Enemy\"] = \"enemy\";\n    })(TargetType || (TargetType = {}));\n    var SpPassiveType;\n    (function (SpPassiveType) {\n        SpPassiveType[\"AddPassive\"] = \"passive\";\n        SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n        SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n        SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n        SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n    })(SpPassiveType || (SpPassiveType = {}));\n    var SphereTypeName;\n    (function (SphereTypeName) {\n        SphereTypeName[\"None\"] = \"None\";\n        SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n        SphereTypeName[\"Critical\"] = \"Critical\";\n        SphereTypeName[\"Drop\"] = \"Drop\";\n        SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n        SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n        SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n        SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n        SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n        SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n        SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n        SphereTypeName[\"Spark\"] = \"Spark\";\n        SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n        SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n        SphereTypeName[\"Special\"] = \"Special\";\n    })(SphereTypeName || (SphereTypeName = {}));\n    var SphereTypeId;\n    (function (SphereTypeId) {\n        SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n        SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n        SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n        SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n        SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n        SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n        SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n        SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n        SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n        SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n        SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n        SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n        SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n        SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n        SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n    })(SphereTypeId || (SphereTypeId = {}));\n    var SpCategoryName;\n    (function (SpCategoryName) {\n        SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n        SpCategoryName[\"Spark\"] = \"Spark\";\n        SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n        SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n        SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n        SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n        SpCategoryName[\"Drops\"] = \"Drops\";\n        SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n        SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n        SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n        SpCategoryName[\"Special\"] = \"Special\";\n        SpCategoryName[\"Unknown\"] = \"Unknown\";\n    })(SpCategoryName || (SpCategoryName = {}));\n    var SpCategoryId;\n    (function (SpCategoryId) {\n        SpCategoryId[\"Parameter Boost\"] = \"1\";\n        SpCategoryId[\"Spark\"] = \"2\";\n        SpCategoryId[\"Critical Hits\"] = \"3\";\n        SpCategoryId[\"Attack Boost\"] = \"4\";\n        SpCategoryId[\"BB Gauge\"] = \"5\";\n        SpCategoryId[\"HP Recovery\"] = \"6\";\n        SpCategoryId[\"Drops\"] = \"7\";\n        SpCategoryId[\"Ailment Resistance\"] = \"8\";\n        SpCategoryId[\"Ailment Infliction\"] = \"9\";\n        SpCategoryId[\"Damage Reduction\"] = \"10\";\n        SpCategoryId[\"Special\"] = \"11\";\n    })(SpCategoryId || (SpCategoryId = {}));\n    var UnitAnimationKey;\n    (function (UnitAnimationKey) {\n        UnitAnimationKey[\"Attack\"] = \"attack\";\n        UnitAnimationKey[\"Idle\"] = \"idle\";\n        UnitAnimationKey[\"Move\"] = \"move\";\n    })(UnitAnimationKey || (UnitAnimationKey = {}));\n    var UnitElement;\n    (function (UnitElement) {\n        UnitElement[\"Fire\"] = \"fire\";\n        UnitElement[\"Water\"] = \"water\";\n        UnitElement[\"Earth\"] = \"earth\";\n        UnitElement[\"Thunder\"] = \"thunder\";\n        UnitElement[\"Light\"] = \"light\";\n        UnitElement[\"Dark\"] = \"dark\";\n    })(UnitElement || (UnitElement = {}));\n    var UnitGender;\n    (function (UnitGender) {\n        UnitGender[\"Male\"] = \"male\";\n        UnitGender[\"Female\"] = \"female\";\n        UnitGender[\"Other\"] = \"other\";\n    })(UnitGender || (UnitGender = {}));\n    var UnitGettingType;\n    (function (UnitGettingType) {\n        UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n        UnitGettingType[\"Farmable\"] = \"farmable\";\n        UnitGettingType[\"RareSummon\"] = \"rare summon\";\n        UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n    })(UnitGettingType || (UnitGettingType = {}));\n    var UnitKind;\n    (function (UnitKind) {\n        UnitKind[\"Normal\"] = \"normal\";\n        UnitKind[\"Evolution\"] = \"evo\";\n        UnitKind[\"Enhancing\"] = \"enhancing\";\n        UnitKind[\"Sale\"] = \"sale\";\n    })(UnitKind || (UnitKind = {}));\n    var UnitType;\n    (function (UnitType) {\n        UnitType[\"Lord\"] = \"lord\";\n        UnitType[\"Anima\"] = \"anima\";\n        UnitType[\"Breaker\"] = \"breaker\";\n        UnitType[\"Guardian\"] = \"guardian\";\n        UnitType[\"Oracle\"] = \"oracle\";\n        UnitType[\"Rex\"] = \"rex\";\n    })(UnitType || (UnitType = {}));\n    var ItemType;\n    (function (ItemType) {\n        ItemType[\"Consumable\"] = \"consumable\";\n        ItemType[\"Material\"] = \"material\";\n        ItemType[\"Sphere\"] = \"sphere\";\n        ItemType[\"EvolutionMaterial\"] = \"evomat\";\n        ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n        ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n    })(ItemType || (ItemType = {}));\n    var MimicUnitIds;\n    (function (MimicUnitIds) {\n        MimicUnitIds[\"Mimic\"] = \"60142\";\n        MimicUnitIds[\"BatMimic\"] = \"60143\";\n        MimicUnitIds[\"DragonMimic\"] = \"60144\";\n        MimicUnitIds[\"MetalMimic\"] = \"60224\";\n    })(MimicUnitIds || (MimicUnitIds = {}));\n    /**\n     * @description Known values for the monster groups used in {@link IMimicInfo}.\n     */\n    const MimicMonsterGroupMapping = {\n        '1000': MimicUnitIds.Mimic,\n        '1100': MimicUnitIds.BatMimic,\n        '1101': MimicUnitIds.BatMimic,\n        '1200': MimicUnitIds.DragonMimic,\n        '1300': MimicUnitIds.MetalMimic,\n    };\n\n    var datamineTypes = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get Ailment () { return Ailment; },\n        get ArenaCondition () { return ArenaCondition; },\n        get MoveType () { return MoveType; },\n        get TargetArea () { return TargetArea; },\n        get TargetAreaShorthand () { return TargetAreaShorthand; },\n        get TargetType () { return TargetType; },\n        get SpPassiveType () { return SpPassiveType; },\n        get SphereTypeName () { return SphereTypeName; },\n        get SphereTypeId () { return SphereTypeId; },\n        get SpCategoryName () { return SpCategoryName; },\n        get SpCategoryId () { return SpCategoryId; },\n        get UnitAnimationKey () { return UnitAnimationKey; },\n        get UnitElement () { return UnitElement; },\n        get UnitGender () { return UnitGender; },\n        get UnitGettingType () { return UnitGettingType; },\n        get UnitKind () { return UnitKind; },\n        get UnitType () { return UnitType; },\n        get ItemType () { return ItemType; },\n        get MimicUnitIds () { return MimicUnitIds; },\n        MimicMonsterGroupMapping: MimicMonsterGroupMapping\n    });\n\n    /**\n     * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n     * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n     * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n     * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n     */\n    function combineEffectsAndDamageFrames(effects, damageFrames) {\n        let combinedEntries = [];\n        if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n            combinedEntries = effects.map((effect, i) => {\n                const correspondingFrameEntry = damageFrames[i];\n                return {\n                    delay: effect['effect delay time(ms)/frame'],\n                    effect,\n                    frames: correspondingFrameEntry,\n                    id: `${effect['proc id'] || effect['unknown proc id']}`,\n                    targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                    targetType: effect['target type'],\n                };\n            });\n        }\n        return combinedEntries;\n    }\n\n    /**\n     * @description Get the name of a given object.\n     * @param effect Object to get the name from.\n     * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n     * @returns Name of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectName(effect, metadata = {}) {\n        let resultName = '';\n        const effectId = getEffectId(effect);\n        if (isPassiveEffect(effect)) {\n            resultName = getNameForPassive(effectId, metadata && metadata.passive);\n        }\n        else if (isProcEffect(effect)) {\n            resultName = getNameForProc(effectId, metadata && metadata.proc);\n        }\n        return resultName;\n    }\n\n    /**\n     * @description Provides info at a glance regarding a buff's source and how it stacks.\n     */\n    var BuffStackType;\n    (function (BuffStackType) {\n        /**\n         * @description The buff is activated via some skill and lasts for a number of turns.\n         * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n         * from different levels. Two possible levels of sources are:\n         * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n         * 2. Ultimate Brave Burst or Dual Brave Burst\n         */\n        BuffStackType[\"Active\"] = \"active\";\n        /**\n         * @description The buff is always active provided that the source is not nullified.\n         * Most passive buffs can stack with themselves.\n         */\n        BuffStackType[\"Passive\"] = \"passive\";\n        /**\n         * @description The buff is applied for a number of turns once a certain condition is met.\n         * Buffs of the same type are not able to stack.\n         */\n        BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n        /**\n         * @description Only one instance of the buff can be active at a time and can last indefinitely.\n         * A couple examples of this are Barrier and Max HP Boost.\n         */\n        BuffStackType[\"Singleton\"] = \"singleton\";\n        /**\n         * @description The buff's effects immediately apply to the target(s). This differs from singleton\n         * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n         * in the HP bar filling by the sum of those burst heals).\n         */\n        BuffStackType[\"Burst\"] = \"burst\";\n        /**\n         * @description A specific subset of `Burst` type buffs that deal damage to the target.\n         */\n        BuffStackType[\"Attack\"] = \"attack\";\n        /**\n         * @description Only for buffs that cannot be processed by the library yet.\n         */\n        BuffStackType[\"Unknown\"] = \"unknown\";\n    })(BuffStackType || (BuffStackType = {}));\n    var BuffSource;\n    (function (BuffSource) {\n        BuffSource[\"BraveBurst\"] = \"bb\";\n        BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n        BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n        BuffSource[\"DualBraveBurst\"] = \"dbb\";\n        BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n        BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n        BuffSource[\"SpEnhancement\"] = \"sp\";\n        BuffSource[\"Item\"] = \"item\";\n        BuffSource[\"LeaderSkill\"] = \"ls\";\n        BuffSource[\"ExtraSkill\"] = \"es\";\n        /**\n         * @description Buffs that result of having a number of OE+ units in the squad.\n         */\n        BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n        /**\n         * @description Buffs based on a units type. See {@link UnitType}.\n         */\n        BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n        /**\n         * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n         * as well as ambient turn reductions present in some late-game quests.\n         */\n        BuffSource[\"Quest\"] = \"quest\";\n    })(BuffSource || (BuffSource = {}));\n    /**\n     * @description Extra element values that can be used in addition to {@link UnitElement}.\n     */\n    var BuffConditionElement;\n    (function (BuffConditionElement) {\n        BuffConditionElement[\"Unknown\"] = \"unknown\";\n        BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n        BuffConditionElement[\"All\"] = \"all\";\n    })(BuffConditionElement || (BuffConditionElement = {}));\n    /**\n     * @description Stats on a unit that a buff can affect.\n     */\n    var UnitStat;\n    (function (UnitStat) {\n        UnitStat[\"hp\"] = \"hp\";\n        UnitStat[\"atk\"] = \"atk\";\n        UnitStat[\"def\"] = \"def\";\n        UnitStat[\"rec\"] = \"rec\";\n        UnitStat[\"crit\"] = \"crit\";\n        UnitStat[\"bbGauge\"] = \"bbGauge\";\n        UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n        UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n        UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n        UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n        UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n        UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n        UnitStat[\"poisonResist\"] = \"poisonResist\";\n        UnitStat[\"weakResist\"] = \"weakResist\";\n        UnitStat[\"sickResist\"] = \"sickResist\";\n        UnitStat[\"injuryResist\"] = \"injuryResist\";\n        UnitStat[\"curseResist\"] = \"curseResist\";\n        UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n        UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n        UnitStat[\"weakInflict\"] = \"weakInflict\";\n        UnitStat[\"sickInflict\"] = \"sickInflict\";\n        UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n        UnitStat[\"curseInflict\"] = \"curseInflict\";\n        UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n        UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n        UnitStat[\"defDownResist\"] = \"defDownResist\";\n        UnitStat[\"recDownResist\"] = \"recDownResist\";\n        UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n        UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n        UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n        UnitStat[\"mitigation\"] = \"mitigation\";\n        UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n        UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n        UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n        UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n        UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n        UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n        UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n        UnitStat[\"koResistance\"] = \"koResistance\";\n        UnitStat[\"revive\"] = \"revive\";\n        UnitStat[\"healOnAttack\"] = \"healOnAttack\";\n    })(UnitStat || (UnitStat = {}));\n    var IconId;\n    (function (IconId) {\n        IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n        IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n        IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n        IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n        IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n        IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n        IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n        IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n        IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n        IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n        IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n        IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n        IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n        IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n        IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n        IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n        IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n        IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n        IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n        IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n        IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n        IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n        IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n        IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n        IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n        IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n        IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n        IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n        IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n        IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n        IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n        IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n        IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n        IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n        IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n        IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n        IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n        IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n        IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n        IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n        IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n        IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n        IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n        IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n        IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n        IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n        IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n        IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n        IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n        IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n        IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n        IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n        IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n        IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n        IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n        IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n        IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n        IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n        IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n        IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n        IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n        IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n        IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n        IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n        IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n        IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n        IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n        IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n        IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n        IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n        IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n        IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n        IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n        IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n        IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n        IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n        IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n        IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n        IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n        IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n        IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n        IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n        IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n        IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n        IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n        IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n        IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n        IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n        IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n        IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n        IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n        IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n        IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n        IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n        IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n        IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n        IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n        IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n        IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n        IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n        IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n        IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n        IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n        IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n        IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n        IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n        IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n        IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n        IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n        IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n        IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n        IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n        IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n        IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n        IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n        IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n        IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n        IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n        IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n        IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n        IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n        IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n        IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n        IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n        IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n        IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n        IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n        IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n        IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n        IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n        IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n        IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n        IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n        IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n        IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n        IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n        IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n        IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n        IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n        IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n        IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n        IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n        IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n        IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n        IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n        IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n        IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n        IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n        IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n        IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n        IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n        IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n        IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n        IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n        IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n        IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n        IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n        IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n        IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n        IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n        IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n        IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n        IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n        IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n        IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n        IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n        IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n        IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n        IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n        IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n        IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n        IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n        IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n        IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n        IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n        IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n        IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n        IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n        IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n        IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n        IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n        IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n        IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n        IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n        IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n        IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n        IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n        IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n        IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n        IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n        IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n        IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n        IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n        IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n        IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n        IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n        IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n        IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n        IconId[\"ATK_ST\"] = \"ATK_ST\";\n        IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n        IconId[\"ATK_RT\"] = \"ATK_RT\";\n        IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n        IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n    })(IconId || (IconId = {}));\n    /**\n     * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n     * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n     * source of a given buff.\n     */\n    var BuffId;\n    (function (BuffId) {\n        BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n        BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n        BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n        BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n        BuffId[\"passive:1:def\"] = \"passive:1:def\";\n        BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n        BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n        BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n        BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n        BuffId[\"passive:2:def\"] = \"passive:2:def\";\n        BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n        BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n        BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n        BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n        BuffId[\"passive:3:def\"] = \"passive:3:def\";\n        BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n        BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n        BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n        BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n        BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n        BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n        BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n        BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n        BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n        BuffId[\"passive:5:water\"] = \"passive:5:water\";\n        BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n        BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n        BuffId[\"passive:5:light\"] = \"passive:5:light\";\n        BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n        BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n        BuffId[\"passive:8\"] = \"passive:8\";\n        BuffId[\"passive:9\"] = \"passive:9\";\n        BuffId[\"passive:10\"] = \"passive:10\";\n        BuffId[\"passive:11:atk\"] = \"passive:11:atk\";\n        BuffId[\"passive:11:def\"] = \"passive:11:def\";\n        BuffId[\"passive:11:rec\"] = \"passive:11:rec\";\n        BuffId[\"passive:11:crit\"] = \"passive:11:crit\";\n        BuffId[\"passive:12:bc\"] = \"passive:12:bc\";\n        BuffId[\"passive:12:hc\"] = \"passive:12:hc\";\n        BuffId[\"passive:12:item\"] = \"passive:12:item\";\n        BuffId[\"passive:12:zel\"] = \"passive:12:zel\";\n        BuffId[\"passive:12:karma\"] = \"passive:12:karma\";\n        BuffId[\"passive:13\"] = \"passive:13\";\n        BuffId[\"passive:14\"] = \"passive:14\";\n        BuffId[\"passive:15\"] = \"passive:15\";\n        BuffId[\"passive:16\"] = \"passive:16\";\n        BuffId[\"passive:17\"] = \"passive:17\";\n        BuffId[\"passive:19:bc\"] = \"passive:19:bc\";\n        BuffId[\"passive:19:hc\"] = \"passive:19:hc\";\n        BuffId[\"passive:19:item\"] = \"passive:19:item\";\n        BuffId[\"passive:19:zel\"] = \"passive:19:zel\";\n        BuffId[\"passive:19:karma\"] = \"passive:19:karma\";\n        BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n        BuffId[\"proc:1\"] = \"proc:1\";\n        BuffId[\"proc:2\"] = \"proc:2\";\n        BuffId[\"proc:3\"] = \"proc:3\";\n        BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n        BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n        BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n        BuffId[\"proc:5:def\"] = \"proc:5:def\";\n        BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n        BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n        BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n        BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n        BuffId[\"proc:6:item\"] = \"proc:6:item\";\n        BuffId[\"proc:7\"] = \"proc:7\";\n        BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n        BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n        BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n        BuffId[\"proc:9:def\"] = \"proc:9:def\";\n        BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n        BuffId[\"proc:9:unknown\"] = \"proc:9:unknown\";\n        BuffId[\"proc:10:poison\"] = \"proc:10:poison\";\n        BuffId[\"proc:10:weak\"] = \"proc:10:weak\";\n        BuffId[\"proc:10:sick\"] = \"proc:10:sick\";\n        BuffId[\"proc:10:injury\"] = \"proc:10:injury\";\n        BuffId[\"proc:10:curse\"] = \"proc:10:curse\";\n        BuffId[\"proc:10:paralysis\"] = \"proc:10:paralysis\";\n        BuffId[\"proc:10:atk down\"] = \"proc:10:atk down\";\n        BuffId[\"proc:10:def down\"] = \"proc:10:def down\";\n        BuffId[\"proc:10:rec down\"] = \"proc:10:rec down\";\n        BuffId[\"proc:10:unknown\"] = \"proc:10:unknown\";\n        BuffId[\"proc:11:poison\"] = \"proc:11:poison\";\n        BuffId[\"proc:11:weak\"] = \"proc:11:weak\";\n        BuffId[\"proc:11:sick\"] = \"proc:11:sick\";\n        BuffId[\"proc:11:injury\"] = \"proc:11:injury\";\n        BuffId[\"proc:11:curse\"] = \"proc:11:curse\";\n        BuffId[\"proc:11:paralysis\"] = \"proc:11:paralysis\";\n        BuffId[\"proc:11:atk down\"] = \"proc:11:atk down\";\n        BuffId[\"proc:11:def down\"] = \"proc:11:def down\";\n        BuffId[\"proc:11:rec down\"] = \"proc:11:rec down\";\n        BuffId[\"proc:11:unknown\"] = \"proc:11:unknown\";\n        BuffId[\"proc:12\"] = \"proc:12\";\n        BuffId[\"proc:13\"] = \"proc:13\";\n        BuffId[\"proc:14\"] = \"proc:14\";\n        BuffId[\"proc:16:fire\"] = \"proc:16:fire\";\n        BuffId[\"proc:16:water\"] = \"proc:16:water\";\n        BuffId[\"proc:16:earth\"] = \"proc:16:earth\";\n        BuffId[\"proc:16:thunder\"] = \"proc:16:thunder\";\n        BuffId[\"proc:16:light\"] = \"proc:16:light\";\n        BuffId[\"proc:16:dark\"] = \"proc:16:dark\";\n        BuffId[\"proc:16:all\"] = \"proc:16:all\";\n        BuffId[\"proc:16:unknown\"] = \"proc:16:unknown\";\n        BuffId[\"proc:17:poison\"] = \"proc:17:poison\";\n        BuffId[\"proc:17:weak\"] = \"proc:17:weak\";\n        BuffId[\"proc:17:sick\"] = \"proc:17:sick\";\n        BuffId[\"proc:17:injury\"] = \"proc:17:injury\";\n        BuffId[\"proc:17:curse\"] = \"proc:17:curse\";\n        BuffId[\"proc:17:paralysis\"] = \"proc:17:paralysis\";\n        BuffId[\"proc:18\"] = \"proc:18\";\n        BuffId[\"proc:19\"] = \"proc:19\";\n    })(BuffId || (BuffId = {}));\n\n    /**\n     * @description Helper function for creating an entry to be used in the `sources`\n     * property of {@link IBuff}.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourceEntryFromContext(context) {\n        return `${context.source}-${context.sourceId}`;\n    }\n    /**\n     * @description Helper function for creating an entries array to be used in the `sources`\n     * property of {@link IBuff}. It handles setting the order of the sources.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourcesFromContext(context) {\n        const resultArray = Array.isArray(context.previousSources)\n            ? context.previousSources.slice()\n            : [];\n        // Ensure that the current source is at the beginning of the array\n        resultArray.unshift(createSourceEntryFromContext(context));\n        return resultArray;\n    }\n    /**\n     * @description Given the conditions in an extra skill effect, normalize them into\n     * a simpler object containing the IDs of each condition type.\n     * @param effect Extra skill effect to process conditions from.\n     * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n     */\n    function processExtraSkillConditions(effect) {\n        const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n        const aggregate = {\n            units: new Set(),\n            items: new Set(),\n            sphereTypes: new Set(),\n            unknowns: new Set(),\n        };\n        conditions.forEach((condition, index) => {\n            if ('sphere category required (raw)' in condition) {\n                aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n            }\n            else if ('item required' in condition) {\n                condition['item required'].forEach((item) => {\n                    aggregate.items.add(item);\n                });\n            }\n            else if ('unit required' in condition) {\n                condition['unit required'].forEach((unit) => {\n                    aggregate.units.add(`${unit.id}`);\n                });\n            }\n            else {\n                aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n            }\n        });\n        // filter out properties that have no entries\n        const result = Object.entries(aggregate)\n            .filter((entry) => entry[1].size > 0)\n            .reduce((acc, entry) => {\n            acc[entry[0]] = Array.from(entry[1]);\n            return acc;\n        }, {});\n        return result;\n    }\n    /**\n     * @description Extract the target type and target area of a given passive effect.\n     * @param effect Passive effect to extract target data from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns The target data for the given effect and context. There are only two possible values:\n     * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n     */\n    function getPassiveTargetData(effect, context) {\n        const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n            (effect.sp_type === SpPassiveType.EnhancePassive);\n        const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n        return {\n            targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n            targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n        };\n    }\n    /**\n     * @description Extract the target type and target area of a given proc effect.\n     * @param effect Proc effect to extract target data from.\n     * @returns The target data for the given effect and context.\n     */\n    function getProcTargetData(effect) {\n        return {\n            targetArea: effect['target area'],\n            targetType: effect['target type'],\n        };\n    }\n    /**\n     * @description Try to parse the given value into a number or return a value if it is not a number.\n     * @param value Value to parse into a number.\n     * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n     * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n     */\n    function parseNumberOrDefault(value, defaultValue = 0) {\n        return (value !== null && !isNaN(value)) ? +value : defaultValue;\n    }\n    /**\n     * @description Create an object denoting values that cannot be processed yet. To be used\n     * in the `value` property of `IBuff` as needed.\n     * @param params Array of values that cannot be processed yet.\n     * @param startIndex The first index before which we know how to process an effect's values.\n     * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n     */\n    function createUnknownParamsValue(params = [], startIndex = 0) {\n        let hasValue = false;\n        const result = params\n            .reduce((acc, value, index) => {\n            if (value && value !== '0') {\n                acc[`param_${startIndex + index}`] = value;\n                hasValue = true;\n            }\n            return acc;\n        }, {});\n        return hasValue ? result : (void 0);\n    }\n\n    let mapping;\n    /**\n     * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of proc IDs to functions.\n     */\n    function getProcEffectToBuffMapping(reload) {\n        if (!mapping || reload) {\n            mapping = new Map();\n            setMapping(mapping);\n        }\n        return mapping;\n    }\n    /**\n     * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping(map) {\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const effectDelay = effect['effect delay time(ms)/frame'];\n            return { targetData, sources, effectDelay };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n            effectDelay,\n            sources, value: unknownParams }, targetData));\n        const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n            sources, value: {\n                buffs,\n                duration: duration,\n            } }, targetData));\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                value = parseParamValue(rawValue);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect[effectValueKey]);\n                turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [buffId],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const hits = +((context.damageFrames && context.damageFrames.hits) || 0);\n            const distribution = +((context.damageFrames && context.damageFrames['hit dmg% distribution (total)']) || 0);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [Object.assign({ id: 'proc:1', originalId: '1', sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '1',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'healerRec%': 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                let recX, recY;\n                let extraParams;\n                [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n                params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['heal low'];\n                params.healHigh = effect['heal high'];\n                params['healerRec%'] = effect['rec added% (from healer)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const results = [Object.assign({ id: 'proc:2', originalId: '2', sources,\n                    effectDelay, value: params }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '2',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'targetRec%': 0,\n                turnDuration: '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let rec;\n                let extraParams;\n                [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['gradual heal low'];\n                params.healHigh = effect['gradual heal high'];\n                params['targetRec%'] = effect['rec added% (from target)'];\n                params.turnDuration = effect['gradual heal turns (8)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n            const results = [];\n            if (hasAnyHealValues) {\n                results.push(Object.assign({ id: 'proc:3', originalId: '3', sources,\n                    effectDelay, duration: params.turnDuration, value: {\n                        healLow: params.healLow,\n                        healHigh: params.healHigh,\n                        'targetRec%': params['targetRec%'],\n                    } }, targetData));\n            }\n            else if (params.turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId: '3',\n                    sources,\n                    buffs: ['proc:3'],\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '3',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill);\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('bb bc fill' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill']);\n                }\n                if ('bb bc fill%' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n                }\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:flat', originalId: '4', sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:percent', originalId: '4', sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '4',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                element: BuffConditionElement.All,\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        params[statType] = parseNumberOrDefault(effect[effectKey]);\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId: '5', sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData);\n                        if (params.element !== BuffConditionElement.All) {\n                            buffEntry.conditions = {\n                                targetElements: [params.element],\n                            };\n                        }\n                        results.push(buffEntry);\n                    }\n                });\n            }\n            else if (params.turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId: '5',\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '5',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('6', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                turnDuration: '0',\n            };\n            const dropRateProperties = ['bc', 'hc', 'item'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.bc = effect['bc drop rate% buff (10)'];\n                params.hc = effect['hc drop rate% buff (9)'];\n                params.item = effect['item drop rate% buff (11)'];\n                params.turnDuration = effect['drop buff rate turns'];\n            }\n            dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n            const results = [];\n            if (hasAnyRates) {\n                dropRateProperties.forEach((key) => {\n                    const value = params[key];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:6:${key}`, originalId: '6', sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (params.turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId: '6',\n                    sources,\n                    buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '6',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('7', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHpPercent = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:7', originalId: '7', sources,\n                    effectDelay, value: recoveredHpPercent }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '7',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatHpBoost = 0;\n            let percentHpBoost = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n                flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n                percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('max hp increase' in effect) {\n                    flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n                }\n                if ('max hp% increase' in effect) {\n                    percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n                }\n            }\n            const results = [];\n            if (flatHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:flat', originalId: '8', sources,\n                    effectDelay, value: flatHpBoost }, targetData));\n            }\n            if (percentHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:percent', originalId: '8', sources,\n                    effectDelay, value: percentHpBoost }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '8',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const STAT_TYPE_MAPPING = {\n                0: 'atk',\n                1: 'def',\n                2: 'rec',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const params = {\n                element: BuffConditionElement.All,\n                statReductionEntries: [],\n                turnDuration: 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n                [\n                    [statType1, value1, procChance1],\n                    [statType2, value2, procChance2],\n                ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                    const statType = parseNumberOrDefault(rawStatType) - 1;\n                    const value = parseNumberOrDefault(rawValue);\n                    const chance = parseNumberOrDefault(rawProcChance);\n                    if (statType === 3) { // all stats\n                        params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                            stat,\n                            value,\n                            chance,\n                        })));\n                    }\n                    else {\n                        params.statReductionEntries.push({\n                            stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                            value,\n                            chance,\n                        });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                ['buff #1', 'buff #2'].forEach((buffKey) => {\n                    const entry = effect[buffKey];\n                    if (entry) {\n                        const chance = parseNumberOrDefault(entry['proc chance%']);\n                        const keys = Object.keys(entry);\n                        coreStatProperties.forEach((statType) => {\n                            const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                            if (effectKey) {\n                                params.statReductionEntries.push({\n                                    stat: statType,\n                                    value: parseNumberOrDefault(entry[effectKey]),\n                                    chance,\n                                });\n                            }\n                        });\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            let hasAnyValues = false;\n            params.statReductionEntries.forEach(({ stat, value, chance }) => {\n                if (value !== 0 || chance !== 0) {\n                    hasAnyValues = true;\n                    const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId: '9', sources,\n                        effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n            if (!hasAnyValues && params.turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId: '9',\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '9',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 8);\n                const extraParams = splitParams.slice(8);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    if (`remove ${ailment}` in effect) { // mainly for items\n                        curedAilments.push(ailment);\n                    }\n                });\n                if ('remove all status ailments' in effect) {\n                    curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:${ailment}`, originalId: '10', sources,\n                effectDelay, value: true }, targetData)));\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '10',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                let params = splitEffectParams(effect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:${ailment}`, originalId: '11', sources,\n                effectDelay, value: chance }, targetData)));\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '11',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let reviveToHp = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n                reviveToHp = parseNumberOrDefault(rawReviveToHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:12', originalId: '12', sources,\n                    effectDelay, value: reviveToHp }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '12',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hits = 0;\n            const distribution = +((context.damageFrames && context.damageFrames['hit dmg% distribution (total)']) || 0);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawHits;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n                hits = parseNumberOrDefault(rawHits);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                hits = parseNumberOrDefault(effect.hits);\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [{\n                    id: 'proc:13',\n                    originalId: '13',\n                    sources,\n                    effectDelay,\n                    value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }),\n                    targetType: targetData.targetType,\n                    targetArea: TargetArea.Random,\n                }];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '13',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const hits = +((context.damageFrames && context.damageFrames.hits) || 0);\n            const distribution = +((context.damageFrames && context.damageFrames['hit dmg% distribution (total)']) || 0);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n                'drainLow%': '0',\n                'drainHigh%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n                params['drainLow%'] = effect['hp drain% low'];\n                params['drainHigh%'] = effect['hp drain% high'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [Object.assign({ id: 'proc:14', originalId: '14', sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData)];\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '14',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let mitigation = 0;\n            let element;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                mitigation = parseNumberOrDefault(rawMitigation);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n                element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n                if (mitigationKey) {\n                    mitigation = parseNumberOrDefault(effect[mitigationKey]);\n                }\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (mitigation !== 0) {\n                results.push(Object.assign({ id: `proc:16:${element}`, originalId: '16', sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId: '16',\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '16',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        resistances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:17:${ailment}`, originalId: '17', sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && turnDuration !== 0) {\n                results.push(createTurnDurationEntry({\n                    originalId: '17',\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:17:${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId: '17',\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n            return results;\n        });\n        map.set('18', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'dmg% reduction',\n                effectTurnDurationKey: 'dmg% reduction turns (36)',\n                buffId: 'proc:18',\n                originalId: '18',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'increase bb gauge gradual',\n                effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'proc:19',\n                originalId: '19',\n            });\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given proc effect.\n     */\n    function defaultConversionFunction(effect, context) {\n        const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n                originalId: id,\n                effectDelay: effect['effect delay time(ms)/frame'],\n                targetType: effect['target type'],\n                targetArea: effect['target area'],\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given proc effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Proc effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given proc effect object.\n     */\n    function convertProcEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isProcEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction(effect, context);\n    }\n\n    let mapping$1;\n    /**\n     * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of passive IDs to functions.\n     */\n    function getPassiveEffectToBuffMapping(reload) {\n        if (!mapping$1 || reload) {\n            mapping$1 = new Map();\n            setMapping$1(mapping$1);\n        }\n        return mapping$1;\n    }\n    /**\n     * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$1(map) {\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n            X: BuffConditionElement.OmniParadigm,\n        };\n        const TYPE_MAPPING = {\n            1: UnitType.Lord,\n            2: UnitType.Anima,\n            3: UnitType.Breaker,\n            4: UnitType.Guardian,\n            5: UnitType.Oracle,\n            6: UnitType.Rex,\n        };\n        const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n        const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n            const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            return { conditionInfo, targetData, sources };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const createaUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n            sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n        const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n            let unknownParams;\n            if (extraParams && extraParams.length > 0) {\n                unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n            }\n            return unknownParams;\n        };\n        const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, effectKey, buffId, originalId, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let value = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect[effectKey]);\n            }\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:1:${stat}`, originalId: '1', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '1',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                elements: [],\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let element1, element2;\n                [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                [element1, element2].forEach((elementValue) => {\n                    if (elementValue && elementValue !== '0') {\n                        stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                stats.elements = typedEffect['elements buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId: '2', sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n            if (stats.elements.length > 0) {\n                stats.elements.forEach((element) => {\n                    STATS_ORDER.forEach((stat) => {\n                        const value = parseNumberOrDefault(stats[stat]);\n                        if (value !== 0) {\n                            results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                        }\n                    });\n                });\n            }\n            else {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                    }\n                });\n            }\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '2',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                unitType: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let unitType;\n                [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                if (unitType && unitType !== '0') {\n                    stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.unitType = typedEffect['unit type buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetUnitType = stats.unitType || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:3:${stat}`, originalId: '3', sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '3',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:4:${ailment}`, originalId: '4', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '4',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let element;\n            let mitigation = '0';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n                if (element !== BuffConditionElement.Unknown) {\n                    mitigation = typedEffect[`${element} resist%`];\n                }\n            }\n            const value = parseNumberOrDefault(mitigation);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:5:${element}`, originalId: '5', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '5',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'dmg% mitigation',\n                buffId: 'passive:8',\n                originalId: '8',\n            });\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bc fill per turn',\n                buffId: 'passive:9',\n                originalId: '9',\n            });\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'hc effectiveness%',\n                buffId: 'passive:10',\n                originalId: '10',\n            });\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let requireHpAbove = false;\n            let hpThreshold = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireHpAboveFlag;\n                let rawHpThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawHpThreshold, rawRequireHpAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                requireHpAbove = rawRequireHpAboveFlag === '1';\n                hpThreshold = parseNumberOrDefault(rawHpThreshold);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                if ('hp above % buff requirement' in typedEffect) {\n                    hpThreshold = parseNumberOrDefault(typedEffect['hp above % buff requirement']);\n                    requireHpAbove = true;\n                }\n                else {\n                    hpThreshold = parseNumberOrDefault(typedEffect['hp below % buff requirement']);\n                    requireHpAbove = false;\n                }\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:11:${stat}`, originalId: '11', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    // disabling no-non-null-assertion rule because `conditions` property is defined above\n                    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                    if (requireHpAbove) {\n                        entry.conditions.hpGreaterThanOrEqualTo = hpThreshold;\n                    }\n                    else {\n                        entry.conditions.hpLessThanOrEqualTo = hpThreshold;\n                    }\n                    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n                    results.push(entry);\n                }\n            });\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '11',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let requireHpAbove = false;\n            let hpThreshold = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireHpAboveFlag;\n                let rawHpThreshold;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawHpThreshold, rawRequireHpAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                requireHpAbove = rawRequireHpAboveFlag === '1';\n                hpThreshold = parseNumberOrDefault(rawHpThreshold);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n                if ('hp above % buff requirement' in typedEffect) {\n                    hpThreshold = parseNumberOrDefault(typedEffect['hp above % buff requirement']);\n                    requireHpAbove = true;\n                }\n                else {\n                    hpThreshold = parseNumberOrDefault(typedEffect['hp below % buff requirement']);\n                    requireHpAbove = false;\n                }\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    const entry = Object.assign({ id: `passive:12:${dropType}`, originalId: '12', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    // disabling no-non-null-assertion rule because `conditions` property is defined above\n                    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                    if (requireHpAbove) {\n                        entry.conditions.hpGreaterThanOrEqualTo = hpThreshold;\n                    }\n                    else {\n                        entry.conditions.hpLessThanOrEqualTo = hpThreshold;\n                    }\n                    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n                    results.push(entry);\n                }\n            });\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '12',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let fillLow, fillHigh, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawFillLow, rawFillHigh, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(typedEffect['bc fill on enemy defeat low']);\n                fillHigh = parseNumberOrDefault(typedEffect['bc fill on enemy defeat high']);\n                chance = parseNumberOrDefault(typedEffect['bc fill on enemy defeat%']);\n            }\n            const results = [Object.assign({ id: 'passive:13', originalId: '13', sources, value: {\n                        fillLow,\n                        fillHigh,\n                        chance,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onEnemyDefeat: true }) }, targetData)];\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '13',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageReduction, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                damageReduction = parseNumberOrDefault(rawReduction);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n                chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n            }\n            const results = [Object.assign({ id: 'passive:14', originalId: '14', sources, value: {\n                        value: damageReduction,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData)];\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '14',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('15', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['hp% recover on enemy defeat low']);\n                healHigh = parseNumberOrDefault(typedEffect['hp% recover on enemy defeat high']);\n                // currently deathmax's datamine misses this value, but all known entries have 100% chance\n                chance = parseNumberOrDefault(typedEffect['hp% recover on enemy defeat chance%'], 100);\n            }\n            const results = [Object.assign({ id: 'passive:15', originalId: '15', sources, value: {\n                        healLow,\n                        healHigh,\n                        chance,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onEnemyDefeat: true }) }, targetData)];\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '15',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n                healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n            }\n            const results = [Object.assign({ id: 'passive:16', originalId: '16', sources, value: {\n                        healLow,\n                        healHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData)];\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '16',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let drainHealLow, drainHealHigh, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                drainHealLow = parseNumberOrDefault(rawHealLow);\n                drainHealHigh = parseNumberOrDefault(rawHealHigh);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                drainHealLow = parseNumberOrDefault(typedEffect['hp drain% low']);\n                drainHealHigh = parseNumberOrDefault(typedEffect['hp drain% high']);\n                chance = parseNumberOrDefault(typedEffect['hp drain chance%']);\n            }\n            const results = [Object.assign({ id: 'passive:17', originalId: '17', sources, value: {\n                        drainHealLow,\n                        drainHealHigh,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData)];\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '17',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:19:${dropType}`, originalId: '19', sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            if (unknownParams) {\n                results.push(createaUnknownParamsEntry(unknownParams, {\n                    originalId: '19',\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to `IBuff` format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given passive effect.\n     */\n    function defaultConversionFunction$1(effect, context) {\n        const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given passive effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Passive effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertPassiveEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isPassiveEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$1(effect, context);\n    }\n\n    const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'UNKNOWN_PASSIVE_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            name: 'Unknown Passive Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n            name: 'Unknown Passive Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'TURN_DURATION_MODIFICATION': {\n            id: BuffId.TURN_DURATION_MODIFICATION,\n            name: 'Passive Turn Duration Modification',\n            stat: UnitStat.turnDurationModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [\n                (buff && buff.value &&\n                    buff.value.duration &&\n                    buff.value.duration < 0) ?\n                    IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n            ],\n        }, 'passive:1:hp': {\n            id: BuffId['passive:1:hp'],\n            name: 'Passive HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:1:atk': {\n            id: BuffId['passive:1:atk'],\n            name: 'Passive Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:1:def': {\n            id: BuffId['passive:1:def'],\n            name: 'Passive Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:1:rec': {\n            id: BuffId['passive:1:rec'],\n            name: 'Passive Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:1:crit': {\n            id: BuffId['passive:1:crit'],\n            name: 'Passive Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        } }, (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:2:hp': {\n                id: BuffId['passive:2:hp'],\n                name: 'Passive Elemental HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:2:atk': {\n                id: BuffId['passive:2:atk'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:2:def': {\n                id: BuffId['passive:2:def'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:2:rec': {\n                id: BuffId['passive:2:rec'],\n                name: 'Passive Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:2:crit': {\n                id: BuffId['passive:2:crit'],\n                name: 'Passive Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let unitType = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        unitType = buff.conditions.targetUnitType || '';\n                    }\n                }\n                if (typeof unitType !== 'string' || !unitType) {\n                    unitType = 'unknown';\n                }\n                let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n                if (!unitType || !(iconKey in IconId)) {\n                    iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:3:hp': {\n                id: BuffId['passive:3:hp'],\n                name: 'Passive Type-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:3:atk': {\n                id: BuffId['passive:3:atk'],\n                name: 'Passive Type-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:3:def': {\n                id: BuffId['passive:3:def'],\n                name: 'Passive Type-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:3:rec': {\n                id: BuffId['passive:3:rec'],\n                name: 'Passive Type-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:3:crit': {\n                id: BuffId['passive:3:crit'],\n                name: 'Passive Type-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:4:poison': {\n            id: BuffId['passive:4:poison'],\n            name: 'Passive Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:4:weak': {\n            id: BuffId['passive:4:weak'],\n            name: 'Passive Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:4:sick': {\n            id: BuffId['passive:4:sick'],\n            name: 'Passive Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:4:injury': {\n            id: BuffId['passive:4:injury'],\n            name: 'Passive Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:4:curse': {\n            id: BuffId['passive:4:curse'],\n            name: 'Passive Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:4:paralysis': {\n            id: BuffId['passive:4:paralysis'],\n            name: 'Passive Paralysis Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:5:fire': {\n            id: BuffId['passive:5:fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:5:water': {\n            id: BuffId['passive:5:water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:5:earth': {\n            id: BuffId['passive:5:earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:5:thunder': {\n            id: BuffId['passive:5:thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:5:light': {\n            id: BuffId['passive:5:light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:5:dark': {\n            id: BuffId['passive:5:dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:5:unknown': {\n            id: BuffId['passive:5:unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:8': {\n            id: BuffId['passive:8'],\n            name: 'Passive Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:9': {\n            id: BuffId['passive:9'],\n            name: 'Passive Gradual BB Gauge Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:10': {\n            id: BuffId['passive:10'],\n            name: 'Passive HC Efficacy',\n            stat: UnitStat.hcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HCREC],\n        }, 'passive:11:atk': {\n            id: BuffId['passive:11:atk'],\n            name: 'Passive HP-Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n        }, 'passive:11:def': {\n            id: BuffId['passive:11:def'],\n            name: 'Passive HP-Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n        }, 'passive:11:rec': {\n            id: BuffId['passive:11:rec'],\n            name: 'Passive HP-Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n        }, 'passive:11:crit': {\n            id: BuffId['passive:11:crit'],\n            name: 'Passive HP-Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n        }, 'passive:12:bc': {\n            id: BuffId['passive:12:bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'passive:12:hc': {\n            id: BuffId['passive:12:hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'passive:12:item': {\n            id: BuffId['passive:12:item'],\n            name: 'Passive Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'passive:12:zel': {\n            id: BuffId['passive:12:zel'],\n            name: 'Passive Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n        }, 'passive:12:karma': {\n            id: BuffId['passive:12:karma'],\n            name: 'Passive Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n        }, 'passive:13': {\n            id: BuffId['passive:13'],\n            name: 'BB Gauge Fill on Enemy Defeat',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:14': {\n            id: BuffId['passive:14'],\n            name: 'Passive Damage Reduction (Chance)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:15': {\n            id: BuffId['passive:15'],\n            name: 'Heal on Enemy Defeat',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:16': {\n            id: BuffId['passive:16'],\n            name: 'Heal on Battle Win',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:17': {\n            id: BuffId['passive:17'],\n            name: 'HP Absorption',\n            stat: UnitStat.healOnAttack,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPABS],\n        }, 'passive:19:bc': {\n            id: BuffId['passive:19:bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'passive:19:hc': {\n            id: BuffId['passive:19:hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'passive:19:item': {\n            id: BuffId['passive:19:item'],\n            name: 'Passive Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'passive:19:zel': {\n            id: BuffId['passive:19:zel'],\n            name: 'Passive Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n        }, 'passive:19:karma': {\n            id: BuffId['passive:19:karma'],\n            name: 'Passive Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n        }, 'UNKNOWN_PROC_EFFECT_ID': {\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            name: 'Unknown Proc Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n            id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n            name: 'Unknown Proc Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'proc:1': {\n            id: BuffId['proc:1'],\n            name: 'Regular Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:2': {\n            id: BuffId['proc:2'],\n            name: 'Burst Heal',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:3': {\n            id: BuffId['proc:3'],\n            name: 'Active Gradual Heal',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:4:flat': {\n            id: BuffId['proc:4:flat'],\n            name: 'Burst BB Gauge Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:4:percent': {\n            id: BuffId['proc:4:percent'],\n            name: 'Burst BB Gauge Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:5:atk': {\n                id: BuffId['proc:5:atk'],\n                name: 'Active Regular/Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:5:def': {\n                id: BuffId['proc:5:def'],\n                name: 'Active Regular/Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:5:rec': {\n                id: BuffId['proc:5:rec'],\n                name: 'Active Regular/Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:5:crit': {\n                id: BuffId['proc:5:crit'],\n                name: 'Active Regular/Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'proc:6:bc': {\n            id: BuffId['proc:6:bc'],\n            name: 'Active Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'proc:6:hc': {\n            id: BuffId['proc:6:hc'],\n            name: 'Active Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'proc:6:item': {\n            id: BuffId['proc:6:item'],\n            name: 'Active Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'proc:7': {\n            id: BuffId['proc:7'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:8:flat': {\n            id: BuffId['proc:8:flat'],\n            name: 'Max HP Boost (Flat Amount)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        }, 'proc:8:percent': {\n            id: BuffId['proc:8:percent'],\n            name: 'Max HP Boost (Percentage)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'DOWN'; // default to down since these are reduction buffs\n                if (buff) {\n                    if (buff.value && buff.value > 0) {\n                        polarity = 'UP';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:9:atk': {\n                id: BuffId['proc:9:atk'],\n                name: 'Active Regular/Elemental Attack Reduction',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:9:def': {\n                id: BuffId['proc:9:def'],\n                name: 'Active Regular/Elemental Defense Reduction',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:9:rec': {\n                id: BuffId['proc:9:rec'],\n                name: 'Active Regular/Elemental Recovery Reduction',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:9:unknown': {\n                id: BuffId['proc:9:unknown'],\n                name: 'Active Regular/Elemental Unknown Stat Reduction',\n                stackType: BuffStackType.Active,\n                icons: () => [IconId.UNKNOWN],\n            },\n        };\n    })()), { 'proc:10:poison': {\n            id: BuffId['proc:10:poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:10:weak': {\n            id: BuffId['proc:10:weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:10:sick': {\n            id: BuffId['proc:10:sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:10:injury': {\n            id: BuffId['proc:10:injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:10:curse': {\n            id: BuffId['proc:10:curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:10:paralysis': {\n            id: BuffId['proc:10:paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:10:atk down': {\n            id: BuffId['proc:10:atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWNBLK],\n        }, 'proc:10:def down': {\n            id: BuffId['proc:10:def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWNBLK],\n        }, 'proc:10:rec down': {\n            id: BuffId['proc:10:rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWNBLK],\n        }, 'proc:10:unknown': {\n            id: BuffId['proc:10:unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:11:poison': {\n            id: BuffId['proc:11:poison'],\n            name: 'Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_POISON],\n        }, 'proc:11:weak': {\n            id: BuffId['proc:11:weak'],\n            name: 'Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_WEAK],\n        }, 'proc:11:sick': {\n            id: BuffId['proc:11:sick'],\n            name: 'Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_SICK],\n        }, 'proc:11:injury': {\n            id: BuffId['proc:11:injury'],\n            name: 'Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_INJURY],\n        }, 'proc:11:curse': {\n            id: BuffId['proc:11:curse'],\n            name: 'Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_CURSE],\n        }, 'proc:11:paralysis': {\n            id: BuffId['proc:11:paralysis'],\n            name: 'Paralysis Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_PARALYSIS],\n        }, 'proc:11:atk down': {\n            id: BuffId['proc:11:atk down'],\n            name: 'Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWN],\n        }, 'proc:11:def down': {\n            id: BuffId['proc:11:def down'],\n            name: 'Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWN],\n        }, 'proc:11:rec down': {\n            id: BuffId['proc:11:rec down'],\n            name: 'Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWN],\n        }, 'proc:11:unknown': {\n            id: BuffId['proc:11:unknown'],\n            name: 'Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.DEBUFF_AILMENT],\n        }, 'proc:12': {\n            id: BuffId['proc:12'],\n            name: 'Instant Revive (Guaranteed)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:13': {\n            id: BuffId['proc:13'],\n            name: 'Random Target Damage',\n            stackType: BuffStackType.Attack,\n            icons: () => [IconId.ATK_RT],\n        }, 'proc:14': {\n            id: BuffId['proc:14'],\n            name: 'Lifesteal Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n        }, 'proc:16:fire': {\n            id: BuffId['proc:16:fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:16:water': {\n            id: BuffId['proc:16:water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:16:earth': {\n            id: BuffId['proc:16:earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:16:thunder': {\n            id: BuffId['proc:16:thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:16:light': {\n            id: BuffId['proc:16:light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:16:dark': {\n            id: BuffId['proc:16:dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:16:all': {\n            id: BuffId['proc:16:all'],\n            name: 'Active Elemental Damage Reduction (All Elements)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:16:unknown': {\n            id: BuffId['proc:16:unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:17:poison': {\n            id: BuffId['proc:17:poison'],\n            name: 'Active Poison Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:17:weak': {\n            id: BuffId['proc:17:weak'],\n            name: 'Active Weak Resist',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:17:sick': {\n            id: BuffId['proc:17:sick'],\n            name: 'Active Sick Resist',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:17:injury': {\n            id: BuffId['proc:17:injury'],\n            name: 'Active Injury Resist',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:17:curse': {\n            id: BuffId['proc:17:curse'],\n            name: 'Active Curse Resist',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:17:paralysis': {\n            id: BuffId['proc:17:paralysis'],\n            name: 'Active Paralysis Resist',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:18': {\n            id: BuffId['proc:18'],\n            name: 'Active Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'proc:19': {\n            id: BuffId['proc:19'],\n            name: 'Active Gradual BB Gauge Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBREC],\n        } }));\n\n    /**\n     * @description Get the associated metadata entry for a given buff ID.\n     * @param id Buff ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n     * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    var index$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        convertProcEffectToBuffs: convertProcEffectToBuffs,\n        convertPassiveEffectToBuffs: convertPassiveEffectToBuffs,\n        get BuffSource () { return BuffSource; },\n        get BuffStackType () { return BuffStackType; },\n        BUFF_METADATA: BUFF_METADATA,\n        getMetadataForBuff: getMetadataForBuff\n    });\n\n    var index$2 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        constants: constants,\n        parsers: index$1,\n        getMetadataForProc: getMetadataForProc,\n        getMetadataForPassive: getMetadataForPassive,\n        isAttackingProcId: isAttackingProcId,\n        getNameForProc: getNameForProc,\n        getNameForPassive: getNameForPassive,\n        isProcEffect: isProcEffect,\n        isPassiveEffect: isPassiveEffect,\n        combineEffectsAndDamageFrames: combineEffectsAndDamageFrames,\n        getEffectId: getEffectId,\n        getEffectName: getEffectName,\n        get ProcBuffType () { return ProcBuffType; },\n        PASSIVE_METADATA: PASSIVE_METADATA,\n        PROC_METADATA: PROC_METADATA\n    });\n\n    /**\n     * @description Get the effects of a given extra skill.\n     * @param skill Extra skill to get the effects of.\n     * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForExtraSkill(skill) {\n        return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n    }\n\n    var index$3 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForExtraSkill: getEffectsForExtraSkill\n    });\n\n    /**\n     * @description Get the effects of a given item.\n     * @param item Item to get the effects of, if any are present,\n     * @returns Effects of the given item if they exist, an empty array otherwise.\n     */\n    function getEffectsForItem(item) {\n        let result = [];\n        if (item && item.effect) {\n            if (Array.isArray(item.effect)) {\n                result = item.effect;\n            }\n            else if (Array.isArray(item.effect.effect)) {\n                const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n                result = effect.map(e => {\n                    // apply target data to each effect\n                    const fullProcEffect = Object.assign({}, e);\n                    fullProcEffect['target area'] = targetArea;\n                    fullProcEffect['target type'] = targetType;\n                    return fullProcEffect;\n                });\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given item thumbnail filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents the thumbnail image for a given item.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getItemImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/item/${fileName || ''}`;\n    }\n\n    var index$4 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForItem: getEffectsForItem,\n        getItemImageUrl: getItemImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given leader skill.\n     * @param skill Leader skill to get the effects of.\n     * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForLeaderSkill(skill) {\n        return skill && Array.isArray(skill.effects) ? skill.effects : [];\n    }\n\n    var index$5 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForLeaderSkill: getEffectsForLeaderSkill\n    });\n\n    /**\n     * @description Generate the file names for each of the image type for a given unit ID.\n     * @param id Unit ID to use to generate the file names.\n     * @param suffix Optional parameter that's useful for things like alternate art.\n     * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n     */\n    function getUnitImageFileNames(id, suffix = '') {\n        const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n        return {\n            spritesheet: `unit_anime_${fileNameSuffix}`,\n            battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n            guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n            fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n        };\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given unit filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents an image for a given unit.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getUnitImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n    }\n\n    var index$6 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getUnitImageFileNames: getUnitImageFileNames,\n        getUnitImageUrl: getUnitImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given SP Enhancement Entry.\n     * @param entry SP Enhancement Entry to get the effects of.\n     * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n     */\n    function getEffectsForSpEnhancement(entry) {\n        const result = [];\n        if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n            const effectWrappers = entry.skill.effects;\n            effectWrappers.forEach(effectWrapper => {\n                Object.keys(effectWrapper).forEach(spType => {\n                    const originalEffect = effectWrapper[spType];\n                    const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                    result.push(unwrappedEffect);\n                });\n            });\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the associated category name with a given category ID.\n     * @param categoryId Category ID to get the name of.\n     * @returns Name of the given category ID or the string 'Unknown'.\n     */\n    function getSpCategoryName(categoryId) {\n        let result;\n        const numericalCategoryId = +categoryId;\n        switch (numericalCategoryId) {\n            case 1:\n                result = SpCategoryName['Parameter Boost'];\n                break;\n            case 2:\n                result = SpCategoryName.Spark;\n                break;\n            case 3:\n                result = SpCategoryName['Critical Hits'];\n                break;\n            case 4:\n                result = SpCategoryName['Attack Boost'];\n                break;\n            case 5:\n                result = SpCategoryName['BB Gauge'];\n                break;\n            case 6:\n                result = SpCategoryName['HP Recovery'];\n                break;\n            case 7:\n                result = SpCategoryName.Drops;\n                break;\n            case 8:\n                result = SpCategoryName['Ailment Resistance'];\n                break;\n            case 9:\n                result = SpCategoryName['Ailment Infliction'];\n                break;\n            case 10:\n                result = SpCategoryName['Damage Reduction'];\n                break;\n            case 11:\n                result = SpCategoryName.Special;\n                break;\n            default:\n                result = SpCategoryName.Unknown;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n\n    /**\n     * @description Get the corresponding character code for a given index.\n     * It expects an index between 0 and 61 inclusive; will return an empty string if\n     * the given value is outside of the range.\n     * @param index Index of an SP entry in a given skills array.\n     * @returns Corresponding single alphanumeric character to the given index\n     * or an empty string if the index is invalid.\n     */\n    function spIndexToCode(index) {\n        let result = '';\n        let correspondingCharacterCode = -1;\n        if (Number.isInteger(index)) {\n            if (index >= 0 && index <= 25) { // A-Z\n                correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (index >= 26 && index <= 51) { // a-z\n                correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n            }\n            else if (index >= 52 && index <= 61) { // 0-9\n                correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n            }\n        }\n        if (correspondingCharacterCode !== -1) {\n            result = String.fromCharCode(correspondingCharacterCode);\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the corresponding index for a given character code.\n     * It expects an alphanumeric character and will return -1 otherwise.\n     * @param code Character code an SP entry in a given skills array.\n     * @returns Corresponding index to the given character or -1 if the\n     * character is invalid.\n     */\n    function spCodeToIndex(code) {\n        let result = -1;\n        let characterCodeOffset = -1;\n        if (!!code && typeof code === 'string' && code.length === 1) {\n            if (code >= 'A' && code <= 'Z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (code >= 'a' && code <= 'z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n            }\n            else if (code >= '0' && code <= '9') {\n                characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n            }\n        }\n        if (characterCodeOffset !== -1) {\n            result = code.charCodeAt(0) - characterCodeOffset;\n        }\n        return result;\n    }\n\n    /**\n     * @description Extract the ID of a string in the format of `number@actualId`. If there\n     * is no value after the @ character or if no @ character is present, the original ID is returned.\n     * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n     * @param id Original SP Enhancement Entry ID.\n     * @returns The ID of a string in the format of `number@actualId`, or the original input if\n     * there is no @ character or no value after the @ character.\n     */\n    function getSpEntryId(id) {\n        return (typeof id === 'string' && id.split('@')[1]) || id;\n    }\n\n    /**\n     * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n     * @param id SP Enhancement entry ID.\n     * @param entries Collection of SP Enhancement entries to search in.\n     * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n     */\n    function getSpEntryWithId(id, entries) {\n        const spId = getSpEntryId(id);\n        return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n     * @param entry SP Entry to get dependencies for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n     */\n    function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependencies = [];\n        if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n            const dependencyId = getSpEntryId(entry.dependency);\n            const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n            if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n                addedEntries.add(dependencyEntry);\n                const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n                dependencies = [dependencyEntry].concat(subDependencies);\n            }\n        }\n        return dependencies;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n     * @param entry SP Entry to get dependents for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n     */\n    function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependents = [];\n        if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n            const entryId = entry.id;\n            dependents = allEntries\n                .filter(s => {\n                return s.dependency &&\n                    s.dependency.includes(entryId) &&\n                    !addedEntries.has(s);\n            });\n            dependents.forEach(dependent => {\n                addedEntries.add(dependent);\n                const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n                dependents = dependents.concat(subDependents);\n            });\n        }\n        return dependents;\n    }\n\n    var index$7 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForSpEnhancement: getEffectsForSpEnhancement,\n        getSpCategoryName: getSpCategoryName,\n        spIndexToCode: spIndexToCode,\n        spCodeToIndex: spCodeToIndex,\n        getSpEntryId: getSpEntryId,\n        getSpEntryWithId: getSpEntryWithId,\n        getAllDependenciesForSpEntry: getAllDependenciesForSpEntry,\n        getAllEntriesThatDependOnSpEntry: getAllEntriesThatDependOnSpEntry\n    });\n\n    /* NOTE: this file is automatically generated; do not edit this file */\n    var version = '0.7.0';\n\n    exports.buffs = index$2;\n    exports.bursts = index;\n    exports.datamineTypes = datamineTypes;\n    exports.extraSkills = index$3;\n    exports.items = index$4;\n    exports.leaderSkills = index$5;\n    exports.spEnhancements = index$7;\n    exports.units = index$6;\n    exports.version = version;\n\n    return exports;\n\n}({}));\n\n","/**\n * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get level entry from.\n * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n */\nexport default function getLevelEntryForBurst(burst, level) {\n    const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n    let levelIndex;\n    if (level !== null && !isNaN(level)) {\n        // 1-indexed\n        levelIndex = (+level - 1);\n    }\n    else {\n        // default to last entry in burst\n        levelIndex = burstEffectsByLevel.length - 1;\n    }\n    return burstEffectsByLevel[levelIndex];\n}\n","/**\n * @description Get the proc/passive ID of a given object.\n * @param effect Object to get the effect ID from.\n * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectId(effect) {\n    let resultId = '';\n    if (effect) {\n        resultId = effect['proc id'] || effect['unknown proc id'] ||\n            effect['passive id'] || effect['unknown passive id'] || '';\n    }\n    return resultId;\n}\n","export var KNOWN_PROC_ID;\n(function (KNOWN_PROC_ID) {\n    KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n    KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n})(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\nexport var KNOWN_PASSIVE_ID;\n(function (KNOWN_PASSIVE_ID) {\n    KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n    KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n})(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n","export var ProcBuffType;\n(function (ProcBuffType) {\n    ProcBuffType[\"Attack\"] = \"Attack\";\n})(ProcBuffType || (ProcBuffType = {}));\n/* eslint-disable */\n/**\n * @ignore\n */\nexport const PASSIVE_METADATA = Object.freeze({\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Parameter Boost\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Elemental Parameter Boost\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Type-Based Parameter Boost\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"Status Negation\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Damage Reduction\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Gradual BB Gauge Boost\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"HC Efficacy\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"HP-Conditional Parameter Boost\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"HP-Conditional Drop Rate Boost\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"BC Fill on Enemy Defeat\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Damage Reduction (Chance)\"\n    },\n    \"15\": {\n        \"ID\": \"15\",\n        \"Name\": \"Heal on Enemy Defeat\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Heal on Battle Victory\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"HP Absorption\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Drop Rate Boost\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"Status Infliction\"\n    },\n    \"21\": {\n        \"ID\": \"21\",\n        \"Name\": \"Parameter Boost for First X Turns\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"BC Fill on Battle Victory\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Heal when Attacked (Chance)\"\n    },\n    \"25\": {\n        \"ID\": \"25\",\n        \"Name\": \"BC Fill when Hit (Chance)\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Damage Counter (Chance)\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Increased Target Chance\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Decreased Target Chance\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Defense Ignore (Chance)\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"BB Conditional Parameter Boost\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"BC Efficacy\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Heal over Time\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"Critical Damage Boost\"\n    },\n    \"35\": {\n        \"ID\": \"35\",\n        \"Name\": \"BC Fill when Normal Attacking\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Extra Action\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Hit Count Boost\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Parameter Conversion\"\n    },\n    \"41\": {\n        \"ID\": \"41\",\n        \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"Gender Parameter Boost\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Damage Reduction to 1\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Flat Parameter Boost\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"Critical Damage Negation\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"BC Fill on Spark\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"BC Cost Reduction\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"BB Gauge Consumption Reduction\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Elemental Damage Boost\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Conditional Effect based on HP Threshold\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Damage Reduction when Guarding\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BC Fill when Attacked when Guarding\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BC Fill on Guard\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Elemental Damage Reduction for first X Turns\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"BB Atk Boost\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"BC Fill on Critical\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Add buff to Brave Burst\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"OD Gauge Fill Rate Boost\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"Status Counter\"\n    },\n    \"72\": {\n        \"ID\": \"72\",\n        \"Name\": \"Turn End Effects Activate at Turn Start\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\"\n    },\n    \"74\": {\n        \"ID\": \"74\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Spark Vulnerability\"\n    },\n    \"77\": {\n        \"ID\": \"77\",\n        \"Name\": \"Spark Damage Reduction\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Conditional Effect after Damage Received Threshold\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"BC Fill after Damage Received Threshold\"\n    },\n    \"80\": {\n        \"ID\": \"80\",\n        \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n    },\n    \"81\": {\n        \"ID\": \"81\",\n        \"Name\": \"BC Fill after Damage Dealt Threshold\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"Conditional Effect after BC Received Threshold\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"Conditional Effect after HC Received Threshold\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"BC Fill after HC Received Threshold\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"Conditional Effect after Spark Threshold\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Conditional Effect on Guard\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Conditional Effect on Critical\"\n    },\n    \"90\": {\n        \"ID\": \"90\",\n        \"Name\": \"Status Infliction on Critical\"\n    },\n    \"91\": {\n        \"ID\": \"91\",\n        \"Name\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Negate Defense Ignore\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Added Elements\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Normal Attacks Hit All Foes\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Player EXP Boost\"\n    },\n    \"99\": {\n        \"ID\": \"99\",\n        \"Name\": \"\"\n    },\n    \"100\": {\n        \"ID\": \"100\",\n        \"Name\": \"Spark Critical\"\n    },\n    \"101\": {\n        \"ID\": \"101\",\n        \"Name\": \"Heal on Spark\"\n    },\n    \"102\": {\n        \"ID\": \"102\",\n        \"Name\": \"Added Elements\"\n    },\n    \"103\": {\n        \"ID\": \"103\",\n        \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n    },\n    \"104\": {\n        \"ID\": \"104\",\n        \"Name\": \"Spark Boost when HP Passes Threshold\"\n    },\n    \"105\": {\n        \"ID\": \"105\",\n        \"Name\": \"Turn-Based Parameter Boost\"\n    },\n    \"106\": {\n        \"ID\": \"106\",\n        \"Name\": \"Conditional Effect after Activating Overdrive\"\n    },\n    \"107\": {\n        \"ID\": \"107\",\n        \"Name\": \"Add Effect to Leader Skill\"\n    },\n    \"109\": {\n        \"ID\": \"109\",\n        \"Name\": \"BB Gauge Reduction (Chance)\"\n    },\n    \"110\": {\n        \"ID\": \"110\",\n        \"Name\": \"BC Efficacy Reduction (Chance)\"\n    },\n    \"111\": {\n        \"ID\": \"111\",\n        \"Name\": \"Increase Brave Burst Activation Rate\"\n    },\n    \"112\": {\n        \"ID\": \"112\",\n        \"Name\": \"ABP/CBP Boost\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Conditional Effect after HP Threshold\"\n    },\n    \"114\": {\n        \"ID\": \"114\",\n        \"Name\": \"Inflict Buff when Attacked\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n    },\n    \"128\": {\n        \"ID\": \"128\",\n        \"Name\": \"Damage Reduction from Normal Attacks\"\n    },\n    \"143\": {\n        \"ID\": \"143\",\n        \"Name\": \"Break Atk Parameter Limit\"\n    },\n    \"10008\": {\n        \"ID\": \"10008\",\n        \"Name\": \"Damage Reduction from Specific Sources\"\n    },\n    \"11004\": {\n        \"ID\": \"11004\",\n        \"Name\": \"Elemental Spark Damage Boost\"\n    },\n    \"11005\": {\n        \"ID\": \"11005\",\n        \"Name\": \"Elemental Critical Damage Boost\"\n    },\n    \"11006\": {\n        \"ID\": \"11006\",\n        \"Name\": \"Summoner EXP Boost\"\n    },\n    \"11009\": {\n        \"ID\": \"11009\",\n        \"Name\": \"Effect Duration Boost\"\n    },\n    \"66,1\": {\n        \"ID\": \"66,1\",\n        \"Name\": \"\"\n    }\n});\n/**\n * @ignore\n */\nexport const PROC_METADATA = Object.freeze({\n    \"0\": {\n        \"ID\": \"0\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Regular Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Burst Heal\",\n        \"Type\": \"\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Heal over Time\",\n        \"Type\": \"\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"BB Gauge Refill\",\n        \"Type\": \"\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"Drop Rate\",\n        \"Type\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Parameter Reduction\",\n        \"Type\": \"\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"Status Cleanse\",\n        \"Type\": \"\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"Status Infliction\",\n        \"Type\": \"\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"Revive (Guaranteed)\",\n        \"Type\": \"\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"Random Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Lifesteal Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"Status Negation\",\n        \"Type\": \"\"\n    },\n    \"18\": {\n        \"ID\": \"18\",\n        \"Name\": \"Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Gradual BB Gauge Boost\",\n        \"Type\": \"\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"BC Fill on Hit\",\n        \"Type\": \"\"\n    },\n    \"22\": {\n        \"ID\": \"22\",\n        \"Name\": \"Defense Ignore\",\n        \"Type\": \"\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Hit Count Boost\",\n        \"Type\": \"\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Fixed Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Multi-Element Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"Add Elements\",\n        \"Type\": \"\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Instant BB Gauge Fill\",\n        \"Type\": \"\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"Element Shift\",\n        \"Type\": \"\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Buff Removal (Chance)\",\n        \"Type\": \"\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"BB Gauge Reduction (Chance)\",\n        \"Type\": \"\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Leader Skill Lock (Chance)\",\n        \"Type\": \"\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Summon Unit\",\n        \"Type\": \"\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"Status Cure\",\n        \"Type\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Status Infliction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Instant OD Fill\",\n        \"Type\": \"\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Damage over Time (Additional Damage)\",\n        \"Type\": \"\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"BB Atk Boost\",\n        \"Type\": \"\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Non-Lethal Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"HP Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"Piercing Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"Retire\",\n        \"Type\": \"\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Damage Counter\",\n        \"Type\": \"\"\n    },\n    \"51\": {\n        \"ID\": \"51\",\n        \"Name\": \"Parameter Reduction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"BC Efficacy\",\n        \"Type\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Status Counter\",\n        \"Type\": \"\"\n    },\n    \"54\": {\n        \"ID\": \"54\",\n        \"Name\": \"Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Elemental Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"56\": {\n        \"ID\": \"56\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"57\": {\n        \"ID\": \"57\",\n        \"Name\": \"BC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Spark Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BB Atk Reduction\",\n        \"Type\": \"\"\n    },\n    \"60\": {\n        \"ID\": \"60\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BB-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Barrier\",\n        \"Type\": \"\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Selective Buff Wipe\",\n        \"Type\": \"\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"Consecutive Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\",\n        \"Type\": \"\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Revive (Chance)\",\n        \"Type\": \"\"\n    },\n    \"67\": {\n        \"ID\": \"67\",\n        \"Name\": \"BC Fill on Spark\",\n        \"Type\": \"\"\n    },\n    \"68\": {\n        \"ID\": \"68\",\n        \"Name\": \"Damage Reduction when Guarding\",\n        \"Type\": \"\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"BC Fill on Guard\",\n        \"Type\": \"\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"BB Gauge Fill Rate Debuff\",\n        \"Type\": \"\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\",\n        \"Type\": \"\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Element Squad-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"76\": {\n        \"ID\": \"76\",\n        \"Name\": \"Extra Action\",\n        \"Type\": \"\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Self Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"Player EXP Boost\",\n        \"Type\": \"\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"83\": {\n        \"ID\": \"83\",\n        \"Name\": \"Spark Critical\",\n        \"Type\": \"\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"OD Gauge Fill Rate\",\n        \"Type\": \"\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"Heal when Attacked\",\n        \"Type\": \"\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"HP Absorption\",\n        \"Type\": \"\"\n    },\n    \"87\": {\n        \"ID\": \"87\",\n        \"Name\": \"Heal on Spark\",\n        \"Type\": \"\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Self Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Self Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Self Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"94\": {\n        \"ID\": \"94\",\n        \"Name\": \"Normal Attacks Hit All Foes\",\n        \"Type\": \"\"\n    },\n    \"95\": {\n        \"ID\": \"95\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n        \"Type\": \"\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Element Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Gradual OD Fill\",\n        \"Type\": \"\"\n    },\n    \"119\": {\n        \"ID\": \"119\",\n        \"Name\": \"Gradual BC Drain\",\n        \"Type\": \"\"\n    },\n    \"123\": {\n        \"ID\": \"123\",\n        \"Name\": \"OD Gauge Reduction\",\n        \"Type\": \"\"\n    },\n    \"126\": {\n        \"ID\": \"126\",\n        \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n        \"Type\": \"\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Lock On\",\n        \"Type\": \"\"\n    },\n    \"130\": {\n        \"ID\": \"130\",\n        \"Name\": \"Parameter Reduction Counter\",\n        \"Type\": \"\"\n    },\n    \"131\": {\n        \"ID\": \"131\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"132\": {\n        \"ID\": \"132\",\n        \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"901\": {\n        \"ID\": \"901\",\n        \"Name\": \"Raid Heal (on Map)\",\n        \"Type\": \"\"\n    },\n    \"902\": {\n        \"ID\": \"902\",\n        \"Name\": \"Raid Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"903\": {\n        \"ID\": \"903\",\n        \"Name\": \"Raid Boss Reveal\",\n        \"Type\": \"\"\n    },\n    \"905\": {\n        \"ID\": \"905\",\n        \"Name\": \"Raid Teleport\",\n        \"Type\": \"\"\n    },\n    \"906\": {\n        \"ID\": \"906\",\n        \"Name\": \"Raid Flee\",\n        \"Type\": \"\"\n    },\n    \"907\": {\n        \"ID\": \"907\",\n        \"Name\": \"Raid Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"908\": {\n        \"ID\": \"908\",\n        \"Name\": \"Raid Item Drop Rate Boost\",\n        \"Type\": \"\"\n    },\n    \"10000\": {\n        \"ID\": \"10000\",\n        \"Name\": \"Taunt\",\n        \"Type\": \"\"\n    },\n    \"10001\": {\n        \"ID\": \"10001\",\n        \"Name\": \"Stealth\",\n        \"Type\": \"\"\n    },\n    \"10002\": {\n        \"ID\": \"10002\",\n        \"Name\": \"Shield (old)\",\n        \"Type\": \"\"\n    },\n    \"10003\": {\n        \"ID\": \"10003\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"10004\": {\n        \"ID\": \"10004\",\n        \"Name\": \"Damage Immunity\",\n        \"Type\": \"\"\n    },\n    \"10005\": {\n        \"ID\": \"10005\",\n        \"Name\": \"Turn Skip (short duration)\",\n        \"Type\": \"\"\n    },\n    \"10006\": {\n        \"ID\": \"10006\",\n        \"Name\": \"Turn Skip (long duration)\",\n        \"Type\": \"\"\n    },\n    \"10007\": {\n        \"ID\": \"10007\",\n        \"Name\": \"Evasion\",\n        \"Type\": \"\"\n    },\n    \"10009\": {\n        \"ID\": \"10009\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"10012\": {\n        \"ID\": \"10012\",\n        \"Name\": \"OD Drain\",\n        \"Type\": \"\"\n    },\n    \"10015\": {\n        \"ID\": \"10015\",\n        \"Name\": \"Elemental Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"10016\": {\n        \"ID\": \"10016\",\n        \"Name\": \"Element Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"10017\": {\n        \"ID\": \"10017\",\n        \"Name\": \"Elemental Shield\",\n        \"Type\": \"\"\n    },\n    \"10018\": {\n        \"ID\": \"10018\",\n        \"Name\": \"Max HP Reduction\",\n        \"Type\": \"\"\n    },\n    \"10019\": {\n        \"ID\": \"10019\",\n        \"Name\": \"Effect Purge\",\n        \"Type\": \"\"\n    },\n    \"10020\": {\n        \"ID\": \"10020\",\n        \"Name\": \"Piercing Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"10021\": {\n        \"ID\": \"10021\",\n        \"Name\": \"Active Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10022\": {\n        \"ID\": \"10022\",\n        \"Name\": \"Passive Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10023\": {\n        \"ID\": \"10023\",\n        \"Name\": \"HC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"10025\": {\n        \"ID\": \"10025\",\n        \"Name\": \"KO Resistance Negation\",\n        \"Type\": \"\"\n    },\n    \"10026\": {\n        \"ID\": \"10026\",\n        \"Name\": \"Doom\",\n        \"Type\": \"\"\n    },\n    \"11000\": {\n        \"ID\": \"11000\",\n        \"Name\": \"Negative HP-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"11001\": {\n        \"ID\": \"11001\",\n        \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n        \"Type\": \"\"\n    },\n    \"11002\": {\n        \"ID\": \"11002\",\n        \"Name\": \"HP Limit Break, Convert to HP\",\n        \"Type\": \"\"\n    },\n    \"11003\": {\n        \"ID\": \"11003\",\n        \"Name\": \"Effect Negation\",\n        \"Type\": \"\"\n    },\n    \"70001\": {\n        \"ID\": \"70001\",\n        \"Name\": \"Mana Bubble Shield\",\n        \"Type\": \"\"\n    },\n    \"70002\": {\n        \"ID\": \"70002\",\n        \"Name\": \"Recast\",\n        \"Type\": \"\"\n    },\n    \"2-5\": {\n        \"ID\": \"2-5\",\n        \"Name\": \"Burst Heal and DEF/REC Boost\",\n        \"Type\": \"\"\n    }\n});\n","import { PROC_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given proc ID.\n * @param id Proc ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForProc(id, metadata = PROC_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\nimport { ProcBuffType } from './effect-metadata';\n/**\n * @description Determine if a given proc ID's type is an attack.\n * @param id Proc ID to check.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n */\nexport default function isAttackingProcId(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n}\n","export var Ailment;\n(function (Ailment) {\n    Ailment[\"Poison\"] = \"poison\";\n    Ailment[\"Weak\"] = \"weak\";\n    Ailment[\"Sick\"] = \"sick\";\n    Ailment[\"Injury\"] = \"injury\";\n    Ailment[\"Curse\"] = \"curse\";\n    Ailment[\"Paralysis\"] = \"paralysis\";\n    Ailment[\"AttackReduction\"] = \"atk down\";\n    Ailment[\"DefenseReduction\"] = \"def down\";\n    Ailment[\"RecoveryReduction\"] = \"rec down\";\n    Ailment[\"Unknown\"] = \"unknown\";\n})(Ailment || (Ailment = {}));\nexport var ArenaCondition;\n(function (ArenaCondition) {\n    ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n    ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n    ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n    ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n    ArenaCondition[\"hp_min\"] = \"hp_min\";\n    ArenaCondition[\"hp_max\"] = \"hp_max\";\n    ArenaCondition[\"atk_max\"] = \"atk_max\";\n    ArenaCondition[\"random\"] = \"random\";\n})(ArenaCondition || (ArenaCondition = {}));\nexport var MoveType;\n(function (MoveType) {\n    MoveType[\"Moving\"] = \"1\";\n    MoveType[\"Teleporting\"] = \"2\";\n    MoveType[\"NonMoving\"] = \"3\";\n})(MoveType || (MoveType = {}));\nexport var TargetArea;\n(function (TargetArea) {\n    TargetArea[\"Aoe\"] = \"aoe\";\n    TargetArea[\"Single\"] = \"single\";\n    TargetArea[\"Random\"] = \"random\";\n})(TargetArea || (TargetArea = {}));\nexport var TargetAreaShorthand;\n(function (TargetAreaShorthand) {\n    TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n    TargetAreaShorthand[\"Single\"] = \"ST\";\n    TargetAreaShorthand[\"Random\"] = \"RT\";\n})(TargetAreaShorthand || (TargetAreaShorthand = {}));\nexport var TargetType;\n(function (TargetType) {\n    TargetType[\"Self\"] = \"self\";\n    TargetType[\"Party\"] = \"party\";\n    TargetType[\"Enemy\"] = \"enemy\";\n})(TargetType || (TargetType = {}));\nexport var SpPassiveType;\n(function (SpPassiveType) {\n    SpPassiveType[\"AddPassive\"] = \"passive\";\n    SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n    SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n    SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n    SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n})(SpPassiveType || (SpPassiveType = {}));\nexport var SphereTypeName;\n(function (SphereTypeName) {\n    SphereTypeName[\"None\"] = \"None\";\n    SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n    SphereTypeName[\"Critical\"] = \"Critical\";\n    SphereTypeName[\"Drop\"] = \"Drop\";\n    SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n    SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n    SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n    SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n    SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n    SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n    SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n    SphereTypeName[\"Spark\"] = \"Spark\";\n    SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n    SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n    SphereTypeName[\"Special\"] = \"Special\";\n})(SphereTypeName || (SphereTypeName = {}));\nexport var SphereTypeId;\n(function (SphereTypeId) {\n    SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n    SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n    SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n    SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n    SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n    SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n    SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n    SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n    SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n    SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n    SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n    SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n    SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n    SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n    SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n})(SphereTypeId || (SphereTypeId = {}));\nexport var SpCategoryName;\n(function (SpCategoryName) {\n    SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n    SpCategoryName[\"Spark\"] = \"Spark\";\n    SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n    SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n    SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n    SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n    SpCategoryName[\"Drops\"] = \"Drops\";\n    SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n    SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n    SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n    SpCategoryName[\"Special\"] = \"Special\";\n    SpCategoryName[\"Unknown\"] = \"Unknown\";\n})(SpCategoryName || (SpCategoryName = {}));\nexport var SpCategoryId;\n(function (SpCategoryId) {\n    SpCategoryId[\"Parameter Boost\"] = \"1\";\n    SpCategoryId[\"Spark\"] = \"2\";\n    SpCategoryId[\"Critical Hits\"] = \"3\";\n    SpCategoryId[\"Attack Boost\"] = \"4\";\n    SpCategoryId[\"BB Gauge\"] = \"5\";\n    SpCategoryId[\"HP Recovery\"] = \"6\";\n    SpCategoryId[\"Drops\"] = \"7\";\n    SpCategoryId[\"Ailment Resistance\"] = \"8\";\n    SpCategoryId[\"Ailment Infliction\"] = \"9\";\n    SpCategoryId[\"Damage Reduction\"] = \"10\";\n    SpCategoryId[\"Special\"] = \"11\";\n})(SpCategoryId || (SpCategoryId = {}));\nexport var UnitAnimationKey;\n(function (UnitAnimationKey) {\n    UnitAnimationKey[\"Attack\"] = \"attack\";\n    UnitAnimationKey[\"Idle\"] = \"idle\";\n    UnitAnimationKey[\"Move\"] = \"move\";\n})(UnitAnimationKey || (UnitAnimationKey = {}));\nexport var UnitElement;\n(function (UnitElement) {\n    UnitElement[\"Fire\"] = \"fire\";\n    UnitElement[\"Water\"] = \"water\";\n    UnitElement[\"Earth\"] = \"earth\";\n    UnitElement[\"Thunder\"] = \"thunder\";\n    UnitElement[\"Light\"] = \"light\";\n    UnitElement[\"Dark\"] = \"dark\";\n})(UnitElement || (UnitElement = {}));\nexport var UnitGender;\n(function (UnitGender) {\n    UnitGender[\"Male\"] = \"male\";\n    UnitGender[\"Female\"] = \"female\";\n    UnitGender[\"Other\"] = \"other\";\n})(UnitGender || (UnitGender = {}));\nexport var UnitGettingType;\n(function (UnitGettingType) {\n    UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n    UnitGettingType[\"Farmable\"] = \"farmable\";\n    UnitGettingType[\"RareSummon\"] = \"rare summon\";\n    UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n})(UnitGettingType || (UnitGettingType = {}));\nexport var UnitKind;\n(function (UnitKind) {\n    UnitKind[\"Normal\"] = \"normal\";\n    UnitKind[\"Evolution\"] = \"evo\";\n    UnitKind[\"Enhancing\"] = \"enhancing\";\n    UnitKind[\"Sale\"] = \"sale\";\n})(UnitKind || (UnitKind = {}));\nexport var UnitType;\n(function (UnitType) {\n    UnitType[\"Lord\"] = \"lord\";\n    UnitType[\"Anima\"] = \"anima\";\n    UnitType[\"Breaker\"] = \"breaker\";\n    UnitType[\"Guardian\"] = \"guardian\";\n    UnitType[\"Oracle\"] = \"oracle\";\n    UnitType[\"Rex\"] = \"rex\";\n})(UnitType || (UnitType = {}));\nexport var ItemType;\n(function (ItemType) {\n    ItemType[\"Consumable\"] = \"consumable\";\n    ItemType[\"Material\"] = \"material\";\n    ItemType[\"Sphere\"] = \"sphere\";\n    ItemType[\"EvolutionMaterial\"] = \"evomat\";\n    ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n    ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n})(ItemType || (ItemType = {}));\nexport var MimicUnitIds;\n(function (MimicUnitIds) {\n    MimicUnitIds[\"Mimic\"] = \"60142\";\n    MimicUnitIds[\"BatMimic\"] = \"60143\";\n    MimicUnitIds[\"DragonMimic\"] = \"60144\";\n    MimicUnitIds[\"MetalMimic\"] = \"60224\";\n})(MimicUnitIds || (MimicUnitIds = {}));\n/**\n * @description Known values for the monster groups used in {@link IMimicInfo}.\n */\nexport const MimicMonsterGroupMapping = {\n    '1000': MimicUnitIds.Mimic,\n    '1100': MimicUnitIds.BatMimic,\n    '1101': MimicUnitIds.BatMimic,\n    '1200': MimicUnitIds.DragonMimic,\n    '1300': MimicUnitIds.MetalMimic,\n};\n","import getLevelEntryForBurst from './getLevelEntryForBurst';\n/**\n * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get effects from.\n * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n */\nexport default function getEffectsForBurst(burst, level) {\n    const levelEntry = getLevelEntryForBurst(burst, level);\n    return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n}\n","import getEffectId from '../buffs/getEffectId';\nimport { KNOWN_PROC_ID } from '../buffs/constants';\nimport isAttackingProcId from '../buffs/isAttackingProcId';\n/**\n * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n * @param damageFrames Damage frames that each have their own proc ID.\n * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Damage frames entry whose frames are based on the input damage frames.\n */\nexport default function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n    // relevant frames are all effects for healing or attacking\n    const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n    const relevantFrames = inputFrames.filter(frame => {\n        const procId = getEffectId(frame);\n        return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n    });\n    const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n        const keepFirstFrame = index === 0;\n        const numFrames = frameEntry['frame times'].length;\n        const damageDistribution = frameEntry['hit dmg% distribution'];\n        const frameTimes = frameEntry['frame times'];\n        for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n            acc.push({\n                damage: damageDistribution[frameIndex],\n                time: frameTimes[frameIndex],\n            });\n        }\n        return acc;\n    }, []);\n    const resultDamageFramesEntry = {\n        'effect delay time(ms)/frame': effectDelay,\n        'frame times': [],\n        'hit dmg% distribution': [],\n        'hit dmg% distribution (total)': 0,\n        hits: 0,\n    };\n    unifiedFrames.sort((a, b) => a.time - b.time)\n        .forEach(({ time, damage }) => {\n        resultDamageFramesEntry['frame times'].push(time);\n        resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n        resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n    });\n    resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n    return resultDamageFramesEntry;\n}\n","import { PASSIVE_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given passive ID.\n * @param id Passive ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\n/**\n * @description Get the associated name for a given proc ID.\n * @param id Proc ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Name of the proc ID if it exists, empty string otherwise.\n */\nexport default function getNameForProc(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","import getMetadataForPassive from './getMetadataForPassive';\n/**\n * @description Get the associated name for a given passive ID.\n * @param id Passive ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Name of the passive ID if it exists, empty string otherwise.\n */\nexport default function getNameForPassive(id, metadata) {\n    const metadataEntry = getMetadataForPassive(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","/**\n * @description Determine if a given effect object is a proc effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a proc effect based on its properties.\n */\nexport default function isProcEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n}\n","/**\n * @description Determine if a given effect object is a passive effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a passive effect based on its properties.\n */\nexport default function isPassiveEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n}\n","/**\n * @description Provides info at a glance regarding a buff's source and how it stacks.\n */\nexport var BuffStackType;\n(function (BuffStackType) {\n    /**\n     * @description The buff is activated via some skill and lasts for a number of turns.\n     * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n     * from different levels. Two possible levels of sources are:\n     * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n     * 2. Ultimate Brave Burst or Dual Brave Burst\n     */\n    BuffStackType[\"Active\"] = \"active\";\n    /**\n     * @description The buff is always active provided that the source is not nullified.\n     * Most passive buffs can stack with themselves.\n     */\n    BuffStackType[\"Passive\"] = \"passive\";\n    /**\n     * @description The buff is applied for a number of turns once a certain condition is met.\n     * Buffs of the same type are not able to stack.\n     */\n    BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n    /**\n     * @description Only one instance of the buff can be active at a time and can last indefinitely.\n     * A couple examples of this are Barrier and Max HP Boost.\n     */\n    BuffStackType[\"Singleton\"] = \"singleton\";\n    /**\n     * @description The buff's effects immediately apply to the target(s). This differs from singleton\n     * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n     * in the HP bar filling by the sum of those burst heals).\n     */\n    BuffStackType[\"Burst\"] = \"burst\";\n    /**\n     * @description A specific subset of `Burst` type buffs that deal damage to the target.\n     */\n    BuffStackType[\"Attack\"] = \"attack\";\n    /**\n     * @description Only for buffs that cannot be processed by the library yet.\n     */\n    BuffStackType[\"Unknown\"] = \"unknown\";\n})(BuffStackType || (BuffStackType = {}));\nexport var BuffSource;\n(function (BuffSource) {\n    BuffSource[\"BraveBurst\"] = \"bb\";\n    BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n    BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n    BuffSource[\"DualBraveBurst\"] = \"dbb\";\n    BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n    BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n    BuffSource[\"SpEnhancement\"] = \"sp\";\n    BuffSource[\"Item\"] = \"item\";\n    BuffSource[\"LeaderSkill\"] = \"ls\";\n    BuffSource[\"ExtraSkill\"] = \"es\";\n    /**\n     * @description Buffs that result of having a number of OE+ units in the squad.\n     */\n    BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n    /**\n     * @description Buffs based on a units type. See {@link UnitType}.\n     */\n    BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n    /**\n     * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n     * as well as ambient turn reductions present in some late-game quests.\n     */\n    BuffSource[\"Quest\"] = \"quest\";\n})(BuffSource || (BuffSource = {}));\n/**\n * @description Extra element values that can be used in addition to {@link UnitElement}.\n */\nexport var BuffConditionElement;\n(function (BuffConditionElement) {\n    BuffConditionElement[\"Unknown\"] = \"unknown\";\n    BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n    BuffConditionElement[\"All\"] = \"all\";\n})(BuffConditionElement || (BuffConditionElement = {}));\n/**\n * @description Stats on a unit that a buff can affect.\n */\nexport var UnitStat;\n(function (UnitStat) {\n    UnitStat[\"hp\"] = \"hp\";\n    UnitStat[\"atk\"] = \"atk\";\n    UnitStat[\"def\"] = \"def\";\n    UnitStat[\"rec\"] = \"rec\";\n    UnitStat[\"crit\"] = \"crit\";\n    UnitStat[\"bbGauge\"] = \"bbGauge\";\n    UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n    UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n    UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n    UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n    UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n    UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n    UnitStat[\"poisonResist\"] = \"poisonResist\";\n    UnitStat[\"weakResist\"] = \"weakResist\";\n    UnitStat[\"sickResist\"] = \"sickResist\";\n    UnitStat[\"injuryResist\"] = \"injuryResist\";\n    UnitStat[\"curseResist\"] = \"curseResist\";\n    UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n    UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n    UnitStat[\"weakInflict\"] = \"weakInflict\";\n    UnitStat[\"sickInflict\"] = \"sickInflict\";\n    UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n    UnitStat[\"curseInflict\"] = \"curseInflict\";\n    UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n    UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n    UnitStat[\"defDownResist\"] = \"defDownResist\";\n    UnitStat[\"recDownResist\"] = \"recDownResist\";\n    UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n    UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n    UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n    UnitStat[\"mitigation\"] = \"mitigation\";\n    UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n    UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n    UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n    UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n    UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n    UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n    UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n    UnitStat[\"koResistance\"] = \"koResistance\";\n    UnitStat[\"revive\"] = \"revive\";\n    UnitStat[\"healOnAttack\"] = \"healOnAttack\";\n})(UnitStat || (UnitStat = {}));\nexport var IconId;\n(function (IconId) {\n    IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n    IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n    IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n    IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n    IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n    IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n    IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n    IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n    IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n    IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n    IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n    IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n    IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n    IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n    IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n    IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n    IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n    IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n    IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n    IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n    IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n    IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n    IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n    IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n    IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n    IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n    IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n    IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n    IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n    IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n    IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n    IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n    IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n    IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n    IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n    IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n    IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n    IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n    IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n    IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n    IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n    IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n    IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n    IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n    IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n    IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n    IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n    IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n    IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n    IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n    IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n    IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n    IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n    IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n    IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n    IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n    IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n    IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n    IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n    IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n    IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n    IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n    IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n    IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n    IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n    IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n    IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n    IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n    IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n    IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n    IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n    IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n    IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n    IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n    IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n    IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n    IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n    IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n    IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n    IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n    IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n    IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n    IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n    IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n    IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n    IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n    IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n    IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n    IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n    IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n    IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n    IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n    IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n    IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n    IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n    IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n    IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n    IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n    IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n    IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n    IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n    IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n    IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n    IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n    IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n    IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n    IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n    IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n    IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n    IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n    IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n    IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n    IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n    IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n    IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n    IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n    IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n    IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n    IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n    IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n    IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n    IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n    IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n    IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n    IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n    IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n    IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n    IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n    IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n    IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n    IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n    IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n    IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n    IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n    IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n    IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n    IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n    IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n    IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n    IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n    IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n    IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n    IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n    IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n    IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n    IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n    IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n    IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n    IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n    IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n    IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n    IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n    IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n    IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n    IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n    IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n    IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n    IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n    IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n    IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n    IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n    IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n    IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n    IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n    IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n    IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n    IconId[\"BUFF_ATKDOWNBLK\"] = \"BUFF_ATKDOWNBLK\";\n    IconId[\"BUFF_DEFDOWNBLK\"] = \"BUFF_DEFDOWNBLK\";\n    IconId[\"BUFF_RECDOWNBLK\"] = \"BUFF_RECDOWNBLK\";\n    IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n    IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n    IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n    IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n    IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n    IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n    IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n    IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n    IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n    IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n    IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n    IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n    IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n    IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n    IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n    IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n    IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n    IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n    IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n    IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n    IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n    IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n    IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n    IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n    IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n    IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n    IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n    IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n    IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n    IconId[\"ATK_ST\"] = \"ATK_ST\";\n    IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n    IconId[\"ATK_RT\"] = \"ATK_RT\";\n    IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n    IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n})(IconId || (IconId = {}));\n/**\n * @description Format of these IDs are `<passive|proc>:<original effect ID>:<stat>`.\n * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n * source of a given buff.\n */\nexport var BuffId;\n(function (BuffId) {\n    BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n    BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n    BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n    BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n    BuffId[\"passive:1:def\"] = \"passive:1:def\";\n    BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n    BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n    BuffId[\"passive:2:hp\"] = \"passive:2:hp\";\n    BuffId[\"passive:2:atk\"] = \"passive:2:atk\";\n    BuffId[\"passive:2:def\"] = \"passive:2:def\";\n    BuffId[\"passive:2:rec\"] = \"passive:2:rec\";\n    BuffId[\"passive:2:crit\"] = \"passive:2:crit\";\n    BuffId[\"passive:3:hp\"] = \"passive:3:hp\";\n    BuffId[\"passive:3:atk\"] = \"passive:3:atk\";\n    BuffId[\"passive:3:def\"] = \"passive:3:def\";\n    BuffId[\"passive:3:rec\"] = \"passive:3:rec\";\n    BuffId[\"passive:3:crit\"] = \"passive:3:crit\";\n    BuffId[\"passive:4:poison\"] = \"passive:4:poison\";\n    BuffId[\"passive:4:weak\"] = \"passive:4:weak\";\n    BuffId[\"passive:4:sick\"] = \"passive:4:sick\";\n    BuffId[\"passive:4:injury\"] = \"passive:4:injury\";\n    BuffId[\"passive:4:curse\"] = \"passive:4:curse\";\n    BuffId[\"passive:4:paralysis\"] = \"passive:4:paralysis\";\n    BuffId[\"passive:5:fire\"] = \"passive:5:fire\";\n    BuffId[\"passive:5:water\"] = \"passive:5:water\";\n    BuffId[\"passive:5:earth\"] = \"passive:5:earth\";\n    BuffId[\"passive:5:thunder\"] = \"passive:5:thunder\";\n    BuffId[\"passive:5:light\"] = \"passive:5:light\";\n    BuffId[\"passive:5:dark\"] = \"passive:5:dark\";\n    BuffId[\"passive:5:unknown\"] = \"passive:5:unknown\";\n    BuffId[\"passive:8\"] = \"passive:8\";\n    BuffId[\"passive:9\"] = \"passive:9\";\n    BuffId[\"passive:10\"] = \"passive:10\";\n    BuffId[\"passive:11:atk\"] = \"passive:11:atk\";\n    BuffId[\"passive:11:def\"] = \"passive:11:def\";\n    BuffId[\"passive:11:rec\"] = \"passive:11:rec\";\n    BuffId[\"passive:11:crit\"] = \"passive:11:crit\";\n    BuffId[\"passive:12:bc\"] = \"passive:12:bc\";\n    BuffId[\"passive:12:hc\"] = \"passive:12:hc\";\n    BuffId[\"passive:12:item\"] = \"passive:12:item\";\n    BuffId[\"passive:12:zel\"] = \"passive:12:zel\";\n    BuffId[\"passive:12:karma\"] = \"passive:12:karma\";\n    BuffId[\"passive:13\"] = \"passive:13\";\n    BuffId[\"passive:14\"] = \"passive:14\";\n    BuffId[\"passive:15\"] = \"passive:15\";\n    BuffId[\"passive:16\"] = \"passive:16\";\n    BuffId[\"passive:17\"] = \"passive:17\";\n    BuffId[\"passive:19:bc\"] = \"passive:19:bc\";\n    BuffId[\"passive:19:hc\"] = \"passive:19:hc\";\n    BuffId[\"passive:19:item\"] = \"passive:19:item\";\n    BuffId[\"passive:19:zel\"] = \"passive:19:zel\";\n    BuffId[\"passive:19:karma\"] = \"passive:19:karma\";\n    BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n    BuffId[\"proc:1\"] = \"proc:1\";\n    BuffId[\"proc:2\"] = \"proc:2\";\n    BuffId[\"proc:3\"] = \"proc:3\";\n    BuffId[\"proc:4:flat\"] = \"proc:4:flat\";\n    BuffId[\"proc:4:percent\"] = \"proc:4:percent\";\n    BuffId[\"proc:5:atk\"] = \"proc:5:atk\";\n    BuffId[\"proc:5:def\"] = \"proc:5:def\";\n    BuffId[\"proc:5:rec\"] = \"proc:5:rec\";\n    BuffId[\"proc:5:crit\"] = \"proc:5:crit\";\n    BuffId[\"proc:6:bc\"] = \"proc:6:bc\";\n    BuffId[\"proc:6:hc\"] = \"proc:6:hc\";\n    BuffId[\"proc:6:item\"] = \"proc:6:item\";\n    BuffId[\"proc:7\"] = \"proc:7\";\n    BuffId[\"proc:8:flat\"] = \"proc:8:flat\";\n    BuffId[\"proc:8:percent\"] = \"proc:8:percent\";\n    BuffId[\"proc:9:atk\"] = \"proc:9:atk\";\n    BuffId[\"proc:9:def\"] = \"proc:9:def\";\n    BuffId[\"proc:9:rec\"] = \"proc:9:rec\";\n    BuffId[\"proc:9:unknown\"] = \"proc:9:unknown\";\n    BuffId[\"proc:10:poison\"] = \"proc:10:poison\";\n    BuffId[\"proc:10:weak\"] = \"proc:10:weak\";\n    BuffId[\"proc:10:sick\"] = \"proc:10:sick\";\n    BuffId[\"proc:10:injury\"] = \"proc:10:injury\";\n    BuffId[\"proc:10:curse\"] = \"proc:10:curse\";\n    BuffId[\"proc:10:paralysis\"] = \"proc:10:paralysis\";\n    BuffId[\"proc:10:atk down\"] = \"proc:10:atk down\";\n    BuffId[\"proc:10:def down\"] = \"proc:10:def down\";\n    BuffId[\"proc:10:rec down\"] = \"proc:10:rec down\";\n    BuffId[\"proc:10:unknown\"] = \"proc:10:unknown\";\n    BuffId[\"proc:11:poison\"] = \"proc:11:poison\";\n    BuffId[\"proc:11:weak\"] = \"proc:11:weak\";\n    BuffId[\"proc:11:sick\"] = \"proc:11:sick\";\n    BuffId[\"proc:11:injury\"] = \"proc:11:injury\";\n    BuffId[\"proc:11:curse\"] = \"proc:11:curse\";\n    BuffId[\"proc:11:paralysis\"] = \"proc:11:paralysis\";\n    BuffId[\"proc:11:atk down\"] = \"proc:11:atk down\";\n    BuffId[\"proc:11:def down\"] = \"proc:11:def down\";\n    BuffId[\"proc:11:rec down\"] = \"proc:11:rec down\";\n    BuffId[\"proc:11:unknown\"] = \"proc:11:unknown\";\n    BuffId[\"proc:12\"] = \"proc:12\";\n    BuffId[\"proc:13\"] = \"proc:13\";\n    BuffId[\"proc:14\"] = \"proc:14\";\n    BuffId[\"proc:16:fire\"] = \"proc:16:fire\";\n    BuffId[\"proc:16:water\"] = \"proc:16:water\";\n    BuffId[\"proc:16:earth\"] = \"proc:16:earth\";\n    BuffId[\"proc:16:thunder\"] = \"proc:16:thunder\";\n    BuffId[\"proc:16:light\"] = \"proc:16:light\";\n    BuffId[\"proc:16:dark\"] = \"proc:16:dark\";\n    BuffId[\"proc:16:all\"] = \"proc:16:all\";\n    BuffId[\"proc:16:unknown\"] = \"proc:16:unknown\";\n    BuffId[\"proc:17:poison\"] = \"proc:17:poison\";\n    BuffId[\"proc:17:weak\"] = \"proc:17:weak\";\n    BuffId[\"proc:17:sick\"] = \"proc:17:sick\";\n    BuffId[\"proc:17:injury\"] = \"proc:17:injury\";\n    BuffId[\"proc:17:curse\"] = \"proc:17:curse\";\n    BuffId[\"proc:17:paralysis\"] = \"proc:17:paralysis\";\n    BuffId[\"proc:18\"] = \"proc:18\";\n    BuffId[\"proc:19\"] = \"proc:19\";\n})(BuffId || (BuffId = {}));\n","import { BuffSource, } from './buff-types';\nimport { SpPassiveType, TargetType, TargetArea, } from '../../datamine-types';\n/**\n * @description Helper function for creating an entry to be used in the `sources`\n * property of {@link IBuff}.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourceEntryFromContext(context) {\n    return `${context.source}-${context.sourceId}`;\n}\n/**\n * @description Helper function for creating an entries array to be used in the `sources`\n * property of {@link IBuff}. It handles setting the order of the sources.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourcesFromContext(context) {\n    const resultArray = Array.isArray(context.previousSources)\n        ? context.previousSources.slice()\n        : [];\n    // Ensure that the current source is at the beginning of the array\n    resultArray.unshift(createSourceEntryFromContext(context));\n    return resultArray;\n}\n/**\n * @description Given the conditions in an extra skill effect, normalize them into\n * a simpler object containing the IDs of each condition type.\n * @param effect Extra skill effect to process conditions from.\n * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n */\nexport function processExtraSkillConditions(effect) {\n    const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n    const aggregate = {\n        units: new Set(),\n        items: new Set(),\n        sphereTypes: new Set(),\n        unknowns: new Set(),\n    };\n    conditions.forEach((condition, index) => {\n        if ('sphere category required (raw)' in condition) {\n            aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n        }\n        else if ('item required' in condition) {\n            condition['item required'].forEach((item) => {\n                aggregate.items.add(item);\n            });\n        }\n        else if ('unit required' in condition) {\n            condition['unit required'].forEach((unit) => {\n                aggregate.units.add(`${unit.id}`);\n            });\n        }\n        else {\n            aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n        }\n    });\n    // filter out properties that have no entries\n    const result = Object.entries(aggregate)\n        .filter((entry) => entry[1].size > 0)\n        .reduce((acc, entry) => {\n        acc[entry[0]] = Array.from(entry[1]);\n        return acc;\n    }, {});\n    return result;\n}\n/**\n * @description Extract the target type and target area of a given passive effect.\n * @param effect Passive effect to extract target data from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns The target data for the given effect and context. There are only two possible values:\n * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n */\nexport function getPassiveTargetData(effect, context) {\n    const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n        (effect.sp_type === SpPassiveType.EnhancePassive);\n    const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n    return {\n        targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n        targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n    };\n}\n/**\n * @description Extract the target type and target area of a given proc effect.\n * @param effect Proc effect to extract target data from.\n * @returns The target data for the given effect and context.\n */\nexport function getProcTargetData(effect) {\n    return {\n        targetArea: effect['target area'],\n        targetType: effect['target type'],\n    };\n}\n/**\n * @description Try to parse the given value into a number or return a value if it is not a number.\n * @param value Value to parse into a number.\n * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n */\nexport function parseNumberOrDefault(value, defaultValue = 0) {\n    return (value !== null && !isNaN(value)) ? +value : defaultValue;\n}\n/**\n * @description Create an object denoting values that cannot be processed yet. To be used\n * in the `value` property of `IBuff` as needed.\n * @param params Array of values that cannot be processed yet.\n * @param startIndex The first index before which we know how to process an effect's values.\n * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n */\nexport function createUnknownParamsValue(params = [], startIndex = 0) {\n    let hasValue = false;\n    const result = params\n        .reduce((acc, value, index) => {\n        if (value && value !== '0') {\n            acc[`param_${startIndex + index}`] = value;\n            hasValue = true;\n        }\n        return acc;\n    }, {});\n    return hasValue ? result : (void 0);\n}\n","import { UnitElement, Ailment, TargetArea } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { getProcTargetData, createSourcesFromContext, parseNumberOrDefault, createUnknownParamsValue } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of proc IDs to functions.\n */\nexport function getProcEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const effectDelay = effect['effect delay time(ms)/frame'];\n        return { targetData, sources, effectDelay };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n        effectDelay,\n        sources, value: unknownParams }, targetData));\n    const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n        sources, value: {\n            buffs,\n            duration: duration,\n        } }, targetData));\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            value = parseParamValue(rawValue);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect[effectValueKey]);\n            turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [buffId],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const hits = +((context.damageFrames && context.damageFrames.hits) || 0);\n        const distribution = +((context.damageFrames && context.damageFrames['hit dmg% distribution (total)']) || 0);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [Object.assign({ id: 'proc:1', originalId: '1', sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '1',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'healerRec%': 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            let recX, recY;\n            let extraParams;\n            [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n            params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['heal low'];\n            params.healHigh = effect['heal high'];\n            params['healerRec%'] = effect['rec added% (from healer)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const results = [Object.assign({ id: 'proc:2', originalId: '2', sources,\n                effectDelay, value: params }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '2',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'targetRec%': 0,\n            turnDuration: '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let rec;\n            let extraParams;\n            [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['gradual heal low'];\n            params.healHigh = effect['gradual heal high'];\n            params['targetRec%'] = effect['rec added% (from target)'];\n            params.turnDuration = effect['gradual heal turns (8)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n        const results = [];\n        if (hasAnyHealValues) {\n            results.push(Object.assign({ id: 'proc:3', originalId: '3', sources,\n                effectDelay, duration: params.turnDuration, value: {\n                    healLow: params.healLow,\n                    healHigh: params.healHigh,\n                    'targetRec%': params['targetRec%'],\n                } }, targetData));\n        }\n        else if (params.turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId: '3',\n                sources,\n                buffs: ['proc:3'],\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '3',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill);\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('bb bc fill' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill']);\n            }\n            if ('bb bc fill%' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n            }\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:flat', originalId: '4', sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:percent', originalId: '4', sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '4',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            element: BuffConditionElement.All,\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    params[statType] = parseNumberOrDefault(effect[effectKey]);\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    const buffEntry = Object.assign({ id: `proc:5:${statKey}`, originalId: '5', sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n        }\n        else if (params.turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId: '5',\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:5:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '5',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('6', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            turnDuration: '0',\n        };\n        const dropRateProperties = ['bc', 'hc', 'item'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.bc = effect['bc drop rate% buff (10)'];\n            params.hc = effect['hc drop rate% buff (9)'];\n            params.item = effect['item drop rate% buff (11)'];\n            params.turnDuration = effect['drop buff rate turns'];\n        }\n        dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n        const results = [];\n        if (hasAnyRates) {\n            dropRateProperties.forEach((key) => {\n                const value = params[key];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:6:${key}`, originalId: '6', sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (params.turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId: '6',\n                sources,\n                buffs: dropRateProperties.map((key) => `proc:6:${key}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '6',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('7', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHpPercent = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:7', originalId: '7', sources,\n                effectDelay, value: recoveredHpPercent }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '7',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatHpBoost = 0;\n        let percentHpBoost = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n            flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n            percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('max hp increase' in effect) {\n                flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n            }\n            if ('max hp% increase' in effect) {\n                percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n            }\n        }\n        const results = [];\n        if (flatHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:flat', originalId: '8', sources,\n                effectDelay, value: flatHpBoost }, targetData));\n        }\n        if (percentHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:percent', originalId: '8', sources,\n                effectDelay, value: percentHpBoost }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '8',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const STAT_TYPE_MAPPING = {\n            0: 'atk',\n            1: 'def',\n            2: 'rec',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const params = {\n            element: BuffConditionElement.All,\n            statReductionEntries: [],\n            turnDuration: 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n            [\n                [statType1, value1, procChance1],\n                [statType2, value2, procChance2],\n            ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                const statType = parseNumberOrDefault(rawStatType) - 1;\n                const value = parseNumberOrDefault(rawValue);\n                const chance = parseNumberOrDefault(rawProcChance);\n                if (statType === 3) { // all stats\n                    params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                        stat,\n                        value,\n                        chance,\n                    })));\n                }\n                else {\n                    params.statReductionEntries.push({\n                        stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                        value,\n                        chance,\n                    });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            ['buff #1', 'buff #2'].forEach((buffKey) => {\n                const entry = effect[buffKey];\n                if (entry) {\n                    const chance = parseNumberOrDefault(entry['proc chance%']);\n                    const keys = Object.keys(entry);\n                    coreStatProperties.forEach((statType) => {\n                        const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                        if (effectKey) {\n                            params.statReductionEntries.push({\n                                stat: statType,\n                                value: parseNumberOrDefault(entry[effectKey]),\n                                chance,\n                            });\n                        }\n                    });\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        let hasAnyValues = false;\n        params.statReductionEntries.forEach(({ stat, value, chance }) => {\n            if (value !== 0 || chance !== 0) {\n                hasAnyValues = true;\n                const buffEntry = Object.assign({ id: `proc:9:${stat}`, originalId: '9', sources,\n                    effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                if (params.element !== BuffConditionElement.All) {\n                    buffEntry.conditions = {\n                        targetElements: [params.element],\n                    };\n                }\n                results.push(buffEntry);\n            }\n        });\n        if (!hasAnyValues && params.turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId: '9',\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:9:${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '9',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 8);\n            const extraParams = splitParams.slice(8);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                if (`remove ${ailment}` in effect) { // mainly for items\n                    curedAilments.push(ailment);\n                }\n            });\n            if ('remove all status ailments' in effect) {\n                curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:${ailment}`, originalId: '10', sources,\n            effectDelay, value: true }, targetData)));\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '10',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            let params = splitEffectParams(effect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:${ailment}`, originalId: '11', sources,\n            effectDelay, value: chance }, targetData)));\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '11',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let reviveToHp = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n            reviveToHp = parseNumberOrDefault(rawReviveToHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:12', originalId: '12', sources,\n                effectDelay, value: reviveToHp }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '12',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hits = 0;\n        const distribution = +((context.damageFrames && context.damageFrames['hit dmg% distribution (total)']) || 0);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawHits;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n            hits = parseNumberOrDefault(rawHits);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            hits = parseNumberOrDefault(effect.hits);\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [{\n                id: 'proc:13',\n                originalId: '13',\n                sources,\n                effectDelay,\n                value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }),\n                targetType: targetData.targetType,\n                targetArea: TargetArea.Random,\n            }];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '13',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const hits = +((context.damageFrames && context.damageFrames.hits) || 0);\n        const distribution = +((context.damageFrames && context.damageFrames['hit dmg% distribution (total)']) || 0);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n            'drainLow%': '0',\n            'drainHigh%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n            params['drainLow%'] = effect['hp drain% low'];\n            params['drainHigh%'] = effect['hp drain% high'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [Object.assign({ id: 'proc:14', originalId: '14', sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData)];\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '14',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let mitigation = 0;\n        let element;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            mitigation = parseNumberOrDefault(rawMitigation);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n            element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n            if (mitigationKey) {\n                mitigation = parseNumberOrDefault(effect[mitigationKey]);\n            }\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (mitigation !== 0) {\n            results.push(Object.assign({ id: `proc:16:${element}`, originalId: '16', sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId: '16',\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '16',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    resistances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:17:${ailment}`, originalId: '17', sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && turnDuration !== 0) {\n            results.push(createTurnDurationEntry({\n                originalId: '17',\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:17:${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId: '17',\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n        return results;\n    });\n    map.set('18', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'dmg% reduction',\n            effectTurnDurationKey: 'dmg% reduction turns (36)',\n            buffId: 'proc:18',\n            originalId: '18',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'increase bb gauge gradual',\n            effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'proc:19',\n            originalId: '19',\n        });\n    });\n}\n","import { UnitElement, UnitType } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { createSourcesFromContext, processExtraSkillConditions, getPassiveTargetData, createUnknownParamsValue, parseNumberOrDefault } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of passive IDs to functions.\n */\nexport function getPassiveEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n        X: BuffConditionElement.OmniParadigm,\n    };\n    const TYPE_MAPPING = {\n        1: UnitType.Lord,\n        2: UnitType.Anima,\n        3: UnitType.Breaker,\n        4: UnitType.Guardian,\n        5: UnitType.Oracle,\n        6: UnitType.Rex,\n    };\n    const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n    const AILMENTS_ORDER = ['poison', 'weak', 'sick', 'injury', 'curse', 'paralysis'];\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n        const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        return { conditionInfo, targetData, sources };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const createaUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n        sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n    const createUnknownParamsEntryFromExtraParams = (extraParams, startIndex, injectionContext) => {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    };\n    const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, effectKey, buffId, originalId, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let value = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect[effectKey]);\n        }\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:1:${stat}`, originalId: '1', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '1',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            elements: [],\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let element1, element2;\n            [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            [element1, element2].forEach((elementValue) => {\n                if (elementValue && elementValue !== '0') {\n                    stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            stats.elements = typedEffect['elements buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:${stat}`, originalId: '2', sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n        if (stats.elements.length > 0) {\n            stats.elements.forEach((element) => {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                    }\n                });\n            });\n        }\n        else {\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                }\n            });\n        }\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '2',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            unitType: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let unitType;\n            [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            if (unitType && unitType !== '0') {\n                stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.unitType = typedEffect['unit type buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetUnitType = stats.unitType || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:3:${stat}`, originalId: '3', sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '3',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:4:${ailment}`, originalId: '4', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '4',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let element;\n        let mitigation = '0';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n            if (element !== BuffConditionElement.Unknown) {\n                mitigation = typedEffect[`${element} resist%`];\n            }\n        }\n        const value = parseNumberOrDefault(mitigation);\n        if (value !== 0) {\n            results.push(Object.assign({ id: `passive:5:${element}`, originalId: '5', sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '5',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'dmg% mitigation',\n            buffId: 'passive:8',\n            originalId: '8',\n        });\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bc fill per turn',\n            buffId: 'passive:9',\n            originalId: '9',\n        });\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'hc effectiveness%',\n            buffId: 'passive:10',\n            originalId: '10',\n        });\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let requireHpAbove = false;\n        let hpThreshold = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireHpAboveFlag;\n            let rawHpThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawHpThreshold, rawRequireHpAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            requireHpAbove = rawRequireHpAboveFlag === '1';\n            hpThreshold = parseNumberOrDefault(rawHpThreshold);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            if ('hp above % buff requirement' in typedEffect) {\n                hpThreshold = parseNumberOrDefault(typedEffect['hp above % buff requirement']);\n                requireHpAbove = true;\n            }\n            else {\n                hpThreshold = parseNumberOrDefault(typedEffect['hp below % buff requirement']);\n                requireHpAbove = false;\n            }\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:11:${stat}`, originalId: '11', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData);\n                // disabling no-non-null-assertion rule because `conditions` property is defined above\n                /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                if (requireHpAbove) {\n                    entry.conditions.hpGreaterThanOrEqualTo = hpThreshold;\n                }\n                else {\n                    entry.conditions.hpLessThanOrEqualTo = hpThreshold;\n                }\n                /* eslint-enable @typescript-eslint/no-non-null-assertion */\n                results.push(entry);\n            }\n        });\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '11',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let requireHpAbove = false;\n        let hpThreshold = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireHpAboveFlag;\n            let rawHpThreshold;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawHpThreshold, rawRequireHpAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            requireHpAbove = rawRequireHpAboveFlag === '1';\n            hpThreshold = parseNumberOrDefault(rawHpThreshold);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n            if ('hp above % buff requirement' in typedEffect) {\n                hpThreshold = parseNumberOrDefault(typedEffect['hp above % buff requirement']);\n                requireHpAbove = true;\n            }\n            else {\n                hpThreshold = parseNumberOrDefault(typedEffect['hp below % buff requirement']);\n                requireHpAbove = false;\n            }\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                const entry = Object.assign({ id: `passive:12:${dropType}`, originalId: '12', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData);\n                // disabling no-non-null-assertion rule because `conditions` property is defined above\n                /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                if (requireHpAbove) {\n                    entry.conditions.hpGreaterThanOrEqualTo = hpThreshold;\n                }\n                else {\n                    entry.conditions.hpLessThanOrEqualTo = hpThreshold;\n                }\n                /* eslint-enable @typescript-eslint/no-non-null-assertion */\n                results.push(entry);\n            }\n        });\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '12',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let fillLow, fillHigh, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawFillLow, rawFillHigh, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(typedEffect['bc fill on enemy defeat low']);\n            fillHigh = parseNumberOrDefault(typedEffect['bc fill on enemy defeat high']);\n            chance = parseNumberOrDefault(typedEffect['bc fill on enemy defeat%']);\n        }\n        const results = [Object.assign({ id: 'passive:13', originalId: '13', sources, value: {\n                    fillLow,\n                    fillHigh,\n                    chance,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onEnemyDefeat: true }) }, targetData)];\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '13',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageReduction, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            damageReduction = parseNumberOrDefault(rawReduction);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n            chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n        }\n        const results = [Object.assign({ id: 'passive:14', originalId: '14', sources, value: {\n                    value: damageReduction,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData)];\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '14',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('15', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['hp% recover on enemy defeat low']);\n            healHigh = parseNumberOrDefault(typedEffect['hp% recover on enemy defeat high']);\n            // currently deathmax's datamine misses this value, but all known entries have 100% chance\n            chance = parseNumberOrDefault(typedEffect['hp% recover on enemy defeat chance%'], 100);\n        }\n        const results = [Object.assign({ id: 'passive:15', originalId: '15', sources, value: {\n                    healLow,\n                    healHigh,\n                    chance,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onEnemyDefeat: true }) }, targetData)];\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '15',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n            healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n        }\n        const results = [Object.assign({ id: 'passive:16', originalId: '16', sources, value: {\n                    healLow,\n                    healHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData)];\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '16',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let drainHealLow, drainHealHigh, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            drainHealLow = parseNumberOrDefault(rawHealLow);\n            drainHealHigh = parseNumberOrDefault(rawHealHigh);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            drainHealLow = parseNumberOrDefault(typedEffect['hp drain% low']);\n            drainHealHigh = parseNumberOrDefault(typedEffect['hp drain% high']);\n            chance = parseNumberOrDefault(typedEffect['hp drain chance%']);\n        }\n        const results = [Object.assign({ id: 'passive:17', originalId: '17', sources, value: {\n                    drainHealLow,\n                    drainHealHigh,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData)];\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '17',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:19:${dropType}`, originalId: '19', sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        if (unknownParams) {\n            results.push(createaUnknownParamsEntry(unknownParams, {\n                originalId: '19',\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n        return results;\n    });\n}\n","import { BuffId, UnitStat, BuffStackType, IconId, } from './buff-types';\nimport { TargetArea } from '../../datamine-types';\nexport const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 'UNKNOWN_PASSIVE_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n        name: 'Unknown Passive Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PASSIVE_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n        name: 'Unknown Passive Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'TURN_DURATION_MODIFICATION': {\n        id: BuffId.TURN_DURATION_MODIFICATION,\n        name: 'Passive Turn Duration Modification',\n        stat: UnitStat.turnDurationModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [\n            (buff && buff.value &&\n                buff.value.duration &&\n                buff.value.duration < 0) ?\n                IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n        ],\n    }, 'passive:1:hp': {\n        id: BuffId['passive:1:hp'],\n        name: 'Passive HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:1:atk': {\n        id: BuffId['passive:1:atk'],\n        name: 'Passive Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:1:def': {\n        id: BuffId['passive:1:def'],\n        name: 'Passive Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:1:rec': {\n        id: BuffId['passive:1:rec'],\n        name: 'Passive Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:1:crit': {\n        id: BuffId['passive:1:crit'],\n        name: 'Passive Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    } }, (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:2:hp': {\n            id: BuffId['passive:2:hp'],\n            name: 'Passive Elemental HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:2:atk': {\n            id: BuffId['passive:2:atk'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:2:def': {\n            id: BuffId['passive:2:def'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:2:rec': {\n            id: BuffId['passive:2:rec'],\n            name: 'Passive Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:2:crit': {\n            id: BuffId['passive:2:crit'],\n            name: 'Passive Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let unitType = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    unitType = buff.conditions.targetUnitType || '';\n                }\n            }\n            if (typeof unitType !== 'string' || !unitType) {\n                unitType = 'unknown';\n            }\n            let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n            if (!unitType || !(iconKey in IconId)) {\n                iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:3:hp': {\n            id: BuffId['passive:3:hp'],\n            name: 'Passive Type-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:3:atk': {\n            id: BuffId['passive:3:atk'],\n            name: 'Passive Type-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:3:def': {\n            id: BuffId['passive:3:def'],\n            name: 'Passive Type-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:3:rec': {\n            id: BuffId['passive:3:rec'],\n            name: 'Passive Type-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:3:crit': {\n            id: BuffId['passive:3:crit'],\n            name: 'Passive Type-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:4:poison': {\n        id: BuffId['passive:4:poison'],\n        name: 'Passive Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:4:weak': {\n        id: BuffId['passive:4:weak'],\n        name: 'Passive Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:4:sick': {\n        id: BuffId['passive:4:sick'],\n        name: 'Passive Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:4:injury': {\n        id: BuffId['passive:4:injury'],\n        name: 'Passive Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:4:curse': {\n        id: BuffId['passive:4:curse'],\n        name: 'Passive Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:4:paralysis': {\n        id: BuffId['passive:4:paralysis'],\n        name: 'Passive Paralysis Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:5:fire': {\n        id: BuffId['passive:5:fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:5:water': {\n        id: BuffId['passive:5:water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:5:earth': {\n        id: BuffId['passive:5:earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:5:thunder': {\n        id: BuffId['passive:5:thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:5:light': {\n        id: BuffId['passive:5:light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:5:dark': {\n        id: BuffId['passive:5:dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:5:unknown': {\n        id: BuffId['passive:5:unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:8': {\n        id: BuffId['passive:8'],\n        name: 'Passive Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:9': {\n        id: BuffId['passive:9'],\n        name: 'Passive Gradual BB Gauge Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:10': {\n        id: BuffId['passive:10'],\n        name: 'Passive HC Efficacy',\n        stat: UnitStat.hcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HCREC],\n    }, 'passive:11:atk': {\n        id: BuffId['passive:11:atk'],\n        name: 'Passive HP-Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n    }, 'passive:11:def': {\n        id: BuffId['passive:11:def'],\n        name: 'Passive HP-Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n    }, 'passive:11:rec': {\n        id: BuffId['passive:11:rec'],\n        name: 'Passive HP-Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n    }, 'passive:11:crit': {\n        id: BuffId['passive:11:crit'],\n        name: 'Passive HP-Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n    }, 'passive:12:bc': {\n        id: BuffId['passive:12:bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'passive:12:hc': {\n        id: BuffId['passive:12:hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'passive:12:item': {\n        id: BuffId['passive:12:item'],\n        name: 'Passive Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'passive:12:zel': {\n        id: BuffId['passive:12:zel'],\n        name: 'Passive Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n    }, 'passive:12:karma': {\n        id: BuffId['passive:12:karma'],\n        name: 'Passive Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n    }, 'passive:13': {\n        id: BuffId['passive:13'],\n        name: 'BB Gauge Fill on Enemy Defeat',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:14': {\n        id: BuffId['passive:14'],\n        name: 'Passive Damage Reduction (Chance)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:15': {\n        id: BuffId['passive:15'],\n        name: 'Heal on Enemy Defeat',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:16': {\n        id: BuffId['passive:16'],\n        name: 'Heal on Battle Win',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:17': {\n        id: BuffId['passive:17'],\n        name: 'HP Absorption',\n        stat: UnitStat.healOnAttack,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPABS],\n    }, 'passive:19:bc': {\n        id: BuffId['passive:19:bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'passive:19:hc': {\n        id: BuffId['passive:19:hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'passive:19:item': {\n        id: BuffId['passive:19:item'],\n        name: 'Passive Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'passive:19:zel': {\n        id: BuffId['passive:19:zel'],\n        name: 'Passive Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n    }, 'passive:19:karma': {\n        id: BuffId['passive:19:karma'],\n        name: 'Passive Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n    }, 'UNKNOWN_PROC_EFFECT_ID': {\n        id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n        name: 'Unknown Proc Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'UNKNOWN_PROC_BUFF_PARAMS': {\n        id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n        name: 'Unknown Proc Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'proc:1': {\n        id: BuffId['proc:1'],\n        name: 'Regular Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:2': {\n        id: BuffId['proc:2'],\n        name: 'Burst Heal',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:3': {\n        id: BuffId['proc:3'],\n        name: 'Active Gradual Heal',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:4:flat': {\n        id: BuffId['proc:4:flat'],\n        name: 'Burst BB Gauge Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:4:percent': {\n        id: BuffId['proc:4:percent'],\n        name: 'Burst BB Gauge Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:5:atk': {\n            id: BuffId['proc:5:atk'],\n            name: 'Active Regular/Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:5:def': {\n            id: BuffId['proc:5:def'],\n            name: 'Active Regular/Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:5:rec': {\n            id: BuffId['proc:5:rec'],\n            name: 'Active Regular/Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:5:crit': {\n            id: BuffId['proc:5:crit'],\n            name: 'Active Regular/Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'proc:6:bc': {\n        id: BuffId['proc:6:bc'],\n        name: 'Active Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'proc:6:hc': {\n        id: BuffId['proc:6:hc'],\n        name: 'Active Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'proc:6:item': {\n        id: BuffId['proc:6:item'],\n        name: 'Active Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'proc:7': {\n        id: BuffId['proc:7'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:8:flat': {\n        id: BuffId['proc:8:flat'],\n        name: 'Max HP Boost (Flat Amount)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    }, 'proc:8:percent': {\n        id: BuffId['proc:8:percent'],\n        name: 'Max HP Boost (Percentage)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'DOWN'; // default to down since these are reduction buffs\n            if (buff) {\n                if (buff.value && buff.value > 0) {\n                    polarity = 'UP';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:9:atk': {\n            id: BuffId['proc:9:atk'],\n            name: 'Active Regular/Elemental Attack Reduction',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:9:def': {\n            id: BuffId['proc:9:def'],\n            name: 'Active Regular/Elemental Defense Reduction',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:9:rec': {\n            id: BuffId['proc:9:rec'],\n            name: 'Active Regular/Elemental Recovery Reduction',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:9:unknown': {\n            id: BuffId['proc:9:unknown'],\n            name: 'Active Regular/Elemental Unknown Stat Reduction',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.UNKNOWN],\n        },\n    };\n})()), { 'proc:10:poison': {\n        id: BuffId['proc:10:poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:10:weak': {\n        id: BuffId['proc:10:weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:10:sick': {\n        id: BuffId['proc:10:sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:10:injury': {\n        id: BuffId['proc:10:injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:10:curse': {\n        id: BuffId['proc:10:curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:10:paralysis': {\n        id: BuffId['proc:10:paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:10:atk down': {\n        id: BuffId['proc:10:atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWNBLK],\n    }, 'proc:10:def down': {\n        id: BuffId['proc:10:def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWNBLK],\n    }, 'proc:10:rec down': {\n        id: BuffId['proc:10:rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWNBLK],\n    }, 'proc:10:unknown': {\n        id: BuffId['proc:10:unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:11:poison': {\n        id: BuffId['proc:11:poison'],\n        name: 'Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_POISON],\n    }, 'proc:11:weak': {\n        id: BuffId['proc:11:weak'],\n        name: 'Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_WEAK],\n    }, 'proc:11:sick': {\n        id: BuffId['proc:11:sick'],\n        name: 'Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_SICK],\n    }, 'proc:11:injury': {\n        id: BuffId['proc:11:injury'],\n        name: 'Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_INJURY],\n    }, 'proc:11:curse': {\n        id: BuffId['proc:11:curse'],\n        name: 'Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_CURSE],\n    }, 'proc:11:paralysis': {\n        id: BuffId['proc:11:paralysis'],\n        name: 'Paralysis Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_PARALYSIS],\n    }, 'proc:11:atk down': {\n        id: BuffId['proc:11:atk down'],\n        name: 'Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWN],\n    }, 'proc:11:def down': {\n        id: BuffId['proc:11:def down'],\n        name: 'Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWN],\n    }, 'proc:11:rec down': {\n        id: BuffId['proc:11:rec down'],\n        name: 'Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWN],\n    }, 'proc:11:unknown': {\n        id: BuffId['proc:11:unknown'],\n        name: 'Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.DEBUFF_AILMENT],\n    }, 'proc:12': {\n        id: BuffId['proc:12'],\n        name: 'Instant Revive (Guaranteed)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:13': {\n        id: BuffId['proc:13'],\n        name: 'Random Target Damage',\n        stackType: BuffStackType.Attack,\n        icons: () => [IconId.ATK_RT],\n    }, 'proc:14': {\n        id: BuffId['proc:14'],\n        name: 'Lifesteal Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n    }, 'proc:16:fire': {\n        id: BuffId['proc:16:fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:16:water': {\n        id: BuffId['proc:16:water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:16:earth': {\n        id: BuffId['proc:16:earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:16:thunder': {\n        id: BuffId['proc:16:thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:16:light': {\n        id: BuffId['proc:16:light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:16:dark': {\n        id: BuffId['proc:16:dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:16:all': {\n        id: BuffId['proc:16:all'],\n        name: 'Active Elemental Damage Reduction (All Elements)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:16:unknown': {\n        id: BuffId['proc:16:unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:17:poison': {\n        id: BuffId['proc:17:poison'],\n        name: 'Active Poison Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:17:weak': {\n        id: BuffId['proc:17:weak'],\n        name: 'Active Weak Resist',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:17:sick': {\n        id: BuffId['proc:17:sick'],\n        name: 'Active Sick Resist',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:17:injury': {\n        id: BuffId['proc:17:injury'],\n        name: 'Active Injury Resist',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:17:curse': {\n        id: BuffId['proc:17:curse'],\n        name: 'Active Curse Resist',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:17:paralysis': {\n        id: BuffId['proc:17:paralysis'],\n        name: 'Active Paralysis Resist',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:18': {\n        id: BuffId['proc:18'],\n        name: 'Active Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'proc:19': {\n        id: BuffId['proc:19'],\n        name: 'Active Gradual BB Gauge Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBREC],\n    } }));\n","import { BuffId } from './buff-types';\nimport { getProcEffectToBuffMapping } from './proc-effect-mapping';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PROC_ID } from '../constants';\nimport isProcEffect from '../isProcEffect';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given proc effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            originalId: id,\n            effectDelay: effect['effect delay time(ms)/frame'],\n            targetType: effect['target type'],\n            targetArea: effect['target area'],\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given proc effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Proc effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given proc effect object.\n */\nexport default function convertProcEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isProcEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId } from './buff-types';\nimport isPassiveEffect from '../isPassiveEffect';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PASSIVE_ID } from '../constants';\nimport { getPassiveEffectToBuffMapping } from './passive-effect-mapping';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to `IBuff` format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given passive effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given passive effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Passive effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertPassiveEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isPassiveEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BUFF_METADATA } from './buff-metadata';\n/**\n * @description Get the associated metadata entry for a given buff ID.\n * @param id Buff ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import { TargetArea, } from '../datamine-types';\n/**\n * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n */\nexport default function combineEffectsAndDamageFrames(effects, damageFrames) {\n    let combinedEntries = [];\n    if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n        combinedEntries = effects.map((effect, i) => {\n            const correspondingFrameEntry = damageFrames[i];\n            return {\n                delay: effect['effect delay time(ms)/frame'],\n                effect,\n                frames: correspondingFrameEntry,\n                id: `${effect['proc id'] || effect['unknown proc id']}`,\n                targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                targetType: effect['target type'],\n            };\n        });\n    }\n    return combinedEntries;\n}\n","import getEffectId from './getEffectId';\nimport isPassiveEffect from './isPassiveEffect';\nimport getNameForPassive from './getNameForPassive';\nimport isProcEffect from './isProcEffect';\nimport getNameForProc from './getNameForProc';\n/**\n * @description Get the name of a given object.\n * @param effect Object to get the name from.\n * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n * @returns Name of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectName(effect, metadata = {}) {\n    let resultName = '';\n    const effectId = getEffectId(effect);\n    if (isPassiveEffect(effect)) {\n        resultName = getNameForPassive(effectId, metadata && metadata.passive);\n    }\n    else if (isProcEffect(effect)) {\n        resultName = getNameForProc(effectId, metadata && metadata.proc);\n    }\n    return resultName;\n}\n","/**\n * @description Get the effects of a given extra skill.\n * @param skill Extra skill to get the effects of.\n * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForExtraSkill(skill) {\n    return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n}\n","/**\n * @description Get the effects of a given item.\n * @param item Item to get the effects of, if any are present,\n * @returns Effects of the given item if they exist, an empty array otherwise.\n */\nexport default function getEffectsForItem(item) {\n    let result = [];\n    if (item && item.effect) {\n        if (Array.isArray(item.effect)) {\n            result = item.effect;\n        }\n        else if (Array.isArray(item.effect.effect)) {\n            const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n            result = effect.map(e => {\n                // apply target data to each effect\n                const fullProcEffect = Object.assign({}, e);\n                fullProcEffect['target area'] = targetArea;\n                fullProcEffect['target type'] = targetType;\n                return fullProcEffect;\n            });\n        }\n    }\n    return result;\n}\n","/**\n * @description Generate a URL to display the image with the given item thumbnail filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents the thumbnail image for a given item.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getItemImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/item/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given leader skill.\n * @param skill Leader skill to get the effects of.\n * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForLeaderSkill(skill) {\n    return skill && Array.isArray(skill.effects) ? skill.effects : [];\n}\n","/**\n * @description Generate the file names for each of the image type for a given unit ID.\n * @param id Unit ID to use to generate the file names.\n * @param suffix Optional parameter that's useful for things like alternate art.\n * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n */\nexport default function getUnitImageFileNames(id, suffix = '') {\n    const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n    return {\n        spritesheet: `unit_anime_${fileNameSuffix}`,\n        battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n        guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n        fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n    };\n}\n","/**\n * @description Generate a URL to display the image with the given unit filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents an image for a given unit.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getUnitImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n}\n","/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n","/**\n * @description Extract the ID of a string in the format of `number@actualId`. If there\n * is no value after the @ character or if no @ character is present, the original ID is returned.\n * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n * @param id Original SP Enhancement Entry ID.\n * @returns The ID of a string in the format of `number@actualId`, or the original input if\n * there is no @ character or no value after the @ character.\n */\nexport default function getSpEntryId(id) {\n    return (typeof id === 'string' && id.split('@')[1]) || id;\n}\n","/**\n * @description Get the effects of a given SP Enhancement Entry.\n * @param entry SP Enhancement Entry to get the effects of.\n * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n */\nexport default function getEffectsForSpEnhancement(entry) {\n    const result = [];\n    if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n        const effectWrappers = entry.skill.effects;\n        effectWrappers.forEach(effectWrapper => {\n            Object.keys(effectWrapper).forEach(spType => {\n                const originalEffect = effectWrapper[spType];\n                const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                result.push(unwrappedEffect);\n            });\n        });\n    }\n    return result;\n}\n","import { SpCategoryName } from '../datamine-types';\n/**\n * @description Get the associated category name with a given category ID.\n * @param categoryId Category ID to get the name of.\n * @returns Name of the given category ID or the string 'Unknown'.\n */\nexport default function getSpCategoryName(categoryId) {\n    let result;\n    const numericalCategoryId = +categoryId;\n    switch (numericalCategoryId) {\n        case 1:\n            result = SpCategoryName['Parameter Boost'];\n            break;\n        case 2:\n            result = SpCategoryName.Spark;\n            break;\n        case 3:\n            result = SpCategoryName['Critical Hits'];\n            break;\n        case 4:\n            result = SpCategoryName['Attack Boost'];\n            break;\n        case 5:\n            result = SpCategoryName['BB Gauge'];\n            break;\n        case 6:\n            result = SpCategoryName['HP Recovery'];\n            break;\n        case 7:\n            result = SpCategoryName.Drops;\n            break;\n        case 8:\n            result = SpCategoryName['Ailment Resistance'];\n            break;\n        case 9:\n            result = SpCategoryName['Ailment Infliction'];\n            break;\n        case 10:\n            result = SpCategoryName['Damage Reduction'];\n            break;\n        case 11:\n            result = SpCategoryName.Special;\n            break;\n        default:\n            result = SpCategoryName.Unknown;\n            break;\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding character code for a given index.\n * It expects an index between 0 and 61 inclusive; will return an empty string if\n * the given value is outside of the range.\n * @param index Index of an SP entry in a given skills array.\n * @returns Corresponding single alphanumeric character to the given index\n * or an empty string if the index is invalid.\n */\nexport default function spIndexToCode(index) {\n    let result = '';\n    let correspondingCharacterCode = -1;\n    if (Number.isInteger(index)) {\n        if (index >= 0 && index <= 25) { // A-Z\n            correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (index >= 26 && index <= 51) { // a-z\n            correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n        }\n        else if (index >= 52 && index <= 61) { // 0-9\n            correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n        }\n    }\n    if (correspondingCharacterCode !== -1) {\n        result = String.fromCharCode(correspondingCharacterCode);\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding index for a given character code.\n * It expects an alphanumeric character and will return -1 otherwise.\n * @param code Character code an SP entry in a given skills array.\n * @returns Corresponding index to the given character or -1 if the\n * character is invalid.\n */\nexport default function spCodeToIndex(code) {\n    let result = -1;\n    let characterCodeOffset = -1;\n    if (!!code && typeof code === 'string' && code.length === 1) {\n        if (code >= 'A' && code <= 'Z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (code >= 'a' && code <= 'z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n        }\n        else if (code >= '0' && code <= '9') {\n            characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n        }\n    }\n    if (characterCodeOffset !== -1) {\n        result = code.charCodeAt(0) - characterCodeOffset;\n    }\n    return result;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n * @param id SP Enhancement entry ID.\n * @param entries Collection of SP Enhancement entries to search in.\n * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n */\nexport default function getSpEntryWithId(id, entries) {\n    const spId = getSpEntryId(id);\n    return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n * @param entry SP Entry to get dependencies for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n */\nexport default function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependencies = [];\n    if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n        const dependencyId = getSpEntryId(entry.dependency);\n        const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n        if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n            addedEntries.add(dependencyEntry);\n            const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n            dependencies = [dependencyEntry].concat(subDependencies);\n        }\n    }\n    return dependencies;\n}\n","/**\n * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n * @param entry SP Entry to get dependents for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n */\nexport default function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependents = [];\n    if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n        const entryId = entry.id;\n        dependents = allEntries\n            .filter(s => {\n            return s.dependency &&\n                s.dependency.includes(entryId) &&\n                !addedEntries.has(s);\n        });\n        dependents.forEach(dependent => {\n            addedEntries.add(dependent);\n            const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n            dependents = dependents.concat(subDependents);\n        });\n    }\n    return dependents;\n}\n","/* NOTE: this file is automatically generated; do not edit this file */\nexport default '0.7.0';\n"]}