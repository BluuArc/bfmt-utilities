{"version":3,"sources":["index.browser.min.js","index.browser.js","bursts/getLevelEntryForBurst.js","buffs/getEffectId.js","buffs/constants.js","buffs/effect-metadata.js","buffs/getMetadataForProc.js","buffs/isAttackingProcId.js","datamine-types.js","bursts/getEffectsForBurst.js","bursts/getExtraAttackDamageFramesEntry.js","buffs/getMetadataForPassive.js","buffs/getNameForProc.js","buffs/getNameForPassive.js","buffs/isProcEffect.js","buffs/isPassiveEffect.js","buffs/parsers/buff-types.js","buffs/parsers/_helpers.js","buffs/parsers/proc-effect-mapping.js","buffs/parsers/conditional-effect-mapping.js","buffs/parsers/passive-effect-mapping.js","buffs/parsers/convertProcEffectToBuffs.js","buffs/parsers/convertConditionalEffectToBuffs.js","buffs/parsers/buff-metadata.js","buffs/parsers/convertPassiveEffectToBuffs.js","buffs/parsers/getMetadataForBuff.js","buffs/combineEffectsAndDamageFrames.js","buffs/getEffectName.js","extra-skills/getEffectsForExtraSkill.js","items/getEffectsForItem.js","items/getItemImageUrl.js","leader-skills/getEffectsForLeaderSkill.js","units/getUnitImageFileNames.js","units/getUnitImageUrl.js","sp-enhancements/_constants.js","sp-enhancements/getSpEntryId.js","sp-enhancements/getEffectsForSpEnhancement.js","sp-enhancements/getSpCategoryName.js","sp-enhancements/spIndexToCode.js","sp-enhancements/spCodeToIndex.js","sp-enhancements/getSpEntryWithId.js","sp-enhancements/getAllDependenciesForSpEntry.js","sp-enhancements/getAllEntriesThatDependOnSpEntry.js","version.js"],"names":["bfmtUtilities","exports","getLevelEntryForBurst","burst","level","burstEffectsByLevel","Array","isArray","levels","levelIndex","isNaN","length","getEffectId","effect","resultId","KNOWN_PROC_ID","KNOWN_PASSIVE_ID","KNOWN_CONDITIONAL_ID","ProcBuffType","constants","Object","freeze","__proto__","PASSIVE_METADATA","1","ID","Name","2","3","4","5","6","8","9","10","11","12","13","14","15","16","17","19","20","21","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","52","53","55","58","59","61","62","63","64","65","66","69","70","71","72","73","74","75","77","78","79","80","81","82","84","85","86","88","89","90","91","92","93","96","97","99","100","101","102","103","104","105","106","107","109","110","111","112","113","114","127","128","143","10008","11004","11005","11006","11009","66,1","PROC_METADATA","0","Type","7","18","22","51","54","56","57","60","67","68","76","83","87","94","95","119","123","126","130","131","132","901","902","903","905","906","907","908","10000","10001","10002","10003","10004","10005","10006","10007","10009","10012","10015","10016","10017","10018","10019","10020","10021","10022","10023","10025","10026","11000","11001","11002","11003","70001","70002","2-5","getMetadataForProc","id","metadata","hasOwnProperty","call","isAttackingProcId","metadataEntry","Attack","Ailment","ArenaCondition","MoveType","TargetArea","TargetAreaShorthand","TargetType","SpPassiveType","SphereTypeName","SphereTypeId","SpCategoryName","SpCategoryId","UnitAnimationKey","UnitElement","UnitGender","UnitGettingType","UnitKind","UnitType","ItemType","MimicUnitIds","index","getEffectsForBurst","levelEntry","effects","getExtraAttackDamageFramesEntry","damageFrames","effectDelay","unifiedFrames","filter","frame","procId","BurstHeal","reduce","acc","frameEntry","keepFirstFrame","numFrames","damageDistribution","frameTimes","frameIndex","push","damage","time","resultDamageFramesEntry","effect delay time(ms)/frame","frame times","hit dmg% distribution","hit dmg% distribution (total)","hits","sort","a","b","forEach","getMetadataForPassive","getNameForProc","getNameForPassive","isProcEffect","isPassiveEffect","MimicMonsterGroupMapping","1000","Mimic","1100","BatMimic","1101","1200","DragonMimic","1300","MetalMimic","BuffStackType","BuffSource","BuffConditionElement","UnitStat","IconId","BuffId","datamineTypes","createSourcesFromContext","context","resultArray","previousSources","slice","unshift","source","sourceId","createSourceEntryFromContext","processExtraSkillConditions","conditions","aggregate","units","Set","items","sphereTypes","unknowns","condition","add","item","unit","type_id","condition_id","entries","entry","size","from","getPassiveTargetData","isPartyEffect","LeaderSkill","sp_type","EnhancePassive","Party","targetType","Self","targetArea","Aoe","Single","getProcTargetData","parseNumberOrDefault","value","defaultValue","createUnknownParamsValue","params","startIndex","hasValue","result","buffSourceIsBurstType","BraveBurst","SuperBraveBurst","UltimateBraveBurst","BondedBraveBurst","BondedSuperBraveBurst","DualBraveBurst","includes","createUnknownParamsEntryFromExtraParams","extraParams","injectionContext","unknownParams","createNoParamsEntry","originalId","sources","NO_PARAMS_SPECIFIED","mapping","getProcEffectToBuffMapping","reload","Map","map","UNKNOWN_PROC_PARAM_EFFECT_KEY","ELEMENT_MAPPING","All","Fire","Water","Earth","Thunder","Light","Dark","NON_ZERO_ELEMENT_MAPPING","AILMENT_MAPPING","Poison","Weak","Sick","Injury","Curse","Paralysis","AttackReduction","DefenseReduction","RecoveryReduction","retrieveCommonInfoForEffects","targetData","splitEffectParams","split","splitEffectWithUnknownProcParamsProperty","rawParams","createUnknownParamsEntry","assign","UNKNOWN_PROC_BUFF_PARAMS","createTurnDurationEntry","buffs","duration","TURN_DURATION_MODIFICATION","handlePostParse","results","isTurnDurationBuff","turnDuration","getAttackInformationFromContext","distribution","parseProcWithSingleNumericalParameterAndTurnDuration","effectValueKey","effectTurnDurationKey","parseParamValue","rawValue","buffId","rawTurnDuration","parseProcWithNumericalValueRangeAndChanceAndTurnDuration","effectKeyLow","effectKeyHigh","effectKeyChance","buffKeyLow","buffKeyHigh","generateConditions","valueLow","valueHigh","chance","rawValueLow","rawValueHigh","rawChance","[object Object]","set","atk%","flatAtk","crit%","bc%","hc%","dmg%","filteredValue","key","keys","healLow","healHigh","healerRec%","recX","recY","targetRec%","rec","flatFill","percentFill","rawFlatFill","rawPercentFill","element","atk","def","crit","coreStatProperties","rawElement","Unknown","effectElement","statType","effectKey","find","k","startsWith","concat","prop","hasAnyStats","some","statKey","buffEntry","targetElements","bc","hc","dropRateProperties","hasAnyRates","recoveredHpPercent","rawRecoveredHp","flatHpBoost","percentHpBoost","rawFlatBoost","rawPercentBoost","STAT_TYPE_MAPPING","statReductionEntries","statType1","value1","procChance1","statType2","value2","procChance2","rawStatType","rawProcChance","stat","buffKey","hasAnyValues","curedAilments","splitParams","knownParams","p","param","values","ailment","inflictedAilments","numParams","ailmentValue","ailmentType","reviveToHp","rawReviveToHp","rawHits","Random","drainLow%","drainHigh%","mitigation","rawMitigation","mitigationKey","e","AILMENTS_ORDER","resistances","poison","weak","sick","injury","curse","paralysis","rawDuration","ailmentKeysInEffect","correspondingKey","whenAttacked","coreStatPropertyMapping","effectToCoreStatMapping","attack","defense","recovery","hp","stats","convertedStat","rawConvertedStat","hitIncreasePerHit","extraHitDamage","hpDamageLow%","hpDamageHigh%","hpDamageChance%","attackElements","element1","element2","element3","elements","validElements","inputElement","sanitizedElement","flatDrainLow","flatDrainHigh","percentDrainLow","percentDrainHigh","rawFlatLow","rawFlatHigh","rawPercentLow","rawPercentHigh","drainLow","drainHigh","summonGroup","summonId","rawPositionX","rawPositionY","positionX","positionY","effectAilmentsCured","unknownAilmentCount","i","rawElementsMitigated","rawModLow","rawModHigh","rawFlatAtk","atkLow%","atkHigh%","overdriveFill","rawOverdriveFill","damageParams","affectsElement","unitIndex","rawAffectsElement","rawUnitIndex","filteredDamageParams","bb","sbb","ubb","rawBb","rawSbb","rawUbb","type","rawHpLow","rawHpHigh","hpLow","hpHigh","baseAtk%","maxAddedAtk%","proportionalMode","rawMaxAttackValue","rawProportionalMode","rawBasePercentHpLow","rawBasePercentHpHigh","rawCurrentPercentHpLow","rawCurrentPercentHpHigh","rawFixedDamage","rawIsLethal","basePercentHpLow","basePercentHpHigh","currentPercentHpLow","currentPercentHpHigh","fixedDamage","isLethal","createAttackOfType","valueProperties","rawDamageLow","rawDamageHigh","reflectedDamageLow","reflectedDamageHigh","reflectedDamageLow%","reflectedDamageHigh%","inflictedReductions","debuffTurnDuration","reductionValue","reductionValueKey","chanceKey","inflictionChances","damageBoost","rawRecoverHp","recoveredHp%","bcBaseResist","bcBuffResist","hcBaseResist","hcBuffResist","rawBcBaseResist","rawBcBuffResist","rawHcBaseResist","rawHcBuffResist","damageIncrease","rawDamageIncrease","sparkDamage%","damageAbsorption","rawHp","rawDefense","rawDamageAbsorption","damageAbsorption%","addedAtkPerUse%","maxIncreases","recoveredHp","reviveToHp%","onGuard","addedAttackPerUnitWithMatchingElement%","elementToMatch","maxExtraActions","rawMaxExtraActions","rawExpBoost","rawDurationInMinutes","expBoost","durationInMinutes","expBoost%","rawPercentHp","percentHp","startingHp%","setMapping","convertProcEffectToBuffs","TypeError","conversionFunction","reloadMapping","get","UNKNOWN_PROC_EFFECT_ID","defaultConversionFunction","getConditionalEffectToBuffMapping","UNKNOWN_CONDITIONAL_BUFF_PARAMS","getDefaultTargetData","parseConditionalWithSingleNumericalParameter","returnBuffWithValueOfZero","parseConditionalWithOnlyBaseAndBuffResistanceParameters","baseResistanceBuffId","buffResistanceBuffId","rawBaseResist","rawBuffResist","baseResist","buffResist","rawHealLow","rawHealHigh","rawAddedRec","addedRec","addedRec%","rawReductionValue","rawDebuffTurns","rawHpRecover","hpRecover","hpRecover%","parsedElement","rawDebuffTurnDuration","convertConditionalEffectToBuffs","UNKNOWN_CONDITIONAL_EFFECT_ID","getPassiveEffectToBuffMapping","UNKNOWN_PASSIVE_PARAM_EFFECT_KEY","X","OmniParadigm","TYPE_MAPPING","Lord","Anima","Breaker","Guardian","Oracle","Rex","TARGET_TYPE_MAPPING","Enemy","TARGET_AREA_MAPPING","STATS_ORDER","DROP_TYPES_ORDER","conditionInfo","convertConditionalEffectToBuffsWithInjectionContext","convertProcEffectToBuffsWithInjectionContext","splitEffectWithUnknownPassiveParamsProperty","UNKNOWN_PASSIVE_BUFF_PARAMS","ThresholdType","parseThresholdValuesFromParamsProperty","rawThreshold","rawRequireAboveFlag","thresholdType","threshold","requireAbove","parseThresholdValuesFromEffect","suffix","DamageTaken","DamageDealt","BcReceived","getThresholdConditions","Hp","hpGreaterThanOrEqualTo","hpLessThanOrEqualTo","Bb","bbGaugeGreaterThanOrEqualTo","bbGaugeLessThanOrEqualTo","damageTakenExceeds","damageDealtExceeds","bcReceivedExceeds","parsePassiveWithSingleNumericalParameter","typedEffect","parsePassiveWithNumericalValueRangeAndChance","defaultEffectChance","generateBaseConditions","rawLowValue","rawHighValue","elementValue","createBaseStatObject","unitType","targetUnitType","elem","thresholdInfo","thresholdConditions","dropRates","zel","karma","dropType","onEnemyDefeat","damageReduction","rawReduction","onBattleWin","fillLow","fillHigh","rawFillLow","rawFillHigh","sparkDamageBoost","rawSparkDamageBoost","onNormalAttack","additionalActions","damageModifier","rawAdditionalActions","rawDamageModifier","minimumElements","minimumUniqueElements","GENDER_MAPPING","Other","Male","Female","gender","rawGender","targetGender","availableStats","baseValue","addedValue","ResistType","rawBaseCritDamageResist","rawBuffCritDamageResist","rawBaseElementDamageResist","rawBuffElementDamageResist","rawBaseCritChanceResist","rawBuffCritChanceResist","resistType","CriticalDamage","base","buff","ElementDamage","CriticalHitRate","baseKey","triggeredBuffs","maxTriggerCount","onCriticalHit","triggerOnBb","triggerOnSbb","triggerOnUbb","rawProcIds","rawTargetTypes","rawTargetAreas","rawStartFrames","rawTriggerOnBb","rawTriggerOnSbb","rawTriggerOnUbb","allProcIds","allProcParams","allTargetTypes","allTargetAreas","allStartFrames","FRAME_IN_MS","replace","startFrame","procEffect","proc id","toFixed","target area","target type","procBuffs","triggeredEffects","addBuffOfBurstType","burstType","maxCount","chanceLow","chanceHigh","rawMaxCount","rawChanceLow","rawChanceHigh","rawHpAtTurnStart","rawBcAtTurnStart","hpAtTurnStart","bcAtTurnStart","atk down","def down","rec down","requiredAilments","attackBoost","rawRequiredAilments","rawBoost","targetHasAnyOfGivenAilments","BUFF_METADATA","name","turnDurationModification","stackType","Passive","icons","TURN_DURATION_DOWN","TURN_DURATION_UP","UNKNOWN","UNKNOWN_PASSIVE_EFFECT_ID","passive:1:hp","BUFF_HPDOWN","BUFF_HPUP","passive:1:atk","BUFF_ATKDOWN","BUFF_ATKUP","passive:1:def","BUFF_DEFDOWN","BUFF_DEFUP","passive:1:rec","BUFF_RECDOWN","BUFF_RECUP","passive:1:crit","BUFF_CRTRATEDOWN","BUFF_CRTRATEUP","createIconGetterForStat","polarity","iconKey","toUpperCase","passive:2:elemental-hp","passive:2:elemental-atk","passive:2:elemental-def","passive:2:elemental-rec","passive:2:elemental-crit","passive:3:type based-hp","passive:3:type based-atk","passive:3:type based-def","passive:3:type based-rec","passive:3:type based-crit","passive:4:resist-poison","poisonResist","BUFF_POISONBLK","passive:4:resist-weak","weakResist","BUFF_WEAKBLK","passive:4:resist-sick","sickResist","BUFF_SICKBLK","passive:4:resist-injury","injuryResist","BUFF_INJURYBLK","passive:4:resist-curse","curseResist","BUFF_CURSEBLK","passive:4:resist-paralysis","paralysisResist","BUFF_PARALYSISBLK","passive:5:mitigate-fire","fireMitigation","BUFF_FIREDMGDOWN","passive:5:mitigate-water","waterMitigation","BUFF_WATERDMGDOWN","passive:5:mitigate-earth","earthMitigation","BUFF_EARTHDMGDOWN","passive:5:mitigate-thunder","thunderMitigation","BUFF_THUNDERDMGDOWN","passive:5:mitigate-light","lightMitigation","BUFF_LIGHTDMGDOWN","passive:5:mitigate-dark","darkMitigation","BUFF_DARKDMGDOWN","passive:5:mitigate-unknown","BUFF_ELEMENTDMGDOWN","passive:8:mitigation","BUFF_DAMAGECUT","passive:9:gradual bc fill","bbGauge","BUFF_BBREC","passive:10:hc efficacy","hcEfficacy","BUFF_HCREC","passive:11:hp conditional-atk","BUFF_HPTHRESHATKDOWN","BUFF_HPTHRESHATKUP","passive:11:hp conditional-def","BUFF_HPTHRESHDEFDOWN","BUFF_HPTHRESHDEFUP","passive:11:hp conditional-rec","BUFF_HPTHRESHRECDOWN","BUFF_HPTHRESHRECUP","passive:11:hp conditional-crit","BUFF_HPTHRESHCRTRATEDOWN","BUFF_HPTHRESHCRTRATEUP","passive:12:hp conditional drop boost-bc","bcDropRate","BUFF_HPTHRESHBCDOWN","BUFF_HPTHRESHBCDROP","passive:12:hp conditional drop boost-hc","hcDropRate","BUFF_HPTHRESHHCDOWN","BUFF_HPTHRESHHCDROP","passive:12:hp conditional drop boost-item","itemDropRate","BUFF_HPTHRESHITEMDOWN","BUFF_HPTHRESHITEMDROP","passive:12:hp conditional drop boost-zel","zelDropRate","BUFF_HPTHRESHZELDOWN","BUFF_HPTHRESHZELDROP","passive:12:hp conditional drop boost-karma","karmaDropRate","BUFF_HPTHRESHKARMADOWN","BUFF_HPTHRESHKARMADROP","passive:13:bc fill on enemy defeat","passive:14:chance mitigation","passive:15:heal on enemy defeat","hpRecovery","BUFF_HPREC","passive:16:heal on win","passive:17:hp absorb","BUFF_HPABS","passive:19:drop boost-bc","BUFF_BCDOWN","BUFF_BCDROP","passive:19:drop boost-hc","BUFF_HCDOWN","BUFF_HCDROP","passive:19:drop boost-item","BUFF_ITEMDOWN","BUFF_ITEMDROP","passive:19:drop boost-zel","BUFF_ZELDOWN","BUFF_ZELDROP","passive:19:drop boost-karma","BUFF_KARMADOWN","BUFF_KARMADROP","passive:20:chance inflict-poison","poisonInflict","BUFF_ADDPOISON","passive:20:chance inflict-weak","weakInflict","BUFF_ADDWEAK","passive:20:chance inflict-sick","sickInflict","BUFF_ADDSICK","passive:20:chance inflict-injury","injuryInflict","BUFF_ADDINJURY","passive:20:chance inflict-curse","curseInflict","BUFF_ADDCURSE","passive:20:chance inflict-paralysis","paralysisInflict","BUFF_ADDPARA","passive:20:chance inflict-atk down","atkDownInflict","BUFF_ADDATKDOWN","passive:20:chance inflict-def down","defDownInflict","BUFF_ADDDEFDOWN","passive:20:chance inflict-rec down","recDownInflict","BUFF_ADDRECDOWN","passive:20:chance inflict-unknown","BUFF_ADDAILMENT","passive:21:first turn-atk","ConditionalTimed","passive:21:first turn-def","passive:21:first turn-rec","passive:21:first turn-crit","passive:23:bc fill on win","passive:24:heal on hit","BUFF_BEENATK_HPREC","passive:25:bc fill on hit","BUFF_DAMAGEBB","passive:26:chance damage reflect","damageReflect","BUFF_COUNTERDAMAGE","passive:27:target chance change","targetingModification","BUFF_REPENEATT","BUFF_GETENEATT","passive:28:hp conditional target chance change","BUFF_HPTHRESHREPENEATT","BUFF_HPTHRESHGETENEATT","passive:29:chance def ignore","defenseIgnore","BUFF_IGNOREDEF","passive:30:bb gauge conditional-atk","BUFF_BBGAUGETHRESHATKDOWN","BUFF_BBGAUGETHRESHATKUP","passive:30:bb gauge conditional-def","BUFF_BBGAUGETHRESHDEFDOWN","BUFF_BBGAUGETHRESHDEFUP","passive:30:bb gauge conditional-rec","BUFF_BBGAUGETHRESHRECDOWN","BUFF_BBGAUGETHRESHRECUP","passive:30:bb gauge conditional-crit","BUFF_BBGAUGETHRESHCRTRATEDOWN","BUFF_BBGAUGETHRESHCRTRATEUP","passive:31:spark-damage","sparkDamage","BUFF_SPARKDOWN","BUFF_SPARKUP","passive:31:spark-bc","BUFF_SPARKBC","passive:31:spark-hc","BUFF_SPARKHC","passive:31:spark-item","BUFF_SPARKITEM","passive:31:spark-zel","BUFF_SPARKZEL","passive:31:spark-karma","BUFF_SPARKKARMA","passive:32:bc efficacy","bcEfficacy","BUFF_BBFILL","passive:33:gradual heal","passive:34:critical damage","criticalDamage","BUFF_CRTUP","passive:35:bc fill on normal attack","passive:36:extra action","extraAction","BUFF_DBLSTRIKE","passive:37:hit count boost","hitCountModification","BUFF_HITUP","passive:40:converted-atk","BUFF_CONVERTATKDOWN","BUFF_CONVERTATKUP","passive:40:converted-def","BUFF_CONVERTDEFDOWN","BUFF_CONVERTDEFUP","passive:40:converted-rec","BUFF_CONVERTRECDOWN","BUFF_CONVERTRECUP","passive:41:unique element count-hp","BUFF_UNIQUEELEMENTHPDOWN","BUFF_UNIQUEELEMENTHPUP","passive:41:unique element count-atk","BUFF_UNIQUEELEMENTATKDOWN","BUFF_UNIQUEELEMENTATKUP","passive:41:unique element count-def","BUFF_UNIQUEELEMENTDEFDOWN","BUFF_UNIQUEELEMENTDEFUP","passive:41:unique element count-rec","BUFF_UNIQUEELEMENTRECDOWN","BUFF_UNIQUEELEMENTRECUP","passive:41:unique element count-crit","BUFF_UNIQUEELEMENTCRTRATEDOWN","BUFF_UNIQUEELEMENTCRTRATEUP","passive:42:gender-hp","passive:42:gender-atk","passive:42:gender-def","passive:42:gender-rec","passive:42:gender-crit","passive:43:chance damage to one","reduceDamageToOne","BUFF_DAMAGECUTTOONE","passive:44:flat-hp","passive:44:flat-atk","passive:44:flat-def","passive:44:flat-rec","passive:44:flat-crit","passive:45:critical damage reduction-base","criticalDamageMitigation","BUFF_CRTDOWN","passive:45:critical damage reduction-buff","passive:46:hp scaled-atk","BUFF_HPSCALEDATKDOWN","BUFF_HPSCALEDATKUP","passive:46:hp scaled-def","BUFF_HPSCALEDDEFDOWN","BUFF_HPSCALEDDEFUP","passive:46:hp scaled-rec","BUFF_HPSCALEDRECDOWN","BUFF_HPSCALEDRECUP","passive:47:bc fill on spark","BUFF_SPARKBBUP","passive:48:bc cost reduction","bcCostReduction","BUFF_BBCOST_REDUCTION","passive:49:bb gauge consumption reduction","bbGaugeConsumptionReduction","passive:50:elemental weakness damage-fire","fireElementalDamage","BUFF_FIREDMGUP","passive:50:elemental weakness damage-water","waterElementalDamage","BUFF_WATERDMGUP","passive:50:elemental weakness damage-earth","earthElementalDamage","BUFF_EARTHDMGUP","passive:50:elemental weakness damage-thunder","thunderElementalDamage","BUFF_THUNDERDMGUP","passive:50:elemental weakness damage-light","lightElementalDamage","BUFF_LIGHTDMGUP","passive:50:elemental weakness damage-dark","darkElementalDamage","BUFF_DARKDMGUP","passive:50:elemental weakness damage-unknown","BUFF_ELEMENTDMGUP","passive:53:critical damage-base","passive:53:critical damage-buff","passive:53:element damage-base","elementalWeaknessDamageMitigation","BUFF_ELEMENTDOWN","passive:53:element damage-buff","passive:53:critical rate-base","passive:53:critical rate-buff","passive:55:hp conditional","CONDITIONALBUFF_HPTHRESH","passive:58:guard mitigation","BUFF_GUARDCUT","passive:59:bc fill when attacked on guard-percent","BUFF_GUARDBBUP","passive:59:bc fill when attacked on guard-flat","passive:61:bc fill on guard-percent","passive:61:bc fill on guard-flat","passive:62:mitigate-fire","passive:62:mitigate-water","passive:62:mitigate-earth","passive:62:mitigate-thunder","passive:62:mitigate-light","passive:62:mitigate-dark","passive:62:mitigate-unknown","passive:63:first turn mitigate-fire","passive:63:first turn mitigate-water","passive:63:first turn mitigate-earth","passive:63:first turn mitigate-thunder","passive:63:first turn mitigate-light","passive:63:first turn mitigate-dark","passive:63:first turn mitigate-unknown","passive:64:attack boost-bb","bbAtk","BUFF_BBATKUP","passive:64:attack boost-sbb","BUFF_SBBATKUP","passive:64:attack boost-ubb","BUFF_UBBATKUP","passive:65:bc fill on crit","passive:66:add effect to skill-bb","BUFF_ADDTO_BB","passive:66:add effect to skill-sbb","BUFF_ADDTO_SBB","passive:66:add effect to skill-ubb","BUFF_ADDTO_UBB","passive:69:chance ko resistance","koResistance","BUFF_KOBLOCK","passive:70:od fill rate","odGauge","BUFF_ODFILLBOOST","passive:71:inflict on hit-poison","poisonCounter","BUFF_POISONCOUNTER","passive:71:inflict on hit-weak","weakCounter","BUFF_WEAKCOUNTER","passive:71:inflict on hit-sick","sickCounter","BUFF_SICKCOUNTER","passive:71:inflict on hit-injury","injuryCounter","BUFF_INJCONTER","passive:71:inflict on hit-curse","curseCounter","BUFF_CURSECOUNTER","passive:71:inflict on hit-paralysis","paralysisCounter","BUFF_PARALYCOUNTER","passive:72:effect at turn start-hp","effectOccurrenceShift","Singleton","BUFF_HPTURNSTART","passive:72:effect at turn start-bc","BUFF_BCTURNSTART","passive:73:resist-poison","passive:73:resist-weak","passive:73:resist-sick","passive:73:resist-injury","passive:73:resist-curse","passive:73:resist-paralysis","passive:73:resist-atk down","atkDownResist","BUFF_RESISTATKDOWN","passive:73:resist-def down","defDownResist","BUFF_RESISTDEFDOWN","passive:73:resist-rec down","recDownResist","BUFF_RESISTRECDOWN","passive:74:ailment attack boost","ailmentAttackBoost","BUFF_AILDMGUP","passive:75:spark vulnerability","BUFF_SPARKDMGUP","passive:77:spark damage reduction-base","sparkDamageMitigation","BUFF_SPARKDMGDOWN","passive:77:spark damage reduction-buff","passive:78:damage taken conditional","CONDITIONALBUFF_DAMAGETAKENTHRESH","passive:79:bc fill after damage taken conditional-flat","passive:79:bc fill after damage taken conditional-percent","passive:80:damage dealt conditional","CONDITIONALBUFF_DAMAGEDEALTTHRESH","passive:81:bc fill after damage dealt conditional-flat","passive:81:bc fill after damage dealt conditional-percent","passive:82:bc received conditional","CONDITIONALBUFF_BCRECEIVEDTHRESH","proc:1:attack","ATK_ST","ATK_AOE","proc:2:burst heal","Burst","proc:3:gradual heal","Active","proc:4:bc fill-flat","proc:4:bc fill-percent","hasElement","proc:5:regular or elemental-atk","proc:5:regular or elemental-def","proc:5:regular or elemental-rec","proc:5:regular or elemental-crit","proc:6:drop boost-bc","proc:6:drop boost-hc","proc:6:drop boost-item","proc:7:guaranteed ko resistance","BUFF_KOBLK","proc:8:max hp boost-flat","proc:8:max hp boost-percent","proc:9:regular or elemental reduction-atk","proc:9:regular or elemental reduction-def","proc:9:regular or elemental reduction-rec","proc:9:regular or elemental reduction-unknown","proc:10:cleanse-poison","proc:10:cleanse-weak","proc:10:cleanse-sick","proc:10:cleanse-injury","proc:10:cleanse-curse","proc:10:cleanse-paralysis","proc:10:cleanse-atk down","proc:10:cleanse-def down","proc:10:cleanse-rec down","proc:10:cleanse-unknown","BUFF_AILMENTBLK","proc:11:chance inflict-poison","DEBUFF_POISON","proc:11:chance inflict-weak","DEBUFF_WEAK","proc:11:chance inflict-sick","DEBUFF_SICK","proc:11:chance inflict-injury","DEBUFF_INJURY","proc:11:chance inflict-curse","DEBUFF_CURSE","proc:11:chance inflict-paralysis","DEBUFF_PARALYSIS","proc:11:chance inflict-atk down","proc:11:chance inflict-def down","proc:11:chance inflict-rec down","proc:11:chance inflict-unknown","DEBUFF_AILMENT","proc:12:guaranteed revive","proc:13:random attack","ATK_RT","proc:14:hp absorb attack","ATK_ST_HPREC","ATK_AOE_HPREC","proc:16:mitigate-fire","proc:16:mitigate-water","proc:16:mitigate-earth","proc:16:mitigate-thunder","proc:16:mitigate-light","proc:16:mitigate-dark","proc:16:mitigate-all","proc:16:mitigate-unknown","proc:17:resist-poison","proc:17:resist-weak","proc:17:resist-sick","proc:17:resist-injury","proc:17:resist-curse","proc:17:resist-paralysis","proc:18:mitigation","proc:19:gradual bc fill","proc:20:bc fill on hit","proc:22:defense ignore","proc:23:spark damage","proc:24:converted-atk","proc:24:converted-def","proc:24:converted-rec","proc:26:hit count boost","proc:27:proportional attack","ATK_ST_PROPORTIONAL","ATK_AOE_PROPORTIONAL","proc:28:fixed attack","ATK_ST_FIXED","ATK_AOE_FIXED","proc:29:multi-element attack","ATK_ST_MULTIELEMENT","ATK_AOE_MULTIELEMENT","proc:30:add element-fire","elementModification","BUFF_ADDFIRE","proc:30:add element-water","BUFF_ADDWATER","proc:30:add element-earth","BUFF_ADDEARTH","proc:30:add element-thunder","BUFF_ADDTHUNDER","proc:30:add element-light","BUFF_ADDLIGHT","proc:30:add element-dark","BUFF_ADDDARK","proc:30:add element-unknown","BUFF_ADDELEMENT","proc:31:bc fill-flat","proc:31:bc fill-percent","proc:32:element shift-fire","BUFF_SHIFTFIRE","proc:32:element shift-water","BUFF_SHIFTWATER","proc:32:element shift-earth","BUFF_SHIFTEARTH","proc:32:element shift-thunder","BUFF_SHIFTTHUNDER","proc:32:element shift-light","BUFF_SHIFTLIGHT","proc:32:element shift-dark","BUFF_SHIFTDARK","proc:32:element shift-unknown","BUFF_SHIFTELEMENT","proc:33:buff wipe","buffStabilityModification","BUFF_REMOVEBUFF","proc:34:bc drain-flat","BUFF_BBFILLDOWN","proc:34:bc drain-percent","proc:36:ls lock","BUFF_DISABLELS","proc:37:summon","BUFF_SUMMONUNIT","proc:38:cleanse-poison","proc:38:cleanse-weak","proc:38:cleanse-sick","proc:38:cleanse-injury","proc:38:cleanse-curse","proc:38:cleanse-paralysis","proc:38:cleanse-atk down","proc:38:cleanse-def down","proc:38:cleanse-rec down","proc:38:cleanse-unknown","proc:39:mitigate-fire","proc:39:mitigate-water","proc:39:mitigate-earth","proc:39:mitigate-thunder","proc:39:mitigate-light","proc:39:mitigate-dark","proc:39:mitigate-unknown","proc:40:add ailment-poison","proc:40:add ailment-weak","proc:40:add ailment-sick","proc:40:add ailment-injury","proc:40:add ailment-curse","proc:40:add ailment-paralysis","proc:40:add ailment-atk down","proc:40:add ailment-def down","proc:40:add ailment-rec down","proc:40:add ailment-unknown","proc:42:sacrificial attack","ATK_ST_SACRIFICIAL","ATK_AOE_SACRIFICIAL","proc:42:instant death","BUFF_KO","proc:43:burst od fill","BUFF_OVERDRIVEUP","proc:44:damage over time","damageOverTime","BUFF_TURNDMG","proc:45:attack boost-bb","proc:45:attack boost-sbb","proc:45:attack boost-ubb","proc:46:non-lethal proportional attack","proc:47:hp scaled attack","ATK_ST_HPSCALED","ATK_AOE_HPSCALED","proc:48:piercing attack-base","ATK_ST_PIERCING_PROPORTIONAL","ATK_AOE_PIERCING_PROPORTIONAL","proc:48:piercing attack-current","proc:48:piercing attack-fixed","ATK_ST_PIERCING_FIXED","ATK_AOE_PIERCING_FIXED","proc:48:piercing attack-unknown","proc:49:chance instant death","proc:50:chance damage reflect","proc:51:add to attack-atk down","proc:51:add to attack-def down","proc:51:add to attack-rec down","proc:52:bc efficacy","proc:53:inflict on hit-poison","proc:53:inflict on hit-weak","proc:53:inflict on hit-sick","proc:53:inflict on hit-injury","proc:53:inflict on hit-curse","proc:53:inflict on hit-paralysis","proc:54:critical damage boost","proc:55:elemental weakness damage-fire","proc:55:elemental weakness damage-water","proc:55:elemental weakness damage-earth","proc:55:elemental weakness damage-thunder","proc:55:elemental weakness damage-light","proc:55:elemental weakness damage-dark","proc:55:elemental weakness damage-unknown","proc:56:chance ko resistance","proc:57:bc drop resistance-base","proc:57:bc drop resistance-buff","proc:57:hc drop resistance-base","proc:57:hc drop resistance-buff","proc:58:spark vulnerability","proc:59:attack reduction-bb","BUFF_BBATKDOWN","proc:59:attack reduction-sbb","BUFF_SBBATKDOWN","proc:59:attack reduction-ubb","BUFF_UBBATKDOWN","proc:61:party bb gauge-scaled attack","ATK_ST_BBGAUGESCALED","ATK_AOE_BBGAUGESCALED","proc:61:party bc drain","proc:62:barrier-fire","barrier","BUFF_FIRESHIELD","proc:62:barrier-water","BUFF_WATERSHIELD","proc:62:barrier-earth","BUFF_EARTHSHIELD","proc:62:barrier-thunder","BUFF_THUNDERSHIELD","proc:62:barrier-light","BUFF_LIGHTSHIELD","proc:62:barrier-dark","BUFF_DARKSHIELD","proc:62:barrier-all","BUFF_ELEMENTSHIELD","proc:62:barrier-unknown","proc:64:consecutive usage attack","ATK_ST_USAGESCALED","ATK_AOE_USAGESCALED","proc:65:ailment attack boost","proc:66:chance revive","proc:67:bc fill on spark","proc:68:guard mitigation","proc:69:bc fill on guard-percent","proc:69:bc fill on guard-flat","proc:71:bc efficacy reduction","proc:73:resist-atk down","proc:73:resist-def down","proc:73:resist-rec down","proc:75:element squad-scaled attack","ATK_ST_ELEMENTSCALED","ATK_AOE_ELEMENTSCALED","proc:76:extra action","proc:78:self stat boost-atk","BUFF_ATKDOWNLOCK","BUFF_SELFATKUP","proc:78:self stat boost-def","BUFF_DEFDOWNLOCK","BUFF_SELFDEFUP","proc:78:self stat boost-rec","BUFF_RECDOWNLOCK","BUFF_SELFRECUP","proc:78:self stat boost-crit","BUFF_CRTRATEDOWNLOCK","BUFF_SELFCRTRATEUP","proc:79:player exp boost","expModification","BUFF_PLAYEREXP","proc:82:resummon","conditional:1:attack buff","conditional:3:defense buff","conditional:5:recovery buff","conditional:8:gradual heal","conditional:12:guaranteed ko resistance","conditional:13:elemental attack buff","conditional:14:elemental defense buff","conditional:21:fire mitigation","conditional:22:water mitigation","conditional:23:earth mitigation","conditional:24:thunder mitigation","conditional:25:light mitigation","conditional:26:dark mitigation","conditional:36:mitigation","conditional:37:gradual bc fill","conditional:40:spark damage","conditional:72:attack boost-bb","conditional:72:attack boost-sbb","conditional:72:attack boost-ubb","conditional:74:add atk down to attack","conditional:75:add def down to attack","conditional:84:critical damage","conditional:91:chance ko resistance","conditional:98:thunder barrier","conditional:99:light barrier","conditional:132:od fill rate","conditional:133:heal on hit","conditional:143:critical damage reduction-base","conditional:143:critical damage reduction-buff","conditional:145:elemental weakness damage reduction-base","conditional:145:elemental weakness damage reduction-buff","conditional:153:chance inflict atk down on hit","atkDownCounter","BUFF_PROB_ATKREDUC","index$1","convertPassiveEffectToBuffs","getMetadataForBuff","index$2","parsers","combineEffectsAndDamageFrames","combinedEntries","correspondingFrameEntry","delay","frames","getEffectName","resultName","effectId","passive","proc","index$3","getEffectsForExtraSkill","skill","index$4","getEffectsForItem","target_area","target_type","fullProcEffect","getItemImageUrl","baseContentUrl","fileName","index$5","getEffectsForLeaderSkill","index$6","getUnitImageFileNames","fileNameSuffix","spritesheet","battleAvatar","guideAvatar","fullIllustration","getUnitImageUrl","CHARACTER_CODE_FOR_UPPERCASE_A","charCodeAt","CHARACTER_CODE_FOR_LOWERCASE_A","CHARACTER_CODE_FOR_NUMBER_0","getSpEntryId","index$7","getEffectsForSpEnhancement","effectWrapper","spType","originalEffect","unwrappedEffect","getSpCategoryName","categoryId","Spark","Drops","Special","spIndexToCode","correspondingCharacterCode","Number","isInteger","String","fromCharCode","spCodeToIndex","code","characterCodeOffset","getSpEntryWithId","spId","getAllDependenciesForSpEntry","allEntries","addedEntries","dependencies","dependency","dependencyId","dependencyEntry","s","has","subDependencies","getAllEntriesThatDependOnSpEntry","dependents","entryId","dependent","subDependents","bursts","extraSkills","leaderSkills","spEnhancements","version"],"mappings":"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","file":"index.browser.min.js","sourcesContent":["\"use strict\";var bfmtUtilities=function(e){function a(e,a){const t=e&&Array.isArray(e.levels)?e.levels:[];let i;return i=null===a||isNaN(a)?t.length-1:+a-1,t[i]}function t(e){let a=\"\";return e&&(a=e[\"proc id\"]||e[\"unknown proc id\"]||e[\"passive id\"]||e[\"unknown passive id\"]||\"\"),a}var i,s,n;!function(e){e.BurstHeal=\"2\",e.Unknown=\"UNKNOWN_PROC_EFFECT_ID\"}(i||(i={})),function(e){e.TriggeredEffect=\"66\",e.Unknown=\"UNKNOWN_PASSIVE_EFFECT_ID\"}(s||(s={})),function(e){e.Unknown=\"UNKNOWN_CONDITIONAL_EFFECT_ID\"}(n||(n={}));var c,o=Object.freeze({__proto__:null,get KNOWN_PROC_ID(){return i},get KNOWN_PASSIVE_ID(){return s},get KNOWN_CONDITIONAL_ID(){return n}});!function(e){e.Attack=\"Attack\"}(c||(c={}));const r=Object.freeze({1:{ID:\"1\",Name:\"Parameter Boost\"},2:{ID:\"2\",Name:\"Elemental Parameter Boost\"},3:{ID:\"3\",Name:\"Type-Based Parameter Boost\"},4:{ID:\"4\",Name:\"Status Negation\"},5:{ID:\"5\",Name:\"Elemental Damage Reduction\"},6:{ID:\"6\",Name:\"\"},8:{ID:\"8\",Name:\"Damage Reduction\"},9:{ID:\"9\",Name:\"Gradual BB Gauge Boost\"},10:{ID:\"10\",Name:\"HC Efficacy\"},11:{ID:\"11\",Name:\"HP-Conditional Parameter Boost\"},12:{ID:\"12\",Name:\"HP-Conditional Drop Rate Boost\"},13:{ID:\"13\",Name:\"BC Fill on Enemy Defeat\"},14:{ID:\"14\",Name:\"Damage Reduction (Chance)\"},15:{ID:\"15\",Name:\"Heal on Enemy Defeat\"},16:{ID:\"16\",Name:\"Heal on Battle Victory\"},17:{ID:\"17\",Name:\"HP Absorption\"},19:{ID:\"19\",Name:\"Drop Rate Boost\"},20:{ID:\"20\",Name:\"Status Infliction\"},21:{ID:\"21\",Name:\"Parameter Boost for First X Turns\"},23:{ID:\"23\",Name:\"BC Fill on Battle Victory\"},24:{ID:\"24\",Name:\"Heal when Attacked (Chance)\"},25:{ID:\"25\",Name:\"BC Fill when Hit (Chance)\"},26:{ID:\"26\",Name:\"Damage Counter (Chance)\"},27:{ID:\"27\",Name:\"Increased Target Chance\"},28:{ID:\"28\",Name:\"Decreased Target Chance\"},29:{ID:\"29\",Name:\"Defense Ignore (Chance)\"},30:{ID:\"30\",Name:\"BB Conditional Parameter Boost\"},31:{ID:\"31\",Name:\"Spark Damage Boost, Boost Drop Rate on Spark\"},32:{ID:\"32\",Name:\"BC Efficacy\"},33:{ID:\"33\",Name:\"Heal over Time\"},34:{ID:\"34\",Name:\"Critical Damage Boost\"},35:{ID:\"35\",Name:\"BC Fill when Normal Attacking\"},36:{ID:\"36\",Name:\"Extra Action\"},37:{ID:\"37\",Name:\"Hit Count Boost\"},38:{ID:\"38\",Name:\"\"},39:{ID:\"39\",Name:\"\"},40:{ID:\"40\",Name:\"Parameter Conversion\"},41:{ID:\"41\",Name:\"Unique Element Count Conditional Parameter Boost\"},42:{ID:\"42\",Name:\"Gender Parameter Boost\"},43:{ID:\"43\",Name:\"Damage Reduction to 1\"},44:{ID:\"44\",Name:\"Flat Parameter Boost\"},45:{ID:\"45\",Name:\"Critical Damage Negation\"},46:{ID:\"46\",Name:\"Parameter Boost Relative to HP Remainaing\"},47:{ID:\"47\",Name:\"BC Fill on Spark\"},48:{ID:\"48\",Name:\"BC Cost Reduction\"},49:{ID:\"49\",Name:\"BB Gauge Consumption Reduction\"},50:{ID:\"50\",Name:\"Elemental Damage Boost\"},52:{ID:\"52\",Name:\"\"},53:{ID:\"53\",Name:\"Critical/Elemental Weakness Damage Negation\"},55:{ID:\"55\",Name:\"Conditional Effect based on HP Threshold\"},58:{ID:\"58\",Name:\"Damage Reduction when Guarding\"},59:{ID:\"59\",Name:\"BC Fill when Attacked when Guarding\"},61:{ID:\"61\",Name:\"BC Fill on Guard\"},62:{ID:\"62\",Name:\"Elemental Damage Reduction\"},63:{ID:\"63\",Name:\"Elemental Damage Reduction for first X Turns\"},64:{ID:\"64\",Name:\"BB Atk Boost\"},65:{ID:\"65\",Name:\"BC Fill on Critical\"},66:{ID:\"66\",Name:\"Add buff to Brave Burst\"},69:{ID:\"69\",Name:\"Chance KO Resistance (Angel Idol)\"},70:{ID:\"70\",Name:\"OD Gauge Fill Rate Boost\"},71:{ID:\"71\",Name:\"Status Counter\"},72:{ID:\"72\",Name:\"Turn End Effects Activate at Turn Start\"},73:{ID:\"73\",Name:\"Parameter Reduction Negation\"},74:{ID:\"74\",Name:\"Attack Boost on Status Afflicted Foes\"},75:{ID:\"75\",Name:\"Spark Vulnerability\"},77:{ID:\"77\",Name:\"Spark Damage Reduction\"},78:{ID:\"78\",Name:\"Conditional Effect after Damage Received Threshold\"},79:{ID:\"79\",Name:\"BC Fill after Damage Received Threshold\"},80:{ID:\"80\",Name:\"Conditional Effect after Damage Dealt Threshold\"},81:{ID:\"81\",Name:\"BC Fill after Damage Dealt Threshold\"},82:{ID:\"82\",Name:\"Conditional Effect after BC Received Threshold\"},84:{ID:\"84\",Name:\"Conditional Effect after HC Received Threshold\"},85:{ID:\"85\",Name:\"BC Fill after HC Received Threshold\"},86:{ID:\"86\",Name:\"Conditional Effect after Spark Threshold\"},88:{ID:\"88\",Name:\"Conditional Effect on Guard\"},89:{ID:\"89\",Name:\"Conditional Effect on Critical\"},90:{ID:\"90\",Name:\"Status Infliction on Critical\"},91:{ID:\"91\",Name:\"\"},92:{ID:\"92\",Name:\"Negate Defense Ignore\"},93:{ID:\"93\",Name:\"Added Elements\"},96:{ID:\"96\",Name:\"Normal Attacks Hit All Foes\"},97:{ID:\"97\",Name:\"Player EXP Boost\"},99:{ID:\"99\",Name:\"\"},100:{ID:\"100\",Name:\"Spark Critical\"},101:{ID:\"101\",Name:\"Heal on Spark\"},102:{ID:\"102\",Name:\"Added Elements\"},103:{ID:\"103\",Name:\"BB Atk Boost when HP Passes Threshold\"},104:{ID:\"104\",Name:\"Spark Boost when HP Passes Threshold\"},105:{ID:\"105\",Name:\"Turn-Based Parameter Boost\"},106:{ID:\"106\",Name:\"Conditional Effect after Activating Overdrive\"},107:{ID:\"107\",Name:\"Add Effect to Leader Skill\"},109:{ID:\"109\",Name:\"BB Gauge Reduction (Chance)\"},110:{ID:\"110\",Name:\"BC Efficacy Reduction (Chance)\"},111:{ID:\"111\",Name:\"Increase Brave Burst Activation Rate\"},112:{ID:\"112\",Name:\"ABP/CBP Boost\"},113:{ID:\"113\",Name:\"Conditional Effect after HP Threshold\"},114:{ID:\"114\",Name:\"Inflict Buff when Attacked\"},127:{ID:\"127\",Name:\"Additional Damage (Damage over Time) Reduction\"},128:{ID:\"128\",Name:\"Damage Reduction from Normal Attacks\"},143:{ID:\"143\",Name:\"Break Atk Parameter Limit\"},10008:{ID:\"10008\",Name:\"Damage Reduction from Specific Sources\"},11004:{ID:\"11004\",Name:\"Elemental Spark Damage Boost\"},11005:{ID:\"11005\",Name:\"Elemental Critical Damage Boost\"},11006:{ID:\"11006\",Name:\"Summoner EXP Boost\"},11009:{ID:\"11009\",Name:\"Effect Duration Boost\"},\"66,1\":{ID:\"66,1\",Name:\"\"}}),l=Object.freeze({0:{ID:\"0\",Name:\"\",Type:\"\"},1:{ID:\"1\",Name:\"Regular Damage\",Type:\"Attack\"},2:{ID:\"2\",Name:\"Burst Heal\",Type:\"\"},3:{ID:\"3\",Name:\"Heal over Time\",Type:\"\"},4:{ID:\"4\",Name:\"BB Gauge Refill\",Type:\"\"},5:{ID:\"5\",Name:\"Parameter Boost\",Type:\"\"},6:{ID:\"6\",Name:\"Drop Rate\",Type:\"\"},7:{ID:\"7\",Name:\"Guaranteed KO Resistance (Angel Idol)\",Type:\"\"},8:{ID:\"8\",Name:\"Max HP Boost\",Type:\"\"},9:{ID:\"9\",Name:\"Parameter Reduction\",Type:\"\"},10:{ID:\"10\",Name:\"Status Cleanse\",Type:\"\"},11:{ID:\"11\",Name:\"Status Infliction\",Type:\"\"},12:{ID:\"12\",Name:\"Revive (Guaranteed)\",Type:\"\"},13:{ID:\"13\",Name:\"Random Target Damage\",Type:\"Attack\"},14:{ID:\"14\",Name:\"Lifesteal Damage\",Type:\"Attack\"},16:{ID:\"16\",Name:\"Elemental Damage Reduction\",Type:\"\"},17:{ID:\"17\",Name:\"Status Negation\",Type:\"\"},18:{ID:\"18\",Name:\"Damage Reduction\",Type:\"\"},19:{ID:\"19\",Name:\"Gradual BB Gauge Boost\",Type:\"\"},20:{ID:\"20\",Name:\"BC Fill on Hit\",Type:\"\"},22:{ID:\"22\",Name:\"Defense Ignore\",Type:\"\"},23:{ID:\"23\",Name:\"Spark Boost\",Type:\"\"},24:{ID:\"24\",Name:\"Parameter Conversion\",Type:\"\"},26:{ID:\"26\",Name:\"Hit Count Boost\",Type:\"\"},27:{ID:\"27\",Name:\"Proportional Damage\",Type:\"Attack\"},28:{ID:\"28\",Name:\"Fixed Damage\",Type:\"Attack\"},29:{ID:\"29\",Name:\"Multi-Element Damage\",Type:\"Attack\"},30:{ID:\"30\",Name:\"Add Elements\",Type:\"\"},31:{ID:\"31\",Name:\"Instant BB Gauge Fill\",Type:\"\"},32:{ID:\"32\",Name:\"Element Shift\",Type:\"\"},33:{ID:\"33\",Name:\"Buff Removal (Chance)\",Type:\"\"},34:{ID:\"34\",Name:\"BB Gauge Reduction (Chance)\",Type:\"\"},36:{ID:\"36\",Name:\"Leader Skill Lock (Chance)\",Type:\"\"},37:{ID:\"37\",Name:\"Summon Unit\",Type:\"\"},38:{ID:\"38\",Name:\"Status Cure\",Type:\"\"},39:{ID:\"39\",Name:\"Elemental Damage Reduction\",Type:\"\"},40:{ID:\"40\",Name:\"Status Infliction Added to Attack\",Type:\"\"},42:{ID:\"42\",Name:\"\",Type:\"\"},43:{ID:\"43\",Name:\"Instant OD Fill\",Type:\"\"},44:{ID:\"44\",Name:\"Damage over Time (Additional Damage)\",Type:\"\"},45:{ID:\"45\",Name:\"BB Atk Boost\",Type:\"\"},46:{ID:\"46\",Name:\"Non-Lethal Proportional Damage\",Type:\"Attack\"},47:{ID:\"47\",Name:\"HP Scaled Damage\",Type:\"Attack\"},48:{ID:\"48\",Name:\"Piercing Proportional Damage\",Type:\"Attack\"},49:{ID:\"49\",Name:\"Retire\",Type:\"\"},50:{ID:\"50\",Name:\"Damage Counter\",Type:\"\"},51:{ID:\"51\",Name:\"Parameter Reduction Added to Attack\",Type:\"\"},52:{ID:\"52\",Name:\"BC Efficacy\",Type:\"\"},53:{ID:\"53\",Name:\"Status Counter\",Type:\"\"},54:{ID:\"54\",Name:\"Critical Damage Boost\",Type:\"\"},55:{ID:\"55\",Name:\"Elemental Damage Boost\",Type:\"\"},56:{ID:\"56\",Name:\"Chance KO Resistance (Angel Idol)\",Type:\"\"},57:{ID:\"57\",Name:\"BC Efficacy Reduction\",Type:\"\"},58:{ID:\"58\",Name:\"Spark Vulnerability\",Type:\"\"},59:{ID:\"59\",Name:\"BB Atk Reduction\",Type:\"\"},60:{ID:\"60\",Name:\"\",Type:\"\"},61:{ID:\"61\",Name:\"BB-Scaled Damage\",Type:\"Attack\"},62:{ID:\"62\",Name:\"Barrier\",Type:\"\"},63:{ID:\"63\",Name:\"Selective Buff Wipe\",Type:\"\"},64:{ID:\"64\",Name:\"Consecutive Damage\",Type:\"Attack\"},65:{ID:\"65\",Name:\"Attack Boost on Status Afflicted Foes\",Type:\"\"},66:{ID:\"66\",Name:\"Revive (Chance)\",Type:\"\"},67:{ID:\"67\",Name:\"BC Fill on Spark\",Type:\"\"},68:{ID:\"68\",Name:\"Damage Reduction when Guarding\",Type:\"\"},69:{ID:\"69\",Name:\"BC Fill on Guard\",Type:\"\"},70:{ID:\"70\",Name:\"\",Type:\"\"},71:{ID:\"71\",Name:\"BB Gauge Fill Rate Debuff\",Type:\"\"},73:{ID:\"73\",Name:\"Parameter Reduction Negation\",Type:\"\"},75:{ID:\"75\",Name:\"Element Squad-Scaled Damage\",Type:\"Attack\"},76:{ID:\"76\",Name:\"Extra Action\",Type:\"\"},78:{ID:\"78\",Name:\"Self Parameter Boost\",Type:\"\"},79:{ID:\"79\",Name:\"Player EXP Boost\",Type:\"\"},82:{ID:\"82\",Name:\"\",Type:\"\"},83:{ID:\"83\",Name:\"Spark Critical\",Type:\"\"},84:{ID:\"84\",Name:\"OD Gauge Fill Rate\",Type:\"\"},85:{ID:\"85\",Name:\"Heal when Attacked\",Type:\"\"},86:{ID:\"86\",Name:\"HP Absorption\",Type:\"\"},87:{ID:\"87\",Name:\"Heal on Spark\",Type:\"\"},88:{ID:\"88\",Name:\"Self Spark Boost\",Type:\"\"},89:{ID:\"89\",Name:\"Self Parameter Conversion\",Type:\"\"},92:{ID:\"92\",Name:\"Self Max HP Boost\",Type:\"\"},93:{ID:\"93\",Name:\"Spark/Critical/Elemental Weakness Damage Reduction\",Type:\"\"},94:{ID:\"94\",Name:\"Normal Attacks Hit All Foes\",Type:\"\"},95:{ID:\"95\",Name:\"Nullify Sphere Effects (Sphere Lock)\",Type:\"\"},96:{ID:\"96\",Name:\"Nullify Extra Skill Effects (ES Lock)\",Type:\"\"},97:{ID:\"97\",Name:\"Element Target Damage\",Type:\"Attack\"},113:{ID:\"113\",Name:\"Gradual OD Fill\",Type:\"\"},119:{ID:\"119\",Name:\"Gradual BC Drain\",Type:\"\"},123:{ID:\"123\",Name:\"OD Gauge Reduction\",Type:\"\"},126:{ID:\"126\",Name:\"Damage over Time (Additional Damage) Mitigation\",Type:\"\"},127:{ID:\"127\",Name:\"Lock On\",Type:\"\"},130:{ID:\"130\",Name:\"Parameter Reduction Counter\",Type:\"\"},131:{ID:\"131\",Name:\"\",Type:\"\"},132:{ID:\"132\",Name:\"Critical/Elemental Weakness Vulnerability\",Type:\"\"},901:{ID:\"901\",Name:\"Raid Heal (on Map)\",Type:\"\"},902:{ID:\"902\",Name:\"Raid Parameter Boost\",Type:\"\"},903:{ID:\"903\",Name:\"Raid Boss Reveal\",Type:\"\"},905:{ID:\"905\",Name:\"Raid Teleport\",Type:\"\"},906:{ID:\"906\",Name:\"Raid Flee\",Type:\"\"},907:{ID:\"907\",Name:\"Raid Damage Reduction\",Type:\"\"},908:{ID:\"908\",Name:\"Raid Item Drop Rate Boost\",Type:\"\"},1e4:{ID:\"10000\",Name:\"Taunt\",Type:\"\"},10001:{ID:\"10001\",Name:\"Stealth\",Type:\"\"},10002:{ID:\"10002\",Name:\"Shield (old)\",Type:\"\"},10003:{ID:\"10003\",Name:\"Nullify Sphere Effects (Sphere Lock)\",Type:\"\"},10004:{ID:\"10004\",Name:\"Damage Immunity\",Type:\"\"},10005:{ID:\"10005\",Name:\"Turn Skip (short duration)\",Type:\"\"},10006:{ID:\"10006\",Name:\"Turn Skip (long duration)\",Type:\"\"},10007:{ID:\"10007\",Name:\"Evasion\",Type:\"\"},10009:{ID:\"10009\",Name:\"\",Type:\"\"},10012:{ID:\"10012\",Name:\"OD Drain\",Type:\"\"},10015:{ID:\"10015\",Name:\"Elemental Spark Boost\",Type:\"\"},10016:{ID:\"10016\",Name:\"Element Critical Damage Boost\",Type:\"\"},10017:{ID:\"10017\",Name:\"Elemental Shield\",Type:\"\"},10018:{ID:\"10018\",Name:\"Max HP Reduction\",Type:\"\"},10019:{ID:\"10019\",Name:\"Effect Purge\",Type:\"\"},10020:{ID:\"10020\",Name:\"Piercing Damage\",Type:\"Attack\"},10021:{ID:\"10021\",Name:\"Active Healing Reduction\",Type:\"\"},10022:{ID:\"10022\",Name:\"Passive Healing Reduction\",Type:\"\"},10023:{ID:\"10023\",Name:\"HC Efficacy Reduction\",Type:\"\"},10025:{ID:\"10025\",Name:\"KO Resistance Negation\",Type:\"\"},10026:{ID:\"10026\",Name:\"Doom\",Type:\"\"},11e3:{ID:\"11000\",Name:\"Negative HP-Scaled Damage\",Type:\"Attack\"},11001:{ID:\"11001\",Name:\"Max HP% DoT of Weaker Element Enemies\",Type:\"\"},11002:{ID:\"11002\",Name:\"HP Limit Break, Convert to HP\",Type:\"\"},11003:{ID:\"11003\",Name:\"Effect Negation\",Type:\"\"},70001:{ID:\"70001\",Name:\"Mana Bubble Shield\",Type:\"\"},70002:{ID:\"70002\",Name:\"Recast\",Type:\"\"},\"2-5\":{ID:\"2-5\",Name:\"Burst Heal and DEF/REC Boost\",Type:\"\"}});function d(e,a=l){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}function p(e,a){const t=d(e,a);return!!t&&t.Type===c.Attack}var u,f,F,g,m,D,E,U,B,v,T,b,k,A,R,h,_,I,y,P=Object.freeze({__proto__:null,getLevelEntryForBurst:a,getEffectsForBurst:function(e,t){const i=a(e,t);return i&&Array.isArray(i.effects)?i.effects:[]},getExtraAttackDamageFramesEntry:function(e,a=\"0.0/0\",s){const n=(Array.isArray(e)?e:[]).filter(e=>{const a=t(e);return a===i.BurstHeal||p(a,s)}).reduce((e,a,t)=>{const i=0===t,s=a[\"frame times\"].length,n=a[\"hit dmg% distribution\"],c=a[\"frame times\"];for(let a=i?0:1;a<s;++a)e.push({damage:n[a],time:c[a]});return e},[]),c={\"effect delay time(ms)/frame\":a,\"frame times\":[],\"hit dmg% distribution\":[],\"hit dmg% distribution (total)\":0,hits:0};return n.sort((e,a)=>e.time-a.time).forEach(({time:e,damage:a})=>{c[\"frame times\"].push(e),c[\"hit dmg% distribution\"].push(a),c[\"hit dmg% distribution (total)\"]+=a}),c.hits=c[\"frame times\"].length,c}});function N(e,a=r){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}function O(e,a){const t=d(e,a);return!!t&&t.Name||\"\"}function C(e,a){const t=N(e,a);return!!t&&t.Name||\"\"}function H(e){return!!e&&\"object\"==typeof e&&(Object.hasOwnProperty.call(e,\"proc id\")||Object.hasOwnProperty.call(e,\"unknown proc id\"))}function S(e){return!!e&&\"object\"==typeof e&&(Object.hasOwnProperty.call(e,\"passive id\")||Object.hasOwnProperty.call(e,\"unknown passive id\"))}!function(e){e.Poison=\"poison\",e.Weak=\"weak\",e.Sick=\"sick\",e.Injury=\"injury\",e.Curse=\"curse\",e.Paralysis=\"paralysis\",e.AttackReduction=\"atk down\",e.DefenseReduction=\"def down\",e.RecoveryReduction=\"rec down\",e.Unknown=\"unknown\"}(u||(u={})),function(e){e.hp_50pr_under=\"hp_50pr_under\",e.hp_50pr_over=\"hp_50pr_over\",e.hp_75pr_under=\"hp_75pr_under\",e.hp_25pr_under=\"hp_25pr_under\",e.hp_min=\"hp_min\",e.hp_max=\"hp_max\",e.atk_max=\"atk_max\",e.random=\"random\"}(f||(f={})),function(e){e.Moving=\"1\",e.Teleporting=\"2\",e.NonMoving=\"3\"}(F||(F={})),function(e){e.Aoe=\"aoe\",e.Single=\"single\",e.Random=\"random\"}(g||(g={})),function(e){e.Aoe=\"AOE\",e.Single=\"ST\",e.Random=\"RT\"}(m||(m={})),function(e){e.Self=\"self\",e.Party=\"party\",e.Enemy=\"enemy\"}(D||(D={})),function(e){e.AddPassive=\"passive\",e.EnhanceBb=\"add to bb\",e.EnhanceSbb=\"add to sbb\",e.EnhanceUbb=\"add to ubb\",e.EnhancePassive=\"add to passive\"}(E||(E={})),function(e){e.None=\"None\",e[\"Status Enhancing\"]=\"Status Enhancing\",e.Critical=\"Critical\",e.Drop=\"Drop\",e[\"Ailment Inducing\"]=\"Ailment Inducing\",e[\"Element Fusion\"]=\"Element Fusion\",e[\"BB Gauge\"]=\"BB Gauge\",e[\"HP Recovery\"]=\"HP Recovery\",e[\"Target Setting\"]=\"Target Setting\",e[\"Damage Deflecting\"]=\"Damage Deflecting\",e[\"Damage Reducing\"]=\"Damage Reducing\",e.Spark=\"Spark\",e[\"Defense Piercing\"]=\"Defense Piercing\",e[\"Attack Boosting\"]=\"Attack Boosting\",e.Special=\"Special\"}(U||(U={})),function(e){e[e.None=0]=\"None\",e[e[\"Status Enhancing\"]=1]=\"Status Enhancing\",e[e.Critical=2]=\"Critical\",e[e.Drop=3]=\"Drop\",e[e[\"Ailment Inducing\"]=4]=\"Ailment Inducing\",e[e[\"Element Fusion\"]=5]=\"Element Fusion\",e[e[\"BB Gauge\"]=6]=\"BB Gauge\",e[e[\"HP Recovery\"]=7]=\"HP Recovery\",e[e[\"Target Setting\"]=8]=\"Target Setting\",e[e[\"Damage Deflecting\"]=9]=\"Damage Deflecting\",e[e[\"Damage Reducing\"]=10]=\"Damage Reducing\",e[e.Spark=11]=\"Spark\",e[e[\"Defense Piercing\"]=12]=\"Defense Piercing\",e[e[\"Attack Boosting\"]=13]=\"Attack Boosting\",e[e.Special=14]=\"Special\"}(B||(B={})),function(e){e[\"Parameter Boost\"]=\"Parameter Boost\",e.Spark=\"Spark\",e[\"Critical Hits\"]=\"Critical Hits\",e[\"Attack Boost\"]=\"Attack Boost\",e[\"BB Gauge\"]=\"BB Gauge\",e[\"HP Recovery\"]=\"HP Recovery\",e.Drops=\"Drops\",e[\"Ailment Resistance\"]=\"Ailment Resistance\",e[\"Ailment Infliction\"]=\"Ailment Infliction\",e[\"Damage Reduction\"]=\"Damage Reduction\",e.Special=\"Special\",e.Unknown=\"Unknown\"}(v||(v={})),function(e){e[\"Parameter Boost\"]=\"1\",e.Spark=\"2\",e[\"Critical Hits\"]=\"3\",e[\"Attack Boost\"]=\"4\",e[\"BB Gauge\"]=\"5\",e[\"HP Recovery\"]=\"6\",e.Drops=\"7\",e[\"Ailment Resistance\"]=\"8\",e[\"Ailment Infliction\"]=\"9\",e[\"Damage Reduction\"]=\"10\",e.Special=\"11\"}(T||(T={})),function(e){e.Attack=\"attack\",e.Idle=\"idle\",e.Move=\"move\"}(b||(b={})),function(e){e.Fire=\"fire\",e.Water=\"water\",e.Earth=\"earth\",e.Thunder=\"thunder\",e.Light=\"light\",e.Dark=\"dark\"}(k||(k={})),function(e){e.Male=\"male\",e.Female=\"female\",e.Other=\"other\"}(A||(A={})),function(e){e.Ineligible=\"not eligible for achievement\",e.Farmable=\"farmable\",e.RareSummon=\"rare summon\",e.ExtraSkillElgif=\"extra skill elgif\"}(R||(R={})),function(e){e.Normal=\"normal\",e.Evolution=\"evo\",e.Enhancing=\"enhancing\",e.Sale=\"sale\"}(h||(h={})),function(e){e.Lord=\"lord\",e.Anima=\"anima\",e.Breaker=\"breaker\",e.Guardian=\"guardian\",e.Oracle=\"oracle\",e.Rex=\"rex\"}(_||(_={})),function(e){e.Consumable=\"consumable\",e.Material=\"material\",e.Sphere=\"sphere\",e.EvolutionMaterial=\"evomat\",e.SummonerConsumable=\"summoner_consumable\",e.LeaderSkillSphere=\"ls_sphere\"}(I||(I={})),function(e){e.Mimic=\"60142\",e.BatMimic=\"60143\",e.DragonMimic=\"60144\",e.MetalMimic=\"60224\"}(y||(y={}));const w={1e3:y.Mimic,1100:y.BatMimic,1101:y.BatMimic,1200:y.DragonMimic,1300:y.MetalMimic};var K,W,L,M,j,G,x=Object.freeze({__proto__:null,get Ailment(){return u},get ArenaCondition(){return f},get MoveType(){return F},get TargetArea(){return g},get TargetAreaShorthand(){return m},get TargetType(){return D},get SpPassiveType(){return E},get SphereTypeName(){return U},get SphereTypeId(){return B},get SpCategoryName(){return v},get SpCategoryId(){return T},get UnitAnimationKey(){return b},get UnitElement(){return k},get UnitGender(){return A},get UnitGettingType(){return R},get UnitKind(){return h},get UnitType(){return _},get ItemType(){return I},get MimicUnitIds(){return y},MimicMonsterGroupMapping:w});function V(e){const a=Array.isArray(e.previousSources)?e.previousSources.slice():[];return a.unshift(function(e){return`${e.source}-${e.sourceId}`}(e)),a}function q(e){const a=e&&Array.isArray(e.conditions)&&e.conditions||[],t={units:new Set,items:new Set,sphereTypes:new Set,unknowns:new Set};a.forEach((e,a)=>{\"sphere category required (raw)\"in e?t.sphereTypes.add(e[\"sphere category required (raw)\"]):\"item required\"in e?e[\"item required\"].forEach(e=>{t.items.add(e)}):\"unit required\"in e?e[\"unit required\"].forEach(e=>{t.units.add(\"\"+e.id)}):t.unknowns.add(`type:${e.type_id||a},condition:${e.condition_id||a}`)});return Object.entries(t).filter(e=>e[1].size>0).reduce((e,a)=>(e[a[0]]=Array.from(a[1]),e),{})}function $(e,a){const t=a.source===W.LeaderSkill||e.sp_type===E.EnhancePassive||e[\"passive target\"]===D.Party;return{targetType:t?D.Party:D.Self,targetArea:t?g.Aoe:g.Single}}function X(e){return{targetArea:e[\"target area\"],targetType:e[\"target type\"]}}function Y(e,a=0){return null===e||isNaN(e)?a:+e}function z(e=[],a=0){let t=!1;const i=e.reduce((e,i,s)=>(i&&\"0\"!==i&&(e[\"param_\"+(a+s)]=i,t=!0),e),{});return t?i:void 0}function Q(e){return!!e&&[W.BraveBurst,W.SuperBraveBurst,W.UltimateBraveBurst,W.BondedBraveBurst,W.BondedSuperBraveBurst,W.DualBraveBurst].includes(e)}function Z(e,a,t){let i;return e&&e.length>0&&(i=(t&&t.createUnknownParamsValue||z)(e,a)),i}function J({originalId:e,sources:a}){return{id:G.NO_PARAMS_SPECIFIED,originalId:e,sources:a}}let ee,ae,te;function ie(e){return ee&&!e||(ee=new Map,function(e){const a=\"unknown proc param\",t={0:L.All,1:k.Fire,2:k.Water,3:k.Earth,4:k.Thunder,5:k.Light,6:k.Dark},i={1:k.Fire,2:k.Water,3:k.Earth,4:k.Thunder,5:k.Light,6:k.Dark},s={1:u.Poison,2:u.Weak,3:u.Sick,4:u.Injury,5:u.Curse,6:u.Paralysis,7:u.AttackReduction,8:u.DefenseReduction,9:u.RecoveryReduction},n=(e,a,t)=>({targetData:(t&&t.getProcTargetData||X)(e),sources:(t&&t.createSourcesFromContext||V)(a),effectDelay:e[\"effect delay time(ms)/frame\"]}),c=e=>e.params.split(\",\"),o=e=>{const t=e.params||e[a]||\"\";return c({params:t})},r=(e,{originalId:a,sources:t,targetData:i,effectDelay:s})=>Object.assign({id:G.UNKNOWN_PROC_BUFF_PARAMS,originalId:a,effectDelay:s,sources:t,value:e},i),l=({originalId:e,sources:a,buffs:t,duration:i,targetData:s})=>Object.assign({id:G.TURN_DURATION_MODIFICATION,originalId:e,sources:a,value:{buffs:t,duration:i}},s),d=(e,a,{originalId:t,sources:i,targetData:s,effectDelay:n})=>{0===e.length&&e.push(J({originalId:t,sources:i})),a&&e.push(r(a,{originalId:t,sources:i,targetData:s,effectDelay:n}))},p=(e,a,t)=>{let i=0!==a;return i&&(i=!(t&&t.buffSourceIsBurstType||Q)(e.source)),i},f=e=>({hits:Y(e.damageFrames&&e.damageFrames.hits||0),distribution:Y(e.damageFrames&&e.damageFrames[\"hit dmg% distribution (total)\"])}),F=({effect:e,context:a,injectionContext:t,effectValueKey:i,effectTurnDurationKey:s,parseParamValue:o=(e=>Y(e)),buffId:r,originalId:u})=>{const{targetData:f,sources:F,effectDelay:g}=n(e,a,t);let m,D=0,E=0;if(e.params){const[a,i,...s]=c(e);D=o(a),E=Y(i),m=Z(s,2,t)}else D=Y(e[i]),E=Y(e[s]);const U=[];return 0!==D?U.push(Object.assign({id:r,originalId:u,sources:F,effectDelay:g,duration:E,value:D},f)):p(a,E,t)&&U.push(l({originalId:u,sources:F,buffs:[r],duration:E,targetData:f})),d(U,m,{originalId:u,sources:F,targetData:f,effectDelay:g}),U},m=({effect:e,context:a,injectionContext:t,originalId:i,buffId:s,effectKeyLow:o,effectKeyHigh:r,effectKeyChance:u,effectTurnDurationKey:f,buffKeyLow:F,buffKeyHigh:g,parseParamValue:m=(e=>Y(e)),generateConditions:D})=>{const{targetData:E,sources:U,effectDelay:B}=n(e,a,t);let v,T=0,b=0,k=0,A=0;if(e.params){const[a,i,s,n,...o]=c(e);T=m(a),b=m(i),k=Y(s),A=Y(n),v=Z(o,4,t)}else T=Y(e[o]),b=Y(e[r]),k=Y(e[u]),A=Y(e[f]);const R=[];if(0!==T||0!==b||0!==k){const e=Object.assign({id:s,originalId:i,sources:U,effectDelay:B,duration:A,value:{[F]:T,[g]:b,chance:k}},E);D&&(e.conditions=D()),R.push(e)}else p(a,A,t)&&R.push(l({originalId:i,sources:U,buffs:[s],duration:A,targetData:E}));return d(R,v,{originalId:i,sources:U,targetData:E,effectDelay:B}),R};e.set(\"1\",(e,a,t)=>{const i=\"1\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),{hits:l,distribution:p}=f(a),u={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let F;if(e.params){let a;[u[\"atk%\"],u.flatAtk,u[\"crit%\"],u[\"bc%\"],u[\"hc%\"],u[\"dmg%\"],...a]=c(e),F=Z(a,6,t)}else u[\"atk%\"]=e[\"bb atk%\"],u.flatAtk=e[\"bb flat atk\"],u[\"crit%\"]=e[\"bb crit%\"],u[\"bc%\"]=e[\"bb bc%\"],u[\"hc%\"]=e[\"bb hc%\"],u[\"dmg%\"]=e[\"bb dmg%\"];const g=Object.entries(u).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{}),m=[];return(0!==l||0!==p||Object.keys(g).length>0)&&m.push(Object.assign({id:\"proc:1:attack\",originalId:i,sources:o,effectDelay:r,value:Object.assign(Object.assign({},g),{hits:l,distribution:p})},s)),d(m,F,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"2\",(e,a,t)=>{const i=\"2\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),l={healLow:\"0\",healHigh:\"0\",\"healerRec%\":0};let p;if(e.params){let a,i,s;[l.healLow,l.healHigh,a,i,...s]=c(e),l[\"healerRec%\"]=(100+Y(a))*(1+Y(i)/100)/10,p=Z(s,4,t)}else l.healLow=e[\"heal low\"],l.healHigh=e[\"heal high\"],l[\"healerRec%\"]=e[\"rec added% (from healer)\"];Object.keys(l).forEach(e=>{l[e]=Y(l[e])});const u=[];return 0===l.healHigh&&0===l.healLow||u.push(Object.assign({id:\"proc:2:burst heal\",originalId:i,sources:o,effectDelay:r,value:l},s)),d(u,p,{originalId:i,sources:o,targetData:s,effectDelay:r}),u}),e.set(\"3\",(e,a,t)=>{const i=\"3\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),u={healLow:\"0\",healHigh:\"0\",\"targetRec%\":0,turnDuration:\"0\"};let f;if(e.params){let a,i;[u.healLow,u.healHigh,a,u.turnDuration,...i]=c(e),u[\"targetRec%\"]=10*(1+Y(a)/100),f=Z(i,4,t)}else u.healLow=e[\"gradual heal low\"],u.healHigh=e[\"gradual heal high\"],u[\"targetRec%\"]=e[\"rec added% (from target)\"],u.turnDuration=e[\"gradual heal turns (8)\"];Object.keys(u).forEach(e=>{u[e]=Y(u[e])});const F=[];return 0!==u.healLow||0!==u.healHigh?F.push(Object.assign({id:\"proc:3:gradual heal\",originalId:i,sources:o,effectDelay:r,duration:u.turnDuration,value:{healLow:u.healLow,healHigh:u.healHigh,\"targetRec%\":u[\"targetRec%\"]}},s)):p(a,u.turnDuration,t)&&F.push(l({originalId:i,sources:o,buffs:[\"proc:3:gradual heal\"],duration:u.turnDuration,targetData:s})),d(F,f,{originalId:i,sources:o,targetData:s,effectDelay:r}),F}),e.set(\"4\",(e,a,t)=>{const i=\"4\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let l,p=0,u=0;if(e.params){const[a,i,...s]=c(e);p=Y(a)/100,u=Y(i),l=Z(s,2,t)}else\"bb bc fill\"in e&&(p=Y(e[\"bb bc fill\"])),\"bb bc fill%\"in e&&(u=Y(e[\"bb bc fill%\"]));const f=[];return 0!==p&&f.push(Object.assign({id:\"proc:4:bc fill-flat\",originalId:i,sources:o,effectDelay:r,value:p},s)),0!==u&&f.push(Object.assign({id:\"proc:4:bc fill-percent\",originalId:i,sources:o,effectDelay:r,value:u},s)),d(f,l,{originalId:i,sources:o,targetData:s,effectDelay:r}),f}),e.set(\"5\",(e,a,i)=>{const s=\"5\",{targetData:o,sources:r,effectDelay:u}=n(e,a,i),f={element:L.All,atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",turnDuration:\"0\"},F=[\"atk\",\"def\",\"rec\",\"crit\"];let g;if(e.params){let a,s;[s,f.atk,f.def,f.rec,f.crit,f.turnDuration,...a]=c(e),f.element=t[s]||L.Unknown,g=Z(a,6,i)}else{const a=e[\"element buffed\"];f.element=\"all\"===a?L.All:a||L.Unknown;const t=Object.keys(e);F.forEach(a=>{const i=t.find(e=>e.startsWith(a+\"% buff\"));i&&(f[a]=e[i])}),f.turnDuration=e[\"buff turns\"]}F.concat([\"turnDuration\"]).forEach(e=>{f[e]=Y(f[e])});const m=F.some(e=>0!==f[e]),D=[];return m?F.forEach(e=>{const a=f[e];if(0!==a){const t=Object.assign({id:\"proc:5:regular or elemental-\"+e,originalId:s,sources:r,effectDelay:u,duration:f.turnDuration,value:a},o);f.element!==L.All&&(t.conditions={targetElements:[f.element]}),D.push(t)}}):p(a,f.turnDuration,i)&&D.push(l({originalId:s,sources:r,buffs:F.map(e=>\"proc:5:regular or elemental-\"+e),duration:f.turnDuration,targetData:o})),d(D,g,{originalId:s,sources:r,targetData:o,effectDelay:u}),D}),e.set(\"6\",(e,a,t)=>{const i=\"6\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),u={bc:\"0\",hc:\"0\",item:\"0\",turnDuration:\"0\"},f=[\"bc\",\"hc\",\"item\"];let F;if(e.params){let a;[u.bc,u.hc,u.item,u.turnDuration,...a]=c(e),F=Z(a,4,t)}else u.bc=e[\"bc drop rate% buff (10)\"],u.hc=e[\"hc drop rate% buff (9)\"],u.item=e[\"item drop rate% buff (11)\"],u.turnDuration=e[\"drop buff rate turns\"];f.concat([\"turnDuration\"]).forEach(e=>{u[e]=Y(u[e])});const g=f.some(e=>0!==u[e]),m=[];return g?f.forEach(e=>{const a=u[e];0!==a&&m.push(Object.assign({id:\"proc:6:drop boost-\"+e,originalId:i,sources:o,effectDelay:r,duration:u.turnDuration,value:a},s))}):p(a,u.turnDuration,t)&&m.push(l({originalId:i,sources:o,buffs:f.map(e=>\"proc:6:drop boost-\"+e),duration:u.turnDuration,targetData:s})),d(m,F,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"7\",(e,a,t)=>{const i=\"7\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let l,p=0;if(e.params){const[a,...i]=c(e);p=Y(a),l=Z(i,1,t)}else p=Y(e[\"angel idol recover hp%\"]);const u=[Object.assign({id:\"proc:7:guaranteed ko resistance\",originalId:i,sources:o,effectDelay:r,value:p},s)];return d(u,l,{originalId:i,sources:o,targetData:s,effectDelay:r}),u}),e.set(\"8\",(e,a,t)=>{const i=\"8\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let l,p=0,u=0;if(e.params){const[a,i,...s]=c(e);p=Y(a),u=Y(i),l=Z(s,2,t)}else\"max hp increase\"in e&&(p=Y(e[\"max hp increase\"])),\"max hp% increase\"in e&&(u=Y(e[\"max hp% increase\"]));const f=[];return 0!==p&&f.push(Object.assign({id:\"proc:8:max hp boost-flat\",originalId:i,sources:o,effectDelay:r,value:p},s)),0!==u&&f.push(Object.assign({id:\"proc:8:max hp boost-percent\",originalId:i,sources:o,effectDelay:r,value:u},s)),d(f,l,{originalId:i,sources:o,targetData:s,effectDelay:r}),f}),e.set(\"9\",(e,a,i)=>{const s=\"9\",{targetData:o,sources:r,effectDelay:u}=n(e,a,i),f={0:\"atk\",1:\"def\",2:\"rec\"},F=[\"atk\",\"def\",\"rec\"],g={element:L.All,statReductionEntries:[],turnDuration:0};let m;if(e.params){const[a,s,n,o,r,l,d,p,...u]=c(e);g.element=t[a]||L.Unknown,g.turnDuration=Y(p),[[s,n,o],[r,l,d]].forEach(([e,a,t])=>{const i=Y(e)-1,s=Y(a),n=Y(t);3===i?g.statReductionEntries.push(...F.map(e=>({stat:e,value:s,chance:n}))):g.statReductionEntries.push({stat:f[i]||\"unknown\",value:s,chance:n})}),m=Z(u,8,i)}else{const a=e[\"element buffed\"];g.element=\"all\"===a?L.All:a||L.Unknown,[\"buff #1\",\"buff #2\"].forEach(a=>{const t=e[a];if(t){const e=Y(t[\"proc chance%\"]),a=Object.keys(t);F.forEach(i=>{const s=a.find(e=>e.startsWith(i+\"% buff\"));s&&g.statReductionEntries.push({stat:i,value:Y(t[s]),chance:e})})}}),g.turnDuration=Y(e[\"buff turns\"])}const D=[];let E=!1;return g.statReductionEntries.forEach(({stat:e,value:a,chance:t})=>{if(0!==a||0!==t){E=!0;const i=Object.assign({id:\"proc:9:regular or elemental reduction-\"+e,originalId:s,sources:r,effectDelay:u,duration:g.turnDuration,value:{value:a,chance:t}},o);g.element!==L.All&&(i.conditions={targetElements:[g.element]}),D.push(i)}}),!E&&p(a,g.turnDuration,i)&&D.push(l({originalId:s,sources:r,buffs:F.map(e=>\"proc:9:regular or elemental reduction-\"+e),duration:g.turnDuration,targetData:o})),d(D,m,{originalId:s,sources:r,targetData:o,effectDelay:u}),D}),e.set(\"10\",(e,a,t)=>{const i=\"10\",{targetData:o,sources:r,effectDelay:l}=n(e,a,t),p=[];let f;if(e.params){const a=c(e),i=a.slice(0,8),n=a.slice(8);i.filter(e=>\"0\"!==e).forEach(e=>{p.push(s[e]||u.Unknown)}),f=Z(n,8,t)}else Object.values(s).forEach(a=>{\"remove \"+a in e&&p.push(a)}),\"remove all status ailments\"in e&&p.push(u.Unknown);const F=p.map(e=>Object.assign({id:\"proc:10:cleanse-\"+e,originalId:i,sources:r,effectDelay:l,value:!0},o));return d(F,f,{originalId:i,sources:r,targetData:o,effectDelay:l}),F}),e.set(\"11\",(e,a,t)=>{const i=\"11\",{targetData:o,sources:r,effectDelay:l}=n(e,a,t),p=[];let f;if(e.params){let a=c(e);a.length%2!=0&&\"0\"!==a[a.length-1]&&(f=Z(a.slice(-1),a.length-1,t),a=a.slice(0,a.length-1));const i=a.length;for(let e=0;e<i;e+=2){const t=a[e],i=Y(a[e+1]);if(\"0\"!==t||0!==i){const e=s[t]||u.Unknown;p.push({ailment:e,chance:i})}}}else Object.values(s).forEach(a=>{let t;t=a===u.Weak?\"weaken%\":a===u.AttackReduction||a===u.DefenseReduction||a===u.RecoveryReduction?a:a+\"%\",t in e&&p.push({ailment:a,chance:Y(e[t])})});const F=p.map(({ailment:e,chance:a})=>Object.assign({id:\"proc:11:chance inflict-\"+e,originalId:i,sources:r,effectDelay:l,value:a},o));return d(F,f,{originalId:i,sources:r,targetData:o,effectDelay:l}),F}),e.set(\"12\",(e,a,t)=>{const i=\"12\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let l,p=0;if(e.params){const[a,...i]=c(e);p=Y(a),l=Z(i,1,t)}else p=Y(e[\"revive to hp%\"]);const u=[Object.assign({id:\"proc:12:guaranteed revive\",originalId:i,sources:o,effectDelay:r,value:p},s)];return d(u,l,{originalId:i,sources:o,targetData:s,effectDelay:r}),u}),e.set(\"13\",(e,a,t)=>{const i=\"13\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let l=0;const{distribution:p}=f(a),u={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\"};let F;if(e.params){let a,i;[u[\"atk%\"],u.flatAtk,u[\"crit%\"],u[\"bc%\"],u[\"hc%\"],i,...a]=c(e),l=Y(i),F=Z(a,6,t)}else u[\"atk%\"]=e[\"bb atk%\"],u.flatAtk=e[\"bb flat atk\"],u[\"crit%\"]=e[\"bb crit%\"],u[\"bc%\"]=e[\"bb bc%\"],u[\"hc%\"]=e[\"bb hc%\"],l=Y(e.hits);const m=Object.entries(u).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{}),D=[];return(0!==l||0!==p||Object.keys(m).length>0)&&D.push({id:\"proc:13:random attack\",originalId:i,sources:o,effectDelay:r,value:Object.assign(Object.assign({},m),{hits:l,distribution:p}),targetType:s.targetType,targetArea:g.Random}),d(D,F,{originalId:i,sources:o,targetData:s,effectDelay:r}),D}),e.set(\"14\",(e,a,t)=>{const i=\"14\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),{hits:l,distribution:p}=f(a),u={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\",\"drainLow%\":\"0\",\"drainHigh%\":\"0\"};let F;if(e.params){let a;[u[\"atk%\"],u.flatAtk,u[\"crit%\"],u[\"bc%\"],u[\"hc%\"],u[\"dmg%\"],u[\"drainLow%\"],u[\"drainHigh%\"],...a]=c(e),F=Z(a,8,t)}else u[\"atk%\"]=e[\"bb atk%\"],u.flatAtk=e[\"bb flat atk\"],u[\"crit%\"]=e[\"bb crit%\"],u[\"bc%\"]=e[\"bb bc%\"],u[\"hc%\"]=e[\"bb hc%\"],u[\"dmg%\"]=e[\"bb dmg%\"],u[\"drainLow%\"]=e[\"hp drain% low\"],u[\"drainHigh%\"]=e[\"hp drain% high\"];const g=Object.entries(u).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{}),m=[];return(0!==l||0!==p||Object.keys(g).length>0)&&m.push(Object.assign({id:\"proc:14:hp absorb attack\",originalId:i,sources:o,effectDelay:r,value:Object.assign(Object.assign({},g),{hits:l,distribution:p})},s)),d(m,F,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"16\",(e,a,i)=>{const s=\"16\",{targetData:o,sources:r,effectDelay:u}=n(e,a,i);let f,F,g=0,m=0;if(e.params){const[a,s,n,...o]=c(e);f=t[a]||L.Unknown,g=Y(s),m=Y(n),F=Z(o,3,i)}else{const a=Object.keys(e).find(e=>e.startsWith(\"mitigate\"));f=a&&Object.values(t).find(e=>a.includes(e))||L.Unknown,a&&(g=Y(e[a])),m=Y(e[\"buff turns\"])}const D=[];return 0!==g?D.push(Object.assign({id:\"proc:16:mitigate-\"+f,originalId:s,sources:r,effectDelay:u,duration:m,value:g},o)):p(a,m,i)&&D.push(l({originalId:s,sources:r,buffs:Object.values(t).concat([L.Unknown]).map(e=>\"proc:16:mitigate-\"+e),duration:m,targetData:o})),d(D,F,{originalId:s,sources:r,targetData:o,effectDelay:u}),D}),e.set(\"17\",(e,a,t)=>{const i=\"17\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),f=[u.Poison,u.Weak,u.Sick,u.Injury,u.Curse,u.Paralysis],F={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\"};let g,m=0;if(e.params){let a,i;[F.poison,F.weak,F.sick,F.injury,F.curse,F.paralysis,a,...i]=c(e),m=Y(a),g=Z(i,7,t)}else{const a=Object.keys(e).filter(e=>e.startsWith(\"resist\"));f.forEach(t=>{const i=a.find(e=>e.includes(t));i&&(F[t]=e[i])}),m=Y(e[\"resist status ails turns\"])}const D=[];return f.forEach(e=>{const a=Y(F[e]);0!==a&&D.push(Object.assign({id:\"proc:17:resist-\"+e,originalId:i,sources:o,effectDelay:r,value:a,duration:m},s))}),0===D.length&&p(a,m,t)&&D.push(l({originalId:i,sources:o,buffs:f.map(e=>\"proc:17:resist-\"+e),duration:m,targetData:s})),d(D,g,{originalId:i,sources:o,targetData:s,effectDelay:r}),D}),e.set(\"18\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectValueKey:\"dmg% reduction\",effectTurnDurationKey:\"dmg% reduction turns (36)\",buffId:\"proc:18:mitigation\",originalId:\"18\"})),e.set(\"19\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectValueKey:\"increase bb gauge gradual\",effectTurnDurationKey:\"increase bb gauge gradual turns (37)\",parseParamValue:e=>Y(e)/100,buffId:\"proc:19:gradual bc fill\",originalId:\"19\"})),e.set(\"20\",(e,a,t)=>m({effect:e,context:a,injectionContext:t,originalId:\"20\",buffId:\"proc:20:bc fill on hit\",effectKeyLow:\"bc fill when attacked low\",effectKeyHigh:\"bc fill when attacked high\",effectKeyChance:\"bc fill when attacked%\",effectTurnDurationKey:\"bc fill when attacked turns (38)\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>Y(e)/100,generateConditions:()=>({whenAttacked:!0})})),e.set(\"22\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectValueKey:\"defense% ignore\",effectTurnDurationKey:\"defense% ignore turns (39)\",buffId:\"proc:22:defense ignore\",originalId:\"22\"})),e.set(\"23\",(e,a,t)=>{const i=\"23\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let u,f=0,F=0;if(e.params){const a=c(e);f=Y(a[0]),F=Y(a[6]);u=Z([\"0\",...a.slice(1,6),\"0\",...a.slice(7)],0,t)}else f=Y(e[\"spark dmg% buff (40)\"]),F=Y(e[\"buff turns\"]);const g=[];return 0!==f?g.push(Object.assign({id:\"proc:23:spark damage\",originalId:i,sources:o,effectDelay:r,duration:F,value:f},s)):p(a,F,t)&&g.push(l({originalId:i,sources:o,buffs:[\"proc:23:spark damage\"],duration:F,targetData:s})),d(g,u,{originalId:i,sources:o,targetData:s,effectDelay:r}),g}),e.set(\"24\",(e,a,t)=>{const i=\"24\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),u=[\"atk\",\"def\",\"rec\"],f={1:\"atk\",2:\"def\",3:\"rec\",4:\"hp\"},F={attack:\"atk\",defense:\"def\",recovery:\"rec\",hp:\"hp\"},g={atk:\"0\",def:\"0\",rec:\"0\"};let m,D=0,E=\"unknown\";if(e.params){let a,i,s;[i,g.atk,g.def,g.rec,s,...a]=c(e),E=f[i]||\"unknown\",D=Y(s),m=Z(a,5,t)}else{const a=e[\"converted attribute\"];E=a in F?F[a]:\"unknown\";const t=Object.keys(e);u.forEach(a=>{const i=t.find(e=>e.startsWith(a+\"% buff\"));i&&(g[a]=e[i])}),D=Y(e[\"% converted turns\"])}const U=[];return u.forEach(e=>{const a=Y(g[e]);0!==a&&U.push(Object.assign({id:\"proc:24:converted-\"+e,originalId:i,sources:o,effectDelay:r,duration:D,value:{convertedStat:E,value:a}},s))}),0===U.length&&p(a,D,t)&&U.push(l({originalId:i,sources:o,buffs:u.map(e=>\"proc:24:converted-\"+e),duration:D,targetData:s})),d(U,m,{originalId:i,sources:o,targetData:s,effectDelay:r}),U}),e.set(\"26\",(e,a,t)=>{const i=\"26\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let u,f=0,F=0,g=0;if(e.params){const a=c(e);f=Y(a[0]),F=Y(a[2]),g=Y(a[7]);u=Z([\"0\",a[1],\"0\",...a.slice(3,7),\"0\",...a.slice(8)],0,t)}else f=Y(e[\"hit increase/hit\"]),F=Y(e[\"extra hits dmg%\"]),g=Y(e[\"hit increase buff turns (50)\"]);const m=[];return 0!==f||0!==F?m.push(Object.assign({id:\"proc:26:hit count boost\",originalId:i,sources:o,effectDelay:r,duration:g,value:{hitIncreasePerHit:f,extraHitDamage:F}},s)):p(a,g,t)&&m.push(l({originalId:i,sources:o,buffs:[\"proc:26:hit count boost\"],duration:g,targetData:s})),d(m,u,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"27\",(e,a,t)=>{const i=\"27\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),{hits:l,distribution:p}=f(a),u={\"hpDamageLow%\":\"0\",\"hpDamageHigh%\":\"0\",\"hpDamageChance%\":\"0\",\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let F;if(e.params){let a;[u[\"hpDamageLow%\"],u[\"hpDamageHigh%\"],u[\"hpDamageChance%\"],u[\"atk%\"],u.flatAtk,u[\"crit%\"],u[\"bc%\"],u[\"hc%\"],u[\"dmg%\"],...a]=c(e),F=Z(a,9,t)}else u[\"hpDamageLow%\"]=e[\"hp% damage low\"],u[\"hpDamageHigh%\"]=e[\"hp% damage high\"],u[\"hpDamageChance%\"]=e[\"hp% damage chance%\"],u[\"atk%\"]=e[\"bb atk%\"],u.flatAtk=e[\"bb flat atk\"],u[\"crit%\"]=e[\"bb crit%\"],u[\"bc%\"]=e[\"bb bc%\"],u[\"hc%\"]=e[\"bb hc%\"],u[\"dmg%\"]=e[\"bb dmg%\"];const g=Object.entries(u).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{}),m=[];return(0!==l||0!==p||Object.keys(g).length>0)&&m.push(Object.assign({id:\"proc:27:proportional attack\",originalId:i,sources:o,effectDelay:r,value:Object.assign(Object.assign({},g),{hits:l,distribution:p})},s)),d(m,F,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"28\",(e,a,t)=>{const i=\"28\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),{hits:l,distribution:p}=f(a);let u,F=0;if(e.params){const[a,...i]=c(e);F=Y(a),u=Z(i,1,t)}else F=Y(e[\"fixed damage\"]);const g=[];if(0!==l||0!==p||0!==F){const e=Object.assign({id:\"proc:28:fixed attack\",originalId:i,sources:o,effectDelay:r,value:{hits:l,distribution:p}},s);0!==F&&(e.value.value=F),g.push(e)}return d(g,u,{originalId:i,sources:o,targetData:s,effectDelay:r}),g}),e.set(\"29\",(e,a,i)=>{const s=\"29\",{targetData:o,sources:r,effectDelay:l}=n(e,a,i),{hits:p,distribution:u}=f(a),F={\"atk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let g,m=[];if(e.params){let a,s,n,o;[a,s,n,F[\"atk%\"],F.flatAtk,F[\"crit%\"],F[\"bc%\"],F[\"hc%\"],F[\"dmg%\"],...o]=c(e),[a,s,n].forEach(e=>{\"0\"!==e&&m.push(t[e]||L.Unknown),g=Z(o,9,i)})}else Array.isArray(e[\"bb elements\"])&&(m=e[\"bb elements\"].slice()),F[\"atk%\"]=e[\"bb atk%\"],F.flatAtk=e[\"bb flat atk\"],F[\"crit%\"]=e[\"bb crit%\"],F[\"bc%\"]=e[\"bb bc%\"],F[\"hc%\"]=e[\"bb hc%\"],F[\"dmg%\"]=e[\"bb dmg%\"];const D=Object.entries(F).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{}),E=[];if(0!==p||0!==u||m.length>0||Object.keys(D).length>0){const e=Object.assign({id:\"proc:29:multi-element attack\",originalId:s,sources:r,effectDelay:l,value:Object.assign(Object.assign({},D),{hits:p,distribution:u})},o);m.length>0&&(e.value.elements=m),E.push(e)}return d(E,g,{originalId:s,sources:r,targetData:o,effectDelay:l}),E}),e.set(\"30\",(e,a,i)=>{const s=\"30\",{targetData:o,sources:r,effectDelay:u}=n(e,a,i);let f,F=[],g=0;if(e.params){const a=c(e);F=a.slice(0,6).filter(e=>\"0\"!==e).map(e=>t[e]||L.Unknown),g=Y(a[6]),f=Z(a.slice(7),7,i)}else\"elements added\"in e&&(F=Array.isArray(e[\"elements added\"])?e[\"elements added\"]:[L.Unknown]),g=Y(e[\"elements added turns\"]);const m=[],D=Object.values(t).filter(e=>e!==L.All);return F.length>0?F.forEach(e=>{const a=D.includes(e)?e:L.Unknown;m.push(Object.assign({id:\"proc:30:add element-\"+a,originalId:s,sources:r,effectDelay:u,duration:g},o))}):p(a,g,i)&&m.push(l({originalId:s,sources:r,buffs:D.concat([L.Unknown]).map(e=>\"proc:30:add element-\"+e),duration:g,targetData:o})),d(m,f,{originalId:s,sources:r,targetData:o,effectDelay:u}),m}),e.set(\"31\",(e,a,t)=>{const i=\"31\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let l,p=0,u=0;if(e.params){const[a,i,...s]=c(e);p=Y(a)/100,u=Y(i),l=Z(s,2,t)}else\"increase bb gauge\"in e&&(p=Y(e[\"increase bb gauge\"]));const f=[];return 0!==p&&f.push(Object.assign({id:\"proc:31:bc fill-flat\",originalId:i,sources:o,effectDelay:r,value:p},s)),0!==u&&f.push(Object.assign({id:\"proc:31:bc fill-percent\",originalId:i,sources:o,effectDelay:r,value:u},s)),d(f,l,{originalId:i,sources:o,targetData:s,effectDelay:r}),f}),e.set(\"32\",(e,a,t)=>{const s=\"32\",{targetData:o,sources:r,effectDelay:l}=n(e,a,t);let p,u;if(e.params){const[a,...s]=c(e);a&&\"0\"!==a&&(p=i[a]||L.Unknown),u=Z(s,1,t)}else{const a=e[\"set attack element attribute\"];if(a){const e=Object.values(i).find(e=>a===e);p=e&&e!==L.All?e:L.Unknown}}const f=[];return p&&f.push(Object.assign({id:\"proc:32:element shift-\"+p,originalId:s,sources:r,effectDelay:l,value:!0},o)),d(f,u,{originalId:s,sources:r,targetData:o,effectDelay:l}),f}),e.set(\"33\",(e,a,t)=>{const i=\"33\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let l,p=0;if(e.params){const[a,...i]=c(e);p=Y(a),l=Z(i,1,t)}else p=Y(e[\"clear buff chance%\"]);const u=[];return 0!==p&&u.push(Object.assign({id:\"proc:33:buff wipe\",originalId:i,sources:o,effectDelay:r,value:p},s)),d(u,l,{originalId:i,sources:o,targetData:s,effectDelay:r}),u}),e.set(\"34\",(e,a,t)=>{const i=\"34\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let l,p=0,u=0,f=0,F=0,g=0;if(e.params){const[a,i,s,n,o,...r]=c(e);p=Y(a)/100,u=Y(i)/100,f=Y(s),F=Y(n),g=Y(o),l=Z(r,5,t)}else p=Y(e[\"base bb gauge reduction low\"]),u=Y(e[\"base bb gauge reduction high\"]),f=Y(e[\"bb gauge% reduction low\"]),F=Y(e[\"bb gauge% reduction high\"]),g=Y(e[\"bb gauge reduction chance%\"]);const m=[];return 0===p&&0===u||m.push(Object.assign({id:\"proc:34:bc drain-flat\",originalId:i,sources:o,effectDelay:r,value:{drainLow:p,drainHigh:u,chance:g}},s)),0===f&&0===F||m.push(Object.assign({id:\"proc:34:bc drain-percent\",originalId:i,sources:o,effectDelay:r,value:{drainLow:f,drainHigh:F,chance:g}},s)),d(m,l,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"36\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectValueKey:\"invalidate LS chance%\",effectTurnDurationKey:\"invalidate LS turns (60)\",buffId:\"proc:36:ls lock\",originalId:\"36\"})),e.set(\"37\",(e,a,t)=>{const i=\"37\",{targetData:s,sources:c,effectDelay:r}=n(e,a,t),[l,p=\"\",u,f,...F]=o(e),g=Y(u),m=Y(f),D=Z(F,4,t),E=[];return(l||p)&&E.push(Object.assign({id:\"proc:37:summon\",originalId:i,sources:c,effectDelay:r,value:{summonGroup:l,summonId:p,positionX:g,positionY:m}},s)),d(E,D,{originalId:i,sources:c,targetData:s,effectDelay:r}),E}),e.set(\"38\",(e,a,t)=>{const i=\"38\",{targetData:o,sources:r,effectDelay:l}=n(e,a,t),p=[];let f;if(e.params){const a=c(e),i=a.slice(0,9),n=a.slice(9);i.filter(e=>\"0\"!==e).forEach(e=>{p.push(s[e]||u.Unknown)}),f=Z(n,9,t)}else if(Array.isArray(e[\"ailments cured\"])){const a=e[\"ailments cured\"];if(Object.values(s).forEach(e=>{const t=e!==u.Weak?e:\"weaken\";a.includes(t)&&p.push(e)}),a.length>p.length){const e=a.length-p.length;for(let a=0;a<e;++a)p.push(u.Unknown)}}const F=p.map(e=>Object.assign({id:\"proc:38:cleanse-\"+e,originalId:i,sources:r,effectDelay:l,value:!0},o));return d(F,f,{originalId:i,sources:r,targetData:o,effectDelay:l}),F}),e.set(\"39\",(e,a,t)=>{const s=\"39\",{targetData:o,sources:r,effectDelay:u}=n(e,a,t),f=[];let F,g=0,m=0;if(e.params){const a=c(e),s=a.slice(0,6);g=Y(a[6]),m=Y(a[7]),s.forEach(e=>{\"0\"!==e&&f.push(i[e]||L.Unknown)}),F=Z(a.slice(8),8,t)}else Object.values(i).forEach(a=>{e[`mitigate ${a} attacks`]&&f.push(a)}),g=Y(e[\"dmg% mitigation for elemental attacks\"]),m=Y(e[\"dmg% mitigation for elemental attacks buff turns\"]);const D=[];return f.length>0?f.forEach(e=>{D.push(Object.assign({id:\"proc:39:mitigate-\"+e,originalId:s,sources:r,effectDelay:u,duration:m,value:g},o))}):0!==g?D.push(Object.assign({id:\"proc:39:mitigate-unknown\",originalId:s,sources:r,effectDelay:u,duration:m,value:g},o)):p(a,m,t)&&D.push(l({originalId:s,sources:r,buffs:Object.values(i).concat([L.Unknown]).map(e=>\"proc:39:mitigate-\"+e),duration:m,targetData:o})),d(D,F,{originalId:s,sources:r,targetData:o,effectDelay:u}),D}),e.set(\"40\",(e,a,t)=>{const i=\"40\",{targetData:o,sources:r,effectDelay:f}=n(e,a,t),F=[];let g,m=0;if(e.params){const a=c(e);for(let e=0;e<8;e+=2){const t=a[e],i=Y(a[e+1]);if(\"0\"!==t||0!==i){const e=s[t]||u.Unknown;F.push({ailment:e,chance:i})}}m=Y(a[8]),g=Z(a.slice(9),9,t)}else Object.values(s).forEach(a=>{let t;t=a===u.Weak?\"weaken% buff\":a===u.AttackReduction||a===u.DefenseReduction||a===u.RecoveryReduction?a+\" buff\":a+\"% buff\",t in e&&F.push({ailment:a,chance:Y(e[t])})}),m=Y(e[\"buff turns\"]);const D=F.map(({ailment:e,chance:a})=>Object.assign({id:\"proc:40:add ailment-\"+e,originalId:i,sources:r,effectDelay:f,duration:m,value:a},o));return 0===D.length&&p(a,m,t)&&D.push(l({originalId:i,sources:r,duration:m,buffs:Object.values(s).concat([u.Unknown]).map(e=>\"proc:40:add ailment-\"+e),targetData:o})),d(D,g,{originalId:i,sources:r,targetData:o,effectDelay:f}),D}),e.set(\"42\",(e,a,t)=>{const i=\"42\",{targetData:s,sources:c,effectDelay:r}=n(e,a,t),{hits:l,distribution:p}=f(a),[u,F,m,...E]=o(e),U={\"atkLow%\":u,\"atkHigh%\":F,flatAtk:m},B=Z(E,3,t),v=Object.entries(U).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{});let T;return T=0!==l||0!==p||Object.keys(v).length>0?[Object.assign({id:\"proc:42:sacrificial attack\",originalId:i,sources:c,effectDelay:r,value:Object.assign(Object.assign({},v),{hits:l,distribution:p})},s),{id:\"proc:42:instant death\",originalId:i,sources:c,effectDelay:r,value:!0,targetArea:g.Single,targetType:D.Self}]:[],d(T,B,{originalId:i,sources:c,targetData:s,effectDelay:r}),T}),e.set(\"43\",(e,a,t)=>{const i=\"43\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let l,p=0;if(e.params){const[a,...i]=c(e);p=Y(a),l=Z(i,1,t)}else p=Y(e[\"increase od gauge%\"]);const u=[];return 0!==p&&u.push(Object.assign({id:\"proc:43:burst od fill\",originalId:i,sources:o,effectDelay:r,value:p},s)),d(u,l,{originalId:i,sources:o,targetData:s,effectDelay:r}),u}),e.set(\"44\",(e,a,t)=>{const i=\"44\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),u={\"atk%\":\"0\",flatAtk:\"0\",\"dmg%\":\"0\"};let f,F=!1,g=0,m=0;if(e.params){let a,i,s,n;[u[\"atk%\"],u.flatAtk,u[\"dmg%\"],i,s,n,...a]=c(e),F=\"1\"!==i,g=Y(s),m=Y(n),f=Z(a,6,t)}else u[\"atk%\"]=e[\"dot atk%\"],u.flatAtk=e[\"dot flat atk\"],u[\"dmg%\"]=e[\"dot dmg%\"],F=!!e[\"dot element affected\"],g=Y(e[\"dot unit index\"]),m=Y(e[\"dot turns (71)\"]);const D=Object.entries(u).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{}),E=[];return Object.keys(D).length>0?E.push(Object.assign({id:\"proc:44:damage over time\",originalId:i,sources:o,effectDelay:r,duration:m,value:Object.assign(Object.assign({},D),{affectsElement:F,unitIndex:g})},s)):p(a,m,t)&&E.push(l({originalId:i,sources:o,buffs:[\"proc:44:damage over time\"],duration:m,targetData:s})),d(E,f,{originalId:i,sources:o,targetData:s,effectDelay:r}),E}),e.set(\"45\",(e,a,t)=>{const i=\"45\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let u,f=0,F=0,g=0,m=0;if(e.params){const[a,i,s,n,...o]=c(e);f=Y(a),F=Y(i),g=Y(s),m=Y(n),u=Z(o,4,t)}else f=Y(e[\"bb atk% buff\"]),F=Y(e[\"sbb atk% buff\"]),g=Y(e[\"ubb atk% buff\"]),m=Y(e[\"buff turns (72)\"]);const D=[];return 0!==f&&D.push(Object.assign({id:\"proc:45:attack boost-bb\",originalId:i,sources:o,effectDelay:r,duration:m,value:f},s)),0!==F&&D.push(Object.assign({id:\"proc:45:attack boost-sbb\",originalId:i,sources:o,effectDelay:r,duration:m,value:F},s)),0!==g&&D.push(Object.assign({id:\"proc:45:attack boost-ubb\",originalId:i,sources:o,effectDelay:r,duration:m,value:g},s)),0===D.length&&p(a,m,t)&&D.push(l({originalId:i,sources:o,buffs:[\"bb\",\"sbb\",\"ubb\"].map(e=>\"proc:45:attack boost-\"+e),duration:m,targetData:s})),d(D,u,{originalId:i,sources:o,targetData:s,effectDelay:r}),D}),e.set(\"46\",(e,a,t)=>{const i=\"46\",{targetData:s,sources:c,effectDelay:r}=n(e,a,t),{hits:l,distribution:p}=f(a),[u,F,...g]=o(e),m=Y(u),D=Y(F),E=Z(g,2,t),U=[];if(0!==m||0!==D||0!==l||0!==p){const e=Object.assign({id:\"proc:46:non-lethal proportional attack\",originalId:i,sources:c,effectDelay:r,value:{hits:l,distribution:p}},s);0===m&&0===D||(e.value={\"hpDamageLow%\":m,\"hpDamageHigh%\":D,hits:l,distribution:p}),U.push(e)}return d(U,E,{originalId:i,sources:c,targetData:s,effectDelay:r}),U}),e.set(\"47\",(e,a,t)=>{const i=\"47\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),{hits:l,distribution:p}=f(a),u={\"baseAtk%\":\"0\",\"maxAddedAtk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let F,g=\"unknown\";if(e.params){let a,i,s;[u[\"baseAtk%\"],i,s,u.flatAtk,u[\"crit%\"],u[\"bc%\"],u[\"hc%\"],u[\"dmg%\"],...a]=c(e),u[\"maxAddedAtk%\"]=Y(i)-Y(u[\"baseAtk%\"]),g=\"1\"===s?\"lost\":\"remaining\",F=Z(a,8,t)}else u[\"baseAtk%\"]=e[\"bb base atk%\"],u[\"maxAddedAtk%\"]=e[\"bb added atk% based on hp\"],g=e[\"bb added atk% proportional to hp\"]||\"unknown\",u.flatAtk=e[\"bb flat atk\"],u[\"crit%\"]=e[\"bb crit%\"],u[\"bc%\"]=e[\"bb bc%\"],u[\"hc%\"]=e[\"bb hc%\"],u[\"dmg%\"]=e[\"bb dmg%\"];const m=Object.entries(u).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{}),D=[];return(0!==l||0!==p||Object.keys(m).length>0)&&D.push(Object.assign({id:\"proc:47:hp scaled attack\",originalId:i,sources:o,effectDelay:r,value:Object.assign(Object.assign({},m),{proportionalMode:g,hits:l,distribution:p})},s)),d(D,F,{originalId:i,sources:o,targetData:s,effectDelay:r}),D}),e.set(\"48\",(e,a,t)=>{const i=\"48\",{targetData:s,sources:c,effectDelay:r}=n(e,a,t),{hits:l,distribution:p}=f(a),[u,F,g,m,D,E,U,...B]=o(e),v=Y(u),T=Y(F),b=Y(g),k=Y(m),A=Y(D),R=Y(E),h=\"1\"===U,_=Z(B,7,t),I=[],y=(e,a)=>Object.assign({id:\"proc:48:piercing attack-\"+e,originalId:i,sources:c,effectDelay:r,value:Object.assign(Object.assign({},a),{isLethal:h,chance:R,hits:l,distribution:p})},s);return 0===v&&0===T||I.push(y(\"base\",{\"hpDamageLow%\":v,\"hpDamageHigh%\":T})),0===b&&0===k||I.push(y(\"current\",{\"hpDamageLow%\":b,\"hpDamageHigh%\":k})),0!==A&&I.push(y(\"fixed\",{value:A})),0!==I.length||0===l&&0===p||I.push(y(\"unknown\",{})),d(I,_,{originalId:i,sources:c,targetData:s,effectDelay:r}),I}),e.set(\"49\",(e,a,t)=>{const i=\"49\",{targetData:s,sources:c,effectDelay:r}=n(e,a,t),[l,...p]=o(e),u=Y(l),f=Z(p,1,t),F=[];return 0!==u&&F.push(Object.assign({id:\"proc:49:chance instant death\",originalId:i,sources:c,effectDelay:r,value:u},s)),d(F,f,{originalId:i,sources:c,targetData:s,effectDelay:r}),F}),e.set(\"50\",(e,a,t)=>{const i=\"50\",{targetData:s,sources:c,effectDelay:r}=n(e,a,t),[u,f,F,g,...m]=o(e),D=Y(u),E=Y(f),U=Y(F),B=Y(g),v=Z(m,4,t),T=[];return 0!==D||0!==E?T.push(Object.assign({id:\"proc:50:chance damage reflect\",originalId:i,sources:c,effectDelay:r,duration:B,value:{\"reflectedDamageLow%\":D,\"reflectedDamageHigh%\":E,chance:U}},s)):p(a,B,t)&&T.push(l({originalId:i,sources:c,buffs:[\"proc:50:chance damage reflect\"],duration:B,targetData:s})),d(T,v,{originalId:i,sources:c,targetData:s,effectDelay:r}),T}),e.set(\"51\",(e,a,t)=>{const i=\"51\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),l=[];let f,F=0,g=0;if(e.params){const a=c(e);[{type:u.AttackReduction,reductionValue:Y(a[0]),chance:Y(a[3])},{type:u.DefenseReduction,reductionValue:Y(a[1]),chance:Y(a[4])},{type:u.RecoveryReduction,reductionValue:Y(a[2]),chance:Y(a[5])}].forEach(({type:e,reductionValue:a,chance:t})=>{0===a&&0===t||l.push({type:e,reductionValue:a,chance:t})}),F=Y(a[6]),g=Y(a[7]),f=Z(a.slice(8),8,t)}else[{type:u.AttackReduction,reductionValueKey:\"inflict atk% debuff (2)\",chanceKey:\"inflict atk% debuff chance% (74)\"},{type:u.DefenseReduction,reductionValueKey:\"inflict def% debuff (4)\",chanceKey:\"inflict def% debuff chance% (75)\"},{type:u.RecoveryReduction,reductionValueKey:\"inflict rec% debuff (6)\",chanceKey:\"inflict rec% debuff chance% (76)\"}].forEach(({type:a,reductionValueKey:t,chanceKey:i})=>{const s=Y(e[t]),n=Y(e[i]);0===s&&0===n||l.push({type:a,reductionValue:s,chance:n})}),F=Y(e[\"stat% debuff turns\"]),g=Y(e[\"buff turns\"]);const m=l.map(({type:e,reductionValue:a,chance:t})=>Object.assign({id:\"proc:51:add to attack-\"+e,originalId:i,sources:o,effectDelay:r,duration:g,value:{reductionValue:a,chance:t,debuffTurnDuration:F}},s));return 0===m.length&&(p(a,g,t)||p(a,F,t))&&m.push(Object.assign({id:G.TURN_DURATION_MODIFICATION,originalId:i,sources:o,value:{buffs:[u.AttackReduction,u.DefenseReduction,u.RecoveryReduction].map(e=>\"proc:51:add to attack-\"+e),duration:g,debuffTurnDuration:F}},s)),d(m,f,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"52\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectValueKey:\"bb gauge fill rate% buff\",effectTurnDurationKey:\"buff turns (77)\",buffId:\"proc:52:bc efficacy\",originalId:\"52\"})),e.set(\"53\",(e,a,t)=>{const i=\"53\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),f=[u.Poison,u.Weak,u.Sick,u.Injury,u.Curse,u.Paralysis],F={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\"};let g,m=0;if(e.params){let a,i;[F.poison,F.weak,F.sick,F.injury,F.curse,F.paralysis,a,...i]=c(e),m=Y(a),g=Z(i,7,t)}else{const a=Object.keys(e).filter(e=>e.startsWith(\"counter inflict\"));f.forEach(t=>{const i=a.find(e=>e.includes(t));i&&(F[t]=e[i])}),m=Y(e[\"counter inflict ailment turns\"])}const D=[];return f.forEach(e=>{const a=Y(F[e]);0!==a&&D.push(Object.assign({id:\"proc:53:inflict on hit-\"+e,originalId:i,sources:o,effectDelay:r,value:a,duration:m,conditions:{whenAttacked:!0}},s))}),0===D.length&&p(a,m,t)&&D.push(l({originalId:i,sources:o,buffs:f.map(e=>\"proc:53:inflict on hit-\"+e),duration:m,targetData:s})),d(D,g,{originalId:i,sources:o,targetData:s,effectDelay:r}),D}),e.set(\"54\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectValueKey:\"crit multiplier%\",effectTurnDurationKey:\"buff turns (84)\",parseParamValue:e=>100*Y(e),buffId:\"proc:54:critical damage boost\",originalId:\"54\"})),e.set(\"55\",(e,a,t)=>{const s=\"55\",{targetData:o,sources:r,effectDelay:u}=n(e,a,t);let f,F,g=0,m=0;if(e.params){const a=c(e);f=a.filter((e,a)=>\"0\"!==e&&a<6).map(e=>i[e]||L.Unknown),g=100*Y(a[6]),m=Y(a[7]),F=Z(a.slice(8),8,t)}else f=Object.values(i).filter(a=>!!e[a+\" units do extra elemental weakness dmg\"]),g=Y(e[\"elemental weakness multiplier%\"]),m=Y(e[\"elemental weakness buff turns\"]);let D=[];return 0!==g?(D=f.map(e=>Object.assign({id:\"proc:55:elemental weakness damage-\"+e,originalId:s,sources:r,effectDelay:u,duration:m,value:g},o)),0===D.length&&D.push(Object.assign({id:\"proc:55:elemental weakness damage-unknown\",originalId:s,sources:r,effectDelay:u,duration:m,value:g},o))):p(a,m,t)&&D.push(l({originalId:s,sources:r,buffs:Object.values(i).concat([L.Unknown]).map(e=>\"proc:55:elemental weakness damage-\"+e),duration:m,targetData:o})),d(D,F,{originalId:s,sources:r,targetData:o,effectDelay:u}),D}),e.set(\"56\",(e,a,t)=>{const i=\"56\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let u,f=0,F=0,g=0;if(e.params){const[a,i,s,...n]=c(e);f=Y(a),F=Y(i),g=Y(s),u=Z(n,3,t)}else f=Y(e[\"angel idol recover chance%\"]),F=Y(e[\"angel idol recover hp%\"]),g=Y(e[\"angel idol buff turns (91)\"]);const m=[];return 0!==f?m.push(Object.assign({id:\"proc:56:chance ko resistance\",originalId:i,sources:o,effectDelay:r,duration:g,value:{\"recoveredHp%\":F,chance:f}},s)):p(a,g,t)&&m.push(l({originalId:i,sources:o,buffs:[\"proc:56:chance ko resistance\"],duration:g,targetData:s})),d(m,u,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"57\",(e,a,t)=>{const i=\"57\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let u,f=0,F=0,g=0,m=0,D=0;if(e.params){const[a,i,s,n,o,...r]=c(e);f=Y(a),F=Y(i),g=Y(s),m=Y(n),D=Y(o),u=Z(r,5,t)}else f=Y(e[\"base bc drop% resist buff\"]),F=Y(e[\"buffed bc drop% resist buff\"]),D=Y(e[\"bc drop% resist buff turns (92)\"]);const E=[];return 0!==f&&E.push(Object.assign({id:\"proc:57:bc drop resistance-base\",originalId:i,sources:o,effectDelay:r,duration:D,value:f},s)),0!==F&&E.push(Object.assign({id:\"proc:57:bc drop resistance-buff\",originalId:i,sources:o,effectDelay:r,duration:D,value:F},s)),0!==g&&E.push(Object.assign({id:\"proc:57:hc drop resistance-base\",originalId:i,sources:o,effectDelay:r,duration:D,value:g},s)),0!==m&&E.push(Object.assign({id:\"proc:57:hc drop resistance-buff\",originalId:i,sources:o,effectDelay:r,duration:D,value:m},s)),0===E.length&&p(a,D,t)&&E.push(l({originalId:i,sources:o,buffs:[\"proc:57:bc drop resistance-base\",\"proc:57:bc drop resistance-buff\",\"proc:57:hc drop resistance-base\",\"proc:57:hc drop resistance-buff\"],duration:D,targetData:s})),d(E,u,{originalId:i,sources:o,targetData:s,effectDelay:r}),E}),e.set(\"58\",(e,a,t)=>{const i=\"58\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let u,f=0,F=0,g=0;if(e.params){const[a,i,s,...n]=c(e);f=Y(a),F=Y(i),g=Y(s),u=Z(n,3,t)}else f=Y(e[\"spark dmg% received\"]),F=Y(e[\"spark dmg received apply%\"]),g=Y(e[\"spark dmg received debuff turns (94)\"]);const m=[];return 0!==F?m.push(Object.assign({id:\"proc:58:spark vulnerability\",originalId:i,sources:o,effectDelay:r,duration:g,value:{\"sparkDamage%\":f,chance:F}},s)):p(a,g,t)&&m.push(l({originalId:i,sources:o,buffs:[\"proc:58:spark vulnerability\"],duration:g,targetData:s})),d(m,u,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"59\",(e,a,t)=>{const i=\"59\",{targetData:s,sources:c,effectDelay:r}=n(e,a,t),[u,f,F,g,...m]=o(e),D=Y(u),E=Y(f),U=Y(F),B=Y(g),v=Z(m,4,t),T=[];return 0!==D&&T.push(Object.assign({id:\"proc:59:attack reduction-bb\",originalId:i,sources:c,effectDelay:r,duration:B,value:D},s)),0!==E&&T.push(Object.assign({id:\"proc:59:attack reduction-sbb\",originalId:i,sources:c,effectDelay:r,duration:B,value:E},s)),0!==U&&T.push(Object.assign({id:\"proc:59:attack reduction-ubb\",originalId:i,sources:c,effectDelay:r,duration:B,value:U},s)),0===T.length&&p(a,B,t)&&T.push(l({originalId:i,sources:c,buffs:[\"bb\",\"sbb\",\"ubb\"].map(e=>\"proc:59:attack reduction-\"+e),duration:B,targetData:s})),d(T,v,{originalId:i,sources:c,targetData:s,effectDelay:r}),T}),e.set(\"61\",(e,a,t)=>{const i=\"61\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),{hits:l,distribution:p}=f(a),u={\"baseAtk%\":\"0\",\"maxAddedAtk%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let F;if(e.params){let a,i;[u[\"baseAtk%\"],i,u.flatAtk,u[\"crit%\"],u[\"bc%\"],u[\"hc%\"],u[\"dmg%\"],...a]=c(e),u[\"maxAddedAtk%\"]=Y(i),F=Z(a,7,t)}else u[\"baseAtk%\"]=e[\"bb base atk%\"],u[\"maxAddedAtk%\"]=e[\"bb max atk% based on ally bb gauge and clear bb gauges\"],u.flatAtk=e[\"bb flat atk\"],u[\"crit%\"]=e[\"bb crit%\"],u[\"bc%\"]=e[\"bb bc%\"],u[\"hc%\"]=e[\"bb hc%\"],u[\"dmg%\"]=e[\"bb dmg%\"];const m=Object.entries(u).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{});let E;return E=0!==l||0!==p||Object.keys(m).length>0?[Object.assign({id:\"proc:61:party bb gauge-scaled attack\",originalId:i,sources:o,effectDelay:r,value:Object.assign(Object.assign({},m),{hits:l,distribution:p})},s),{id:\"proc:61:party bc drain\",originalId:i,sources:o,effectDelay:r,value:!0,targetArea:g.Aoe,targetType:D.Party}]:[],d(E,F,{originalId:i,sources:o,targetData:s,effectDelay:r}),E}),e.set(\"62\",(e,a,i)=>{const s=\"62\",{targetData:o,sources:r,effectDelay:l}=n(e,a,i);let p,u,f=0,F=0,g=0;if(e.params){const[a,s,n,o,...r]=c(e);p=t[a]||L.Unknown,f=Y(s),F=Y(n),g=Y(o),u=Z(r,4,i)}else{const a=e[\"elemental barrier element\"];p=a&&Object.values(t).find(e=>e===a)||L.Unknown,f=Y(e[\"elemental barrier hp\"]),F=Y(e[\"elemental barrier def\"]),g=Y(e[\"elemental barrier absorb dmg%\"])}const m=[];return 0===f&&0===F&&0===g||m.push(Object.assign({id:\"proc:62:barrier-\"+p,originalId:s,sources:r,effectDelay:l,value:{hp:f,defense:F,\"damageAbsorption%\":g}},o)),d(m,u,{originalId:s,sources:r,targetData:o,effectDelay:l}),m}),e.set(\"64\",(e,a,t)=>{const i=\"64\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),{hits:l,distribution:p}=f(a),u={\"atk%\":\"0\",\"addedAtkPerUse%\":\"0\",maxIncreases:\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let F;if(e.params){let a;[u[\"atk%\"],u[\"addedAtkPerUse%\"],u.maxIncreases,u.flatAtk,u[\"crit%\"],u[\"bc%\"],u[\"hc%\"],u[\"dmg%\"],...a]=c(e),F=Z(a,8,t)}else u[\"atk%\"]=e[\"bb atk%\"],u[\"addedAtkPerUse%\"]=e[\"bb atk% inc per use\"],u.maxIncreases=e[\"bb atk% max number of inc\"],u.flatAtk=e[\"bb flat atk\"],u[\"crit%\"]=e[\"bb crit%\"],u[\"bc%\"]=e[\"bb bc%\"],u[\"hc%\"]=e[\"bb hc%\"],u[\"dmg%\"]=e[\"bb dmg%\"];const g=Object.entries(u).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{}),m=[];return(0!==l||0!==p||Object.keys(g).length>0)&&m.push(Object.assign({id:\"proc:64:consecutive usage attack\",originalId:i,sources:o,effectDelay:r,value:Object.assign(Object.assign({},g),{hits:l,distribution:p})},s)),d(m,F,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"65\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectValueKey:\"atk% buff when enemy has ailment\",effectTurnDurationKey:\"atk% buff turns (110)\",buffId:\"proc:65:ailment attack boost\",originalId:\"65\"})),e.set(\"66\",(e,a,t)=>{const i=\"66\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let l,p=0,u=0;if(e.params){const[a,i,...s]=c(e);p=Y(a),u=Y(i),l=Z(s,2,t)}else p=Y(e[\"revive unit hp%\"]),u=Y(e[\"revive unit chance%\"]);const f=[];return 0!==u&&f.push(Object.assign({id:\"proc:66:chance revive\",originalId:i,sources:o,effectDelay:r,value:{\"reviveToHp%\":p,chance:u}},s)),d(f,l,{originalId:i,sources:o,targetData:s,effectDelay:r}),f}),e.set(\"67\",(e,a,t)=>m({effect:e,context:a,injectionContext:t,originalId:\"67\",buffId:\"proc:67:bc fill on spark\",effectKeyLow:\"bc fill on spark low\",effectKeyHigh:\"bc fill on spark high\",effectKeyChance:\"bc fill on spark%\",effectTurnDurationKey:\"bc fill on spark buff turns (111)\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>Y(e)/100})),e.set(\"68\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectValueKey:\"guard increase mitigation%\",effectTurnDurationKey:\"guard increase mitigation buff turns (113)\",buffId:\"proc:68:guard mitigation\",originalId:\"68\"})),e.set(\"69\",(e,a,t)=>{const i=\"69\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let u,f=0,F=0,g=0;if(e.params){const[a,i,s,...n]=c(e);f=Y(a)/100,F=Y(i),g=Y(s),u=Z(n,3,t)}else\"bb bc fill on guard\"in e&&(f=Y(e[\"bb bc fill on guard\"])),\"bb bc fill% on guard\"in e&&(F=Y(e[\"bb bc fill% on guard\"])),g=Y(e[\"bb bc fill on guard buff turns (114)\"]);const m=[];return 0!==f&&m.push(Object.assign({id:\"proc:69:bc fill on guard-flat\",originalId:i,sources:o,effectDelay:r,duration:g,value:f,conditions:{onGuard:!0}},s)),0!==F&&m.push(Object.assign({id:\"proc:69:bc fill on guard-percent\",originalId:i,sources:o,effectDelay:r,duration:g,value:F,conditions:{onGuard:!0}},s)),0===m.length&&p(a,g,t)&&m.push(l({originalId:i,sources:o,buffs:[\"proc:69:bc fill on guard-flat\",\"proc:69:bc fill on guard-percent\"],duration:g,targetData:s})),d(m,u,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"71\",(e,a,t)=>F({effect:e,context:a,injectionContext:t,effectValueKey:\"bb fill inc%\",effectTurnDurationKey:\"bb fill inc buff turns (112)\",buffId:\"proc:71:bc efficacy reduction\",originalId:\"71\"})),e.set(\"73\",(e,a,t)=>{const i=\"73\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),f=[u.AttackReduction,u.DefenseReduction,u.RecoveryReduction],F={[u.AttackReduction]:\"0\",[u.DefenseReduction]:\"0\",[u.RecoveryReduction]:\"0\"};let g,m=0;if(e.params){let a,i;[F[u.AttackReduction],F[u.DefenseReduction],F[u.RecoveryReduction],a,...i]=c(e),m=Y(a),g=Z(i,4,t)}else{const a=Object.keys(e).filter(e=>e.includes(\"resist%\"));f.forEach(t=>{const i=a.find(e=>e.includes(t));i&&(F[t]=e[i])}),m=Y(e[\"stat down immunity buff turns\"])}const D=[];return f.forEach(e=>{const a=Y(F[e]);0!==a&&D.push(Object.assign({id:\"proc:73:resist-\"+e,originalId:i,sources:o,effectDelay:r,value:a,duration:m},s))}),0===D.length&&p(a,m,t)&&D.push(l({originalId:i,sources:o,buffs:f.map(e=>\"proc:73:resist-\"+e),duration:m,targetData:s})),d(D,g,{originalId:i,sources:o,targetData:s,effectDelay:r}),D}),e.set(\"75\",(e,a,i)=>{const s=\"75\",{targetData:o,sources:r,effectDelay:l}=n(e,a,i),{hits:p,distribution:u}=f(a),F={\"baseAtk%\":\"0\",\"addedAttackPerUnitWithMatchingElement%\":\"0\",flatAtk:\"0\",\"crit%\":\"0\",\"bc%\":\"0\",\"hc%\":\"0\",\"dmg%\":\"0\"};let g,m;if(e.params){let a,s;[s,F[\"baseAtk%\"],F[\"addedAttackPerUnitWithMatchingElement%\"],F.flatAtk,F[\"crit%\"],F[\"bc%\"],F[\"hc%\"],F[\"dmg%\"],...a]=c(e),g=t[s]||L.Unknown,m=Z(a,8,i)}else{const a=e[\"counted element for buff multiplier\"];g=a||L.Unknown,F[\"baseAtk%\"]=e[\"atk% buff (1)\"],F[\"addedAttackPerUnitWithMatchingElement%\"]=e[\"def% buff (3)\"],F.flatAtk=e[\"rec% buff (5)\"],F[\"crit%\"]=e[\"crit% buff (7)\"],F[\"bc%\"]=e[\"buff turns\"]}const D=Object.entries(F).filter(([,e])=>e&&+e).reduce((e,[a,t])=>(e[a]=Y(t),e),{}),E=[];return(0!==p||0!==u||Object.keys(D).length>0)&&E.push(Object.assign({id:\"proc:75:element squad-scaled attack\",originalId:s,sources:r,effectDelay:l,value:Object.assign(Object.assign({},D),{elementToMatch:g,hits:p,distribution:u})},o)),d(E,m,{originalId:s,sources:r,targetData:o,effectDelay:l}),E}),e.set(\"76\",(e,a,t)=>{const i=\"76\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t);let u,f=0,F=0,g=0;if(e.params){const[a,i,s,...n]=c(e);f=Y(a),F=Y(i),g=Y(s),u=Z(n,3,t)}else f=Y(e[\"max number of extra actions\"]),F=Y(e[\"chance% for extra action\"]),g=Y(e[\"extra action buff turns (123)\"]);const m=[];return 0!==F?m.push(Object.assign({id:\"proc:76:extra action\",originalId:i,sources:o,effectDelay:r,duration:g,value:{maxExtraActions:f,chance:F}},s)):p(a,g,t)&&m.push(l({originalId:i,sources:o,buffs:[\"proc:76:extra action\"],duration:g,targetData:s})),d(m,u,{originalId:i,sources:o,targetData:s,effectDelay:r}),m}),e.set(\"78\",(e,a,t)=>{const i=\"78\",{targetData:s,sources:o,effectDelay:r}=n(e,a,t),u={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",turnDuration:\"0\"},f=[\"atk\",\"def\",\"rec\",\"crit\"];let F;if(e.params){let a;[u.atk,u.def,u.rec,u.crit,u.turnDuration,...a]=c(e),F=Z(a,5,t)}else f.forEach(a=>{const t=`self ${a}% buff`;t in e&&(u[a]=e[t])}),u.turnDuration=e[\"self stat buff turns\"];f.concat([\"turnDuration\"]).forEach(e=>{u[e]=Y(u[e])});const g=f.some(e=>0!==u[e]),m=[];return g?f.forEach(e=>{const a=u[e];0!==a&&m.push(Object.assign({id:\"proc:78:self stat boost-\"+e,originalId:i,sources:o,effectDelay:r,duration:u.turnDuration,value:a},s))}):p(a,u.turnDuration,t)&&m.push(l({originalId:i,sources:o,buffs:f.map(e=>\"proc:78:self stat boost-\"+e),duration:u.turnDuration,targetData:s})),d(m,F,{originalId:i,sources:o,targetData:s,effectDelay:r}),m})}(ee)),ee}function se(e,a){if(!e||\"object\"!=typeof e)throw new TypeError(\"effect parameter should be an object\");if(!a||\"object\"!=typeof a)throw new TypeError(\"context parameter should be an object\");const s=H(e)&&t(e),n=s&&ie(a.reloadMapping).get(s);return\"function\"==typeof n?n(e,a):function(e,a){const s=H(e)&&t(e)||i.Unknown;return[{id:G.UNKNOWN_PROC_EFFECT_ID,originalId:s,effectDelay:e[\"effect delay time(ms)/frame\"],targetType:e[\"target type\"],targetArea:e[\"target area\"],sources:V(a)}]}(e,a)}function ne(e){return ae&&!e||(ae=new Map,function(e){const a=(e,{originalId:a,sources:t,targetData:i})=>Object.assign({id:G.UNKNOWN_CONDITIONAL_BUFF_PARAMS,originalId:a,sources:t,value:e},i),t=(e,t,{originalId:i,sources:s,targetData:n})=>{0===e.length&&e.push(J({originalId:i,sources:s})),t&&e.push(a(t,{originalId:i,sources:s,targetData:n}))},i=()=>({targetType:D.Self,targetArea:g.Single}),s=(e,a,t)=>{const s=(t&&t.createSourcesFromContext||V)(a),n=\"string\"==typeof e.params?e.params.split(\"&\"):[];return{targetData:i(),sources:s,splitParams:n,turnDuration:Y(e.turnDuration)}};e.set(\"8\",(e,a,i)=>{const n=\"8\",{targetData:c,sources:o,splitParams:r,turnDuration:l}=s(e,a,i),[d,p,u,...f]=r,F=Y(d),g=Y(p),m=10*(1+Y(u)/100),D=Z(f,3,i),E=[];return 0===F&&0===g||E.push(Object.assign({id:\"conditional:8:gradual heal\",originalId:n,sources:o,duration:l,value:{healLow:F,healHigh:g,\"addedRec%\":m}},c)),t(E,D,{originalId:n,sources:o,targetData:c}),E}),e.set(\"12\",(e,a,i)=>{const n=\"12\",{targetData:c,sources:o,splitParams:r,turnDuration:l}=s(e,a,i),[d,...p]=r,u=Y(d),f=Z(p,1,i),F=[Object.assign({id:\"conditional:12:guaranteed ko resistance\",originalId:n,sources:o,duration:l,value:u},c)];return t(F,f,{originalId:n,sources:o,targetData:c}),F}),e.set(\"36\",(e,a,i)=>{const n=\"36\",{targetData:c,sources:o,splitParams:r,turnDuration:l}=s(e,a,i),[d,...p]=r,u=Y(d),f=Z(p,1,i),F=[];return 0!==u&&F.push(Object.assign({id:\"conditional:36:mitigation\",originalId:n,sources:o,duration:l,value:u},c)),t(F,f,{originalId:n,sources:o,targetData:c}),F}),e.set(\"91\",(e,a,i)=>{const n=\"91\",{targetData:c,sources:o,splitParams:r,turnDuration:l}=s(e,a,i),[d,p,...u]=r,f=Y(d),F=Y(p),g=Z(u,2,i),m=[];return 0!==f&&m.push(Object.assign({id:\"conditional:91:chance ko resistance\",originalId:n,sources:o,duration:l,value:{\"hpRecover%\":F,chance:f}},c)),t(m,g,{originalId:n,sources:o,targetData:c}),m}),e.set(\"133\",(e,a,i)=>{const n=\"133\",{targetData:c,sources:o,splitParams:r,turnDuration:l}=s(e,a,i),[d,p,u,...f]=r,F=Y(d),g=Y(p),m=Y(u),D=Z(f,3,i),E=[];return 0===F&&0===g&&0===m||E.push(Object.assign({id:\"conditional:133:heal on hit\",originalId:n,sources:o,duration:l,value:{healLow:F,healHigh:g,chance:m},conditions:{whenAttacked:!0}},c)),t(E,D,{originalId:n,sources:o,targetData:c}),E}),e.set(\"153\",(e,a,i)=>{const n=\"153\",{targetData:c,sources:o,splitParams:r,turnDuration:l}=s(e,a,i),[d,p,u,...f]=r,F=Y(d),g=Y(p),m=Y(u),D=Z(f,3,i),E=[];return 0===F&&0===g||E.push(Object.assign({id:\"conditional:153:chance inflict atk down on hit\",originalId:n,sources:o,duration:l,value:{reductionValue:F,chance:g,debuffTurnDuration:m},conditions:{whenAttacked:!0}},c)),t(E,D,{originalId:n,sources:o,targetData:c}),E})}(ae)),ae}function ce(e,a){if(!e||\"object\"!=typeof e)throw new TypeError(\"effect parameter should be an object\");if(!a||\"object\"!=typeof a)throw new TypeError(\"context parameter should be an object\");const t=ne(a.reloadMapping).get(e.id);return\"function\"==typeof t?t(e,a):function(e,a){const t=e.id||n.Unknown;return[{id:G.UNKNOWN_CONDITIONAL_EFFECT_ID,originalId:t,sources:V(a)}]}(e,a)}function oe(e){return te&&!e||(te=new Map,function(e){const a=\"unknown passive params\",t={1:k.Fire,2:k.Water,3:k.Earth,4:k.Thunder,5:k.Light,6:k.Dark,X:L.OmniParadigm},i={1:_.Lord,2:_.Anima,3:_.Breaker,4:_.Guardian,5:_.Oracle,6:_.Rex},s={1:u.Poison,2:u.Weak,3:u.Sick,4:u.Injury,5:u.Curse,6:u.Paralysis,7:u.AttackReduction,8:u.DefenseReduction,9:u.RecoveryReduction},n={1:D.Party,2:D.Enemy,3:D.Self},c={1:g.Single,2:g.Aoe},o=[\"atk\",\"def\",\"rec\",\"crit\",\"hp\"],r=[u.Poison,u.Weak,u.Sick,u.Injury,u.Curse,u.Paralysis],l=[\"bc\",\"hc\",\"item\",\"zel\",\"karma\"],d=(e,a,t)=>({conditionInfo:(t&&t.processExtraSkillConditions||q)(e),targetData:(t&&t.getPassiveTargetData||$)(e,a),sources:(t&&t.createSourcesFromContext||V)(a)}),p=(e,a,t)=>(t&&t.convertConditionalEffectToBuffs||ce)(e,a),f=(e,a,t)=>(t&&t.convertProcEffectToBuffs||se)(e,a),F=e=>e.params.split(\",\"),m=e=>{const t=e.params||e[a]||\"\";return F({params:t})},E=(e,{originalId:a,sources:t,targetData:i,conditionInfo:s})=>Object.assign({id:G.UNKNOWN_PASSIVE_BUFF_PARAMS,originalId:a,sources:t,value:e,conditions:Object.assign({},s)},i),U=(e,a,{originalId:t,sources:i,targetData:s,conditionInfo:n})=>{0===e.length&&e.push(J({originalId:t,sources:i})),a&&e.push(E(a,{originalId:t,sources:i,targetData:s,conditionInfo:n}))};let B;!function(e){e.Hp=\"hp\",e.Bb=\"bb gauge\",e.DamageTaken=\"damage taken\"}(B||(B={}));const v=(e,a,t)=>({threshold:Y(e),requireAbove:\"1\"===a,type:t}),T=(e,a,t=\"buff requirement\")=>{let i=0,s=!1;return`${a} above % ${t}`in e?(i=Y(e[`${a} above % ${t}`]),s=!0):(i=Y(e[`${a} below % ${t}`]),s=!1),{threshold:i,requireAbove:s,type:a}},b=({threshold:e,requireAbove:a,type:t})=>{let i;return t===B.Hp?i=a?{hpGreaterThanOrEqualTo:e}:{hpLessThanOrEqualTo:e}:t===B.Bb?i=a?{bbGaugeGreaterThanOrEqualTo:e}:{bbGaugeLessThanOrEqualTo:e}:t===B.DamageTaken&&(i={damageTakenExceeds:e}),i},R=({effect:e,context:a,injectionContext:t,originalId:i,effectKey:s,buffId:n,parseParamValue:c=(e=>Y(e))})=>{const{conditionInfo:o,targetData:r,sources:l}=d(e,a,t),p=e,u=[];let f,g=0;if(p.params){const[e,...a]=F(p);g=c(e),f=Z(a,1,t)}else g=Y(p[s]);return 0!==g&&u.push(Object.assign({id:n,originalId:i,sources:l,value:g,conditions:Object.assign({},o)},r)),U(u,f,{originalId:i,sources:l,targetData:r,conditionInfo:o}),u},h=({effect:e,context:a,injectionContext:t,originalId:i,effectKeyLow:s,effectKeyHigh:n,effectKeyChance:c,buffKeyLow:o,buffKeyHigh:r,defaultEffectChance:l=0,parseParamValue:p=(e=>Y(e)),generateBaseConditions:u=(()=>({})),buffId:f})=>{const{conditionInfo:g,targetData:m,sources:D}=d(e,a,t),E=e;let B,v,T,b;if(E.params){const[e,a,i,...s]=F(E);B=p(e),v=p(a),T=Y(i),b=Z(s,3,t)}else B=Y(E[s]),v=Y(E[n]),T=Y(E[c],l);const k=[];return 0===B&&0===v&&0===T||k.push(Object.assign({id:f,originalId:i,sources:D,value:{[o]:B,[r]:v,chance:T},conditions:Object.assign(Object.assign({},g),u())},m)),U(k,b,{originalId:i,sources:D,targetData:m,conditionInfo:g}),k};e.set(\"1\",(e,a,t)=>{const i=\"1\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),r=e,l=[],p={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let u;if(r.params){let e;[p.atk,p.def,p.rec,p.crit,p.hp,...e]=F(r),u=Z(e,5,t)}else p.hp=r[\"hp% buff\"],p.atk=r[\"atk% buff\"],p.def=r[\"def% buff\"],p.rec=r[\"rec% buff\"],p.crit=r[\"crit% buff\"];return o.forEach(e=>{const a=Y(p[e]);0!==a&&l.push(Object.assign({id:\"passive:1:\"+e,originalId:i,sources:c,value:a,conditions:Object.assign({},s)},n))}),U(l,u,{originalId:i,sources:c,targetData:n,conditionInfo:s}),l}),e.set(\"2\",(e,a,i)=>{const s=\"2\",{conditionInfo:n,targetData:c,sources:r}=d(e,a,i),l=e,p=[],u={elements:[],atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let f;if(l.params){let e,a,s;[a,s,u.atk,u.def,u.rec,u.crit,u.hp,...e]=F(l),[a,s].forEach(e=>{e&&\"0\"!==e&&u.elements.push(t[e]||L.Unknown)}),f=Z(e,7,i)}else Array.isArray(l[\"elements buffed\"])&&(u.elements=l[\"elements buffed\"]),u.hp=l[\"hp% buff\"],u.atk=l[\"atk% buff\"],u.def=l[\"def% buff\"],u.rec=l[\"rec% buff\"],u.crit=l[\"crit% buff\"];const g=e=>Object.assign({id:\"passive:2:elemental-\"+e,originalId:s,sources:r,value:Y(u[e])},c);return u.elements.length>0?u.elements.forEach(e=>{o.forEach(a=>{0!==Y(u[a])&&p.push(Object.assign(Object.assign({},g(a)),{conditions:Object.assign(Object.assign({},n),{targetElements:[e]})}))})}):o.forEach(e=>{0!==Y(u[e])&&p.push(Object.assign(Object.assign({},g(e)),{conditions:Object.assign(Object.assign({},n),{targetElements:[L.Unknown]})}))}),U(p,f,{originalId:s,sources:r,targetData:c,conditionInfo:n}),p}),e.set(\"3\",(e,a,t)=>{const s=\"3\",{conditionInfo:n,targetData:c,sources:r}=d(e,a,t),l=e,p=[],u={unitType:\"\",atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let f;if(l.params){let e,a;[a,u.atk,u.def,u.rec,u.crit,u.hp,...e]=F(l),a&&\"0\"!==a&&(u.unitType=i[a]||\"unknown\"),f=Z(e,6,t)}else u.unitType=l[\"unit type buffed\"],u.hp=l[\"hp% buff\"],u.atk=l[\"atk% buff\"],u.def=l[\"def% buff\"],u.rec=l[\"rec% buff\"],u.crit=l[\"crit% buff\"];const g=u.unitType||\"unknown\";return o.forEach(e=>{const a=Y(u[e]);0!==a&&p.push(Object.assign({id:\"passive:3:type based-\"+e,originalId:s,sources:r,value:+a,conditions:Object.assign(Object.assign({},n),{targetUnitType:g})},c))}),U(p,f,{originalId:s,sources:r,targetData:c,conditionInfo:n}),p}),e.set(\"4\",(e,a,t)=>{const i=\"4\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e,l=[],p={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\"};let u;if(o.params){let e;[p.poison,p.weak,p.sick,p.injury,p.curse,p.paralysis,...e]=F(o),u=Z(e,6,t)}else r.forEach(e=>{const a=\"weak\"!==e?e:\"weaken\";p[e]=o[a+\" resist%\"]});return r.forEach(e=>{const a=Y(p[e]);0!==a&&l.push(Object.assign({id:\"passive:4:resist-\"+e,originalId:i,sources:c,value:a,conditions:Object.assign({},s)},n))}),U(l,u,{originalId:i,sources:c,targetData:n,conditionInfo:s}),l}),e.set(\"5\",(e,a,i)=>{const s=\"5\",{conditionInfo:n,targetData:c,sources:o}=d(e,a,i),r=e,l=[];let p,u,f=\"0\";if(r.params){let e,a;[a,f,...e]=F(r),p=t[a]||L.Unknown,u=Z(e,2,i)}else p=Object.values(t).find(a=>a+\" resist%\"in e)||L.Unknown,p!==L.Unknown&&(f=r[p+\" resist%\"]);const g=Y(f);return 0!==g&&l.push(Object.assign({id:\"passive:5:mitigate-\"+p,originalId:s,sources:o,value:g,conditions:Object.assign({},n)},c)),U(l,u,{originalId:s,sources:o,targetData:c,conditionInfo:n}),l}),e.set(\"8\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"dmg% mitigation\",buffId:\"passive:8:mitigation\",originalId:\"8\"})),e.set(\"9\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"bc fill per turn\",buffId:\"passive:9:gradual bc fill\",originalId:\"9\"})),e.set(\"10\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"hc effectiveness%\",buffId:\"passive:10:hc efficacy\",originalId:\"10\"})),e.set(\"11\",(e,a,t)=>{const i=\"11\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),r=e,l=[],p={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\"};let u,f;if(r.params){let e,a,i;[p.atk,p.def,p.rec,p.crit,i,a,...e]=F(r),u=v(i,a,B.Hp),f=Z(e,6,t)}else p.atk=r[\"atk% buff\"],p.def=r[\"def% buff\"],p.rec=r[\"rec% buff\"],p.crit=r[\"crit% buff\"],u=T(r,B.Hp);const g=b(u);return o.forEach(e=>{const a=Y(p[e]);if(\"hp\"!==e&&0!==a){const t=Object.assign({id:\"passive:11:hp conditional-\"+e,originalId:i,sources:c,value:a,conditions:Object.assign(Object.assign({},s),g)},n);l.push(t)}}),U(l,f,{originalId:i,sources:c,targetData:n,conditionInfo:s}),l}),e.set(\"12\",(e,a,t)=>{const i=\"12\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e,r=[],p={bc:\"0\",hc:\"0\",item:\"0\",zel:\"0\",karma:\"0\"};let u,f;if(o.params){let e,a,i;[p.bc,p.hc,p.item,p.zel,p.karma,i,a,...e]=F(o),u=v(i,a,B.Hp),f=Z(e,7,t)}else l.forEach(e=>{p[e]=o[e+\" drop rate% buff\"]}),u=T(o,B.Hp);const g=b(u);return l.forEach(e=>{const a=Y(p[e]);if(0!==a){const t=Object.assign({id:\"passive:12:hp conditional drop boost-\"+e,originalId:i,sources:c,value:a,conditions:Object.assign(Object.assign({},s),g)},n);r.push(t)}}),U(r,f,{originalId:i,sources:c,targetData:n,conditionInfo:s}),r}),e.set(\"13\",(e,a,t)=>h({effect:e,context:a,injectionContext:t,originalId:\"13\",effectKeyLow:\"bc fill on enemy defeat low\",effectKeyHigh:\"bc fill on enemy defeat high\",effectKeyChance:\"bc fill on enemy defeat%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>Y(e)/100,generateBaseConditions:()=>({onEnemyDefeat:!0}),buffId:\"passive:13:bc fill on enemy defeat\"})),e.set(\"14\",(e,a,t)=>{const i=\"14\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l,p;if(o.params){const[e,a,...i]=F(o);r=Y(e),l=Y(a),p=Z(i,2,t)}else r=Y(o[\"dmg reduction%\"]),l=Y(o[\"dmg reduction chance%\"]);const u=[];return 0===r&&0===l||u.push(Object.assign({id:\"passive:14:chance mitigation\",originalId:i,sources:c,value:{value:r,chance:l},conditions:Object.assign({},s)},n)),U(u,p,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"15\",(e,a,t)=>h({effect:e,context:a,injectionContext:t,originalId:\"15\",effectKeyLow:\"hp% recover on enemy defeat low\",effectKeyHigh:\"hp% recover on enemy defeat high\",effectKeyChance:\"hp% recover on enemy defeat chance%\",buffKeyLow:\"healLow\",buffKeyHigh:\"healHigh\",generateBaseConditions:()=>({onEnemyDefeat:!0}),defaultEffectChance:100,buffId:\"passive:15:heal on enemy defeat\"})),e.set(\"16\",(e,a,t)=>{const i=\"16\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l,p;if(o.params){const[e,a,...i]=F(o);r=Y(e),l=Y(a),p=Z(i,2,t)}else r=Y(o[\"hp% recover on battle win low\"]),l=Y(o[\"hp% recover on battle win high\"]);const u=[];return 0===r&&0===l||u.push(Object.assign({id:\"passive:16:heal on win\",originalId:i,sources:c,value:{healLow:r,healHigh:l},conditions:Object.assign(Object.assign({},s),{onBattleWin:!0})},n)),U(u,p,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"17\",(e,a,t)=>h({effect:e,context:a,injectionContext:t,originalId:\"17\",effectKeyLow:\"hp drain% low\",effectKeyHigh:\"hp drain% high\",effectKeyChance:\"hp drain chance%\",buffKeyLow:\"drainHealLow\",buffKeyHigh:\"drainHealHigh\",buffId:\"passive:17:hp absorb\"})),e.set(\"19\",(e,a,t)=>{const i=\"19\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e,r=[],p={bc:\"0\",hc:\"0\",item:\"0\",zel:\"0\",karma:\"0\"};let u;if(o.params){let e;[p.bc,p.hc,p.item,p.zel,p.karma,...e]=F(o),u=Z(e,5,t)}else l.forEach(e=>{p[e]=o[e+\" drop rate% buff\"]});return l.forEach(e=>{const a=Y(p[e]);0!==a&&r.push(Object.assign({id:\"passive:19:drop boost-\"+e,originalId:i,sources:c,value:a,conditions:Object.assign({},s)},n))}),U(r,u,{originalId:i,sources:c,targetData:n,conditionInfo:s}),r}),e.set(\"20\",(e,a,t)=>{const i=\"20\",{conditionInfo:n,targetData:c,sources:o}=d(e,a,t),r=[],l=e;let p;if(l.params){let e=F(l);e.length%2!=0&&\"0\"!==e[e.length-1]&&(p=Z(e.slice(-1),e.length-1,t),e=e.slice(0,e.length-1));const a=e.length;for(let t=0;t<a;t+=2){const a=e[t],i=Y(e[t+1]);if(\"0\"!==a||0!==i){const e=s[a]||u.Unknown;r.push({ailment:e,chance:i})}}}else Object.values(s).forEach(a=>{let t;t=a===u.Weak?\"weaken%\":a===u.AttackReduction||a===u.DefenseReduction||a===u.RecoveryReduction?a:a+\"%\",t in e&&r.push({ailment:a,chance:Y(l[t])})});const f=[];return r.forEach(({ailment:e,chance:a})=>{0!==a&&f.push(Object.assign({id:\"passive:20:chance inflict-\"+e,originalId:i,sources:o,value:a,conditions:Object.assign({},n)},c))}),U(f,p,{originalId:i,sources:o,targetData:c,conditionInfo:n}),f}),e.set(\"21\",(e,a,t)=>{const i=\"21\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),r=e,l=[],p={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\"};let u,f=0;if(r.params){let e,a;[p.atk,p.def,p.rec,p.crit,e,...a]=F(r),f=Y(e),u=Z(a,5,t)}else p.atk=r[\"first x turns atk% (1)\"],p.def=r[\"first x turns def% (3)\"],p.rec=r[\"first x turns rec% (5)\"],p.crit=r[\"first x turns crit% (7)\"],f=Y(r[\"first x turns\"]);return o.forEach(e=>{const a=Y(p[e]);if(\"hp\"!==e&&0!==a){const t=Object.assign({id:\"passive:21:first turn-\"+e,originalId:i,sources:c,value:a,duration:f,conditions:Object.assign({},s)},n);l.push(t)}}),U(l,u,{originalId:i,sources:c,targetData:n,conditionInfo:s}),l}),e.set(\"23\",(e,a,t)=>{const i=\"23\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l,p;if(o.params){const[e,a,...i]=F(o);r=Y(e)/100,l=Y(a)/100,p=Z(i,2,t)}else r=Y(o[\"battle end bc fill low\"]),l=Y(o[\"battle end bc fill high\"]);const u=[];return 0===r&&0===l||u.push(Object.assign({id:\"passive:23:bc fill on win\",originalId:i,sources:c,value:{fillLow:r,fillHigh:l},conditions:Object.assign(Object.assign({},s),{onBattleWin:!0})},n)),U(u,p,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"24\",(e,a,t)=>h({effect:e,context:a,injectionContext:t,originalId:\"24\",effectKeyLow:\"dmg% to hp when attacked low\",effectKeyHigh:\"dmg% to hp when attacked high\",effectKeyChance:\"dmg% to hp when attacked chance%\",buffKeyLow:\"healLow\",buffKeyHigh:\"healHigh\",generateBaseConditions:()=>({whenAttacked:!0}),buffId:\"passive:24:heal on hit\"})),e.set(\"25\",(e,a,t)=>h({effect:e,context:a,injectionContext:t,originalId:\"25\",effectKeyLow:\"bc fill when attacked low\",effectKeyHigh:\"bc fill when attacked high\",effectKeyChance:\"bc fill when attacked%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>Y(e)/100,generateBaseConditions:()=>({whenAttacked:!0}),buffId:\"passive:25:bc fill on hit\"})),e.set(\"26\",(e,a,t)=>h({effect:e,context:a,injectionContext:t,originalId:\"26\",effectKeyLow:\"dmg% reflect low\",effectKeyHigh:\"dmg% reflect high\",effectKeyChance:\"dmg% reflect chance%\",buffKeyLow:\"damageReflectLow\",buffKeyHigh:\"damageReflectHigh\",generateBaseConditions:()=>({whenAttacked:!0}),buffId:\"passive:26:chance damage reflect\"})),e.set(\"27\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"target% chance\",buffId:\"passive:27:target chance change\",originalId:\"27\"})),e.set(\"28\",(e,a,t)=>{const i=\"28\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l,p=0;if(o.params){const[e,a,i,...s]=F(o);p=Y(e),r=v(a,i,B.Hp),l=Z(s,3,t)}else p=Y(o[\"target% chance\"]),r=T(o,B.Hp,\"passive requirement\");const u=[];if(0!==p){const e=b(r),a=Object.assign({id:\"passive:28:hp conditional target chance change\",originalId:i,sources:c,value:p,conditions:Object.assign(Object.assign({},s),e)},n);u.push(a)}return U(u,l,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"29\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"ignore def%\",buffId:\"passive:29:chance def ignore\",originalId:\"29\"})),e.set(\"30\",(e,a,t)=>{const i=\"30\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),r=e,l=[],p={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\"};let u,f;if(r.params){let e,a,i;[p.atk,p.def,p.rec,p.crit,i,a,...e]=F(r),u=v(i,a,B.Bb),f=Z(e,6,t)}else p.atk=r[\"atk% buff\"],p.def=r[\"def% buff\"],p.rec=r[\"rec% buff\"],p.crit=r[\"crit% buff\"],u=T(r,B.Bb);const g=b(u);return o.forEach(e=>{const a=Y(p[e]);if(\"hp\"!==e&&0!==a){const t=Object.assign({id:\"passive:30:bb gauge conditional-\"+e,originalId:i,sources:c,value:a,conditions:Object.assign(Object.assign({},s),g)},n);l.push(t)}}),U(l,f,{originalId:i,sources:c,targetData:n,conditionInfo:s}),l}),e.set(\"31\",(e,a,t)=>{const i=\"31\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e,r={bc:\"0\",hc:\"0\",item:\"0\",zel:\"0\",karma:\"0\"};let p,u=0;if(o.params){let e,a;[a,r.bc,r.hc,r.item,r.zel,r.karma,...e]=F(o),u=Y(a),p=Z(e,6,t)}else u=Y(o[\"damage% for spark\"]),l.forEach(e=>{r[e]=o[e+\" drop% for spark\"]});const f=[];return 0!==u&&f.push(Object.assign({id:\"passive:31:spark-damage\",originalId:i,sources:c,value:u,conditions:Object.assign({},s)},n)),l.forEach(e=>{const a=Y(r[e]);0!==a&&f.push(Object.assign({id:\"passive:31:spark-\"+e,originalId:i,sources:c,value:a,conditions:Object.assign({},s)},n))}),U(f,p,{originalId:i,sources:c,targetData:n,conditionInfo:s}),f}),e.set(\"32\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"bb gauge fill rate%\",buffId:\"passive:32:bc efficacy\",originalId:\"32\"})),e.set(\"33\",(e,a,t)=>{const i=\"33\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l,p,u;if(o.params){const[e,a,i,...s]=F(o);r=Y(e),l=Y(a),p=10*(1+Y(i)/100),u=Z(s,3,t)}else r=Y(o[\"turn heal low\"]),l=Y(o[\"turn heal high\"]),p=Y(o[\"rec% added (turn heal)\"]);const f=[];return 0===r&&0===l||f.push(Object.assign({id:\"passive:33:gradual heal\",originalId:i,sources:c,value:{healLow:r,healHigh:l,\"addedRec%\":p},conditions:Object.assign({},s)},n)),U(f,u,{originalId:i,sources:c,targetData:n,conditionInfo:s}),f}),e.set(\"34\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"crit multiplier%\",buffId:\"passive:34:critical damage\",originalId:\"34\",parseParamValue:e=>100*Y(e)})),e.set(\"35\",(e,a,t)=>h({effect:e,context:a,injectionContext:t,originalId:\"35\",effectKeyLow:\"bc fill when attacking low\",effectKeyHigh:\"bc fill when attacking high\",effectKeyChance:\"bc fill when attacking%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>Y(e)/100,generateBaseConditions:()=>({onNormalAttack:!0}),buffId:\"passive:35:bc fill on normal attack\"})),e.set(\"36\",(e,a,t)=>{const i=\"36\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l=0,p=0,u=0;if(o.params){const[e,a,i,...s]=F(o);l=Y(e),p=Y(a),u=Y(i),r=Z(s,3,t)}else l=Y(o[\"additional actions\"]);const f=[];return 0===l&&0===p&&0===u||f.push(Object.assign({id:\"passive:36:extra action\",originalId:i,sources:c,value:{additionalActions:l,damageModifier:p,chance:u},conditions:Object.assign({},s)},n)),U(f,r,{originalId:i,sources:c,targetData:n,conditionInfo:s}),f}),e.set(\"37\",(e,a,t)=>{const i=\"37\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l=0,p=0;if(o.params){const e=F(o);l=Y(e[0]),p=Y(e[2]);r=Z([\"0\",e[1],\"0\",...e.slice(3)],0,t)}else l=Y(o[\"hit increase/hit\"]),p=Y(o[\"extra hits dmg%\"]);const u=[];return 0===l&&0===p||u.push(Object.assign({id:\"passive:37:hit count boost\",originalId:i,sources:c,value:{hitIncreasePerHit:l,extraHitDamage:p},conditions:Object.assign({},s)},n)),U(u,r,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"40\",(e,a,t)=>{const i=\"40\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e,r=[\"atk\",\"def\",\"rec\"],l={1:\"atk\",2:\"def\",3:\"rec\",4:\"hp\"},p={attack:\"atk\",defense:\"def\",recovery:\"rec\",hp:\"hp\"},u={atk:\"0\",def:\"0\",rec:\"0\"};let f,g=\"unknown\";if(o.params){let e,a;[a,u.atk,u.def,u.rec,...e]=F(o),g=l[a]||\"unknown\",f=Z(e,4,t)}else{const e=o[\"converted attribute\"];g=e in p?p[e]:\"unknown\",r.forEach(e=>{const a=e+\"% buff\";a in o&&(u[e]=o[a])})}const m=[];return r.forEach(e=>{const a=Y(u[e]);0!==a&&m.push(Object.assign({id:\"passive:40:converted-\"+e,originalId:i,sources:c,value:{convertedStat:g,value:a},conditions:Object.assign({},s)},n))}),U(m,f,{originalId:i,sources:c,targetData:n,conditionInfo:s}),m}),e.set(\"41\",(e,a,t)=>{const i=\"41\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),r=e,l=[],p={minimumElements:\"0\",atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let u;if(r.params){let e;[p.minimumElements,p.atk,p.def,p.rec,p.crit,p.hp,...e]=F(r),u=Z(e,6,t)}else p.minimumElements=r[\"unique elements required\"],p.hp=r[\"hp% buff\"],p.atk=r[\"atk% buff\"],p.def=r[\"def% buff\"],p.rec=r[\"rec% buff\"],p.crit=r[\"crit% buff\"];const f=Y(p.minimumElements);return o.forEach(e=>{const a=Y(p[e]);0!==a&&l.push(Object.assign({id:\"passive:41:unique element count-\"+e,originalId:i,sources:c,value:+a,conditions:Object.assign(Object.assign({},s),{minimumUniqueElements:f})},n))}),U(l,u,{originalId:i,sources:c,targetData:n,conditionInfo:s}),l}),e.set(\"42\",(e,a,t)=>{const i=\"42\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),r={0:A.Other,1:A.Male,2:A.Female},l=e,p=[],u={gender:\"\",atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let f;if(l.params){let e,a;[a,u.atk,u.def,u.rec,u.crit,u.hp,...e]=F(l),u.gender=r[a]||\"unknown\",f=Z(e,6,t)}else u.gender=l[\"gender required\"],u.hp=l[\"hp% buff\"],u.atk=l[\"atk% buff\"],u.def=l[\"def% buff\"],u.rec=l[\"rec% buff\"],u.crit=l[\"crit% buff\"];const g=u.gender||\"unknown\";return o.forEach(e=>{const a=Y(u[e]);0!==a&&p.push(Object.assign({id:\"passive:42:gender-\"+e,originalId:i,sources:c,value:+a,conditions:Object.assign(Object.assign({},s),{targetGender:g})},n))}),U(p,f,{originalId:i,sources:c,targetData:n,conditionInfo:s}),p}),e.set(\"43\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"take 1 dmg%\",buffId:\"passive:43:chance damage to one\",originalId:\"43\"})),e.set(\"44\",(e,a,t)=>{const i=\"44\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),r=e,l=[],p={atk:\"0\",def:\"0\",rec:\"0\",crit:\"0\",hp:\"0\"};let u;if(r.params){let e;[p.atk,p.def,p.rec,p.crit,p.hp,...e]=F(r),u=Z(e,5,t)}else p.hp=r[\"hp buff\"],p.atk=r[\"atk buff\"],p.def=r[\"def buff\"],p.rec=r[\"rec buff\"],p.crit=r[\"crit buff\"];return o.forEach(e=>{const a=Y(p[e]);0!==a&&l.push(Object.assign({id:\"passive:44:flat-\"+e,originalId:i,sources:c,value:a,conditions:Object.assign({},s)},n))}),U(l,u,{originalId:i,sources:c,targetData:n,conditionInfo:s}),l}),e.set(\"45\",(e,a,t)=>{const i=\"45\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l=0,p=0;if(o.params){const[e,a,...i]=F(o);l=Y(e),p=Y(a),r=Z(i,2,t)}else l=Y(o[\"base crit% resist\"]),p=Y(o[\"buff crit% resist\"]);const u=[];return 0!==l&&u.push(Object.assign({id:\"passive:45:critical damage reduction-base\",originalId:i,sources:c,value:l,conditions:Object.assign({},s)},n)),0!==p&&u.push(Object.assign({id:\"passive:45:critical damage reduction-buff\",originalId:i,sources:c,value:p,conditions:Object.assign({},s)},n)),U(u,r,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"46\",(e,a,t)=>{const i=\"46\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=[\"atk\",\"def\",\"rec\"],r=[];let l=\"unknown\";const p=e;let u;if(p.params){const e=F(p);o.forEach((a,t)=>{const i=Y(e[2*t]),s=Y(e[2*t+1]);0===i&&0===s||r.push({stat:a,baseValue:i,addedValue:s})}),l=\"1\"===e[6]?\"lost\":\"remaining\",u=Z(e.slice(7),7,t)}else o.forEach(e=>{const a=Y(p[e+\"% base buff\"]),t=Y(p[e+\"% extra buff based on hp\"]);0===a&&0===t||r.push({stat:e,baseValue:a,addedValue:t})}),l=p[\"buff proportional to hp\"]||\"unknown\";const f=r.map(({stat:e,baseValue:a,addedValue:t})=>Object.assign({id:\"passive:46:hp scaled-\"+e,originalId:i,sources:c,value:{baseValue:a,addedValue:t,proportionalMode:l},conditions:Object.assign({},s)},n));return U(f,u,{originalId:i,sources:c,targetData:n,conditionInfo:s}),f}),e.set(\"47\",(e,a,t)=>h({effect:e,context:a,injectionContext:t,originalId:\"47\",effectKeyLow:\"bc fill on spark low\",effectKeyHigh:\"bc fill on spark high\",effectKeyChance:\"bc fill on spark%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>Y(e)/100,buffId:\"passive:47:bc fill on spark\"})),e.set(\"48\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"reduced bb bc cost%\",buffId:\"passive:48:bc cost reduction\",originalId:\"48\"})),e.set(\"49\",(e,a,t)=>h({effect:e,context:a,injectionContext:t,originalId:\"49\",effectKeyLow:\"reduced bb bc use% low\",effectKeyHigh:\"reduced bb bc use% high\",effectKeyChance:\"reduced bb bc use chance%\",buffKeyLow:\"reducedUseLow%\",buffKeyHigh:\"reducedUseHigh%\",buffId:\"passive:49:bb gauge consumption reduction\"})),e.set(\"50\",(e,a,i)=>{const s=\"50\",{conditionInfo:n,targetData:c,sources:o}=d(e,a,i),r=e;let l,p,u=0;if(r.params){const e=F(r);l=e.filter((e,a)=>\"0\"!==e&&a<6).map(e=>t[e]||L.Unknown),u=100*Y(e[6]),p=Z(e.slice(7),7,i)}else l=Object.values(t).filter(e=>!!r[e+\" units do extra elemental weakness dmg\"]),u=Y(r[\"elemental weakness multiplier%\"]);let f=[];return 0!==u&&(f=l.map(e=>Object.assign({id:\"passive:50:elemental weakness damage-\"+e,originalId:s,sources:o,value:u,conditions:Object.assign({},n)},c)),0===f.length&&f.push(Object.assign({id:\"passive:50:elemental weakness damage-unknown\",originalId:s,sources:o,value:u,conditions:Object.assign({},n)},c))),U(f,p,{originalId:s,sources:o,targetData:c,conditionInfo:n}),f}),e.set(\"53\",(e,a,t)=>{const i=\"53\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r;!function(e){e.CriticalDamage=\"critical damage\",e.ElementDamage=\"element damage\",e.CriticalHitRate=\"critical rate\"}(r||(r={}));const l=[];let p;if(o.params){const[e,a,i,s,n,c,...d]=F(o);[{resistType:r.CriticalDamage,base:Y(e),buff:Y(a)},{resistType:r.ElementDamage,base:Y(i),buff:Y(s)},{resistType:r.CriticalHitRate,base:Y(n),buff:Y(c)}].forEach(({resistType:e,base:a,buff:t})=>{0===a&&0===t||l.push({resistType:e,base:a,buff:t})}),p=Z(d,6,t)}else[{resistType:r.CriticalDamage,baseKey:\"crit dmg base damage resist%\",buffKey:\"crit dmg buffed damage resist%\"},{resistType:r.ElementDamage,baseKey:\"strong base element damage resist%\",buffKey:\"strong buffed element damage resist%\"},{resistType:r.CriticalHitRate,baseKey:\"crit chance base resist%\",buffKey:\"crit chance buffed resist%\"}].forEach(({resistType:e,baseKey:a,buffKey:t})=>{const i=Y(o[a]),s=Y(o[t]);0===i&&0===s||l.push({resistType:e,base:i,buff:s})});const u=[];return l.forEach(({resistType:e,base:a,buff:t})=>{0!==a&&u.push(Object.assign({id:`passive:53:${e}-base`,originalId:i,sources:c,value:a,conditions:Object.assign({},s)},n)),0!==t&&u.push(Object.assign({id:`passive:53:${e}-buff`,originalId:i,sources:c,value:t,conditions:Object.assign({},s)},n))}),U(u,p,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"55\",(e,a,t)=>{const i=\"55\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e,r=[];let l;if(o.params){const e=F(o),d=p({id:e[0],params:e[1],turnDuration:Y(e[5])},a,t),u=Y(e[2]),f=v(e[3],e[4],B.Hp);if(l=Z(e.slice(6),6,t),d.length>0){const e=b(f);r.push(Object.assign({id:\"passive:55:hp conditional\",originalId:i,sources:c,value:{triggeredBuffs:d,maxTriggerCount:u},conditions:Object.assign(Object.assign({},s),e)},n))}}return U(r,l,{originalId:i,sources:c,targetData:n,conditionInfo:s}),r}),e.set(\"58\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"guard increase mitigation%\",buffId:\"passive:58:guard mitigation\",originalId:\"58\"})),e.set(\"59\",(e,a,t)=>{const i=\"59\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l,p;if(o.params){const[e,a,...i]=F(o);r=Y(e),l=Y(a)/100,p=Z(i,2,t)}else r=Y(o[\"bb gauge% filled when attacked while guarded\"]),l=Y(o[\"bc filled when attacked while guarded\"]);const u=[];return 0!==r&&u.push(Object.assign({id:\"passive:59:bc fill when attacked on guard-percent\",originalId:i,sources:c,value:r,conditions:Object.assign(Object.assign({},s),{whenAttacked:!0,onGuard:!0})},n)),0!==l&&u.push(Object.assign({id:\"passive:59:bc fill when attacked on guard-flat\",originalId:i,sources:c,value:l,conditions:Object.assign(Object.assign({},s),{whenAttacked:!0,onGuard:!0})},n)),U(u,p,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"61\",(e,a,t)=>{const i=\"61\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l,p;if(o.params){const[e,a,...i]=F(o);r=Y(e),l=Y(a)/100,p=Z(i,2,t)}else r=Y(o[\"bb gauge% filled on guard\"]),l=Y(o[\"bc filled on guard\"]);const u=[];return 0!==r&&u.push(Object.assign({id:\"passive:61:bc fill on guard-percent\",originalId:i,sources:c,value:r,conditions:Object.assign(Object.assign({},s),{onGuard:!0})},n)),0!==l&&u.push(Object.assign({id:\"passive:61:bc fill on guard-flat\",originalId:i,sources:c,value:l,conditions:Object.assign(Object.assign({},s),{onGuard:!0})},n)),U(u,p,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"62\",(e,a,i)=>{const s=\"62\",{conditionInfo:n,targetData:c,sources:o}=d(e,a,i),r=e;let l,p,u=0;if(r.params){const e=F(r);l=e.filter((e,a)=>\"0\"!==e&&a<6).map(e=>t[e]||L.Unknown),u=Y(e[6]),p=Z(e.slice(7),7,i)}else l=Object.values(t).filter(e=>!!r[`mitigate ${e} attacks`]),u=Y(r[\"dmg% mitigation for elemental attacks\"]);let f=[];return 0!==u&&(f=l.map(e=>Object.assign({id:\"passive:62:mitigate-\"+e,originalId:s,sources:o,value:u,conditions:Object.assign({},n)},c)),0===f.length&&f.push(Object.assign({id:\"passive:62:mitigate-unknown\",originalId:s,sources:o,value:u,conditions:Object.assign({},n)},c))),U(f,p,{originalId:s,sources:o,targetData:c,conditionInfo:n}),f}),e.set(\"63\",(e,a,i)=>{const s=\"63\",{conditionInfo:n,targetData:c,sources:o}=d(e,a,i),r=e;let l,p,u=0,f=0;if(r.params){const e=F(r);l=e.filter((e,a)=>\"0\"!==e&&a<6).map(e=>t[e]||L.Unknown),u=Y(e[6]),f=Y(e[7]),p=Z(e.slice(8),8,i)}else l=Object.values(t).filter(e=>!!r[`mitigate ${e} attacks`]),u=Y(r[\"dmg% mitigation for elemental attacks\"]),f=Y(r[\"dmg% mitigation for elemental attacks buff for first x turns\"]);let g=[];return 0!==u&&(g=l.map(e=>Object.assign({id:\"passive:63:first turn mitigate-\"+e,originalId:s,sources:o,duration:f,value:u,conditions:Object.assign({},n)},c)),0===g.length&&g.push(Object.assign({id:\"passive:63:first turn mitigate-unknown\",originalId:s,sources:o,duration:f,value:u,conditions:Object.assign({},n)},c))),U(g,p,{originalId:s,sources:o,targetData:c,conditionInfo:n}),g}),e.set(\"64\",(e,a,t)=>{const i=\"64\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l=0,p=0,u=0;if(o.params){const[e,a,i,...s]=F(o);l=Y(e),p=Y(a),u=Y(i),r=Z(s,3,t)}else l=Y(o[\"bb atk% buff\"]),p=Y(o[\"sbb atk% buff\"]),u=Y(o[\"ubb atk% buff\"]);const f=[];return 0!==l&&f.push(Object.assign({id:\"passive:64:attack boost-bb\",originalId:i,sources:c,conditions:Object.assign({},s),value:l},n)),0!==p&&f.push(Object.assign({id:\"passive:64:attack boost-sbb\",originalId:i,sources:c,conditions:Object.assign({},s),value:p},n)),0!==u&&f.push(Object.assign({id:\"passive:64:attack boost-ubb\",originalId:i,sources:c,conditions:Object.assign({},s),value:u},n)),U(f,r,{originalId:i,sources:c,targetData:n,conditionInfo:s}),f}),e.set(\"65\",(e,a,t)=>h({effect:e,context:a,injectionContext:t,originalId:\"65\",effectKeyLow:\"bc fill on crit min\",effectKeyHigh:\"bc fill on crit max\",effectKeyChance:\"bc fill on crit%\",buffKeyLow:\"fillLow\",buffKeyHigh:\"fillHigh\",parseParamValue:e=>Y(e)/100,generateBaseConditions:()=>({onCriticalHit:!0}),buffId:\"passive:65:bc fill on crit\"})),e.set(\"66\",(e,a,t)=>{const i=\"66\",{conditionInfo:s,targetData:o,sources:r}=d(e,a,t),l=e;let p,u=[],g=!1,m=!1,D=!1;if(l.params){const[e,i=\"\",s=\"\",o=\"\",r=\"\",d,E,U,...B]=F(l),v=e.split(\"~\"),T=i.split(\"~\"),b=s.split(\"~\"),k=o.split(\"~\"),A=r.split(\"~\"),R=16+2/3;v.forEach((e,i)=>{const s=(T[i]||\"\").replace(/&/g,\",\"),o=b[i],r=k[i],l=Y(A[i]),d={\"proc id\":e,params:s,\"effect delay time(ms)/frame\":`${(l*R).toFixed(1)}/${l}`,\"target area\":c[r]||r||\"unknown target area\",\"target type\":n[o]||o||\"unknown target type\"},p=f(d,a,t);u=u.concat(p)}),g=\"1\"===d,m=\"1\"===E,D=\"1\"===U,p=Z(B,8,t)}else{const e=l[\"triggered effect\"];Array.isArray(e)&&e.forEach(e=>{const i=f(e,a,t);u=u.concat(i)}),g=!!l[\"trigger on bb\"],m=!!l[\"trigger on sbb\"],D=!!l[\"trigger on ubb\"]}const E=[];if((g||m||D)&&u.length>0){const e=e=>{E.push(Object.assign({id:\"passive:66:add effect to skill-\"+e,originalId:i,sources:r,value:u,conditions:Object.assign({},s)},o))};g&&e(\"bb\"),m&&e(\"sbb\"),D&&e(\"ubb\")}return U(E,p,{originalId:i,sources:r,targetData:o,conditionInfo:s}),E}),e.set(\"69\",(e,a,t)=>{const i=\"69\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l=0,p=0,u=0,f=0;if(o.params){const[e,a,i,s,...n]=F(o);l=Y(e),p=Y(a),u=Y(i),f=Y(s),r=Z(n,4,t)}else l=Y(o[\"angel idol recover hp%\"]),p=Y(o[\"angel idol recover counts\"]),u=Y(o[\"angel idol recover chance% low\"]),f=Y(o[\"angel idol recover chance% high\"]);const g=[];return 0===u&&0===f||g.push(Object.assign({id:\"passive:69:chance ko resistance\",originalId:i,sources:c,value:{\"recoveredHp%\":l,maxCount:p,chanceLow:u,chanceHigh:f},conditions:Object.assign({},s)},n)),U(g,r,{originalId:i,sources:c,targetData:n,conditionInfo:s}),g}),e.set(\"70\",(e,a,t)=>R({effect:e,context:a,injectionContext:t,effectKey:\"od fill rate%\",buffId:\"passive:70:od fill rate\",originalId:\"70\"})),e.set(\"71\",(e,a,t)=>{const i=\"71\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e,l={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\"};let p;if(o.params){let e;[l.poison,l.weak,l.sick,l.injury,l.curse,l.paralysis,...e]=F(o),p=Z(e,6,t)}else{const a=Object.keys(e).filter(e=>e.startsWith(\"counter inflict\"));r.forEach(e=>{const t=a.find(a=>a.includes(e));t&&(l[e]=o[t])})}const u=[];return r.forEach(e=>{const a=Y(l[e]);0!==a&&u.push(Object.assign({id:\"passive:71:inflict on hit-\"+e,originalId:i,sources:c,value:a,conditions:Object.assign({},s)},n))}),U(u,p,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"72\",(e,a,t)=>{const i=\"72\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),[o,r,...l]=m(e),p=\"1\"===o,u=\"1\"===r,f=Z(l,2,t),F=[];return p&&F.push(Object.assign({id:\"passive:72:effect at turn start-hp\",originalId:i,sources:c,value:!0,conditions:Object.assign({},s)},n)),u&&F.push(Object.assign({id:\"passive:72:effect at turn start-bc\",originalId:i,sources:c,value:!0,conditions:Object.assign({},s)},n)),U(F,f,{originalId:i,sources:c,targetData:n,conditionInfo:s}),F}),e.set(\"73\",(e,a,t)=>{const i=\"73\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e,r=[u.Poison,u.Weak,u.Sick,u.Injury,u.Curse,u.Paralysis,u.AttackReduction,u.DefenseReduction,u.RecoveryReduction],l=[],p={poison:\"0\",weak:\"0\",sick:\"0\",injury:\"0\",curse:\"0\",paralysis:\"0\",\"atk down\":\"0\",\"def down\":\"0\",\"rec down\":\"0\"};let f;if(o.params){let e;[p.poison,p.weak,p.sick,p.injury,p.curse,p.paralysis,p[\"atk down\"],p[\"def down\"],p[\"rec down\"],...e]=F(o),f=Z(e,9,t)}else r.forEach(e=>{const a=\"weak\"!==e?e:\"weaken\";p[e]=o[a+\" resist%\"]});return r.forEach(e=>{const a=Y(p[e]);0!==a&&l.push(Object.assign({id:\"passive:73:resist-\"+e,originalId:i,sources:c,value:a,conditions:Object.assign({},s)},n))}),U(l,f,{originalId:i,sources:c,targetData:n,conditionInfo:s}),l}),e.set(\"74\",(e,a,t)=>{const i=\"74\",{conditionInfo:n,targetData:c,sources:o}=d(e,a,t),l=e;let p,f,g=0;if(l.params){const[e,a,...i]=F(l);p=e.split(\"&\").filter(e=>\"0\"!==e).map(e=>s[e]||u.Unknown),g=Y(a),f=Z(i,2,t)}else{const e=Object.keys(l).filter(e=>!0===l[e]&&e.startsWith(\"atk% buff when enemy has\"));p=r.filter(a=>e.find(e=>e.includes(a))),g=Y(l[\"atk% buff when enemy has ailment\"])}const m=[];return 0!==g&&m.push(Object.assign({id:\"passive:74:ailment attack boost\",originalId:i,sources:o,value:g,conditions:Object.assign(Object.assign({},n),{targetHasAnyOfGivenAilments:p})},c)),U(m,f,{originalId:i,sources:o,targetData:c,conditionInfo:n}),m}),e.set(\"75\",(e,a,t)=>{const i=\"75\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l=0,p=0,u=0;if(o.params){const[e,a,i,...s]=F(o);l=Y(e),p=Y(a),u=Y(i),r=Z(s,3,t)}else l=Y(o[\"spark debuff%\"]),p=Y(o[\"spark debuff chance%\"]),u=Y(o[\"spark debuff turns\"]);const f=[];return 0!==p&&f.push(Object.assign({id:\"passive:75:spark vulnerability\",originalId:i,sources:c,duration:u,value:{\"sparkDamage%\":l,chance:p},conditions:Object.assign({},s)},n)),U(f,r,{originalId:i,sources:c,targetData:n,conditionInfo:s}),f}),e.set(\"77\",(e,a,t)=>{const i=\"77\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e;let r,l=0,p=0;if(o.params){const[e,a,...i]=F(o);l=Y(e),p=Y(a),r=Z(i,2,t)}else l=Y(o[\"base spark dmg% resist\"]),p=Y(o[\"buff spark dmg% resist\"]);const u=[];return 0!==l&&u.push(Object.assign({id:\"passive:77:spark damage reduction-base\",originalId:i,sources:c,value:l,conditions:Object.assign({},s)},n)),0!==p&&u.push(Object.assign({id:\"passive:77:spark damage reduction-buff\",originalId:i,sources:c,value:p,conditions:Object.assign({},s)},n)),U(u,r,{originalId:i,sources:c,targetData:n,conditionInfo:s}),u}),e.set(\"78\",(e,a,t)=>{const i=\"78\",{conditionInfo:s,targetData:n,sources:c}=d(e,a,t),o=e,r=[];let l;if(o.params){const e=F(o),d=p({id:e[0],params:e[1],turnDuration:Y(e[4])},a,t),u=Y(e[2]),f=v(e[3],\"1\",B.DamageTaken);if(l=Z(e.slice(5),5,t),d.length>0){const e=b(f);r.push(Object.assign({id:\"passive:78:damage taken conditional\",originalId:i,sources:c,value:{triggeredBuffs:d,maxTriggerCount:u},conditions:Object.assign(Object.assign({},s),e)},n))}}return U(r,l,{originalId:i,sources:c,targetData:n,conditionInfo:s}),r})}(te)),te}!function(e){e.Active=\"active\",e.Passive=\"passive\",e.ConditionalTimed=\"conditionalTimed\",e.Singleton=\"singleton\",e.Burst=\"burst\",e.Attack=\"attack\",e.Unknown=\"unknown\"}(K||(K={})),function(e){e.BraveBurst=\"bb\",e.SuperBraveBurst=\"sbb\",e.UltimateBraveBurst=\"ubb\",e.DualBraveBurst=\"dbb\",e.BondedBraveBurst=\"bbb\",e.BondedSuperBraveBurst=\"dsbb\",e.SpEnhancement=\"sp\",e.Item=\"item\",e.LeaderSkill=\"ls\",e.ExtraSkill=\"es\",e.OmniParadigm=\"omniParadigm\",e.UnitTypeBonus=\"unitTypeBonus\",e.Quest=\"quest\"}(W||(W={})),function(e){e.Unknown=\"unknown\",e.OmniParadigm=\"omniParadigm\",e.All=\"all\"}(L||(L={})),function(e){e.hp=\"hp\",e.atk=\"atk\",e.def=\"def\",e.rec=\"rec\",e.crit=\"crit\",e.hpRecovery=\"hpRecovery\",e.bbGauge=\"bbGauge\",e.odGauge=\"odGauge\",e.bcDropRate=\"bcDropRate\",e.hcDropRate=\"hcDropRate\",e.itemDropRate=\"itemDropRate\",e.zelDropRate=\"zelDropRate\",e.karmaDropRate=\"karmaDropRate\",e.bcEfficacy=\"bcEfficacy\",e.hcEfficacy=\"hcEfficacy\",e.bcCostReduction=\"bcCostReduction\",e.bbGaugeConsumptionReduction=\"bbGaugeConsumptionReduction\",e.ailmentAttackBoost=\"ailmentAttackBoost\",e.poisonResist=\"poisonResist\",e.weakResist=\"weakResist\",e.sickResist=\"sickResist\",e.injuryResist=\"injuryResist\",e.curseResist=\"curseResist\",e.paralysisResist=\"paralysisResist\",e.poisonInflict=\"poisonInflict\",e.weakInflict=\"weakInflict\",e.sickInflict=\"sickInflict\",e.injuryInflict=\"injuryInflict\",e.curseInflict=\"curseInflict\",e.paralysisInflict=\"paralysisInflict\",e.poisonCounter=\"poisonCounter\",e.weakCounter=\"weakCounter\",e.sickCounter=\"sickCounter\",e.injuryCounter=\"injuryCounter\",e.curseCounter=\"curseCounter\",e.paralysisCounter=\"paralysisCounter\",e.atkDownResist=\"atkDownResist\",e.defDownResist=\"defDownResist\",e.recDownResist=\"recDownResist\",e.atkDownInflict=\"atkDownInflict\",e.defDownInflict=\"defDownInflict\",e.recDownInflict=\"recDownInflict\",e.atkDownCounter=\"atkDownCounter\",e.defDownCounter=\"defDownCounter\",e.recDownCounter=\"recDownCounter\",e.mitigation=\"mitigation\",e.fireMitigation=\"fireMitigation\",e.waterMitigation=\"waterMitigation\",e.earthMitigation=\"earthMitigation\",e.thunderMitigation=\"thunderMitigation\",e.lightMitigation=\"lightMitigation\",e.darkMitigation=\"darkMitigation\",e.reduceDamageToOne=\"reduceDamageToOne\",e.guardMitigation=\"guardMitigation\",e.barrier=\"barrier\",e.fireElementalDamage=\"fireElementalDamage\",e.waterElementalDamage=\"waterElementalDamage\",e.earthElementalDamage=\"earthElementalDamage\",e.thunderElementalDamage=\"thunderElementalDamage\",e.lightElementalDamage=\"lightElementalDamage\",e.darkElementalDamage=\"darkElementalDamage\",e.elementalWeaknessDamageMitigation=\"elementalWeaknessDamageMitigation\",e.turnDurationModification=\"turnDurationModification\",e.koResistance=\"koResistance\",e.revive=\"revive\",e.defenseIgnore=\"defenseIgnore\",e.criticalDamage=\"criticalDamage\",e.criticalDamageMitigation=\"criticalDamageMitigation\",e.sparkDamage=\"sparkDamage\",e.sparkDamageMitigation=\"sparkDamageMitigation\",e.bbAtk=\"bbAtk\",e.hitCountModification=\"hitCountModification\",e.damageReflect=\"damageReflect\",e.targetingModification=\"targetingModification\",e.elementModification=\"elementModification\",e.buffStabilityModification=\"buffStabilityModification\",e.extraAction=\"extraAction\",e.damageOverTime=\"damageOverTime\",e.effectOccurrenceShift=\"effectOccurrenceShift\"}(M||(M={})),function(e){e.UNKNOWN=\"UNKNOWN\",e.TURN_DURATION_UP=\"TURN_DURATION_UP\",e.TURN_DURATION_DOWN=\"TURN_DURATION_DOWN\",e.CONDITIONALBUFF_HPTHRESH=\"CONDITIONALBUFF_HPTHRESH\",e.CONDITIONALBUFF_DAMAGETAKENTHRESH=\"CONDITIONALBUFF_DAMAGETAKENTHRESH\",e.BUFF_ADDTO_BB=\"BUFF_ADDTO_BB\",e.BUFF_ADDTO_SBB=\"BUFF_ADDTO_SBB\",e.BUFF_ADDTO_UBB=\"BUFF_ADDTO_UBB\",e.BUFF_HPUP=\"BUFF_HPUP\",e.BUFF_HPDOWN=\"BUFF_HPDOWN\",e.BUFF_ATKUP=\"BUFF_ATKUP\",e.BUFF_ATKDOWN=\"BUFF_ATKDOWN\",e.BUFF_DEFUP=\"BUFF_DEFUP\",e.BUFF_DEFDOWN=\"BUFF_DEFDOWN\",e.BUFF_RECUP=\"BUFF_RECUP\",e.BUFF_RECDOWN=\"BUFF_RECDOWN\",e.BUFF_CRTRATEUP=\"BUFF_CRTRATEUP\",e.BUFF_CRTRATEDOWN=\"BUFF_CRTRATEDOWN\",e.BUFF_HPTHRESHATKUP=\"BUFF_HPTHRESHATKUP\",e.BUFF_HPTHRESHATKDOWN=\"BUFF_HPTHRESHATKDOWN\",e.BUFF_HPTHRESHDEFUP=\"BUFF_HPTHRESHDEFUP\",e.BUFF_HPTHRESHDEFDOWN=\"BUFF_HPTHRESHDEFDOWN\",e.BUFF_HPTHRESHRECUP=\"BUFF_HPTHRESHRECUP\",e.BUFF_HPTHRESHRECDOWN=\"BUFF_HPTHRESHRECDOWN\",e.BUFF_HPTHRESHCRTRATEUP=\"BUFF_HPTHRESHCRTRATEUP\",e.BUFF_HPTHRESHCRTRATEDOWN=\"BUFF_HPTHRESHCRTRATEDOWN\",e.BUFF_BBGAUGETHRESHATKUP=\"BUFF_BBGAUGETHRESHATKUP\",e.BUFF_BBGAUGETHRESHATKDOWN=\"BUFF_BBGAUGETHRESHATKDOWN\",e.BUFF_BBGAUGETHRESHDEFUP=\"BUFF_BBGAUGETHRESHDEFUP\",e.BUFF_BBGAUGETHRESHDEFDOWN=\"BUFF_BBGAUGETHRESHDEFDOWN\",e.BUFF_BBGAUGETHRESHRECUP=\"BUFF_BBGAUGETHRESHRECUP\",e.BUFF_BBGAUGETHRESHRECDOWN=\"BUFF_BBGAUGETHRESHRECDOWN\",e.BUFF_BBGAUGETHRESHCRTRATEUP=\"BUFF_BBGAUGETHRESHCRTRATEUP\",e.BUFF_BBGAUGETHRESHCRTRATEDOWN=\"BUFF_BBGAUGETHRESHCRTRATEDOWN\",e.BUFF_HPREC=\"BUFF_HPREC\",e.BUFF_BBREC=\"BUFF_BBREC\",e.BUFF_DAMAGEBB=\"BUFF_DAMAGEBB\",e.BUFF_BEENATK_HPREC=\"BUFF_BEENATK_HPREC\",e.BUFF_FIREHPUP=\"BUFF_FIREHPUP\",e.BUFF_FIREHPDOWN=\"BUFF_FIREHPDOWN\",e.BUFF_FIREATKUP=\"BUFF_FIREATKUP\",e.BUFF_FIREATKDOWN=\"BUFF_FIREATKDOWN\",e.BUFF_FIREDEFUP=\"BUFF_FIREDEFUP\",e.BUFF_FIREDEFDOWN=\"BUFF_FIREDEFDOWN\",e.BUFF_FIRERECUP=\"BUFF_FIRERECUP\",e.BUFF_FIRERECDOWN=\"BUFF_FIRERECDOWN\",e.BUFF_FIRECRTRATEUP=\"BUFF_FIRECRTRATEUP\",e.BUFF_FIRECRTRATEDOWN=\"BUFF_FIRECRTRATEDOWN\",e.BUFF_WATERHPUP=\"BUFF_WATERHPUP\",e.BUFF_WATERHPDOWN=\"BUFF_WATERHPDOWN\",e.BUFF_WATERATKUP=\"BUFF_WATERATKUP\",e.BUFF_WATERATKDOWN=\"BUFF_WATERATKDOWN\",e.BUFF_WATERDEFUP=\"BUFF_WATERDEFUP\",e.BUFF_WATERDEFDOWN=\"BUFF_WATERDEFDOWN\",e.BUFF_WATERRECUP=\"BUFF_WATERRECUP\",e.BUFF_WATERRECDOWN=\"BUFF_WATERRECDOWN\",e.BUFF_WATERCRTRATEUP=\"BUFF_WATERCRTRATEUP\",e.BUFF_WATERCRTRATEDOWN=\"BUFF_WATERCRTRATEDOWN\",e.BUFF_EARTHHPUP=\"BUFF_EARTHHPUP\",e.BUFF_EARTHHPDOWN=\"BUFF_EARTHHPDOWN\",e.BUFF_EARTHATKUP=\"BUFF_EARTHATKUP\",e.BUFF_EARTHATKDOWN=\"BUFF_EARTHATKDOWN\",e.BUFF_EARTHDEFUP=\"BUFF_EARTHDEFUP\",e.BUFF_EARTHDEFDOWN=\"BUFF_EARTHDEFDOWN\",e.BUFF_EARTHRECUP=\"BUFF_EARTHRECUP\",e.BUFF_EARTHRECDOWN=\"BUFF_EARTHRECDOWN\",e.BUFF_EARTHCRTRATEUP=\"BUFF_EARTHCRTRATEUP\",e.BUFF_EARTHCRTRATEDOWN=\"BUFF_EARTHCRTRATEDOWN\",e.BUFF_THUNDERHPUP=\"BUFF_THUNDERHPUP\",e.BUFF_THUNDERHPDOWN=\"BUFF_THUNDERHPDOWN\",e.BUFF_THUNDERATKUP=\"BUFF_THUNDERATKUP\",e.BUFF_THUNDERATKDOWN=\"BUFF_THUNDERATKDOWN\",e.BUFF_THUNDERDEFUP=\"BUFF_THUNDERDEFUP\",e.BUFF_THUNDERDEFDOWN=\"BUFF_THUNDERDEFDOWN\",e.BUFF_THUNDERRECUP=\"BUFF_THUNDERRECUP\",e.BUFF_THUNDERRECDOWN=\"BUFF_THUNDERRECDOWN\",e.BUFF_THUNDERCRTRATEUP=\"BUFF_THUNDERCRTRATEUP\",e.BUFF_THUNDERCRTRATEDOWN=\"BUFF_THUNDERCRTRATEDOWN\",e.BUFF_LIGHTHPUP=\"BUFF_LIGHTHPUP\",e.BUFF_LIGHTHPDOWN=\"BUFF_LIGHTHPDOWN\",e.BUFF_LIGHTATKUP=\"BUFF_LIGHTATKUP\",e.BUFF_LIGHTATKDOWN=\"BUFF_LIGHTATKDOWN\",e.BUFF_LIGHTDEFUP=\"BUFF_LIGHTDEFUP\",e.BUFF_LIGHTDEFDOWN=\"BUFF_LIGHTDEFDOWN\",e.BUFF_LIGHTRECUP=\"BUFF_LIGHTRECUP\",e.BUFF_LIGHTRECDOWN=\"BUFF_LIGHTRECDOWN\",e.BUFF_LIGHTCRTRATEUP=\"BUFF_LIGHTCRTRATEUP\",e.BUFF_LIGHTCRTRATEDOWN=\"BUFF_LIGHTCRTRATEDOWN\",e.BUFF_DARKHPUP=\"BUFF_DARKHPUP\",e.BUFF_DARKHPDOWN=\"BUFF_DARKHPDOWN\",e.BUFF_DARKATKUP=\"BUFF_DARKATKUP\",e.BUFF_DARKATKDOWN=\"BUFF_DARKATKDOWN\",e.BUFF_DARKDEFUP=\"BUFF_DARKDEFUP\",e.BUFF_DARKDEFDOWN=\"BUFF_DARKDEFDOWN\",e.BUFF_DARKRECUP=\"BUFF_DARKRECUP\",e.BUFF_DARKRECDOWN=\"BUFF_DARKRECDOWN\",e.BUFF_DARKCRTRATEUP=\"BUFF_DARKCRTRATEUP\",e.BUFF_DARKCRTRATEDOWN=\"BUFF_DARKCRTRATEDOWN\",e.BUFF_ELEMENTHPUP=\"BUFF_ELEMENTHPUP\",e.BUFF_ELEMENTHPDOWN=\"BUFF_ELEMENTHPDOWN\",e.BUFF_ELEMENTATKUP=\"BUFF_ELEMENTATKUP\",e.BUFF_ELEMENTATKDOWN=\"BUFF_ELEMENTATKDOWN\",e.BUFF_ELEMENTDEFUP=\"BUFF_ELEMENTDEFUP\",e.BUFF_ELEMENTDEFDOWN=\"BUFF_ELEMENTDEFDOWN\",e.BUFF_ELEMENTRECUP=\"BUFF_ELEMENTRECUP\",e.BUFF_ELEMENTRECDOWN=\"BUFF_ELEMENTRECDOWN\",e.BUFF_ELEMENTCRTRATEUP=\"BUFF_ELEMENTCRTRATEUP\",e.BUFF_ELEMENTCRTRATEDOWN=\"BUFF_ELEMENTCRTRATEDOWN\",e.BUFF_LORDHPUP=\"BUFF_LORDHPUP\",e.BUFF_LORDHPDOWN=\"BUFF_LORDHPDOWN\",e.BUFF_LORDATKUP=\"BUFF_LORDATKUP\",e.BUFF_LORDATKDOWN=\"BUFF_LORDATKDOWN\",e.BUFF_LORDDEFUP=\"BUFF_LORDDEFUP\",e.BUFF_LORDDEFDOWN=\"BUFF_LORDDEFDOWN\",e.BUFF_LORDRECUP=\"BUFF_LORDRECUP\",e.BUFF_LORDRECDOWN=\"BUFF_LORDRECDOWN\",e.BUFF_LORDCRTRATEUP=\"BUFF_LORDCRTRATEUP\",e.BUFF_LORDCRTRATEDOWN=\"BUFF_LORDCRTRATEDOWN\",e.BUFF_ANIMAHPUP=\"BUFF_ANIMAHPUP\",e.BUFF_ANIMAHPDOWN=\"BUFF_ANIMAHPDOWN\",e.BUFF_ANIMAATKUP=\"BUFF_ANIMAATKUP\",e.BUFF_ANIMAATKDOWN=\"BUFF_ANIMAATKDOWN\",e.BUFF_ANIMADEFUP=\"BUFF_ANIMADEFUP\",e.BUFF_ANIMADEFDOWN=\"BUFF_ANIMADEFDOWN\",e.BUFF_ANIMARECUP=\"BUFF_ANIMARECUP\",e.BUFF_ANIMARECDOWN=\"BUFF_ANIMARECDOWN\",e.BUFF_ANIMACRTRATEUP=\"BUFF_ANIMACRTRATEUP\",e.BUFF_ANIMACRTRATEDOWN=\"BUFF_ANIMACRTRATEDOWN\",e.BUFF_BREAKERHPUP=\"BUFF_BREAKERHPUP\",e.BUFF_BREAKERHPDOWN=\"BUFF_BREAKERHPDOWN\",e.BUFF_BREAKERATKUP=\"BUFF_BREAKERATKUP\",e.BUFF_BREAKERATKDOWN=\"BUFF_BREAKERATKDOWN\",e.BUFF_BREAKERDEFUP=\"BUFF_BREAKERDEFUP\",e.BUFF_BREAKERDEFDOWN=\"BUFF_BREAKERDEFDOWN\",e.BUFF_BREAKERRECUP=\"BUFF_BREAKERRECUP\",e.BUFF_BREAKERRECDOWN=\"BUFF_BREAKERRECDOWN\",e.BUFF_BREAKERCRTRATEUP=\"BUFF_BREAKERCRTRATEUP\",e.BUFF_BREAKERCRTRATEDOWN=\"BUFF_BREAKERCRTRATEDOWN\",e.BUFF_GUARDIANHPUP=\"BUFF_GUARDIANHPUP\",e.BUFF_GUARDIANHPDOWN=\"BUFF_GUARDIANHPDOWN\",e.BUFF_GUARDIANATKUP=\"BUFF_GUARDIANATKUP\",e.BUFF_GUARDIANATKDOWN=\"BUFF_GUARDIANATKDOWN\",e.BUFF_GUARDIANDEFUP=\"BUFF_GUARDIANDEFUP\",e.BUFF_GUARDIANDEFDOWN=\"BUFF_GUARDIANDEFDOWN\",e.BUFF_GUARDIANRECUP=\"BUFF_GUARDIANRECUP\",e.BUFF_GUARDIANRECDOWN=\"BUFF_GUARDIANRECDOWN\",e.BUFF_GUARDIANCRTRATEUP=\"BUFF_GUARDIANCRTRATEUP\",e.BUFF_GUARDIANCRTRATEDOWN=\"BUFF_GUARDIANCRTRATEDOWN\",e.BUFF_ORACLEHPUP=\"BUFF_ORACLEHPUP\",e.BUFF_ORACLEHPDOWN=\"BUFF_ORACLEHPDOWN\",e.BUFF_ORACLEATKUP=\"BUFF_ORACLEATKUP\",e.BUFF_ORACLEATKDOWN=\"BUFF_ORACLEATKDOWN\",e.BUFF_ORACLEDEFUP=\"BUFF_ORACLEDEFUP\",e.BUFF_ORACLEDEFDOWN=\"BUFF_ORACLEDEFDOWN\",e.BUFF_ORACLERECUP=\"BUFF_ORACLERECUP\",e.BUFF_ORACLERECDOWN=\"BUFF_ORACLERECDOWN\",e.BUFF_ORACLECRTRATEUP=\"BUFF_ORACLECRTRATEUP\",e.BUFF_ORACLECRTRATEDOWN=\"BUFF_ORACLECRTRATEDOWN\",e.BUFF_REXHPUP=\"BUFF_REXHPUP\",e.BUFF_REXHPDOWN=\"BUFF_REXHPDOWN\",e.BUFF_REXATKUP=\"BUFF_REXATKUP\",e.BUFF_REXATKDOWN=\"BUFF_REXATKDOWN\",e.BUFF_REXDEFUP=\"BUFF_REXDEFUP\",e.BUFF_REXDEFDOWN=\"BUFF_REXDEFDOWN\",e.BUFF_REXRECUP=\"BUFF_REXRECUP\",e.BUFF_REXRECDOWN=\"BUFF_REXRECDOWN\",e.BUFF_REXCRTRATEUP=\"BUFF_REXCRTRATEUP\",e.BUFF_REXCRTRATEDOWN=\"BUFF_REXCRTRATEDOWN\",e.BUFF_UNITTYPEHPUP=\"BUFF_UNITTYPEHPUP\",e.BUFF_UNITTYPEHPDOWN=\"BUFF_UNITTYPEHPDOWN\",e.BUFF_UNITTYPEATKUP=\"BUFF_UNITTYPEATKUP\",e.BUFF_UNITTYPEATKDOWN=\"BUFF_UNITTYPEATKDOWN\",e.BUFF_UNITTYPEDEFUP=\"BUFF_UNITTYPEDEFUP\",e.BUFF_UNITTYPEDEFDOWN=\"BUFF_UNITTYPEDEFDOWN\",e.BUFF_UNITTYPERECUP=\"BUFF_UNITTYPERECUP\",e.BUFF_UNITTYPERECDOWN=\"BUFF_UNITTYPERECDOWN\",e.BUFF_UNITTYPECRTRATEUP=\"BUFF_UNITTYPECRTRATEUP\",e.BUFF_UNITTYPECRTRATEDOWN=\"BUFF_UNITTYPECRTRATEDOWN\",e.BUFF_UNIQUEELEMENTHPUP=\"BUFF_UNIQUEELEMENTHPUP\",e.BUFF_UNIQUEELEMENTHPDOWN=\"BUFF_UNIQUEELEMENTHPDOWN\",e.BUFF_UNIQUEELEMENTATKUP=\"BUFF_UNIQUEELEMENTATKUP\",e.BUFF_UNIQUEELEMENTATKDOWN=\"BUFF_UNIQUEELEMENTATKDOWN\",e.BUFF_UNIQUEELEMENTDEFUP=\"BUFF_UNIQUEELEMENTDEFUP\",e.BUFF_UNIQUEELEMENTDEFDOWN=\"BUFF_UNIQUEELEMENTDEFDOWN\",e.BUFF_UNIQUEELEMENTRECUP=\"BUFF_UNIQUEELEMENTRECUP\",e.BUFF_UNIQUEELEMENTRECDOWN=\"BUFF_UNIQUEELEMENTRECDOWN\",e.BUFF_UNIQUEELEMENTCRTRATEUP=\"BUFF_UNIQUEELEMENTCRTRATEUP\",e.BUFF_UNIQUEELEMENTCRTRATEDOWN=\"BUFF_UNIQUEELEMENTCRTRATEDOWN\",e.BUFF_MALEHPUP=\"BUFF_MALEHPUP\",e.BUFF_MALEHPDOWN=\"BUFF_MALEHPDOWN\",e.BUFF_MALEATKUP=\"BUFF_MALEATKUP\",e.BUFF_MALEATKDOWN=\"BUFF_MALEATKDOWN\",e.BUFF_MALEDEFUP=\"BUFF_MALEDEFUP\",e.BUFF_MALEDEFDOWN=\"BUFF_MALEDEFDOWN\",e.BUFF_MALERECUP=\"BUFF_MALERECUP\",e.BUFF_MALERECDOWN=\"BUFF_MALERECDOWN\",e.BUFF_MALECRTRATEUP=\"BUFF_MALECRTRATEUP\",e.BUFF_MALECRTRATEDOWN=\"BUFF_MALECRTRATEDOWN\",e.BUFF_FEMALEHPUP=\"BUFF_FEMALEHPUP\",e.BUFF_FEMALEHPDOWN=\"BUFF_FEMALEHPDOWN\",e.BUFF_FEMALEATKUP=\"BUFF_FEMALEATKUP\",e.BUFF_FEMALEATKDOWN=\"BUFF_FEMALEATKDOWN\",e.BUFF_FEMALEDEFUP=\"BUFF_FEMALEDEFUP\",e.BUFF_FEMALEDEFDOWN=\"BUFF_FEMALEDEFDOWN\",e.BUFF_FEMALERECUP=\"BUFF_FEMALERECUP\",e.BUFF_FEMALERECDOWN=\"BUFF_FEMALERECDOWN\",e.BUFF_FEMALECRTRATEUP=\"BUFF_FEMALECRTRATEUP\",e.BUFF_FEMALECRTRATEDOWN=\"BUFF_FEMALECRTRATEDOWN\",e.BUFF_OTHERHPUP=\"BUFF_OTHERHPUP\",e.BUFF_OTHERHPDOWN=\"BUFF_OTHERHPDOWN\",e.BUFF_OTHERATKUP=\"BUFF_OTHERATKUP\",e.BUFF_OTHERATKDOWN=\"BUFF_OTHERATKDOWN\",e.BUFF_OTHERDEFUP=\"BUFF_OTHERDEFUP\",e.BUFF_OTHERDEFDOWN=\"BUFF_OTHERDEFDOWN\",e.BUFF_OTHERRECUP=\"BUFF_OTHERRECUP\",e.BUFF_OTHERRECDOWN=\"BUFF_OTHERRECDOWN\",e.BUFF_OTHERCRTRATEUP=\"BUFF_OTHERCRTRATEUP\",e.BUFF_OTHERCRTRATEDOWN=\"BUFF_OTHERCRTRATEDOWN\",e.BUFF_GENDERHPUP=\"BUFF_GENDERHPUP\",e.BUFF_GENDERHPDOWN=\"BUFF_GENDERHPDOWN\",e.BUFF_GENDERATKUP=\"BUFF_GENDERATKUP\",e.BUFF_GENDERATKDOWN=\"BUFF_GENDERATKDOWN\",e.BUFF_GENDERDEFUP=\"BUFF_GENDERDEFUP\",e.BUFF_GENDERDEFDOWN=\"BUFF_GENDERDEFDOWN\",e.BUFF_GENDERRECUP=\"BUFF_GENDERRECUP\",e.BUFF_GENDERRECDOWN=\"BUFF_GENDERRECDOWN\",e.BUFF_GENDERCRTRATEUP=\"BUFF_GENDERCRTRATEUP\",e.BUFF_GENDERCRTRATEDOWN=\"BUFF_GENDERCRTRATEDOWN\",e.BUFF_CONVERTATKUP=\"BUFF_CONVERTATKUP\",e.BUFF_CONVERTATKDOWN=\"BUFF_CONVERTATKDOWN\",e.BUFF_CONVERTDEFUP=\"BUFF_CONVERTDEFUP\",e.BUFF_CONVERTDEFDOWN=\"BUFF_CONVERTDEFDOWN\",e.BUFF_CONVERTRECUP=\"BUFF_CONVERTRECUP\",e.BUFF_CONVERTRECDOWN=\"BUFF_CONVERTRECDOWN\",e.BUFF_HPSCALEDATKUP=\"BUFF_HPSCALEDATKUP\",e.BUFF_HPSCALEDATKDOWN=\"BUFF_HPSCALEDATKDOWN\",e.BUFF_HPSCALEDDEFUP=\"BUFF_HPSCALEDDEFUP\",e.BUFF_HPSCALEDDEFDOWN=\"BUFF_HPSCALEDDEFDOWN\",e.BUFF_HPSCALEDRECUP=\"BUFF_HPSCALEDRECUP\",e.BUFF_HPSCALEDRECDOWN=\"BUFF_HPSCALEDRECDOWN\",e.BUFF_SELFATKUP=\"BUFF_SELFATKUP\",e.BUFF_ATKDOWNLOCK=\"BUFF_ATKDOWNLOCK\",e.BUFF_SELFDEFUP=\"BUFF_SELFDEFUP\",e.BUFF_DEFDOWNLOCK=\"BUFF_DEFDOWNLOCK\",e.BUFF_SELFRECUP=\"BUFF_SELFRECUP\",e.BUFF_RECDOWNLOCK=\"BUFF_RECDOWNLOCK\",e.BUFF_SELFCRTRATEUP=\"BUFF_SELFCRTRATEUP\",e.BUFF_CRTRATEDOWNLOCK=\"BUFF_CRTRATEDOWNLOCK\",e.BUFF_POISONBLK=\"BUFF_POISONBLK\",e.BUFF_WEAKBLK=\"BUFF_WEAKBLK\",e.BUFF_SICKBLK=\"BUFF_SICKBLK\",e.BUFF_INJURYBLK=\"BUFF_INJURYBLK\",e.BUFF_CURSEBLK=\"BUFF_CURSEBLK\",e.BUFF_PARALYSISBLK=\"BUFF_PARALYSISBLK\",e.BUFF_RESISTATKDOWN=\"BUFF_RESISTATKDOWN\",e.BUFF_RESISTDEFDOWN=\"BUFF_RESISTDEFDOWN\",e.BUFF_RESISTRECDOWN=\"BUFF_RESISTRECDOWN\",e.BUFF_AILMENTBLK=\"BUFF_AILMENTBLK\",e.DEBUFF_POISON=\"DEBUFF_POISON\",e.DEBUFF_WEAK=\"DEBUFF_WEAK\",e.DEBUFF_SICK=\"DEBUFF_SICK\",e.DEBUFF_INJURY=\"DEBUFF_INJURY\",e.DEBUFF_CURSE=\"DEBUFF_CURSE\",e.DEBUFF_PARALYSIS=\"DEBUFF_PARALYSIS\",e.DEBUFF_AILMENT=\"DEBUFF_AILMENT\",e.BUFF_ADDPOISON=\"BUFF_ADDPOISON\",e.BUFF_ADDWEAK=\"BUFF_ADDWEAK\",e.BUFF_ADDSICK=\"BUFF_ADDSICK\",e.BUFF_ADDINJURY=\"BUFF_ADDINJURY\",e.BUFF_ADDCURSE=\"BUFF_ADDCURSE\",e.BUFF_ADDPARA=\"BUFF_ADDPARA\",e.BUFF_ADDAILMENT=\"BUFF_ADDAILMENT\",e.BUFF_ADDATKDOWN=\"BUFF_ADDATKDOWN\",e.BUFF_ADDDEFDOWN=\"BUFF_ADDDEFDOWN\",e.BUFF_ADDRECDOWN=\"BUFF_ADDRECDOWN\",e.BUFF_POISONCOUNTER=\"BUFF_POISONCOUNTER\",e.BUFF_POISIONCOUNTER=\"BUFF_POISONCOUNTER\",e.BUFF_WEAKCOUNTER=\"BUFF_WEAKCOUNTER\",e.BUFF_SICKCOUNTER=\"BUFF_SICKCOUNTER\",e.BUFF_INJCONTER=\"BUFF_INJCONTER\",e.BUFF_CURSECOUNTER=\"BUFF_CURSECOUNTER\",e.BUFF_PARALYCOUNTER=\"BUFF_PARALYCOUNTER\",e.BUFF_PROB_ATKREDUC=\"BUFF_PROB_ATKREDUC\",e.BUFF_PROB_DEFREDUC=\"BUFF_PROB_DEFREDUC\",e.BUFF_PROB_RECREDUC=\"BUFF_PROB_RECREDUC\",e.BUFF_DAMAGECUT=\"BUFF_DAMAGECUT\",e.BUFF_DAMAGECUTTOONE=\"BUFF_DAMAGECUTTOONE\",e.BUFF_FIREDMGDOWN=\"BUFF_FIREDMGDOWN\",e.BUFF_WATERDMGDOWN=\"BUFF_WATERDMGDOWN\",e.BUFF_EARTHDMGDOWN=\"BUFF_EARTHDMGDOWN\",e.BUFF_THUNDERDMGDOWN=\"BUFF_THUNDERDMGDOWN\",e.BUFF_LIGHTDMGDOWN=\"BUFF_LIGHTDMGDOWN\",e.BUFF_DARKDMGDOWN=\"BUFF_DARKDMGDOWN\",e.BUFF_ELEMENTDMGDOWN=\"BUFF_ELEMENTDMGDOWN\",e.BUFF_FIREDMGUP=\"BUFF_FIREDMGUP\",e.BUFF_WATERDMGUP=\"BUFF_WATERDMGUP\",e.BUFF_WATERMDGUP=\"BUFF_WATERDMGUP\",e.BUFF_EARTHDMGUP=\"BUFF_EARTHDMGUP\",e.BUFF_THUNDERDMGUP=\"BUFF_THUNDERDMGUP\",e.BUFF_LIGHTDMGUP=\"BUFF_LIGHTDMGUP\",e.BUFF_DARKDMGUP=\"BUFF_DARKDMGUP\",e.BUFF_ELEMENTDMGUP=\"BUFF_ELEMENTDMGUP\",e.BUFF_HCDROP=\"BUFF_HCDROP\",e.BUFF_HCDOWN=\"BUFF_HCDOWN\",e.BUFF_BCDROP=\"BUFF_BCDROP\",e.BUFF_BCDOWN=\"BUFF_BCDOWN\",e.BUFF_ITEMDROP=\"BUFF_ITEMDROP\",e.BUFF_ITEMDOWN=\"BUFF_ITEMDOWN\",e.BUFF_ZELDROP=\"BUFF_ZELDROP\",e.BUFF_ZELDOWN=\"BUFF_ZELDOWN\",e.BUFF_KARMADROP=\"BUFF_KARMADROP\",e.BUFF_KARMADOWN=\"BUFF_KARMADOWN\",e.BUFF_HPTHRESHHCDROP=\"BUFF_HPTHRESHHCDROP\",e.BUFF_HPTHRESHHCDOWN=\"BUFF_HPTHRESHHCDOWN\",e.BUFF_HPTHRESHBCDROP=\"BUFF_HPTHRESHBCDROP\",e.BUFF_HPTHRESHBCDOWN=\"BUFF_HPTHRESHBCDOWN\",e.BUFF_HPTHRESHITEMDROP=\"BUFF_HPTHRESHITEMDROP\",e.BUFF_HPTHRESHITEMDOWN=\"BUFF_HPTHRESHITEMDOWN\",e.BUFF_HPTHRESHZELDROP=\"BUFF_HPTHRESHZELDROP\",e.BUFF_HPTHRESHZELDOWN=\"BUFF_HPTHRESHZELDOWN\",e.BUFF_HPTHRESHKARMADROP=\"BUFF_HPTHRESHKARMADROP\",e.BUFF_HPTHRESHKARMADOWN=\"BUFF_HPTHRESHKARMADOWN\",e.BUFF_BBFILL=\"BUFF_BBFILL\",e.BUFF_BBFILLDOWN=\"BUFF_BBFILLDOWN\",e.BUFF_HCREC=\"BUFF_HCREC\",e.BUFF_KOBLK=\"BUFF_KOBLK\",e.BUFF_KO=\"BUFF_KO\",e.BUFF_KOBLOCK=\"BUFF_KOBLOCK\",e.BUFF_HPABS=\"BUFF_HPABS\",e.BUFF_IGNOREDEF=\"BUFF_IGNOREDEF\",e.BUFF_CRTUP=\"BUFF_CRTUP\",e.BUFF_CRTDOWN=\"BUFF_CRTDOWN\",e.BUFF_ELEMENTDOWN=\"BUFF_ELEMENTDOWN\",e.BUFF_SPARKUP=\"BUFF_SPARKUP\",e.BUFF_SPARKDOWN=\"BUFF_SPARKDOWN\",e.BUFF_SPARKDMGUP=\"BUFF_SPARKDMGUP\",e.BUFF_SPARKDMGDOWN=\"BUFF_SPARKDMGDOWN\",e.BUFF_SPARKHC=\"BUFF_SPARKHC\",e.BUFF_SPARKBC=\"BUFF_SPARKBC\",e.BUFF_SPARKITEM=\"BUFF_SPARKITEM\",e.BUFF_SPARKZEL=\"BUFF_SPARKZEL\",e.BUFF_SPARKKARMA=\"BUFF_SPARKKARMA\",e.BUFF_SPARKBBUP=\"BUFF_SPARKBBUP\",e.BUFF_HITUP=\"BUFF_HITUP\",e.BUFF_COUNTERDAMAGE=\"BUFF_COUNTERDAMAGE\",e.BUFF_GETENEATT=\"BUFF_GETENEATT\",e.BUFF_REPENEATT=\"BUFF_REPENEATT\",e.BUFF_HPTHRESHGETENEATT=\"BUFF_HPTHRESHGETENEATT\",e.BUFF_HPTHRESHREPENEATT=\"BUFF_HPTHRESHREPENEATT\",e.BUFF_ADDFIRE=\"BUFF_ADDFIRE\",e.BUFF_ADDWATER=\"BUFF_ADDWATER\",e.BUFF_ADDEARTH=\"BUFF_ADDEARTH\",e.BUFF_ADDTHUNDER=\"BUFF_ADDTHUNDER\",e.BUFF_ADDLIGHT=\"BUFF_ADDLIGHT\",e.BUFF_ADDDARK=\"BUFF_ADDDARK\",e.BUFF_ADDELEMENT=\"BUFF_ADDELEMENT\",e.BUFF_SHIFTFIRE=\"BUFF_SHIFTFIRE\",e.BUFF_SHIFTWATER=\"BUFF_SHIFTWATER\",e.BUFF_SHIFTEARTH=\"BUFF_SHIFTEARTH\",e.BUFF_SHIFTTHUNDER=\"BUFF_SHIFTTHUNDER\",e.BUFF_SHIFTLIGHT=\"BUFF_SHIFTLIGHT\",e.BUFF_SHIFTDARK=\"BUFF_SHIFTDARK\",e.BUFF_SHIFTELEMENT=\"BUFF_SHIFTELEMENT\",e.BUFF_REMOVEBUFF=\"BUFF_REMOVEBUFF\",e.BUFF_DISABLELS=\"BUFF_DISABLELS\",e.BUFF_SUMMONUNIT=\"BUFF_SUMMONUNIT\",e.BUFF_DBLSTRIKE=\"BUFF_DBLSTRIKE\",e.BUFF_OVERDRIVEUP=\"BUFF_OVERDRIVEUP\",e.BUFF_ODFILLBOOST=\"BUFF_ODFILLBOOST\",e.BUFF_TURNDMG=\"BUFF_TURNDMG\",e.BUFF_BBATKUP=\"BUFF_BBATKUP\",e.BUFF_SBBATKUP=\"BUFF_SBBATKUP\",e.BUFF_UBBATKUP=\"BUFF_UBBATKUP\",e.BUFF_BBATKDOWN=\"BUFF_BBATKDOWN\",e.BUFF_SBBATKDOWN=\"BUFF_SBBATKDOWN\",e.BUFF_UBBATKDOWN=\"BUFF_UBBATKDOWN\",e.BUFF_BBCOST_REDUCTION=\"BUFF_BBCOST_REDUCTION\",e.BUFF_GUARDCUT=\"BUFF_GUARDCUT\",e.BUFF_GUARDBBUP=\"BUFF_GUARDBBUP\",e.BUFF_FIRESHIELD=\"BUFF_FIRESHIELD\",e.BUFF_WATERSHIELD=\"BUFF_WATERSHIELD\",e.BUFF_EARTHSHIELD=\"BUFF_EARTHSHIELD\",e.BUFF_THUNDERSHIELD=\"BUFF_THUNDERSHIELD\",e.BUFF_LIGHTSHIELD=\"BUFF_LIGHTSHIELD\",e.BUFF_DARKSHIELD=\"BUFF_DARKSHIELD\",e.BUFF_ELEMENTSHIELD=\"BUFF_ELEMENTSHIELD\",e.BUFF_AILDMGUP=\"BUFF_AILDMGUP\",e.BUFF_HPTURNSTART=\"BUFF_HPTURNSTART\",e.BUFF_BCTURNSTART=\"BUFF_BCTURNSTART\",e.ATK_ST=\"ATK_ST\",e.ATK_AOE=\"ATK_AOE\",e.ATK_RT=\"ATK_RT\",e.ATK_ST_HPREC=\"ATK_ST_HPREC\",e.ATK_AOE_HPREC=\"ATK_AOE_HPREC\",e.ATK_ST_PROPORTIONAL=\"ATK_ST_PROPORTIONAL\",e.ATK_AOE_PROPORTIONAL=\"ATK_AOE_PROPORTIONAL\",e.ATK_ST_PIERCING_PROPORTIONAL=\"ATK_ST_PIERCING_PROPORTIONAL\",e.ATK_AOE_PIERCING_PROPORTIONAL=\"ATK_AOE_PIERCING_PROPORTIONAL\",e.ATK_ST_FIXED=\"ATK_ST_FIXED\",e.ATK_AOE_FIXED=\"ATK_AOE_FIXED\",e.ATK_ST_PIERCING_FIXED=\"ATK_ST_PIERCING_FIXED\",e.ATK_AOE_PIERCING_FIXED=\"ATK_AOE_PIERCING_FIXED\",e.ATK_ST_MULTIELEMENT=\"ATK_ST_MULTIELEMENT\",e.ATK_AOE_MULTIELEMENT=\"ATK_AOE_MULTIELEMENT\",e.ATK_ST_SACRIFICIAL=\"ATK_ST_SACRIFICIAL\",e.ATK_AOE_SACRIFICIAL=\"ATK_AOE_SACRIFICIAL\",e.ATK_ST_HPSCALED=\"ATK_ST_HPSCALED\",e.ATK_AOE_HPSCALED=\"ATK_AOE_HPSCALED\",e.ATK_ST_BBGAUGESCALED=\"ATK_ST_BBGAUGESCALED\",e.ATK_AOE_BBGAUGESCALED=\"ATK_AOE_BBGAUGESCALED\",e.ATK_ST_USAGESCALED=\"ATK_ST_USAGESCALED\",e.ATK_AOE_USAGESCALED=\"ATK_AOE_USAGESCALED\",e.ATK_ST_ELEMENTSCALED=\"ATK_ST_ELEMENTSCALED\",e.ATK_AOE_ELEMENTSCALED=\"ATK_AOE_ELEMENTSCALED\"}(j||(j={})),function(e){e.TURN_DURATION_MODIFICATION=\"TURN_DURATION_MODIFICATION\",e.NO_PARAMS_SPECIFIED=\"NO_PARAMS_SPECIFIED\",e.UNKNOWN_PASSIVE_EFFECT_ID=\"UNKNOWN_PASSIVE_EFFECT_ID\",e.UNKNOWN_PASSIVE_BUFF_PARAMS=\"UNKNOWN_PASSIVE_BUFF_PARAMS\",e[\"passive:1:hp\"]=\"passive:1:hp\",e[\"passive:1:atk\"]=\"passive:1:atk\",e[\"passive:1:def\"]=\"passive:1:def\",e[\"passive:1:rec\"]=\"passive:1:rec\",e[\"passive:1:crit\"]=\"passive:1:crit\",e[\"passive:2:elemental-hp\"]=\"passive:2:elemental-hp\",e[\"passive:2:elemental-atk\"]=\"passive:2:elemental-atk\",e[\"passive:2:elemental-def\"]=\"passive:2:elemental-def\",e[\"passive:2:elemental-rec\"]=\"passive:2:elemental-rec\",e[\"passive:2:elemental-crit\"]=\"passive:2:elemental-crit\",e[\"passive:3:type based-hp\"]=\"passive:3:type based-hp\",e[\"passive:3:type based-atk\"]=\"passive:3:type based-atk\",e[\"passive:3:type based-def\"]=\"passive:3:type based-def\",e[\"passive:3:type based-rec\"]=\"passive:3:type based-rec\",e[\"passive:3:type based-crit\"]=\"passive:3:type based-crit\",e[\"passive:4:resist-poison\"]=\"passive:4:resist-poison\",e[\"passive:4:resist-weak\"]=\"passive:4:resist-weak\",e[\"passive:4:resist-sick\"]=\"passive:4:resist-sick\",e[\"passive:4:resist-injury\"]=\"passive:4:resist-injury\",e[\"passive:4:resist-curse\"]=\"passive:4:resist-curse\",e[\"passive:4:resist-paralysis\"]=\"passive:4:resist-paralysis\",e[\"passive:5:mitigate-fire\"]=\"passive:5:mitigate-fire\",e[\"passive:5:mitigate-water\"]=\"passive:5:mitigate-water\",e[\"passive:5:mitigate-earth\"]=\"passive:5:mitigate-earth\",e[\"passive:5:mitigate-thunder\"]=\"passive:5:mitigate-thunder\",e[\"passive:5:mitigate-light\"]=\"passive:5:mitigate-light\",e[\"passive:5:mitigate-dark\"]=\"passive:5:mitigate-dark\",e[\"passive:5:mitigate-unknown\"]=\"passive:5:mitigate-unknown\",e[\"passive:8:mitigation\"]=\"passive:8:mitigation\",e[\"passive:9:gradual bc fill\"]=\"passive:9:gradual bc fill\",e[\"passive:10:hc efficacy\"]=\"passive:10:hc efficacy\",e[\"passive:11:hp conditional-atk\"]=\"passive:11:hp conditional-atk\",e[\"passive:11:hp conditional-def\"]=\"passive:11:hp conditional-def\",e[\"passive:11:hp conditional-rec\"]=\"passive:11:hp conditional-rec\",e[\"passive:11:hp conditional-crit\"]=\"passive:11:hp conditional-crit\",e[\"passive:12:hp conditional drop boost-bc\"]=\"passive:12:hp conditional drop boost-bc\",e[\"passive:12:hp conditional drop boost-hc\"]=\"passive:12:hp conditional drop boost-hc\",e[\"passive:12:hp conditional drop boost-item\"]=\"passive:12:hp conditional drop boost-item\",e[\"passive:12:hp conditional drop boost-zel\"]=\"passive:12:hp conditional drop boost-zel\",e[\"passive:12:hp conditional drop boost-karma\"]=\"passive:12:hp conditional drop boost-karma\",e[\"passive:13:bc fill on enemy defeat\"]=\"passive:13:bc fill on enemy defeat\",e[\"passive:14:chance mitigation\"]=\"passive:14:chance mitigation\",e[\"passive:15:heal on enemy defeat\"]=\"passive:15:heal on enemy defeat\",e[\"passive:16:heal on win\"]=\"passive:16:heal on win\",e[\"passive:17:hp absorb\"]=\"passive:17:hp absorb\",e[\"passive:19:drop boost-bc\"]=\"passive:19:drop boost-bc\",e[\"passive:19:drop boost-hc\"]=\"passive:19:drop boost-hc\",e[\"passive:19:drop boost-item\"]=\"passive:19:drop boost-item\",e[\"passive:19:drop boost-zel\"]=\"passive:19:drop boost-zel\",e[\"passive:19:drop boost-karma\"]=\"passive:19:drop boost-karma\",e[\"passive:20:chance inflict-poison\"]=\"passive:20:chance inflict-poison\",e[\"passive:20:chance inflict-weak\"]=\"passive:20:chance inflict-weak\",e[\"passive:20:chance inflict-sick\"]=\"passive:20:chance inflict-sick\",e[\"passive:20:chance inflict-injury\"]=\"passive:20:chance inflict-injury\",e[\"passive:20:chance inflict-curse\"]=\"passive:20:chance inflict-curse\",e[\"passive:20:chance inflict-paralysis\"]=\"passive:20:chance inflict-paralysis\",e[\"passive:20:chance inflict-atk down\"]=\"passive:20:chance inflict-atk down\",e[\"passive:20:chance inflict-def down\"]=\"passive:20:chance inflict-def down\",e[\"passive:20:chance inflict-rec down\"]=\"passive:20:chance inflict-rec down\",e[\"passive:20:chance inflict-unknown\"]=\"passive:20:chance inflict-unknown\",e[\"passive:21:first turn-atk\"]=\"passive:21:first turn-atk\",e[\"passive:21:first turn-def\"]=\"passive:21:first turn-def\",e[\"passive:21:first turn-rec\"]=\"passive:21:first turn-rec\",e[\"passive:21:first turn-crit\"]=\"passive:21:first turn-crit\",e[\"passive:23:bc fill on win\"]=\"passive:23:bc fill on win\",e[\"passive:24:heal on hit\"]=\"passive:24:heal on hit\",e[\"passive:25:bc fill on hit\"]=\"passive:25:bc fill on hit\",e[\"passive:26:chance damage reflect\"]=\"passive:26:chance damage reflect\",e[\"passive:27:target chance change\"]=\"passive:27:target chance change\",e[\"passive:28:hp conditional target chance change\"]=\"passive:28:hp conditional target chance change\",e[\"passive:29:chance def ignore\"]=\"passive:29:chance def ignore\",e[\"passive:30:bb gauge conditional-atk\"]=\"passive:30:bb gauge conditional-atk\",e[\"passive:30:bb gauge conditional-def\"]=\"passive:30:bb gauge conditional-def\",e[\"passive:30:bb gauge conditional-rec\"]=\"passive:30:bb gauge conditional-rec\",e[\"passive:30:bb gauge conditional-crit\"]=\"passive:30:bb gauge conditional-crit\",e[\"passive:31:spark-damage\"]=\"passive:31:spark-damage\",e[\"passive:31:spark-bc\"]=\"passive:31:spark-bc\",e[\"passive:31:spark-hc\"]=\"passive:31:spark-hc\",e[\"passive:31:spark-item\"]=\"passive:31:spark-item\",e[\"passive:31:spark-zel\"]=\"passive:31:spark-zel\",e[\"passive:31:spark-karma\"]=\"passive:31:spark-karma\",e[\"passive:32:bc efficacy\"]=\"passive:32:bc efficacy\",e[\"passive:33:gradual heal\"]=\"passive:33:gradual heal\",e[\"passive:34:critical damage\"]=\"passive:34:critical damage\",e[\"passive:35:bc fill on normal attack\"]=\"passive:35:bc fill on normal attack\",e[\"passive:36:extra action\"]=\"passive:36:extra action\",e[\"passive:37:hit count boost\"]=\"passive:37:hit count boost\",e[\"passive:40:converted-atk\"]=\"passive:40:converted-atk\",e[\"passive:40:converted-def\"]=\"passive:40:converted-def\",e[\"passive:40:converted-rec\"]=\"passive:40:converted-rec\",e[\"passive:41:unique element count-hp\"]=\"passive:41:unique element count-hp\",e[\"passive:41:unique element count-atk\"]=\"passive:41:unique element count-atk\",e[\"passive:41:unique element count-def\"]=\"passive:41:unique element count-def\",e[\"passive:41:unique element count-rec\"]=\"passive:41:unique element count-rec\",e[\"passive:41:unique element count-crit\"]=\"passive:41:unique element count-crit\",e[\"passive:42:gender-hp\"]=\"passive:42:gender-hp\",e[\"passive:42:gender-atk\"]=\"passive:42:gender-atk\",e[\"passive:42:gender-def\"]=\"passive:42:gender-def\",e[\"passive:42:gender-rec\"]=\"passive:42:gender-rec\",e[\"passive:42:gender-crit\"]=\"passive:42:gender-crit\",e[\"passive:43:chance damage to one\"]=\"passive:43:chance damage to one\",e[\"passive:44:flat-hp\"]=\"passive:44:flat-hp\",e[\"passive:44:flat-atk\"]=\"passive:44:flat-atk\",e[\"passive:44:flat-def\"]=\"passive:44:flat-def\",e[\"passive:44:flat-rec\"]=\"passive:44:flat-rec\",e[\"passive:44:flat-crit\"]=\"passive:44:flat-crit\",e[\"passive:45:critical damage reduction-base\"]=\"passive:45:critical damage reduction-base\",e[\"passive:45:critical damage reduction-buff\"]=\"passive:45:critical damage reduction-buff\",e[\"passive:46:hp scaled-atk\"]=\"passive:46:hp scaled-atk\",e[\"passive:46:hp scaled-def\"]=\"passive:46:hp scaled-def\",e[\"passive:46:hp scaled-rec\"]=\"passive:46:hp scaled-rec\",e[\"passive:47:bc fill on spark\"]=\"passive:47:bc fill on spark\",e[\"passive:48:bc cost reduction\"]=\"passive:48:bc cost reduction\",e[\"passive:49:bb gauge consumption reduction\"]=\"passive:49:bb gauge consumption reduction\",e[\"passive:50:elemental weakness damage-fire\"]=\"passive:50:elemental weakness damage-fire\",e[\"passive:50:elemental weakness damage-water\"]=\"passive:50:elemental weakness damage-water\",e[\"passive:50:elemental weakness damage-earth\"]=\"passive:50:elemental weakness damage-earth\",e[\"passive:50:elemental weakness damage-thunder\"]=\"passive:50:elemental weakness damage-thunder\",e[\"passive:50:elemental weakness damage-light\"]=\"passive:50:elemental weakness damage-light\",e[\"passive:50:elemental weakness damage-dark\"]=\"passive:50:elemental weakness damage-dark\",e[\"passive:50:elemental weakness damage-unknown\"]=\"passive:50:elemental weakness damage-unknown\",e[\"passive:53:critical damage-base\"]=\"passive:53:critical damage-base\",e[\"passive:53:critical damage-buff\"]=\"passive:53:critical damage-buff\",e[\"passive:53:element damage-base\"]=\"passive:53:element damage-base\",e[\"passive:53:element damage-buff\"]=\"passive:53:element damage-buff\",e[\"passive:53:critical rate-base\"]=\"passive:53:critical rate-base\",e[\"passive:53:critical rate-buff\"]=\"passive:53:critical rate-buff\",e[\"passive:55:hp conditional\"]=\"passive:55:hp conditional\",e[\"passive:58:guard mitigation\"]=\"passive:58:guard mitigation\",e[\"passive:59:bc fill when attacked on guard-percent\"]=\"passive:59:bc fill when attacked on guard-percent\",e[\"passive:59:bc fill when attacked on guard-flat\"]=\"passive:59:bc fill when attacked on guard-flat\",e[\"passive:61:bc fill on guard-percent\"]=\"passive:61:bc fill on guard-percent\",e[\"passive:61:bc fill on guard-flat\"]=\"passive:61:bc fill on guard-flat\",e[\"passive:62:mitigate-fire\"]=\"passive:62:mitigate-fire\",e[\"passive:62:mitigate-water\"]=\"passive:62:mitigate-water\",e[\"passive:62:mitigate-earth\"]=\"passive:62:mitigate-earth\",e[\"passive:62:mitigate-thunder\"]=\"passive:62:mitigate-thunder\",e[\"passive:62:mitigate-light\"]=\"passive:62:mitigate-light\",e[\"passive:62:mitigate-dark\"]=\"passive:62:mitigate-dark\",e[\"passive:62:mitigate-unknown\"]=\"passive:62:mitigate-unknown\",e[\"passive:63:first turn mitigate-fire\"]=\"passive:63:first turn mitigate-fire\",e[\"passive:63:first turn mitigate-water\"]=\"passive:63:first turn mitigate-water\",e[\"passive:63:first turn mitigate-earth\"]=\"passive:63:first turn mitigate-earth\",e[\"passive:63:first turn mitigate-thunder\"]=\"passive:63:first turn mitigate-thunder\",e[\"passive:63:first turn mitigate-light\"]=\"passive:63:first turn mitigate-light\",e[\"passive:63:first turn mitigate-dark\"]=\"passive:63:first turn mitigate-dark\",e[\"passive:63:first turn mitigate-unknown\"]=\"passive:63:first turn mitigate-unknown\",e[\"passive:64:attack boost-bb\"]=\"passive:64:attack boost-bb\",e[\"passive:64:attack boost-sbb\"]=\"passive:64:attack boost-sbb\",e[\"passive:64:attack boost-ubb\"]=\"passive:64:attack boost-ubb\",e[\"passive:65:bc fill on crit\"]=\"passive:65:bc fill on crit\",e[\"passive:66:add effect to skill-bb\"]=\"passive:66:add effect to skill-bb\",e[\"passive:66:add effect to skill-sbb\"]=\"passive:66:add effect to skill-sbb\",e[\"passive:66:add effect to skill-ubb\"]=\"passive:66:add effect to skill-ubb\",e[\"passive:69:chance ko resistance\"]=\"passive:69:chance ko resistance\",e[\"passive:70:od fill rate\"]=\"passive:70:od fill rate\",e[\"passive:71:inflict on hit-poison\"]=\"passive:71:inflict on hit-poison\",e[\"passive:71:inflict on hit-weak\"]=\"passive:71:inflict on hit-weak\",e[\"passive:71:inflict on hit-sick\"]=\"passive:71:inflict on hit-sick\",e[\"passive:71:inflict on hit-injury\"]=\"passive:71:inflict on hit-injury\",e[\"passive:71:inflict on hit-curse\"]=\"passive:71:inflict on hit-curse\",e[\"passive:71:inflict on hit-paralysis\"]=\"passive:71:inflict on hit-paralysis\",e[\"passive:72:effect at turn start-hp\"]=\"passive:72:effect at turn start-hp\",e[\"passive:72:effect at turn start-bc\"]=\"passive:72:effect at turn start-bc\",e[\"passive:73:resist-poison\"]=\"passive:73:resist-poison\",e[\"passive:73:resist-weak\"]=\"passive:73:resist-weak\",e[\"passive:73:resist-sick\"]=\"passive:73:resist-sick\",e[\"passive:73:resist-injury\"]=\"passive:73:resist-injury\",e[\"passive:73:resist-curse\"]=\"passive:73:resist-curse\",e[\"passive:73:resist-paralysis\"]=\"passive:73:resist-paralysis\",e[\"passive:73:resist-atk down\"]=\"passive:73:resist-atk down\",e[\"passive:73:resist-def down\"]=\"passive:73:resist-def down\",e[\"passive:73:resist-rec down\"]=\"passive:73:resist-rec down\",e[\"passive:74:ailment attack boost\"]=\"passive:74:ailment attack boost\",e[\"passive:75:spark vulnerability\"]=\"passive:75:spark vulnerability\",e[\"passive:77:spark damage reduction-base\"]=\"passive:77:spark damage reduction-base\",e[\"passive:77:spark damage reduction-buff\"]=\"passive:77:spark damage reduction-buff\",e[\"passive:78:damage taken conditional\"]=\"passive:78:damage taken conditional\",e.UNKNOWN_PROC_EFFECT_ID=\"UNKNOWN_PROC_EFFECT_ID\",e.UNKNOWN_PROC_BUFF_PARAMS=\"UNKNOWN_PROC_BUFF_PARAMS\",e[\"proc:1:attack\"]=\"proc:1:attack\",e[\"proc:2:burst heal\"]=\"proc:2:burst heal\",e[\"proc:3:gradual heal\"]=\"proc:3:gradual heal\",e[\"proc:4:bc fill-flat\"]=\"proc:4:bc fill-flat\",e[\"proc:4:bc fill-percent\"]=\"proc:4:bc fill-percent\",e[\"proc:5:regular or elemental-atk\"]=\"proc:5:regular or elemental-atk\",e[\"proc:5:regular or elemental-def\"]=\"proc:5:regular or elemental-def\",e[\"proc:5:regular or elemental-rec\"]=\"proc:5:regular or elemental-rec\",e[\"proc:5:regular or elemental-crit\"]=\"proc:5:regular or elemental-crit\",e[\"proc:6:drop boost-bc\"]=\"proc:6:drop boost-bc\",e[\"proc:6:drop boost-hc\"]=\"proc:6:drop boost-hc\",e[\"proc:6:drop boost-item\"]=\"proc:6:drop boost-item\",e[\"proc:7:guaranteed ko resistance\"]=\"proc:7:guaranteed ko resistance\",e[\"proc:8:max hp boost-flat\"]=\"proc:8:max hp boost-flat\",e[\"proc:8:max hp boost-percent\"]=\"proc:8:max hp boost-percent\",e[\"proc:9:regular or elemental reduction-atk\"]=\"proc:9:regular or elemental reduction-atk\",e[\"proc:9:regular or elemental reduction-def\"]=\"proc:9:regular or elemental reduction-def\",e[\"proc:9:regular or elemental reduction-rec\"]=\"proc:9:regular or elemental reduction-rec\",e[\"proc:9:regular or elemental reduction-unknown\"]=\"proc:9:regular or elemental reduction-unknown\",e[\"proc:10:cleanse-poison\"]=\"proc:10:cleanse-poison\",e[\"proc:10:cleanse-weak\"]=\"proc:10:cleanse-weak\",e[\"proc:10:cleanse-sick\"]=\"proc:10:cleanse-sick\",e[\"proc:10:cleanse-injury\"]=\"proc:10:cleanse-injury\",e[\"proc:10:cleanse-curse\"]=\"proc:10:cleanse-curse\",e[\"proc:10:cleanse-paralysis\"]=\"proc:10:cleanse-paralysis\",e[\"proc:10:cleanse-atk down\"]=\"proc:10:cleanse-atk down\",e[\"proc:10:cleanse-def down\"]=\"proc:10:cleanse-def down\",e[\"proc:10:cleanse-rec down\"]=\"proc:10:cleanse-rec down\",e[\"proc:10:cleanse-unknown\"]=\"proc:10:cleanse-unknown\",e[\"proc:11:chance inflict-poison\"]=\"proc:11:chance inflict-poison\",e[\"proc:11:chance inflict-weak\"]=\"proc:11:chance inflict-weak\",e[\"proc:11:chance inflict-sick\"]=\"proc:11:chance inflict-sick\",e[\"proc:11:chance inflict-injury\"]=\"proc:11:chance inflict-injury\",e[\"proc:11:chance inflict-curse\"]=\"proc:11:chance inflict-curse\",e[\"proc:11:chance inflict-paralysis\"]=\"proc:11:chance inflict-paralysis\",e[\"proc:11:chance inflict-atk down\"]=\"proc:11:chance inflict-atk down\",e[\"proc:11:chance inflict-def down\"]=\"proc:11:chance inflict-def down\",e[\"proc:11:chance inflict-rec down\"]=\"proc:11:chance inflict-rec down\",e[\"proc:11:chance inflict-unknown\"]=\"proc:11:chance inflict-unknown\",e[\"proc:12:guaranteed revive\"]=\"proc:12:guaranteed revive\",e[\"proc:13:random attack\"]=\"proc:13:random attack\",e[\"proc:14:hp absorb attack\"]=\"proc:14:hp absorb attack\",e[\"proc:16:mitigate-fire\"]=\"proc:16:mitigate-fire\",e[\"proc:16:mitigate-water\"]=\"proc:16:mitigate-water\",e[\"proc:16:mitigate-earth\"]=\"proc:16:mitigate-earth\",e[\"proc:16:mitigate-thunder\"]=\"proc:16:mitigate-thunder\",e[\"proc:16:mitigate-light\"]=\"proc:16:mitigate-light\",e[\"proc:16:mitigate-dark\"]=\"proc:16:mitigate-dark\",e[\"proc:16:mitigate-all\"]=\"proc:16:mitigate-all\",e[\"proc:16:mitigate-unknown\"]=\"proc:16:mitigate-unknown\",e[\"proc:17:resist-poison\"]=\"proc:17:resist-poison\",e[\"proc:17:resist-weak\"]=\"proc:17:resist-weak\",e[\"proc:17:resist-sick\"]=\"proc:17:resist-sick\",e[\"proc:17:resist-injury\"]=\"proc:17:resist-injury\",e[\"proc:17:resist-curse\"]=\"proc:17:resist-curse\",e[\"proc:17:resist-paralysis\"]=\"proc:17:resist-paralysis\",e[\"proc:18:mitigation\"]=\"proc:18:mitigation\",e[\"proc:19:gradual bc fill\"]=\"proc:19:gradual bc fill\",e[\"proc:20:bc fill on hit\"]=\"proc:20:bc fill on hit\",e[\"proc:22:defense ignore\"]=\"proc:22:defense ignore\",e[\"proc:23:spark damage\"]=\"proc:23:spark damage\",e[\"proc:24:converted-atk\"]=\"proc:24:converted-atk\",e[\"proc:24:converted-def\"]=\"proc:24:converted-def\",e[\"proc:24:converted-rec\"]=\"proc:24:converted-rec\",e[\"proc:26:hit count boost\"]=\"proc:26:hit count boost\",e[\"proc:27:proportional attack\"]=\"proc:27:proportional attack\",e[\"proc:28:fixed attack\"]=\"proc:28:fixed attack\",e[\"proc:29:multi-element attack\"]=\"proc:29:multi-element attack\",e[\"proc:30:add element-fire\"]=\"proc:30:add element-fire\",e[\"proc:30:add element-water\"]=\"proc:30:add element-water\",e[\"proc:30:add element-earth\"]=\"proc:30:add element-earth\",e[\"proc:30:add element-thunder\"]=\"proc:30:add element-thunder\",e[\"proc:30:add element-light\"]=\"proc:30:add element-light\",e[\"proc:30:add element-dark\"]=\"proc:30:add element-dark\",e[\"proc:30:add element-unknown\"]=\"proc:30:add element-unknown\",e[\"proc:31:bc fill-flat\"]=\"proc:31:bc fill-flat\",e[\"proc:31:bc fill-percent\"]=\"proc:31:bc fill-percent\",e[\"proc:32:element shift-fire\"]=\"proc:32:element shift-fire\",e[\"proc:32:element shift-water\"]=\"proc:32:element shift-water\",e[\"proc:32:element shift-earth\"]=\"proc:32:element shift-earth\",e[\"proc:32:element shift-thunder\"]=\"proc:32:element shift-thunder\",e[\"proc:32:element shift-light\"]=\"proc:32:element shift-light\",e[\"proc:32:element shift-dark\"]=\"proc:32:element shift-dark\",e[\"proc:32:element shift-unknown\"]=\"proc:32:element shift-unknown\",e[\"proc:33:buff wipe\"]=\"proc:33:buff wipe\",e[\"proc:34:bc drain-flat\"]=\"proc:34:bc drain-flat\",e[\"proc:34:bc drain-percent\"]=\"proc:34:bc drain-percent\",e[\"proc:36:ls lock\"]=\"proc:36:ls lock\",e[\"proc:37:summon\"]=\"proc:37:summon\",e[\"proc:38:cleanse-poison\"]=\"proc:38:cleanse-poison\",e[\"proc:38:cleanse-weak\"]=\"proc:38:cleanse-weak\",e[\"proc:38:cleanse-sick\"]=\"proc:38:cleanse-sick\",e[\"proc:38:cleanse-injury\"]=\"proc:38:cleanse-injury\",e[\"proc:38:cleanse-curse\"]=\"proc:38:cleanse-curse\",e[\"proc:38:cleanse-paralysis\"]=\"proc:38:cleanse-paralysis\",e[\"proc:38:cleanse-atk down\"]=\"proc:38:cleanse-atk down\",e[\"proc:38:cleanse-def down\"]=\"proc:38:cleanse-def down\",e[\"proc:38:cleanse-rec down\"]=\"proc:38:cleanse-rec down\",e[\"proc:38:cleanse-unknown\"]=\"proc:38:cleanse-unknown\",e[\"proc:39:mitigate-fire\"]=\"proc:39:mitigate-fire\",e[\"proc:39:mitigate-water\"]=\"proc:39:mitigate-water\",e[\"proc:39:mitigate-earth\"]=\"proc:39:mitigate-earth\",e[\"proc:39:mitigate-thunder\"]=\"proc:39:mitigate-thunder\",e[\"proc:39:mitigate-light\"]=\"proc:39:mitigate-light\",e[\"proc:39:mitigate-dark\"]=\"proc:39:mitigate-dark\",e[\"proc:39:mitigate-unknown\"]=\"proc:39:mitigate-unknown\",e[\"proc:40:add ailment-poison\"]=\"proc:40:add ailment-poison\",e[\"proc:40:add ailment-weak\"]=\"proc:40:add ailment-weak\",e[\"proc:40:add ailment-sick\"]=\"proc:40:add ailment-sick\",e[\"proc:40:add ailment-injury\"]=\"proc:40:add ailment-injury\",e[\"proc:40:add ailment-curse\"]=\"proc:40:add ailment-curse\",e[\"proc:40:add ailment-paralysis\"]=\"proc:40:add ailment-paralysis\",e[\"proc:40:add ailment-atk down\"]=\"proc:40:add ailment-atk down\",e[\"proc:40:add ailment-def down\"]=\"proc:40:add ailment-def down\",e[\"proc:40:add ailment-rec down\"]=\"proc:40:add ailment-rec down\",e[\"proc:40:add ailment-unknown\"]=\"proc:40:add ailment-unknown\",e[\"proc:42:sacrificial attack\"]=\"proc:42:sacrificial attack\",e[\"proc:42:instant death\"]=\"proc:42:instant death\",e[\"proc:43:burst od fill\"]=\"proc:43:burst od fill\",e[\"proc:44:damage over time\"]=\"proc:44:damage over time\",e[\"proc:45:attack boost-bb\"]=\"proc:45:attack boost-bb\",e[\"proc:45:attack boost-sbb\"]=\"proc:45:attack boost-sbb\",e[\"proc:45:attack boost-ubb\"]=\"proc:45:attack boost-ubb\",e[\"proc:46:non-lethal proportional attack\"]=\"proc:46:non-lethal proportional attack\",e[\"proc:47:hp scaled attack\"]=\"proc:47:hp scaled attack\",e[\"proc:48:piercing attack-base\"]=\"proc:48:piercing attack-base\",e[\"proc:48:piercing attack-current\"]=\"proc:48:piercing attack-current\",e[\"proc:48:piercing attack-fixed\"]=\"proc:48:piercing attack-fixed\",e[\"proc:48:piercing attack-unknown\"]=\"proc:48:piercing attack-unknown\",e[\"proc:49:chance instant death\"]=\"proc:49:chance instant death\",e[\"proc:50:chance damage reflect\"]=\"proc:50:chance damage reflect\",e[\"proc:51:add to attack-atk down\"]=\"proc:51:add to attack-atk down\",e[\"proc:51:add to attack-def down\"]=\"proc:51:add to attack-def down\",e[\"proc:51:add to attack-rec down\"]=\"proc:51:add to attack-rec down\",e[\"proc:52:bc efficacy\"]=\"proc:52:bc efficacy\",e[\"proc:53:inflict on hit-poison\"]=\"proc:53:inflict on hit-poison\",e[\"proc:53:inflict on hit-weak\"]=\"proc:53:inflict on hit-weak\",e[\"proc:53:inflict on hit-sick\"]=\"proc:53:inflict on hit-sick\",e[\"proc:53:inflict on hit-injury\"]=\"proc:53:inflict on hit-injury\",e[\"proc:53:inflict on hit-curse\"]=\"proc:53:inflict on hit-curse\",e[\"proc:53:inflict on hit-paralysis\"]=\"proc:53:inflict on hit-paralysis\",e[\"proc:54:critical damage boost\"]=\"proc:54:critical damage boost\",e[\"proc:55:elemental weakness damage-fire\"]=\"proc:55:elemental weakness damage-fire\",e[\"proc:55:elemental weakness damage-water\"]=\"proc:55:elemental weakness damage-water\",e[\"proc:55:elemental weakness damage-earth\"]=\"proc:55:elemental weakness damage-earth\",e[\"proc:55:elemental weakness damage-thunder\"]=\"proc:55:elemental weakness damage-thunder\",e[\"proc:55:elemental weakness damage-light\"]=\"proc:55:elemental weakness damage-light\",e[\"proc:55:elemental weakness damage-dark\"]=\"proc:55:elemental weakness damage-dark\",e[\"proc:55:elemental weakness damage-unknown\"]=\"proc:55:elemental weakness damage-unknown\",e[\"proc:56:chance ko resistance\"]=\"proc:56:chance ko resistance\",e[\"proc:57:bc drop resistance-base\"]=\"proc:57:bc drop resistance-base\",e[\"proc:57:bc drop resistance-buff\"]=\"proc:57:bc drop resistance-buff\",e[\"proc:57:hc drop resistance-base\"]=\"proc:57:hc drop resistance-base\",e[\"proc:57:hc drop resistance-buff\"]=\"proc:57:hc drop resistance-buff\",e[\"proc:58:spark vulnerability\"]=\"proc:58:spark vulnerability\",e[\"proc:59:attack reduction-bb\"]=\"proc:59:attack reduction-bb\",e[\"proc:59:attack reduction-sbb\"]=\"proc:59:attack reduction-sbb\",e[\"proc:59:attack reduction-ubb\"]=\"proc:59:attack reduction-ubb\",e[\"proc:61:party bb gauge-scaled attack\"]=\"proc:61:party bb gauge-scaled attack\",e[\"proc:61:party bc drain\"]=\"proc:61:party bc drain\",e[\"proc:62:barrier-all\"]=\"proc:62:barrier-all\",e[\"proc:62:barrier-fire\"]=\"proc:62:barrier-fire\",e[\"proc:62:barrier-water\"]=\"proc:62:barrier-water\",e[\"proc:62:barrier-earth\"]=\"proc:62:barrier-earth\",e[\"proc:62:barrier-thunder\"]=\"proc:62:barrier-thunder\",e[\"proc:62:barrier-light\"]=\"proc:62:barrier-light\",e[\"proc:62:barrier-dark\"]=\"proc:62:barrier-dark\",e[\"proc:62:barrier-unknown\"]=\"proc:62:barrier-unknown\",e[\"proc:64:consecutive usage attack\"]=\"proc:64:consecutive usage attack\",e[\"proc:65:ailment attack boost\"]=\"proc:65:ailment attack boost\",e[\"proc:66:chance revive\"]=\"proc:66:chance revive\",e[\"proc:67:bc fill on spark\"]=\"proc:67:bc fill on spark\",e[\"proc:68:guard mitigation\"]=\"proc:68:guard mitigation\",e[\"proc:69:bc fill on guard-flat\"]=\"proc:69:bc fill on guard-flat\",e[\"proc:69:bc fill on guard-percent\"]=\"proc:69:bc fill on guard-percent\",e[\"proc:71:bc efficacy reduction\"]=\"proc:71:bc efficacy reduction\",e[\"proc:73:resist-atk down\"]=\"proc:73:resist-atk down\",e[\"proc:73:resist-def down\"]=\"proc:73:resist-def down\",e[\"proc:73:resist-rec down\"]=\"proc:73:resist-rec down\",e[\"proc:75:element squad-scaled attack\"]=\"proc:75:element squad-scaled attack\",e[\"proc:76:extra action\"]=\"proc:76:extra action\",e[\"proc:78:self stat boost-atk\"]=\"proc:78:self stat boost-atk\",e[\"proc:78:self stat boost-def\"]=\"proc:78:self stat boost-def\",e[\"proc:78:self stat boost-rec\"]=\"proc:78:self stat boost-rec\",e[\"proc:78:self stat boost-crit\"]=\"proc:78:self stat boost-crit\",e.UNKNOWN_CONDITIONAL_EFFECT_ID=\"UNKNOWN_CONDITIONAL_EFFECT_ID\",e.UNKNOWN_CONDITIONAL_BUFF_PARAMS=\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\",e[\"conditional:8:gradual heal\"]=\"conditional:8:gradual heal\",e[\"conditional:12:guaranteed ko resistance\"]=\"conditional:12:guaranteed ko resistance\",e[\"conditional:36:mitigation\"]=\"conditional:36:mitigation\",e[\"conditional:91:chance ko resistance\"]=\"conditional:91:chance ko resistance\",e[\"conditional:133:heal on hit\"]=\"conditional:133:heal on hit\",e[\"conditional:153:chance inflict atk down on hit\"]=\"conditional:153:chance inflict atk down on hit\"}(G||(G={}));const re=Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({TURN_DURATION_MODIFICATION:{id:G.TURN_DURATION_MODIFICATION,name:\"Passive Turn Duration Modification\",stat:M.turnDurationModification,stackType:K.Passive,icons:e=>[e&&e.value&&e.value.duration&&e.value.duration<0?j.TURN_DURATION_DOWN:j.TURN_DURATION_UP]},NO_PARAMS_SPECIFIED:{id:G.NO_PARAMS_SPECIFIED,name:\"No Parameters Specified\",stackType:K.Unknown,icons:()=>[j.UNKNOWN]},UNKNOWN_PASSIVE_EFFECT_ID:{id:G.UNKNOWN_PASSIVE_EFFECT_ID,name:\"Unknown Passive Effect\",stackType:K.Unknown,icons:()=>[j.UNKNOWN]},UNKNOWN_PASSIVE_BUFF_PARAMS:{id:G.UNKNOWN_PASSIVE_BUFF_PARAMS,name:\"Unknown Passive Buff Parameters\",stackType:K.Unknown,icons:()=>[j.UNKNOWN]},\"passive:1:hp\":{id:G[\"passive:1:hp\"],name:\"Passive HP Boost\",stat:M.hp,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPDOWN:j.BUFF_HPUP]},\"passive:1:atk\":{id:G[\"passive:1:atk\"],name:\"Passive Attack Boost\",stat:M.atk,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ATKDOWN:j.BUFF_ATKUP]},\"passive:1:def\":{id:G[\"passive:1:def\"],name:\"Passive Defense Boost\",stat:M.def,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_DEFDOWN:j.BUFF_DEFUP]},\"passive:1:rec\":{id:G[\"passive:1:rec\"],name:\"Passive Recovery Boost\",stat:M.rec,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_RECDOWN:j.BUFF_RECUP]},\"passive:1:crit\":{id:G[\"passive:1:crit\"],name:\"Passive Critical Hit Rate Boost\",stat:M.crit,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_CRTRATEDOWN:j.BUFF_CRTRATEUP]}},(()=>{const e=e=>a=>{let t=\"\",i=\"UP\";a&&(a.value&&a.value<0&&(i=\"DOWN\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0])),\"string\"!=typeof t&&(t=\"\");let s=`BUFF_${t.toUpperCase()}${e}${i}`;return t&&s in j||(s=`BUFF_ELEMENT${e}${i}`),[j[s]]};return{\"passive:2:elemental-hp\":{id:G[\"passive:2:elemental-hp\"],name:\"Passive Elemental HP Boost\",stat:M.hp,stackType:K.Passive,icons:e(\"HP\")},\"passive:2:elemental-atk\":{id:G[\"passive:2:elemental-atk\"],name:\"Passive Elemental Attack Boost\",stat:M.atk,stackType:K.Passive,icons:e(\"ATK\")},\"passive:2:elemental-def\":{id:G[\"passive:2:elemental-def\"],name:\"Passive Elemental Defense Boost\",stat:M.def,stackType:K.Passive,icons:e(\"DEF\")},\"passive:2:elemental-rec\":{id:G[\"passive:2:elemental-rec\"],name:\"Passive Elemental Recovery Boost\",stat:M.rec,stackType:K.Passive,icons:e(\"REC\")},\"passive:2:elemental-crit\":{id:G[\"passive:2:elemental-crit\"],name:\"Passive Elemental Critical Hit Rate Boost\",stat:M.crit,stackType:K.Passive,icons:e(\"CRTRATE\")}}})()),(()=>{const e=e=>a=>{let t=\"\",i=\"UP\";a&&(a.value&&a.value<0&&(i=\"DOWN\"),a.conditions&&(t=a.conditions.targetUnitType||\"\")),\"string\"==typeof t&&t||(t=\"unknown\");let s=`BUFF_${t.toUpperCase()}${e}${i}`;return t&&s in j||(s=`BUFF_UNITTYPE${e}${i}`),[j[s]]};return{\"passive:3:type based-hp\":{id:G[\"passive:3:type based-hp\"],name:\"Passive Type-Based HP Boost\",stat:M.hp,stackType:K.Passive,icons:e(\"HP\")},\"passive:3:type based-atk\":{id:G[\"passive:3:type based-atk\"],name:\"Passive Type-Based Attack Boost\",stat:M.atk,stackType:K.Passive,icons:e(\"ATK\")},\"passive:3:type based-def\":{id:G[\"passive:3:type based-def\"],name:\"Passive Type-Based Defense Boost\",stat:M.def,stackType:K.Passive,icons:e(\"DEF\")},\"passive:3:type based-rec\":{id:G[\"passive:3:type based-rec\"],name:\"Passive Type-Based Recovery Boost\",stat:M.rec,stackType:K.Passive,icons:e(\"REC\")},\"passive:3:type based-crit\":{id:G[\"passive:3:type based-crit\"],name:\"Passive Type-Based Critical Hit Rate Boost\",stat:M.crit,stackType:K.Passive,icons:e(\"CRTRATE\")}}})()),{\"passive:4:resist-poison\":{id:G[\"passive:4:resist-poison\"],name:\"Passive Poison Resistance\",stat:M.poisonResist,stackType:K.Passive,icons:()=>[j.BUFF_POISONBLK]},\"passive:4:resist-weak\":{id:G[\"passive:4:resist-weak\"],name:\"Passive Weak Resistance\",stat:M.weakResist,stackType:K.Passive,icons:()=>[j.BUFF_WEAKBLK]},\"passive:4:resist-sick\":{id:G[\"passive:4:resist-sick\"],name:\"Passive Sick Resistance\",stat:M.sickResist,stackType:K.Passive,icons:()=>[j.BUFF_SICKBLK]},\"passive:4:resist-injury\":{id:G[\"passive:4:resist-injury\"],name:\"Passive Injury Resistance\",stat:M.injuryResist,stackType:K.Passive,icons:()=>[j.BUFF_INJURYBLK]},\"passive:4:resist-curse\":{id:G[\"passive:4:resist-curse\"],name:\"Passive Curse Resistance\",stat:M.curseResist,stackType:K.Passive,icons:()=>[j.BUFF_CURSEBLK]},\"passive:4:resist-paralysis\":{id:G[\"passive:4:resist-paralysis\"],name:\"Passive Paralysis Resistance\",stat:M.paralysisResist,stackType:K.Passive,icons:()=>[j.BUFF_PARALYSISBLK]},\"passive:5:mitigate-fire\":{id:G[\"passive:5:mitigate-fire\"],name:\"Passive Fire Damage Reduction\",stat:M.fireMitigation,stackType:K.Passive,icons:()=>[j.BUFF_FIREDMGDOWN]},\"passive:5:mitigate-water\":{id:G[\"passive:5:mitigate-water\"],name:\"Passive Water Damage Reduction\",stat:M.waterMitigation,stackType:K.Passive,icons:()=>[j.BUFF_WATERDMGDOWN]},\"passive:5:mitigate-earth\":{id:G[\"passive:5:mitigate-earth\"],name:\"Passive Earth Damage Reduction\",stat:M.earthMitigation,stackType:K.Passive,icons:()=>[j.BUFF_EARTHDMGDOWN]},\"passive:5:mitigate-thunder\":{id:G[\"passive:5:mitigate-thunder\"],name:\"Passive Thunder Damage Reduction\",stat:M.thunderMitigation,stackType:K.Passive,icons:()=>[j.BUFF_THUNDERDMGDOWN]},\"passive:5:mitigate-light\":{id:G[\"passive:5:mitigate-light\"],name:\"Passive Light Damage Reduction\",stat:M.lightMitigation,stackType:K.Passive,icons:()=>[j.BUFF_LIGHTDMGDOWN]},\"passive:5:mitigate-dark\":{id:G[\"passive:5:mitigate-dark\"],name:\"Passive Dark Damage Reduction\",stat:M.darkMitigation,stackType:K.Passive,icons:()=>[j.BUFF_DARKDMGDOWN]},\"passive:5:mitigate-unknown\":{id:G[\"passive:5:mitigate-unknown\"],name:\"Passive Elemental Damage Reduction (Unspecified Element)\",stat:M.mitigation,stackType:K.Passive,icons:()=>[j.BUFF_ELEMENTDMGDOWN]},\"passive:8:mitigation\":{id:G[\"passive:8:mitigation\"],name:\"Passive Damage Reduction\",stat:M.mitigation,stackType:K.Passive,icons:()=>[j.BUFF_DAMAGECUT]},\"passive:9:gradual bc fill\":{id:G[\"passive:9:gradual bc fill\"],name:\"Passive Gradual BC Fill\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:10:hc efficacy\":{id:G[\"passive:10:hc efficacy\"],name:\"Passive HC Efficacy\",stat:M.hcEfficacy,stackType:K.Passive,icons:()=>[j.BUFF_HCREC]},\"passive:11:hp conditional-atk\":{id:G[\"passive:11:hp conditional-atk\"],name:\"Passive HP-Conditional Attack Boost\",stat:M.atk,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHATKDOWN:j.BUFF_HPTHRESHATKUP]},\"passive:11:hp conditional-def\":{id:G[\"passive:11:hp conditional-def\"],name:\"Passive HP-Conditional Defense Boost\",stat:M.def,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHDEFDOWN:j.BUFF_HPTHRESHDEFUP]},\"passive:11:hp conditional-rec\":{id:G[\"passive:11:hp conditional-rec\"],name:\"Passive HP-Conditional Recovery Boost\",stat:M.rec,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHRECDOWN:j.BUFF_HPTHRESHRECUP]},\"passive:11:hp conditional-crit\":{id:G[\"passive:11:hp conditional-crit\"],name:\"Passive HP-Conditional Critical Hit Rate Boost\",stat:M.crit,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHCRTRATEDOWN:j.BUFF_HPTHRESHCRTRATEUP]},\"passive:12:hp conditional drop boost-bc\":{id:G[\"passive:12:hp conditional drop boost-bc\"],name:\"Passive HP-Conditional Battle Crystal Drop Rate Boost\",stat:M.bcDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHBCDOWN:j.BUFF_HPTHRESHBCDROP]},\"passive:12:hp conditional drop boost-hc\":{id:G[\"passive:12:hp conditional drop boost-hc\"],name:\"Passive HP-Conditional Heart Crystal Drop Rate Boost\",stat:M.hcDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHHCDOWN:j.BUFF_HPTHRESHHCDROP]},\"passive:12:hp conditional drop boost-item\":{id:G[\"passive:12:hp conditional drop boost-item\"],name:\"Passive HP-Conditional Item Drop Rate Boost\",stat:M.itemDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHITEMDOWN:j.BUFF_HPTHRESHITEMDROP]},\"passive:12:hp conditional drop boost-zel\":{id:G[\"passive:12:hp conditional drop boost-zel\"],name:\"Passive HP-Conditional Zel Drop Rate Boost\",stat:M.zelDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHZELDOWN:j.BUFF_HPTHRESHZELDROP]},\"passive:12:hp conditional drop boost-karma\":{id:G[\"passive:12:hp conditional drop boost-karma\"],name:\"Passive HP-Conditional Karma Drop Rate Boost\",stat:M.karmaDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHKARMADOWN:j.BUFF_HPTHRESHKARMADROP]},\"passive:13:bc fill on enemy defeat\":{id:G[\"passive:13:bc fill on enemy defeat\"],name:\"Passive BC Fill on Enemy Defeat\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:14:chance mitigation\":{id:G[\"passive:14:chance mitigation\"],name:\"Passive Damage Reduction (Chance)\",stat:M.mitigation,stackType:K.Passive,icons:()=>[j.BUFF_DAMAGECUT]},\"passive:15:heal on enemy defeat\":{id:G[\"passive:15:heal on enemy defeat\"],name:\"Passive Heal on Enemy Defeat\",stat:M.hpRecovery,stackType:K.Passive,icons:()=>[j.BUFF_HPREC]},\"passive:16:heal on win\":{id:G[\"passive:16:heal on win\"],name:\"Passive Heal on Battle Win\",stat:M.hpRecovery,stackType:K.Passive,icons:()=>[j.BUFF_HPREC]},\"passive:17:hp absorb\":{id:G[\"passive:17:hp absorb\"],name:\"HP Absorption\",stat:M.hpRecovery,stackType:K.Passive,icons:()=>[j.BUFF_HPABS]},\"passive:19:drop boost-bc\":{id:G[\"passive:19:drop boost-bc\"],name:\"Passive Battle Crystal Drop Rate Boost\",stat:M.bcDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BCDOWN:j.BUFF_BCDROP]},\"passive:19:drop boost-hc\":{id:G[\"passive:19:drop boost-hc\"],name:\"Passive Heart Crystal Drop Rate Boost\",stat:M.hcDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HCDOWN:j.BUFF_HCDROP]},\"passive:19:drop boost-item\":{id:G[\"passive:19:drop boost-item\"],name:\"Passive Item Drop Rate Boost\",stat:M.itemDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ITEMDOWN:j.BUFF_ITEMDROP]},\"passive:19:drop boost-zel\":{id:G[\"passive:19:drop boost-zel\"],name:\"Passive Zel Drop Rate Boost\",stat:M.zelDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ZELDOWN:j.BUFF_ZELDROP]},\"passive:19:drop boost-karma\":{id:G[\"passive:19:drop boost-karma\"],name:\"Passive Karma Drop Rate Boost\",stat:M.karmaDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_KARMADOWN:j.BUFF_KARMADROP]},\"passive:20:chance inflict-poison\":{id:G[\"passive:20:chance inflict-poison\"],name:\"Passive Poison Infliction\",stat:M.poisonInflict,stackType:K.Passive,icons:()=>[j.BUFF_ADDPOISON]},\"passive:20:chance inflict-weak\":{id:G[\"passive:20:chance inflict-weak\"],name:\"Passive Weak Infliction\",stat:M.weakInflict,stackType:K.Passive,icons:()=>[j.BUFF_ADDWEAK]},\"passive:20:chance inflict-sick\":{id:G[\"passive:20:chance inflict-sick\"],name:\"Passive Sick Infliction\",stat:M.sickInflict,stackType:K.Passive,icons:()=>[j.BUFF_ADDSICK]},\"passive:20:chance inflict-injury\":{id:G[\"passive:20:chance inflict-injury\"],name:\"Passive Injury Infliction\",stat:M.injuryInflict,stackType:K.Passive,icons:()=>[j.BUFF_ADDINJURY]},\"passive:20:chance inflict-curse\":{id:G[\"passive:20:chance inflict-curse\"],name:\"Passive Curse Infliction\",stat:M.curseInflict,stackType:K.Passive,icons:()=>[j.BUFF_ADDCURSE]},\"passive:20:chance inflict-paralysis\":{id:G[\"passive:20:chance inflict-paralysis\"],name:\"Passive Paralysis Infliction\",stat:M.paralysisInflict,stackType:K.Passive,icons:()=>[j.BUFF_ADDPARA]},\"passive:20:chance inflict-atk down\":{id:G[\"passive:20:chance inflict-atk down\"],name:\"Passive Attack Reduction Infliction\",stat:M.atkDownInflict,stackType:K.Passive,icons:()=>[j.BUFF_ADDATKDOWN]},\"passive:20:chance inflict-def down\":{id:G[\"passive:20:chance inflict-def down\"],name:\"Passive Defense Reduction Infliction\",stat:M.defDownInflict,stackType:K.Passive,icons:()=>[j.BUFF_ADDDEFDOWN]},\"passive:20:chance inflict-rec down\":{id:G[\"passive:20:chance inflict-rec down\"],name:\"Passive Recovery Reduction Infliction\",stat:M.recDownInflict,stackType:K.Passive,icons:()=>[j.BUFF_ADDRECDOWN]},\"passive:20:chance inflict-unknown\":{id:G[\"passive:20:chance inflict-unknown\"],name:\"Passive Unknown Ailment Infliction\",stackType:K.Unknown,icons:()=>[j.BUFF_ADDAILMENT]},\"passive:21:first turn-atk\":{id:G[\"passive:21:first turn-atk\"],name:\"Attack Boost for X Turns\",stat:M.atk,stackType:K.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ATKDOWN:j.BUFF_ATKUP]},\"passive:21:first turn-def\":{id:G[\"passive:21:first turn-def\"],name:\"Defense Boost for X Turns\",stat:M.def,stackType:K.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?j.BUFF_DEFDOWN:j.BUFF_DEFUP]},\"passive:21:first turn-rec\":{id:G[\"passive:21:first turn-rec\"],name:\"Recovery Boost for X Turns\",stat:M.rec,stackType:K.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?j.BUFF_RECDOWN:j.BUFF_RECUP]},\"passive:21:first turn-crit\":{id:G[\"passive:21:first turn-crit\"],name:\"Critical Hit Rate Boost for X Turns\",stat:M.crit,stackType:K.ConditionalTimed,icons:e=>[e&&e.value&&e.value<0?j.BUFF_CRTRATEDOWN:j.BUFF_CRTRATEUP]},\"passive:23:bc fill on win\":{id:G[\"passive:23:bc fill on win\"],name:\"Passive BC Fill on Battle Win\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:24:heal on hit\":{id:G[\"passive:24:heal on hit\"],name:\"Passive Heal when Attacked (Chance)\",stat:M.hpRecovery,stackType:K.Passive,icons:()=>[j.BUFF_BEENATK_HPREC]},\"passive:25:bc fill on hit\":{id:G[\"passive:25:bc fill on hit\"],name:\"Passive BC Fill when Attacked\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_DAMAGEBB]},\"passive:26:chance damage reflect\":{id:G[\"passive:26:chance damage reflect\"],name:\"Passive Damage Counter (Chance)\",stat:M.damageReflect,stackType:K.Passive,icons:()=>[j.BUFF_COUNTERDAMAGE]},\"passive:27:target chance change\":{id:G[\"passive:27:target chance change\"],name:\"Passive Target Chance Modification\",stat:M.targetingModification,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_REPENEATT:j.BUFF_GETENEATT]},\"passive:28:hp conditional target chance change\":{id:G[\"passive:28:hp conditional target chance change\"],name:\"Passive HP-Conditional Target Chance Modification\",stat:M.targetingModification,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPTHRESHREPENEATT:j.BUFF_HPTHRESHGETENEATT]},\"passive:29:chance def ignore\":{id:G[\"passive:29:chance def ignore\"],name:\"Passive Defense Ignore (Chance)\",stat:M.defenseIgnore,stackType:K.Passive,icons:()=>[j.BUFF_IGNOREDEF]},\"passive:30:bb gauge conditional-atk\":{id:G[\"passive:30:bb gauge conditional-atk\"],name:\"Passive BB Gauge Conditional Attack Boost\",stat:M.atk,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BBGAUGETHRESHATKDOWN:j.BUFF_BBGAUGETHRESHATKUP]},\"passive:30:bb gauge conditional-def\":{id:G[\"passive:30:bb gauge conditional-def\"],name:\"Passive BB Gauge Conditional Defense Boost\",stat:M.def,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BBGAUGETHRESHDEFDOWN:j.BUFF_BBGAUGETHRESHDEFUP]},\"passive:30:bb gauge conditional-rec\":{id:G[\"passive:30:bb gauge conditional-rec\"],name:\"Passive BB Gauge Conditional Recovery Boost\",stat:M.rec,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BBGAUGETHRESHRECDOWN:j.BUFF_BBGAUGETHRESHRECUP]},\"passive:30:bb gauge conditional-crit\":{id:G[\"passive:30:bb gauge conditional-crit\"],name:\"Passive BB Gauge Conditional Critical Hit Rate Boost\",stat:M.crit,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BBGAUGETHRESHCRTRATEDOWN:j.BUFF_BBGAUGETHRESHCRTRATEUP]},\"passive:31:spark-damage\":{id:G[\"passive:31:spark-damage\"],name:\"Passive Spark Damage Boost\",stat:M.sparkDamage,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_SPARKDOWN:j.BUFF_SPARKUP]},\"passive:31:spark-bc\":{id:G[\"passive:31:spark-bc\"],name:\"Passive Battle Crystal Drop Rate Boost during Spark\",stat:M.bcDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BCDOWN:j.BUFF_SPARKBC]},\"passive:31:spark-hc\":{id:G[\"passive:31:spark-hc\"],name:\"Passive Heart Crystal Drop Rate Boost during Spark\",stat:M.hcDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HCDOWN:j.BUFF_SPARKHC]},\"passive:31:spark-item\":{id:G[\"passive:31:spark-item\"],name:\"Passive Item Drop Rate Boost during Spark\",stat:M.itemDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ITEMDOWN:j.BUFF_SPARKITEM]},\"passive:31:spark-zel\":{id:G[\"passive:31:spark-zel\"],name:\"Passive Zel Drop Rate Boost during Spark\",stat:M.zelDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ZELDOWN:j.BUFF_SPARKZEL]},\"passive:31:spark-karma\":{id:G[\"passive:31:spark-karma\"],name:\"Passive Karma Drop Rate Boost during Spark\",stat:M.karmaDropRate,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_KARMADOWN:j.BUFF_SPARKKARMA]},\"passive:32:bc efficacy\":{id:G[\"passive:32:bc efficacy\"],name:\"Passive BC Efficacy\",stat:M.bcEfficacy,stackType:K.Passive,icons:()=>[j.BUFF_BBFILL]},\"passive:33:gradual heal\":{id:G[\"passive:33:gradual heal\"],name:\"Passive Gradual Heal\",stat:M.hpRecovery,stackType:K.Passive,icons:()=>[j.BUFF_HPREC]},\"passive:34:critical damage\":{id:G[\"passive:34:critical damage\"],name:\"Passive Critical Damage Boost\",stat:M.criticalDamage,stackType:K.Passive,icons:()=>[j.BUFF_CRTUP]},\"passive:35:bc fill on normal attack\":{id:G[\"passive:35:bc fill on normal attack\"],name:\"Passive BC Fill when Normal Attacking\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:36:extra action\":{id:G[\"passive:36:extra action\"],name:\"Passive Extra Action\",stat:M.extraAction,stackType:K.Passive,icons:()=>[j.BUFF_DBLSTRIKE]},\"passive:37:hit count boost\":{id:G[\"passive:37:hit count boost\"],name:\"Passive Hit Count Boost\",stat:M.hitCountModification,stackType:K.Passive,icons:()=>[j.BUFF_HITUP]},\"passive:40:converted-atk\":{id:G[\"passive:40:converted-atk\"],name:\"Passive Converted Attack Boost\",stat:M.atk,stackType:K.Passive,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTATKDOWN:j.BUFF_CONVERTATKUP]},\"passive:40:converted-def\":{id:G[\"passive:40:converted-def\"],name:\"Passive Converted Defense Boost\",stat:M.def,stackType:K.Passive,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTDEFDOWN:j.BUFF_CONVERTDEFUP]},\"passive:40:converted-rec\":{id:G[\"passive:40:converted-rec\"],name:\"Passive Converted Recovery Boost\",stat:M.rec,stackType:K.Passive,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTRECDOWN:j.BUFF_CONVERTRECUP]},\"passive:41:unique element count-hp\":{id:G[\"passive:41:unique element count-hp\"],name:\"Passive Element Squad-based HP Boost\",stat:M.hp,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_UNIQUEELEMENTHPDOWN:j.BUFF_UNIQUEELEMENTHPUP]},\"passive:41:unique element count-atk\":{id:G[\"passive:41:unique element count-atk\"],name:\"Passive Element Squad-based Attack Boost\",stat:M.atk,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_UNIQUEELEMENTATKDOWN:j.BUFF_UNIQUEELEMENTATKUP]},\"passive:41:unique element count-def\":{id:G[\"passive:41:unique element count-def\"],name:\"Passive Element Squad-based Defense Boost\",stat:M.def,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_UNIQUEELEMENTDEFDOWN:j.BUFF_UNIQUEELEMENTDEFUP]},\"passive:41:unique element count-rec\":{id:G[\"passive:41:unique element count-rec\"],name:\"Passive Element Squad-based Recovery Boost\",stat:M.rec,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_UNIQUEELEMENTRECDOWN:j.BUFF_UNIQUEELEMENTRECUP]},\"passive:41:unique element count-crit\":{id:G[\"passive:41:unique element count-crit\"],name:\"Passive Element Squad-based Critical Hit Rate Boost\",stat:M.crit,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_UNIQUEELEMENTCRTRATEDOWN:j.BUFF_UNIQUEELEMENTCRTRATEUP]}}),(()=>{const e=e=>a=>{let t=\"\",i=\"UP\";a&&(a.value&&a.value<0&&(i=\"DOWN\"),a.conditions&&(t=a.conditions.targetGender||\"\")),\"string\"==typeof t&&t||(t=\"unknown\");let s=`BUFF_${t.toUpperCase()}${e}${i}`;return t&&s in j||(s=`BUFF_GENDER${e}${i}`),[j[s]]};return{\"passive:42:gender-hp\":{id:G[\"passive:42:gender-hp\"],name:\"Passive Gender-Based HP Boost\",stat:M.hp,stackType:K.Passive,icons:e(\"HP\")},\"passive:42:gender-atk\":{id:G[\"passive:42:gender-atk\"],name:\"Passive Gender-Based Attack Boost\",stat:M.atk,stackType:K.Passive,icons:e(\"ATK\")},\"passive:42:gender-def\":{id:G[\"passive:42:gender-def\"],name:\"Passive Gender-Based Defense Boost\",stat:M.def,stackType:K.Passive,icons:e(\"DEF\")},\"passive:42:gender-rec\":{id:G[\"passive:42:gender-rec\"],name:\"Passive Gender-Based Recovery Boost\",stat:M.rec,stackType:K.Passive,icons:e(\"REC\")},\"passive:42:gender-crit\":{id:G[\"passive:42:gender-crit\"],name:\"Passive Gender-Based Critical Hit Rate Boost\",stat:M.crit,stackType:K.Passive,icons:e(\"CRTRATE\")}}})()),{\"passive:43:chance damage to one\":{id:G[\"passive:43:chance damage to one\"],name:\"Passive Damage Reduction To One (Chance)\",stat:M.reduceDamageToOne,stackType:K.Passive,icons:()=>[j.BUFF_DAMAGECUTTOONE]},\"passive:44:flat-hp\":{id:G[\"passive:44:flat-hp\"],name:\"Passive Flat HP Boost\",stat:M.hp,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HPDOWN:j.BUFF_HPUP]},\"passive:44:flat-atk\":{id:G[\"passive:44:flat-atk\"],name:\"Passive Flat Attack Boost\",stat:M.atk,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ATKDOWN:j.BUFF_ATKUP]},\"passive:44:flat-def\":{id:G[\"passive:44:flat-def\"],name:\"Passive Flat Defense Boost\",stat:M.def,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_DEFDOWN:j.BUFF_DEFUP]},\"passive:44:flat-rec\":{id:G[\"passive:44:flat-rec\"],name:\"Passive Flat Recovery Boost\",stat:M.rec,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_RECDOWN:j.BUFF_RECUP]},\"passive:44:flat-crit\":{id:G[\"passive:44:flat-crit\"],name:\"Passive Flat Critical Hit Rate Boost\",stat:M.crit,stackType:K.Passive,icons:e=>[e&&e.value&&e.value<0?j.BUFF_CRTRATEDOWN:j.BUFF_CRTRATEUP]},\"passive:45:critical damage reduction-base\":{id:G[\"passive:45:critical damage reduction-base\"],name:\"Passive Base Critical Damage Reduction\",stat:M.criticalDamageMitigation,stackType:K.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:45:critical damage reduction-buff\":{id:G[\"passive:45:critical damage reduction-buff\"],name:\"Passive Buffed Critical Damage Reduction\",stat:M.criticalDamageMitigation,stackType:K.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:46:hp scaled-atk\":{id:G[\"passive:46:hp scaled-atk\"],name:\"Passive Attack Boost Relative to HP\",stat:M.atk,stackType:K.Passive,icons:e=>[e&&e.value&&e.value.addedValue&&e.value.addedValue<0?j.BUFF_HPSCALEDATKDOWN:j.BUFF_HPSCALEDATKUP]},\"passive:46:hp scaled-def\":{id:G[\"passive:46:hp scaled-def\"],name:\"Passive Defense Boost Relative to HP\",stat:M.def,stackType:K.Passive,icons:e=>[e&&e.value&&e.value.addedValue&&e.value.addedValue<0?j.BUFF_HPSCALEDDEFDOWN:j.BUFF_HPSCALEDDEFUP]},\"passive:46:hp scaled-rec\":{id:G[\"passive:46:hp scaled-rec\"],name:\"Passive Recovery Boost Relative to HP\",stat:M.rec,stackType:K.Passive,icons:e=>[e&&e.value&&e.value.addedValue&&e.value.addedValue<0?j.BUFF_HPSCALEDRECDOWN:j.BUFF_HPSCALEDRECUP]},\"passive:47:bc fill on spark\":{id:G[\"passive:47:bc fill on spark\"],name:\"Passive BC Fill on Spark\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_SPARKBBUP]},\"passive:48:bc cost reduction\":{id:G[\"passive:48:bc cost reduction\"],name:\"Passive BC Cost Reduction\",stat:M.bcCostReduction,stackType:K.Passive,icons:()=>[j.BUFF_BBCOST_REDUCTION]},\"passive:49:bb gauge consumption reduction\":{id:G[\"passive:49:bb gauge consumption reduction\"],name:\"Passive BB Gauge Consumption Reduction\",stat:M.bbGaugeConsumptionReduction,stackType:K.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:50:elemental weakness damage-fire\":{id:G[\"passive:50:elemental weakness damage-fire\"],name:\"Passive Fire Elemental Damage Boost\",stat:M.fireElementalDamage,stackType:K.Passive,icons:()=>[j.BUFF_FIREDMGUP]},\"passive:50:elemental weakness damage-water\":{id:G[\"passive:50:elemental weakness damage-water\"],name:\"Passive Water Elemental Damage Boost\",stat:M.waterElementalDamage,stackType:K.Passive,icons:()=>[j.BUFF_WATERDMGUP]},\"passive:50:elemental weakness damage-earth\":{id:G[\"passive:50:elemental weakness damage-earth\"],name:\"Passive Earth Elemental Damage Boost\",stat:M.earthElementalDamage,stackType:K.Passive,icons:()=>[j.BUFF_EARTHDMGUP]},\"passive:50:elemental weakness damage-thunder\":{id:G[\"passive:50:elemental weakness damage-thunder\"],name:\"Passive Thunder Elemental Damage Boost\",stat:M.thunderElementalDamage,stackType:K.Passive,icons:()=>[j.BUFF_THUNDERDMGUP]},\"passive:50:elemental weakness damage-light\":{id:G[\"passive:50:elemental weakness damage-light\"],name:\"Passive Light Elemental Damage Boost\",stat:M.lightElementalDamage,stackType:K.Passive,icons:()=>[j.BUFF_LIGHTDMGUP]},\"passive:50:elemental weakness damage-dark\":{id:G[\"passive:50:elemental weakness damage-dark\"],name:\"Passive Dark Elemental Damage Boost\",stat:M.darkElementalDamage,stackType:K.Passive,icons:()=>[j.BUFF_DARKDMGUP]},\"passive:50:elemental weakness damage-unknown\":{id:G[\"passive:50:elemental weakness damage-unknown\"],name:\"Passive Elemental Damage Boost (Unspecified Element)\",stackType:K.Passive,icons:()=>[j.BUFF_ELEMENTDMGUP]},\"passive:53:critical damage-base\":{id:G[\"passive:53:critical damage-base\"],name:\"Passive Base Critical Damage Reduction\",stat:M.criticalDamageMitigation,stackType:K.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:53:critical damage-buff\":{id:G[\"passive:53:critical damage-buff\"],name:\"Passive Buffed Critical Damage Reduction\",stat:M.criticalDamageMitigation,stackType:K.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:53:element damage-base\":{id:G[\"passive:53:element damage-base\"],name:\"Passive Base Elemental Weakness Damage Reduction\",stat:M.elementalWeaknessDamageMitigation,stackType:K.Passive,icons:()=>[j.BUFF_ELEMENTDOWN]},\"passive:53:element damage-buff\":{id:G[\"passive:53:element damage-buff\"],name:\"Passive Buffed Elemental Weakness Damage Reduction\",stat:M.elementalWeaknessDamageMitigation,stackType:K.Passive,icons:()=>[j.BUFF_ELEMENTDOWN]},\"passive:53:critical rate-base\":{id:G[\"passive:53:critical rate-base\"],name:\"Passive Base Critical Hit Rate Reduction\",stat:M.crit,stackType:K.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:53:critical rate-buff\":{id:G[\"passive:53:critical rate-buff\"],name:\"Passive Buffed Critical Hit Rate Reduction\",stat:M.crit,stackType:K.Passive,icons:()=>[j.BUFF_CRTDOWN]},\"passive:55:hp conditional\":{id:G[\"passive:55:hp conditional\"],name:\"Passive Conditional Effect based on HP Threshold\",stackType:K.Passive,icons:()=>[j.CONDITIONALBUFF_HPTHRESH]},\"passive:58:guard mitigation\":{id:G[\"passive:58:guard mitigation\"],name:\"Passive Guard Damage Reduction\",stackType:K.Passive,icons:()=>[j.BUFF_GUARDCUT]},\"passive:59:bc fill when attacked on guard-percent\":{id:G[\"passive:59:bc fill when attacked on guard-percent\"],name:\"Passive BC Fill when Attacked and Guarding (Percentage)\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_GUARDBBUP]},\"passive:59:bc fill when attacked on guard-flat\":{id:G[\"passive:59:bc fill when attacked on guard-flat\"],name:\"Passive BC Fill when Attacked and Guarding (Flat Amount)\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_GUARDBBUP]},\"passive:61:bc fill on guard-percent\":{id:G[\"passive:61:bc fill on guard-percent\"],name:\"Passive BC Fill on Guard (Percentage)\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_GUARDBBUP]},\"passive:61:bc fill on guard-flat\":{id:G[\"passive:61:bc fill on guard-flat\"],name:\"Passive BC Fill on Guard (Flat Amount)\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_GUARDBBUP]},\"passive:62:mitigate-fire\":{id:G[\"passive:62:mitigate-fire\"],name:\"Passive Fire Damage Reduction\",stat:M.fireMitigation,stackType:K.Passive,icons:()=>[j.BUFF_FIREDMGDOWN]},\"passive:62:mitigate-water\":{id:G[\"passive:62:mitigate-water\"],name:\"Passive Water Damage Reduction\",stat:M.waterMitigation,stackType:K.Passive,icons:()=>[j.BUFF_WATERDMGDOWN]},\"passive:62:mitigate-earth\":{id:G[\"passive:62:mitigate-earth\"],name:\"Passive Earth Damage Reduction\",stat:M.earthMitigation,stackType:K.Passive,icons:()=>[j.BUFF_EARTHDMGDOWN]},\"passive:62:mitigate-thunder\":{id:G[\"passive:62:mitigate-thunder\"],name:\"Passive Thunder Damage Reduction\",stat:M.thunderMitigation,stackType:K.Passive,icons:()=>[j.BUFF_THUNDERDMGDOWN]},\"passive:62:mitigate-light\":{id:G[\"passive:62:mitigate-light\"],name:\"Passive Light Damage Reduction\",stat:M.lightMitigation,stackType:K.Passive,icons:()=>[j.BUFF_LIGHTDMGDOWN]},\"passive:62:mitigate-dark\":{id:G[\"passive:62:mitigate-dark\"],name:\"Passive Dark Damage Reduction\",stat:M.darkMitigation,stackType:K.Passive,icons:()=>[j.BUFF_DARKDMGDOWN]},\"passive:62:mitigate-unknown\":{id:G[\"passive:62:mitigate-unknown\"],name:\"Passive Elemental Damage Reduction (Unspecified Element)\",stat:M.mitigation,stackType:K.Passive,icons:()=>[j.BUFF_ELEMENTDMGDOWN]},\"passive:63:first turn mitigate-fire\":{id:G[\"passive:63:first turn mitigate-fire\"],name:\"Fire Damage Reduction for First X Turns\",stat:M.fireMitigation,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_FIREDMGDOWN]},\"passive:63:first turn mitigate-water\":{id:G[\"passive:63:first turn mitigate-water\"],name:\"Water Damage Reduction for First X Turns\",stat:M.waterMitigation,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_WATERDMGDOWN]},\"passive:63:first turn mitigate-earth\":{id:G[\"passive:63:first turn mitigate-earth\"],name:\"Earth Damage Reduction for First X Turns\",stat:M.earthMitigation,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_EARTHDMGDOWN]},\"passive:63:first turn mitigate-thunder\":{id:G[\"passive:63:first turn mitigate-thunder\"],name:\"Thunder Damage Reduction for First X Turns\",stat:M.thunderMitigation,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_THUNDERDMGDOWN]},\"passive:63:first turn mitigate-light\":{id:G[\"passive:63:first turn mitigate-light\"],name:\"Light Damage Reduction for First X Turns\",stat:M.lightMitigation,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_LIGHTDMGDOWN]},\"passive:63:first turn mitigate-dark\":{id:G[\"passive:63:first turn mitigate-dark\"],name:\"Dark Damage Reduction for First X Turns\",stat:M.darkMitigation,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_DARKDMGDOWN]},\"passive:63:first turn mitigate-unknown\":{id:G[\"passive:63:first turn mitigate-unknown\"],name:\"Elemental Damage Reduction (Unspecified Element) for First X Turns\",stat:M.mitigation,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_ELEMENTDMGDOWN]},\"passive:64:attack boost-bb\":{id:G[\"passive:64:attack boost-bb\"],name:\"Passive BB ATK Boost\",stat:M.bbAtk,stackType:K.Passive,icons:()=>[j.BUFF_BBATKUP]},\"passive:64:attack boost-sbb\":{id:G[\"passive:64:attack boost-sbb\"],name:\"Passive SBB ATK Boost\",stat:M.bbAtk,stackType:K.Passive,icons:()=>[j.BUFF_SBBATKUP]},\"passive:64:attack boost-ubb\":{id:G[\"passive:64:attack boost-ubb\"],name:\"Passive UBB ATK Boost\",stat:M.bbAtk,stackType:K.Passive,icons:()=>[j.BUFF_UBBATKUP]},\"passive:65:bc fill on crit\":{id:G[\"passive:65:bc fill on crit\"],name:\"Passive BC Fill on Critical Hit\",stat:M.bbGauge,stackType:K.Passive,icons:()=>[j.BUFF_BBREC]},\"passive:66:add effect to skill-bb\":{id:G[\"passive:66:add effect to skill-bb\"],name:\"Passive Added Effect to Brave Burst\",stackType:K.Passive,icons:()=>[j.BUFF_ADDTO_BB]},\"passive:66:add effect to skill-sbb\":{id:G[\"passive:66:add effect to skill-sbb\"],name:\"Passive Added Effect to Super Brave Burst\",stackType:K.Passive,icons:()=>[j.BUFF_ADDTO_SBB]},\"passive:66:add effect to skill-ubb\":{id:G[\"passive:66:add effect to skill-ubb\"],name:\"Passive Added Effect to Ultimate Brave Burst\",stackType:K.Passive,icons:()=>[j.BUFF_ADDTO_UBB]},\"passive:69:chance ko resistance\":{id:G[\"passive:69:chance ko resistance\"],name:\"Passive KO Resistance (Chance)\",stat:M.koResistance,stackType:K.Passive,icons:()=>[j.BUFF_KOBLOCK]},\"passive:70:od fill rate\":{id:G[\"passive:70:od fill rate\"],name:\"Passive OD Gauge Fill Rate\",stat:M.odGauge,stackType:K.Passive,icons:()=>[j.BUFF_ODFILLBOOST]},\"passive:71:inflict on hit-poison\":{id:G[\"passive:71:inflict on hit-poison\"],name:\"Passive Poison Counter\",stat:M.poisonCounter,stackType:K.Passive,icons:()=>[j.BUFF_POISONCOUNTER]},\"passive:71:inflict on hit-weak\":{id:G[\"passive:71:inflict on hit-weak\"],name:\"Passive Weak Counter\",stat:M.weakCounter,stackType:K.Passive,icons:()=>[j.BUFF_WEAKCOUNTER]},\"passive:71:inflict on hit-sick\":{id:G[\"passive:71:inflict on hit-sick\"],name:\"Passive Sick Counter\",stat:M.sickCounter,stackType:K.Passive,icons:()=>[j.BUFF_SICKCOUNTER]},\"passive:71:inflict on hit-injury\":{id:G[\"passive:71:inflict on hit-injury\"],name:\"Passive Injury Counter\",stat:M.injuryCounter,stackType:K.Passive,icons:()=>[j.BUFF_INJCONTER]},\"passive:71:inflict on hit-curse\":{id:G[\"passive:71:inflict on hit-curse\"],name:\"Passive Curse Counter\",stat:M.curseCounter,stackType:K.Passive,icons:()=>[j.BUFF_CURSECOUNTER]},\"passive:71:inflict on hit-paralysis\":{id:G[\"passive:71:inflict on hit-paralysis\"],name:\"Passive Paralysis Counter\",stat:M.paralysisCounter,stackType:K.Passive,icons:()=>[j.BUFF_PARALYCOUNTER]},\"passive:72:effect at turn start-hp\":{id:G[\"passive:72:effect at turn start-hp\"],name:\"Gradual HP Effects Occur at Turn Start\",stat:M.effectOccurrenceShift,stackType:K.Singleton,icons:()=>[j.BUFF_HPTURNSTART]},\"passive:72:effect at turn start-bc\":{id:G[\"passive:72:effect at turn start-bc\"],name:\"Gradual Battle Crystal Effects Occur at Turn Start\",stat:M.effectOccurrenceShift,stackType:K.Singleton,icons:()=>[j.BUFF_BCTURNSTART]},\"passive:73:resist-poison\":{id:G[\"passive:73:resist-poison\"],name:\"Passive Poison Resistance\",stat:M.poisonResist,stackType:K.Passive,icons:()=>[j.BUFF_POISONBLK]},\"passive:73:resist-weak\":{id:G[\"passive:73:resist-weak\"],name:\"Passive Weak Resistance\",stat:M.weakResist,stackType:K.Passive,icons:()=>[j.BUFF_WEAKBLK]},\"passive:73:resist-sick\":{id:G[\"passive:73:resist-sick\"],name:\"Passive Sick Resistance\",stat:M.sickResist,stackType:K.Passive,icons:()=>[j.BUFF_SICKBLK]},\"passive:73:resist-injury\":{id:G[\"passive:73:resist-injury\"],name:\"Passive Injury Resistance\",stat:M.injuryResist,stackType:K.Passive,icons:()=>[j.BUFF_INJURYBLK]},\"passive:73:resist-curse\":{id:G[\"passive:73:resist-curse\"],name:\"Passive Curse Resistance\",stat:M.curseResist,stackType:K.Passive,icons:()=>[j.BUFF_CURSEBLK]},\"passive:73:resist-paralysis\":{id:G[\"passive:73:resist-paralysis\"],name:\"Passive Paralysis Resistance\",stat:M.paralysisResist,stackType:K.Passive,icons:()=>[j.BUFF_PARALYSISBLK]},\"passive:73:resist-atk down\":{id:G[\"passive:73:resist-atk down\"],name:\"Passive Attack Reduction Resistance\",stat:M.atkDownResist,stackType:K.Passive,icons:()=>[j.BUFF_RESISTATKDOWN]},\"passive:73:resist-def down\":{id:G[\"passive:73:resist-def down\"],name:\"Passive Defense Reduction Resistance\",stat:M.defDownResist,stackType:K.Passive,icons:()=>[j.BUFF_RESISTDEFDOWN]},\"passive:73:resist-rec down\":{id:G[\"passive:73:resist-rec down\"],name:\"Passive Recovery Reduction Resistance\",stat:M.recDownResist,stackType:K.Passive,icons:()=>[j.BUFF_RESISTRECDOWN]},\"passive:74:ailment attack boost\":{id:G[\"passive:74:ailment attack boost\"],name:\"Passive Attack Boost on Status Afflicted Foes\",stat:M.ailmentAttackBoost,stackType:K.Passive,icons:()=>[j.BUFF_AILDMGUP]},\"passive:75:spark vulnerability\":{id:G[\"passive:75:spark vulnerability\"],name:\"Passive Spark Vulnerability\",stat:M.sparkDamage,stackType:K.Passive,icons:()=>[j.BUFF_SPARKDMGUP]},\"passive:77:spark damage reduction-base\":{id:G[\"passive:77:spark damage reduction-base\"],name:\"Passive Base Spark Damage Reduction\",stat:M.sparkDamageMitigation,stackType:K.Passive,icons:()=>[j.BUFF_SPARKDMGDOWN]},\"passive:77:spark damage reduction-buff\":{id:G[\"passive:77:spark damage reduction-buff\"],name:\"Passive Buffed Spark Damage Reduction\",stat:M.sparkDamageMitigation,stackType:K.Passive,icons:()=>[j.BUFF_SPARKDMGDOWN]},\"passive:78:damage taken conditional\":{id:G[\"passive:78:damage taken conditional\"],name:\"Passive Conditional Effect after Damage Received Threshold\",stackType:K.Passive,icons:()=>[j.CONDITIONALBUFF_DAMAGETAKENTHRESH]},UNKNOWN_PROC_EFFECT_ID:{id:G.UNKNOWN_PROC_EFFECT_ID,name:\"Unknown Proc Effect\",stackType:K.Unknown,icons:()=>[j.UNKNOWN]},UNKNOWN_PROC_BUFF_PARAMS:{id:G.UNKNOWN_PROC_BUFF_PARAMS,name:\"Unknown Proc Buff Parameters\",stackType:K.Unknown,icons:()=>[j.UNKNOWN]},\"proc:1:attack\":{id:G[\"proc:1:attack\"],name:\"Regular Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST:j.ATK_AOE]},\"proc:2:burst heal\":{id:G[\"proc:2:burst heal\"],name:\"Burst Heal\",stat:M.hpRecovery,stackType:K.Burst,icons:()=>[j.BUFF_HPREC]},\"proc:3:gradual heal\":{id:G[\"proc:3:gradual heal\"],name:\"Active Gradual Heal\",stat:M.hpRecovery,stackType:K.Active,icons:()=>[j.BUFF_HPREC]},\"proc:4:bc fill-flat\":{id:G[\"proc:4:bc fill-flat\"],name:\"Burst BC Fill (Flat Amount)\",stat:M.bbGauge,stackType:K.Burst,icons:()=>[j.BUFF_BBREC]},\"proc:4:bc fill-percent\":{id:G[\"proc:4:bc fill-percent\"],name:\"Burst BC Fill (Percentage)\",stat:M.bbGauge,stackType:K.Burst,icons:()=>[j.BUFF_BBREC]}}),(()=>{const e=e=>a=>{let t=\"\",i=!1,s=\"UP\";a&&(a.value&&a.value<0&&(s=\"DOWN\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0],i=!0)),\"string\"!=typeof t&&(t=\"\");let n=`BUFF_${t.toUpperCase()}${e}${s}`;return t&&n in j||(n=`BUFF_${i?\"ELEMENT\":\"\"}${e}${s}`),[j[n]]};return{\"proc:5:regular or elemental-atk\":{id:G[\"proc:5:regular or elemental-atk\"],name:\"Active Regular/Elemental Attack Boost\",stat:M.atk,stackType:K.Active,icons:e(\"ATK\")},\"proc:5:regular or elemental-def\":{id:G[\"proc:5:regular or elemental-def\"],name:\"Active Regular/Elemental Defense Boost\",stat:M.def,stackType:K.Active,icons:e(\"DEF\")},\"proc:5:regular or elemental-rec\":{id:G[\"proc:5:regular or elemental-rec\"],name:\"Active Regular/Elemental Recovery Boost\",stat:M.rec,stackType:K.Active,icons:e(\"REC\")},\"proc:5:regular or elemental-crit\":{id:G[\"proc:5:regular or elemental-crit\"],name:\"Active Regular/Elemental Critical Hit Rate Boost\",stat:M.crit,stackType:K.Active,icons:e(\"CRTRATE\")}}})()),{\"proc:6:drop boost-bc\":{id:G[\"proc:6:drop boost-bc\"],name:\"Active Battle Crystal Drop Rate Boost\",stat:M.bcDropRate,stackType:K.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_BCDOWN:j.BUFF_BCDROP]},\"proc:6:drop boost-hc\":{id:G[\"proc:6:drop boost-hc\"],name:\"Active Heart Crystal Drop Rate Boost\",stat:M.hcDropRate,stackType:K.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_HCDOWN:j.BUFF_HCDROP]},\"proc:6:drop boost-item\":{id:G[\"proc:6:drop boost-item\"],name:\"Active Item Drop Rate Boost\",stat:M.itemDropRate,stackType:K.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ITEMDOWN:j.BUFF_ITEMDROP]},\"proc:7:guaranteed ko resistance\":{id:G[\"proc:7:guaranteed ko resistance\"],name:\"Guaranteed KO Resistance\",stat:M.koResistance,stackType:K.Singleton,icons:()=>[j.BUFF_KOBLK]},\"proc:8:max hp boost-flat\":{id:G[\"proc:8:max hp boost-flat\"],name:\"Max HP Boost (Flat Amount)\",stat:M.hp,stackType:K.Singleton,icons:()=>[j.BUFF_HPUP]},\"proc:8:max hp boost-percent\":{id:G[\"proc:8:max hp boost-percent\"],name:\"Max HP Boost (Percentage)\",stat:M.hp,stackType:K.Singleton,icons:()=>[j.BUFF_HPUP]}}),(()=>{const e=e=>a=>{let t=\"\",i=!1,s=\"DOWN\";a&&(a.value&&a.value>0&&(s=\"UP\"),a.conditions&&a.conditions.targetElements&&(t=a.conditions.targetElements[0],i=!0)),\"string\"!=typeof t&&(t=\"\");let n=`BUFF_${t.toUpperCase()}${e}${s}`;return t&&n in j||(n=`BUFF_${i?\"ELEMENT\":\"\"}${e}${s}`),[j[n]]};return{\"proc:9:regular or elemental reduction-atk\":{id:G[\"proc:9:regular or elemental reduction-atk\"],name:\"Active Regular/Elemental Attack Reduction\",stat:M.atk,stackType:K.Active,icons:e(\"ATK\")},\"proc:9:regular or elemental reduction-def\":{id:G[\"proc:9:regular or elemental reduction-def\"],name:\"Active Regular/Elemental Defense Reduction\",stat:M.def,stackType:K.Active,icons:e(\"DEF\")},\"proc:9:regular or elemental reduction-rec\":{id:G[\"proc:9:regular or elemental reduction-rec\"],name:\"Active Regular/Elemental Recovery Reduction\",stat:M.rec,stackType:K.Active,icons:e(\"REC\")},\"proc:9:regular or elemental reduction-unknown\":{id:G[\"proc:9:regular or elemental reduction-unknown\"],name:\"Active Regular/Elemental Unknown Stat Reduction\",stackType:K.Active,icons:()=>[j.UNKNOWN]}}})()),{\"proc:10:cleanse-poison\":{id:G[\"proc:10:cleanse-poison\"],name:\"Poison Cleanse\",stat:M.poisonResist,stackType:K.Burst,icons:()=>[j.BUFF_POISONBLK]},\"proc:10:cleanse-weak\":{id:G[\"proc:10:cleanse-weak\"],name:\"Weak Cleanse\",stat:M.weakResist,stackType:K.Burst,icons:()=>[j.BUFF_WEAKBLK]},\"proc:10:cleanse-sick\":{id:G[\"proc:10:cleanse-sick\"],name:\"Sick Cleanse\",stat:M.sickResist,stackType:K.Burst,icons:()=>[j.BUFF_SICKBLK]},\"proc:10:cleanse-injury\":{id:G[\"proc:10:cleanse-injury\"],name:\"Injury Cleanse\",stat:M.injuryResist,stackType:K.Burst,icons:()=>[j.BUFF_INJURYBLK]},\"proc:10:cleanse-curse\":{id:G[\"proc:10:cleanse-curse\"],name:\"Curse Cleanse\",stat:M.curseResist,stackType:K.Burst,icons:()=>[j.BUFF_CURSEBLK]},\"proc:10:cleanse-paralysis\":{id:G[\"proc:10:cleanse-paralysis\"],name:\"Paralysis Cleanse\",stat:M.paralysisResist,stackType:K.Burst,icons:()=>[j.BUFF_PARALYSISBLK]},\"proc:10:cleanse-atk down\":{id:G[\"proc:10:cleanse-atk down\"],name:\"Attack Reduction Cleanse\",stat:M.atkDownResist,stackType:K.Burst,icons:()=>[j.BUFF_RESISTATKDOWN]},\"proc:10:cleanse-def down\":{id:G[\"proc:10:cleanse-def down\"],name:\"Defense Reduction Cleanse\",stat:M.defDownResist,stackType:K.Burst,icons:()=>[j.BUFF_RESISTDEFDOWN]},\"proc:10:cleanse-rec down\":{id:G[\"proc:10:cleanse-rec down\"],name:\"Recovery Reduction Cleanse\",stat:M.recDownResist,stackType:K.Burst,icons:()=>[j.BUFF_RESISTRECDOWN]},\"proc:10:cleanse-unknown\":{id:G[\"proc:10:cleanse-unknown\"],name:\"Unknown Ailment Cleanse\",stackType:K.Unknown,icons:()=>[j.BUFF_AILMENTBLK]},\"proc:11:chance inflict-poison\":{id:G[\"proc:11:chance inflict-poison\"],name:\"Poison Infliction\",stat:M.poisonInflict,stackType:K.Burst,icons:()=>[j.DEBUFF_POISON]},\"proc:11:chance inflict-weak\":{id:G[\"proc:11:chance inflict-weak\"],name:\"Weak Infliction\",stat:M.weakInflict,stackType:K.Burst,icons:()=>[j.DEBUFF_WEAK]},\"proc:11:chance inflict-sick\":{id:G[\"proc:11:chance inflict-sick\"],name:\"Sick Infliction\",stat:M.sickInflict,stackType:K.Burst,icons:()=>[j.DEBUFF_SICK]},\"proc:11:chance inflict-injury\":{id:G[\"proc:11:chance inflict-injury\"],name:\"Injury Infliction\",stat:M.injuryInflict,stackType:K.Burst,icons:()=>[j.DEBUFF_INJURY]},\"proc:11:chance inflict-curse\":{id:G[\"proc:11:chance inflict-curse\"],name:\"Curse Infliction\",stat:M.curseInflict,stackType:K.Burst,icons:()=>[j.DEBUFF_CURSE]},\"proc:11:chance inflict-paralysis\":{id:G[\"proc:11:chance inflict-paralysis\"],name:\"Paralysis Infliction\",stat:M.paralysisInflict,stackType:K.Burst,icons:()=>[j.DEBUFF_PARALYSIS]},\"proc:11:chance inflict-atk down\":{id:G[\"proc:11:chance inflict-atk down\"],name:\"Attack Reduction Infliction\",stat:M.atkDownInflict,stackType:K.Burst,icons:()=>[j.BUFF_ATKDOWN]},\"proc:11:chance inflict-def down\":{id:G[\"proc:11:chance inflict-def down\"],name:\"Defense Reduction Infliction\",stat:M.defDownInflict,stackType:K.Burst,icons:()=>[j.BUFF_DEFDOWN]},\"proc:11:chance inflict-rec down\":{id:G[\"proc:11:chance inflict-rec down\"],name:\"Recovery Reduction Infliction\",stat:M.recDownInflict,stackType:K.Burst,icons:()=>[j.BUFF_RECDOWN]},\"proc:11:chance inflict-unknown\":{id:G[\"proc:11:chance inflict-unknown\"],name:\"Unknown Ailment Infliction\",stackType:K.Unknown,icons:()=>[j.DEBUFF_AILMENT]},\"proc:12:guaranteed revive\":{id:G[\"proc:12:guaranteed revive\"],name:\"Instant Revive (Guaranteed)\",stackType:K.Burst,icons:()=>[j.BUFF_KOBLK]},\"proc:13:random attack\":{id:G[\"proc:13:random attack\"],name:\"Random Target Damage\",stackType:K.Attack,icons:()=>[j.ATK_RT]},\"proc:14:hp absorb attack\":{id:G[\"proc:14:hp absorb attack\"],name:\"Lifesteal Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_HPREC:j.ATK_AOE_HPREC]},\"proc:16:mitigate-fire\":{id:G[\"proc:16:mitigate-fire\"],name:\"Active Fire Damage Reduction\",stat:M.fireMitigation,stackType:K.Active,icons:()=>[j.BUFF_FIREDMGDOWN]},\"proc:16:mitigate-water\":{id:G[\"proc:16:mitigate-water\"],name:\"Active Water Damage Reduction\",stat:M.waterMitigation,stackType:K.Active,icons:()=>[j.BUFF_WATERDMGDOWN]},\"proc:16:mitigate-earth\":{id:G[\"proc:16:mitigate-earth\"],name:\"Active Earth Damage Reduction\",stat:M.earthMitigation,stackType:K.Active,icons:()=>[j.BUFF_EARTHDMGDOWN]},\"proc:16:mitigate-thunder\":{id:G[\"proc:16:mitigate-thunder\"],name:\"Active Thunder Damage Reduction\",stat:M.thunderMitigation,stackType:K.Active,icons:()=>[j.BUFF_THUNDERDMGDOWN]},\"proc:16:mitigate-light\":{id:G[\"proc:16:mitigate-light\"],name:\"Active Light Damage Reduction\",stat:M.lightMitigation,stackType:K.Active,icons:()=>[j.BUFF_LIGHTDMGDOWN]},\"proc:16:mitigate-dark\":{id:G[\"proc:16:mitigate-dark\"],name:\"Active Dark Damage Reduction\",stat:M.darkMitigation,stackType:K.Active,icons:()=>[j.BUFF_DARKDMGDOWN]},\"proc:16:mitigate-all\":{id:G[\"proc:16:mitigate-all\"],name:\"Active Elemental Damage Reduction (All Elements)\",stat:M.mitigation,stackType:K.Active,icons:()=>[j.BUFF_ELEMENTDMGDOWN]},\"proc:16:mitigate-unknown\":{id:G[\"proc:16:mitigate-unknown\"],name:\"Active Elemental Damage Reduction (Unspecified Element)\",stat:M.mitigation,stackType:K.Active,icons:()=>[j.BUFF_ELEMENTDMGDOWN]},\"proc:17:resist-poison\":{id:G[\"proc:17:resist-poison\"],name:\"Active Poison Resistance\",stat:M.poisonResist,stackType:K.Active,icons:()=>[j.BUFF_POISONBLK]},\"proc:17:resist-weak\":{id:G[\"proc:17:resist-weak\"],name:\"Active Weak Resistance\",stat:M.weakResist,stackType:K.Active,icons:()=>[j.BUFF_WEAKBLK]},\"proc:17:resist-sick\":{id:G[\"proc:17:resist-sick\"],name:\"Active Sick Resistance\",stat:M.sickResist,stackType:K.Active,icons:()=>[j.BUFF_SICKBLK]},\"proc:17:resist-injury\":{id:G[\"proc:17:resist-injury\"],name:\"Active Injury Resistance\",stat:M.injuryResist,stackType:K.Active,icons:()=>[j.BUFF_INJURYBLK]},\"proc:17:resist-curse\":{id:G[\"proc:17:resist-curse\"],name:\"Active Curse Resistance\",stat:M.curseResist,stackType:K.Active,icons:()=>[j.BUFF_CURSEBLK]},\"proc:17:resist-paralysis\":{id:G[\"proc:17:resist-paralysis\"],name:\"Active Paralysis Resistance\",stat:M.paralysisResist,stackType:K.Active,icons:()=>[j.BUFF_PARALYSISBLK]},\"proc:18:mitigation\":{id:G[\"proc:18:mitigation\"],name:\"Active Damage Reduction\",stat:M.mitigation,stackType:K.Active,icons:()=>[j.BUFF_DAMAGECUT]},\"proc:19:gradual bc fill\":{id:G[\"proc:19:gradual bc fill\"],name:\"Active Gradual BC Fill\",stat:M.bbGauge,stackType:K.Active,icons:()=>[j.BUFF_BBREC]},\"proc:20:bc fill on hit\":{id:G[\"proc:20:bc fill on hit\"],name:\"Active BC Fill when attacked\",stat:M.bbGauge,stackType:K.Active,icons:()=>[j.BUFF_DAMAGEBB]},\"proc:22:defense ignore\":{id:G[\"proc:22:defense ignore\"],name:\"Active Defense Ignore\",stat:M.defenseIgnore,stackType:K.Active,icons:()=>[j.BUFF_IGNOREDEF]},\"proc:23:spark damage\":{id:G[\"proc:23:spark damage\"],name:\"Active Spark Damage Boost\",stat:M.sparkDamage,stackType:K.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_SPARKDOWN:j.BUFF_SPARKUP]},\"proc:24:converted-atk\":{id:G[\"proc:24:converted-atk\"],name:\"Active Converted Attack Boost\",stat:M.atk,stackType:K.Active,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTATKDOWN:j.BUFF_CONVERTATKUP]},\"proc:24:converted-def\":{id:G[\"proc:24:converted-def\"],name:\"Active Converted Defense Boost\",stat:M.def,stackType:K.Active,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTDEFDOWN:j.BUFF_CONVERTDEFUP]},\"proc:24:converted-rec\":{id:G[\"proc:24:converted-rec\"],name:\"Active Converted Recovery Boost\",stat:M.rec,stackType:K.Active,icons:e=>[e&&e.value&&e.value.value&&e.value.value<0?j.BUFF_CONVERTRECDOWN:j.BUFF_CONVERTRECUP]},\"proc:26:hit count boost\":{id:G[\"proc:26:hit count boost\"],name:\"Active Hit Count Boost\",stat:M.hitCountModification,stackType:K.Active,icons:()=>[j.BUFF_HITUP]},\"proc:27:proportional attack\":{id:G[\"proc:27:proportional attack\"],name:\"Proportional Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_PROPORTIONAL:j.ATK_AOE_PROPORTIONAL]},\"proc:28:fixed attack\":{id:G[\"proc:28:fixed attack\"],name:\"Fixed Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_FIXED:j.ATK_AOE_FIXED]},\"proc:29:multi-element attack\":{id:G[\"proc:29:multi-element attack\"],name:\"Multi-Element Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_MULTIELEMENT:j.ATK_AOE_MULTIELEMENT]},\"proc:30:add element-fire\":{id:G[\"proc:30:add element-fire\"],name:\"Active Added Element to Attack (Fire)\",stat:M.elementModification,stackType:K.Active,icons:()=>[j.BUFF_ADDFIRE]},\"proc:30:add element-water\":{id:G[\"proc:30:add element-water\"],name:\"Active Added Element to Attack (Water)\",stat:M.elementModification,stackType:K.Active,icons:()=>[j.BUFF_ADDWATER]},\"proc:30:add element-earth\":{id:G[\"proc:30:add element-earth\"],name:\"Active Added Element to Attack (Earth)\",stat:M.elementModification,stackType:K.Active,icons:()=>[j.BUFF_ADDEARTH]},\"proc:30:add element-thunder\":{id:G[\"proc:30:add element-thunder\"],name:\"Active Added Element to Attack (Thunder)\",stat:M.elementModification,stackType:K.Active,icons:()=>[j.BUFF_ADDTHUNDER]},\"proc:30:add element-light\":{id:G[\"proc:30:add element-light\"],name:\"Active Added Element to Attack (Light)\",stat:M.elementModification,stackType:K.Active,icons:()=>[j.BUFF_ADDLIGHT]},\"proc:30:add element-dark\":{id:G[\"proc:30:add element-dark\"],name:\"Active Added Element to Attack (Dark)\",stat:M.elementModification,stackType:K.Active,icons:()=>[j.BUFF_ADDDARK]},\"proc:30:add element-unknown\":{id:G[\"proc:30:add element-unknown\"],name:\"Active Added Element to Attack (Unspecified Element)\",stat:M.elementModification,stackType:K.Active,icons:()=>[j.BUFF_ADDELEMENT]},\"proc:31:bc fill-flat\":{id:G[\"proc:31:bc fill-flat\"],name:\"Burst BC Fill (Flat Amount)\",stat:M.bbGauge,stackType:K.Burst,icons:()=>[j.BUFF_BBREC]},\"proc:31:bc fill-percent\":{id:G[\"proc:31:bc fill-percent\"],name:\"Burst BC Fill (Percentage)\",stat:M.bbGauge,stackType:K.Burst,icons:()=>[j.BUFF_BBREC]},\"proc:32:element shift-fire\":{id:G[\"proc:32:element shift-fire\"],name:\"Element Shift (Fire)\",stat:M.elementModification,stackType:K.Singleton,icons:()=>[j.BUFF_SHIFTFIRE]},\"proc:32:element shift-water\":{id:G[\"proc:32:element shift-water\"],name:\"Element Shift (Water)\",stat:M.elementModification,stackType:K.Singleton,icons:()=>[j.BUFF_SHIFTWATER]},\"proc:32:element shift-earth\":{id:G[\"proc:32:element shift-earth\"],name:\"Element Shift (Earth)\",stat:M.elementModification,stackType:K.Singleton,icons:()=>[j.BUFF_SHIFTEARTH]},\"proc:32:element shift-thunder\":{id:G[\"proc:32:element shift-thunder\"],name:\"Element Shift (Thunder)\",stat:M.elementModification,stackType:K.Singleton,icons:()=>[j.BUFF_SHIFTTHUNDER]},\"proc:32:element shift-light\":{id:G[\"proc:32:element shift-light\"],name:\"Element Shift (Light)\",stat:M.elementModification,stackType:K.Singleton,icons:()=>[j.BUFF_SHIFTLIGHT]},\"proc:32:element shift-dark\":{id:G[\"proc:32:element shift-dark\"],name:\"Element Shift (Dark)\",stat:M.elementModification,stackType:K.Singleton,icons:()=>[j.BUFF_SHIFTDARK]},\"proc:32:element shift-unknown\":{id:G[\"proc:32:element shift-unknown\"],name:\"Element Shift (Unspecified Element)\",stat:M.elementModification,stackType:K.Singleton,icons:()=>[j.BUFF_SHIFTELEMENT]},\"proc:33:buff wipe\":{id:G[\"proc:33:buff wipe\"],name:\"Buff Removal\",stat:M.buffStabilityModification,stackType:K.Burst,icons:()=>[j.BUFF_REMOVEBUFF]},\"proc:34:bc drain-flat\":{id:G[\"proc:34:bc drain-flat\"],name:\"Burst BB Gauge Drain (Flat Amount)\",stat:M.bbGauge,stackType:K.Burst,icons:()=>[j.BUFF_BBFILLDOWN]},\"proc:34:bc drain-percent\":{id:G[\"proc:34:bc drain-percent\"],name:\"Burst BB Gauge Drain (Percentage)\",stat:M.bbGauge,stackType:K.Burst,icons:()=>[j.BUFF_BBFILLDOWN]},\"proc:36:ls lock\":{id:G[\"proc:36:ls lock\"],name:\"Active Leader Skill Lock\",stat:M.buffStabilityModification,stackType:K.Active,icons:()=>[j.BUFF_DISABLELS]},\"proc:37:summon\":{id:G[\"proc:37:summon\"],name:\"Summon Unit\",stackType:K.Burst,icons:()=>[j.BUFF_SUMMONUNIT]},\"proc:38:cleanse-poison\":{id:G[\"proc:38:cleanse-poison\"],name:\"Poison Cleanse\",stat:M.poisonResist,stackType:K.Burst,icons:()=>[j.BUFF_POISONBLK]},\"proc:38:cleanse-weak\":{id:G[\"proc:38:cleanse-weak\"],name:\"Weak Cleanse\",stat:M.weakResist,stackType:K.Burst,icons:()=>[j.BUFF_WEAKBLK]},\"proc:38:cleanse-sick\":{id:G[\"proc:38:cleanse-sick\"],name:\"Sick Cleanse\",stat:M.sickResist,stackType:K.Burst,icons:()=>[j.BUFF_SICKBLK]},\"proc:38:cleanse-injury\":{id:G[\"proc:38:cleanse-injury\"],name:\"Injury Cleanse\",stat:M.injuryResist,stackType:K.Burst,icons:()=>[j.BUFF_INJURYBLK]},\"proc:38:cleanse-curse\":{id:G[\"proc:38:cleanse-curse\"],name:\"Curse Cleanse\",stat:M.curseResist,stackType:K.Burst,icons:()=>[j.BUFF_CURSEBLK]},\"proc:38:cleanse-paralysis\":{id:G[\"proc:38:cleanse-paralysis\"],name:\"Paralysis Cleanse\",stat:M.paralysisResist,stackType:K.Burst,icons:()=>[j.BUFF_PARALYSISBLK]},\"proc:38:cleanse-atk down\":{id:G[\"proc:38:cleanse-atk down\"],name:\"Attack Reduction Cleanse\",stat:M.atkDownResist,stackType:K.Burst,icons:()=>[j.BUFF_RESISTATKDOWN]},\"proc:38:cleanse-def down\":{id:G[\"proc:38:cleanse-def down\"],name:\"Defense Reduction Cleanse\",stat:M.defDownResist,stackType:K.Burst,icons:()=>[j.BUFF_RESISTDEFDOWN]},\"proc:38:cleanse-rec down\":{id:G[\"proc:38:cleanse-rec down\"],name:\"Recovery Reduction Cleanse\",stat:M.recDownResist,stackType:K.Burst,icons:()=>[j.BUFF_RESISTRECDOWN]},\"proc:38:cleanse-unknown\":{id:G[\"proc:38:cleanse-unknown\"],name:\"Unknown Ailment Cleanse\",stackType:K.Unknown,icons:()=>[j.BUFF_AILMENTBLK]},\"proc:39:mitigate-fire\":{id:G[\"proc:39:mitigate-fire\"],name:\"Active Fire Damage Reduction\",stat:M.fireMitigation,stackType:K.Active,icons:()=>[j.BUFF_FIREDMGDOWN]},\"proc:39:mitigate-water\":{id:G[\"proc:39:mitigate-water\"],name:\"Active Water Damage Reduction\",stat:M.waterMitigation,stackType:K.Active,icons:()=>[j.BUFF_WATERDMGDOWN]},\"proc:39:mitigate-earth\":{id:G[\"proc:39:mitigate-earth\"],name:\"Active Earth Damage Reduction\",stat:M.earthMitigation,stackType:K.Active,icons:()=>[j.BUFF_EARTHDMGDOWN]},\"proc:39:mitigate-thunder\":{id:G[\"proc:39:mitigate-thunder\"],name:\"Active Thunder Damage Reduction\",stat:M.thunderMitigation,stackType:K.Active,icons:()=>[j.BUFF_THUNDERDMGDOWN]},\"proc:39:mitigate-light\":{id:G[\"proc:39:mitigate-light\"],name:\"Active Light Damage Reduction\",stat:M.lightMitigation,stackType:K.Active,icons:()=>[j.BUFF_LIGHTDMGDOWN]},\"proc:39:mitigate-dark\":{id:G[\"proc:39:mitigate-dark\"],name:\"Active Dark Damage Reduction\",stat:M.darkMitigation,stackType:K.Active,icons:()=>[j.BUFF_DARKDMGDOWN]},\"proc:39:mitigate-unknown\":{id:G[\"proc:39:mitigate-unknown\"],name:\"Active Elemental Damage Reduction (Unspecified Element)\",stat:M.mitigation,stackType:K.Active,icons:()=>[j.BUFF_ELEMENTDMGDOWN]},\"proc:40:add ailment-poison\":{id:G[\"proc:40:add ailment-poison\"],name:\"Active Poison Infliction Added to Attack\",stat:M.poisonInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDPOISON]},\"proc:40:add ailment-weak\":{id:G[\"proc:40:add ailment-weak\"],name:\"Active Weak Infliction Added to Attack\",stat:M.weakInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDWEAK]},\"proc:40:add ailment-sick\":{id:G[\"proc:40:add ailment-sick\"],name:\"Active Sick Infliction Added to Attack\",stat:M.sickInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDSICK]},\"proc:40:add ailment-injury\":{id:G[\"proc:40:add ailment-injury\"],name:\"Active Injury Infliction Added to Attack\",stat:M.injuryInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDINJURY]},\"proc:40:add ailment-curse\":{id:G[\"proc:40:add ailment-curse\"],name:\"Active Curse Infliction Added to Attack\",stat:M.curseInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDCURSE]},\"proc:40:add ailment-paralysis\":{id:G[\"proc:40:add ailment-paralysis\"],name:\"Active Paralysis Infliction Added to Attack\",stat:M.paralysisInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDPARA]},\"proc:40:add ailment-atk down\":{id:G[\"proc:40:add ailment-atk down\"],name:\"Active Attack Reduction Infliction Added to Attack\",stat:M.atkDownInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDATKDOWN]},\"proc:40:add ailment-def down\":{id:G[\"proc:40:add ailment-def down\"],name:\"Active Defense Reduction Infliction Added to Attack\",stat:M.defDownInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDDEFDOWN]},\"proc:40:add ailment-rec down\":{id:G[\"proc:40:add ailment-rec down\"],name:\"Active Recovery Reduction Infliction Added to Attack\",stat:M.recDownInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDRECDOWN]},\"proc:40:add ailment-unknown\":{id:G[\"proc:40:add ailment-unknown\"],name:\"Active Unknown Ailment Infliction Added to Attack\",stackType:K.Unknown,icons:()=>[j.BUFF_ADDAILMENT]},\"proc:42:sacrificial attack\":{id:G[\"proc:42:sacrificial attack\"],name:\"Sacrificial Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_SACRIFICIAL:j.ATK_AOE_SACRIFICIAL]},\"proc:42:instant death\":{id:G[\"proc:42:instant death\"],name:\"Instant Death to Self (Post-Attack)\",stackType:K.Burst,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_SACRIFICIAL:j.ATK_AOE_SACRIFICIAL,j.BUFF_KO]},\"proc:43:burst od fill\":{id:G[\"proc:43:burst od fill\"],name:\"Burst OD Gauge Fill (Percentage)\",stat:M.odGauge,stackType:K.Burst,icons:()=>[j.BUFF_OVERDRIVEUP]},\"proc:44:damage over time\":{id:G[\"proc:44:damage over time\"],name:\"Active Damage over Time\",stat:M.damageOverTime,stackType:K.Active,icons:()=>[j.BUFF_TURNDMG]},\"proc:45:attack boost-bb\":{id:G[\"proc:45:attack boost-bb\"],name:\"Active BB ATK Boost\",stat:M.bbAtk,stackType:K.Active,icons:()=>[j.BUFF_BBATKUP]},\"proc:45:attack boost-sbb\":{id:G[\"proc:45:attack boost-sbb\"],name:\"Active SBB ATK Boost\",stat:M.bbAtk,stackType:K.Active,icons:()=>[j.BUFF_SBBATKUP]},\"proc:45:attack boost-ubb\":{id:G[\"proc:45:attack boost-ubb\"],name:\"Active UBB ATK Boost\",stat:M.bbAtk,stackType:K.Active,icons:()=>[j.BUFF_UBBATKUP]},\"proc:46:non-lethal proportional attack\":{id:G[\"proc:46:non-lethal proportional attack\"],name:\"Non-Lethal Proportional Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_PROPORTIONAL:j.ATK_AOE_PROPORTIONAL]},\"proc:47:hp scaled attack\":{id:G[\"proc:47:hp scaled attack\"],name:\"HP Scaled Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_HPSCALED:j.ATK_AOE_HPSCALED]},\"proc:48:piercing attack-base\":{id:G[\"proc:48:piercing attack-base\"],name:\"Piercing Proportional Damage (Base HP)\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_PIERCING_PROPORTIONAL:j.ATK_AOE_PIERCING_PROPORTIONAL]},\"proc:48:piercing attack-current\":{id:G[\"proc:48:piercing attack-current\"],name:\"Piercing Proportional Damage (Current HP)\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_PIERCING_PROPORTIONAL:j.ATK_AOE_PIERCING_PROPORTIONAL]},\"proc:48:piercing attack-fixed\":{id:G[\"proc:48:piercing attack-fixed\"],name:\"Piercing Fixed Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_PIERCING_FIXED:j.ATK_AOE_PIERCING_FIXED]},\"proc:48:piercing attack-unknown\":{id:G[\"proc:48:piercing attack-unknown\"],name:\"Unknown Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST:j.ATK_AOE]},\"proc:49:chance instant death\":{id:G[\"proc:49:chance instant death\"],name:\"Instant Death (Chance)\",stackType:K.Burst,icons:()=>[j.BUFF_KO]},\"proc:50:chance damage reflect\":{id:G[\"proc:50:chance damage reflect\"],name:\"Active Damage Reflect (Chance)\",stat:M.damageReflect,stackType:K.Active,icons:()=>[j.BUFF_COUNTERDAMAGE]},\"proc:51:add to attack-atk down\":{id:G[\"proc:51:add to attack-atk down\"],name:\"Active Attack Reduction Infliction Added to Attack\",stat:M.atkDownInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDATKDOWN]},\"proc:51:add to attack-def down\":{id:G[\"proc:51:add to attack-def down\"],name:\"Active Defense Reduction Infliction Added to Attack\",stat:M.defDownInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDDEFDOWN]},\"proc:51:add to attack-rec down\":{id:G[\"proc:51:add to attack-rec down\"],name:\"Active Recovery Reduction Infliction Added to Attack\",stat:M.recDownInflict,stackType:K.Active,icons:()=>[j.BUFF_ADDRECDOWN]},\"proc:52:bc efficacy\":{id:G[\"proc:52:bc efficacy\"],name:\"Active BC Efficacy\",stat:M.bcEfficacy,stackType:K.Active,icons:()=>[j.BUFF_BBFILL]},\"proc:53:inflict on hit-poison\":{id:G[\"proc:53:inflict on hit-poison\"],name:\"Active Poison Counter\",stat:M.poisonCounter,stackType:K.Active,icons:()=>[j.BUFF_POISONCOUNTER]},\"proc:53:inflict on hit-weak\":{id:G[\"proc:53:inflict on hit-weak\"],name:\"Active Weak Counter\",stat:M.weakCounter,stackType:K.Active,icons:()=>[j.BUFF_WEAKCOUNTER]},\"proc:53:inflict on hit-sick\":{id:G[\"proc:53:inflict on hit-sick\"],name:\"Active Sick Counter\",stat:M.sickCounter,stackType:K.Active,icons:()=>[j.BUFF_SICKCOUNTER]},\"proc:53:inflict on hit-injury\":{id:G[\"proc:53:inflict on hit-injury\"],name:\"Active Injury Counter\",stat:M.injuryCounter,stackType:K.Active,icons:()=>[j.BUFF_INJCONTER]},\"proc:53:inflict on hit-curse\":{id:G[\"proc:53:inflict on hit-curse\"],name:\"Active Curse Counter\",stat:M.curseCounter,stackType:K.Active,icons:()=>[j.BUFF_CURSECOUNTER]},\"proc:53:inflict on hit-paralysis\":{id:G[\"proc:53:inflict on hit-paralysis\"],name:\"Active Paralysis Counter\",stat:M.paralysisCounter,stackType:K.Active,icons:()=>[j.BUFF_PARALYCOUNTER]},\"proc:54:critical damage boost\":{id:G[\"proc:54:critical damage boost\"],name:\"Active Critical Damage Boost\",stat:M.criticalDamage,stackType:K.Active,icons:()=>[j.BUFF_CRTUP]},\"proc:55:elemental weakness damage-fire\":{id:G[\"proc:55:elemental weakness damage-fire\"],name:\"Active Fire Elemental Damage Boost\",stat:M.fireElementalDamage,stackType:K.Active,icons:()=>[j.BUFF_FIREDMGUP]},\"proc:55:elemental weakness damage-water\":{id:G[\"proc:55:elemental weakness damage-water\"],name:\"Active Water Elemental Damage Boost\",stat:M.waterElementalDamage,stackType:K.Active,icons:()=>[j.BUFF_WATERDMGUP]},\"proc:55:elemental weakness damage-earth\":{id:G[\"proc:55:elemental weakness damage-earth\"],name:\"Active Earth Elemental Damage Boost\",stat:M.earthElementalDamage,stackType:K.Active,icons:()=>[j.BUFF_EARTHDMGUP]},\"proc:55:elemental weakness damage-thunder\":{id:G[\"proc:55:elemental weakness damage-thunder\"],name:\"Active Thunder Elemental Damage Boost\",stat:M.thunderElementalDamage,stackType:K.Active,icons:()=>[j.BUFF_THUNDERDMGUP]},\"proc:55:elemental weakness damage-light\":{id:G[\"proc:55:elemental weakness damage-light\"],name:\"Active Light Elemental Damage Boost\",stat:M.lightElementalDamage,stackType:K.Active,icons:()=>[j.BUFF_LIGHTDMGUP]},\"proc:55:elemental weakness damage-dark\":{id:G[\"proc:55:elemental weakness damage-dark\"],name:\"Active Dark Elemental Damage Boost\",stat:M.darkElementalDamage,stackType:K.Active,icons:()=>[j.BUFF_DARKDMGUP]},\"proc:55:elemental weakness damage-unknown\":{id:G[\"proc:55:elemental weakness damage-unknown\"],name:\"Active Elemental Damage Boost (Unspecified Element)\",stackType:K.Active,icons:()=>[j.BUFF_ELEMENTDMGUP]},\"proc:56:chance ko resistance\":{id:G[\"proc:56:chance ko resistance\"],name:\"KO Resistance (Chance)\",stat:M.koResistance,stackType:K.Active,icons:()=>[j.BUFF_KOBLOCK]},\"proc:57:bc drop resistance-base\":{id:G[\"proc:57:bc drop resistance-base\"],name:\"Active Base Battle Crystal Drop Rate Reduction\",stat:M.bcDropRate,stackType:K.Active,icons:()=>[j.BUFF_BCDOWN]},\"proc:57:bc drop resistance-buff\":{id:G[\"proc:57:bc drop resistance-buff\"],name:\"Active Buffed Battle Crystal Drop Rate Reduction\",stat:M.bcDropRate,stackType:K.Active,icons:()=>[j.BUFF_BCDOWN]},\"proc:57:hc drop resistance-base\":{id:G[\"proc:57:hc drop resistance-base\"],name:\"Active Base Heart Crystal Drop Rate Reduction\",stat:M.hcDropRate,stackType:K.Active,icons:()=>[j.BUFF_HCDOWN]},\"proc:57:hc drop resistance-buff\":{id:G[\"proc:57:hc drop resistance-buff\"],name:\"Active Buffed Heart Crystal Drop Rate Reduction\",stat:M.hcDropRate,stackType:K.Active,icons:()=>[j.BUFF_HCDOWN]},\"proc:58:spark vulnerability\":{id:G[\"proc:58:spark vulnerability\"],name:\"Active Spark Vulnerability\",stat:M.sparkDamage,stackType:K.Active,icons:()=>[j.BUFF_SPARKDMGUP]},\"proc:59:attack reduction-bb\":{id:G[\"proc:59:attack reduction-bb\"],name:\"Active BB ATK Reduction\",stat:M.bbAtk,stackType:K.Active,icons:()=>[j.BUFF_BBATKDOWN]},\"proc:59:attack reduction-sbb\":{id:G[\"proc:59:attack reduction-sbb\"],name:\"Active SBB ATK Reduction\",stat:M.bbAtk,stackType:K.Active,icons:()=>[j.BUFF_SBBATKDOWN]},\"proc:59:attack reduction-ubb\":{id:G[\"proc:59:attack reduction-ubb\"],name:\"Active UBB ATK Reduction\",stat:M.bbAtk,stackType:K.Active,icons:()=>[j.BUFF_UBBATKDOWN]},\"proc:61:party bb gauge-scaled attack\":{id:G[\"proc:61:party bb gauge-scaled attack\"],name:\"Party BB Gauge-Scaled Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_BBGAUGESCALED:j.ATK_AOE_BBGAUGESCALED]},\"proc:61:party bc drain\":{id:G[\"proc:61:party bc drain\"],name:\"Party BB Gauge Drain (Post-Attack)\",stat:M.bbGauge,stackType:K.Burst,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_BBGAUGESCALED:j.ATK_AOE_BBGAUGESCALED,j.BUFF_BBFILLDOWN]},\"proc:62:barrier-fire\":{id:G[\"proc:62:barrier-fire\"],name:\"Fire Barrier\",stat:M.barrier,stackType:K.Singleton,icons:()=>[j.BUFF_FIRESHIELD]},\"proc:62:barrier-water\":{id:G[\"proc:62:barrier-water\"],name:\"Water Barrier\",stat:M.barrier,stackType:K.Singleton,icons:()=>[j.BUFF_WATERSHIELD]},\"proc:62:barrier-earth\":{id:G[\"proc:62:barrier-earth\"],name:\"Earth Barrier\",stat:M.barrier,stackType:K.Singleton,icons:()=>[j.BUFF_EARTHSHIELD]},\"proc:62:barrier-thunder\":{id:G[\"proc:62:barrier-thunder\"],name:\"Thunder Barrier\",stat:M.barrier,stackType:K.Singleton,icons:()=>[j.BUFF_THUNDERSHIELD]},\"proc:62:barrier-light\":{id:G[\"proc:62:barrier-light\"],name:\"Light Barrier\",stat:M.barrier,stackType:K.Singleton,icons:()=>[j.BUFF_LIGHTSHIELD]},\"proc:62:barrier-dark\":{id:G[\"proc:62:barrier-dark\"],name:\"Dark Barrier\",stat:M.barrier,stackType:K.Singleton,icons:()=>[j.BUFF_DARKSHIELD]},\"proc:62:barrier-all\":{id:G[\"proc:62:barrier-all\"],name:\"Barrier (All Elements)\",stat:M.barrier,stackType:K.Singleton,icons:()=>[j.BUFF_ELEMENTSHIELD]},\"proc:62:barrier-unknown\":{id:G[\"proc:62:barrier-unknown\"],name:\"Barrier (Unspecified Element)\",stat:M.barrier,stackType:K.Singleton,icons:()=>[j.BUFF_ELEMENTSHIELD]},\"proc:64:consecutive usage attack\":{id:G[\"proc:64:consecutive usage attack\"],name:\"Consecutive Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_USAGESCALED:j.ATK_AOE_USAGESCALED]},\"proc:65:ailment attack boost\":{id:G[\"proc:65:ailment attack boost\"],name:\"Active Attack Boost on Status Afflicted Foes\",stat:M.ailmentAttackBoost,stackType:K.Active,icons:()=>[j.BUFF_AILDMGUP]},\"proc:66:chance revive\":{id:G[\"proc:66:chance revive\"],name:\"Instant Revive (Chance)\",stackType:K.Burst,icons:()=>[j.BUFF_KOBLOCK]},\"proc:67:bc fill on spark\":{id:G[\"proc:67:bc fill on spark\"],name:\"Active BC Fill on Spark\",stat:M.bbGauge,stackType:K.Active,icons:()=>[j.BUFF_SPARKBBUP]},\"proc:68:guard mitigation\":{id:G[\"proc:68:guard mitigation\"],name:\"Active Guard Damage Reduction\",stackType:K.Active,icons:()=>[j.BUFF_GUARDCUT]},\"proc:69:bc fill on guard-percent\":{id:G[\"proc:69:bc fill on guard-percent\"],name:\"Active BC Fill on Guard (Percentage)\",stat:M.bbGauge,stackType:K.Active,icons:()=>[j.BUFF_GUARDBBUP]},\"proc:69:bc fill on guard-flat\":{id:G[\"proc:69:bc fill on guard-flat\"],name:\"Active BC Fill on Guard (Flat Amount)\",stat:M.bbGauge,stackType:K.Active,icons:()=>[j.BUFF_GUARDBBUP]},\"proc:71:bc efficacy reduction\":{id:G[\"proc:71:bc efficacy reduction\"],name:\"Active BC Efficacy Reduction\",stat:M.bcEfficacy,stackType:K.Active,icons:()=>[j.BUFF_BBFILLDOWN]},\"proc:73:resist-atk down\":{id:G[\"proc:73:resist-atk down\"],name:\"Active Attack Reduction Resistance\",stat:M.atkDownResist,stackType:K.Burst,icons:()=>[j.BUFF_RESISTATKDOWN]},\"proc:73:resist-def down\":{id:G[\"proc:73:resist-def down\"],name:\"Active Defense Reduction Resistance\",stat:M.defDownResist,stackType:K.Burst,icons:()=>[j.BUFF_RESISTDEFDOWN]},\"proc:73:resist-rec down\":{id:G[\"proc:73:resist-rec down\"],name:\"Active Recovery Reduction Resistance\",stat:M.recDownResist,stackType:K.Burst,icons:()=>[j.BUFF_RESISTRECDOWN]},\"proc:75:element squad-scaled attack\":{id:G[\"proc:75:element squad-scaled attack\"],name:\"Element Squad-Scaled Damage\",stackType:K.Attack,icons:e=>[e&&e.targetArea===g.Single?j.ATK_ST_ELEMENTSCALED:j.ATK_AOE_ELEMENTSCALED]},\"proc:76:extra action\":{id:G[\"proc:76:extra action\"],name:\"Active Extra Action\",stat:M.extraAction,stackType:K.Active,icons:()=>[j.BUFF_DBLSTRIKE]},UNKNOWN_CONDITIONAL_EFFECT_ID:{id:G.UNKNOWN_CONDITIONAL_EFFECT_ID,name:\"Unknown Conditional Effect\",stackType:K.Unknown,icons:()=>[j.UNKNOWN]},UNKNOWN_CONDITIONAL_BUFF_PARAMS:{id:G.UNKNOWN_CONDITIONAL_BUFF_PARAMS,name:\"Unknown Conditional Buff Parameters\",stackType:K.Unknown,icons:()=>[j.UNKNOWN]},\"conditional:8:gradual heal\":{id:G[\"conditional:8:gradual heal\"],name:\"Conditional Gradual Heal\",stat:M.hpRecovery,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_HPREC]},\"conditional:12:guaranteed ko resistance\":{id:G[\"conditional:12:guaranteed ko resistance\"],name:\"Conditional Guaranteed KO Resistance\",stat:M.koResistance,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_KOBLK]},\"conditional:36:mitigation\":{id:G[\"conditional:36:mitigation\"],name:\"Conditional Damage Reduction\",stat:M.mitigation,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_DAMAGECUT]},\"conditional:91:chance ko resistance\":{id:G[\"conditional:91:chance ko resistance\"],name:\"Conditional KO Resistance (Chance)\",stat:M.koResistance,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_KOBLOCK]},\"conditional:133:heal on hit\":{id:G[\"conditional:133:heal on hit\"],name:\"Conditional Heal when Attacked (Chance)\",stat:M.hpRecovery,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_BEENATK_HPREC]},\"conditional:153:chance inflict atk down on hit\":{id:G[\"conditional:153:chance inflict atk down on hit\"],name:\"Conditional Attack Reduction Counter (Chance)\",stat:M.atkDownCounter,stackType:K.ConditionalTimed,icons:()=>[j.BUFF_PROB_ATKREDUC]},\"proc:78:self stat boost-atk\":{id:G[\"proc:78:self stat boost-atk\"],name:\"Active Self Attack Boost\",stat:M.atk,stackType:K.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_ATKDOWNLOCK:j.BUFF_SELFATKUP]},\"proc:78:self stat boost-def\":{id:G[\"proc:78:self stat boost-def\"],name:\"Active Self Defense Boost\",stat:M.def,stackType:K.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_DEFDOWNLOCK:j.BUFF_SELFDEFUP]},\"proc:78:self stat boost-rec\":{id:G[\"proc:78:self stat boost-rec\"],name:\"Active Self Recovery Boost\",stat:M.rec,stackType:K.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_RECDOWNLOCK:j.BUFF_SELFRECUP]},\"proc:78:self stat boost-crit\":{id:G[\"proc:78:self stat boost-crit\"],name:\"Active Self Critical Hit Rate Boost\",stat:M.crit,stackType:K.Active,icons:e=>[e&&e.value&&e.value<0?j.BUFF_CRTRATEDOWNLOCK:j.BUFF_SELFCRTRATEUP]}}));var le=Object.freeze({__proto__:null,convertProcEffectToBuffs:se,convertPassiveEffectToBuffs:function(e,a){if(!e||\"object\"!=typeof e)throw new TypeError(\"effect parameter should be an object\");if(!a||\"object\"!=typeof a)throw new TypeError(\"context parameter should be an object\");const i=S(e)&&t(e),n=i&&oe(a.reloadMapping).get(i);return\"function\"==typeof n?n(e,a):function(e,a){const i=S(e)&&t(e)||s.Unknown;return[{id:G.UNKNOWN_PASSIVE_EFFECT_ID,originalId:i,sources:V(a)}]}(e,a)},convertConditionalEffectToBuffs:ce,get BuffSource(){return W},get BuffStackType(){return K},BUFF_METADATA:re,getMetadataForBuff:function(e,a=re){return a&&\"object\"==typeof a&&Object.hasOwnProperty.call(a,e)?a[e]:void 0}}),de=Object.freeze({__proto__:null,constants:o,parsers:le,getMetadataForProc:d,getMetadataForPassive:N,isAttackingProcId:p,getNameForProc:O,getNameForPassive:C,isProcEffect:H,isPassiveEffect:S,combineEffectsAndDamageFrames:function(e,a){let t=[];return Array.isArray(e)&&e.length>0&&Array.isArray(a)&&e.length===a.length&&(t=e.map((e,t)=>{const i=a[t];return{delay:e[\"effect delay time(ms)/frame\"],effect:e,frames:i,id:\"\"+(e[\"proc id\"]||e[\"unknown proc id\"]),targetArea:e[\"random attack\"]?g.Random:e[\"target area\"],targetType:e[\"target type\"]}})),t},getEffectId:t,getEffectName:function(e,a={}){let i=\"\";const s=t(e);return S(e)?i=C(s,a&&a.passive):H(e)&&(i=O(s,a&&a.proc)),i},get ProcBuffType(){return c},PASSIVE_METADATA:r,PROC_METADATA:l});var pe=Object.freeze({__proto__:null,getEffectsForExtraSkill:function(e){return e&&Array.isArray(e.effects)?e.effects:[]}});var ue=Object.freeze({__proto__:null,getEffectsForItem:function(e){let a=[];if(e&&e.effect)if(Array.isArray(e.effect))a=e.effect;else if(Array.isArray(e.effect.effect)){const{effect:t,target_area:i,target_type:s}=e.effect;a=t.map(e=>{const a=Object.assign({},e);return a[\"target area\"]=i,a[\"target type\"]=s,a})}return a},getItemImageUrl:function(e,a){return`${e||\"\"}/item/${a||\"\"}`}});var fe=Object.freeze({__proto__:null,getEffectsForLeaderSkill:function(e){return e&&Array.isArray(e.effects)?e.effects:[]}});var Fe=Object.freeze({__proto__:null,getUnitImageFileNames:function(e,a=\"\"){const t=`${e||\"\"}${a||\"\"}.png`;return{spritesheet:\"unit_anime_\"+t,battleAvatar:\"unit_ills_battle_\"+t,guideAvatar:\"unit_ills_thum_\"+t,fullIllustration:\"unit_ills_full_\"+t}},getUnitImageUrl:function(e,a){return`${e||\"\"}/unit/img/${a||\"\"}`}});const ge=\"A\".charCodeAt(0),me=\"a\".charCodeAt(0),De=\"0\".charCodeAt(0);function Ee(e){return\"string\"==typeof e&&e.split(\"@\")[1]||e}var Ue=Object.freeze({__proto__:null,getEffectsForSpEnhancement:function(e){const a=[];if(e&&e.skill&&Array.isArray(e.skill.effects)){e.skill.effects.forEach(e=>{Object.keys(e).forEach(t=>{const i=e[t],s=Object.assign(Object.assign({},i),{sp_type:t});a.push(s)})})}return a},getSpCategoryName:function(e){let a;switch(+e){case 1:a=v[\"Parameter Boost\"];break;case 2:a=v.Spark;break;case 3:a=v[\"Critical Hits\"];break;case 4:a=v[\"Attack Boost\"];break;case 5:a=v[\"BB Gauge\"];break;case 6:a=v[\"HP Recovery\"];break;case 7:a=v.Drops;break;case 8:a=v[\"Ailment Resistance\"];break;case 9:a=v[\"Ailment Infliction\"];break;case 10:a=v[\"Damage Reduction\"];break;case 11:a=v.Special;break;default:a=v.Unknown}return a},spIndexToCode:function(e){let a=\"\",t=-1;return Number.isInteger(e)&&(e>=0&&e<=25?t=e+ge:e>=26&&e<=51?t=e-26+me:e>=52&&e<=61&&(t=e-52+De)),-1!==t&&(a=String.fromCharCode(t)),a},spCodeToIndex:function(e){let a=-1,t=-1;return e&&\"string\"==typeof e&&1===e.length&&(e>=\"A\"&&e<=\"Z\"?t=ge:e>=\"a\"&&e<=\"z\"?t=me-26:e>=\"0\"&&e<=\"9\"&&(t=De-52)),-1!==t&&(a=e.charCodeAt(0)-t),a},getSpEntryId:Ee,getSpEntryWithId:function(e,a){const t=Ee(e);return e&&Array.isArray(a)&&a.find(e=>Ee(e&&e.id)===t)||void 0},getAllDependenciesForSpEntry:function e(a,t,i=new Set){let s=[];if(a&&a.dependency&&Array.isArray(t)&&t.length>0){const n=Ee(a.dependency),c=t.find(e=>Ee(e&&e.id)===n);if(c&&!i.has(c)){i.add(c);const a=e(c,t,i);s=[c].concat(a)}}return s},getAllEntriesThatDependOnSpEntry:function e(a,t,i=new Set){let s=[];if(a&&a.id&&Array.isArray(t)&&t.length>0){const n=a.id;s=t.filter(e=>e.dependency&&e.dependency.includes(n)&&!i.has(e)),s.forEach(a=>{i.add(a);const n=e(a,t,i);s=s.concat(n)})}return s}});return e.buffs=de,e.bursts=P,e.datamineTypes=x,e.extraSkills=pe,e.items=ue,e.leaderSkills=fe,e.spEnhancements=Ue,e.units=Fe,e.version=\"0.7.0\",e}({});\n//# sourceMappingURL=index.browser.min.js.map\n","var bfmtUtilities = (function (exports) {\n    'use strict';\n\n    /**\n     * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get level entry from.\n     * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n     * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n     */\n    function getLevelEntryForBurst(burst, level) {\n        const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n        let levelIndex;\n        if (level !== null && !isNaN(level)) {\n            // 1-indexed\n            levelIndex = (+level - 1);\n        }\n        else {\n            // default to last entry in burst\n            levelIndex = burstEffectsByLevel.length - 1;\n        }\n        return burstEffectsByLevel[levelIndex];\n    }\n\n    /**\n     * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n     * @param burst Burst to get effects from.\n     * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n     * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n     */\n    function getEffectsForBurst(burst, level) {\n        const levelEntry = getLevelEntryForBurst(burst, level);\n        return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n    }\n\n    /**\n     * @description Get the proc/passive ID of a given object.\n     * @param effect Object to get the effect ID from.\n     * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectId(effect) {\n        let resultId = '';\n        if (effect) {\n            resultId = effect['proc id'] || effect['unknown proc id'] ||\n                effect['passive id'] || effect['unknown passive id'] || '';\n        }\n        return resultId;\n    }\n\n    var KNOWN_PROC_ID;\n    (function (KNOWN_PROC_ID) {\n        KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n        KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    })(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\n    var KNOWN_PASSIVE_ID;\n    (function (KNOWN_PASSIVE_ID) {\n        KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n        KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    })(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\n    var KNOWN_CONDITIONAL_ID;\n    (function (KNOWN_CONDITIONAL_ID) {\n        KNOWN_CONDITIONAL_ID[\"Unknown\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n    })(KNOWN_CONDITIONAL_ID || (KNOWN_CONDITIONAL_ID = {}));\n\n    var constants = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get KNOWN_PROC_ID () { return KNOWN_PROC_ID; },\n        get KNOWN_PASSIVE_ID () { return KNOWN_PASSIVE_ID; },\n        get KNOWN_CONDITIONAL_ID () { return KNOWN_CONDITIONAL_ID; }\n    });\n\n    var ProcBuffType;\n    (function (ProcBuffType) {\n        ProcBuffType[\"Attack\"] = \"Attack\";\n    })(ProcBuffType || (ProcBuffType = {}));\n    /* eslint-disable */\n    /**\n     * @ignore\n     */\n    const PASSIVE_METADATA = Object.freeze({\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Parameter Boost\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Elemental Parameter Boost\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Type-Based Parameter Boost\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"Status Negation\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Damage Reduction\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Gradual BB Gauge Boost\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"HC Efficacy\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"HP-Conditional Parameter Boost\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"HP-Conditional Drop Rate Boost\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"BC Fill on Enemy Defeat\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Damage Reduction (Chance)\"\n        },\n        \"15\": {\n            \"ID\": \"15\",\n            \"Name\": \"Heal on Enemy Defeat\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Heal on Battle Victory\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"HP Absorption\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Drop Rate Boost\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"Status Infliction\"\n        },\n        \"21\": {\n            \"ID\": \"21\",\n            \"Name\": \"Parameter Boost for First X Turns\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"BC Fill on Battle Victory\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Heal when Attacked (Chance)\"\n        },\n        \"25\": {\n            \"ID\": \"25\",\n            \"Name\": \"BC Fill when Hit (Chance)\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Damage Counter (Chance)\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Increased Target Chance\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Decreased Target Chance\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Defense Ignore (Chance)\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"BB Conditional Parameter Boost\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"BC Efficacy\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Heal over Time\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"Critical Damage Boost\"\n        },\n        \"35\": {\n            \"ID\": \"35\",\n            \"Name\": \"BC Fill when Normal Attacking\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Extra Action\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Hit Count Boost\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Parameter Conversion\"\n        },\n        \"41\": {\n            \"ID\": \"41\",\n            \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"Gender Parameter Boost\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Damage Reduction to 1\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Flat Parameter Boost\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"Critical Damage Negation\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"BC Fill on Spark\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"BC Cost Reduction\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"BB Gauge Consumption Reduction\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Elemental Damage Boost\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Conditional Effect based on HP Threshold\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Damage Reduction when Guarding\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BC Fill when Attacked when Guarding\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BC Fill on Guard\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Elemental Damage Reduction\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Elemental Damage Reduction for first X Turns\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"BB Atk Boost\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"BC Fill on Critical\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Add buff to Brave Burst\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"OD Gauge Fill Rate Boost\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"Status Counter\"\n        },\n        \"72\": {\n            \"ID\": \"72\",\n            \"Name\": \"Turn End Effects Activate at Turn Start\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\"\n        },\n        \"74\": {\n            \"ID\": \"74\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Spark Vulnerability\"\n        },\n        \"77\": {\n            \"ID\": \"77\",\n            \"Name\": \"Spark Damage Reduction\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Conditional Effect after Damage Received Threshold\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"BC Fill after Damage Received Threshold\"\n        },\n        \"80\": {\n            \"ID\": \"80\",\n            \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n        },\n        \"81\": {\n            \"ID\": \"81\",\n            \"Name\": \"BC Fill after Damage Dealt Threshold\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"Conditional Effect after BC Received Threshold\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"Conditional Effect after HC Received Threshold\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"BC Fill after HC Received Threshold\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"Conditional Effect after Spark Threshold\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Conditional Effect on Guard\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Conditional Effect on Critical\"\n        },\n        \"90\": {\n            \"ID\": \"90\",\n            \"Name\": \"Status Infliction on Critical\"\n        },\n        \"91\": {\n            \"ID\": \"91\",\n            \"Name\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Negate Defense Ignore\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Added Elements\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Normal Attacks Hit All Foes\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Player EXP Boost\"\n        },\n        \"99\": {\n            \"ID\": \"99\",\n            \"Name\": \"\"\n        },\n        \"100\": {\n            \"ID\": \"100\",\n            \"Name\": \"Spark Critical\"\n        },\n        \"101\": {\n            \"ID\": \"101\",\n            \"Name\": \"Heal on Spark\"\n        },\n        \"102\": {\n            \"ID\": \"102\",\n            \"Name\": \"Added Elements\"\n        },\n        \"103\": {\n            \"ID\": \"103\",\n            \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n        },\n        \"104\": {\n            \"ID\": \"104\",\n            \"Name\": \"Spark Boost when HP Passes Threshold\"\n        },\n        \"105\": {\n            \"ID\": \"105\",\n            \"Name\": \"Turn-Based Parameter Boost\"\n        },\n        \"106\": {\n            \"ID\": \"106\",\n            \"Name\": \"Conditional Effect after Activating Overdrive\"\n        },\n        \"107\": {\n            \"ID\": \"107\",\n            \"Name\": \"Add Effect to Leader Skill\"\n        },\n        \"109\": {\n            \"ID\": \"109\",\n            \"Name\": \"BB Gauge Reduction (Chance)\"\n        },\n        \"110\": {\n            \"ID\": \"110\",\n            \"Name\": \"BC Efficacy Reduction (Chance)\"\n        },\n        \"111\": {\n            \"ID\": \"111\",\n            \"Name\": \"Increase Brave Burst Activation Rate\"\n        },\n        \"112\": {\n            \"ID\": \"112\",\n            \"Name\": \"ABP/CBP Boost\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Conditional Effect after HP Threshold\"\n        },\n        \"114\": {\n            \"ID\": \"114\",\n            \"Name\": \"Inflict Buff when Attacked\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n        },\n        \"128\": {\n            \"ID\": \"128\",\n            \"Name\": \"Damage Reduction from Normal Attacks\"\n        },\n        \"143\": {\n            \"ID\": \"143\",\n            \"Name\": \"Break Atk Parameter Limit\"\n        },\n        \"10008\": {\n            \"ID\": \"10008\",\n            \"Name\": \"Damage Reduction from Specific Sources\"\n        },\n        \"11004\": {\n            \"ID\": \"11004\",\n            \"Name\": \"Elemental Spark Damage Boost\"\n        },\n        \"11005\": {\n            \"ID\": \"11005\",\n            \"Name\": \"Elemental Critical Damage Boost\"\n        },\n        \"11006\": {\n            \"ID\": \"11006\",\n            \"Name\": \"Summoner EXP Boost\"\n        },\n        \"11009\": {\n            \"ID\": \"11009\",\n            \"Name\": \"Effect Duration Boost\"\n        },\n        \"66,1\": {\n            \"ID\": \"66,1\",\n            \"Name\": \"\"\n        }\n    });\n    /**\n     * @ignore\n     */\n    const PROC_METADATA = Object.freeze({\n        \"0\": {\n            \"ID\": \"0\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"1\": {\n            \"ID\": \"1\",\n            \"Name\": \"Regular Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"2\": {\n            \"ID\": \"2\",\n            \"Name\": \"Burst Heal\",\n            \"Type\": \"\"\n        },\n        \"3\": {\n            \"ID\": \"3\",\n            \"Name\": \"Heal over Time\",\n            \"Type\": \"\"\n        },\n        \"4\": {\n            \"ID\": \"4\",\n            \"Name\": \"BB Gauge Refill\",\n            \"Type\": \"\"\n        },\n        \"5\": {\n            \"ID\": \"5\",\n            \"Name\": \"Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"6\": {\n            \"ID\": \"6\",\n            \"Name\": \"Drop Rate\",\n            \"Type\": \"\"\n        },\n        \"7\": {\n            \"ID\": \"7\",\n            \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"8\": {\n            \"ID\": \"8\",\n            \"Name\": \"Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"9\": {\n            \"ID\": \"9\",\n            \"Name\": \"Parameter Reduction\",\n            \"Type\": \"\"\n        },\n        \"10\": {\n            \"ID\": \"10\",\n            \"Name\": \"Status Cleanse\",\n            \"Type\": \"\"\n        },\n        \"11\": {\n            \"ID\": \"11\",\n            \"Name\": \"Status Infliction\",\n            \"Type\": \"\"\n        },\n        \"12\": {\n            \"ID\": \"12\",\n            \"Name\": \"Revive (Guaranteed)\",\n            \"Type\": \"\"\n        },\n        \"13\": {\n            \"ID\": \"13\",\n            \"Name\": \"Random Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"14\": {\n            \"ID\": \"14\",\n            \"Name\": \"Lifesteal Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"16\": {\n            \"ID\": \"16\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"17\": {\n            \"ID\": \"17\",\n            \"Name\": \"Status Negation\",\n            \"Type\": \"\"\n        },\n        \"18\": {\n            \"ID\": \"18\",\n            \"Name\": \"Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"19\": {\n            \"ID\": \"19\",\n            \"Name\": \"Gradual BB Gauge Boost\",\n            \"Type\": \"\"\n        },\n        \"20\": {\n            \"ID\": \"20\",\n            \"Name\": \"BC Fill on Hit\",\n            \"Type\": \"\"\n        },\n        \"22\": {\n            \"ID\": \"22\",\n            \"Name\": \"Defense Ignore\",\n            \"Type\": \"\"\n        },\n        \"23\": {\n            \"ID\": \"23\",\n            \"Name\": \"Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"24\": {\n            \"ID\": \"24\",\n            \"Name\": \"Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"26\": {\n            \"ID\": \"26\",\n            \"Name\": \"Hit Count Boost\",\n            \"Type\": \"\"\n        },\n        \"27\": {\n            \"ID\": \"27\",\n            \"Name\": \"Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"28\": {\n            \"ID\": \"28\",\n            \"Name\": \"Fixed Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"29\": {\n            \"ID\": \"29\",\n            \"Name\": \"Multi-Element Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"30\": {\n            \"ID\": \"30\",\n            \"Name\": \"Add Elements\",\n            \"Type\": \"\"\n        },\n        \"31\": {\n            \"ID\": \"31\",\n            \"Name\": \"Instant BB Gauge Fill\",\n            \"Type\": \"\"\n        },\n        \"32\": {\n            \"ID\": \"32\",\n            \"Name\": \"Element Shift\",\n            \"Type\": \"\"\n        },\n        \"33\": {\n            \"ID\": \"33\",\n            \"Name\": \"Buff Removal (Chance)\",\n            \"Type\": \"\"\n        },\n        \"34\": {\n            \"ID\": \"34\",\n            \"Name\": \"BB Gauge Reduction (Chance)\",\n            \"Type\": \"\"\n        },\n        \"36\": {\n            \"ID\": \"36\",\n            \"Name\": \"Leader Skill Lock (Chance)\",\n            \"Type\": \"\"\n        },\n        \"37\": {\n            \"ID\": \"37\",\n            \"Name\": \"Summon Unit\",\n            \"Type\": \"\"\n        },\n        \"38\": {\n            \"ID\": \"38\",\n            \"Name\": \"Status Cure\",\n            \"Type\": \"\"\n        },\n        \"39\": {\n            \"ID\": \"39\",\n            \"Name\": \"Elemental Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"40\": {\n            \"ID\": \"40\",\n            \"Name\": \"Status Infliction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"42\": {\n            \"ID\": \"42\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"43\": {\n            \"ID\": \"43\",\n            \"Name\": \"Instant OD Fill\",\n            \"Type\": \"\"\n        },\n        \"44\": {\n            \"ID\": \"44\",\n            \"Name\": \"Damage over Time (Additional Damage)\",\n            \"Type\": \"\"\n        },\n        \"45\": {\n            \"ID\": \"45\",\n            \"Name\": \"BB Atk Boost\",\n            \"Type\": \"\"\n        },\n        \"46\": {\n            \"ID\": \"46\",\n            \"Name\": \"Non-Lethal Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"47\": {\n            \"ID\": \"47\",\n            \"Name\": \"HP Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"48\": {\n            \"ID\": \"48\",\n            \"Name\": \"Piercing Proportional Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"49\": {\n            \"ID\": \"49\",\n            \"Name\": \"Retire\",\n            \"Type\": \"\"\n        },\n        \"50\": {\n            \"ID\": \"50\",\n            \"Name\": \"Damage Counter\",\n            \"Type\": \"\"\n        },\n        \"51\": {\n            \"ID\": \"51\",\n            \"Name\": \"Parameter Reduction Added to Attack\",\n            \"Type\": \"\"\n        },\n        \"52\": {\n            \"ID\": \"52\",\n            \"Name\": \"BC Efficacy\",\n            \"Type\": \"\"\n        },\n        \"53\": {\n            \"ID\": \"53\",\n            \"Name\": \"Status Counter\",\n            \"Type\": \"\"\n        },\n        \"54\": {\n            \"ID\": \"54\",\n            \"Name\": \"Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"55\": {\n            \"ID\": \"55\",\n            \"Name\": \"Elemental Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"56\": {\n            \"ID\": \"56\",\n            \"Name\": \"Chance KO Resistance (Angel Idol)\",\n            \"Type\": \"\"\n        },\n        \"57\": {\n            \"ID\": \"57\",\n            \"Name\": \"BC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"58\": {\n            \"ID\": \"58\",\n            \"Name\": \"Spark Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"59\": {\n            \"ID\": \"59\",\n            \"Name\": \"BB Atk Reduction\",\n            \"Type\": \"\"\n        },\n        \"60\": {\n            \"ID\": \"60\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"61\": {\n            \"ID\": \"61\",\n            \"Name\": \"BB-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"62\": {\n            \"ID\": \"62\",\n            \"Name\": \"Barrier\",\n            \"Type\": \"\"\n        },\n        \"63\": {\n            \"ID\": \"63\",\n            \"Name\": \"Selective Buff Wipe\",\n            \"Type\": \"\"\n        },\n        \"64\": {\n            \"ID\": \"64\",\n            \"Name\": \"Consecutive Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"65\": {\n            \"ID\": \"65\",\n            \"Name\": \"Attack Boost on Status Afflicted Foes\",\n            \"Type\": \"\"\n        },\n        \"66\": {\n            \"ID\": \"66\",\n            \"Name\": \"Revive (Chance)\",\n            \"Type\": \"\"\n        },\n        \"67\": {\n            \"ID\": \"67\",\n            \"Name\": \"BC Fill on Spark\",\n            \"Type\": \"\"\n        },\n        \"68\": {\n            \"ID\": \"68\",\n            \"Name\": \"Damage Reduction when Guarding\",\n            \"Type\": \"\"\n        },\n        \"69\": {\n            \"ID\": \"69\",\n            \"Name\": \"BC Fill on Guard\",\n            \"Type\": \"\"\n        },\n        \"70\": {\n            \"ID\": \"70\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"71\": {\n            \"ID\": \"71\",\n            \"Name\": \"BB Gauge Fill Rate Debuff\",\n            \"Type\": \"\"\n        },\n        \"73\": {\n            \"ID\": \"73\",\n            \"Name\": \"Parameter Reduction Negation\",\n            \"Type\": \"\"\n        },\n        \"75\": {\n            \"ID\": \"75\",\n            \"Name\": \"Element Squad-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"76\": {\n            \"ID\": \"76\",\n            \"Name\": \"Extra Action\",\n            \"Type\": \"\"\n        },\n        \"78\": {\n            \"ID\": \"78\",\n            \"Name\": \"Self Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"79\": {\n            \"ID\": \"79\",\n            \"Name\": \"Player EXP Boost\",\n            \"Type\": \"\"\n        },\n        \"82\": {\n            \"ID\": \"82\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"83\": {\n            \"ID\": \"83\",\n            \"Name\": \"Spark Critical\",\n            \"Type\": \"\"\n        },\n        \"84\": {\n            \"ID\": \"84\",\n            \"Name\": \"OD Gauge Fill Rate\",\n            \"Type\": \"\"\n        },\n        \"85\": {\n            \"ID\": \"85\",\n            \"Name\": \"Heal when Attacked\",\n            \"Type\": \"\"\n        },\n        \"86\": {\n            \"ID\": \"86\",\n            \"Name\": \"HP Absorption\",\n            \"Type\": \"\"\n        },\n        \"87\": {\n            \"ID\": \"87\",\n            \"Name\": \"Heal on Spark\",\n            \"Type\": \"\"\n        },\n        \"88\": {\n            \"ID\": \"88\",\n            \"Name\": \"Self Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"89\": {\n            \"ID\": \"89\",\n            \"Name\": \"Self Parameter Conversion\",\n            \"Type\": \"\"\n        },\n        \"92\": {\n            \"ID\": \"92\",\n            \"Name\": \"Self Max HP Boost\",\n            \"Type\": \"\"\n        },\n        \"93\": {\n            \"ID\": \"93\",\n            \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"94\": {\n            \"ID\": \"94\",\n            \"Name\": \"Normal Attacks Hit All Foes\",\n            \"Type\": \"\"\n        },\n        \"95\": {\n            \"ID\": \"95\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"96\": {\n            \"ID\": \"96\",\n            \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n            \"Type\": \"\"\n        },\n        \"97\": {\n            \"ID\": \"97\",\n            \"Name\": \"Element Target Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"113\": {\n            \"ID\": \"113\",\n            \"Name\": \"Gradual OD Fill\",\n            \"Type\": \"\"\n        },\n        \"119\": {\n            \"ID\": \"119\",\n            \"Name\": \"Gradual BC Drain\",\n            \"Type\": \"\"\n        },\n        \"123\": {\n            \"ID\": \"123\",\n            \"Name\": \"OD Gauge Reduction\",\n            \"Type\": \"\"\n        },\n        \"126\": {\n            \"ID\": \"126\",\n            \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n            \"Type\": \"\"\n        },\n        \"127\": {\n            \"ID\": \"127\",\n            \"Name\": \"Lock On\",\n            \"Type\": \"\"\n        },\n        \"130\": {\n            \"ID\": \"130\",\n            \"Name\": \"Parameter Reduction Counter\",\n            \"Type\": \"\"\n        },\n        \"131\": {\n            \"ID\": \"131\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"132\": {\n            \"ID\": \"132\",\n            \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n            \"Type\": \"\"\n        },\n        \"901\": {\n            \"ID\": \"901\",\n            \"Name\": \"Raid Heal (on Map)\",\n            \"Type\": \"\"\n        },\n        \"902\": {\n            \"ID\": \"902\",\n            \"Name\": \"Raid Parameter Boost\",\n            \"Type\": \"\"\n        },\n        \"903\": {\n            \"ID\": \"903\",\n            \"Name\": \"Raid Boss Reveal\",\n            \"Type\": \"\"\n        },\n        \"905\": {\n            \"ID\": \"905\",\n            \"Name\": \"Raid Teleport\",\n            \"Type\": \"\"\n        },\n        \"906\": {\n            \"ID\": \"906\",\n            \"Name\": \"Raid Flee\",\n            \"Type\": \"\"\n        },\n        \"907\": {\n            \"ID\": \"907\",\n            \"Name\": \"Raid Damage Reduction\",\n            \"Type\": \"\"\n        },\n        \"908\": {\n            \"ID\": \"908\",\n            \"Name\": \"Raid Item Drop Rate Boost\",\n            \"Type\": \"\"\n        },\n        \"10000\": {\n            \"ID\": \"10000\",\n            \"Name\": \"Taunt\",\n            \"Type\": \"\"\n        },\n        \"10001\": {\n            \"ID\": \"10001\",\n            \"Name\": \"Stealth\",\n            \"Type\": \"\"\n        },\n        \"10002\": {\n            \"ID\": \"10002\",\n            \"Name\": \"Shield (old)\",\n            \"Type\": \"\"\n        },\n        \"10003\": {\n            \"ID\": \"10003\",\n            \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n            \"Type\": \"\"\n        },\n        \"10004\": {\n            \"ID\": \"10004\",\n            \"Name\": \"Damage Immunity\",\n            \"Type\": \"\"\n        },\n        \"10005\": {\n            \"ID\": \"10005\",\n            \"Name\": \"Turn Skip (short duration)\",\n            \"Type\": \"\"\n        },\n        \"10006\": {\n            \"ID\": \"10006\",\n            \"Name\": \"Turn Skip (long duration)\",\n            \"Type\": \"\"\n        },\n        \"10007\": {\n            \"ID\": \"10007\",\n            \"Name\": \"Evasion\",\n            \"Type\": \"\"\n        },\n        \"10009\": {\n            \"ID\": \"10009\",\n            \"Name\": \"\",\n            \"Type\": \"\"\n        },\n        \"10012\": {\n            \"ID\": \"10012\",\n            \"Name\": \"OD Drain\",\n            \"Type\": \"\"\n        },\n        \"10015\": {\n            \"ID\": \"10015\",\n            \"Name\": \"Elemental Spark Boost\",\n            \"Type\": \"\"\n        },\n        \"10016\": {\n            \"ID\": \"10016\",\n            \"Name\": \"Element Critical Damage Boost\",\n            \"Type\": \"\"\n        },\n        \"10017\": {\n            \"ID\": \"10017\",\n            \"Name\": \"Elemental Shield\",\n            \"Type\": \"\"\n        },\n        \"10018\": {\n            \"ID\": \"10018\",\n            \"Name\": \"Max HP Reduction\",\n            \"Type\": \"\"\n        },\n        \"10019\": {\n            \"ID\": \"10019\",\n            \"Name\": \"Effect Purge\",\n            \"Type\": \"\"\n        },\n        \"10020\": {\n            \"ID\": \"10020\",\n            \"Name\": \"Piercing Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"10021\": {\n            \"ID\": \"10021\",\n            \"Name\": \"Active Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10022\": {\n            \"ID\": \"10022\",\n            \"Name\": \"Passive Healing Reduction\",\n            \"Type\": \"\"\n        },\n        \"10023\": {\n            \"ID\": \"10023\",\n            \"Name\": \"HC Efficacy Reduction\",\n            \"Type\": \"\"\n        },\n        \"10025\": {\n            \"ID\": \"10025\",\n            \"Name\": \"KO Resistance Negation\",\n            \"Type\": \"\"\n        },\n        \"10026\": {\n            \"ID\": \"10026\",\n            \"Name\": \"Doom\",\n            \"Type\": \"\"\n        },\n        \"11000\": {\n            \"ID\": \"11000\",\n            \"Name\": \"Negative HP-Scaled Damage\",\n            \"Type\": \"Attack\"\n        },\n        \"11001\": {\n            \"ID\": \"11001\",\n            \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n            \"Type\": \"\"\n        },\n        \"11002\": {\n            \"ID\": \"11002\",\n            \"Name\": \"HP Limit Break, Convert to HP\",\n            \"Type\": \"\"\n        },\n        \"11003\": {\n            \"ID\": \"11003\",\n            \"Name\": \"Effect Negation\",\n            \"Type\": \"\"\n        },\n        \"70001\": {\n            \"ID\": \"70001\",\n            \"Name\": \"Mana Bubble Shield\",\n            \"Type\": \"\"\n        },\n        \"70002\": {\n            \"ID\": \"70002\",\n            \"Name\": \"Recast\",\n            \"Type\": \"\"\n        },\n        \"2-5\": {\n            \"ID\": \"2-5\",\n            \"Name\": \"Burst Heal and DEF/REC Boost\",\n            \"Type\": \"\"\n        }\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given proc ID.\n     * @param id Proc ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForProc(id, metadata = PROC_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Determine if a given proc ID's type is an attack.\n     * @param id Proc ID to check.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n     */\n    function isAttackingProcId(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n    }\n\n    /**\n     * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n     * @param damageFrames Damage frames that each have their own proc ID.\n     * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Damage frames entry whose frames are based on the input damage frames.\n     */\n    function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n        // relevant frames are all effects for healing or attacking\n        const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n        const relevantFrames = inputFrames.filter(frame => {\n            const procId = getEffectId(frame);\n            return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n        });\n        const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n            const keepFirstFrame = index === 0;\n            const numFrames = frameEntry['frame times'].length;\n            const damageDistribution = frameEntry['hit dmg% distribution'];\n            const frameTimes = frameEntry['frame times'];\n            for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n                acc.push({\n                    damage: damageDistribution[frameIndex],\n                    time: frameTimes[frameIndex],\n                });\n            }\n            return acc;\n        }, []);\n        const resultDamageFramesEntry = {\n            'effect delay time(ms)/frame': effectDelay,\n            'frame times': [],\n            'hit dmg% distribution': [],\n            'hit dmg% distribution (total)': 0,\n            hits: 0,\n        };\n        unifiedFrames.sort((a, b) => a.time - b.time)\n            .forEach(({ time, damage }) => {\n            resultDamageFramesEntry['frame times'].push(time);\n            resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n            resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n        });\n        resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n        return resultDamageFramesEntry;\n    }\n\n    var index = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLevelEntryForBurst: getLevelEntryForBurst,\n        getEffectsForBurst: getEffectsForBurst,\n        getExtraAttackDamageFramesEntry: getExtraAttackDamageFramesEntry\n    });\n\n    /**\n     * @description Get the associated metadata entry for a given passive ID.\n     * @param id Passive ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    /**\n     * @description Get the associated name for a given proc ID.\n     * @param id Proc ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n     * @returns Name of the proc ID if it exists, empty string otherwise.\n     */\n    function getNameForProc(id, metadata) {\n        const metadataEntry = getMetadataForProc(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Get the associated name for a given passive ID.\n     * @param id Passive ID to get the name of.\n     * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n     * @returns Name of the passive ID if it exists, empty string otherwise.\n     */\n    function getNameForPassive(id, metadata) {\n        const metadataEntry = getMetadataForPassive(id, metadata);\n        return (!!metadataEntry && metadataEntry.Name) || '';\n    }\n\n    /**\n     * @description Determine if a given effect object is a proc effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a proc effect based on its properties.\n     */\n    function isProcEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n    }\n\n    /**\n     * @description Determine if a given effect object is a passive effect based on existing properties.\n     * Do note that it does not check the validity of each property, only the existence.\n     * @param effect Object to check.\n     * @returns Whether the given effect object is considered a passive effect based on its properties.\n     */\n    function isPassiveEffect(effect) {\n        return !!effect &&\n            typeof effect === 'object' &&\n            (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n    }\n\n    var Ailment;\n    (function (Ailment) {\n        Ailment[\"Poison\"] = \"poison\";\n        Ailment[\"Weak\"] = \"weak\";\n        Ailment[\"Sick\"] = \"sick\";\n        Ailment[\"Injury\"] = \"injury\";\n        Ailment[\"Curse\"] = \"curse\";\n        Ailment[\"Paralysis\"] = \"paralysis\";\n        Ailment[\"AttackReduction\"] = \"atk down\";\n        Ailment[\"DefenseReduction\"] = \"def down\";\n        Ailment[\"RecoveryReduction\"] = \"rec down\";\n        Ailment[\"Unknown\"] = \"unknown\";\n    })(Ailment || (Ailment = {}));\n    var ArenaCondition;\n    (function (ArenaCondition) {\n        ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n        ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n        ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n        ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n        ArenaCondition[\"hp_min\"] = \"hp_min\";\n        ArenaCondition[\"hp_max\"] = \"hp_max\";\n        ArenaCondition[\"atk_max\"] = \"atk_max\";\n        ArenaCondition[\"random\"] = \"random\";\n    })(ArenaCondition || (ArenaCondition = {}));\n    var MoveType;\n    (function (MoveType) {\n        MoveType[\"Moving\"] = \"1\";\n        MoveType[\"Teleporting\"] = \"2\";\n        MoveType[\"NonMoving\"] = \"3\";\n    })(MoveType || (MoveType = {}));\n    var TargetArea;\n    (function (TargetArea) {\n        TargetArea[\"Aoe\"] = \"aoe\";\n        TargetArea[\"Single\"] = \"single\";\n        TargetArea[\"Random\"] = \"random\";\n    })(TargetArea || (TargetArea = {}));\n    var TargetAreaShorthand;\n    (function (TargetAreaShorthand) {\n        TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n        TargetAreaShorthand[\"Single\"] = \"ST\";\n        TargetAreaShorthand[\"Random\"] = \"RT\";\n    })(TargetAreaShorthand || (TargetAreaShorthand = {}));\n    var TargetType;\n    (function (TargetType) {\n        TargetType[\"Self\"] = \"self\";\n        TargetType[\"Party\"] = \"party\";\n        TargetType[\"Enemy\"] = \"enemy\";\n    })(TargetType || (TargetType = {}));\n    var SpPassiveType;\n    (function (SpPassiveType) {\n        SpPassiveType[\"AddPassive\"] = \"passive\";\n        SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n        SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n        SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n        SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n    })(SpPassiveType || (SpPassiveType = {}));\n    var SphereTypeName;\n    (function (SphereTypeName) {\n        SphereTypeName[\"None\"] = \"None\";\n        SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n        SphereTypeName[\"Critical\"] = \"Critical\";\n        SphereTypeName[\"Drop\"] = \"Drop\";\n        SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n        SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n        SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n        SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n        SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n        SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n        SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n        SphereTypeName[\"Spark\"] = \"Spark\";\n        SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n        SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n        SphereTypeName[\"Special\"] = \"Special\";\n    })(SphereTypeName || (SphereTypeName = {}));\n    var SphereTypeId;\n    (function (SphereTypeId) {\n        SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n        SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n        SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n        SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n        SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n        SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n        SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n        SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n        SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n        SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n        SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n        SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n        SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n        SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n        SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n    })(SphereTypeId || (SphereTypeId = {}));\n    var SpCategoryName;\n    (function (SpCategoryName) {\n        SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n        SpCategoryName[\"Spark\"] = \"Spark\";\n        SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n        SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n        SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n        SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n        SpCategoryName[\"Drops\"] = \"Drops\";\n        SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n        SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n        SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n        SpCategoryName[\"Special\"] = \"Special\";\n        SpCategoryName[\"Unknown\"] = \"Unknown\";\n    })(SpCategoryName || (SpCategoryName = {}));\n    var SpCategoryId;\n    (function (SpCategoryId) {\n        SpCategoryId[\"Parameter Boost\"] = \"1\";\n        SpCategoryId[\"Spark\"] = \"2\";\n        SpCategoryId[\"Critical Hits\"] = \"3\";\n        SpCategoryId[\"Attack Boost\"] = \"4\";\n        SpCategoryId[\"BB Gauge\"] = \"5\";\n        SpCategoryId[\"HP Recovery\"] = \"6\";\n        SpCategoryId[\"Drops\"] = \"7\";\n        SpCategoryId[\"Ailment Resistance\"] = \"8\";\n        SpCategoryId[\"Ailment Infliction\"] = \"9\";\n        SpCategoryId[\"Damage Reduction\"] = \"10\";\n        SpCategoryId[\"Special\"] = \"11\";\n    })(SpCategoryId || (SpCategoryId = {}));\n    var UnitAnimationKey;\n    (function (UnitAnimationKey) {\n        UnitAnimationKey[\"Attack\"] = \"attack\";\n        UnitAnimationKey[\"Idle\"] = \"idle\";\n        UnitAnimationKey[\"Move\"] = \"move\";\n    })(UnitAnimationKey || (UnitAnimationKey = {}));\n    var UnitElement;\n    (function (UnitElement) {\n        UnitElement[\"Fire\"] = \"fire\";\n        UnitElement[\"Water\"] = \"water\";\n        UnitElement[\"Earth\"] = \"earth\";\n        UnitElement[\"Thunder\"] = \"thunder\";\n        UnitElement[\"Light\"] = \"light\";\n        UnitElement[\"Dark\"] = \"dark\";\n    })(UnitElement || (UnitElement = {}));\n    var UnitGender;\n    (function (UnitGender) {\n        UnitGender[\"Male\"] = \"male\";\n        UnitGender[\"Female\"] = \"female\";\n        UnitGender[\"Other\"] = \"other\";\n    })(UnitGender || (UnitGender = {}));\n    var UnitGettingType;\n    (function (UnitGettingType) {\n        UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n        UnitGettingType[\"Farmable\"] = \"farmable\";\n        UnitGettingType[\"RareSummon\"] = \"rare summon\";\n        UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n    })(UnitGettingType || (UnitGettingType = {}));\n    var UnitKind;\n    (function (UnitKind) {\n        UnitKind[\"Normal\"] = \"normal\";\n        UnitKind[\"Evolution\"] = \"evo\";\n        UnitKind[\"Enhancing\"] = \"enhancing\";\n        UnitKind[\"Sale\"] = \"sale\";\n    })(UnitKind || (UnitKind = {}));\n    var UnitType;\n    (function (UnitType) {\n        UnitType[\"Lord\"] = \"lord\";\n        UnitType[\"Anima\"] = \"anima\";\n        UnitType[\"Breaker\"] = \"breaker\";\n        UnitType[\"Guardian\"] = \"guardian\";\n        UnitType[\"Oracle\"] = \"oracle\";\n        UnitType[\"Rex\"] = \"rex\";\n    })(UnitType || (UnitType = {}));\n    var ItemType;\n    (function (ItemType) {\n        ItemType[\"Consumable\"] = \"consumable\";\n        ItemType[\"Material\"] = \"material\";\n        ItemType[\"Sphere\"] = \"sphere\";\n        ItemType[\"EvolutionMaterial\"] = \"evomat\";\n        ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n        ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n    })(ItemType || (ItemType = {}));\n    var MimicUnitIds;\n    (function (MimicUnitIds) {\n        MimicUnitIds[\"Mimic\"] = \"60142\";\n        MimicUnitIds[\"BatMimic\"] = \"60143\";\n        MimicUnitIds[\"DragonMimic\"] = \"60144\";\n        MimicUnitIds[\"MetalMimic\"] = \"60224\";\n    })(MimicUnitIds || (MimicUnitIds = {}));\n    /**\n     * @description Known values for the monster groups used in {@link IMimicInfo}.\n     */\n    const MimicMonsterGroupMapping = {\n        '1000': MimicUnitIds.Mimic,\n        '1100': MimicUnitIds.BatMimic,\n        '1101': MimicUnitIds.BatMimic,\n        '1200': MimicUnitIds.DragonMimic,\n        '1300': MimicUnitIds.MetalMimic,\n    };\n\n    var datamineTypes = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get Ailment () { return Ailment; },\n        get ArenaCondition () { return ArenaCondition; },\n        get MoveType () { return MoveType; },\n        get TargetArea () { return TargetArea; },\n        get TargetAreaShorthand () { return TargetAreaShorthand; },\n        get TargetType () { return TargetType; },\n        get SpPassiveType () { return SpPassiveType; },\n        get SphereTypeName () { return SphereTypeName; },\n        get SphereTypeId () { return SphereTypeId; },\n        get SpCategoryName () { return SpCategoryName; },\n        get SpCategoryId () { return SpCategoryId; },\n        get UnitAnimationKey () { return UnitAnimationKey; },\n        get UnitElement () { return UnitElement; },\n        get UnitGender () { return UnitGender; },\n        get UnitGettingType () { return UnitGettingType; },\n        get UnitKind () { return UnitKind; },\n        get UnitType () { return UnitType; },\n        get ItemType () { return ItemType; },\n        get MimicUnitIds () { return MimicUnitIds; },\n        MimicMonsterGroupMapping: MimicMonsterGroupMapping\n    });\n\n    /**\n     * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n     * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n     * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n     * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n     */\n    function combineEffectsAndDamageFrames(effects, damageFrames) {\n        let combinedEntries = [];\n        if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n            combinedEntries = effects.map((effect, i) => {\n                const correspondingFrameEntry = damageFrames[i];\n                return {\n                    delay: effect['effect delay time(ms)/frame'],\n                    effect,\n                    frames: correspondingFrameEntry,\n                    id: `${effect['proc id'] || effect['unknown proc id']}`,\n                    targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                    targetType: effect['target type'],\n                };\n            });\n        }\n        return combinedEntries;\n    }\n\n    /**\n     * @description Get the name of a given object.\n     * @param effect Object to get the name from.\n     * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n     * @returns Name of the input effect if it exists; empty string otherwise.\n     */\n    function getEffectName(effect, metadata = {}) {\n        let resultName = '';\n        const effectId = getEffectId(effect);\n        if (isPassiveEffect(effect)) {\n            resultName = getNameForPassive(effectId, metadata && metadata.passive);\n        }\n        else if (isProcEffect(effect)) {\n            resultName = getNameForProc(effectId, metadata && metadata.proc);\n        }\n        return resultName;\n    }\n\n    /**\n     * @description Provides info at a glance regarding a buff's source and how it stacks.\n     */\n    var BuffStackType;\n    (function (BuffStackType) {\n        /**\n         * @description The buff is activated via some skill and lasts for a number of turns.\n         * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n         * from different levels. Two possible levels of sources are:\n         * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n         * 2. Ultimate Brave Burst or Dual Brave Burst\n         */\n        BuffStackType[\"Active\"] = \"active\";\n        /**\n         * @description The buff is always active provided that the source is not nullified.\n         * Most passive buffs can stack with themselves.\n         */\n        BuffStackType[\"Passive\"] = \"passive\";\n        /**\n         * @description The buff is applied for a number of turns once a certain condition is met.\n         * Buffs of the same type are not able to stack.\n         */\n        BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n        /**\n         * @description Only one instance of the buff can be active at a time and can last indefinitely.\n         * A couple examples of this are Barrier and Max HP Boost.\n         */\n        BuffStackType[\"Singleton\"] = \"singleton\";\n        /**\n         * @description The buff's effects immediately apply to the target(s). This differs from singleton\n         * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n         * in the HP bar filling by the sum of those burst heals).\n         */\n        BuffStackType[\"Burst\"] = \"burst\";\n        /**\n         * @description A specific subset of `Burst` type buffs that deal damage to the target.\n         */\n        BuffStackType[\"Attack\"] = \"attack\";\n        /**\n         * @description Only for buffs that cannot be processed by the library yet.\n         */\n        BuffStackType[\"Unknown\"] = \"unknown\";\n    })(BuffStackType || (BuffStackType = {}));\n    var BuffSource;\n    (function (BuffSource) {\n        BuffSource[\"BraveBurst\"] = \"bb\";\n        BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n        BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n        BuffSource[\"DualBraveBurst\"] = \"dbb\";\n        BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n        BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n        BuffSource[\"SpEnhancement\"] = \"sp\";\n        BuffSource[\"Item\"] = \"item\";\n        BuffSource[\"LeaderSkill\"] = \"ls\";\n        BuffSource[\"ExtraSkill\"] = \"es\";\n        /**\n         * @description Buffs that result of having a number of OE+ units in the squad.\n         */\n        BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n        /**\n         * @description Buffs based on a units type. See {@link UnitType}.\n         */\n        BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n        /**\n         * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n         * as well as ambient turn reductions present in some late-game quests.\n         */\n        BuffSource[\"Quest\"] = \"quest\";\n    })(BuffSource || (BuffSource = {}));\n    /**\n     * @description Extra element values that can be used in addition to {@link UnitElement}.\n     */\n    var BuffConditionElement;\n    (function (BuffConditionElement) {\n        BuffConditionElement[\"Unknown\"] = \"unknown\";\n        BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n        BuffConditionElement[\"All\"] = \"all\";\n    })(BuffConditionElement || (BuffConditionElement = {}));\n    /**\n     * @description Stats on a unit that a buff can affect.\n     */\n    var UnitStat;\n    (function (UnitStat) {\n        UnitStat[\"hp\"] = \"hp\";\n        UnitStat[\"atk\"] = \"atk\";\n        UnitStat[\"def\"] = \"def\";\n        UnitStat[\"rec\"] = \"rec\";\n        UnitStat[\"crit\"] = \"crit\";\n        UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n        UnitStat[\"bbGauge\"] = \"bbGauge\";\n        UnitStat[\"odGauge\"] = \"odGauge\";\n        UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n        UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n        UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n        UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n        UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n        UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n        UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n        UnitStat[\"bcCostReduction\"] = \"bcCostReduction\";\n        UnitStat[\"bbGaugeConsumptionReduction\"] = \"bbGaugeConsumptionReduction\";\n        UnitStat[\"ailmentAttackBoost\"] = \"ailmentAttackBoost\";\n        UnitStat[\"poisonResist\"] = \"poisonResist\";\n        UnitStat[\"weakResist\"] = \"weakResist\";\n        UnitStat[\"sickResist\"] = \"sickResist\";\n        UnitStat[\"injuryResist\"] = \"injuryResist\";\n        UnitStat[\"curseResist\"] = \"curseResist\";\n        UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n        UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n        UnitStat[\"weakInflict\"] = \"weakInflict\";\n        UnitStat[\"sickInflict\"] = \"sickInflict\";\n        UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n        UnitStat[\"curseInflict\"] = \"curseInflict\";\n        UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n        UnitStat[\"poisonCounter\"] = \"poisonCounter\";\n        UnitStat[\"weakCounter\"] = \"weakCounter\";\n        UnitStat[\"sickCounter\"] = \"sickCounter\";\n        UnitStat[\"injuryCounter\"] = \"injuryCounter\";\n        UnitStat[\"curseCounter\"] = \"curseCounter\";\n        UnitStat[\"paralysisCounter\"] = \"paralysisCounter\";\n        UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n        UnitStat[\"defDownResist\"] = \"defDownResist\";\n        UnitStat[\"recDownResist\"] = \"recDownResist\";\n        UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n        UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n        UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n        UnitStat[\"atkDownCounter\"] = \"atkDownCounter\";\n        UnitStat[\"defDownCounter\"] = \"defDownCounter\";\n        UnitStat[\"recDownCounter\"] = \"recDownCounter\";\n        UnitStat[\"mitigation\"] = \"mitigation\";\n        UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n        UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n        UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n        UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n        UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n        UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n        UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n        UnitStat[\"guardMitigation\"] = \"guardMitigation\";\n        UnitStat[\"barrier\"] = \"barrier\";\n        UnitStat[\"fireElementalDamage\"] = \"fireElementalDamage\";\n        UnitStat[\"waterElementalDamage\"] = \"waterElementalDamage\";\n        UnitStat[\"earthElementalDamage\"] = \"earthElementalDamage\";\n        UnitStat[\"thunderElementalDamage\"] = \"thunderElementalDamage\";\n        UnitStat[\"lightElementalDamage\"] = \"lightElementalDamage\";\n        UnitStat[\"darkElementalDamage\"] = \"darkElementalDamage\";\n        UnitStat[\"elementalWeaknessDamageMitigation\"] = \"elementalWeaknessDamageMitigation\";\n        UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n        UnitStat[\"koResistance\"] = \"koResistance\";\n        UnitStat[\"revive\"] = \"revive\";\n        UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n        UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n        UnitStat[\"criticalDamageMitigation\"] = \"criticalDamageMitigation\";\n        UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n        UnitStat[\"sparkDamageMitigation\"] = \"sparkDamageMitigation\";\n        UnitStat[\"bbAtk\"] = \"bbAtk\";\n        UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n        UnitStat[\"damageReflect\"] = \"damageReflect\";\n        UnitStat[\"targetingModification\"] = \"targetingModification\";\n        UnitStat[\"elementModification\"] = \"elementModification\";\n        UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n        UnitStat[\"extraAction\"] = \"extraAction\";\n        UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n        UnitStat[\"effectOccurrenceShift\"] = \"effectOccurrenceShift\";\n        UnitStat[\"expModification\"] = \"expModification\";\n    })(UnitStat || (UnitStat = {}));\n    var IconId;\n    (function (IconId) {\n        IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n        IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n        IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n        IconId[\"CONDITIONALBUFF_HPTHRESH\"] = \"CONDITIONALBUFF_HPTHRESH\";\n        IconId[\"CONDITIONALBUFF_DAMAGETAKENTHRESH\"] = \"CONDITIONALBUFF_DAMAGETAKENTHRESH\";\n        IconId[\"CONDITIONALBUFF_DAMAGEDEALTTHRESH\"] = \"CONDITIONALBUFF_DAMAGEDEALTTHRESH\";\n        IconId[\"CONDITIONALBUFF_BCRECEIVEDTHRESH\"] = \"CONDITIONALBUFF_BCRECEIVEDTHRESH\";\n        IconId[\"BUFF_ADDTO_BB\"] = \"BUFF_ADDTO_BB\";\n        IconId[\"BUFF_ADDTO_SBB\"] = \"BUFF_ADDTO_SBB\";\n        IconId[\"BUFF_ADDTO_UBB\"] = \"BUFF_ADDTO_UBB\";\n        IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n        IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n        IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n        IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n        IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n        IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n        IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n        IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n        IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n        IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n        IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n        IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n        IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n        IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n        IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n        IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n        IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n        IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n        IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n        IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n        IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n        IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n        IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n        IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n        IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n        IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n        IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n        IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n        IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n        IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n        IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n        IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n        IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n        IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n        IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n        IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n        IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n        IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n        IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n        IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n        IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n        IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n        IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n        IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n        IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n        IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n        IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n        IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n        IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n        IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n        IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n        IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n        IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n        IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n        IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n        IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n        IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n        IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n        IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n        IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n        IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n        IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n        IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n        IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n        IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n        IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n        IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n        IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n        IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n        IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n        IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n        IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n        IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n        IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n        IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n        IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n        IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n        IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n        IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n        IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n        IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n        IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n        IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n        IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n        IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n        IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n        IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n        IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n        IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n        IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n        IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n        IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n        IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n        IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n        IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n        IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n        IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n        IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n        IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n        IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n        IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n        IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n        IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n        IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n        IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n        IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n        IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n        IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n        IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n        IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n        IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n        IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n        IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n        IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n        IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n        IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n        IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n        IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n        IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n        IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n        IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n        IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n        IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n        IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n        IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n        IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n        IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n        IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n        IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n        IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n        IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n        IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n        IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n        IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n        IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n        IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n        IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n        IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n        IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n        IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n        IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n        IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n        IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n        IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n        IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n        IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n        IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n        IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n        IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n        IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n        IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n        IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n        IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n        IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n        IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n        IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n        IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n        IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n        IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n        IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n        IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n        IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n        IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n        IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n        IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n        IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n        IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n        IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n        IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n        IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n        IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n        IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n        IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n        IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n        IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n        IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n        IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n        IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n        IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n        IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n        IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n        IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n        IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n        IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n        IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n        IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n        IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n        IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n        IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n        IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n        IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n        IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n        IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n        IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n        IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n        IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n        IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n        IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n        IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n        IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n        IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n        IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n        IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n        IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n        IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n        IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n        IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n        IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n        IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n        IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n        IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n        IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n        IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n        IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n        IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n        IconId[\"BUFF_HPSCALEDATKUP\"] = \"BUFF_HPSCALEDATKUP\";\n        IconId[\"BUFF_HPSCALEDATKDOWN\"] = \"BUFF_HPSCALEDATKDOWN\";\n        IconId[\"BUFF_HPSCALEDDEFUP\"] = \"BUFF_HPSCALEDDEFUP\";\n        IconId[\"BUFF_HPSCALEDDEFDOWN\"] = \"BUFF_HPSCALEDDEFDOWN\";\n        IconId[\"BUFF_HPSCALEDRECUP\"] = \"BUFF_HPSCALEDRECUP\";\n        IconId[\"BUFF_HPSCALEDRECDOWN\"] = \"BUFF_HPSCALEDRECDOWN\";\n        IconId[\"BUFF_SELFATKUP\"] = \"BUFF_SELFATKUP\";\n        IconId[\"BUFF_ATKDOWNLOCK\"] = \"BUFF_ATKDOWNLOCK\";\n        IconId[\"BUFF_SELFDEFUP\"] = \"BUFF_SELFDEFUP\";\n        IconId[\"BUFF_DEFDOWNLOCK\"] = \"BUFF_DEFDOWNLOCK\";\n        IconId[\"BUFF_SELFRECUP\"] = \"BUFF_SELFRECUP\";\n        IconId[\"BUFF_RECDOWNLOCK\"] = \"BUFF_RECDOWNLOCK\";\n        IconId[\"BUFF_SELFCRTRATEUP\"] = \"BUFF_SELFCRTRATEUP\";\n        IconId[\"BUFF_CRTRATEDOWNLOCK\"] = \"BUFF_CRTRATEDOWNLOCK\";\n        IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n        IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n        IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n        IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n        IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n        IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n        IconId[\"BUFF_RESISTATKDOWN\"] = \"BUFF_RESISTATKDOWN\";\n        IconId[\"BUFF_RESISTDEFDOWN\"] = \"BUFF_RESISTDEFDOWN\";\n        IconId[\"BUFF_RESISTRECDOWN\"] = \"BUFF_RESISTRECDOWN\";\n        IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n        IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n        IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n        IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n        IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n        IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n        IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n        IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n        IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n        IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n        IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n        IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n        IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n        IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n        IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n        IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n        IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n        IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n        IconId[\"BUFF_POISONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n        IconId[\"BUFF_POISIONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n        IconId[\"BUFF_WEAKCOUNTER\"] = \"BUFF_WEAKCOUNTER\";\n        IconId[\"BUFF_SICKCOUNTER\"] = \"BUFF_SICKCOUNTER\";\n        IconId[\"BUFF_INJCONTER\"] = \"BUFF_INJCONTER\";\n        IconId[\"BUFF_CURSECOUNTER\"] = \"BUFF_CURSECOUNTER\";\n        IconId[\"BUFF_PARALYCOUNTER\"] = \"BUFF_PARALYCOUNTER\";\n        IconId[\"BUFF_PROB_ATKREDUC\"] = \"BUFF_PROB_ATKREDUC\";\n        IconId[\"BUFF_PROB_DEFREDUC\"] = \"BUFF_PROB_DEFREDUC\";\n        IconId[\"BUFF_PROB_RECREDUC\"] = \"BUFF_PROB_RECREDUC\";\n        IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n        IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n        // elemental damage reduction buffs\n        IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n        IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n        IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n        IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n        IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n        IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n        IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n        // elemental weakness buffs\n        IconId[\"BUFF_FIREDMGUP\"] = \"BUFF_FIREDMGUP\";\n        IconId[\"BUFF_WATERDMGUP\"] = \"BUFF_WATERDMGUP\";\n        IconId[\"BUFF_WATERMDGUP\"] = \"BUFF_WATERDMGUP\";\n        IconId[\"BUFF_EARTHDMGUP\"] = \"BUFF_EARTHDMGUP\";\n        IconId[\"BUFF_THUNDERDMGUP\"] = \"BUFF_THUNDERDMGUP\";\n        IconId[\"BUFF_LIGHTDMGUP\"] = \"BUFF_LIGHTDMGUP\";\n        IconId[\"BUFF_DARKDMGUP\"] = \"BUFF_DARKDMGUP\";\n        IconId[\"BUFF_ELEMENTDMGUP\"] = \"BUFF_ELEMENTDMGUP\";\n        IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n        IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n        IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n        IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n        IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n        IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n        IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n        IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n        IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n        IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n        IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n        IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n        IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n        IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n        IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n        IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n        IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n        IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n        IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n        IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n        IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n        IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n        IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n        IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n        IconId[\"BUFF_KO\"] = \"BUFF_KO\";\n        IconId[\"BUFF_KOBLOCK\"] = \"BUFF_KOBLOCK\";\n        IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n        IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n        IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n        IconId[\"BUFF_CRTDOWN\"] = \"BUFF_CRTDOWN\";\n        IconId[\"BUFF_ELEMENTDOWN\"] = \"BUFF_ELEMENTDOWN\";\n        IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n        IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n        IconId[\"BUFF_SPARKDMGUP\"] = \"BUFF_SPARKDMGUP\";\n        IconId[\"BUFF_SPARKDMGDOWN\"] = \"BUFF_SPARKDMGDOWN\";\n        IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n        IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n        IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n        IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n        IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n        IconId[\"BUFF_SPARKBBUP\"] = \"BUFF_SPARKBBUP\";\n        IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n        IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n        IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n        IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n        IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n        IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n        IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n        IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n        IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n        IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n        IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n        IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n        IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n        IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n        IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n        IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n        IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n        IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n        IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n        IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n        IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n        IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n        IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n        IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n        IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n        IconId[\"BUFF_ODFILLBOOST\"] = \"BUFF_ODFILLBOOST\";\n        IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n        IconId[\"BUFF_BBATKUP\"] = \"BUFF_BBATKUP\";\n        IconId[\"BUFF_SBBATKUP\"] = \"BUFF_SBBATKUP\";\n        IconId[\"BUFF_UBBATKUP\"] = \"BUFF_UBBATKUP\";\n        IconId[\"BUFF_BBATKDOWN\"] = \"BUFF_BBATKDOWN\";\n        IconId[\"BUFF_SBBATKDOWN\"] = \"BUFF_SBBATKDOWN\";\n        IconId[\"BUFF_UBBATKDOWN\"] = \"BUFF_UBBATKDOWN\";\n        IconId[\"BUFF_BBCOST_REDUCTION\"] = \"BUFF_BBCOST_REDUCTION\";\n        IconId[\"BUFF_GUARDCUT\"] = \"BUFF_GUARDCUT\";\n        IconId[\"BUFF_GUARDBBUP\"] = \"BUFF_GUARDBBUP\";\n        IconId[\"BUFF_FIRESHIELD\"] = \"BUFF_FIRESHIELD\";\n        IconId[\"BUFF_WATERSHIELD\"] = \"BUFF_WATERSHIELD\";\n        IconId[\"BUFF_EARTHSHIELD\"] = \"BUFF_EARTHSHIELD\";\n        IconId[\"BUFF_THUNDERSHIELD\"] = \"BUFF_THUNDERSHIELD\";\n        IconId[\"BUFF_LIGHTSHIELD\"] = \"BUFF_LIGHTSHIELD\";\n        IconId[\"BUFF_DARKSHIELD\"] = \"BUFF_DARKSHIELD\";\n        IconId[\"BUFF_ELEMENTSHIELD\"] = \"BUFF_ELEMENTSHIELD\";\n        IconId[\"BUFF_AILDMGUP\"] = \"BUFF_AILDMGUP\";\n        IconId[\"BUFF_HPTURNSTART\"] = \"BUFF_HPTURNSTART\";\n        IconId[\"BUFF_BCTURNSTART\"] = \"BUFF_BCTURNSTART\";\n        IconId[\"BUFF_PLAYEREXP\"] = \"BUFF_PLAYEREXP\";\n        IconId[\"ATK_ST\"] = \"ATK_ST\";\n        IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n        IconId[\"ATK_RT\"] = \"ATK_RT\";\n        IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n        IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n        IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n        IconId[\"ATK_ST_PIERCING_PROPORTIONAL\"] = \"ATK_ST_PIERCING_PROPORTIONAL\";\n        IconId[\"ATK_AOE_PIERCING_PROPORTIONAL\"] = \"ATK_AOE_PIERCING_PROPORTIONAL\";\n        IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n        IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n        IconId[\"ATK_ST_PIERCING_FIXED\"] = \"ATK_ST_PIERCING_FIXED\";\n        IconId[\"ATK_AOE_PIERCING_FIXED\"] = \"ATK_AOE_PIERCING_FIXED\";\n        IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n        IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n        IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n        IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n        IconId[\"ATK_ST_HPSCALED\"] = \"ATK_ST_HPSCALED\";\n        IconId[\"ATK_AOE_HPSCALED\"] = \"ATK_AOE_HPSCALED\";\n        IconId[\"ATK_ST_BBGAUGESCALED\"] = \"ATK_ST_BBGAUGESCALED\";\n        IconId[\"ATK_AOE_BBGAUGESCALED\"] = \"ATK_AOE_BBGAUGESCALED\";\n        IconId[\"ATK_ST_USAGESCALED\"] = \"ATK_ST_USAGESCALED\";\n        IconId[\"ATK_AOE_USAGESCALED\"] = \"ATK_AOE_USAGESCALED\";\n        IconId[\"ATK_ST_ELEMENTSCALED\"] = \"ATK_ST_ELEMENTSCALED\";\n        IconId[\"ATK_AOE_ELEMENTSCALED\"] = \"ATK_AOE_ELEMENTSCALED\";\n    })(IconId || (IconId = {}));\n    /**\n     * @description Format of these IDs are `<passive|proc|conditional>:<original effect ID>:<stat>`.\n     * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n     * source of a given buff.\n     */\n    var BuffId;\n    (function (BuffId) {\n        BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n        BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n        BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n        BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n        BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n        BuffId[\"passive:1:def\"] = \"passive:1:def\";\n        BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n        BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n        BuffId[\"passive:2:elemental-hp\"] = \"passive:2:elemental-hp\";\n        BuffId[\"passive:2:elemental-atk\"] = \"passive:2:elemental-atk\";\n        BuffId[\"passive:2:elemental-def\"] = \"passive:2:elemental-def\";\n        BuffId[\"passive:2:elemental-rec\"] = \"passive:2:elemental-rec\";\n        BuffId[\"passive:2:elemental-crit\"] = \"passive:2:elemental-crit\";\n        BuffId[\"passive:3:type based-hp\"] = \"passive:3:type based-hp\";\n        BuffId[\"passive:3:type based-atk\"] = \"passive:3:type based-atk\";\n        BuffId[\"passive:3:type based-def\"] = \"passive:3:type based-def\";\n        BuffId[\"passive:3:type based-rec\"] = \"passive:3:type based-rec\";\n        BuffId[\"passive:3:type based-crit\"] = \"passive:3:type based-crit\";\n        BuffId[\"passive:4:resist-poison\"] = \"passive:4:resist-poison\";\n        BuffId[\"passive:4:resist-weak\"] = \"passive:4:resist-weak\";\n        BuffId[\"passive:4:resist-sick\"] = \"passive:4:resist-sick\";\n        BuffId[\"passive:4:resist-injury\"] = \"passive:4:resist-injury\";\n        BuffId[\"passive:4:resist-curse\"] = \"passive:4:resist-curse\";\n        BuffId[\"passive:4:resist-paralysis\"] = \"passive:4:resist-paralysis\";\n        BuffId[\"passive:5:mitigate-fire\"] = \"passive:5:mitigate-fire\";\n        BuffId[\"passive:5:mitigate-water\"] = \"passive:5:mitigate-water\";\n        BuffId[\"passive:5:mitigate-earth\"] = \"passive:5:mitigate-earth\";\n        BuffId[\"passive:5:mitigate-thunder\"] = \"passive:5:mitigate-thunder\";\n        BuffId[\"passive:5:mitigate-light\"] = \"passive:5:mitigate-light\";\n        BuffId[\"passive:5:mitigate-dark\"] = \"passive:5:mitigate-dark\";\n        BuffId[\"passive:5:mitigate-unknown\"] = \"passive:5:mitigate-unknown\";\n        BuffId[\"passive:8:mitigation\"] = \"passive:8:mitigation\";\n        BuffId[\"passive:9:gradual bc fill\"] = \"passive:9:gradual bc fill\";\n        BuffId[\"passive:10:hc efficacy\"] = \"passive:10:hc efficacy\";\n        BuffId[\"passive:11:hp conditional-atk\"] = \"passive:11:hp conditional-atk\";\n        BuffId[\"passive:11:hp conditional-def\"] = \"passive:11:hp conditional-def\";\n        BuffId[\"passive:11:hp conditional-rec\"] = \"passive:11:hp conditional-rec\";\n        BuffId[\"passive:11:hp conditional-crit\"] = \"passive:11:hp conditional-crit\";\n        BuffId[\"passive:12:hp conditional drop boost-bc\"] = \"passive:12:hp conditional drop boost-bc\";\n        BuffId[\"passive:12:hp conditional drop boost-hc\"] = \"passive:12:hp conditional drop boost-hc\";\n        BuffId[\"passive:12:hp conditional drop boost-item\"] = \"passive:12:hp conditional drop boost-item\";\n        BuffId[\"passive:12:hp conditional drop boost-zel\"] = \"passive:12:hp conditional drop boost-zel\";\n        BuffId[\"passive:12:hp conditional drop boost-karma\"] = \"passive:12:hp conditional drop boost-karma\";\n        BuffId[\"passive:13:bc fill on enemy defeat\"] = \"passive:13:bc fill on enemy defeat\";\n        BuffId[\"passive:14:chance mitigation\"] = \"passive:14:chance mitigation\";\n        BuffId[\"passive:15:heal on enemy defeat\"] = \"passive:15:heal on enemy defeat\";\n        BuffId[\"passive:16:heal on win\"] = \"passive:16:heal on win\";\n        BuffId[\"passive:17:hp absorb\"] = \"passive:17:hp absorb\";\n        BuffId[\"passive:19:drop boost-bc\"] = \"passive:19:drop boost-bc\";\n        BuffId[\"passive:19:drop boost-hc\"] = \"passive:19:drop boost-hc\";\n        BuffId[\"passive:19:drop boost-item\"] = \"passive:19:drop boost-item\";\n        BuffId[\"passive:19:drop boost-zel\"] = \"passive:19:drop boost-zel\";\n        BuffId[\"passive:19:drop boost-karma\"] = \"passive:19:drop boost-karma\";\n        BuffId[\"passive:20:chance inflict-poison\"] = \"passive:20:chance inflict-poison\";\n        BuffId[\"passive:20:chance inflict-weak\"] = \"passive:20:chance inflict-weak\";\n        BuffId[\"passive:20:chance inflict-sick\"] = \"passive:20:chance inflict-sick\";\n        BuffId[\"passive:20:chance inflict-injury\"] = \"passive:20:chance inflict-injury\";\n        BuffId[\"passive:20:chance inflict-curse\"] = \"passive:20:chance inflict-curse\";\n        BuffId[\"passive:20:chance inflict-paralysis\"] = \"passive:20:chance inflict-paralysis\";\n        BuffId[\"passive:20:chance inflict-atk down\"] = \"passive:20:chance inflict-atk down\";\n        BuffId[\"passive:20:chance inflict-def down\"] = \"passive:20:chance inflict-def down\";\n        BuffId[\"passive:20:chance inflict-rec down\"] = \"passive:20:chance inflict-rec down\";\n        BuffId[\"passive:20:chance inflict-unknown\"] = \"passive:20:chance inflict-unknown\";\n        BuffId[\"passive:21:first turn-atk\"] = \"passive:21:first turn-atk\";\n        BuffId[\"passive:21:first turn-def\"] = \"passive:21:first turn-def\";\n        BuffId[\"passive:21:first turn-rec\"] = \"passive:21:first turn-rec\";\n        BuffId[\"passive:21:first turn-crit\"] = \"passive:21:first turn-crit\";\n        BuffId[\"passive:23:bc fill on win\"] = \"passive:23:bc fill on win\";\n        BuffId[\"passive:24:heal on hit\"] = \"passive:24:heal on hit\";\n        BuffId[\"passive:25:bc fill on hit\"] = \"passive:25:bc fill on hit\";\n        BuffId[\"passive:26:chance damage reflect\"] = \"passive:26:chance damage reflect\";\n        BuffId[\"passive:27:target chance change\"] = \"passive:27:target chance change\";\n        BuffId[\"passive:28:hp conditional target chance change\"] = \"passive:28:hp conditional target chance change\";\n        BuffId[\"passive:29:chance def ignore\"] = \"passive:29:chance def ignore\";\n        BuffId[\"passive:30:bb gauge conditional-atk\"] = \"passive:30:bb gauge conditional-atk\";\n        BuffId[\"passive:30:bb gauge conditional-def\"] = \"passive:30:bb gauge conditional-def\";\n        BuffId[\"passive:30:bb gauge conditional-rec\"] = \"passive:30:bb gauge conditional-rec\";\n        BuffId[\"passive:30:bb gauge conditional-crit\"] = \"passive:30:bb gauge conditional-crit\";\n        BuffId[\"passive:31:spark-damage\"] = \"passive:31:spark-damage\";\n        BuffId[\"passive:31:spark-bc\"] = \"passive:31:spark-bc\";\n        BuffId[\"passive:31:spark-hc\"] = \"passive:31:spark-hc\";\n        BuffId[\"passive:31:spark-item\"] = \"passive:31:spark-item\";\n        BuffId[\"passive:31:spark-zel\"] = \"passive:31:spark-zel\";\n        BuffId[\"passive:31:spark-karma\"] = \"passive:31:spark-karma\";\n        BuffId[\"passive:32:bc efficacy\"] = \"passive:32:bc efficacy\";\n        BuffId[\"passive:33:gradual heal\"] = \"passive:33:gradual heal\";\n        BuffId[\"passive:34:critical damage\"] = \"passive:34:critical damage\";\n        BuffId[\"passive:35:bc fill on normal attack\"] = \"passive:35:bc fill on normal attack\";\n        BuffId[\"passive:36:extra action\"] = \"passive:36:extra action\";\n        BuffId[\"passive:37:hit count boost\"] = \"passive:37:hit count boost\";\n        BuffId[\"passive:40:converted-atk\"] = \"passive:40:converted-atk\";\n        BuffId[\"passive:40:converted-def\"] = \"passive:40:converted-def\";\n        BuffId[\"passive:40:converted-rec\"] = \"passive:40:converted-rec\";\n        BuffId[\"passive:41:unique element count-hp\"] = \"passive:41:unique element count-hp\";\n        BuffId[\"passive:41:unique element count-atk\"] = \"passive:41:unique element count-atk\";\n        BuffId[\"passive:41:unique element count-def\"] = \"passive:41:unique element count-def\";\n        BuffId[\"passive:41:unique element count-rec\"] = \"passive:41:unique element count-rec\";\n        BuffId[\"passive:41:unique element count-crit\"] = \"passive:41:unique element count-crit\";\n        BuffId[\"passive:42:gender-hp\"] = \"passive:42:gender-hp\";\n        BuffId[\"passive:42:gender-atk\"] = \"passive:42:gender-atk\";\n        BuffId[\"passive:42:gender-def\"] = \"passive:42:gender-def\";\n        BuffId[\"passive:42:gender-rec\"] = \"passive:42:gender-rec\";\n        BuffId[\"passive:42:gender-crit\"] = \"passive:42:gender-crit\";\n        BuffId[\"passive:43:chance damage to one\"] = \"passive:43:chance damage to one\";\n        BuffId[\"passive:44:flat-hp\"] = \"passive:44:flat-hp\";\n        BuffId[\"passive:44:flat-atk\"] = \"passive:44:flat-atk\";\n        BuffId[\"passive:44:flat-def\"] = \"passive:44:flat-def\";\n        BuffId[\"passive:44:flat-rec\"] = \"passive:44:flat-rec\";\n        BuffId[\"passive:44:flat-crit\"] = \"passive:44:flat-crit\";\n        BuffId[\"passive:45:critical damage reduction-base\"] = \"passive:45:critical damage reduction-base\";\n        BuffId[\"passive:45:critical damage reduction-buff\"] = \"passive:45:critical damage reduction-buff\";\n        BuffId[\"passive:46:hp scaled-atk\"] = \"passive:46:hp scaled-atk\";\n        BuffId[\"passive:46:hp scaled-def\"] = \"passive:46:hp scaled-def\";\n        BuffId[\"passive:46:hp scaled-rec\"] = \"passive:46:hp scaled-rec\";\n        BuffId[\"passive:47:bc fill on spark\"] = \"passive:47:bc fill on spark\";\n        BuffId[\"passive:48:bc cost reduction\"] = \"passive:48:bc cost reduction\";\n        BuffId[\"passive:49:bb gauge consumption reduction\"] = \"passive:49:bb gauge consumption reduction\";\n        BuffId[\"passive:50:elemental weakness damage-fire\"] = \"passive:50:elemental weakness damage-fire\";\n        BuffId[\"passive:50:elemental weakness damage-water\"] = \"passive:50:elemental weakness damage-water\";\n        BuffId[\"passive:50:elemental weakness damage-earth\"] = \"passive:50:elemental weakness damage-earth\";\n        BuffId[\"passive:50:elemental weakness damage-thunder\"] = \"passive:50:elemental weakness damage-thunder\";\n        BuffId[\"passive:50:elemental weakness damage-light\"] = \"passive:50:elemental weakness damage-light\";\n        BuffId[\"passive:50:elemental weakness damage-dark\"] = \"passive:50:elemental weakness damage-dark\";\n        BuffId[\"passive:50:elemental weakness damage-unknown\"] = \"passive:50:elemental weakness damage-unknown\";\n        BuffId[\"passive:53:critical damage-base\"] = \"passive:53:critical damage-base\";\n        BuffId[\"passive:53:critical damage-buff\"] = \"passive:53:critical damage-buff\";\n        BuffId[\"passive:53:element damage-base\"] = \"passive:53:element damage-base\";\n        BuffId[\"passive:53:element damage-buff\"] = \"passive:53:element damage-buff\";\n        BuffId[\"passive:53:critical rate-base\"] = \"passive:53:critical rate-base\";\n        BuffId[\"passive:53:critical rate-buff\"] = \"passive:53:critical rate-buff\";\n        BuffId[\"passive:55:hp conditional\"] = \"passive:55:hp conditional\";\n        BuffId[\"passive:58:guard mitigation\"] = \"passive:58:guard mitigation\";\n        BuffId[\"passive:59:bc fill when attacked on guard-percent\"] = \"passive:59:bc fill when attacked on guard-percent\";\n        BuffId[\"passive:59:bc fill when attacked on guard-flat\"] = \"passive:59:bc fill when attacked on guard-flat\";\n        BuffId[\"passive:61:bc fill on guard-percent\"] = \"passive:61:bc fill on guard-percent\";\n        BuffId[\"passive:61:bc fill on guard-flat\"] = \"passive:61:bc fill on guard-flat\";\n        BuffId[\"passive:62:mitigate-fire\"] = \"passive:62:mitigate-fire\";\n        BuffId[\"passive:62:mitigate-water\"] = \"passive:62:mitigate-water\";\n        BuffId[\"passive:62:mitigate-earth\"] = \"passive:62:mitigate-earth\";\n        BuffId[\"passive:62:mitigate-thunder\"] = \"passive:62:mitigate-thunder\";\n        BuffId[\"passive:62:mitigate-light\"] = \"passive:62:mitigate-light\";\n        BuffId[\"passive:62:mitigate-dark\"] = \"passive:62:mitigate-dark\";\n        BuffId[\"passive:62:mitigate-unknown\"] = \"passive:62:mitigate-unknown\";\n        BuffId[\"passive:63:first turn mitigate-fire\"] = \"passive:63:first turn mitigate-fire\";\n        BuffId[\"passive:63:first turn mitigate-water\"] = \"passive:63:first turn mitigate-water\";\n        BuffId[\"passive:63:first turn mitigate-earth\"] = \"passive:63:first turn mitigate-earth\";\n        BuffId[\"passive:63:first turn mitigate-thunder\"] = \"passive:63:first turn mitigate-thunder\";\n        BuffId[\"passive:63:first turn mitigate-light\"] = \"passive:63:first turn mitigate-light\";\n        BuffId[\"passive:63:first turn mitigate-dark\"] = \"passive:63:first turn mitigate-dark\";\n        BuffId[\"passive:63:first turn mitigate-unknown\"] = \"passive:63:first turn mitigate-unknown\";\n        BuffId[\"passive:64:attack boost-bb\"] = \"passive:64:attack boost-bb\";\n        BuffId[\"passive:64:attack boost-sbb\"] = \"passive:64:attack boost-sbb\";\n        BuffId[\"passive:64:attack boost-ubb\"] = \"passive:64:attack boost-ubb\";\n        BuffId[\"passive:65:bc fill on crit\"] = \"passive:65:bc fill on crit\";\n        BuffId[\"passive:66:add effect to skill-bb\"] = \"passive:66:add effect to skill-bb\";\n        BuffId[\"passive:66:add effect to skill-sbb\"] = \"passive:66:add effect to skill-sbb\";\n        BuffId[\"passive:66:add effect to skill-ubb\"] = \"passive:66:add effect to skill-ubb\";\n        BuffId[\"passive:69:chance ko resistance\"] = \"passive:69:chance ko resistance\";\n        BuffId[\"passive:70:od fill rate\"] = \"passive:70:od fill rate\";\n        BuffId[\"passive:71:inflict on hit-poison\"] = \"passive:71:inflict on hit-poison\";\n        BuffId[\"passive:71:inflict on hit-weak\"] = \"passive:71:inflict on hit-weak\";\n        BuffId[\"passive:71:inflict on hit-sick\"] = \"passive:71:inflict on hit-sick\";\n        BuffId[\"passive:71:inflict on hit-injury\"] = \"passive:71:inflict on hit-injury\";\n        BuffId[\"passive:71:inflict on hit-curse\"] = \"passive:71:inflict on hit-curse\";\n        BuffId[\"passive:71:inflict on hit-paralysis\"] = \"passive:71:inflict on hit-paralysis\";\n        BuffId[\"passive:72:effect at turn start-hp\"] = \"passive:72:effect at turn start-hp\";\n        BuffId[\"passive:72:effect at turn start-bc\"] = \"passive:72:effect at turn start-bc\";\n        BuffId[\"passive:73:resist-poison\"] = \"passive:73:resist-poison\";\n        BuffId[\"passive:73:resist-weak\"] = \"passive:73:resist-weak\";\n        BuffId[\"passive:73:resist-sick\"] = \"passive:73:resist-sick\";\n        BuffId[\"passive:73:resist-injury\"] = \"passive:73:resist-injury\";\n        BuffId[\"passive:73:resist-curse\"] = \"passive:73:resist-curse\";\n        BuffId[\"passive:73:resist-paralysis\"] = \"passive:73:resist-paralysis\";\n        BuffId[\"passive:73:resist-atk down\"] = \"passive:73:resist-atk down\";\n        BuffId[\"passive:73:resist-def down\"] = \"passive:73:resist-def down\";\n        BuffId[\"passive:73:resist-rec down\"] = \"passive:73:resist-rec down\";\n        BuffId[\"passive:74:ailment attack boost\"] = \"passive:74:ailment attack boost\";\n        BuffId[\"passive:75:spark vulnerability\"] = \"passive:75:spark vulnerability\";\n        BuffId[\"passive:77:spark damage reduction-base\"] = \"passive:77:spark damage reduction-base\";\n        BuffId[\"passive:77:spark damage reduction-buff\"] = \"passive:77:spark damage reduction-buff\";\n        BuffId[\"passive:78:damage taken conditional\"] = \"passive:78:damage taken conditional\";\n        BuffId[\"passive:79:bc fill after damage taken conditional-flat\"] = \"passive:79:bc fill after damage taken conditional-flat\";\n        BuffId[\"passive:79:bc fill after damage taken conditional-percent\"] = \"passive:79:bc fill after damage taken conditional-percent\";\n        BuffId[\"passive:80:damage dealt conditional\"] = \"passive:80:damage dealt conditional\";\n        BuffId[\"passive:81:bc fill after damage dealt conditional-flat\"] = \"passive:81:bc fill after damage dealt conditional-flat\";\n        BuffId[\"passive:81:bc fill after damage dealt conditional-percent\"] = \"passive:81:bc fill after damage dealt conditional-percent\";\n        BuffId[\"passive:82:bc received conditional\"] = \"passive:82:bc received conditional\";\n        BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n        BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n        BuffId[\"proc:1:attack\"] = \"proc:1:attack\";\n        BuffId[\"proc:2:burst heal\"] = \"proc:2:burst heal\";\n        BuffId[\"proc:3:gradual heal\"] = \"proc:3:gradual heal\";\n        BuffId[\"proc:4:bc fill-flat\"] = \"proc:4:bc fill-flat\";\n        BuffId[\"proc:4:bc fill-percent\"] = \"proc:4:bc fill-percent\";\n        BuffId[\"proc:5:regular or elemental-atk\"] = \"proc:5:regular or elemental-atk\";\n        BuffId[\"proc:5:regular or elemental-def\"] = \"proc:5:regular or elemental-def\";\n        BuffId[\"proc:5:regular or elemental-rec\"] = \"proc:5:regular or elemental-rec\";\n        BuffId[\"proc:5:regular or elemental-crit\"] = \"proc:5:regular or elemental-crit\";\n        BuffId[\"proc:6:drop boost-bc\"] = \"proc:6:drop boost-bc\";\n        BuffId[\"proc:6:drop boost-hc\"] = \"proc:6:drop boost-hc\";\n        BuffId[\"proc:6:drop boost-item\"] = \"proc:6:drop boost-item\";\n        BuffId[\"proc:7:guaranteed ko resistance\"] = \"proc:7:guaranteed ko resistance\";\n        BuffId[\"proc:8:max hp boost-flat\"] = \"proc:8:max hp boost-flat\";\n        BuffId[\"proc:8:max hp boost-percent\"] = \"proc:8:max hp boost-percent\";\n        BuffId[\"proc:9:regular or elemental reduction-atk\"] = \"proc:9:regular or elemental reduction-atk\";\n        BuffId[\"proc:9:regular or elemental reduction-def\"] = \"proc:9:regular or elemental reduction-def\";\n        BuffId[\"proc:9:regular or elemental reduction-rec\"] = \"proc:9:regular or elemental reduction-rec\";\n        BuffId[\"proc:9:regular or elemental reduction-unknown\"] = \"proc:9:regular or elemental reduction-unknown\";\n        BuffId[\"proc:10:cleanse-poison\"] = \"proc:10:cleanse-poison\";\n        BuffId[\"proc:10:cleanse-weak\"] = \"proc:10:cleanse-weak\";\n        BuffId[\"proc:10:cleanse-sick\"] = \"proc:10:cleanse-sick\";\n        BuffId[\"proc:10:cleanse-injury\"] = \"proc:10:cleanse-injury\";\n        BuffId[\"proc:10:cleanse-curse\"] = \"proc:10:cleanse-curse\";\n        BuffId[\"proc:10:cleanse-paralysis\"] = \"proc:10:cleanse-paralysis\";\n        BuffId[\"proc:10:cleanse-atk down\"] = \"proc:10:cleanse-atk down\";\n        BuffId[\"proc:10:cleanse-def down\"] = \"proc:10:cleanse-def down\";\n        BuffId[\"proc:10:cleanse-rec down\"] = \"proc:10:cleanse-rec down\";\n        BuffId[\"proc:10:cleanse-unknown\"] = \"proc:10:cleanse-unknown\";\n        BuffId[\"proc:11:chance inflict-poison\"] = \"proc:11:chance inflict-poison\";\n        BuffId[\"proc:11:chance inflict-weak\"] = \"proc:11:chance inflict-weak\";\n        BuffId[\"proc:11:chance inflict-sick\"] = \"proc:11:chance inflict-sick\";\n        BuffId[\"proc:11:chance inflict-injury\"] = \"proc:11:chance inflict-injury\";\n        BuffId[\"proc:11:chance inflict-curse\"] = \"proc:11:chance inflict-curse\";\n        BuffId[\"proc:11:chance inflict-paralysis\"] = \"proc:11:chance inflict-paralysis\";\n        BuffId[\"proc:11:chance inflict-atk down\"] = \"proc:11:chance inflict-atk down\";\n        BuffId[\"proc:11:chance inflict-def down\"] = \"proc:11:chance inflict-def down\";\n        BuffId[\"proc:11:chance inflict-rec down\"] = \"proc:11:chance inflict-rec down\";\n        BuffId[\"proc:11:chance inflict-unknown\"] = \"proc:11:chance inflict-unknown\";\n        BuffId[\"proc:12:guaranteed revive\"] = \"proc:12:guaranteed revive\";\n        BuffId[\"proc:13:random attack\"] = \"proc:13:random attack\";\n        BuffId[\"proc:14:hp absorb attack\"] = \"proc:14:hp absorb attack\";\n        BuffId[\"proc:16:mitigate-fire\"] = \"proc:16:mitigate-fire\";\n        BuffId[\"proc:16:mitigate-water\"] = \"proc:16:mitigate-water\";\n        BuffId[\"proc:16:mitigate-earth\"] = \"proc:16:mitigate-earth\";\n        BuffId[\"proc:16:mitigate-thunder\"] = \"proc:16:mitigate-thunder\";\n        BuffId[\"proc:16:mitigate-light\"] = \"proc:16:mitigate-light\";\n        BuffId[\"proc:16:mitigate-dark\"] = \"proc:16:mitigate-dark\";\n        BuffId[\"proc:16:mitigate-all\"] = \"proc:16:mitigate-all\";\n        BuffId[\"proc:16:mitigate-unknown\"] = \"proc:16:mitigate-unknown\";\n        BuffId[\"proc:17:resist-poison\"] = \"proc:17:resist-poison\";\n        BuffId[\"proc:17:resist-weak\"] = \"proc:17:resist-weak\";\n        BuffId[\"proc:17:resist-sick\"] = \"proc:17:resist-sick\";\n        BuffId[\"proc:17:resist-injury\"] = \"proc:17:resist-injury\";\n        BuffId[\"proc:17:resist-curse\"] = \"proc:17:resist-curse\";\n        BuffId[\"proc:17:resist-paralysis\"] = \"proc:17:resist-paralysis\";\n        BuffId[\"proc:18:mitigation\"] = \"proc:18:mitigation\";\n        BuffId[\"proc:19:gradual bc fill\"] = \"proc:19:gradual bc fill\";\n        BuffId[\"proc:20:bc fill on hit\"] = \"proc:20:bc fill on hit\";\n        BuffId[\"proc:22:defense ignore\"] = \"proc:22:defense ignore\";\n        BuffId[\"proc:23:spark damage\"] = \"proc:23:spark damage\";\n        BuffId[\"proc:24:converted-atk\"] = \"proc:24:converted-atk\";\n        BuffId[\"proc:24:converted-def\"] = \"proc:24:converted-def\";\n        BuffId[\"proc:24:converted-rec\"] = \"proc:24:converted-rec\";\n        BuffId[\"proc:26:hit count boost\"] = \"proc:26:hit count boost\";\n        BuffId[\"proc:27:proportional attack\"] = \"proc:27:proportional attack\";\n        BuffId[\"proc:28:fixed attack\"] = \"proc:28:fixed attack\";\n        BuffId[\"proc:29:multi-element attack\"] = \"proc:29:multi-element attack\";\n        BuffId[\"proc:30:add element-fire\"] = \"proc:30:add element-fire\";\n        BuffId[\"proc:30:add element-water\"] = \"proc:30:add element-water\";\n        BuffId[\"proc:30:add element-earth\"] = \"proc:30:add element-earth\";\n        BuffId[\"proc:30:add element-thunder\"] = \"proc:30:add element-thunder\";\n        BuffId[\"proc:30:add element-light\"] = \"proc:30:add element-light\";\n        BuffId[\"proc:30:add element-dark\"] = \"proc:30:add element-dark\";\n        BuffId[\"proc:30:add element-unknown\"] = \"proc:30:add element-unknown\";\n        BuffId[\"proc:31:bc fill-flat\"] = \"proc:31:bc fill-flat\";\n        BuffId[\"proc:31:bc fill-percent\"] = \"proc:31:bc fill-percent\";\n        BuffId[\"proc:32:element shift-fire\"] = \"proc:32:element shift-fire\";\n        BuffId[\"proc:32:element shift-water\"] = \"proc:32:element shift-water\";\n        BuffId[\"proc:32:element shift-earth\"] = \"proc:32:element shift-earth\";\n        BuffId[\"proc:32:element shift-thunder\"] = \"proc:32:element shift-thunder\";\n        BuffId[\"proc:32:element shift-light\"] = \"proc:32:element shift-light\";\n        BuffId[\"proc:32:element shift-dark\"] = \"proc:32:element shift-dark\";\n        BuffId[\"proc:32:element shift-unknown\"] = \"proc:32:element shift-unknown\";\n        BuffId[\"proc:33:buff wipe\"] = \"proc:33:buff wipe\";\n        BuffId[\"proc:34:bc drain-flat\"] = \"proc:34:bc drain-flat\";\n        BuffId[\"proc:34:bc drain-percent\"] = \"proc:34:bc drain-percent\";\n        BuffId[\"proc:36:ls lock\"] = \"proc:36:ls lock\";\n        BuffId[\"proc:37:summon\"] = \"proc:37:summon\";\n        BuffId[\"proc:38:cleanse-poison\"] = \"proc:38:cleanse-poison\";\n        BuffId[\"proc:38:cleanse-weak\"] = \"proc:38:cleanse-weak\";\n        BuffId[\"proc:38:cleanse-sick\"] = \"proc:38:cleanse-sick\";\n        BuffId[\"proc:38:cleanse-injury\"] = \"proc:38:cleanse-injury\";\n        BuffId[\"proc:38:cleanse-curse\"] = \"proc:38:cleanse-curse\";\n        BuffId[\"proc:38:cleanse-paralysis\"] = \"proc:38:cleanse-paralysis\";\n        BuffId[\"proc:38:cleanse-atk down\"] = \"proc:38:cleanse-atk down\";\n        BuffId[\"proc:38:cleanse-def down\"] = \"proc:38:cleanse-def down\";\n        BuffId[\"proc:38:cleanse-rec down\"] = \"proc:38:cleanse-rec down\";\n        BuffId[\"proc:38:cleanse-unknown\"] = \"proc:38:cleanse-unknown\";\n        BuffId[\"proc:39:mitigate-fire\"] = \"proc:39:mitigate-fire\";\n        BuffId[\"proc:39:mitigate-water\"] = \"proc:39:mitigate-water\";\n        BuffId[\"proc:39:mitigate-earth\"] = \"proc:39:mitigate-earth\";\n        BuffId[\"proc:39:mitigate-thunder\"] = \"proc:39:mitigate-thunder\";\n        BuffId[\"proc:39:mitigate-light\"] = \"proc:39:mitigate-light\";\n        BuffId[\"proc:39:mitigate-dark\"] = \"proc:39:mitigate-dark\";\n        BuffId[\"proc:39:mitigate-unknown\"] = \"proc:39:mitigate-unknown\";\n        BuffId[\"proc:40:add ailment-poison\"] = \"proc:40:add ailment-poison\";\n        BuffId[\"proc:40:add ailment-weak\"] = \"proc:40:add ailment-weak\";\n        BuffId[\"proc:40:add ailment-sick\"] = \"proc:40:add ailment-sick\";\n        BuffId[\"proc:40:add ailment-injury\"] = \"proc:40:add ailment-injury\";\n        BuffId[\"proc:40:add ailment-curse\"] = \"proc:40:add ailment-curse\";\n        BuffId[\"proc:40:add ailment-paralysis\"] = \"proc:40:add ailment-paralysis\";\n        BuffId[\"proc:40:add ailment-atk down\"] = \"proc:40:add ailment-atk down\";\n        BuffId[\"proc:40:add ailment-def down\"] = \"proc:40:add ailment-def down\";\n        BuffId[\"proc:40:add ailment-rec down\"] = \"proc:40:add ailment-rec down\";\n        BuffId[\"proc:40:add ailment-unknown\"] = \"proc:40:add ailment-unknown\";\n        BuffId[\"proc:42:sacrificial attack\"] = \"proc:42:sacrificial attack\";\n        BuffId[\"proc:42:instant death\"] = \"proc:42:instant death\";\n        BuffId[\"proc:43:burst od fill\"] = \"proc:43:burst od fill\";\n        BuffId[\"proc:44:damage over time\"] = \"proc:44:damage over time\";\n        BuffId[\"proc:45:attack boost-bb\"] = \"proc:45:attack boost-bb\";\n        BuffId[\"proc:45:attack boost-sbb\"] = \"proc:45:attack boost-sbb\";\n        BuffId[\"proc:45:attack boost-ubb\"] = \"proc:45:attack boost-ubb\";\n        BuffId[\"proc:46:non-lethal proportional attack\"] = \"proc:46:non-lethal proportional attack\";\n        BuffId[\"proc:47:hp scaled attack\"] = \"proc:47:hp scaled attack\";\n        BuffId[\"proc:48:piercing attack-base\"] = \"proc:48:piercing attack-base\";\n        BuffId[\"proc:48:piercing attack-current\"] = \"proc:48:piercing attack-current\";\n        BuffId[\"proc:48:piercing attack-fixed\"] = \"proc:48:piercing attack-fixed\";\n        BuffId[\"proc:48:piercing attack-unknown\"] = \"proc:48:piercing attack-unknown\";\n        BuffId[\"proc:49:chance instant death\"] = \"proc:49:chance instant death\";\n        BuffId[\"proc:50:chance damage reflect\"] = \"proc:50:chance damage reflect\";\n        BuffId[\"proc:51:add to attack-atk down\"] = \"proc:51:add to attack-atk down\";\n        BuffId[\"proc:51:add to attack-def down\"] = \"proc:51:add to attack-def down\";\n        BuffId[\"proc:51:add to attack-rec down\"] = \"proc:51:add to attack-rec down\";\n        BuffId[\"proc:52:bc efficacy\"] = \"proc:52:bc efficacy\";\n        BuffId[\"proc:53:inflict on hit-poison\"] = \"proc:53:inflict on hit-poison\";\n        BuffId[\"proc:53:inflict on hit-weak\"] = \"proc:53:inflict on hit-weak\";\n        BuffId[\"proc:53:inflict on hit-sick\"] = \"proc:53:inflict on hit-sick\";\n        BuffId[\"proc:53:inflict on hit-injury\"] = \"proc:53:inflict on hit-injury\";\n        BuffId[\"proc:53:inflict on hit-curse\"] = \"proc:53:inflict on hit-curse\";\n        BuffId[\"proc:53:inflict on hit-paralysis\"] = \"proc:53:inflict on hit-paralysis\";\n        BuffId[\"proc:54:critical damage boost\"] = \"proc:54:critical damage boost\";\n        BuffId[\"proc:55:elemental weakness damage-fire\"] = \"proc:55:elemental weakness damage-fire\";\n        BuffId[\"proc:55:elemental weakness damage-water\"] = \"proc:55:elemental weakness damage-water\";\n        BuffId[\"proc:55:elemental weakness damage-earth\"] = \"proc:55:elemental weakness damage-earth\";\n        BuffId[\"proc:55:elemental weakness damage-thunder\"] = \"proc:55:elemental weakness damage-thunder\";\n        BuffId[\"proc:55:elemental weakness damage-light\"] = \"proc:55:elemental weakness damage-light\";\n        BuffId[\"proc:55:elemental weakness damage-dark\"] = \"proc:55:elemental weakness damage-dark\";\n        BuffId[\"proc:55:elemental weakness damage-unknown\"] = \"proc:55:elemental weakness damage-unknown\";\n        BuffId[\"proc:56:chance ko resistance\"] = \"proc:56:chance ko resistance\";\n        BuffId[\"proc:57:bc drop resistance-base\"] = \"proc:57:bc drop resistance-base\";\n        BuffId[\"proc:57:bc drop resistance-buff\"] = \"proc:57:bc drop resistance-buff\";\n        BuffId[\"proc:57:hc drop resistance-base\"] = \"proc:57:hc drop resistance-base\";\n        BuffId[\"proc:57:hc drop resistance-buff\"] = \"proc:57:hc drop resistance-buff\";\n        BuffId[\"proc:58:spark vulnerability\"] = \"proc:58:spark vulnerability\";\n        BuffId[\"proc:59:attack reduction-bb\"] = \"proc:59:attack reduction-bb\";\n        BuffId[\"proc:59:attack reduction-sbb\"] = \"proc:59:attack reduction-sbb\";\n        BuffId[\"proc:59:attack reduction-ubb\"] = \"proc:59:attack reduction-ubb\";\n        BuffId[\"proc:61:party bb gauge-scaled attack\"] = \"proc:61:party bb gauge-scaled attack\";\n        BuffId[\"proc:61:party bc drain\"] = \"proc:61:party bc drain\";\n        BuffId[\"proc:62:barrier-all\"] = \"proc:62:barrier-all\";\n        BuffId[\"proc:62:barrier-fire\"] = \"proc:62:barrier-fire\";\n        BuffId[\"proc:62:barrier-water\"] = \"proc:62:barrier-water\";\n        BuffId[\"proc:62:barrier-earth\"] = \"proc:62:barrier-earth\";\n        BuffId[\"proc:62:barrier-thunder\"] = \"proc:62:barrier-thunder\";\n        BuffId[\"proc:62:barrier-light\"] = \"proc:62:barrier-light\";\n        BuffId[\"proc:62:barrier-dark\"] = \"proc:62:barrier-dark\";\n        BuffId[\"proc:62:barrier-unknown\"] = \"proc:62:barrier-unknown\";\n        BuffId[\"proc:64:consecutive usage attack\"] = \"proc:64:consecutive usage attack\";\n        BuffId[\"proc:65:ailment attack boost\"] = \"proc:65:ailment attack boost\";\n        BuffId[\"proc:66:chance revive\"] = \"proc:66:chance revive\";\n        BuffId[\"proc:67:bc fill on spark\"] = \"proc:67:bc fill on spark\";\n        BuffId[\"proc:68:guard mitigation\"] = \"proc:68:guard mitigation\";\n        BuffId[\"proc:69:bc fill on guard-flat\"] = \"proc:69:bc fill on guard-flat\";\n        BuffId[\"proc:69:bc fill on guard-percent\"] = \"proc:69:bc fill on guard-percent\";\n        BuffId[\"proc:71:bc efficacy reduction\"] = \"proc:71:bc efficacy reduction\";\n        BuffId[\"proc:73:resist-atk down\"] = \"proc:73:resist-atk down\";\n        BuffId[\"proc:73:resist-def down\"] = \"proc:73:resist-def down\";\n        BuffId[\"proc:73:resist-rec down\"] = \"proc:73:resist-rec down\";\n        BuffId[\"proc:75:element squad-scaled attack\"] = \"proc:75:element squad-scaled attack\";\n        BuffId[\"proc:76:extra action\"] = \"proc:76:extra action\";\n        BuffId[\"proc:78:self stat boost-atk\"] = \"proc:78:self stat boost-atk\";\n        BuffId[\"proc:78:self stat boost-def\"] = \"proc:78:self stat boost-def\";\n        BuffId[\"proc:78:self stat boost-rec\"] = \"proc:78:self stat boost-rec\";\n        BuffId[\"proc:78:self stat boost-crit\"] = \"proc:78:self stat boost-crit\";\n        BuffId[\"proc:79:player exp boost\"] = \"proc:79:player exp boost\";\n        BuffId[\"proc:82:resummon\"] = \"proc:82:resummon\";\n        BuffId[\"UNKNOWN_CONDITIONAL_EFFECT_ID\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n        BuffId[\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\"] = \"UNKNOWN_CONDITIONAL_BUFF_PARAMS\";\n        BuffId[\"conditional:1:attack buff\"] = \"conditional:1:attack buff\";\n        BuffId[\"conditional:3:defense buff\"] = \"conditional:3:defense buff\";\n        BuffId[\"conditional:5:recovery buff\"] = \"conditional:5:recovery buff\";\n        BuffId[\"conditional:8:gradual heal\"] = \"conditional:8:gradual heal\";\n        BuffId[\"conditional:12:guaranteed ko resistance\"] = \"conditional:12:guaranteed ko resistance\";\n        BuffId[\"conditional:13:elemental attack buff\"] = \"conditional:13:elemental attack buff\";\n        BuffId[\"conditional:14:elemental defense buff\"] = \"conditional:14:elemental defense buff\";\n        BuffId[\"conditional:21:fire mitigation\"] = \"conditional:21:fire mitigation\";\n        BuffId[\"conditional:22:water mitigation\"] = \"conditional:22:water mitigation\";\n        BuffId[\"conditional:23:earth mitigation\"] = \"conditional:23:earth mitigation\";\n        BuffId[\"conditional:24:thunder mitigation\"] = \"conditional:24:thunder mitigation\";\n        BuffId[\"conditional:25:light mitigation\"] = \"conditional:25:light mitigation\";\n        BuffId[\"conditional:26:dark mitigation\"] = \"conditional:26:dark mitigation\";\n        BuffId[\"conditional:36:mitigation\"] = \"conditional:36:mitigation\";\n        BuffId[\"conditional:37:gradual bc fill\"] = \"conditional:37:gradual bc fill\";\n        BuffId[\"conditional:40:spark damage\"] = \"conditional:40:spark damage\";\n        BuffId[\"conditional:72:attack boost-bb\"] = \"conditional:72:attack boost-bb\";\n        BuffId[\"conditional:72:attack boost-sbb\"] = \"conditional:72:attack boost-sbb\";\n        BuffId[\"conditional:72:attack boost-ubb\"] = \"conditional:72:attack boost-ubb\";\n        BuffId[\"conditional:74:add atk down to attack\"] = \"conditional:74:add atk down to attack\";\n        BuffId[\"conditional:75:add def down to attack\"] = \"conditional:75:add def down to attack\";\n        BuffId[\"conditional:84:critical damage\"] = \"conditional:84:critical damage\";\n        BuffId[\"conditional:91:chance ko resistance\"] = \"conditional:91:chance ko resistance\";\n        BuffId[\"conditional:98:thunder barrier\"] = \"conditional:98:thunder barrier\";\n        BuffId[\"conditional:99:light barrier\"] = \"conditional:99:light barrier\";\n        BuffId[\"conditional:132:od fill rate\"] = \"conditional:132:od fill rate\";\n        BuffId[\"conditional:133:heal on hit\"] = \"conditional:133:heal on hit\";\n        BuffId[\"conditional:143:critical damage reduction-base\"] = \"conditional:143:critical damage reduction-base\";\n        BuffId[\"conditional:143:critical damage reduction-buff\"] = \"conditional:143:critical damage reduction-buff\";\n        BuffId[\"conditional:145:elemental weakness damage reduction-base\"] = \"conditional:145:elemental weakness damage reduction-base\";\n        BuffId[\"conditional:145:elemental weakness damage reduction-buff\"] = \"conditional:145:elemental weakness damage reduction-buff\";\n        BuffId[\"conditional:153:chance inflict atk down on hit\"] = \"conditional:153:chance inflict atk down on hit\";\n    })(BuffId || (BuffId = {}));\n\n    /**\n     * @description Helper function for creating an entry to be used in the `sources`\n     * property of {@link IBuff}.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourceEntryFromContext(context) {\n        return `${context.source}-${context.sourceId}`;\n    }\n    /**\n     * @description Helper function for creating an entries array to be used in the `sources`\n     * property of {@link IBuff}. It handles setting the order of the sources.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n     */\n    function createSourcesFromContext(context) {\n        const resultArray = Array.isArray(context.previousSources)\n            ? context.previousSources.slice()\n            : [];\n        // Ensure that the current source is at the beginning of the array\n        resultArray.unshift(createSourceEntryFromContext(context));\n        return resultArray;\n    }\n    /**\n     * @description Given the conditions in an extra skill effect, normalize them into\n     * a simpler object containing the IDs of each condition type.\n     * @param effect Extra skill effect to process conditions from.\n     * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n     */\n    function processExtraSkillConditions(effect) {\n        const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n        const aggregate = {\n            units: new Set(),\n            items: new Set(),\n            sphereTypes: new Set(),\n            unknowns: new Set(),\n        };\n        conditions.forEach((condition, index) => {\n            if ('sphere category required (raw)' in condition) {\n                aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n            }\n            else if ('item required' in condition) {\n                condition['item required'].forEach((item) => {\n                    aggregate.items.add(item);\n                });\n            }\n            else if ('unit required' in condition) {\n                condition['unit required'].forEach((unit) => {\n                    aggregate.units.add(`${unit.id}`);\n                });\n            }\n            else {\n                aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n            }\n        });\n        // filter out properties that have no entries\n        const result = Object.entries(aggregate)\n            .filter((entry) => entry[1].size > 0)\n            .reduce((acc, entry) => {\n            acc[entry[0]] = Array.from(entry[1]);\n            return acc;\n        }, {});\n        return result;\n    }\n    /**\n     * @description Extract the target type and target area of a given passive effect.\n     * @param effect Passive effect to extract target data from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns The target data for the given effect and context. There are only two possible values:\n     * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n     */\n    function getPassiveTargetData(effect, context) {\n        const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n            (effect.sp_type === SpPassiveType.EnhancePassive);\n        const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n        return {\n            targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n            targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n        };\n    }\n    /**\n     * @description Extract the target type and target area of a given proc effect.\n     * @param effect Proc effect to extract target data from.\n     * @returns The target data for the given effect and context.\n     */\n    function getProcTargetData(effect) {\n        return {\n            targetArea: effect['target area'],\n            targetType: effect['target type'],\n        };\n    }\n    /**\n     * @description Try to parse the given value into a number or return a value if it is not a number.\n     * @param value Value to parse into a number.\n     * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n     * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n     */\n    function parseNumberOrDefault(value, defaultValue = 0) {\n        return (value !== null && !isNaN(value)) ? +value : defaultValue;\n    }\n    /**\n     * @description Create an object denoting values that cannot be processed yet. To be used\n     * in the `value` property of `IBuff` as needed.\n     * @param params Array of values that cannot be processed yet.\n     * @param startIndex The first index before which we know how to process an effect's values.\n     * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n     */\n    function createUnknownParamsValue(params = [], startIndex = 0) {\n        let hasValue = false;\n        const result = params\n            .reduce((acc, value, index) => {\n            if (value && value !== '0') {\n                acc[`param_${startIndex + index}`] = value;\n                hasValue = true;\n            }\n            return acc;\n        }, {});\n        return hasValue ? result : (void 0);\n    }\n    /**\n     * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n     * @param source Source value to check.\n     * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n     * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n     * bonded super brave burst, or bonded dual brave burst.\n     */\n    function buffSourceIsBurstType(source) {\n        return !!source && [\n            BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n            BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n        ].includes(source);\n    }\n    /**\n     * @description Given an array of parameters, conditionally creata an unknown params value entry.\n     * @param extraParams Array of string parameters from an effect.\n     * @param startIndex Index to use when generating entries for the unknown params value entry.\n     * @param injectionContext Object whose main use is for injecting methods in testing.\n     * @returns An unknown params entry if there are extra parameters, undefined otherwise.\n     */\n    function createUnknownParamsEntryFromExtraParams(extraParams, startIndex, injectionContext) {\n        let unknownParams;\n        if (extraParams && extraParams.length > 0) {\n            unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n        }\n        return unknownParams;\n    }\n    /**\n     * @description Helper function for creating a `NO_PARAMS_SPECIFIED` entry from a given context.\n     * @param context An effect processing context containing information created while parsing an effect.\n     * @returns A single buff denoting a `NO_PARAMS_SPECIFIED` entry.\n     */\n    function createNoParamsEntry({ originalId, sources }) {\n        return {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            originalId,\n            sources,\n        };\n    }\n\n    let mapping;\n    /**\n     * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of proc IDs to functions.\n     */\n    function getProcEffectToBuffMapping(reload) {\n        if (!mapping || reload) {\n            mapping = new Map();\n            setMapping(mapping);\n        }\n        return mapping;\n    }\n    /**\n     * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping(map) {\n        const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const NON_ZERO_ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const effectDelay = effect['effect delay time(ms)/frame'];\n            return { targetData, sources, effectDelay };\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const splitEffectWithUnknownProcParamsProperty = (effect) => {\n            const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n            return splitEffectParams({ params: rawParams });\n        };\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n            effectDelay,\n            sources, value: unknownParams }, targetData));\n        const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n            sources, value: {\n                buffs,\n                duration,\n            } }, targetData));\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    effectDelay,\n                }));\n            }\n        };\n        /**\n         * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n         * checked if all other known values in the effect are 0.\n         * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n         * @param turnDuration Parsed turn duration value to check.\n         * @param injectionContext Object whose main use is for injecting methods in testing.\n         * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n         */\n        const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n            let result = turnDuration !== 0;\n            if (result) {\n                result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n            }\n            return result;\n        };\n        /**\n         * @description Helper function to get attack information common across most attacks from the conversion context.\n         * @param context Given context that may contain attack information like damage frames.\n         * @returns Extracted attack information from the context (with defaults where applicable).\n         */\n        const getAttackInformationFromContext = (context) => {\n            const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n            const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n            return {\n                hits,\n                distribution,\n            };\n        };\n        const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                value = parseParamValue(rawValue);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect[effectValueKey]);\n                turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [buffId],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        };\n        const parseProcWithNumericalValueRangeAndChanceAndTurnDuration = ({ effect, context, injectionContext, originalId, buffId, effectKeyLow, effectKeyHigh, effectKeyChance, effectTurnDurationKey, buffKeyLow, buffKeyHigh, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateConditions, }) => {\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let valueLow = 0;\n            let valueHigh = 0;\n            let chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValueLow, rawValueHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                valueLow = parseParamValue(rawValueLow);\n                valueHigh = parseParamValue(rawValueHigh);\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                valueLow = parseNumberOrDefault(effect[effectKeyLow]);\n                valueHigh = parseNumberOrDefault(effect[effectKeyHigh]);\n                chance = parseNumberOrDefault(effect[effectKeyChance]);\n                turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n            }\n            const hasAnyValues = valueLow !== 0 || valueHigh !== 0 || chance !== 0;\n            const results = [];\n            if (hasAnyValues) {\n                const entry = Object.assign({ id: buffId, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        [buffKeyLow]: valueLow,\n                        [buffKeyHigh]: valueHigh,\n                        chance,\n                    } }, targetData);\n                if (generateConditions) {\n                    entry.conditions = generateConditions();\n                }\n                results.push(entry);\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [buffId],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:1:attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'healerRec%': 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                let recX, recY;\n                let extraParams;\n                [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n                params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['heal low'];\n                params.healHigh = effect['heal high'];\n                params['healerRec%'] = effect['rec added% (from healer)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const results = [];\n            if (params.healHigh !== 0 || params.healLow !== 0) {\n                results.push(Object.assign({ id: 'proc:2:burst heal', originalId,\n                    sources,\n                    effectDelay, value: params }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                healLow: '0',\n                healHigh: '0',\n                'targetRec%': 0,\n                turnDuration: '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let rec;\n                let extraParams;\n                [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.healLow = effect['gradual heal low'];\n                params.healHigh = effect['gradual heal high'];\n                params['targetRec%'] = effect['rec added% (from target)'];\n                params.turnDuration = effect['gradual heal turns (8)'];\n            }\n            // ensure every property is a number\n            Object.keys(params).forEach((key) => {\n                params[key] = parseNumberOrDefault(params[key]);\n            });\n            const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n            const results = [];\n            if (hasAnyHealValues) {\n                results.push(Object.assign({ id: 'proc:3:gradual heal', originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: {\n                        healLow: params.healLow,\n                        healHigh: params.healHigh,\n                        'targetRec%': params['targetRec%'],\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:3:gradual heal'],\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('bb bc fill' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill']);\n                }\n                if ('bb bc fill%' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n                }\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:bc fill-flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:4:bc fill-percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                element: BuffConditionElement.All,\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        params[statType] = effect[effectKey];\n                    }\n                });\n                params.turnDuration = effect['buff turns'];\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        const buffEntry = Object.assign({ id: `proc:5:regular or elemental-${statKey}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData);\n                        if (params.element !== BuffConditionElement.All) {\n                            buffEntry.conditions = {\n                                targetElements: [params.element],\n                            };\n                        }\n                        results.push(buffEntry);\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:5:regular or elemental-${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('6', (effect, context, injectionContext) => {\n            const originalId = '6';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                turnDuration: '0',\n            };\n            const dropRateProperties = ['bc', 'hc', 'item'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                params.bc = effect['bc drop rate% buff (10)'];\n                params.hc = effect['hc drop rate% buff (9)'];\n                params.item = effect['item drop rate% buff (11)'];\n                params.turnDuration = effect['drop buff rate turns'];\n            }\n            dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n            const results = [];\n            if (hasAnyRates) {\n                dropRateProperties.forEach((key) => {\n                    const value = params[key];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:6:drop boost-${key}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: dropRateProperties.map((key) => `proc:6:drop boost-${key}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('7', (effect, context, injectionContext) => {\n            const originalId = '7';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHpPercent = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:7:guaranteed ko resistance', originalId,\n                    sources,\n                    effectDelay, value: recoveredHpPercent }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const originalId = '8';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatHpBoost = 0;\n            let percentHpBoost = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n                flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n                percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('max hp increase' in effect) {\n                    flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n                }\n                if ('max hp% increase' in effect) {\n                    percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n                }\n            }\n            const results = [];\n            if (flatHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:max hp boost-flat', originalId,\n                    sources,\n                    effectDelay, value: flatHpBoost }, targetData));\n            }\n            if (percentHpBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:8:max hp boost-percent', originalId,\n                    sources,\n                    effectDelay, value: percentHpBoost }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            const originalId = '9';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const STAT_TYPE_MAPPING = {\n                0: 'atk',\n                1: 'def',\n                2: 'rec',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const params = {\n                element: BuffConditionElement.All,\n                statReductionEntries: [],\n                turnDuration: 0,\n            };\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n                [\n                    [statType1, value1, procChance1],\n                    [statType2, value2, procChance2],\n                ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                    const statType = parseNumberOrDefault(rawStatType) - 1;\n                    const value = parseNumberOrDefault(rawValue);\n                    const chance = parseNumberOrDefault(rawProcChance);\n                    if (statType === 3) { // all stats\n                        params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                            stat,\n                            value,\n                            chance,\n                        })));\n                    }\n                    else {\n                        params.statReductionEntries.push({\n                            stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                            value,\n                            chance,\n                        });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const effectElement = effect['element buffed'];\n                if (effectElement === 'all') {\n                    params.element = BuffConditionElement.All;\n                }\n                else if (!effectElement) {\n                    params.element = BuffConditionElement.Unknown;\n                }\n                else {\n                    params.element = effectElement;\n                }\n                ['buff #1', 'buff #2'].forEach((buffKey) => {\n                    const entry = effect[buffKey];\n                    if (entry) {\n                        const chance = parseNumberOrDefault(entry['proc chance%']);\n                        const keys = Object.keys(entry);\n                        coreStatProperties.forEach((statType) => {\n                            const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                            if (effectKey) {\n                                params.statReductionEntries.push({\n                                    stat: statType,\n                                    value: parseNumberOrDefault(entry[effectKey]),\n                                    chance,\n                                });\n                            }\n                        });\n                    }\n                });\n                params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            let hasAnyValues = false;\n            params.statReductionEntries.forEach(({ stat, value, chance }) => {\n                if (value !== 0 || chance !== 0) {\n                    hasAnyValues = true;\n                    const buffEntry = Object.assign({ id: `proc:9:regular or elemental reduction-${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n            if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:9:regular or elemental reduction-${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            const originalId = '10';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 8);\n                const extraParams = splitParams.slice(8);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    if (`remove ${ailment}` in effect) { // mainly for items\n                        curedAilments.push(ailment);\n                    }\n                });\n                if ('remove all status ailments' in effect) {\n                    curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:cleanse-${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                let params = splitEffectParams(effect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:chance inflict-${ailment}`, originalId,\n                sources,\n                effectDelay, value: chance }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let reviveToHp = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n                reviveToHp = parseNumberOrDefault(rawReviveToHp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n            }\n            const results = [Object.assign({ id: 'proc:12:guaranteed revive', originalId,\n                    sources,\n                    effectDelay, value: reviveToHp }, targetData)];\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const originalId = '13';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hits = 0;\n            const { distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawHits;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n                hits = parseNumberOrDefault(rawHits);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                hits = parseNumberOrDefault(effect.hits);\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push({\n                    id: 'proc:13:random attack',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }),\n                    targetType: targetData.targetType,\n                    targetArea: TargetArea.Random,\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n                'drainLow%': '0',\n                'drainHigh%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n                params['drainLow%'] = effect['hp drain% low'];\n                params['drainHigh%'] = effect['hp drain% high'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:14:hp absorb attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let mitigation = 0;\n            let element;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                mitigation = parseNumberOrDefault(rawMitigation);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n                element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n                if (mitigationKey) {\n                    mitigation = parseNumberOrDefault(effect[mitigationKey]);\n                }\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (mitigation !== 0) {\n                results.push(Object.assign({ id: `proc:16:mitigate-${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:mitigate-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            const originalId = '17';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        resistances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:17:resist-${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:17:resist-${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('18', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'dmg% reduction',\n                effectTurnDurationKey: 'dmg% reduction turns (36)',\n                buffId: 'proc:18:mitigation',\n                originalId: '18',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'increase bb gauge gradual',\n                effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'proc:19:gradual bc fill',\n                originalId: '19',\n            });\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                originalId: '20',\n                buffId: 'proc:20:bc fill on hit',\n                effectKeyLow: 'bc fill when attacked low',\n                effectKeyHigh: 'bc fill when attacked high',\n                effectKeyChance: 'bc fill when attacked%',\n                effectTurnDurationKey: 'bc fill when attacked turns (38)',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateConditions: () => ({ whenAttacked: true }),\n            });\n        });\n        map.set('22', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'defense% ignore',\n                effectTurnDurationKey: 'defense% ignore turns (39)',\n                buffId: 'proc:22:defense ignore',\n                originalId: '22',\n            });\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let value = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                value = parseNumberOrDefault(params[0]);\n                turnDuration = parseNumberOrDefault(params[6]);\n                const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'proc:23:spark damage', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:23:spark damage'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            const originalId = '24';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let turnDuration = 0;\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawConvertedStat, rawTurnDuration;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                const rawConvertedStat = effect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                const keys = Object.keys(effect);\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                    if (effectKey) {\n                        stats[statType] = effect[effectKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['% converted turns']);\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:24:converted-${stat}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: {\n                            convertedStat,\n                            value,\n                        } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:24:converted-${statKey}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            const originalId = '26';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n                turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'proc:26:hit count boost', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:26:hit count boost'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            const originalId = '27';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'hpDamageLow%': '0',\n                'hpDamageHigh%': '0',\n                'hpDamageChance%': '0',\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else {\n                params['hpDamageLow%'] = effect['hp% damage low'];\n                params['hpDamageHigh%'] = effect['hp% damage high'];\n                params['hpDamageChance%'] = effect['hp% damage chance%'];\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:27:proportional attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            let value = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                value = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(effect['fixed damage']);\n            }\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || value !== 0) {\n                const entry = Object.assign({ id: 'proc:28:fixed attack', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (value !== 0) {\n                    entry.value.value = value;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            const originalId = '29';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let attackElements = [];\n            let unknownParams;\n            if (effect.params) {\n                let element1, element2, element3;\n                let extraParams;\n                [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                [element1, element2, element3].forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                    unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n                });\n            }\n            else {\n                if (Array.isArray(effect['bb elements'])) {\n                    attackElements = effect['bb elements'].slice();\n                }\n                params['atk%'] = effect['bb atk%'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n                const entry = Object.assign({ id: 'proc:29:multi-element attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData);\n                if (attackElements.length > 0) {\n                    entry.value.elements = attackElements;\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let elements = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                elements = params\n                    .slice(0, 6)\n                    .filter((p) => p !== '0')\n                    .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n                turnDuration = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                if ('elements added' in effect) {\n                    if (Array.isArray(effect['elements added'])) {\n                        elements = effect['elements added'];\n                    }\n                    else {\n                        elements = [BuffConditionElement.Unknown];\n                    }\n                }\n                turnDuration = parseNumberOrDefault(effect['elements added turns']);\n            }\n            const results = [];\n            const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n            if (elements.length > 0) {\n                elements.forEach((inputElement) => {\n                    const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                    results.push(Object.assign({ id: `proc:30:add element-${sanitizedElement}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration }, targetData));\n                });\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:add element-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                if ('increase bb gauge' in effect) {\n                    flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n                }\n                // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n                // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:bc fill-flat', originalId,\n                    sources,\n                    effectDelay, value: flatFill }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:31:bc fill-percent', originalId,\n                    sources,\n                    effectDelay, value: percentFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            const originalId = '32';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let element;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, ...extraParams] = splitEffectParams(effect);\n                if (rawElement && rawElement !== '0') {\n                    element = NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                const effectElement = effect['set attack element attribute'];\n                if (effectElement) {\n                    const sanitizedElement = Object.values(NON_ZERO_ELEMENT_MAPPING).find((e) => effectElement === e);\n                    if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                        element = sanitizedElement;\n                    }\n                    else {\n                        element = BuffConditionElement.Unknown;\n                    }\n                }\n            }\n            const results = [];\n            if (element) {\n                results.push(Object.assign({ id: `proc:32:element shift-${element}`, originalId,\n                    sources,\n                    effectDelay, value: true }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(effect);\n                chance = parseNumberOrDefault(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(effect['clear buff chance%']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:33:buff wipe', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            const originalId = '34';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatDrainLow = 0, flatDrainHigh = 0;\n            let percentDrainLow = 0, percentDrainHigh = 0;\n            let chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n                flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n                flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n                percentDrainLow = parseNumberOrDefault(rawPercentLow);\n                percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n                flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n                percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n                percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n                chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n            }\n            const results = [];\n            if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:bc drain-flat', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: flatDrainLow,\n                        drainHigh: flatDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n                results.push(Object.assign({ id: 'proc:34:bc drain-percent', originalId,\n                    sources,\n                    effectDelay, value: {\n                        drainLow: percentDrainLow,\n                        drainHigh: percentDrainHigh,\n                        chance,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'invalidate LS chance%',\n                effectTurnDurationKey: 'invalidate LS turns (60)',\n                buffId: 'proc:36:ls lock',\n                originalId: '36',\n            });\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const positionX = parseNumberOrDefault(rawPositionX);\n            const positionY = parseNumberOrDefault(rawPositionY);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const results = [];\n            if (summonGroup || summonId) {\n                results.push(Object.assign({ id: 'proc:37:summon', originalId,\n                    sources,\n                    effectDelay, value: {\n                        summonGroup,\n                        summonId,\n                        positionX,\n                        positionY,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('38', (effect, context, injectionContext) => {\n            const originalId = '38';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const curedAilments = [];\n            let unknownParams;\n            if (effect.params) {\n                const splitParams = splitEffectParams(effect);\n                const knownParams = splitParams.slice(0, 9);\n                const extraParams = splitParams.slice(9);\n                knownParams\n                    .filter((p) => p !== '0')\n                    .forEach((param) => {\n                    curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else if (Array.isArray(effect['ailments cured'])) {\n                const effectAilmentsCured = effect['ailments cured'];\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                    if (effectAilmentsCured.includes(effectKey)) {\n                        curedAilments.push(ailment);\n                    }\n                });\n                if (effectAilmentsCured.length > curedAilments.length) {\n                    const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                    for (let i = 0; i < unknownAilmentCount; ++i) {\n                        curedAilments.push(Ailment.Unknown);\n                    }\n                }\n            }\n            const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:cleanse-${ailment}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('39', (effect, context, injectionContext) => {\n            const originalId = '39';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const elements = [];\n            let mitigation = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                const rawElementsMitigated = params.slice(0, 6);\n                mitigation = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                rawElementsMitigated.forEach((rawElement) => {\n                    if (rawElement !== '0') {\n                        elements.push(NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                Object.values(NON_ZERO_ELEMENT_MAPPING).forEach((element) => {\n                    if (effect[`mitigate ${element} attacks`]) {\n                        elements.push(element);\n                    }\n                });\n                mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n                turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n            }\n            const results = [];\n            if (elements.length > 0) {\n                elements.forEach((element) => {\n                    results.push(Object.assign({ id: `proc:39:mitigate-${element}`, originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: mitigation }, targetData));\n                });\n            }\n            else if (mitigation !== 0) {\n                results.push(Object.assign({ id: 'proc:39:mitigate-unknown', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:mitigate-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                for (let index = 0; index < 8; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n                turnDuration = parseNumberOrDefault(params[8]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken% buff';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = `${ailment} buff`;\n                    }\n                    else {\n                        effectKey = `${ailment}% buff`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(effect[effectKey]),\n                        });\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:add ailment-${ailment}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: chance }, targetData)));\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    duration: turnDuration,\n                    buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:add ailment-${a}`),\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const params = {\n                'atkLow%': rawModLow,\n                'atkHigh%': rawModHigh,\n                flatAtk: rawFlatAtk,\n            };\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            let results;\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results = [\n                    Object.assign({ id: 'proc:42:sacrificial attack', originalId,\n                        sources,\n                        effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                            distribution }) }, targetData),\n                    {\n                        id: 'proc:42:instant death',\n                        originalId,\n                        sources,\n                        effectDelay,\n                        value: true,\n                        targetArea: TargetArea.Single,\n                        targetType: TargetType.Self,\n                    },\n                ];\n            }\n            else {\n                results = [];\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            const originalId = '43';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let overdriveFill = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n                overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n            }\n            const results = [];\n            if (overdriveFill !== 0) {\n                results.push(Object.assign({ id: 'proc:43:burst od fill', originalId,\n                    sources,\n                    effectDelay, value: overdriveFill }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const damageParams = {\n                'atk%': '0',\n                flatAtk: '0',\n                'dmg%': '0',\n            };\n            let affectsElement = false, unitIndex = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n                [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n                unitIndex = parseNumberOrDefault(rawUnitIndex);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                damageParams['atk%'] = effect['dot atk%'];\n                damageParams.flatAtk = effect['dot flat atk'];\n                damageParams['dmg%'] = effect['dot dmg%'];\n                affectsElement = !!(effect['dot element affected']);\n                unitIndex = parseNumberOrDefault(effect['dot unit index']);\n                turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n            }\n            const filteredDamageParams = Object.entries(damageParams)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (Object.keys(filteredDamageParams).length > 0) {\n                results.push(Object.assign({ id: 'proc:44:damage over time', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                        unitIndex }) }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:44:damage over time'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('45', (effect, context, injectionContext) => {\n            const originalId = '45';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let bb = 0, sbb = 0, ubb = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                bb = parseNumberOrDefault(rawBb);\n                sbb = parseNumberOrDefault(rawSbb);\n                ubb = parseNumberOrDefault(rawUbb);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                bb = parseNumberOrDefault(effect['bb atk% buff']);\n                sbb = parseNumberOrDefault(effect['sbb atk% buff']);\n                ubb = parseNumberOrDefault(effect['ubb atk% buff']);\n                turnDuration = parseNumberOrDefault(effect['buff turns (72)']);\n            }\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:attack boost-bb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:attack boost-sbb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'proc:45:attack boost-ubb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: ubb }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:45:attack boost-${type}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('46', (effect, context, injectionContext) => {\n            const originalId = '46';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawHpLow, rawHpHigh, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const hpLow = parseNumberOrDefault(rawHpLow);\n            const hpHigh = parseNumberOrDefault(rawHpHigh);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (hpLow !== 0 || hpHigh !== 0 || hits !== 0 || distribution !== 0) {\n                const entry = Object.assign({ id: 'proc:46:non-lethal proportional attack', originalId,\n                    sources,\n                    effectDelay, value: {\n                        hits,\n                        distribution,\n                    } }, targetData);\n                if (hpLow !== 0 || hpHigh !== 0) {\n                    entry.value = {\n                        'hpDamageLow%': hpLow,\n                        'hpDamageHigh%': hpHigh,\n                        hits,\n                        distribution,\n                    };\n                }\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('47', (effect, context, injectionContext) => {\n            const originalId = '47';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'baseAtk%': '0',\n                'maxAddedAtk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let proportionalMode = 'unknown';\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawMaxAttackValue, rawProportionalMode;\n                [params['baseAtk%'], rawMaxAttackValue, rawProportionalMode, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue) - parseNumberOrDefault(params['baseAtk%']);\n                proportionalMode = rawProportionalMode === '1' ? 'lost' : 'remaining';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['baseAtk%'] = effect['bb base atk%'];\n                params['maxAddedAtk%'] = effect['bb added atk% based on hp'];\n                proportionalMode = effect['bb added atk% proportional to hp'] || 'unknown';\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:47:hp scaled attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { proportionalMode,\n                        hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('48', (effect, context, injectionContext) => {\n            const originalId = '48';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const [rawBasePercentHpLow, rawBasePercentHpHigh, rawCurrentPercentHpLow, rawCurrentPercentHpHigh, rawFixedDamage, rawChance, rawIsLethal, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const basePercentHpLow = parseNumberOrDefault(rawBasePercentHpLow);\n            const basePercentHpHigh = parseNumberOrDefault(rawBasePercentHpHigh);\n            const currentPercentHpLow = parseNumberOrDefault(rawCurrentPercentHpLow);\n            const currentPercentHpHigh = parseNumberOrDefault(rawCurrentPercentHpHigh);\n            const fixedDamage = parseNumberOrDefault(rawFixedDamage);\n            const chance = parseNumberOrDefault(rawChance);\n            const isLethal = rawIsLethal === '1';\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            /**\n             * Current assumption is that each set of parameters results in a separate attack\n             * due to no known skills having more than one of each variant.\n             */\n            const results = [];\n            const createAttackOfType = (type, valueProperties) => (Object.assign({ id: `proc:48:piercing attack-${type}`, originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, valueProperties), { isLethal,\n                    chance,\n                    hits,\n                    distribution }) }, targetData));\n            if (basePercentHpLow !== 0 || basePercentHpHigh !== 0) {\n                results.push(createAttackOfType('base', {\n                    'hpDamageLow%': basePercentHpLow,\n                    'hpDamageHigh%': basePercentHpHigh,\n                }));\n            }\n            if (currentPercentHpLow !== 0 || currentPercentHpHigh !== 0) {\n                results.push(createAttackOfType('current', {\n                    'hpDamageLow%': currentPercentHpLow,\n                    'hpDamageHigh%': currentPercentHpHigh,\n                }));\n            }\n            if (fixedDamage !== 0) {\n                results.push(createAttackOfType('fixed', {\n                    value: fixedDamage,\n                }));\n            }\n            if (results.length === 0 && (hits !== 0 || distribution !== 0)) {\n                results.push(createAttackOfType('unknown', {}));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('49', (effect, context, injectionContext) => {\n            const originalId = '49';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawChance, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const chance = parseNumberOrDefault(rawChance);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:49:chance instant death', originalId,\n                    sources,\n                    effectDelay, value: chance }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('50', (effect, context, injectionContext) => {\n            const originalId = '50';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawDamageLow, rawDamageHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const reflectedDamageLow = parseNumberOrDefault(rawDamageLow);\n            const reflectedDamageHigh = parseNumberOrDefault(rawDamageHigh);\n            const chance = parseNumberOrDefault(rawChance);\n            const turnDuration = parseNumberOrDefault(rawTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const hasAnyRangeValues = reflectedDamageLow !== 0 || reflectedDamageHigh !== 0;\n            const results = [];\n            if (hasAnyRangeValues) {\n                results.push(Object.assign({ id: 'proc:50:chance damage reflect', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        'reflectedDamageLow%': reflectedDamageLow,\n                        'reflectedDamageHigh%': reflectedDamageHigh,\n                        chance,\n                    } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:50:chance damage reflect'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('51', (effect, context, injectionContext) => {\n            const originalId = '51';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedReductions = [];\n            let debuffTurnDuration = 0, turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                [\n                    { type: Ailment.AttackReduction, reductionValue: parseNumberOrDefault(params[0]), chance: parseNumberOrDefault(params[3]) },\n                    { type: Ailment.DefenseReduction, reductionValue: parseNumberOrDefault(params[1]), chance: parseNumberOrDefault(params[4]) },\n                    { type: Ailment.RecoveryReduction, reductionValue: parseNumberOrDefault(params[2]), chance: parseNumberOrDefault(params[5]) },\n                ].forEach(({ type, reductionValue, chance }) => {\n                    if (reductionValue !== 0 || chance !== 0) {\n                        inflictedReductions.push({ type, reductionValue, chance });\n                    }\n                });\n                debuffTurnDuration = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                [\n                    { type: Ailment.AttackReduction, reductionValueKey: 'inflict atk% debuff (2)', chanceKey: 'inflict atk% debuff chance% (74)' },\n                    { type: Ailment.DefenseReduction, reductionValueKey: 'inflict def% debuff (4)', chanceKey: 'inflict def% debuff chance% (75)' },\n                    { type: Ailment.RecoveryReduction, reductionValueKey: 'inflict rec% debuff (6)', chanceKey: 'inflict rec% debuff chance% (76)' },\n                ].forEach(({ type, reductionValueKey, chanceKey }) => {\n                    const reductionValue = parseNumberOrDefault(effect[reductionValueKey]);\n                    const chance = parseNumberOrDefault(effect[chanceKey]);\n                    if (reductionValue !== 0 || chance !== 0) {\n                        inflictedReductions.push({ type, reductionValue, chance });\n                    }\n                });\n                debuffTurnDuration = parseNumberOrDefault(effect['stat% debuff turns']);\n                turnDuration = parseNumberOrDefault(effect['buff turns']);\n            }\n            const results = inflictedReductions.map(({ type, reductionValue, chance }) => (Object.assign({ id: `proc:51:add to attack-${type}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                } }, targetData)));\n            if (results.length === 0 && (isTurnDurationBuff(context, turnDuration, injectionContext) || isTurnDurationBuff(context, debuffTurnDuration, injectionContext))) {\n                // manually create turn duration buff to account for debuff turn duration\n                results.push(Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n                    sources, value: {\n                        buffs: [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction].map((a) => `proc:51:add to attack-${a}`),\n                        duration: turnDuration,\n                        debuffTurnDuration: debuffTurnDuration,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('52', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'bb gauge fill rate% buff',\n                effectTurnDurationKey: 'buff turns (77)',\n                buffId: 'proc:52:bc efficacy',\n                originalId: '52',\n            });\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            const originalId = '53';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n            const inflictionChances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        inflictionChances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['counter inflict ailment turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(inflictionChances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:53:inflict on hit-${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration, conditions: { whenAttacked: true } }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:53:inflict on hit-${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('54', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'crit multiplier%',\n                effectTurnDurationKey: 'buff turns (84)',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n                buffId: 'proc:54:critical damage boost',\n                originalId: '54',\n            });\n        });\n        map.set('55', (effect, context, injectionContext) => {\n            const originalId = '55';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let elements;\n            let damageBoost = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const params = splitEffectParams(effect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => NON_ZERO_ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                damageBoost = parseNumberOrDefault(params[6]) * 100;\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                elements = Object.values(NON_ZERO_ELEMENT_MAPPING).filter((element) => !!effect[`${element} units do extra elemental weakness dmg`]);\n                damageBoost = parseNumberOrDefault(effect['elemental weakness multiplier%']);\n                turnDuration = parseNumberOrDefault(effect['elemental weakness buff turns']);\n            }\n            let results = [];\n            if (damageBoost !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `proc:55:elemental weakness damage-${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: damageBoost }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'proc:55:elemental weakness damage-unknown', originalId,\n                        sources,\n                        effectDelay, duration: turnDuration, value: damageBoost }, targetData));\n                }\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:55:elemental weakness damage-${e}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('56', (effect, context, injectionContext) => {\n            const originalId = '56';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let chance = 0, recoveredHpPercent = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawChance, rawRecoverHp, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                chance = parseNumberOrDefault(rawChance);\n                recoveredHpPercent = parseNumberOrDefault(rawRecoverHp);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                chance = parseNumberOrDefault(effect['angel idol recover chance%']);\n                recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n                turnDuration = parseNumberOrDefault(effect['angel idol buff turns (91)']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:56:chance ko resistance', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: { 'recoveredHp%': recoveredHpPercent, chance } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:56:chance ko resistance'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('57', (effect, context, injectionContext) => {\n            const originalId = '57';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let bcBaseResist = 0, bcBuffResist = 0;\n            let hcBaseResist = 0, hcBuffResist = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawBcBaseResist, rawBcBuffResist, rawHcBaseResist, rawHcBuffResist, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                bcBaseResist = parseNumberOrDefault(rawBcBaseResist);\n                bcBuffResist = parseNumberOrDefault(rawBcBuffResist);\n                hcBaseResist = parseNumberOrDefault(rawHcBaseResist);\n                hcBuffResist = parseNumberOrDefault(rawHcBuffResist);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                // Deathmax's datamine doesn't parse HC drop resistance\n                bcBaseResist = parseNumberOrDefault(effect['base bc drop% resist buff']);\n                bcBuffResist = parseNumberOrDefault(effect['buffed bc drop% resist buff']);\n                turnDuration = parseNumberOrDefault(effect['bc drop% resist buff turns (92)']);\n            }\n            const results = [];\n            if (bcBaseResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:bc drop resistance-base', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bcBaseResist }, targetData));\n            }\n            if (bcBuffResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:bc drop resistance-buff', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bcBuffResist }, targetData));\n            }\n            if (hcBaseResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:hc drop resistance-base', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: hcBaseResist }, targetData));\n            }\n            if (hcBuffResist !== 0) {\n                results.push(Object.assign({ id: 'proc:57:hc drop resistance-buff', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: hcBuffResist }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: [\n                        'proc:57:bc drop resistance-base',\n                        'proc:57:bc drop resistance-buff',\n                        'proc:57:hc drop resistance-base',\n                        'proc:57:hc drop resistance-buff',\n                    ],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('58', (effect, context, injectionContext) => {\n            const originalId = '58';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let damageIncrease = 0, chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                damageIncrease = parseNumberOrDefault(effect['spark dmg% received']);\n                chance = parseNumberOrDefault(effect['spark dmg received apply%']);\n                turnDuration = parseNumberOrDefault(effect['spark dmg received debuff turns (94)']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:58:spark vulnerability', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: { 'sparkDamage%': damageIncrease, chance } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:58:spark vulnerability'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('59', (effect, context, injectionContext) => {\n            const originalId = '59';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const bb = parseNumberOrDefault(rawBb);\n            const sbb = parseNumberOrDefault(rawSbb);\n            const ubb = parseNumberOrDefault(rawUbb);\n            const turnDuration = parseNumberOrDefault(rawTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'proc:59:attack reduction-bb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'proc:59:attack reduction-sbb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'proc:59:attack reduction-ubb', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: ubb }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:59:attack reduction-${type}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('61', (effect, context, injectionContext) => {\n            const originalId = '61';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'baseAtk%': '0',\n                'maxAddedAtk%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                let rawMaxAttackValue;\n                [params['baseAtk%'], rawMaxAttackValue, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                params['baseAtk%'] = effect['bb base atk%'];\n                params['maxAddedAtk%'] = effect['bb max atk% based on ally bb gauge and clear bb gauges'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            let results;\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results = [\n                    Object.assign({ id: 'proc:61:party bb gauge-scaled attack', originalId,\n                        sources,\n                        effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                            distribution }) }, targetData),\n                    {\n                        id: 'proc:61:party bc drain',\n                        originalId,\n                        sources,\n                        effectDelay,\n                        value: true,\n                        targetArea: TargetArea.Aoe,\n                        targetType: TargetType.Party,\n                    },\n                ];\n            }\n            else {\n                results = [];\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('62', (effect, context, injectionContext) => {\n            const originalId = '62';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let element;\n            let hp = 0, defense = 0, damageAbsorption = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawElement, rawHp, rawDefense, rawDamageAbsorption, ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                hp = parseNumberOrDefault(rawHp);\n                defense = parseNumberOrDefault(rawDefense);\n                damageAbsorption = parseNumberOrDefault(rawDamageAbsorption);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const effectElement = effect['elemental barrier element'];\n                element = (effectElement && Object.values(ELEMENT_MAPPING).find((e) => e === effectElement)) || BuffConditionElement.Unknown;\n                hp = parseNumberOrDefault(effect['elemental barrier hp']);\n                defense = parseNumberOrDefault(effect['elemental barrier def']);\n                damageAbsorption = parseNumberOrDefault(effect['elemental barrier absorb dmg%']);\n            }\n            const results = [];\n            if (hp !== 0 || defense !== 0 || damageAbsorption !== 0) {\n                results.push(Object.assign({ id: `proc:62:barrier-${element}`, originalId,\n                    sources,\n                    effectDelay, value: {\n                        hp,\n                        defense,\n                        'damageAbsorption%': damageAbsorption,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('64', (effect, context, injectionContext) => {\n            const originalId = '64';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'atk%': '0',\n                'addedAtkPerUse%': '0',\n                maxIncreases: '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params['atk%'], params['addedAtkPerUse%'], params.maxIncreases, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                params['atk%'] = effect['bb atk%'];\n                params['addedAtkPerUse%'] = effect['bb atk% inc per use'];\n                params.maxIncreases = effect['bb atk% max number of inc'];\n                params.flatAtk = effect['bb flat atk'];\n                params['crit%'] = effect['bb crit%'];\n                params['bc%'] = effect['bb bc%'];\n                params['hc%'] = effect['bb hc%'];\n                params['dmg%'] = effect['bb dmg%'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:64:consecutive usage attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('65', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'atk% buff when enemy has ailment',\n                effectTurnDurationKey: 'atk% buff turns (110)',\n                buffId: 'proc:65:ailment attack boost',\n                originalId: '65',\n            });\n        });\n        map.set('66', (effect, context, injectionContext) => {\n            const originalId = '66';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let recoveredHp = 0, chance = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawRecoveredHp, rawChance, ...extraParams] = splitEffectParams(effect);\n                recoveredHp = parseNumberOrDefault(rawRecoveredHp);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                recoveredHp = parseNumberOrDefault(effect['revive unit hp%']);\n                chance = parseNumberOrDefault(effect['revive unit chance%']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:66:chance revive', originalId,\n                    sources,\n                    effectDelay, value: { 'reviveToHp%': recoveredHp, chance } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('67', (effect, context, injectionContext) => {\n            return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                originalId: '67',\n                buffId: 'proc:67:bc fill on spark',\n                effectKeyLow: 'bc fill on spark low',\n                effectKeyHigh: 'bc fill on spark high',\n                effectKeyChance: 'bc fill on spark%',\n                effectTurnDurationKey: 'bc fill on spark buff turns (111)',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            });\n        });\n        map.set('68', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'guard increase mitigation%',\n                effectTurnDurationKey: 'guard increase mitigation buff turns (113)',\n                buffId: 'proc:68:guard mitigation',\n                originalId: '68',\n            });\n        });\n        map.set('69', (effect, context, injectionContext) => {\n            const originalId = '69';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let flatFill = 0;\n            let percentFill = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawFlatFill, rawPercentFill, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                if ('bb bc fill on guard' in effect) {\n                    flatFill = parseNumberOrDefault(effect['bb bc fill on guard']);\n                }\n                if ('bb bc fill% on guard' in effect) {\n                    percentFill = parseNumberOrDefault(effect['bb bc fill% on guard']);\n                }\n                turnDuration = parseNumberOrDefault(effect['bb bc fill on guard buff turns (114)']);\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'proc:69:bc fill on guard-flat', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: flatFill, conditions: {\n                        onGuard: true,\n                    } }, targetData));\n            }\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'proc:69:bc fill on guard-percent', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: percentFill, conditions: {\n                        onGuard: true,\n                    } }, targetData));\n            }\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:69:bc fill on guard-flat', 'proc:69:bc fill on guard-percent'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('71', (effect, context, injectionContext) => {\n            return parseProcWithSingleNumericalParameterAndTurnDuration({\n                effect,\n                context,\n                injectionContext,\n                effectValueKey: 'bb fill inc%',\n                effectTurnDurationKey: 'bb fill inc buff turns (112)',\n                buffId: 'proc:71:bc efficacy reduction',\n                originalId: '71',\n            });\n        });\n        map.set('73', (effect, context, injectionContext) => {\n            const originalId = '73';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const AILMENTS_ORDER = [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction];\n            const resistances = {\n                [Ailment.AttackReduction]: '0',\n                [Ailment.DefenseReduction]: '0',\n                [Ailment.RecoveryReduction]: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                let rawDuration, extraParams;\n                [resistances[Ailment.AttackReduction], resistances[Ailment.DefenseReduction], resistances[Ailment.RecoveryReduction], rawDuration, ...extraParams] = splitEffectParams(effect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.includes('resist%'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        resistances[ailment] = effect[correspondingKey];\n                    }\n                });\n                turnDuration = parseNumberOrDefault(effect['stat down immunity buff turns']);\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:73:resist-${ailment}`, originalId,\n                        sources,\n                        effectDelay,\n                        value, duration: turnDuration }, targetData));\n                }\n            });\n            if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: AILMENTS_ORDER.map((a) => `proc:73:resist-${a}`),\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('75', (effect, context, injectionContext) => {\n            const originalId = '75';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const { hits, distribution } = getAttackInformationFromContext(context);\n            const params = {\n                'baseAtk%': '0',\n                'addedAttackPerUnitWithMatchingElement%': '0',\n                flatAtk: '0',\n                'crit%': '0',\n                'bc%': '0',\n                'hc%': '0',\n                'dmg%': '0',\n            };\n            let element;\n            let unknownParams;\n            if (effect.params) {\n                let extraParams, rawElement;\n                [rawElement, params['baseAtk%'], params['addedAttackPerUnitWithMatchingElement%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                // in Deathmax's datamine, this proc is incorrectly parsed as a tri-stat buff\n                const effectElement = effect['counted element for buff multiplier'];\n                if (!effectElement) {\n                    element = BuffConditionElement.Unknown;\n                }\n                else {\n                    element = effectElement;\n                }\n                params['baseAtk%'] = effect['atk% buff (1)'];\n                params['addedAttackPerUnitWithMatchingElement%'] = effect['def% buff (3)'];\n                params.flatAtk = effect['rec% buff (5)'];\n                params['crit%'] = effect['crit% buff (7)'];\n                params['bc%'] = effect['buff turns'];\n            }\n            const filteredValue = Object.entries(params)\n                .filter(([, value]) => value && +value)\n                .reduce((acc, [key, value]) => {\n                acc[key] = parseNumberOrDefault(value);\n                return acc;\n            }, {});\n            const results = [];\n            if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n                results.push(Object.assign({ id: 'proc:75:element squad-scaled attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { elementToMatch: element, hits,\n                        distribution }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('76', (effect, context, injectionContext) => {\n            const originalId = '76';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            let maxExtraActions = 0, chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (effect.params) {\n                const [rawMaxExtraActions, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n                maxExtraActions = parseNumberOrDefault(rawMaxExtraActions);\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                maxExtraActions = parseNumberOrDefault(effect['max number of extra actions']);\n                chance = parseNumberOrDefault(effect['chance% for extra action']);\n                turnDuration = parseNumberOrDefault(effect['extra action buff turns (123)']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'proc:76:extra action', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: { maxExtraActions, chance } }, targetData));\n            }\n            else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: ['proc:76:extra action'],\n                    duration: turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('78', (effect, context, injectionContext) => {\n            const originalId = '78';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const params = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                turnDuration: '0',\n            };\n            const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n            let unknownParams;\n            if (effect.params) {\n                let extraParams;\n                [params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = `self ${statType}% buff`;\n                    if (effectKey in effect) {\n                        params[statType] = effect[effectKey];\n                    }\n                });\n                params.turnDuration = effect['self stat buff turns'];\n            }\n            // ensure numerical properties are actually numbers\n            coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n                params[prop] = parseNumberOrDefault(params[prop]);\n            });\n            const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n            const results = [];\n            if (hasAnyStats) {\n                coreStatProperties.forEach((statKey) => {\n                    const value = params[statKey];\n                    if (value !== 0) {\n                        results.push(Object.assign({ id: `proc:78:self stat boost-${statKey}`, originalId,\n                            sources,\n                            effectDelay, duration: params.turnDuration, value }, targetData));\n                    }\n                });\n            }\n            else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n                results.push(createTurnDurationEntry({\n                    originalId,\n                    sources,\n                    buffs: coreStatProperties.map((statKey) => `proc:78:self stat boost-${statKey}`),\n                    duration: params.turnDuration,\n                    targetData,\n                }));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('79', (effect, context, injectionContext) => {\n            const originalId = '79';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawExpBoost, rawDurationInMinutes = '', ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const expBoost = parseNumberOrDefault(rawExpBoost);\n            const durationInMinutes = parseNumberOrDefault(rawDurationInMinutes);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (expBoost !== 0) {\n                results.push(Object.assign({ id: 'proc:79:player exp boost', originalId,\n                    sources,\n                    effectDelay, value: { 'expBoost%': expBoost, durationInMinutes } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n        map.set('82', (effect, context, injectionContext) => {\n            const originalId = '82';\n            const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [summonGroup, rawPercentHp, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n            const percentHp = parseNumberOrDefault(rawPercentHp);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (summonGroup) {\n                results.push(Object.assign({ id: 'proc:82:resummon', originalId,\n                    sources,\n                    effectDelay, value: {\n                        summonGroup,\n                        'startingHp%': percentHp,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to {@link IBuff} format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given proc effect.\n     */\n    function defaultConversionFunction(effect, context) {\n        const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n                originalId: id,\n                effectDelay: effect['effect delay time(ms)/frame'],\n                targetType: effect['target type'],\n                targetArea: effect['target area'],\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given proc effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Proc effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given proc effect object.\n     */\n    function convertProcEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isProcEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction(effect, context);\n    }\n\n    let mapping$1;\n    /**\n     * @description Retrieve the conditional-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of conditional IDs to functions.\n     */\n    function getConditionalEffectToBuffMapping(reload) {\n        if (!mapping$1 || reload) {\n            mapping$1 = new Map();\n            setMapping$1(mapping$1);\n        }\n        return mapping$1;\n    }\n    /**\n     * @description Apply the mapping of conditional effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$1(map) {\n        const ELEMENT_MAPPING = {\n            0: BuffConditionElement.All,\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n        };\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, }) => (Object.assign({ id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS, originalId,\n            sources, value: unknownParams }, targetData));\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                }));\n            }\n        };\n        const getDefaultTargetData = () => ({ targetType: TargetType.Self, targetArea: TargetArea.Single });\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            const splitParams = typeof effect.params === 'string' ? effect.params.split('&') : [];\n            const targetData = getDefaultTargetData();\n            const turnDuration = parseNumberOrDefault(effect.turnDuration);\n            return { targetData, sources, splitParams, turnDuration };\n        };\n        const parseConditionalWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, buffId, returnBuffWithValueOfZero = false, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawValue, ...extraParams] = splitParams;\n            const value = parseParamValue(rawValue);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            const results = [];\n            if (returnBuffWithValueOfZero || value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources, duration: turnDuration, value }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        };\n        const parseConditionalWithOnlyBaseAndBuffResistanceParameters = ({ effect, context, injectionContext, originalId, baseResistanceBuffId, buffResistanceBuffId, }) => {\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawBaseResist, rawBuffResist, ...extraParams] = splitParams;\n            const baseResist = parseNumberOrDefault(rawBaseResist);\n            const buffResist = parseNumberOrDefault(rawBuffResist);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (baseResist !== 0) {\n                results.push(Object.assign({ id: baseResistanceBuffId, originalId,\n                    sources, duration: turnDuration, value: baseResist }, targetData));\n            }\n            if (buffResist !== 0) {\n                results.push(Object.assign({ id: buffResistanceBuffId, originalId,\n                    sources, duration: turnDuration, value: buffResist }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '1',\n                buffId: 'conditional:1:attack buff',\n            });\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '3',\n                buffId: 'conditional:3:defense buff',\n            });\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '5',\n                buffId: 'conditional:5:recovery buff',\n            });\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            const originalId = '8';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitParams;\n            const healLow = parseNumberOrDefault(rawHealLow);\n            const healHigh = parseNumberOrDefault(rawHealHigh);\n            const addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'conditional:8:gradual heal', originalId,\n                    sources, duration: turnDuration, value: {\n                        healLow,\n                        healHigh,\n                        'addedRec%': addedRec,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '12',\n                buffId: 'conditional:12:guaranteed ko resistance',\n                returnBuffWithValueOfZero: true,\n            });\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            const originalId = '13';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawElement, rawValue, ...extraParams] = splitParams;\n            const element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            const value = parseNumberOrDefault(rawValue);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'conditional:13:elemental attack buff', originalId,\n                    sources, duration: turnDuration, value, conditions: {\n                        targetElements: [element],\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawElement, rawValue, ...extraParams] = splitParams;\n            const element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            const value = parseNumberOrDefault(rawValue);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (value !== 0) {\n                results.push(Object.assign({ id: 'conditional:14:elemental defense buff', originalId,\n                    sources, duration: turnDuration, value, conditions: {\n                        targetElements: [element],\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('21', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '21',\n                buffId: 'conditional:21:fire mitigation',\n            });\n        });\n        map.set('22', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '22',\n                buffId: 'conditional:22:water mitigation',\n            });\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '23',\n                buffId: 'conditional:23:earth mitigation',\n            });\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '24',\n                buffId: 'conditional:24:thunder mitigation',\n            });\n        });\n        map.set('25', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '25',\n                buffId: 'conditional:25:light mitigation',\n            });\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '26',\n                buffId: 'conditional:26:dark mitigation',\n            });\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '36',\n                buffId: 'conditional:36:mitigation',\n            });\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '37',\n                buffId: 'conditional:37:gradual bc fill',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            });\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '40',\n                buffId: 'conditional:40:spark damage',\n            });\n        });\n        map.set('72', (effect, context, injectionContext) => {\n            const originalId = '72';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawBb, rawSbb, rawUbb, ...extraParams] = splitParams;\n            const bb = parseNumberOrDefault(rawBb);\n            const sbb = parseNumberOrDefault(rawSbb);\n            const ubb = parseNumberOrDefault(rawUbb);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'conditional:72:attack boost-bb', originalId,\n                    sources, duration: turnDuration, value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'conditional:72:attack boost-sbb', originalId,\n                    sources, duration: turnDuration, value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'conditional:72:attack boost-ubb', originalId,\n                    sources, duration: turnDuration, value: ubb }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('74', (effect, context, injectionContext) => {\n            const originalId = '74';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawReductionValue, rawChance, rawDebuffTurns, ...extraParams] = splitParams;\n            const reductionValue = parseNumberOrDefault(rawReductionValue);\n            const chance = parseNumberOrDefault(rawChance);\n            const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurns);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (reductionValue !== 0 || chance !== 0 || debuffTurnDuration !== 0) {\n                results.push(Object.assign({ id: 'conditional:74:add atk down to attack', originalId,\n                    sources, duration: turnDuration, value: {\n                        reductionValue,\n                        chance,\n                        debuffTurnDuration,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('75', (effect, context, injectionContext) => {\n            const originalId = '75';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawReductionValue, rawChance, rawDebuffTurns, ...extraParams] = splitParams;\n            const reductionValue = parseNumberOrDefault(rawReductionValue);\n            const chance = parseNumberOrDefault(rawChance);\n            const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurns);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (reductionValue !== 0 || chance !== 0 || debuffTurnDuration !== 0) {\n                results.push(Object.assign({ id: 'conditional:75:add def down to attack', originalId,\n                    sources, duration: turnDuration, value: {\n                        reductionValue,\n                        chance,\n                        debuffTurnDuration,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('84', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '84',\n                buffId: 'conditional:84:critical damage',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            });\n        });\n        map.set('91', (effect, context, injectionContext) => {\n            const originalId = '91';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawChance, rawHpRecover, ...extraParams] = splitParams;\n            const chance = parseNumberOrDefault(rawChance);\n            const hpRecover = parseNumberOrDefault(rawHpRecover);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'conditional:91:chance ko resistance', originalId,\n                    sources, duration: turnDuration, value: {\n                        'hpRecover%': hpRecover,\n                        chance,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('99', (effect, context, injectionContext) => {\n            const originalId = '99';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawElement, rawHp, ...extraParams] = splitParams;\n            const element = ELEMENT_MAPPING[rawElement] || rawElement || BuffConditionElement.Unknown;\n            const hp = parseNumberOrDefault(rawHp);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (hp !== 0) {\n                results.push(Object.assign({ id: 'conditional:99:light barrier', originalId,\n                    sources, duration: turnDuration, value: {\n                        hp,\n                        parsedElement: element,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('98', (effect, context, injectionContext) => {\n            const originalId = '98';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawElement, rawHp, ...extraParams] = splitParams;\n            const element = ELEMENT_MAPPING[rawElement] || rawElement || BuffConditionElement.Unknown;\n            const hp = parseNumberOrDefault(rawHp);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (hp !== 0) {\n                results.push(Object.assign({ id: 'conditional:98:thunder barrier', originalId,\n                    sources, duration: turnDuration, value: {\n                        hp,\n                        parsedElement: element,\n                    } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('132', (effect, context, injectionContext) => {\n            return parseConditionalWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                originalId: '132',\n                buffId: 'conditional:132:od fill rate',\n            });\n        });\n        map.set('133', (effect, context, injectionContext) => {\n            const originalId = '133';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawHealLow, rawHealHigh, rawChance, ...extraParams] = splitParams;\n            const healLow = parseNumberOrDefault(rawHealLow);\n            const healHigh = parseNumberOrDefault(rawHealHigh);\n            const chance = parseNumberOrDefault(rawChance);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'conditional:133:heal on hit', originalId,\n                    sources, duration: turnDuration, value: {\n                        healLow,\n                        healHigh,\n                        chance,\n                    }, conditions: { whenAttacked: true } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n        map.set('143', (effect, context, injectionContext) => {\n            return parseConditionalWithOnlyBaseAndBuffResistanceParameters({\n                effect,\n                context,\n                injectionContext,\n                originalId: '143',\n                baseResistanceBuffId: 'conditional:143:critical damage reduction-base',\n                buffResistanceBuffId: 'conditional:143:critical damage reduction-buff',\n            });\n        });\n        map.set('145', (effect, context, injectionContext) => {\n            return parseConditionalWithOnlyBaseAndBuffResistanceParameters({\n                effect,\n                context,\n                injectionContext,\n                originalId: '145',\n                baseResistanceBuffId: 'conditional:145:elemental weakness damage reduction-base',\n                buffResistanceBuffId: 'conditional:145:elemental weakness damage reduction-buff',\n            });\n        });\n        map.set('153', (effect, context, injectionContext) => {\n            const originalId = '153';\n            const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawReductionValue, rawChance, rawDebuffTurnDuration, ...extraParams] = splitParams;\n            const reductionValue = parseNumberOrDefault(rawReductionValue);\n            const chance = parseNumberOrDefault(rawChance);\n            const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurnDuration);\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            const results = [];\n            if (reductionValue !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'conditional:153:chance inflict atk down on hit', originalId,\n                    sources, duration: turnDuration, value: {\n                        reductionValue,\n                        chance,\n                        debuffTurnDuration,\n                    }, conditions: { whenAttacked: true } }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to {@link IBuff} format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given conditional effect.\n     */\n    function defaultConversionFunction$1(effect, context) {\n        const id = effect.id || KNOWN_CONDITIONAL_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given conditional effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Conditional effect to extract buffs from\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertConditionalEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const conversionFunction = getConditionalEffectToBuffMapping(context.reloadMapping).get(effect.id);\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$1(effect, context);\n    }\n\n    let mapping$2;\n    /**\n     * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n     * lazy-loaded singleton to not impact first-load performance.\n     * @param reload Optionally re-create the mapping.\n     * @returns Mapping of passive IDs to functions.\n     */\n    function getPassiveEffectToBuffMapping(reload) {\n        if (!mapping$2 || reload) {\n            mapping$2 = new Map();\n            setMapping$2(mapping$2);\n        }\n        return mapping$2;\n    }\n    /**\n     * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n     * @param map Map to add conversion mapping onto.\n     * @returns Does not return anything.\n     * @internal\n     */\n    function setMapping$2(map) {\n        const UNKNOWN_PASSIVE_PARAM_EFFECT_KEY = 'unknown passive params';\n        const ELEMENT_MAPPING = {\n            1: UnitElement.Fire,\n            2: UnitElement.Water,\n            3: UnitElement.Earth,\n            4: UnitElement.Thunder,\n            5: UnitElement.Light,\n            6: UnitElement.Dark,\n            X: BuffConditionElement.OmniParadigm,\n        };\n        const TYPE_MAPPING = {\n            1: UnitType.Lord,\n            2: UnitType.Anima,\n            3: UnitType.Breaker,\n            4: UnitType.Guardian,\n            5: UnitType.Oracle,\n            6: UnitType.Rex,\n        };\n        const AILMENT_MAPPING = {\n            1: Ailment.Poison,\n            2: Ailment.Weak,\n            3: Ailment.Sick,\n            4: Ailment.Injury,\n            5: Ailment.Curse,\n            6: Ailment.Paralysis,\n            7: Ailment.AttackReduction,\n            8: Ailment.DefenseReduction,\n            9: Ailment.RecoveryReduction,\n        };\n        const TARGET_TYPE_MAPPING = {\n            1: TargetType.Party,\n            2: TargetType.Enemy,\n            3: TargetType.Self,\n        };\n        const TARGET_AREA_MAPPING = {\n            1: TargetArea.Single,\n            2: TargetArea.Aoe,\n        };\n        const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n        const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n            const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n            const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n            const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n            return { conditionInfo, targetData, sources };\n        };\n        const convertConditionalEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n            const conversionFunction = (injectionContext && injectionContext.convertConditionalEffectToBuffs) || convertConditionalEffectToBuffs;\n            return conversionFunction(effect, context);\n        };\n        const convertProcEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n            const conversionFunction = (injectionContext && injectionContext.convertProcEffectToBuffs) || convertProcEffectToBuffs;\n            return conversionFunction(effect, context);\n        };\n        // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const splitEffectParams = (effect) => effect.params.split(',');\n        const splitEffectWithUnknownPassiveParamsProperty = (effect) => {\n            const rawParams = effect.params || effect[UNKNOWN_PASSIVE_PARAM_EFFECT_KEY] || '';\n            return splitEffectParams({ params: rawParams });\n        };\n        const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n            sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n        /**\n         * @description Common checks that are run for most effects after the params have been parsed\n         * into an array of {@link IBuff} but before said array is returned.\n         * @param results List of buffs from the given effect.\n         * @param unknownParams Any unknown parameters from the given effect.\n         * @param parsingContext Extra metadata extracted from the given effect.\n         * @returns {undefined} No value is returned, but it does update the `results` array.\n         */\n        const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n            if (results.length === 0) {\n                results.push(createNoParamsEntry({ originalId, sources }));\n            }\n            if (unknownParams) {\n                results.push(createUnknownParamsEntry(unknownParams, {\n                    originalId,\n                    sources,\n                    targetData,\n                    conditionInfo,\n                }));\n            }\n        };\n        let ThresholdType;\n        (function (ThresholdType) {\n            ThresholdType[\"Hp\"] = \"hp\";\n            ThresholdType[\"Bb\"] = \"bb gauge\";\n            ThresholdType[\"DamageTaken\"] = \"damage taken\";\n            ThresholdType[\"DamageDealt\"] = \"damage dealt\";\n            ThresholdType[\"BcReceived\"] = \"bc receive count\";\n        })(ThresholdType || (ThresholdType = {}));\n        const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n            return {\n                threshold: parseNumberOrDefault(rawThreshold),\n                requireAbove: rawRequireAboveFlag === '1',\n                type: thresholdType,\n            };\n        };\n        const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n            let effectKey, requireAbove = true;\n            if (thresholdType === ThresholdType.DamageTaken) {\n                effectKey = 'damage threshold activation';\n            }\n            else if (thresholdType === ThresholdType.DamageDealt) {\n                effectKey = 'damage dealt threshold activation';\n            }\n            else if (thresholdType === ThresholdType.BcReceived) {\n                effectKey = 'bc receive count buff activation';\n            }\n            else if (`${thresholdType} above % ${suffix}` in effect) {\n                effectKey = `${thresholdType} above % ${suffix}`;\n            }\n            else {\n                effectKey = `${thresholdType} below % ${suffix}`;\n                requireAbove = false;\n            }\n            return {\n                threshold: parseNumberOrDefault(effect[effectKey]),\n                requireAbove,\n                type: thresholdType,\n            };\n        };\n        const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n            let conditions;\n            if (type === ThresholdType.Hp) {\n                if (requireAbove) {\n                    conditions = { hpGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { hpLessThanOrEqualTo: threshold };\n                }\n            }\n            else if (type === ThresholdType.Bb) {\n                if (requireAbove) {\n                    conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n                }\n                else {\n                    conditions = { bbGaugeLessThanOrEqualTo: threshold };\n                }\n            }\n            else if (type === ThresholdType.DamageTaken) {\n                conditions = { damageTakenExceeds: threshold };\n            }\n            else if (type === ThresholdType.DamageDealt) {\n                conditions = { damageDealtExceeds: threshold };\n            }\n            else if (type === ThresholdType.BcReceived) {\n                conditions = { bcReceivedExceeds: threshold };\n            }\n            return conditions;\n        };\n        const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let value = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseParamValue(rawValue);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect[effectKey]);\n            }\n            if (value !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let valueLow, valueHigh, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                valueLow = parseParamValue(rawLowValue);\n                valueHigh = parseParamValue(rawHighValue);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n                valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n                chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n            }\n            const results = [];\n            if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: buffId, originalId,\n                    sources, value: {\n                        [buffKeyLow]: valueLow,\n                        [buffKeyHigh]: valueHigh,\n                        chance,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        };\n        map.set('1', (effect, context, injectionContext) => {\n            const originalId = '1';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('2', (effect, context, injectionContext) => {\n            const originalId = '2';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                elements: [],\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let element1, element2;\n                [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                [element1, element2].forEach((elementValue) => {\n                    if (elementValue && elementValue !== '0') {\n                        stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                if (Array.isArray(typedEffect['elements buffed'])) {\n                    stats.elements = typedEffect['elements buffed'];\n                }\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:elemental-${stat}`, originalId,\n                sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n            if (stats.elements.length > 0) {\n                stats.elements.forEach((element) => {\n                    STATS_ORDER.forEach((stat) => {\n                        const value = parseNumberOrDefault(stats[stat]);\n                        if (value !== 0) {\n                            results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                        }\n                    });\n                });\n            }\n            else {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                    }\n                });\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('3', (effect, context, injectionContext) => {\n            const originalId = '3';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                unitType: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let unitType;\n                [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                if (unitType && unitType !== '0') {\n                    stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.unitType = typedEffect['unit type buffed'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetUnitType = stats.unitType || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:3:type based-${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('4', (effect, context, injectionContext) => {\n            const originalId = '4';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:4:resist-${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('5', (effect, context, injectionContext) => {\n            const originalId = '5';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let element;\n            let mitigation = '0';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawElement;\n                [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n                element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n                if (element !== BuffConditionElement.Unknown) {\n                    mitigation = typedEffect[`${element} resist%`];\n                }\n            }\n            const value = parseNumberOrDefault(mitigation);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:5:mitigate-${element}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('8', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'dmg% mitigation',\n                buffId: 'passive:8:mitigation',\n                originalId: '8',\n            });\n        });\n        map.set('9', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bc fill per turn',\n                buffId: 'passive:9:gradual bc fill',\n                originalId: '9',\n            });\n        });\n        map.set('10', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'hc effectiveness%',\n                buffId: 'passive:10:hc efficacy',\n                originalId: '10',\n            });\n        });\n        map.set('11', (effect, context, injectionContext) => {\n            const originalId = '11';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:11:hp conditional-${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('12', (effect, context, injectionContext) => {\n            const originalId = '12';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    const entry = Object.assign({ id: `passive:12:hp conditional drop boost-${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('13', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '13',\n                effectKeyLow: 'bc fill on enemy defeat low',\n                effectKeyHigh: 'bc fill on enemy defeat high',\n                effectKeyChance: 'bc fill on enemy defeat%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                buffId: 'passive:13:bc fill on enemy defeat',\n            });\n        });\n        map.set('14', (effect, context, injectionContext) => {\n            const originalId = '14';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageReduction, chance;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                damageReduction = parseNumberOrDefault(rawReduction);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n                chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n            }\n            const results = [];\n            if (damageReduction !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:14:chance mitigation', originalId,\n                    sources, value: {\n                        value: damageReduction,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('15', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '15',\n                effectKeyLow: 'hp% recover on enemy defeat low',\n                effectKeyHigh: 'hp% recover on enemy defeat high',\n                effectKeyChance: 'hp% recover on enemy defeat chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ onEnemyDefeat: true }),\n                defaultEffectChance: 100,\n                buffId: 'passive:15:heal on enemy defeat',\n            });\n        });\n        map.set('16', (effect, context, injectionContext) => {\n            const originalId = '16';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n                healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:16:heal on win', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('17', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '17',\n                effectKeyLow: 'hp drain% low',\n                effectKeyHigh: 'hp drain% high',\n                effectKeyChance: 'hp drain chance%',\n                buffKeyLow: 'drainHealLow',\n                buffKeyHigh: 'drainHealHigh',\n                buffId: 'passive:17:hp absorb',\n            });\n        });\n        map.set('19', (effect, context, injectionContext) => {\n            const originalId = '19';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n                });\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:19:drop boost-${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('20', (effect, context, injectionContext) => {\n            const originalId = '20';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const inflictedAilments = [];\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                let params = splitEffectParams(typedEffect);\n                if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                    unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                    params = params.slice(0, params.length - 1);\n                }\n                const numParams = params.length;\n                for (let index = 0; index < numParams; index += 2) {\n                    const ailmentValue = params[index];\n                    const chance = parseNumberOrDefault(params[index + 1]);\n                    if (ailmentValue !== '0' || chance !== 0) {\n                        const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                        inflictedAilments.push({\n                            ailment: ailmentType,\n                            chance,\n                        });\n                    }\n                }\n            }\n            else {\n                Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                    let effectKey;\n                    if (ailment === Ailment.Weak) {\n                        effectKey = 'weaken%';\n                    }\n                    else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                        effectKey = ailment;\n                    }\n                    else {\n                        effectKey = `${ailment}%`;\n                    }\n                    if (effectKey in effect) {\n                        inflictedAilments.push({\n                            ailment,\n                            chance: parseNumberOrDefault(typedEffect[effectKey]),\n                        });\n                    }\n                });\n            }\n            const results = [];\n            inflictedAilments.forEach(({ ailment, chance }) => {\n                if (chance !== 0) {\n                    results.push(Object.assign({ id: `passive:20:chance inflict-${ailment}`, originalId,\n                        sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('21', (effect, context, injectionContext) => {\n            const originalId = '21';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let rawDuration, extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n                turnDuration = parseNumberOrDefault(rawDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['first x turns atk% (1)'];\n                stats.def = typedEffect['first x turns def% (3)'];\n                stats.rec = typedEffect['first x turns rec% (5)'];\n                stats.crit = typedEffect['first x turns crit% (7)'];\n                turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:21:first turn-${stat}`, originalId,\n                        sources,\n                        value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('23', (effect, context, injectionContext) => {\n            const originalId = '23';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let fillLow, fillHigh;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n                fillLow = parseNumberOrDefault(rawFillLow) / 100;\n                fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n                fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n            }\n            const results = [];\n            if (fillLow !== 0 || fillHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:23:bc fill on win', originalId,\n                    sources, value: {\n                        fillLow,\n                        fillHigh,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('24', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '24',\n                effectKeyLow: 'dmg% to hp when attacked low',\n                effectKeyHigh: 'dmg% to hp when attacked high',\n                effectKeyChance: 'dmg% to hp when attacked chance%',\n                buffKeyLow: 'healLow',\n                buffKeyHigh: 'healHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:24:heal on hit',\n            });\n        });\n        map.set('25', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '25',\n                effectKeyLow: 'bc fill when attacked low',\n                effectKeyHigh: 'bc fill when attacked high',\n                effectKeyChance: 'bc fill when attacked%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:25:bc fill on hit',\n            });\n        });\n        map.set('26', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '26',\n                effectKeyLow: 'dmg% reflect low',\n                effectKeyHigh: 'dmg% reflect high',\n                effectKeyChance: 'dmg% reflect chance%',\n                buffKeyLow: 'damageReflectLow',\n                buffKeyHigh: 'damageReflectHigh',\n                generateBaseConditions: () => ({ whenAttacked: true }),\n                buffId: 'passive:26:chance damage reflect',\n            });\n        });\n        map.set('27', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'target% chance',\n                buffId: 'passive:27:target chance change',\n                originalId: '27',\n            });\n        });\n        map.set('28', (effect, context, injectionContext) => {\n            const originalId = '28';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let value = 0;\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                value = parseNumberOrDefault(rawValue);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                value = parseNumberOrDefault(typedEffect['target% chance']);\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n            }\n            const results = [];\n            if (value !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                const entry = Object.assign({ id: 'passive:28:hp conditional target chance change', originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('29', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'ignore def%',\n                buffId: 'passive:29:chance def ignore',\n                originalId: '29',\n            });\n        });\n        map.set('30', (effect, context, injectionContext) => {\n            const originalId = '30';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n            };\n            let thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawRequireAboveFlag;\n                let rawThreshold;\n                [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n            }\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (stat !== 'hp' && value !== 0) {\n                    const entry = Object.assign({ id: `passive:30:bb gauge conditional-${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                    results.push(entry);\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('31', (effect, context, injectionContext) => {\n            const originalId = '31';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const dropRates = {\n                bc: '0',\n                hc: '0',\n                item: '0',\n                zel: '0',\n                karma: '0',\n            };\n            let sparkDamageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawSparkDamageBoost;\n                [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n                sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n                DROP_TYPES_ORDER.forEach((dropType) => {\n                    dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n                });\n            }\n            const results = [];\n            if (sparkDamageBoost !== 0) {\n                results.push(Object.assign({ id: 'passive:31:spark-damage', originalId,\n                    sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                const value = parseNumberOrDefault(dropRates[dropType]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:31:spark-${dropType}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('32', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'bb gauge fill rate%',\n                buffId: 'passive:32:bc efficacy',\n                originalId: '32',\n            });\n        });\n        map.set('33', (effect, context, injectionContext) => {\n            const originalId = '33';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let healLow, healHigh, addedRec;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n                healLow = parseNumberOrDefault(rawHealLow);\n                healHigh = parseNumberOrDefault(rawHealHigh);\n                addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n                healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n                addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n            }\n            const results = [];\n            if (healLow !== 0 || healHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:33:gradual heal', originalId,\n                    sources, value: {\n                        healLow,\n                        healHigh,\n                        'addedRec%': addedRec,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('34', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'crit multiplier%',\n                buffId: 'passive:34:critical damage',\n                originalId: '34',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            });\n        });\n        map.set('35', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '35',\n                effectKeyLow: 'bc fill when attacking low',\n                effectKeyHigh: 'bc fill when attacking high',\n                effectKeyChance: 'bc fill when attacking%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onNormalAttack: true }),\n                buffId: 'passive:35:bc fill on normal attack',\n            });\n        });\n        map.set('36', (effect, context, injectionContext) => {\n            const originalId = '36';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let additionalActions = 0, damageModifier = 0, chance = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n                additionalActions = parseNumberOrDefault(rawAdditionalActions);\n                damageModifier = parseNumberOrDefault(rawDamageModifier);\n                chance = parseNumberOrDefault(rawChance);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n            }\n            const results = [];\n            if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n                results.push(Object.assign({ id: 'passive:36:extra action', originalId,\n                    sources, value: {\n                        additionalActions,\n                        damageModifier,\n                        chance,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('37', (effect, context, injectionContext) => {\n            const originalId = '37';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let hitIncreasePerHit = 0, extraHitDamage = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                hitIncreasePerHit = parseNumberOrDefault(params[0]);\n                extraHitDamage = parseNumberOrDefault(params[2]);\n                const extraParams = ['0', params[1], '0', ...params.slice(3)];\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n            }\n            else {\n                hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n                extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n            }\n            const results = [];\n            if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n                results.push(Object.assign({ id: 'passive:37:hit count boost', originalId,\n                    sources, value: {\n                        hitIncreasePerHit,\n                        extraHitDamage,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('40', (effect, context, injectionContext) => {\n            const originalId = '40';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const coreStatProperties = ['atk', 'def', 'rec'];\n            const coreStatPropertyMapping = {\n                1: 'atk',\n                2: 'def',\n                3: 'rec',\n                4: 'hp',\n            };\n            const effectToCoreStatMapping = {\n                attack: 'atk',\n                defense: 'def',\n                recovery: 'rec',\n                hp: 'hp',\n            };\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n            };\n            let convertedStat = 'unknown';\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawConvertedStat;\n                [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n                convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                const rawConvertedStat = typedEffect['converted attribute'];\n                if (rawConvertedStat in effectToCoreStatMapping) {\n                    convertedStat = effectToCoreStatMapping[rawConvertedStat];\n                }\n                else {\n                    convertedStat = 'unknown';\n                }\n                coreStatProperties.forEach((statType) => {\n                    const effectKey = `${statType}% buff`;\n                    if (effectKey in typedEffect) {\n                        stats[statType] = typedEffect[effectKey];\n                    }\n                });\n            }\n            const results = [];\n            coreStatProperties.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:40:converted-${stat}`, originalId,\n                        sources, value: {\n                            convertedStat,\n                            value,\n                        }, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('41', (effect, context, injectionContext) => {\n            const originalId = '41';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                minimumElements: '0',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.minimumElements = typedEffect['unique elements required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const minimumElements = parseNumberOrDefault(stats.minimumElements);\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:41:unique element count-${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minimumUniqueElements: minimumElements }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('42', (effect, context, injectionContext) => {\n            const originalId = '42';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const GENDER_MAPPING = {\n                0: UnitGender.Other,\n                1: UnitGender.Male,\n                2: UnitGender.Female,\n            };\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                gender: '',\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                let rawGender;\n                [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                stats.gender = typedEffect['gender required'];\n                stats.hp = typedEffect['hp% buff'];\n                stats.atk = typedEffect['atk% buff'];\n                stats.def = typedEffect['def% buff'];\n                stats.rec = typedEffect['rec% buff'];\n                stats.crit = typedEffect['crit% buff'];\n            }\n            const targetGender = stats.gender || 'unknown';\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:42:gender-${stat}`, originalId,\n                        sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('43', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'take 1 dmg%',\n                buffId: 'passive:43:chance damage to one',\n                originalId: '43',\n            });\n        });\n        map.set('44', (effect, context, injectionContext) => {\n            const originalId = '44';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            const stats = {\n                atk: '0',\n                def: '0',\n                rec: '0',\n                crit: '0',\n                hp: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n            }\n            else {\n                stats.hp = typedEffect['hp buff'];\n                stats.atk = typedEffect['atk buff'];\n                stats.def = typedEffect['def buff'];\n                stats.rec = typedEffect['rec buff'];\n                stats.crit = typedEffect['crit buff'];\n            }\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:44:flat-${stat}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('45', (effect, context, injectionContext) => {\n            const originalId = '45';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let baseResist = 0, buffResist = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n                baseResist = parseNumberOrDefault(rawBaseResist);\n                buffResist = parseNumberOrDefault(rawBuffResist);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                baseResist = parseNumberOrDefault(typedEffect['base crit% resist']);\n                buffResist = parseNumberOrDefault(typedEffect['buff crit% resist']);\n            }\n            const results = [];\n            if (baseResist !== 0) {\n                results.push(Object.assign({ id: 'passive:45:critical damage reduction-base', originalId,\n                    sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buffResist !== 0) {\n                results.push(Object.assign({ id: 'passive:45:critical damage reduction-buff', originalId,\n                    sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('46', (effect, context, injectionContext) => {\n            const originalId = '46';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const availableStats = ['atk', 'def', 'rec'];\n            const stats = [];\n            let proportionalMode = 'unknown';\n            const typedEffect = effect;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                availableStats.forEach((stat, index) => {\n                    const baseValue = parseNumberOrDefault(params[index * 2]);\n                    const addedValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                    if (baseValue !== 0 || addedValue !== 0) {\n                        stats.push({\n                            stat,\n                            baseValue,\n                            addedValue,\n                        });\n                    }\n                });\n                proportionalMode = params[6] === '1' ? 'lost' : 'remaining';\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                availableStats.forEach((stat) => {\n                    const baseValue = parseNumberOrDefault(typedEffect[`${stat}% base buff`]);\n                    const addedValue = parseNumberOrDefault(typedEffect[`${stat}% extra buff based on hp`]);\n                    if (baseValue !== 0 || addedValue !== 0) {\n                        stats.push({\n                            stat,\n                            baseValue,\n                            addedValue,\n                        });\n                    }\n                });\n                proportionalMode = typedEffect['buff proportional to hp'] || 'unknown';\n            }\n            const results = stats.map(({ stat, baseValue, addedValue }) => (Object.assign({ id: `passive:46:hp scaled-${stat}`, originalId,\n                sources, value: {\n                    baseValue,\n                    addedValue,\n                    proportionalMode,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('47', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '47',\n                effectKeyLow: 'bc fill on spark low',\n                effectKeyHigh: 'bc fill on spark high',\n                effectKeyChance: 'bc fill on spark%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                buffId: 'passive:47:bc fill on spark',\n            });\n        });\n        map.set('48', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'reduced bb bc cost%',\n                buffId: 'passive:48:bc cost reduction',\n                originalId: '48',\n            });\n        });\n        map.set('49', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '49',\n                effectKeyLow: 'reduced bb bc use% low',\n                effectKeyHigh: 'reduced bb bc use% high',\n                effectKeyChance: 'reduced bb bc use chance%',\n                buffKeyLow: 'reducedUseLow%',\n                buffKeyHigh: 'reducedUseHigh%',\n                buffId: 'passive:49:bb gauge consumption reduction',\n            });\n        });\n        map.set('50', (effect, context, injectionContext) => {\n            const originalId = '50';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let damageBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                damageBoost = parseNumberOrDefault(params[6]) * 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`${element} units do extra elemental weakness dmg`]);\n                damageBoost = parseNumberOrDefault(typedEffect['elemental weakness multiplier%']);\n            }\n            let results = [];\n            if (damageBoost !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:50:elemental weakness damage-${element}`, originalId,\n                    sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:50:elemental weakness damage-unknown', originalId,\n                        sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('53', (effect, context, injectionContext) => {\n            const originalId = '53';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let ResistType;\n            (function (ResistType) {\n                ResistType[\"CriticalDamage\"] = \"critical damage\";\n                ResistType[\"ElementDamage\"] = \"element damage\";\n                ResistType[\"CriticalHitRate\"] = \"critical rate\";\n            })(ResistType || (ResistType = {}));\n            const resistances = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseCritChanceResist, rawBuffCritChanceResist, ...extraParams] = splitEffectParams(typedEffect);\n                [\n                    { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                    { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                    { resistType: ResistType.CriticalHitRate, base: parseNumberOrDefault(rawBaseCritChanceResist), buff: parseNumberOrDefault(rawBuffCritChanceResist) },\n                ].forEach(({ resistType, base, buff }) => {\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                [\n                    { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist%', buffKey: 'crit dmg buffed damage resist%' },\n                    { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist%', buffKey: 'strong buffed element damage resist%' },\n                    { resistType: ResistType.CriticalHitRate, baseKey: 'crit chance base resist%', buffKey: 'crit chance buffed resist%' },\n                ].forEach(({ resistType, baseKey, buffKey }) => {\n                    const base = parseNumberOrDefault(typedEffect[baseKey]);\n                    const buff = parseNumberOrDefault(typedEffect[buffKey]);\n                    if (base !== 0 || buff !== 0) {\n                        resistances.push({ resistType, base, buff });\n                    }\n                });\n            }\n            const results = [];\n            resistances.forEach(({ resistType, base, buff }) => {\n                if (base !== 0) {\n                    results.push(Object.assign({ id: `passive:53:${resistType}-base`, originalId,\n                        sources, value: base, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n                if (buff !== 0) {\n                    results.push(Object.assign({ id: `passive:53:${resistType}-buff`, originalId,\n                        sources, value: buff, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('55', (effect, context, injectionContext) => {\n            const originalId = '55';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                    id: params[0],\n                    params: params[1],\n                    turnDuration: parseNumberOrDefault(params[5]),\n                }, context, injectionContext);\n                const maxTriggerCount = parseNumberOrDefault(params[2]);\n                const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], params[4], ThresholdType.Hp);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(6), 6, injectionContext);\n                if (triggeredBuffs.length > 0) {\n                    const thresholdConditions = getThresholdConditions(thresholdInfo);\n                    results.push(Object.assign({ id: 'passive:55:hp conditional', originalId,\n                        sources, value: {\n                            triggeredBuffs,\n                            maxTriggerCount,\n                        }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('58', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'guard increase mitigation%',\n                buffId: 'passive:58:guard mitigation',\n                originalId: '58',\n            });\n        });\n        map.set('59', (effect, context, injectionContext) => {\n            const originalId = '59';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let percentFill, flatFill;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled when attacked while guarded']);\n                flatFill = parseNumberOrDefault(typedEffect['bc filled when attacked while guarded']);\n            }\n            const results = [];\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-percent', originalId,\n                    sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n            }\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-flat', originalId,\n                    sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('61', (effect, context, injectionContext) => {\n            const originalId = '61';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let percentFill, flatFill;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n                percentFill = parseNumberOrDefault(rawPercentFill);\n                flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled on guard']);\n                flatFill = parseNumberOrDefault(typedEffect['bc filled on guard']);\n            }\n            const results = [];\n            if (percentFill !== 0) {\n                results.push(Object.assign({ id: 'passive:61:bc fill on guard-percent', originalId,\n                    sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n            }\n            if (flatFill !== 0) {\n                results.push(Object.assign({ id: 'passive:61:bc fill on guard-flat', originalId,\n                    sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('62', (effect, context, injectionContext) => {\n            const originalId = '62';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let mitigation = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                mitigation = parseNumberOrDefault(params[6]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n                mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n            }\n            let results = [];\n            if (mitigation !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:62:mitigate-${element}`, originalId,\n                    sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:62:mitigate-unknown', originalId,\n                        sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('63', (effect, context, injectionContext) => {\n            const originalId = '63';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let elements;\n            let mitigation = 0, turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                elements = params.filter((value, index) => value !== '0' && index < 6)\n                    .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n                mitigation = parseNumberOrDefault(params[6]);\n                turnDuration = parseNumberOrDefault(params[7]);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n            }\n            else {\n                elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n                mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n                turnDuration = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks buff for first x turns']);\n            }\n            let results = [];\n            if (mitigation !== 0) {\n                results = elements.map((element) => (Object.assign({ id: `passive:63:first turn mitigate-${element}`, originalId,\n                    sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n                if (results.length === 0) {\n                    results.push(Object.assign({ id: 'passive:63:first turn mitigate-unknown', originalId,\n                        sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('64', (effect, context, injectionContext) => {\n            const originalId = '64';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let bb = 0, sbb = 0, ubb = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBb, rawSbb, rawUbb, ...extraParams] = splitEffectParams(typedEffect);\n                bb = parseNumberOrDefault(rawBb);\n                sbb = parseNumberOrDefault(rawSbb);\n                ubb = parseNumberOrDefault(rawUbb);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                bb = parseNumberOrDefault(typedEffect['bb atk% buff']);\n                sbb = parseNumberOrDefault(typedEffect['sbb atk% buff']);\n                ubb = parseNumberOrDefault(typedEffect['ubb atk% buff']);\n            }\n            const results = [];\n            if (bb !== 0) {\n                results.push(Object.assign({ id: 'passive:64:attack boost-bb', originalId,\n                    sources, conditions: Object.assign({}, conditionInfo), value: bb }, targetData));\n            }\n            if (sbb !== 0) {\n                results.push(Object.assign({ id: 'passive:64:attack boost-sbb', originalId,\n                    sources, conditions: Object.assign({}, conditionInfo), value: sbb }, targetData));\n            }\n            if (ubb !== 0) {\n                results.push(Object.assign({ id: 'passive:64:attack boost-ubb', originalId,\n                    sources, conditions: Object.assign({}, conditionInfo), value: ubb }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('65', (effect, context, injectionContext) => {\n            return parsePassiveWithNumericalValueRangeAndChance({\n                effect,\n                context,\n                injectionContext,\n                originalId: '65',\n                effectKeyLow: 'bc fill on crit min',\n                effectKeyHigh: 'bc fill on crit max',\n                effectKeyChance: 'bc fill on crit%',\n                buffKeyLow: 'fillLow',\n                buffKeyHigh: 'fillHigh',\n                parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n                generateBaseConditions: () => ({ onCriticalHit: true }),\n                buffId: 'passive:65:bc fill on crit',\n            });\n        });\n        map.set('66', (effect, context, injectionContext) => {\n            const originalId = '66';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let triggeredBuffs = [];\n            let triggerOnBb = false, triggerOnSbb = false, triggerOnUbb = false;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawProcIds, rawParams = '', rawTargetTypes = '', rawTargetAreas = '', rawStartFrames = '', rawTriggerOnBb, rawTriggerOnSbb, rawTriggerOnUbb, ...extraParams] = splitEffectParams(typedEffect);\n                const allProcIds = rawProcIds.split('~');\n                const allProcParams = rawParams.split('~');\n                const allTargetTypes = rawTargetTypes.split('~');\n                const allTargetAreas = rawTargetAreas.split('~');\n                const allStartFrames = rawStartFrames.split('~');\n                const FRAME_IN_MS = (16 + (2 / 3));\n                allProcIds.forEach((procId, index) => {\n                    const params = (allProcParams[index] || '').replace(/&/g, ',');\n                    const targetType = allTargetTypes[index];\n                    const targetArea = allTargetAreas[index];\n                    const startFrame = parseNumberOrDefault(allStartFrames[index]);\n                    const effectDelayInMs = (startFrame * FRAME_IN_MS).toFixed(1);\n                    const procEffect = {\n                        'proc id': procId,\n                        params,\n                        'effect delay time(ms)/frame': `${effectDelayInMs}/${startFrame}`,\n                        'target area': TARGET_AREA_MAPPING[targetArea] || targetArea || 'unknown target area',\n                        'target type': TARGET_TYPE_MAPPING[targetType] || targetType || 'unknown target type',\n                    };\n                    const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                    triggeredBuffs = triggeredBuffs.concat(procBuffs);\n                });\n                triggerOnBb = rawTriggerOnBb === '1';\n                triggerOnSbb = rawTriggerOnSbb === '1';\n                triggerOnUbb = rawTriggerOnUbb === '1';\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n            }\n            else {\n                const triggeredEffects = typedEffect['triggered effect'];\n                if (Array.isArray(triggeredEffects)) {\n                    triggeredEffects.forEach((procEffect) => {\n                        const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                        triggeredBuffs = triggeredBuffs.concat(procBuffs);\n                    });\n                }\n                triggerOnBb = !!typedEffect['trigger on bb'];\n                triggerOnSbb = !!typedEffect['trigger on sbb'];\n                triggerOnUbb = !!typedEffect['trigger on ubb'];\n            }\n            const results = [];\n            if ((triggerOnBb || triggerOnSbb || triggerOnUbb) && triggeredBuffs.length > 0) {\n                const addBuffOfBurstType = (burstType) => {\n                    results.push(Object.assign({ id: `passive:66:add effect to skill-${burstType}`, originalId,\n                        sources, value: triggeredBuffs, conditions: Object.assign({}, conditionInfo) }, targetData));\n                };\n                if (triggerOnBb) {\n                    addBuffOfBurstType('bb');\n                }\n                if (triggerOnSbb) {\n                    addBuffOfBurstType('sbb');\n                }\n                if (triggerOnUbb) {\n                    addBuffOfBurstType('ubb');\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('69', (effect, context, injectionContext) => {\n            const originalId = '69';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let recoveredHp = 0, maxCount = 0;\n            let chanceLow = 0, chanceHigh = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawRecoveredHp, rawMaxCount, rawChanceLow, rawChanceHigh, ...extraParams] = splitEffectParams(typedEffect);\n                recoveredHp = parseNumberOrDefault(rawRecoveredHp);\n                maxCount = parseNumberOrDefault(rawMaxCount);\n                chanceLow = parseNumberOrDefault(rawChanceLow);\n                chanceHigh = parseNumberOrDefault(rawChanceHigh);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n            }\n            else {\n                recoveredHp = parseNumberOrDefault(typedEffect['angel idol recover hp%']);\n                maxCount = parseNumberOrDefault(typedEffect['angel idol recover counts']);\n                chanceLow = parseNumberOrDefault(typedEffect['angel idol recover chance% low']);\n                chanceHigh = parseNumberOrDefault(typedEffect['angel idol recover chance% high']);\n            }\n            const results = [];\n            if (chanceLow !== 0 || chanceHigh !== 0) {\n                results.push(Object.assign({ id: 'passive:69:chance ko resistance', originalId,\n                    sources, value: {\n                        'recoveredHp%': recoveredHp,\n                        maxCount,\n                        chanceLow,\n                        chanceHigh,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('70', (effect, context, injectionContext) => {\n            return parsePassiveWithSingleNumericalParameter({\n                effect,\n                context,\n                injectionContext,\n                effectKey: 'od fill rate%',\n                buffId: 'passive:70:od fill rate',\n                originalId: '70',\n            });\n        });\n        map.set('71', (effect, context, injectionContext) => {\n            const originalId = '71';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const inflictionChances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                    if (correspondingKey) {\n                        inflictionChances[ailment] = typedEffect[correspondingKey];\n                    }\n                });\n            }\n            const results = [];\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(inflictionChances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:71:inflict on hit-${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('72', (effect, context, injectionContext) => {\n            const originalId = '72';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const [rawHpAtTurnStart, rawBcAtTurnStart, ...extraParams] = splitEffectWithUnknownPassiveParamsProperty(effect);\n            const hpAtTurnStart = rawHpAtTurnStart === '1';\n            const bcAtTurnStart = rawBcAtTurnStart === '1';\n            const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            const results = [];\n            if (hpAtTurnStart) {\n                results.push(Object.assign({ id: 'passive:72:effect at turn start-hp', originalId,\n                    sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (bcAtTurnStart) {\n                results.push(Object.assign({ id: 'passive:72:effect at turn start-bc', originalId,\n                    sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('73', (effect, context, injectionContext) => {\n            const originalId = '73';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis, Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction];\n            const results = [];\n            const resistances = {\n                poison: '0',\n                weak: '0',\n                sick: '0',\n                injury: '0',\n                curse: '0',\n                paralysis: '0',\n                'atk down': '0',\n                'def down': '0',\n                'rec down': '0',\n            };\n            let unknownParams;\n            if (typedEffect.params) {\n                let extraParams;\n                [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, resistances['atk down'], resistances['def down'], resistances['rec down'], ...extraParams] = splitEffectParams(typedEffect);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            }\n            else {\n                AILMENTS_ORDER.forEach((ailment) => {\n                    const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                    resistances[ailment] = typedEffect[`${effectKey} resist%`];\n                });\n            }\n            AILMENTS_ORDER.forEach((ailment) => {\n                const value = parseNumberOrDefault(resistances[ailment]);\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `passive:73:resist-${ailment}`, originalId,\n                        sources,\n                        value, conditions: Object.assign({}, conditionInfo) }, targetData));\n                }\n            });\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('74', (effect, context, injectionContext) => {\n            const originalId = '74';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let requiredAilments, attackBoost = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawRequiredAilments, rawBoost, ...extraParams] = splitEffectParams(typedEffect);\n                requiredAilments = rawRequiredAilments.split('&')\n                    .filter((p) => p !== '0')\n                    .map((p) => AILMENT_MAPPING[p] || Ailment.Unknown);\n                attackBoost = parseNumberOrDefault(rawBoost);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                const ailmentKeysInEffect = Object.keys(typedEffect).filter((k) => (typedEffect[k] === true) && k.startsWith('atk% buff when enemy has'));\n                requiredAilments = AILMENTS_ORDER.filter((ailment) => ailmentKeysInEffect.find((k) => k.includes(ailment)));\n                attackBoost = parseNumberOrDefault(typedEffect['atk% buff when enemy has ailment']);\n            }\n            const results = [];\n            if (attackBoost !== 0) {\n                results.push(Object.assign({ id: 'passive:74:ailment attack boost', originalId,\n                    sources, value: attackBoost, conditions: Object.assign(Object.assign({}, conditionInfo), { targetHasAnyOfGivenAilments: requiredAilments }) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('75', (effect, context, injectionContext) => {\n            const originalId = '75';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let damageIncrease = 0, chance = 0;\n            let turnDuration = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(typedEffect);\n                damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n                chance = parseNumberOrDefault(rawChance);\n                turnDuration = parseNumberOrDefault(rawTurnDuration);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n            }\n            else {\n                damageIncrease = parseNumberOrDefault(typedEffect['spark debuff%']);\n                chance = parseNumberOrDefault(typedEffect['spark debuff chance%']);\n                turnDuration = parseNumberOrDefault(typedEffect['spark debuff turns']);\n            }\n            const results = [];\n            if (chance !== 0) {\n                results.push(Object.assign({ id: 'passive:75:spark vulnerability', originalId,\n                    sources, duration: turnDuration, value: { 'sparkDamage%': damageIncrease, chance }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('77', (effect, context, injectionContext) => {\n            const originalId = '77';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let baseResist = 0, buffResist = 0;\n            let unknownParams;\n            if (typedEffect.params) {\n                const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n                baseResist = parseNumberOrDefault(rawBaseResist);\n                buffResist = parseNumberOrDefault(rawBuffResist);\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n            }\n            else {\n                baseResist = parseNumberOrDefault(typedEffect['base spark dmg% resist']);\n                buffResist = parseNumberOrDefault(typedEffect['buff spark dmg% resist']);\n            }\n            const results = [];\n            if (baseResist !== 0) {\n                results.push(Object.assign({ id: 'passive:77:spark damage reduction-base', originalId,\n                    sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buffResist !== 0) {\n                results.push(Object.assign({ id: 'passive:77:spark damage reduction-buff', originalId,\n                    sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('78', (effect, context, injectionContext) => {\n            const originalId = '78';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                    id: params[0],\n                    params: params[1],\n                    turnDuration: parseNumberOrDefault(params[4]),\n                }, context, injectionContext);\n                const maxTriggerCount = parseNumberOrDefault(params[2]);\n                const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], '1', ThresholdType.DamageTaken);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(5), 5, injectionContext);\n                if (triggeredBuffs.length > 0) {\n                    const thresholdConditions = getThresholdConditions(thresholdInfo);\n                    results.push(Object.assign({ id: 'passive:78:damage taken conditional', originalId,\n                        sources, value: {\n                            triggeredBuffs,\n                            maxTriggerCount,\n                        }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('79', (effect, context, injectionContext) => {\n            const originalId = '79';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let flatFill, percentFill, thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                flatFill = parseNumberOrDefault(params[0]) / 100;\n                percentFill = parseNumberOrDefault(params[1]);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(params[2], '1', ThresholdType.DamageTaken);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(3), 3, injectionContext);\n            }\n            else {\n                flatFill = parseNumberOrDefault(typedEffect['increase bb gauge']);\n                percentFill = 0; // NOTE: deathmax datamine does not parse this property\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.DamageTaken);\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: 'passive:79:bc fill after damage taken conditional-flat', originalId,\n                    sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n            if (percentFill !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: 'passive:79:bc fill after damage taken conditional-percent', originalId,\n                    sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('80', (effect, context, injectionContext) => {\n            const originalId = '80';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                    id: params[0],\n                    params: params[1],\n                    turnDuration: parseNumberOrDefault(params[4]),\n                }, context, injectionContext);\n                const maxTriggerCount = parseNumberOrDefault(params[2]);\n                const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], '1', ThresholdType.DamageDealt);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(5), 5, injectionContext);\n                if (triggeredBuffs.length > 0) {\n                    const thresholdConditions = getThresholdConditions(thresholdInfo);\n                    results.push(Object.assign({ id: 'passive:80:damage dealt conditional', originalId,\n                        sources, value: {\n                            triggeredBuffs,\n                            maxTriggerCount,\n                        }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('81', (effect, context, injectionContext) => {\n            const originalId = '81';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            let flatFill, percentFill, thresholdInfo;\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                flatFill = parseNumberOrDefault(params[0]) / 100;\n                percentFill = parseNumberOrDefault(params[1]);\n                thresholdInfo = parseThresholdValuesFromParamsProperty(params[2], '1', ThresholdType.DamageDealt);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(3), 3, injectionContext);\n            }\n            else {\n                flatFill = parseNumberOrDefault(typedEffect['increase bb gauge']);\n                percentFill = 0; // NOTE: deathmax datamine does not parse this property\n                thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.DamageDealt);\n            }\n            const results = [];\n            if (flatFill !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: 'passive:81:bc fill after damage dealt conditional-flat', originalId,\n                    sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n            if (percentFill !== 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: 'passive:81:bc fill after damage dealt conditional-percent', originalId,\n                    sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n        map.set('82', (effect, context, injectionContext) => {\n            const originalId = '82';\n            const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n            const typedEffect = effect;\n            const results = [];\n            let unknownParams;\n            if (typedEffect.params) {\n                const params = splitEffectParams(typedEffect);\n                const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                    id: params[0],\n                    params: params[1],\n                    turnDuration: parseNumberOrDefault(params[4]),\n                }, context, injectionContext);\n                const maxTriggerCount = parseNumberOrDefault(params[2]);\n                const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], '1', ThresholdType.BcReceived);\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(5), 5, injectionContext);\n                if (triggeredBuffs.length > 0) {\n                    const thresholdConditions = getThresholdConditions(thresholdInfo);\n                    results.push(Object.assign({ id: 'passive:82:bc received conditional', originalId,\n                        sources, value: {\n                            triggeredBuffs,\n                            maxTriggerCount,\n                        }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n                }\n            }\n            handlePostParse(results, unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            });\n            return results;\n        });\n    }\n\n    /**\n     * @description Default function for all effects that cannot be processed.\n     * @param effect Effect to convert to {@link IBuff} format.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns Converted buff(s) from the given passive effect.\n     */\n    function defaultConversionFunction$2(effect, context) {\n        const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n        return [{\n                id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n                originalId: id,\n                sources: createSourcesFromContext(context),\n            }];\n    }\n    /**\n     * @description Extract the buff(s) from a given passive effect object.\n     * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n     * @param effect Passive effect object to extract buffs from.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @returns A collection of one or more buffs found in the given passive effect object.\n     */\n    function convertPassiveEffectToBuffs(effect, context) {\n        if (!effect || typeof effect !== 'object') {\n            throw new TypeError('effect parameter should be an object');\n        }\n        if (!context || typeof context !== 'object') {\n            throw new TypeError('context parameter should be an object');\n        }\n        const id = (isPassiveEffect(effect) && getEffectId(effect));\n        const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n        // TODO: warning if result is empty?\n        return typeof conversionFunction === 'function'\n            ? conversionFunction(effect, context)\n            : defaultConversionFunction$2(effect, context);\n    }\n\n    const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ TURN_DURATION_MODIFICATION: {\n            id: BuffId.TURN_DURATION_MODIFICATION,\n            name: 'Passive Turn Duration Modification',\n            stat: UnitStat.turnDurationModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [\n                (buff && buff.value &&\n                    buff.value.duration &&\n                    buff.value.duration < 0) ?\n                    IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n            ],\n        }, NO_PARAMS_SPECIFIED: {\n            id: BuffId.NO_PARAMS_SPECIFIED,\n            name: 'No Parameters Specified',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_PASSIVE_EFFECT_ID: {\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            name: 'Unknown Passive Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_PASSIVE_BUFF_PARAMS: {\n            id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n            name: 'Unknown Passive Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'passive:1:hp': {\n            id: BuffId['passive:1:hp'],\n            name: 'Passive HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:1:atk': {\n            id: BuffId['passive:1:atk'],\n            name: 'Passive Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:1:def': {\n            id: BuffId['passive:1:def'],\n            name: 'Passive Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:1:rec': {\n            id: BuffId['passive:1:rec'],\n            name: 'Passive Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:1:crit': {\n            id: BuffId['passive:1:crit'],\n            name: 'Passive Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        } }, (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:2:elemental-hp': {\n                id: BuffId['passive:2:elemental-hp'],\n                name: 'Passive Elemental HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:2:elemental-atk': {\n                id: BuffId['passive:2:elemental-atk'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:2:elemental-def': {\n                id: BuffId['passive:2:elemental-def'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:2:elemental-rec': {\n                id: BuffId['passive:2:elemental-rec'],\n                name: 'Passive Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:2:elemental-crit': {\n                id: BuffId['passive:2:elemental-crit'],\n                name: 'Passive Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let unitType = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        unitType = buff.conditions.targetUnitType || '';\n                    }\n                }\n                if (typeof unitType !== 'string' || !unitType) {\n                    unitType = 'unknown';\n                }\n                let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n                if (!unitType || !(iconKey in IconId)) {\n                    iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:3:type based-hp': {\n                id: BuffId['passive:3:type based-hp'],\n                name: 'Passive Type-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:3:type based-atk': {\n                id: BuffId['passive:3:type based-atk'],\n                name: 'Passive Type-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:3:type based-def': {\n                id: BuffId['passive:3:type based-def'],\n                name: 'Passive Type-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:3:type based-rec': {\n                id: BuffId['passive:3:type based-rec'],\n                name: 'Passive Type-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:3:type based-crit': {\n                id: BuffId['passive:3:type based-crit'],\n                name: 'Passive Type-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:4:resist-poison': {\n            id: BuffId['passive:4:resist-poison'],\n            name: 'Passive Poison Resistance',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:4:resist-weak': {\n            id: BuffId['passive:4:resist-weak'],\n            name: 'Passive Weak Resistance',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:4:resist-sick': {\n            id: BuffId['passive:4:resist-sick'],\n            name: 'Passive Sick Resistance',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:4:resist-injury': {\n            id: BuffId['passive:4:resist-injury'],\n            name: 'Passive Injury Resistance',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:4:resist-curse': {\n            id: BuffId['passive:4:resist-curse'],\n            name: 'Passive Curse Resistance',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:4:resist-paralysis': {\n            id: BuffId['passive:4:resist-paralysis'],\n            name: 'Passive Paralysis Resistance',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:5:mitigate-fire': {\n            id: BuffId['passive:5:mitigate-fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:5:mitigate-water': {\n            id: BuffId['passive:5:mitigate-water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:5:mitigate-earth': {\n            id: BuffId['passive:5:mitigate-earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:5:mitigate-thunder': {\n            id: BuffId['passive:5:mitigate-thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:5:mitigate-light': {\n            id: BuffId['passive:5:mitigate-light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:5:mitigate-dark': {\n            id: BuffId['passive:5:mitigate-dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:5:mitigate-unknown': {\n            id: BuffId['passive:5:mitigate-unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:8:mitigation': {\n            id: BuffId['passive:8:mitigation'],\n            name: 'Passive Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:9:gradual bc fill': {\n            id: BuffId['passive:9:gradual bc fill'],\n            name: 'Passive Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:10:hc efficacy': {\n            id: BuffId['passive:10:hc efficacy'],\n            name: 'Passive HC Efficacy',\n            stat: UnitStat.hcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HCREC],\n        }, 'passive:11:hp conditional-atk': {\n            id: BuffId['passive:11:hp conditional-atk'],\n            name: 'Passive HP-Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n        }, 'passive:11:hp conditional-def': {\n            id: BuffId['passive:11:hp conditional-def'],\n            name: 'Passive HP-Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n        }, 'passive:11:hp conditional-rec': {\n            id: BuffId['passive:11:hp conditional-rec'],\n            name: 'Passive HP-Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n        }, 'passive:11:hp conditional-crit': {\n            id: BuffId['passive:11:hp conditional-crit'],\n            name: 'Passive HP-Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n        }, 'passive:12:hp conditional drop boost-bc': {\n            id: BuffId['passive:12:hp conditional drop boost-bc'],\n            name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n        }, 'passive:12:hp conditional drop boost-hc': {\n            id: BuffId['passive:12:hp conditional drop boost-hc'],\n            name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n        }, 'passive:12:hp conditional drop boost-item': {\n            id: BuffId['passive:12:hp conditional drop boost-item'],\n            name: 'Passive HP-Conditional Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n        }, 'passive:12:hp conditional drop boost-zel': {\n            id: BuffId['passive:12:hp conditional drop boost-zel'],\n            name: 'Passive HP-Conditional Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n        }, 'passive:12:hp conditional drop boost-karma': {\n            id: BuffId['passive:12:hp conditional drop boost-karma'],\n            name: 'Passive HP-Conditional Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n        }, 'passive:13:bc fill on enemy defeat': {\n            id: BuffId['passive:13:bc fill on enemy defeat'],\n            name: 'Passive BC Fill on Enemy Defeat',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:14:chance mitigation': {\n            id: BuffId['passive:14:chance mitigation'],\n            name: 'Passive Damage Reduction (Chance)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'passive:15:heal on enemy defeat': {\n            id: BuffId['passive:15:heal on enemy defeat'],\n            name: 'Passive Heal on Enemy Defeat',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:16:heal on win': {\n            id: BuffId['passive:16:heal on win'],\n            name: 'Passive Heal on Battle Win',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:17:hp absorb': {\n            id: BuffId['passive:17:hp absorb'],\n            name: 'HP Absorption',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPABS],\n        }, 'passive:19:drop boost-bc': {\n            id: BuffId['passive:19:drop boost-bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'passive:19:drop boost-hc': {\n            id: BuffId['passive:19:drop boost-hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'passive:19:drop boost-item': {\n            id: BuffId['passive:19:drop boost-item'],\n            name: 'Passive Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'passive:19:drop boost-zel': {\n            id: BuffId['passive:19:drop boost-zel'],\n            name: 'Passive Zel Drop Rate Boost',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n        }, 'passive:19:drop boost-karma': {\n            id: BuffId['passive:19:drop boost-karma'],\n            name: 'Passive Karma Drop Rate Boost',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n        }, 'passive:20:chance inflict-poison': {\n            id: BuffId['passive:20:chance inflict-poison'],\n            name: 'Passive Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'passive:20:chance inflict-weak': {\n            id: BuffId['passive:20:chance inflict-weak'],\n            name: 'Passive Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'passive:20:chance inflict-sick': {\n            id: BuffId['passive:20:chance inflict-sick'],\n            name: 'Passive Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'passive:20:chance inflict-injury': {\n            id: BuffId['passive:20:chance inflict-injury'],\n            name: 'Passive Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'passive:20:chance inflict-curse': {\n            id: BuffId['passive:20:chance inflict-curse'],\n            name: 'Passive Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'passive:20:chance inflict-paralysis': {\n            id: BuffId['passive:20:chance inflict-paralysis'],\n            name: 'Passive Paralysis Infliction',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'passive:20:chance inflict-atk down': {\n            id: BuffId['passive:20:chance inflict-atk down'],\n            name: 'Passive Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'passive:20:chance inflict-def down': {\n            id: BuffId['passive:20:chance inflict-def down'],\n            name: 'Passive Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'passive:20:chance inflict-rec down': {\n            id: BuffId['passive:20:chance inflict-rec down'],\n            name: 'Passive Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'passive:20:chance inflict-unknown': {\n            id: BuffId['passive:20:chance inflict-unknown'],\n            name: 'Passive Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'passive:21:first turn-atk': {\n            id: BuffId['passive:21:first turn-atk'],\n            name: 'Attack Boost for X Turns',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:21:first turn-def': {\n            id: BuffId['passive:21:first turn-def'],\n            name: 'Defense Boost for X Turns',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:21:first turn-rec': {\n            id: BuffId['passive:21:first turn-rec'],\n            name: 'Recovery Boost for X Turns',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:21:first turn-crit': {\n            id: BuffId['passive:21:first turn-crit'],\n            name: 'Critical Hit Rate Boost for X Turns',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:23:bc fill on win': {\n            id: BuffId['passive:23:bc fill on win'],\n            name: 'Passive BC Fill on Battle Win',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:24:heal on hit': {\n            id: BuffId['passive:24:heal on hit'],\n            name: 'Passive Heal when Attacked (Chance)',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'passive:25:bc fill on hit': {\n            id: BuffId['passive:25:bc fill on hit'],\n            name: 'Passive BC Fill when Attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:26:chance damage reflect': {\n            id: BuffId['passive:26:chance damage reflect'],\n            name: 'Passive Damage Counter (Chance)',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'passive:27:target chance change': {\n            id: BuffId['passive:27:target chance change'],\n            name: 'Passive Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n        }, 'passive:28:hp conditional target chance change': {\n            id: BuffId['passive:28:hp conditional target chance change'],\n            name: 'Passive HP-Conditional Target Chance Modification',\n            stat: UnitStat.targetingModification,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n        }, 'passive:29:chance def ignore': {\n            id: BuffId['passive:29:chance def ignore'],\n            name: 'Passive Defense Ignore (Chance)',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'passive:30:bb gauge conditional-atk': {\n            id: BuffId['passive:30:bb gauge conditional-atk'],\n            name: 'Passive BB Gauge Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n        }, 'passive:30:bb gauge conditional-def': {\n            id: BuffId['passive:30:bb gauge conditional-def'],\n            name: 'Passive BB Gauge Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n        }, 'passive:30:bb gauge conditional-rec': {\n            id: BuffId['passive:30:bb gauge conditional-rec'],\n            name: 'Passive BB Gauge Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n        }, 'passive:30:bb gauge conditional-crit': {\n            id: BuffId['passive:30:bb gauge conditional-crit'],\n            name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n        }, 'passive:31:spark-damage': {\n            id: BuffId['passive:31:spark-damage'],\n            name: 'Passive Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'passive:31:spark-bc': {\n            id: BuffId['passive:31:spark-bc'],\n            name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n        }, 'passive:31:spark-hc': {\n            id: BuffId['passive:31:spark-hc'],\n            name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n        }, 'passive:31:spark-item': {\n            id: BuffId['passive:31:spark-item'],\n            name: 'Passive Item Drop Rate Boost during Spark',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n        }, 'passive:31:spark-zel': {\n            id: BuffId['passive:31:spark-zel'],\n            name: 'Passive Zel Drop Rate Boost during Spark',\n            stat: UnitStat.zelDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n        }, 'passive:31:spark-karma': {\n            id: BuffId['passive:31:spark-karma'],\n            name: 'Passive Karma Drop Rate Boost during Spark',\n            stat: UnitStat.karmaDropRate,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n        }, 'passive:32:bc efficacy': {\n            id: BuffId['passive:32:bc efficacy'],\n            name: 'Passive BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'passive:33:gradual heal': {\n            id: BuffId['passive:33:gradual heal'],\n            name: 'Passive Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'passive:34:critical damage': {\n            id: BuffId['passive:34:critical damage'],\n            name: 'Passive Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'passive:35:bc fill on normal attack': {\n            id: BuffId['passive:35:bc fill on normal attack'],\n            name: 'Passive BC Fill when Normal Attacking',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:36:extra action': {\n            id: BuffId['passive:36:extra action'],\n            name: 'Passive Extra Action',\n            stat: UnitStat.extraAction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DBLSTRIKE],\n        }, 'passive:37:hit count boost': {\n            id: BuffId['passive:37:hit count boost'],\n            name: 'Passive Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'passive:40:converted-atk': {\n            id: BuffId['passive:40:converted-atk'],\n            name: 'Passive Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'passive:40:converted-def': {\n            id: BuffId['passive:40:converted-def'],\n            name: 'Passive Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'passive:40:converted-rec': {\n            id: BuffId['passive:40:converted-rec'],\n            name: 'Passive Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'passive:41:unique element count-hp': {\n            id: BuffId['passive:41:unique element count-hp'],\n            name: 'Passive Element Squad-based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n        }, 'passive:41:unique element count-atk': {\n            id: BuffId['passive:41:unique element count-atk'],\n            name: 'Passive Element Squad-based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n        }, 'passive:41:unique element count-def': {\n            id: BuffId['passive:41:unique element count-def'],\n            name: 'Passive Element Squad-based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n        }, 'passive:41:unique element count-rec': {\n            id: BuffId['passive:41:unique element count-rec'],\n            name: 'Passive Element Squad-based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n        }, 'passive:41:unique element count-crit': {\n            id: BuffId['passive:41:unique element count-crit'],\n            name: 'Passive Element Squad-based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let gender = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions) {\n                        gender = buff.conditions.targetGender || '';\n                    }\n                }\n                if (typeof gender !== 'string' || !gender) {\n                    gender = 'unknown';\n                }\n                let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n                if (!gender || !(iconKey in IconId)) {\n                    iconKey = `BUFF_GENDER${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'passive:42:gender-hp': {\n                id: BuffId['passive:42:gender-hp'],\n                name: 'Passive Gender-Based HP Boost',\n                stat: UnitStat.hp,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('HP'),\n            },\n            'passive:42:gender-atk': {\n                id: BuffId['passive:42:gender-atk'],\n                name: 'Passive Gender-Based Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'passive:42:gender-def': {\n                id: BuffId['passive:42:gender-def'],\n                name: 'Passive Gender-Based Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'passive:42:gender-rec': {\n                id: BuffId['passive:42:gender-rec'],\n                name: 'Passive Gender-Based Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('REC'),\n            },\n            'passive:42:gender-crit': {\n                id: BuffId['passive:42:gender-crit'],\n                name: 'Passive Gender-Based Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Passive,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'passive:43:chance damage to one': {\n            id: BuffId['passive:43:chance damage to one'],\n            name: 'Passive Damage Reduction To One (Chance)',\n            stat: UnitStat.reduceDamageToOne,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n        }, 'passive:44:flat-hp': {\n            id: BuffId['passive:44:flat-hp'],\n            name: 'Passive Flat HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n        }, 'passive:44:flat-atk': {\n            id: BuffId['passive:44:flat-atk'],\n            name: 'Passive Flat Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'passive:44:flat-def': {\n            id: BuffId['passive:44:flat-def'],\n            name: 'Passive Flat Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'passive:44:flat-rec': {\n            id: BuffId['passive:44:flat-rec'],\n            name: 'Passive Flat Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'passive:44:flat-crit': {\n            id: BuffId['passive:44:flat-crit'],\n            name: 'Passive Flat Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n        }, 'passive:45:critical damage reduction-base': {\n            id: BuffId['passive:45:critical damage reduction-base'],\n            name: 'Passive Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:45:critical damage reduction-buff': {\n            id: BuffId['passive:45:critical damage reduction-buff'],\n            name: 'Passive Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:46:hp scaled-atk': {\n            id: BuffId['passive:46:hp scaled-atk'],\n            name: 'Passive Attack Boost Relative to HP',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDATKDOWN : IconId.BUFF_HPSCALEDATKUP],\n        }, 'passive:46:hp scaled-def': {\n            id: BuffId['passive:46:hp scaled-def'],\n            name: 'Passive Defense Boost Relative to HP',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDDEFDOWN : IconId.BUFF_HPSCALEDDEFUP],\n        }, 'passive:46:hp scaled-rec': {\n            id: BuffId['passive:46:hp scaled-rec'],\n            name: 'Passive Recovery Boost Relative to HP',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDRECDOWN : IconId.BUFF_HPSCALEDRECUP],\n        }, 'passive:47:bc fill on spark': {\n            id: BuffId['passive:47:bc fill on spark'],\n            name: 'Passive BC Fill on Spark',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKBBUP],\n        }, 'passive:48:bc cost reduction': {\n            id: BuffId['passive:48:bc cost reduction'],\n            name: 'Passive BC Cost Reduction',\n            stat: UnitStat.bcCostReduction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBCOST_REDUCTION],\n        }, 'passive:49:bb gauge consumption reduction': {\n            id: BuffId['passive:49:bb gauge consumption reduction'],\n            name: 'Passive BB Gauge Consumption Reduction',\n            stat: UnitStat.bbGaugeConsumptionReduction,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:50:elemental weakness damage-fire': {\n            id: BuffId['passive:50:elemental weakness damage-fire'],\n            name: 'Passive Fire Elemental Damage Boost',\n            stat: UnitStat.fireElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGUP],\n        }, 'passive:50:elemental weakness damage-water': {\n            id: BuffId['passive:50:elemental weakness damage-water'],\n            name: 'Passive Water Elemental Damage Boost',\n            stat: UnitStat.waterElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGUP],\n        }, 'passive:50:elemental weakness damage-earth': {\n            id: BuffId['passive:50:elemental weakness damage-earth'],\n            name: 'Passive Earth Elemental Damage Boost',\n            stat: UnitStat.earthElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGUP],\n        }, 'passive:50:elemental weakness damage-thunder': {\n            id: BuffId['passive:50:elemental weakness damage-thunder'],\n            name: 'Passive Thunder Elemental Damage Boost',\n            stat: UnitStat.thunderElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGUP],\n        }, 'passive:50:elemental weakness damage-light': {\n            id: BuffId['passive:50:elemental weakness damage-light'],\n            name: 'Passive Light Elemental Damage Boost',\n            stat: UnitStat.lightElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGUP],\n        }, 'passive:50:elemental weakness damage-dark': {\n            id: BuffId['passive:50:elemental weakness damage-dark'],\n            name: 'Passive Dark Elemental Damage Boost',\n            stat: UnitStat.darkElementalDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGUP],\n        }, 'passive:50:elemental weakness damage-unknown': {\n            id: BuffId['passive:50:elemental weakness damage-unknown'],\n            name: 'Passive Elemental Damage Boost (Unspecified Element)',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGUP],\n        }, 'passive:53:critical damage-base': {\n            id: BuffId['passive:53:critical damage-base'],\n            name: 'Passive Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:critical damage-buff': {\n            id: BuffId['passive:53:critical damage-buff'],\n            name: 'Passive Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:element damage-base': {\n            id: BuffId['passive:53:element damage-base'],\n            name: 'Passive Base Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'passive:53:element damage-buff': {\n            id: BuffId['passive:53:element damage-buff'],\n            name: 'Passive Buffed Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'passive:53:critical rate-base': {\n            id: BuffId['passive:53:critical rate-base'],\n            name: 'Passive Base Critical Hit Rate Reduction',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:53:critical rate-buff': {\n            id: BuffId['passive:53:critical rate-buff'],\n            name: 'Passive Buffed Critical Hit Rate Reduction',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'passive:55:hp conditional': {\n            id: BuffId['passive:55:hp conditional'],\n            name: 'Passive Conditional Effect based on HP Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_HPTHRESH],\n        }, 'passive:58:guard mitigation': {\n            id: BuffId['passive:58:guard mitigation'],\n            name: 'Passive Guard Damage Reduction',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDCUT],\n        }, 'passive:59:bc fill when attacked on guard-percent': {\n            id: BuffId['passive:59:bc fill when attacked on guard-percent'],\n            name: 'Passive BC Fill when Attacked and Guarding (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:59:bc fill when attacked on guard-flat': {\n            id: BuffId['passive:59:bc fill when attacked on guard-flat'],\n            name: 'Passive BC Fill when Attacked and Guarding (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:61:bc fill on guard-percent': {\n            id: BuffId['passive:61:bc fill on guard-percent'],\n            name: 'Passive BC Fill on Guard (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:61:bc fill on guard-flat': {\n            id: BuffId['passive:61:bc fill on guard-flat'],\n            name: 'Passive BC Fill on Guard (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'passive:62:mitigate-fire': {\n            id: BuffId['passive:62:mitigate-fire'],\n            name: 'Passive Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:62:mitigate-water': {\n            id: BuffId['passive:62:mitigate-water'],\n            name: 'Passive Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:62:mitigate-earth': {\n            id: BuffId['passive:62:mitigate-earth'],\n            name: 'Passive Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:62:mitigate-thunder': {\n            id: BuffId['passive:62:mitigate-thunder'],\n            name: 'Passive Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:62:mitigate-light': {\n            id: BuffId['passive:62:mitigate-light'],\n            name: 'Passive Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:62:mitigate-dark': {\n            id: BuffId['passive:62:mitigate-dark'],\n            name: 'Passive Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:62:mitigate-unknown': {\n            id: BuffId['passive:62:mitigate-unknown'],\n            name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:63:first turn mitigate-fire': {\n            id: BuffId['passive:63:first turn mitigate-fire'],\n            name: 'Fire Damage Reduction for First X Turns',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'passive:63:first turn mitigate-water': {\n            id: BuffId['passive:63:first turn mitigate-water'],\n            name: 'Water Damage Reduction for First X Turns',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'passive:63:first turn mitigate-earth': {\n            id: BuffId['passive:63:first turn mitigate-earth'],\n            name: 'Earth Damage Reduction for First X Turns',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'passive:63:first turn mitigate-thunder': {\n            id: BuffId['passive:63:first turn mitigate-thunder'],\n            name: 'Thunder Damage Reduction for First X Turns',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'passive:63:first turn mitigate-light': {\n            id: BuffId['passive:63:first turn mitigate-light'],\n            name: 'Light Damage Reduction for First X Turns',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'passive:63:first turn mitigate-dark': {\n            id: BuffId['passive:63:first turn mitigate-dark'],\n            name: 'Dark Damage Reduction for First X Turns',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'passive:63:first turn mitigate-unknown': {\n            id: BuffId['passive:63:first turn mitigate-unknown'],\n            name: 'Elemental Damage Reduction (Unspecified Element) for First X Turns',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'passive:64:attack boost-bb': {\n            id: BuffId['passive:64:attack boost-bb'],\n            name: 'Passive BB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'passive:64:attack boost-sbb': {\n            id: BuffId['passive:64:attack boost-sbb'],\n            name: 'Passive SBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'passive:64:attack boost-ubb': {\n            id: BuffId['passive:64:attack boost-ubb'],\n            name: 'Passive UBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'passive:65:bc fill on crit': {\n            id: BuffId['passive:65:bc fill on crit'],\n            name: 'Passive BC Fill on Critical Hit',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'passive:66:add effect to skill-bb': {\n            id: BuffId['passive:66:add effect to skill-bb'],\n            name: 'Passive Added Effect to Brave Burst',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTO_BB],\n        }, 'passive:66:add effect to skill-sbb': {\n            id: BuffId['passive:66:add effect to skill-sbb'],\n            name: 'Passive Added Effect to Super Brave Burst',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTO_SBB],\n        }, 'passive:66:add effect to skill-ubb': {\n            id: BuffId['passive:66:add effect to skill-ubb'],\n            name: 'Passive Added Effect to Ultimate Brave Burst',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ADDTO_UBB],\n        }, 'passive:69:chance ko resistance': {\n            id: BuffId['passive:69:chance ko resistance'],\n            name: 'Passive KO Resistance (Chance)',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, 'passive:70:od fill rate': {\n            id: BuffId['passive:70:od fill rate'],\n            name: 'Passive OD Gauge Fill Rate',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_ODFILLBOOST],\n        }, 'passive:71:inflict on hit-poison': {\n            id: BuffId['passive:71:inflict on hit-poison'],\n            name: 'Passive Poison Counter',\n            stat: UnitStat.poisonCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONCOUNTER],\n        }, 'passive:71:inflict on hit-weak': {\n            id: BuffId['passive:71:inflict on hit-weak'],\n            name: 'Passive Weak Counter',\n            stat: UnitStat.weakCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKCOUNTER],\n        }, 'passive:71:inflict on hit-sick': {\n            id: BuffId['passive:71:inflict on hit-sick'],\n            name: 'Passive Sick Counter',\n            stat: UnitStat.sickCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKCOUNTER],\n        }, 'passive:71:inflict on hit-injury': {\n            id: BuffId['passive:71:inflict on hit-injury'],\n            name: 'Passive Injury Counter',\n            stat: UnitStat.injuryCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJCONTER],\n        }, 'passive:71:inflict on hit-curse': {\n            id: BuffId['passive:71:inflict on hit-curse'],\n            name: 'Passive Curse Counter',\n            stat: UnitStat.curseCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSECOUNTER],\n        }, 'passive:71:inflict on hit-paralysis': {\n            id: BuffId['passive:71:inflict on hit-paralysis'],\n            name: 'Passive Paralysis Counter',\n            stat: UnitStat.paralysisCounter,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYCOUNTER],\n        }, 'passive:72:effect at turn start-hp': {\n            id: BuffId['passive:72:effect at turn start-hp'],\n            name: 'Gradual HP Effects Occur at Turn Start',\n            stat: UnitStat.effectOccurrenceShift,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPTURNSTART],\n        }, 'passive:72:effect at turn start-bc': {\n            id: BuffId['passive:72:effect at turn start-bc'],\n            name: 'Gradual Battle Crystal Effects Occur at Turn Start',\n            stat: UnitStat.effectOccurrenceShift,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_BCTURNSTART],\n        }, 'passive:73:resist-poison': {\n            id: BuffId['passive:73:resist-poison'],\n            name: 'Passive Poison Resistance',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'passive:73:resist-weak': {\n            id: BuffId['passive:73:resist-weak'],\n            name: 'Passive Weak Resistance',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'passive:73:resist-sick': {\n            id: BuffId['passive:73:resist-sick'],\n            name: 'Passive Sick Resistance',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'passive:73:resist-injury': {\n            id: BuffId['passive:73:resist-injury'],\n            name: 'Passive Injury Resistance',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'passive:73:resist-curse': {\n            id: BuffId['passive:73:resist-curse'],\n            name: 'Passive Curse Resistance',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'passive:73:resist-paralysis': {\n            id: BuffId['passive:73:resist-paralysis'],\n            name: 'Passive Paralysis Resistance',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'passive:73:resist-atk down': {\n            id: BuffId['passive:73:resist-atk down'],\n            name: 'Passive Attack Reduction Resistance',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_RESISTATKDOWN],\n        }, 'passive:73:resist-def down': {\n            id: BuffId['passive:73:resist-def down'],\n            name: 'Passive Defense Reduction Resistance',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_RESISTDEFDOWN],\n        }, 'passive:73:resist-rec down': {\n            id: BuffId['passive:73:resist-rec down'],\n            name: 'Passive Recovery Reduction Resistance',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_RESISTRECDOWN],\n        }, 'passive:74:ailment attack boost': {\n            id: BuffId['passive:74:ailment attack boost'],\n            name: 'Passive Attack Boost on Status Afflicted Foes',\n            stat: UnitStat.ailmentAttackBoost,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_AILDMGUP],\n        }, 'passive:75:spark vulnerability': {\n            id: BuffId['passive:75:spark vulnerability'],\n            name: 'Passive Spark Vulnerability',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKDMGUP],\n        }, 'passive:77:spark damage reduction-base': {\n            id: BuffId['passive:77:spark damage reduction-base'],\n            name: 'Passive Base Spark Damage Reduction',\n            stat: UnitStat.sparkDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKDMGDOWN],\n        }, 'passive:77:spark damage reduction-buff': {\n            id: BuffId['passive:77:spark damage reduction-buff'],\n            name: 'Passive Buffed Spark Damage Reduction',\n            stat: UnitStat.sparkDamageMitigation,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_SPARKDMGDOWN],\n        }, 'passive:78:damage taken conditional': {\n            id: BuffId['passive:78:damage taken conditional'],\n            name: 'Passive Conditional Effect after Damage Received Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_DAMAGETAKENTHRESH],\n        }, 'passive:79:bc fill after damage taken conditional-flat': {\n            id: BuffId['passive:79:bc fill after damage taken conditional-flat'],\n            name: 'Passive Flat BC Fill after Damage Taken Received Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:79:bc fill after damage taken conditional-percent': {\n            id: BuffId['passive:79:bc fill after damage taken conditional-percent'],\n            name: 'Passive Percent BC Fill after Damage Taken Received Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:80:damage dealt conditional': {\n            id: BuffId['passive:80:damage dealt conditional'],\n            name: 'Passive Conditional Effect after Damage Dealt Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_DAMAGEDEALTTHRESH],\n        }, 'passive:81:bc fill after damage dealt conditional-flat': {\n            id: BuffId['passive:81:bc fill after damage dealt conditional-flat'],\n            name: 'Passive Flat BC Fill after Damage Dealt Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:81:bc fill after damage dealt conditional-percent': {\n            id: BuffId['passive:81:bc fill after damage dealt conditional-percent'],\n            name: 'Passive Percent BC Fill after Damage Dealt Threshold',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'passive:82:bc received conditional': {\n            id: BuffId['passive:82:bc received conditional'],\n            name: 'Passive Conditional Effect after BC Received Threshold',\n            stackType: BuffStackType.Passive,\n            icons: () => [IconId.CONDITIONALBUFF_BCRECEIVEDTHRESH],\n        }, UNKNOWN_PROC_EFFECT_ID: {\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            name: 'Unknown Proc Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_PROC_BUFF_PARAMS: {\n            id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n            name: 'Unknown Proc Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'proc:1:attack': {\n            id: BuffId['proc:1:attack'],\n            name: 'Regular Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:2:burst heal': {\n            id: BuffId['proc:2:burst heal'],\n            name: 'Burst Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:3:gradual heal': {\n            id: BuffId['proc:3:gradual heal'],\n            name: 'Active Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'proc:4:bc fill-flat': {\n            id: BuffId['proc:4:bc fill-flat'],\n            name: 'Burst BC Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:4:bc fill-percent': {\n            id: BuffId['proc:4:bc fill-percent'],\n            name: 'Burst BC Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:5:regular or elemental-atk': {\n                id: BuffId['proc:5:regular or elemental-atk'],\n                name: 'Active Regular/Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:5:regular or elemental-def': {\n                id: BuffId['proc:5:regular or elemental-def'],\n                name: 'Active Regular/Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:5:regular or elemental-rec': {\n                id: BuffId['proc:5:regular or elemental-rec'],\n                name: 'Active Regular/Elemental Recovery Boost',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:5:regular or elemental-crit': {\n                id: BuffId['proc:5:regular or elemental-crit'],\n                name: 'Active Regular/Elemental Critical Hit Rate Boost',\n                stat: UnitStat.crit,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('CRTRATE'),\n            },\n        };\n    })()), { 'proc:6:drop boost-bc': {\n            id: BuffId['proc:6:drop boost-bc'],\n            name: 'Active Battle Crystal Drop Rate Boost',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n        }, 'proc:6:drop boost-hc': {\n            id: BuffId['proc:6:drop boost-hc'],\n            name: 'Active Heart Crystal Drop Rate Boost',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n        }, 'proc:6:drop boost-item': {\n            id: BuffId['proc:6:drop boost-item'],\n            name: 'Active Item Drop Rate Boost',\n            stat: UnitStat.itemDropRate,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n        }, 'proc:7:guaranteed ko resistance': {\n            id: BuffId['proc:7:guaranteed ko resistance'],\n            name: 'Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:8:max hp boost-flat': {\n            id: BuffId['proc:8:max hp boost-flat'],\n            name: 'Max HP Boost (Flat Amount)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        }, 'proc:8:max hp boost-percent': {\n            id: BuffId['proc:8:max hp boost-percent'],\n            name: 'Max HP Boost (Percentage)',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_HPUP],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let hasElement = false;\n                let polarity = 'DOWN'; // default to down since these are reduction buffs\n                if (buff) {\n                    if (buff.value && buff.value > 0) {\n                        polarity = 'UP';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                        hasElement = true;\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'proc:9:regular or elemental reduction-atk': {\n                id: BuffId['proc:9:regular or elemental reduction-atk'],\n                name: 'Active Regular/Elemental Attack Reduction',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'proc:9:regular or elemental reduction-def': {\n                id: BuffId['proc:9:regular or elemental reduction-def'],\n                name: 'Active Regular/Elemental Defense Reduction',\n                stat: UnitStat.def,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('DEF'),\n            },\n            'proc:9:regular or elemental reduction-rec': {\n                id: BuffId['proc:9:regular or elemental reduction-rec'],\n                name: 'Active Regular/Elemental Recovery Reduction',\n                stat: UnitStat.rec,\n                stackType: BuffStackType.Active,\n                icons: createIconGetterForStat('REC'),\n            },\n            'proc:9:regular or elemental reduction-unknown': {\n                id: BuffId['proc:9:regular or elemental reduction-unknown'],\n                name: 'Active Regular/Elemental Unknown Stat Reduction',\n                stackType: BuffStackType.Active,\n                icons: () => [IconId.UNKNOWN],\n            },\n        };\n    })()), { 'proc:10:cleanse-poison': {\n            id: BuffId['proc:10:cleanse-poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:10:cleanse-weak': {\n            id: BuffId['proc:10:cleanse-weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:10:cleanse-sick': {\n            id: BuffId['proc:10:cleanse-sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:10:cleanse-injury': {\n            id: BuffId['proc:10:cleanse-injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:10:cleanse-curse': {\n            id: BuffId['proc:10:cleanse-curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:10:cleanse-paralysis': {\n            id: BuffId['proc:10:cleanse-paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:10:cleanse-atk down': {\n            id: BuffId['proc:10:cleanse-atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTATKDOWN],\n        }, 'proc:10:cleanse-def down': {\n            id: BuffId['proc:10:cleanse-def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTDEFDOWN],\n        }, 'proc:10:cleanse-rec down': {\n            id: BuffId['proc:10:cleanse-rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTRECDOWN],\n        }, 'proc:10:cleanse-unknown': {\n            id: BuffId['proc:10:cleanse-unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:11:chance inflict-poison': {\n            id: BuffId['proc:11:chance inflict-poison'],\n            name: 'Poison Infliction',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_POISON],\n        }, 'proc:11:chance inflict-weak': {\n            id: BuffId['proc:11:chance inflict-weak'],\n            name: 'Weak Infliction',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_WEAK],\n        }, 'proc:11:chance inflict-sick': {\n            id: BuffId['proc:11:chance inflict-sick'],\n            name: 'Sick Infliction',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_SICK],\n        }, 'proc:11:chance inflict-injury': {\n            id: BuffId['proc:11:chance inflict-injury'],\n            name: 'Injury Infliction',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_INJURY],\n        }, 'proc:11:chance inflict-curse': {\n            id: BuffId['proc:11:chance inflict-curse'],\n            name: 'Curse Infliction',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_CURSE],\n        }, 'proc:11:chance inflict-paralysis': {\n            id: BuffId['proc:11:chance inflict-paralysis'],\n            name: 'Paralysis Infliction',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.DEBUFF_PARALYSIS],\n        }, 'proc:11:chance inflict-atk down': {\n            id: BuffId['proc:11:chance inflict-atk down'],\n            name: 'Attack Reduction Infliction',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_ATKDOWN],\n        }, 'proc:11:chance inflict-def down': {\n            id: BuffId['proc:11:chance inflict-def down'],\n            name: 'Defense Reduction Infliction',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_DEFDOWN],\n        }, 'proc:11:chance inflict-rec down': {\n            id: BuffId['proc:11:chance inflict-rec down'],\n            name: 'Recovery Reduction Infliction',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RECDOWN],\n        }, 'proc:11:chance inflict-unknown': {\n            id: BuffId['proc:11:chance inflict-unknown'],\n            name: 'Unknown Ailment Infliction',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.DEBUFF_AILMENT],\n        }, 'proc:12:guaranteed revive': {\n            id: BuffId['proc:12:guaranteed revive'],\n            name: 'Instant Revive (Guaranteed)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLK],\n        }, 'proc:13:random attack': {\n            id: BuffId['proc:13:random attack'],\n            name: 'Random Target Damage',\n            stackType: BuffStackType.Attack,\n            icons: () => [IconId.ATK_RT],\n        }, 'proc:14:hp absorb attack': {\n            id: BuffId['proc:14:hp absorb attack'],\n            name: 'Lifesteal Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n        }, 'proc:16:mitigate-fire': {\n            id: BuffId['proc:16:mitigate-fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:16:mitigate-water': {\n            id: BuffId['proc:16:mitigate-water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:16:mitigate-earth': {\n            id: BuffId['proc:16:mitigate-earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:16:mitigate-thunder': {\n            id: BuffId['proc:16:mitigate-thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:16:mitigate-light': {\n            id: BuffId['proc:16:mitigate-light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:16:mitigate-dark': {\n            id: BuffId['proc:16:mitigate-dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:16:mitigate-all': {\n            id: BuffId['proc:16:mitigate-all'],\n            name: 'Active Elemental Damage Reduction (All Elements)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:16:mitigate-unknown': {\n            id: BuffId['proc:16:mitigate-unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:17:resist-poison': {\n            id: BuffId['proc:17:resist-poison'],\n            name: 'Active Poison Resistance',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:17:resist-weak': {\n            id: BuffId['proc:17:resist-weak'],\n            name: 'Active Weak Resistance',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:17:resist-sick': {\n            id: BuffId['proc:17:resist-sick'],\n            name: 'Active Sick Resistance',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:17:resist-injury': {\n            id: BuffId['proc:17:resist-injury'],\n            name: 'Active Injury Resistance',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:17:resist-curse': {\n            id: BuffId['proc:17:resist-curse'],\n            name: 'Active Curse Resistance',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:17:resist-paralysis': {\n            id: BuffId['proc:17:resist-paralysis'],\n            name: 'Active Paralysis Resistance',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:18:mitigation': {\n            id: BuffId['proc:18:mitigation'],\n            name: 'Active Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'proc:19:gradual bc fill': {\n            id: BuffId['proc:19:gradual bc fill'],\n            name: 'Active Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:20:bc fill on hit': {\n            id: BuffId['proc:20:bc fill on hit'],\n            name: 'Active BC Fill when attacked',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DAMAGEBB],\n        }, 'proc:22:defense ignore': {\n            id: BuffId['proc:22:defense ignore'],\n            name: 'Active Defense Ignore',\n            stat: UnitStat.defenseIgnore,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_IGNOREDEF],\n        }, 'proc:23:spark damage': {\n            id: BuffId['proc:23:spark damage'],\n            name: 'Active Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'proc:24:converted-atk': {\n            id: BuffId['proc:24:converted-atk'],\n            name: 'Active Converted Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n        }, 'proc:24:converted-def': {\n            id: BuffId['proc:24:converted-def'],\n            name: 'Active Converted Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n        }, 'proc:24:converted-rec': {\n            id: BuffId['proc:24:converted-rec'],\n            name: 'Active Converted Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n        }, 'proc:26:hit count boost': {\n            id: BuffId['proc:26:hit count boost'],\n            name: 'Active Hit Count Boost',\n            stat: UnitStat.hitCountModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HITUP],\n        }, 'proc:27:proportional attack': {\n            id: BuffId['proc:27:proportional attack'],\n            name: 'Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:28:fixed attack': {\n            id: BuffId['proc:28:fixed attack'],\n            name: 'Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n        }, 'proc:29:multi-element attack': {\n            id: BuffId['proc:29:multi-element attack'],\n            name: 'Multi-Element Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n        }, 'proc:30:add element-fire': {\n            id: BuffId['proc:30:add element-fire'],\n            name: 'Active Added Element to Attack (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDFIRE],\n        }, 'proc:30:add element-water': {\n            id: BuffId['proc:30:add element-water'],\n            name: 'Active Added Element to Attack (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWATER],\n        }, 'proc:30:add element-earth': {\n            id: BuffId['proc:30:add element-earth'],\n            name: 'Active Added Element to Attack (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDEARTH],\n        }, 'proc:30:add element-thunder': {\n            id: BuffId['proc:30:add element-thunder'],\n            name: 'Active Added Element to Attack (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDTHUNDER],\n        }, 'proc:30:add element-light': {\n            id: BuffId['proc:30:add element-light'],\n            name: 'Active Added Element to Attack (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDLIGHT],\n        }, 'proc:30:add element-dark': {\n            id: BuffId['proc:30:add element-dark'],\n            name: 'Active Added Element to Attack (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDARK],\n        }, 'proc:30:add element-unknown': {\n            id: BuffId['proc:30:add element-unknown'],\n            name: 'Active Added Element to Attack (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDELEMENT],\n        }, 'proc:31:bc fill-flat': {\n            id: BuffId['proc:31:bc fill-flat'],\n            name: 'Burst BC Fill (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:31:bc fill-percent': {\n            id: BuffId['proc:31:bc fill-percent'],\n            name: 'Burst BC Fill (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'proc:32:element shift-fire': {\n            id: BuffId['proc:32:element shift-fire'],\n            name: 'Element Shift (Fire)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTFIRE],\n        }, 'proc:32:element shift-water': {\n            id: BuffId['proc:32:element shift-water'],\n            name: 'Element Shift (Water)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTWATER],\n        }, 'proc:32:element shift-earth': {\n            id: BuffId['proc:32:element shift-earth'],\n            name: 'Element Shift (Earth)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTEARTH],\n        }, 'proc:32:element shift-thunder': {\n            id: BuffId['proc:32:element shift-thunder'],\n            name: 'Element Shift (Thunder)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTTHUNDER],\n        }, 'proc:32:element shift-light': {\n            id: BuffId['proc:32:element shift-light'],\n            name: 'Element Shift (Light)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTLIGHT],\n        }, 'proc:32:element shift-dark': {\n            id: BuffId['proc:32:element shift-dark'],\n            name: 'Element Shift (Dark)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTDARK],\n        }, 'proc:32:element shift-unknown': {\n            id: BuffId['proc:32:element shift-unknown'],\n            name: 'Element Shift (Unspecified Element)',\n            stat: UnitStat.elementModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_SHIFTELEMENT],\n        }, 'proc:33:buff wipe': {\n            id: BuffId['proc:33:buff wipe'],\n            name: 'Buff Removal',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_REMOVEBUFF],\n        }, 'proc:34:bc drain-flat': {\n            id: BuffId['proc:34:bc drain-flat'],\n            name: 'Burst BB Gauge Drain (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:34:bc drain-percent': {\n            id: BuffId['proc:34:bc drain-percent'],\n            name: 'Burst BB Gauge Drain (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:36:ls lock': {\n            id: BuffId['proc:36:ls lock'],\n            name: 'Active Leader Skill Lock',\n            stat: UnitStat.buffStabilityModification,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DISABLELS],\n        }, 'proc:37:summon': {\n            id: BuffId['proc:37:summon'],\n            name: 'Summon Unit',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SUMMONUNIT],\n        }, 'proc:38:cleanse-poison': {\n            id: BuffId['proc:38:cleanse-poison'],\n            name: 'Poison Cleanse',\n            stat: UnitStat.poisonResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_POISONBLK],\n        }, 'proc:38:cleanse-weak': {\n            id: BuffId['proc:38:cleanse-weak'],\n            name: 'Weak Cleanse',\n            stat: UnitStat.weakResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_WEAKBLK],\n        }, 'proc:38:cleanse-sick': {\n            id: BuffId['proc:38:cleanse-sick'],\n            name: 'Sick Cleanse',\n            stat: UnitStat.sickResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SICKBLK],\n        }, 'proc:38:cleanse-injury': {\n            id: BuffId['proc:38:cleanse-injury'],\n            name: 'Injury Cleanse',\n            stat: UnitStat.injuryResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_INJURYBLK],\n        }, 'proc:38:cleanse-curse': {\n            id: BuffId['proc:38:cleanse-curse'],\n            name: 'Curse Cleanse',\n            stat: UnitStat.curseResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_CURSEBLK],\n        }, 'proc:38:cleanse-paralysis': {\n            id: BuffId['proc:38:cleanse-paralysis'],\n            name: 'Paralysis Cleanse',\n            stat: UnitStat.paralysisResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_PARALYSISBLK],\n        }, 'proc:38:cleanse-atk down': {\n            id: BuffId['proc:38:cleanse-atk down'],\n            name: 'Attack Reduction Cleanse',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTATKDOWN],\n        }, 'proc:38:cleanse-def down': {\n            id: BuffId['proc:38:cleanse-def down'],\n            name: 'Defense Reduction Cleanse',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTDEFDOWN],\n        }, 'proc:38:cleanse-rec down': {\n            id: BuffId['proc:38:cleanse-rec down'],\n            name: 'Recovery Reduction Cleanse',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTRECDOWN],\n        }, 'proc:38:cleanse-unknown': {\n            id: BuffId['proc:38:cleanse-unknown'],\n            name: 'Unknown Ailment Cleanse',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_AILMENTBLK],\n        }, 'proc:39:mitigate-fire': {\n            id: BuffId['proc:39:mitigate-fire'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'proc:39:mitigate-water': {\n            id: BuffId['proc:39:mitigate-water'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'proc:39:mitigate-earth': {\n            id: BuffId['proc:39:mitigate-earth'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'proc:39:mitigate-thunder': {\n            id: BuffId['proc:39:mitigate-thunder'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'proc:39:mitigate-light': {\n            id: BuffId['proc:39:mitigate-light'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'proc:39:mitigate-dark': {\n            id: BuffId['proc:39:mitigate-dark'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'proc:39:mitigate-unknown': {\n            id: BuffId['proc:39:mitigate-unknown'],\n            name: 'Active Elemental Damage Reduction (Unspecified Element)',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n        }, 'proc:40:add ailment-poison': {\n            id: BuffId['proc:40:add ailment-poison'],\n            name: 'Active Poison Infliction Added to Attack',\n            stat: UnitStat.poisonInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPOISON],\n        }, 'proc:40:add ailment-weak': {\n            id: BuffId['proc:40:add ailment-weak'],\n            name: 'Active Weak Infliction Added to Attack',\n            stat: UnitStat.weakInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDWEAK],\n        }, 'proc:40:add ailment-sick': {\n            id: BuffId['proc:40:add ailment-sick'],\n            name: 'Active Sick Infliction Added to Attack',\n            stat: UnitStat.sickInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDSICK],\n        }, 'proc:40:add ailment-injury': {\n            id: BuffId['proc:40:add ailment-injury'],\n            name: 'Active Injury Infliction Added to Attack',\n            stat: UnitStat.injuryInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDINJURY],\n        }, 'proc:40:add ailment-curse': {\n            id: BuffId['proc:40:add ailment-curse'],\n            name: 'Active Curse Infliction Added to Attack',\n            stat: UnitStat.curseInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDCURSE],\n        }, 'proc:40:add ailment-paralysis': {\n            id: BuffId['proc:40:add ailment-paralysis'],\n            name: 'Active Paralysis Infliction Added to Attack',\n            stat: UnitStat.paralysisInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDPARA],\n        }, 'proc:40:add ailment-atk down': {\n            id: BuffId['proc:40:add ailment-atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:40:add ailment-def down': {\n            id: BuffId['proc:40:add ailment-def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:40:add ailment-rec down': {\n            id: BuffId['proc:40:add ailment-rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:40:add ailment-unknown': {\n            id: BuffId['proc:40:add ailment-unknown'],\n            name: 'Active Unknown Ailment Infliction Added to Attack',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.BUFF_ADDAILMENT],\n        }, 'proc:42:sacrificial attack': {\n            id: BuffId['proc:42:sacrificial attack'],\n            name: 'Sacrificial Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n        }, 'proc:42:instant death': {\n            id: BuffId['proc:42:instant death'],\n            name: 'Instant Death to Self (Post-Attack)',\n            stackType: BuffStackType.Burst,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL, IconId.BUFF_KO],\n        }, 'proc:43:burst od fill': {\n            id: BuffId['proc:43:burst od fill'],\n            name: 'Burst OD Gauge Fill (Percentage)',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_OVERDRIVEUP],\n        }, 'proc:44:damage over time': {\n            id: BuffId['proc:44:damage over time'],\n            name: 'Active Damage over Time',\n            stat: UnitStat.damageOverTime,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_TURNDMG],\n        }, 'proc:45:attack boost-bb': {\n            id: BuffId['proc:45:attack boost-bb'],\n            name: 'Active BB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'proc:45:attack boost-sbb': {\n            id: BuffId['proc:45:attack boost-sbb'],\n            name: 'Active SBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'proc:45:attack boost-ubb': {\n            id: BuffId['proc:45:attack boost-ubb'],\n            name: 'Active UBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'proc:46:non-lethal proportional attack': {\n            id: BuffId['proc:46:non-lethal proportional attack'],\n            name: 'Non-Lethal Proportional Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n        }, 'proc:47:hp scaled attack': {\n            id: BuffId['proc:47:hp scaled attack'],\n            name: 'HP Scaled Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPSCALED : IconId.ATK_AOE_HPSCALED],\n        }, 'proc:48:piercing attack-base': {\n            id: BuffId['proc:48:piercing attack-base'],\n            name: 'Piercing Proportional Damage (Base HP)',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n        }, 'proc:48:piercing attack-current': {\n            id: BuffId['proc:48:piercing attack-current'],\n            name: 'Piercing Proportional Damage (Current HP)',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n        }, 'proc:48:piercing attack-fixed': {\n            id: BuffId['proc:48:piercing attack-fixed'],\n            name: 'Piercing Fixed Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_FIXED : IconId.ATK_AOE_PIERCING_FIXED],\n        }, 'proc:48:piercing attack-unknown': {\n            id: BuffId['proc:48:piercing attack-unknown'],\n            name: 'Unknown Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n        }, 'proc:49:chance instant death': {\n            id: BuffId['proc:49:chance instant death'],\n            name: 'Instant Death (Chance)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KO],\n        }, 'proc:50:chance damage reflect': {\n            id: BuffId['proc:50:chance damage reflect'],\n            name: 'Active Damage Reflect (Chance)',\n            stat: UnitStat.damageReflect,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_COUNTERDAMAGE],\n        }, 'proc:51:add to attack-atk down': {\n            id: BuffId['proc:51:add to attack-atk down'],\n            name: 'Active Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'proc:51:add to attack-def down': {\n            id: BuffId['proc:51:add to attack-def down'],\n            name: 'Active Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'proc:51:add to attack-rec down': {\n            id: BuffId['proc:51:add to attack-rec down'],\n            name: 'Active Recovery Reduction Infliction Added to Attack',\n            stat: UnitStat.recDownInflict,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ADDRECDOWN],\n        }, 'proc:52:bc efficacy': {\n            id: BuffId['proc:52:bc efficacy'],\n            name: 'Active BC Efficacy',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBFILL],\n        }, 'proc:53:inflict on hit-poison': {\n            id: BuffId['proc:53:inflict on hit-poison'],\n            name: 'Active Poison Counter',\n            stat: UnitStat.poisonCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_POISONCOUNTER],\n        }, 'proc:53:inflict on hit-weak': {\n            id: BuffId['proc:53:inflict on hit-weak'],\n            name: 'Active Weak Counter',\n            stat: UnitStat.weakCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WEAKCOUNTER],\n        }, 'proc:53:inflict on hit-sick': {\n            id: BuffId['proc:53:inflict on hit-sick'],\n            name: 'Active Sick Counter',\n            stat: UnitStat.sickCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SICKCOUNTER],\n        }, 'proc:53:inflict on hit-injury': {\n            id: BuffId['proc:53:inflict on hit-injury'],\n            name: 'Active Injury Counter',\n            stat: UnitStat.injuryCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_INJCONTER],\n        }, 'proc:53:inflict on hit-curse': {\n            id: BuffId['proc:53:inflict on hit-curse'],\n            name: 'Active Curse Counter',\n            stat: UnitStat.curseCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CURSECOUNTER],\n        }, 'proc:53:inflict on hit-paralysis': {\n            id: BuffId['proc:53:inflict on hit-paralysis'],\n            name: 'Active Paralysis Counter',\n            stat: UnitStat.paralysisCounter,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_PARALYCOUNTER],\n        }, 'proc:54:critical damage boost': {\n            id: BuffId['proc:54:critical damage boost'],\n            name: 'Active Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'proc:55:elemental weakness damage-fire': {\n            id: BuffId['proc:55:elemental weakness damage-fire'],\n            name: 'Active Fire Elemental Damage Boost',\n            stat: UnitStat.fireElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_FIREDMGUP],\n        }, 'proc:55:elemental weakness damage-water': {\n            id: BuffId['proc:55:elemental weakness damage-water'],\n            name: 'Active Water Elemental Damage Boost',\n            stat: UnitStat.waterElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_WATERDMGUP],\n        }, 'proc:55:elemental weakness damage-earth': {\n            id: BuffId['proc:55:elemental weakness damage-earth'],\n            name: 'Active Earth Elemental Damage Boost',\n            stat: UnitStat.earthElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_EARTHDMGUP],\n        }, 'proc:55:elemental weakness damage-thunder': {\n            id: BuffId['proc:55:elemental weakness damage-thunder'],\n            name: 'Active Thunder Elemental Damage Boost',\n            stat: UnitStat.thunderElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_THUNDERDMGUP],\n        }, 'proc:55:elemental weakness damage-light': {\n            id: BuffId['proc:55:elemental weakness damage-light'],\n            name: 'Active Light Elemental Damage Boost',\n            stat: UnitStat.lightElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_LIGHTDMGUP],\n        }, 'proc:55:elemental weakness damage-dark': {\n            id: BuffId['proc:55:elemental weakness damage-dark'],\n            name: 'Active Dark Elemental Damage Boost',\n            stat: UnitStat.darkElementalDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DARKDMGUP],\n        }, 'proc:55:elemental weakness damage-unknown': {\n            id: BuffId['proc:55:elemental weakness damage-unknown'],\n            name: 'Active Elemental Damage Boost (Unspecified Element)',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_ELEMENTDMGUP],\n        }, 'proc:56:chance ko resistance': {\n            id: BuffId['proc:56:chance ko resistance'],\n            name: 'KO Resistance (Chance)',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, 'proc:57:bc drop resistance-base': {\n            id: BuffId['proc:57:bc drop resistance-base'],\n            name: 'Active Base Battle Crystal Drop Rate Reduction',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BCDOWN],\n        }, 'proc:57:bc drop resistance-buff': {\n            id: BuffId['proc:57:bc drop resistance-buff'],\n            name: 'Active Buffed Battle Crystal Drop Rate Reduction',\n            stat: UnitStat.bcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BCDOWN],\n        }, 'proc:57:hc drop resistance-base': {\n            id: BuffId['proc:57:hc drop resistance-base'],\n            name: 'Active Base Heart Crystal Drop Rate Reduction',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HCDOWN],\n        }, 'proc:57:hc drop resistance-buff': {\n            id: BuffId['proc:57:hc drop resistance-buff'],\n            name: 'Active Buffed Heart Crystal Drop Rate Reduction',\n            stat: UnitStat.hcDropRate,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_HCDOWN],\n        }, 'proc:58:spark vulnerability': {\n            id: BuffId['proc:58:spark vulnerability'],\n            name: 'Active Spark Vulnerability',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SPARKDMGUP],\n        }, 'proc:59:attack reduction-bb': {\n            id: BuffId['proc:59:attack reduction-bb'],\n            name: 'Active BB ATK Reduction',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBATKDOWN],\n        }, 'proc:59:attack reduction-sbb': {\n            id: BuffId['proc:59:attack reduction-sbb'],\n            name: 'Active SBB ATK Reduction',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SBBATKDOWN],\n        }, 'proc:59:attack reduction-ubb': {\n            id: BuffId['proc:59:attack reduction-ubb'],\n            name: 'Active UBB ATK Reduction',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_UBBATKDOWN],\n        }, 'proc:61:party bb gauge-scaled attack': {\n            id: BuffId['proc:61:party bb gauge-scaled attack'],\n            name: 'Party BB Gauge-Scaled Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED],\n        }, 'proc:61:party bc drain': {\n            id: BuffId['proc:61:party bc drain'],\n            name: 'Party BB Gauge Drain (Post-Attack)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Burst,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED, IconId.BUFF_BBFILLDOWN],\n        }, 'proc:62:barrier-fire': {\n            id: BuffId['proc:62:barrier-fire'],\n            name: 'Fire Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_FIRESHIELD],\n        }, 'proc:62:barrier-water': {\n            id: BuffId['proc:62:barrier-water'],\n            name: 'Water Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_WATERSHIELD],\n        }, 'proc:62:barrier-earth': {\n            id: BuffId['proc:62:barrier-earth'],\n            name: 'Earth Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_EARTHSHIELD],\n        }, 'proc:62:barrier-thunder': {\n            id: BuffId['proc:62:barrier-thunder'],\n            name: 'Thunder Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_THUNDERSHIELD],\n        }, 'proc:62:barrier-light': {\n            id: BuffId['proc:62:barrier-light'],\n            name: 'Light Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_LIGHTSHIELD],\n        }, 'proc:62:barrier-dark': {\n            id: BuffId['proc:62:barrier-dark'],\n            name: 'Dark Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_DARKSHIELD],\n        }, 'proc:62:barrier-all': {\n            id: BuffId['proc:62:barrier-all'],\n            name: 'Barrier (All Elements)',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_ELEMENTSHIELD],\n        }, 'proc:62:barrier-unknown': {\n            id: BuffId['proc:62:barrier-unknown'],\n            name: 'Barrier (Unspecified Element)',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_ELEMENTSHIELD],\n        }, 'proc:64:consecutive usage attack': {\n            id: BuffId['proc:64:consecutive usage attack'],\n            name: 'Consecutive Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_USAGESCALED : IconId.ATK_AOE_USAGESCALED],\n        }, 'proc:65:ailment attack boost': {\n            id: BuffId['proc:65:ailment attack boost'],\n            name: 'Active Attack Boost on Status Afflicted Foes',\n            stat: UnitStat.ailmentAttackBoost,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_AILDMGUP],\n        }, 'proc:66:chance revive': {\n            id: BuffId['proc:66:chance revive'],\n            name: 'Instant Revive (Chance)',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, 'proc:67:bc fill on spark': {\n            id: BuffId['proc:67:bc fill on spark'],\n            name: 'Active BC Fill on Spark',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_SPARKBBUP],\n        }, 'proc:68:guard mitigation': {\n            id: BuffId['proc:68:guard mitigation'],\n            name: 'Active Guard Damage Reduction',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_GUARDCUT],\n        }, 'proc:69:bc fill on guard-percent': {\n            id: BuffId['proc:69:bc fill on guard-percent'],\n            name: 'Active BC Fill on Guard (Percentage)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'proc:69:bc fill on guard-flat': {\n            id: BuffId['proc:69:bc fill on guard-flat'],\n            name: 'Active BC Fill on Guard (Flat Amount)',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_GUARDBBUP],\n        }, 'proc:71:bc efficacy reduction': {\n            id: BuffId['proc:71:bc efficacy reduction'],\n            name: 'Active BC Efficacy Reduction',\n            stat: UnitStat.bcEfficacy,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_BBFILLDOWN],\n        }, 'proc:73:resist-atk down': {\n            id: BuffId['proc:73:resist-atk down'],\n            name: 'Active Attack Reduction Resistance',\n            stat: UnitStat.atkDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTATKDOWN],\n        }, 'proc:73:resist-def down': {\n            id: BuffId['proc:73:resist-def down'],\n            name: 'Active Defense Reduction Resistance',\n            stat: UnitStat.defDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTDEFDOWN],\n        }, 'proc:73:resist-rec down': {\n            id: BuffId['proc:73:resist-rec down'],\n            name: 'Active Recovery Reduction Resistance',\n            stat: UnitStat.recDownResist,\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_RESISTRECDOWN],\n        }, 'proc:75:element squad-scaled attack': {\n            id: BuffId['proc:75:element squad-scaled attack'],\n            name: 'Element Squad-Scaled Damage',\n            stackType: BuffStackType.Attack,\n            icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_ELEMENTSCALED : IconId.ATK_AOE_ELEMENTSCALED],\n        }, 'proc:76:extra action': {\n            id: BuffId['proc:76:extra action'],\n            name: 'Active Extra Action',\n            stat: UnitStat.extraAction,\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.BUFF_DBLSTRIKE],\n        }, 'proc:78:self stat boost-atk': {\n            id: BuffId['proc:78:self stat boost-atk'],\n            name: 'Active Self Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWNLOCK : IconId.BUFF_SELFATKUP],\n        }, 'proc:78:self stat boost-def': {\n            id: BuffId['proc:78:self stat boost-def'],\n            name: 'Active Self Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWNLOCK : IconId.BUFF_SELFDEFUP],\n        }, 'proc:78:self stat boost-rec': {\n            id: BuffId['proc:78:self stat boost-rec'],\n            name: 'Active Self Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWNLOCK : IconId.BUFF_SELFRECUP],\n        }, 'proc:78:self stat boost-crit': {\n            id: BuffId['proc:78:self stat boost-crit'],\n            name: 'Active Self Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWNLOCK : IconId.BUFF_SELFCRTRATEUP],\n        }, 'proc:79:player exp boost': {\n            id: BuffId['proc:79:player exp boost'],\n            name: 'Active Player EXP Boost',\n            stat: UnitStat.expModification,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_PLAYEREXP],\n        }, 'proc:82:resummon': {\n            id: BuffId['proc:82:resummon'],\n            name: 'Resummon Unit',\n            stackType: BuffStackType.Burst,\n            icons: () => [IconId.BUFF_SUMMONUNIT],\n        }, UNKNOWN_CONDITIONAL_EFFECT_ID: {\n            id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n            name: 'Unknown Conditional Effect',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, UNKNOWN_CONDITIONAL_BUFF_PARAMS: {\n            id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n            name: 'Unknown Conditional Buff Parameters',\n            stackType: BuffStackType.Unknown,\n            icons: () => [IconId.UNKNOWN],\n        }, 'conditional:1:attack buff': {\n            id: BuffId['conditional:1:attack buff'],\n            name: 'Conditional Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n        }, 'conditional:3:defense buff': {\n            id: BuffId['conditional:3:defense buff'],\n            name: 'Conditional Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n        }, 'conditional:5:recovery buff': {\n            id: BuffId['conditional:5:recovery buff'],\n            name: 'Conditional Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n        }, 'conditional:8:gradual heal': {\n            id: BuffId['conditional:8:gradual heal'],\n            name: 'Conditional Gradual Heal',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_HPREC],\n        }, 'conditional:12:guaranteed ko resistance': {\n            id: BuffId['conditional:12:guaranteed ko resistance'],\n            name: 'Conditional Guaranteed KO Resistance',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_KOBLK],\n        } }), (() => {\n        const createIconGetterForStat = (stat) => {\n            return (buff) => {\n                let element = '';\n                let polarity = 'UP';\n                if (buff) {\n                    if (buff.value && buff.value < 0) {\n                        polarity = 'DOWN';\n                    }\n                    if (buff.conditions && buff.conditions.targetElements) {\n                        element = buff.conditions.targetElements[0];\n                    }\n                }\n                if (typeof element !== 'string') {\n                    element = '';\n                }\n                let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n                if (!element || !(iconKey in IconId)) {\n                    iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n                }\n                return [IconId[iconKey]];\n            };\n        };\n        return {\n            'conditional:13:elemental attack buff': {\n                id: BuffId['conditional:13:elemental attack buff'],\n                name: 'Passive Elemental Attack Boost',\n                stat: UnitStat.atk,\n                stackType: BuffStackType.ConditionalTimed,\n                icons: createIconGetterForStat('ATK'),\n            },\n            'conditional:14:elemental defense buff': {\n                id: BuffId['conditional:14:elemental defense buff'],\n                name: 'Passive Elemental Defense Boost',\n                stat: UnitStat.def,\n                stackType: BuffStackType.ConditionalTimed,\n                icons: createIconGetterForStat('DEF'),\n            },\n        };\n    })()), { 'conditional:21:fire mitigation': {\n            id: BuffId['conditional:21:fire mitigation'],\n            name: 'Active Fire Damage Reduction',\n            stat: UnitStat.fireMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_FIREDMGDOWN],\n        }, 'conditional:22:water mitigation': {\n            id: BuffId['conditional:22:water mitigation'],\n            name: 'Active Water Damage Reduction',\n            stat: UnitStat.waterMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_WATERDMGDOWN],\n        }, 'conditional:23:earth mitigation': {\n            id: BuffId['conditional:23:earth mitigation'],\n            name: 'Active Earth Damage Reduction',\n            stat: UnitStat.earthMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_EARTHDMGDOWN],\n        }, 'conditional:24:thunder mitigation': {\n            id: BuffId['conditional:24:thunder mitigation'],\n            name: 'Active Thunder Damage Reduction',\n            stat: UnitStat.thunderMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n        }, 'conditional:25:light mitigation': {\n            id: BuffId['conditional:25:light mitigation'],\n            name: 'Active Light Damage Reduction',\n            stat: UnitStat.lightMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n        }, 'conditional:26:dark mitigation': {\n            id: BuffId['conditional:26:dark mitigation'],\n            name: 'Active Dark Damage Reduction',\n            stat: UnitStat.darkMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_DARKDMGDOWN],\n        }, 'conditional:36:mitigation': {\n            id: BuffId['conditional:36:mitigation'],\n            name: 'Conditional Damage Reduction',\n            stat: UnitStat.mitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_DAMAGECUT],\n        }, 'conditional:37:gradual bc fill': {\n            id: BuffId['conditional:37:gradual bc fill'],\n            name: 'Conditional Gradual BC Fill',\n            stat: UnitStat.bbGauge,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_BBREC],\n        }, 'conditional:40:spark damage': {\n            id: BuffId['conditional:40:spark damage'],\n            name: 'Conditional Spark Damage Boost',\n            stat: UnitStat.sparkDamage,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n        }, 'conditional:72:attack boost-bb': {\n            id: BuffId['conditional:72:attack boost-bb'],\n            name: 'Conditional BB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_BBATKUP],\n        }, 'conditional:72:attack boost-sbb': {\n            id: BuffId['conditional:72:attack boost-sbb'],\n            name: 'Conditional SBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_SBBATKUP],\n        }, 'conditional:72:attack boost-ubb': {\n            id: BuffId['conditional:72:attack boost-ubb'],\n            name: 'Conditional UBB ATK Boost',\n            stat: UnitStat.bbAtk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_UBBATKUP],\n        }, 'conditional:74:add atk down to attack': {\n            id: BuffId['conditional:74:add atk down to attack'],\n            name: 'Conditional Attack Reduction Infliction Added to Attack',\n            stat: UnitStat.atkDownInflict,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ADDATKDOWN],\n        }, 'conditional:75:add def down to attack': {\n            id: BuffId['conditional:75:add def down to attack'],\n            name: 'Conditional Defense Reduction Infliction Added to Attack',\n            stat: UnitStat.defDownInflict,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ADDDEFDOWN],\n        }, 'conditional:84:critical damage': {\n            id: BuffId['conditional:84:critical damage'],\n            name: 'Conditional Critical Damage Boost',\n            stat: UnitStat.criticalDamage,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_CRTUP],\n        }, 'conditional:91:chance ko resistance': {\n            id: BuffId['conditional:91:chance ko resistance'],\n            name: 'Conditional KO Resistance (Chance)',\n            stat: UnitStat.koResistance,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_KOBLOCK],\n        }, 'conditional:98:thunder barrier': {\n            id: BuffId['conditional:98:thunder barrier'],\n            name: 'Thunder Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_THUNDERSHIELD],\n        }, 'conditional:99:light barrier': {\n            id: BuffId['conditional:99:light barrier'],\n            name: 'Conditional Light Barrier',\n            stat: UnitStat.barrier,\n            stackType: BuffStackType.Singleton,\n            icons: () => [IconId.BUFF_LIGHTSHIELD],\n        }, 'conditional:132:od fill rate': {\n            id: BuffId['conditional:132:od fill rate'],\n            name: 'Conditional OD Gauge Fill Rate',\n            stat: UnitStat.odGauge,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ODFILLBOOST],\n        }, 'conditional:133:heal on hit': {\n            id: BuffId['conditional:133:heal on hit'],\n            name: 'Conditional Heal when Attacked (Chance)',\n            stat: UnitStat.hpRecovery,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_BEENATK_HPREC],\n        }, 'conditional:143:critical damage reduction-base': {\n            id: BuffId['conditional:143:critical damage reduction-base'],\n            name: 'Conditional Base Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'conditional:143:critical damage reduction-buff': {\n            id: BuffId['conditional:143:critical damage reduction-buff'],\n            name: 'Conditional Buffed Critical Damage Reduction',\n            stat: UnitStat.criticalDamageMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_CRTDOWN],\n        }, 'conditional:145:elemental weakness damage reduction-base': {\n            id: BuffId['conditional:145:elemental weakness damage reduction-base'],\n            name: 'Conditional Base Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'conditional:145:elemental weakness damage reduction-buff': {\n            id: BuffId['conditional:145:elemental weakness damage reduction-buff'],\n            name: 'Conditional Buffed Elemental Weakness Damage Reduction',\n            stat: UnitStat.elementalWeaknessDamageMitigation,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_ELEMENTDOWN],\n        }, 'conditional:153:chance inflict atk down on hit': {\n            id: BuffId['conditional:153:chance inflict atk down on hit'],\n            name: 'Conditional Attack Reduction Counter (Chance)',\n            stat: UnitStat.atkDownCounter,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: () => [IconId.BUFF_PROB_ATKREDUC],\n        } }));\n\n    /**\n     * @description Get the associated metadata entry for a given buff ID.\n     * @param id Buff ID to get metadata for.\n     * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n     * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n     */\n    function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n        return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n            ? metadata[id]\n            : (void 0);\n    }\n\n    var index$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        convertProcEffectToBuffs: convertProcEffectToBuffs,\n        convertPassiveEffectToBuffs: convertPassiveEffectToBuffs,\n        convertConditionalEffectToBuffs: convertConditionalEffectToBuffs,\n        get BuffSource () { return BuffSource; },\n        get BuffStackType () { return BuffStackType; },\n        BUFF_METADATA: BUFF_METADATA,\n        getMetadataForBuff: getMetadataForBuff\n    });\n\n    var index$2 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        constants: constants,\n        parsers: index$1,\n        getMetadataForProc: getMetadataForProc,\n        getMetadataForPassive: getMetadataForPassive,\n        isAttackingProcId: isAttackingProcId,\n        getNameForProc: getNameForProc,\n        getNameForPassive: getNameForPassive,\n        isProcEffect: isProcEffect,\n        isPassiveEffect: isPassiveEffect,\n        combineEffectsAndDamageFrames: combineEffectsAndDamageFrames,\n        getEffectId: getEffectId,\n        getEffectName: getEffectName,\n        get ProcBuffType () { return ProcBuffType; },\n        PASSIVE_METADATA: PASSIVE_METADATA,\n        PROC_METADATA: PROC_METADATA\n    });\n\n    /**\n     * @description Get the effects of a given extra skill.\n     * @param skill Extra skill to get the effects of.\n     * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForExtraSkill(skill) {\n        return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n    }\n\n    var index$3 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForExtraSkill: getEffectsForExtraSkill\n    });\n\n    /**\n     * @description Get the effects of a given item.\n     * @param item Item to get the effects of, if any are present,\n     * @returns Effects of the given item if they exist, an empty array otherwise.\n     */\n    function getEffectsForItem(item) {\n        let result = [];\n        if (item && item.effect) {\n            if (Array.isArray(item.effect)) {\n                result = item.effect;\n            }\n            else if (Array.isArray(item.effect.effect)) {\n                const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n                result = effect.map(e => {\n                    // apply target data to each effect\n                    const fullProcEffect = Object.assign({}, e);\n                    fullProcEffect['target area'] = targetArea;\n                    fullProcEffect['target type'] = targetType;\n                    return fullProcEffect;\n                });\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given item thumbnail filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents the thumbnail image for a given item.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getItemImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/item/${fileName || ''}`;\n    }\n\n    var index$4 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForItem: getEffectsForItem,\n        getItemImageUrl: getItemImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given leader skill.\n     * @param skill Leader skill to get the effects of.\n     * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n     */\n    function getEffectsForLeaderSkill(skill) {\n        return skill && Array.isArray(skill.effects) ? skill.effects : [];\n    }\n\n    var index$5 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForLeaderSkill: getEffectsForLeaderSkill\n    });\n\n    /**\n     * @description Generate the file names for each of the image type for a given unit ID.\n     * @param id Unit ID to use to generate the file names.\n     * @param suffix Optional parameter that's useful for things like alternate art.\n     * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n     */\n    function getUnitImageFileNames(id, suffix = '') {\n        const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n        return {\n            spritesheet: `unit_anime_${fileNameSuffix}`,\n            battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n            guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n            fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n        };\n    }\n\n    /**\n     * @description Generate a URL to display the image with the given unit filename.\n     * @param baseContentUrl Base URL of the server.\n     * @param fileName Name of the file that represents an image for a given unit.\n     * @returns Generated URL based on the given content URL and file name.\n     */\n    function getUnitImageUrl(baseContentUrl, fileName) {\n        return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n    }\n\n    var index$6 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getUnitImageFileNames: getUnitImageFileNames,\n        getUnitImageUrl: getUnitImageUrl\n    });\n\n    /**\n     * @description Get the effects of a given SP Enhancement Entry.\n     * @param entry SP Enhancement Entry to get the effects of.\n     * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n     */\n    function getEffectsForSpEnhancement(entry) {\n        const result = [];\n        if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n            const effectWrappers = entry.skill.effects;\n            effectWrappers.forEach(effectWrapper => {\n                Object.keys(effectWrapper).forEach(spType => {\n                    const originalEffect = effectWrapper[spType];\n                    const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                    result.push(unwrappedEffect);\n                });\n            });\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the associated category name with a given category ID.\n     * @param categoryId Category ID to get the name of.\n     * @returns Name of the given category ID or the string 'Unknown'.\n     */\n    function getSpCategoryName(categoryId) {\n        let result;\n        const numericalCategoryId = +categoryId;\n        switch (numericalCategoryId) {\n            case 1:\n                result = SpCategoryName['Parameter Boost'];\n                break;\n            case 2:\n                result = SpCategoryName.Spark;\n                break;\n            case 3:\n                result = SpCategoryName['Critical Hits'];\n                break;\n            case 4:\n                result = SpCategoryName['Attack Boost'];\n                break;\n            case 5:\n                result = SpCategoryName['BB Gauge'];\n                break;\n            case 6:\n                result = SpCategoryName['HP Recovery'];\n                break;\n            case 7:\n                result = SpCategoryName.Drops;\n                break;\n            case 8:\n                result = SpCategoryName['Ailment Resistance'];\n                break;\n            case 9:\n                result = SpCategoryName['Ailment Infliction'];\n                break;\n            case 10:\n                result = SpCategoryName['Damage Reduction'];\n                break;\n            case 11:\n                result = SpCategoryName.Special;\n                break;\n            default:\n                result = SpCategoryName.Unknown;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n    /**\n     * @ignore\n     */\n    const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n\n    /**\n     * @description Get the corresponding character code for a given index.\n     * It expects an index between 0 and 61 inclusive; will return an empty string if\n     * the given value is outside of the range.\n     * @param index Index of an SP entry in a given skills array.\n     * @returns Corresponding single alphanumeric character to the given index\n     * or an empty string if the index is invalid.\n     */\n    function spIndexToCode(index) {\n        let result = '';\n        let correspondingCharacterCode = -1;\n        if (Number.isInteger(index)) {\n            if (index >= 0 && index <= 25) { // A-Z\n                correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (index >= 26 && index <= 51) { // a-z\n                correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n            }\n            else if (index >= 52 && index <= 61) { // 0-9\n                correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n            }\n        }\n        if (correspondingCharacterCode !== -1) {\n            result = String.fromCharCode(correspondingCharacterCode);\n        }\n        return result;\n    }\n\n    /**\n     * @description Get the corresponding index for a given character code.\n     * It expects an alphanumeric character and will return -1 otherwise.\n     * @param code Character code an SP entry in a given skills array.\n     * @returns Corresponding index to the given character or -1 if the\n     * character is invalid.\n     */\n    function spCodeToIndex(code) {\n        let result = -1;\n        let characterCodeOffset = -1;\n        if (!!code && typeof code === 'string' && code.length === 1) {\n            if (code >= 'A' && code <= 'Z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n            }\n            else if (code >= 'a' && code <= 'z') {\n                characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n            }\n            else if (code >= '0' && code <= '9') {\n                characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n            }\n        }\n        if (characterCodeOffset !== -1) {\n            result = code.charCodeAt(0) - characterCodeOffset;\n        }\n        return result;\n    }\n\n    /**\n     * @description Extract the ID of a string in the format of `number@actualId`. If there\n     * is no value after the @ character or if no @ character is present, the original ID is returned.\n     * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n     * @param id Original SP Enhancement Entry ID.\n     * @returns The ID of a string in the format of `number@actualId`, or the original input if\n     * there is no @ character or no value after the @ character.\n     */\n    function getSpEntryId(id) {\n        return (typeof id === 'string' && id.split('@')[1]) || id;\n    }\n\n    /**\n     * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n     * @param id SP Enhancement entry ID.\n     * @param entries Collection of SP Enhancement entries to search in.\n     * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n     */\n    function getSpEntryWithId(id, entries) {\n        const spId = getSpEntryId(id);\n        return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n     * @param entry SP Entry to get dependencies for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n     */\n    function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependencies = [];\n        if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n            const dependencyId = getSpEntryId(entry.dependency);\n            const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n            if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n                addedEntries.add(dependencyEntry);\n                const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n                dependencies = [dependencyEntry].concat(subDependencies);\n            }\n        }\n        return dependencies;\n    }\n\n    /**\n     * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n     * @param entry SP Entry to get dependents for.\n     * @param allEntries Collection of SP Entries to search in.\n     * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n     * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n     */\n    function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n        let dependents = [];\n        if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n            const entryId = entry.id;\n            dependents = allEntries\n                .filter(s => {\n                return s.dependency &&\n                    s.dependency.includes(entryId) &&\n                    !addedEntries.has(s);\n            });\n            dependents.forEach(dependent => {\n                addedEntries.add(dependent);\n                const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n                dependents = dependents.concat(subDependents);\n            });\n        }\n        return dependents;\n    }\n\n    var index$7 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getEffectsForSpEnhancement: getEffectsForSpEnhancement,\n        getSpCategoryName: getSpCategoryName,\n        spIndexToCode: spIndexToCode,\n        spCodeToIndex: spCodeToIndex,\n        getSpEntryId: getSpEntryId,\n        getSpEntryWithId: getSpEntryWithId,\n        getAllDependenciesForSpEntry: getAllDependenciesForSpEntry,\n        getAllEntriesThatDependOnSpEntry: getAllEntriesThatDependOnSpEntry\n    });\n\n    /* NOTE: this file is automatically generated; do not edit this file */\n    var version = '0.7.0';\n\n    exports.buffs = index$2;\n    exports.bursts = index;\n    exports.datamineTypes = datamineTypes;\n    exports.extraSkills = index$3;\n    exports.items = index$4;\n    exports.leaderSkills = index$5;\n    exports.spEnhancements = index$7;\n    exports.units = index$6;\n    exports.version = version;\n\n    return exports;\n\n}({}));\n\n","/**\n * @description Get the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get level entry from.\n * @param level Optional 1-indexed level to get; if not specified, the last level of the burst is used.\n * @returns Level entry of a burst at a given level (or last level if no level is given) if it exists, undefined otherwise.\n */\nexport default function getLevelEntryForBurst(burst, level) {\n    const burstEffectsByLevel = (burst && Array.isArray(burst.levels)) ? burst.levels : [];\n    let levelIndex;\n    if (level !== null && !isNaN(level)) {\n        // 1-indexed\n        levelIndex = (+level - 1);\n    }\n    else {\n        // default to last entry in burst\n        levelIndex = burstEffectsByLevel.length - 1;\n    }\n    return burstEffectsByLevel[levelIndex];\n}\n","/**\n * @description Get the proc/passive ID of a given object.\n * @param effect Object to get the effect ID from.\n * @returns Proc/passive ID of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectId(effect) {\n    let resultId = '';\n    if (effect) {\n        resultId = effect['proc id'] || effect['unknown proc id'] ||\n            effect['passive id'] || effect['unknown passive id'] || '';\n    }\n    return resultId;\n}\n","export var KNOWN_PROC_ID;\n(function (KNOWN_PROC_ID) {\n    KNOWN_PROC_ID[\"BurstHeal\"] = \"2\";\n    KNOWN_PROC_ID[\"Unknown\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n})(KNOWN_PROC_ID || (KNOWN_PROC_ID = {}));\nexport var KNOWN_PASSIVE_ID;\n(function (KNOWN_PASSIVE_ID) {\n    KNOWN_PASSIVE_ID[\"TriggeredEffect\"] = \"66\";\n    KNOWN_PASSIVE_ID[\"Unknown\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n})(KNOWN_PASSIVE_ID || (KNOWN_PASSIVE_ID = {}));\nexport var KNOWN_CONDITIONAL_ID;\n(function (KNOWN_CONDITIONAL_ID) {\n    KNOWN_CONDITIONAL_ID[\"Unknown\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n})(KNOWN_CONDITIONAL_ID || (KNOWN_CONDITIONAL_ID = {}));\n","export var ProcBuffType;\n(function (ProcBuffType) {\n    ProcBuffType[\"Attack\"] = \"Attack\";\n})(ProcBuffType || (ProcBuffType = {}));\n/* eslint-disable */\n/**\n * @ignore\n */\nexport const PASSIVE_METADATA = Object.freeze({\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Parameter Boost\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Elemental Parameter Boost\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Type-Based Parameter Boost\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"Status Negation\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Damage Reduction\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Gradual BB Gauge Boost\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"HC Efficacy\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"HP-Conditional Parameter Boost\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"HP-Conditional Drop Rate Boost\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"BC Fill on Enemy Defeat\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Damage Reduction (Chance)\"\n    },\n    \"15\": {\n        \"ID\": \"15\",\n        \"Name\": \"Heal on Enemy Defeat\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Heal on Battle Victory\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"HP Absorption\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Drop Rate Boost\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"Status Infliction\"\n    },\n    \"21\": {\n        \"ID\": \"21\",\n        \"Name\": \"Parameter Boost for First X Turns\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"BC Fill on Battle Victory\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Heal when Attacked (Chance)\"\n    },\n    \"25\": {\n        \"ID\": \"25\",\n        \"Name\": \"BC Fill when Hit (Chance)\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Damage Counter (Chance)\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Increased Target Chance\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Decreased Target Chance\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Defense Ignore (Chance)\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"BB Conditional Parameter Boost\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Spark Damage Boost, Boost Drop Rate on Spark\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"BC Efficacy\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Heal over Time\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"Critical Damage Boost\"\n    },\n    \"35\": {\n        \"ID\": \"35\",\n        \"Name\": \"BC Fill when Normal Attacking\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Extra Action\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Hit Count Boost\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Parameter Conversion\"\n    },\n    \"41\": {\n        \"ID\": \"41\",\n        \"Name\": \"Unique Element Count Conditional Parameter Boost\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"Gender Parameter Boost\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Damage Reduction to 1\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Flat Parameter Boost\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"Critical Damage Negation\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Parameter Boost Relative to HP Remainaing\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"BC Fill on Spark\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"BC Cost Reduction\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"BB Gauge Consumption Reduction\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Elemental Damage Boost\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Critical/Elemental Weakness Damage Negation\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Conditional Effect based on HP Threshold\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Damage Reduction when Guarding\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BC Fill when Attacked when Guarding\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BC Fill on Guard\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Elemental Damage Reduction\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Elemental Damage Reduction for first X Turns\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"BB Atk Boost\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"BC Fill on Critical\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Add buff to Brave Burst\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"OD Gauge Fill Rate Boost\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"Status Counter\"\n    },\n    \"72\": {\n        \"ID\": \"72\",\n        \"Name\": \"Turn End Effects Activate at Turn Start\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\"\n    },\n    \"74\": {\n        \"ID\": \"74\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Spark Vulnerability\"\n    },\n    \"77\": {\n        \"ID\": \"77\",\n        \"Name\": \"Spark Damage Reduction\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Conditional Effect after Damage Received Threshold\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"BC Fill after Damage Received Threshold\"\n    },\n    \"80\": {\n        \"ID\": \"80\",\n        \"Name\": \"Conditional Effect after Damage Dealt Threshold\"\n    },\n    \"81\": {\n        \"ID\": \"81\",\n        \"Name\": \"BC Fill after Damage Dealt Threshold\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"Conditional Effect after BC Received Threshold\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"Conditional Effect after HC Received Threshold\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"BC Fill after HC Received Threshold\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"Conditional Effect after Spark Threshold\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Conditional Effect on Guard\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Conditional Effect on Critical\"\n    },\n    \"90\": {\n        \"ID\": \"90\",\n        \"Name\": \"Status Infliction on Critical\"\n    },\n    \"91\": {\n        \"ID\": \"91\",\n        \"Name\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Negate Defense Ignore\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Added Elements\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Normal Attacks Hit All Foes\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Player EXP Boost\"\n    },\n    \"99\": {\n        \"ID\": \"99\",\n        \"Name\": \"\"\n    },\n    \"100\": {\n        \"ID\": \"100\",\n        \"Name\": \"Spark Critical\"\n    },\n    \"101\": {\n        \"ID\": \"101\",\n        \"Name\": \"Heal on Spark\"\n    },\n    \"102\": {\n        \"ID\": \"102\",\n        \"Name\": \"Added Elements\"\n    },\n    \"103\": {\n        \"ID\": \"103\",\n        \"Name\": \"BB Atk Boost when HP Passes Threshold\"\n    },\n    \"104\": {\n        \"ID\": \"104\",\n        \"Name\": \"Spark Boost when HP Passes Threshold\"\n    },\n    \"105\": {\n        \"ID\": \"105\",\n        \"Name\": \"Turn-Based Parameter Boost\"\n    },\n    \"106\": {\n        \"ID\": \"106\",\n        \"Name\": \"Conditional Effect after Activating Overdrive\"\n    },\n    \"107\": {\n        \"ID\": \"107\",\n        \"Name\": \"Add Effect to Leader Skill\"\n    },\n    \"109\": {\n        \"ID\": \"109\",\n        \"Name\": \"BB Gauge Reduction (Chance)\"\n    },\n    \"110\": {\n        \"ID\": \"110\",\n        \"Name\": \"BC Efficacy Reduction (Chance)\"\n    },\n    \"111\": {\n        \"ID\": \"111\",\n        \"Name\": \"Increase Brave Burst Activation Rate\"\n    },\n    \"112\": {\n        \"ID\": \"112\",\n        \"Name\": \"ABP/CBP Boost\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Conditional Effect after HP Threshold\"\n    },\n    \"114\": {\n        \"ID\": \"114\",\n        \"Name\": \"Inflict Buff when Attacked\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Additional Damage (Damage over Time) Reduction\"\n    },\n    \"128\": {\n        \"ID\": \"128\",\n        \"Name\": \"Damage Reduction from Normal Attacks\"\n    },\n    \"143\": {\n        \"ID\": \"143\",\n        \"Name\": \"Break Atk Parameter Limit\"\n    },\n    \"10008\": {\n        \"ID\": \"10008\",\n        \"Name\": \"Damage Reduction from Specific Sources\"\n    },\n    \"11004\": {\n        \"ID\": \"11004\",\n        \"Name\": \"Elemental Spark Damage Boost\"\n    },\n    \"11005\": {\n        \"ID\": \"11005\",\n        \"Name\": \"Elemental Critical Damage Boost\"\n    },\n    \"11006\": {\n        \"ID\": \"11006\",\n        \"Name\": \"Summoner EXP Boost\"\n    },\n    \"11009\": {\n        \"ID\": \"11009\",\n        \"Name\": \"Effect Duration Boost\"\n    },\n    \"66,1\": {\n        \"ID\": \"66,1\",\n        \"Name\": \"\"\n    }\n});\n/**\n * @ignore\n */\nexport const PROC_METADATA = Object.freeze({\n    \"0\": {\n        \"ID\": \"0\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"1\": {\n        \"ID\": \"1\",\n        \"Name\": \"Regular Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"2\": {\n        \"ID\": \"2\",\n        \"Name\": \"Burst Heal\",\n        \"Type\": \"\"\n    },\n    \"3\": {\n        \"ID\": \"3\",\n        \"Name\": \"Heal over Time\",\n        \"Type\": \"\"\n    },\n    \"4\": {\n        \"ID\": \"4\",\n        \"Name\": \"BB Gauge Refill\",\n        \"Type\": \"\"\n    },\n    \"5\": {\n        \"ID\": \"5\",\n        \"Name\": \"Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"6\": {\n        \"ID\": \"6\",\n        \"Name\": \"Drop Rate\",\n        \"Type\": \"\"\n    },\n    \"7\": {\n        \"ID\": \"7\",\n        \"Name\": \"Guaranteed KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"8\": {\n        \"ID\": \"8\",\n        \"Name\": \"Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"9\": {\n        \"ID\": \"9\",\n        \"Name\": \"Parameter Reduction\",\n        \"Type\": \"\"\n    },\n    \"10\": {\n        \"ID\": \"10\",\n        \"Name\": \"Status Cleanse\",\n        \"Type\": \"\"\n    },\n    \"11\": {\n        \"ID\": \"11\",\n        \"Name\": \"Status Infliction\",\n        \"Type\": \"\"\n    },\n    \"12\": {\n        \"ID\": \"12\",\n        \"Name\": \"Revive (Guaranteed)\",\n        \"Type\": \"\"\n    },\n    \"13\": {\n        \"ID\": \"13\",\n        \"Name\": \"Random Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"14\": {\n        \"ID\": \"14\",\n        \"Name\": \"Lifesteal Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"16\": {\n        \"ID\": \"16\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"17\": {\n        \"ID\": \"17\",\n        \"Name\": \"Status Negation\",\n        \"Type\": \"\"\n    },\n    \"18\": {\n        \"ID\": \"18\",\n        \"Name\": \"Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"19\": {\n        \"ID\": \"19\",\n        \"Name\": \"Gradual BB Gauge Boost\",\n        \"Type\": \"\"\n    },\n    \"20\": {\n        \"ID\": \"20\",\n        \"Name\": \"BC Fill on Hit\",\n        \"Type\": \"\"\n    },\n    \"22\": {\n        \"ID\": \"22\",\n        \"Name\": \"Defense Ignore\",\n        \"Type\": \"\"\n    },\n    \"23\": {\n        \"ID\": \"23\",\n        \"Name\": \"Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"24\": {\n        \"ID\": \"24\",\n        \"Name\": \"Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"26\": {\n        \"ID\": \"26\",\n        \"Name\": \"Hit Count Boost\",\n        \"Type\": \"\"\n    },\n    \"27\": {\n        \"ID\": \"27\",\n        \"Name\": \"Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"28\": {\n        \"ID\": \"28\",\n        \"Name\": \"Fixed Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"29\": {\n        \"ID\": \"29\",\n        \"Name\": \"Multi-Element Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"30\": {\n        \"ID\": \"30\",\n        \"Name\": \"Add Elements\",\n        \"Type\": \"\"\n    },\n    \"31\": {\n        \"ID\": \"31\",\n        \"Name\": \"Instant BB Gauge Fill\",\n        \"Type\": \"\"\n    },\n    \"32\": {\n        \"ID\": \"32\",\n        \"Name\": \"Element Shift\",\n        \"Type\": \"\"\n    },\n    \"33\": {\n        \"ID\": \"33\",\n        \"Name\": \"Buff Removal (Chance)\",\n        \"Type\": \"\"\n    },\n    \"34\": {\n        \"ID\": \"34\",\n        \"Name\": \"BB Gauge Reduction (Chance)\",\n        \"Type\": \"\"\n    },\n    \"36\": {\n        \"ID\": \"36\",\n        \"Name\": \"Leader Skill Lock (Chance)\",\n        \"Type\": \"\"\n    },\n    \"37\": {\n        \"ID\": \"37\",\n        \"Name\": \"Summon Unit\",\n        \"Type\": \"\"\n    },\n    \"38\": {\n        \"ID\": \"38\",\n        \"Name\": \"Status Cure\",\n        \"Type\": \"\"\n    },\n    \"39\": {\n        \"ID\": \"39\",\n        \"Name\": \"Elemental Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"40\": {\n        \"ID\": \"40\",\n        \"Name\": \"Status Infliction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"42\": {\n        \"ID\": \"42\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"43\": {\n        \"ID\": \"43\",\n        \"Name\": \"Instant OD Fill\",\n        \"Type\": \"\"\n    },\n    \"44\": {\n        \"ID\": \"44\",\n        \"Name\": \"Damage over Time (Additional Damage)\",\n        \"Type\": \"\"\n    },\n    \"45\": {\n        \"ID\": \"45\",\n        \"Name\": \"BB Atk Boost\",\n        \"Type\": \"\"\n    },\n    \"46\": {\n        \"ID\": \"46\",\n        \"Name\": \"Non-Lethal Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"47\": {\n        \"ID\": \"47\",\n        \"Name\": \"HP Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"48\": {\n        \"ID\": \"48\",\n        \"Name\": \"Piercing Proportional Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"49\": {\n        \"ID\": \"49\",\n        \"Name\": \"Retire\",\n        \"Type\": \"\"\n    },\n    \"50\": {\n        \"ID\": \"50\",\n        \"Name\": \"Damage Counter\",\n        \"Type\": \"\"\n    },\n    \"51\": {\n        \"ID\": \"51\",\n        \"Name\": \"Parameter Reduction Added to Attack\",\n        \"Type\": \"\"\n    },\n    \"52\": {\n        \"ID\": \"52\",\n        \"Name\": \"BC Efficacy\",\n        \"Type\": \"\"\n    },\n    \"53\": {\n        \"ID\": \"53\",\n        \"Name\": \"Status Counter\",\n        \"Type\": \"\"\n    },\n    \"54\": {\n        \"ID\": \"54\",\n        \"Name\": \"Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"55\": {\n        \"ID\": \"55\",\n        \"Name\": \"Elemental Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"56\": {\n        \"ID\": \"56\",\n        \"Name\": \"Chance KO Resistance (Angel Idol)\",\n        \"Type\": \"\"\n    },\n    \"57\": {\n        \"ID\": \"57\",\n        \"Name\": \"BC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"58\": {\n        \"ID\": \"58\",\n        \"Name\": \"Spark Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"59\": {\n        \"ID\": \"59\",\n        \"Name\": \"BB Atk Reduction\",\n        \"Type\": \"\"\n    },\n    \"60\": {\n        \"ID\": \"60\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"61\": {\n        \"ID\": \"61\",\n        \"Name\": \"BB-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"62\": {\n        \"ID\": \"62\",\n        \"Name\": \"Barrier\",\n        \"Type\": \"\"\n    },\n    \"63\": {\n        \"ID\": \"63\",\n        \"Name\": \"Selective Buff Wipe\",\n        \"Type\": \"\"\n    },\n    \"64\": {\n        \"ID\": \"64\",\n        \"Name\": \"Consecutive Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"65\": {\n        \"ID\": \"65\",\n        \"Name\": \"Attack Boost on Status Afflicted Foes\",\n        \"Type\": \"\"\n    },\n    \"66\": {\n        \"ID\": \"66\",\n        \"Name\": \"Revive (Chance)\",\n        \"Type\": \"\"\n    },\n    \"67\": {\n        \"ID\": \"67\",\n        \"Name\": \"BC Fill on Spark\",\n        \"Type\": \"\"\n    },\n    \"68\": {\n        \"ID\": \"68\",\n        \"Name\": \"Damage Reduction when Guarding\",\n        \"Type\": \"\"\n    },\n    \"69\": {\n        \"ID\": \"69\",\n        \"Name\": \"BC Fill on Guard\",\n        \"Type\": \"\"\n    },\n    \"70\": {\n        \"ID\": \"70\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"71\": {\n        \"ID\": \"71\",\n        \"Name\": \"BB Gauge Fill Rate Debuff\",\n        \"Type\": \"\"\n    },\n    \"73\": {\n        \"ID\": \"73\",\n        \"Name\": \"Parameter Reduction Negation\",\n        \"Type\": \"\"\n    },\n    \"75\": {\n        \"ID\": \"75\",\n        \"Name\": \"Element Squad-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"76\": {\n        \"ID\": \"76\",\n        \"Name\": \"Extra Action\",\n        \"Type\": \"\"\n    },\n    \"78\": {\n        \"ID\": \"78\",\n        \"Name\": \"Self Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"79\": {\n        \"ID\": \"79\",\n        \"Name\": \"Player EXP Boost\",\n        \"Type\": \"\"\n    },\n    \"82\": {\n        \"ID\": \"82\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"83\": {\n        \"ID\": \"83\",\n        \"Name\": \"Spark Critical\",\n        \"Type\": \"\"\n    },\n    \"84\": {\n        \"ID\": \"84\",\n        \"Name\": \"OD Gauge Fill Rate\",\n        \"Type\": \"\"\n    },\n    \"85\": {\n        \"ID\": \"85\",\n        \"Name\": \"Heal when Attacked\",\n        \"Type\": \"\"\n    },\n    \"86\": {\n        \"ID\": \"86\",\n        \"Name\": \"HP Absorption\",\n        \"Type\": \"\"\n    },\n    \"87\": {\n        \"ID\": \"87\",\n        \"Name\": \"Heal on Spark\",\n        \"Type\": \"\"\n    },\n    \"88\": {\n        \"ID\": \"88\",\n        \"Name\": \"Self Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"89\": {\n        \"ID\": \"89\",\n        \"Name\": \"Self Parameter Conversion\",\n        \"Type\": \"\"\n    },\n    \"92\": {\n        \"ID\": \"92\",\n        \"Name\": \"Self Max HP Boost\",\n        \"Type\": \"\"\n    },\n    \"93\": {\n        \"ID\": \"93\",\n        \"Name\": \"Spark/Critical/Elemental Weakness Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"94\": {\n        \"ID\": \"94\",\n        \"Name\": \"Normal Attacks Hit All Foes\",\n        \"Type\": \"\"\n    },\n    \"95\": {\n        \"ID\": \"95\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"96\": {\n        \"ID\": \"96\",\n        \"Name\": \"Nullify Extra Skill Effects (ES Lock)\",\n        \"Type\": \"\"\n    },\n    \"97\": {\n        \"ID\": \"97\",\n        \"Name\": \"Element Target Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"113\": {\n        \"ID\": \"113\",\n        \"Name\": \"Gradual OD Fill\",\n        \"Type\": \"\"\n    },\n    \"119\": {\n        \"ID\": \"119\",\n        \"Name\": \"Gradual BC Drain\",\n        \"Type\": \"\"\n    },\n    \"123\": {\n        \"ID\": \"123\",\n        \"Name\": \"OD Gauge Reduction\",\n        \"Type\": \"\"\n    },\n    \"126\": {\n        \"ID\": \"126\",\n        \"Name\": \"Damage over Time (Additional Damage) Mitigation\",\n        \"Type\": \"\"\n    },\n    \"127\": {\n        \"ID\": \"127\",\n        \"Name\": \"Lock On\",\n        \"Type\": \"\"\n    },\n    \"130\": {\n        \"ID\": \"130\",\n        \"Name\": \"Parameter Reduction Counter\",\n        \"Type\": \"\"\n    },\n    \"131\": {\n        \"ID\": \"131\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"132\": {\n        \"ID\": \"132\",\n        \"Name\": \"Critical/Elemental Weakness Vulnerability\",\n        \"Type\": \"\"\n    },\n    \"901\": {\n        \"ID\": \"901\",\n        \"Name\": \"Raid Heal (on Map)\",\n        \"Type\": \"\"\n    },\n    \"902\": {\n        \"ID\": \"902\",\n        \"Name\": \"Raid Parameter Boost\",\n        \"Type\": \"\"\n    },\n    \"903\": {\n        \"ID\": \"903\",\n        \"Name\": \"Raid Boss Reveal\",\n        \"Type\": \"\"\n    },\n    \"905\": {\n        \"ID\": \"905\",\n        \"Name\": \"Raid Teleport\",\n        \"Type\": \"\"\n    },\n    \"906\": {\n        \"ID\": \"906\",\n        \"Name\": \"Raid Flee\",\n        \"Type\": \"\"\n    },\n    \"907\": {\n        \"ID\": \"907\",\n        \"Name\": \"Raid Damage Reduction\",\n        \"Type\": \"\"\n    },\n    \"908\": {\n        \"ID\": \"908\",\n        \"Name\": \"Raid Item Drop Rate Boost\",\n        \"Type\": \"\"\n    },\n    \"10000\": {\n        \"ID\": \"10000\",\n        \"Name\": \"Taunt\",\n        \"Type\": \"\"\n    },\n    \"10001\": {\n        \"ID\": \"10001\",\n        \"Name\": \"Stealth\",\n        \"Type\": \"\"\n    },\n    \"10002\": {\n        \"ID\": \"10002\",\n        \"Name\": \"Shield (old)\",\n        \"Type\": \"\"\n    },\n    \"10003\": {\n        \"ID\": \"10003\",\n        \"Name\": \"Nullify Sphere Effects (Sphere Lock)\",\n        \"Type\": \"\"\n    },\n    \"10004\": {\n        \"ID\": \"10004\",\n        \"Name\": \"Damage Immunity\",\n        \"Type\": \"\"\n    },\n    \"10005\": {\n        \"ID\": \"10005\",\n        \"Name\": \"Turn Skip (short duration)\",\n        \"Type\": \"\"\n    },\n    \"10006\": {\n        \"ID\": \"10006\",\n        \"Name\": \"Turn Skip (long duration)\",\n        \"Type\": \"\"\n    },\n    \"10007\": {\n        \"ID\": \"10007\",\n        \"Name\": \"Evasion\",\n        \"Type\": \"\"\n    },\n    \"10009\": {\n        \"ID\": \"10009\",\n        \"Name\": \"\",\n        \"Type\": \"\"\n    },\n    \"10012\": {\n        \"ID\": \"10012\",\n        \"Name\": \"OD Drain\",\n        \"Type\": \"\"\n    },\n    \"10015\": {\n        \"ID\": \"10015\",\n        \"Name\": \"Elemental Spark Boost\",\n        \"Type\": \"\"\n    },\n    \"10016\": {\n        \"ID\": \"10016\",\n        \"Name\": \"Element Critical Damage Boost\",\n        \"Type\": \"\"\n    },\n    \"10017\": {\n        \"ID\": \"10017\",\n        \"Name\": \"Elemental Shield\",\n        \"Type\": \"\"\n    },\n    \"10018\": {\n        \"ID\": \"10018\",\n        \"Name\": \"Max HP Reduction\",\n        \"Type\": \"\"\n    },\n    \"10019\": {\n        \"ID\": \"10019\",\n        \"Name\": \"Effect Purge\",\n        \"Type\": \"\"\n    },\n    \"10020\": {\n        \"ID\": \"10020\",\n        \"Name\": \"Piercing Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"10021\": {\n        \"ID\": \"10021\",\n        \"Name\": \"Active Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10022\": {\n        \"ID\": \"10022\",\n        \"Name\": \"Passive Healing Reduction\",\n        \"Type\": \"\"\n    },\n    \"10023\": {\n        \"ID\": \"10023\",\n        \"Name\": \"HC Efficacy Reduction\",\n        \"Type\": \"\"\n    },\n    \"10025\": {\n        \"ID\": \"10025\",\n        \"Name\": \"KO Resistance Negation\",\n        \"Type\": \"\"\n    },\n    \"10026\": {\n        \"ID\": \"10026\",\n        \"Name\": \"Doom\",\n        \"Type\": \"\"\n    },\n    \"11000\": {\n        \"ID\": \"11000\",\n        \"Name\": \"Negative HP-Scaled Damage\",\n        \"Type\": \"Attack\"\n    },\n    \"11001\": {\n        \"ID\": \"11001\",\n        \"Name\": \"Max HP% DoT of Weaker Element Enemies\",\n        \"Type\": \"\"\n    },\n    \"11002\": {\n        \"ID\": \"11002\",\n        \"Name\": \"HP Limit Break, Convert to HP\",\n        \"Type\": \"\"\n    },\n    \"11003\": {\n        \"ID\": \"11003\",\n        \"Name\": \"Effect Negation\",\n        \"Type\": \"\"\n    },\n    \"70001\": {\n        \"ID\": \"70001\",\n        \"Name\": \"Mana Bubble Shield\",\n        \"Type\": \"\"\n    },\n    \"70002\": {\n        \"ID\": \"70002\",\n        \"Name\": \"Recast\",\n        \"Type\": \"\"\n    },\n    \"2-5\": {\n        \"ID\": \"2-5\",\n        \"Name\": \"Burst Heal and DEF/REC Boost\",\n        \"Type\": \"\"\n    }\n});\n","import { PROC_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given proc ID.\n * @param id Proc ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Corresponding proc metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForProc(id, metadata = PROC_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\nimport { ProcBuffType } from './effect-metadata';\n/**\n * @description Determine if a given proc ID's type is an attack.\n * @param id Proc ID to check.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Whether the given ID corresponds to a proc ID whose type is attack.\n */\nexport default function isAttackingProcId(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return !!metadataEntry && metadataEntry.Type === ProcBuffType.Attack;\n}\n","export var Ailment;\n(function (Ailment) {\n    Ailment[\"Poison\"] = \"poison\";\n    Ailment[\"Weak\"] = \"weak\";\n    Ailment[\"Sick\"] = \"sick\";\n    Ailment[\"Injury\"] = \"injury\";\n    Ailment[\"Curse\"] = \"curse\";\n    Ailment[\"Paralysis\"] = \"paralysis\";\n    Ailment[\"AttackReduction\"] = \"atk down\";\n    Ailment[\"DefenseReduction\"] = \"def down\";\n    Ailment[\"RecoveryReduction\"] = \"rec down\";\n    Ailment[\"Unknown\"] = \"unknown\";\n})(Ailment || (Ailment = {}));\nexport var ArenaCondition;\n(function (ArenaCondition) {\n    ArenaCondition[\"hp_50pr_under\"] = \"hp_50pr_under\";\n    ArenaCondition[\"hp_50pr_over\"] = \"hp_50pr_over\";\n    ArenaCondition[\"hp_75pr_under\"] = \"hp_75pr_under\";\n    ArenaCondition[\"hp_25pr_under\"] = \"hp_25pr_under\";\n    ArenaCondition[\"hp_min\"] = \"hp_min\";\n    ArenaCondition[\"hp_max\"] = \"hp_max\";\n    ArenaCondition[\"atk_max\"] = \"atk_max\";\n    ArenaCondition[\"random\"] = \"random\";\n})(ArenaCondition || (ArenaCondition = {}));\nexport var MoveType;\n(function (MoveType) {\n    MoveType[\"Moving\"] = \"1\";\n    MoveType[\"Teleporting\"] = \"2\";\n    MoveType[\"NonMoving\"] = \"3\";\n})(MoveType || (MoveType = {}));\nexport var TargetArea;\n(function (TargetArea) {\n    TargetArea[\"Aoe\"] = \"aoe\";\n    TargetArea[\"Single\"] = \"single\";\n    TargetArea[\"Random\"] = \"random\";\n})(TargetArea || (TargetArea = {}));\nexport var TargetAreaShorthand;\n(function (TargetAreaShorthand) {\n    TargetAreaShorthand[\"Aoe\"] = \"AOE\";\n    TargetAreaShorthand[\"Single\"] = \"ST\";\n    TargetAreaShorthand[\"Random\"] = \"RT\";\n})(TargetAreaShorthand || (TargetAreaShorthand = {}));\nexport var TargetType;\n(function (TargetType) {\n    TargetType[\"Self\"] = \"self\";\n    TargetType[\"Party\"] = \"party\";\n    TargetType[\"Enemy\"] = \"enemy\";\n})(TargetType || (TargetType = {}));\nexport var SpPassiveType;\n(function (SpPassiveType) {\n    SpPassiveType[\"AddPassive\"] = \"passive\";\n    SpPassiveType[\"EnhanceBb\"] = \"add to bb\";\n    SpPassiveType[\"EnhanceSbb\"] = \"add to sbb\";\n    SpPassiveType[\"EnhanceUbb\"] = \"add to ubb\";\n    SpPassiveType[\"EnhancePassive\"] = \"add to passive\";\n})(SpPassiveType || (SpPassiveType = {}));\nexport var SphereTypeName;\n(function (SphereTypeName) {\n    SphereTypeName[\"None\"] = \"None\";\n    SphereTypeName[\"Status Enhancing\"] = \"Status Enhancing\";\n    SphereTypeName[\"Critical\"] = \"Critical\";\n    SphereTypeName[\"Drop\"] = \"Drop\";\n    SphereTypeName[\"Ailment Inducing\"] = \"Ailment Inducing\";\n    SphereTypeName[\"Element Fusion\"] = \"Element Fusion\";\n    SphereTypeName[\"BB Gauge\"] = \"BB Gauge\";\n    SphereTypeName[\"HP Recovery\"] = \"HP Recovery\";\n    SphereTypeName[\"Target Setting\"] = \"Target Setting\";\n    SphereTypeName[\"Damage Deflecting\"] = \"Damage Deflecting\";\n    SphereTypeName[\"Damage Reducing\"] = \"Damage Reducing\";\n    SphereTypeName[\"Spark\"] = \"Spark\";\n    SphereTypeName[\"Defense Piercing\"] = \"Defense Piercing\";\n    SphereTypeName[\"Attack Boosting\"] = \"Attack Boosting\";\n    SphereTypeName[\"Special\"] = \"Special\";\n})(SphereTypeName || (SphereTypeName = {}));\nexport var SphereTypeId;\n(function (SphereTypeId) {\n    SphereTypeId[SphereTypeId[\"None\"] = 0] = \"None\";\n    SphereTypeId[SphereTypeId[\"Status Enhancing\"] = 1] = \"Status Enhancing\";\n    SphereTypeId[SphereTypeId[\"Critical\"] = 2] = \"Critical\";\n    SphereTypeId[SphereTypeId[\"Drop\"] = 3] = \"Drop\";\n    SphereTypeId[SphereTypeId[\"Ailment Inducing\"] = 4] = \"Ailment Inducing\";\n    SphereTypeId[SphereTypeId[\"Element Fusion\"] = 5] = \"Element Fusion\";\n    SphereTypeId[SphereTypeId[\"BB Gauge\"] = 6] = \"BB Gauge\";\n    SphereTypeId[SphereTypeId[\"HP Recovery\"] = 7] = \"HP Recovery\";\n    SphereTypeId[SphereTypeId[\"Target Setting\"] = 8] = \"Target Setting\";\n    SphereTypeId[SphereTypeId[\"Damage Deflecting\"] = 9] = \"Damage Deflecting\";\n    SphereTypeId[SphereTypeId[\"Damage Reducing\"] = 10] = \"Damage Reducing\";\n    SphereTypeId[SphereTypeId[\"Spark\"] = 11] = \"Spark\";\n    SphereTypeId[SphereTypeId[\"Defense Piercing\"] = 12] = \"Defense Piercing\";\n    SphereTypeId[SphereTypeId[\"Attack Boosting\"] = 13] = \"Attack Boosting\";\n    SphereTypeId[SphereTypeId[\"Special\"] = 14] = \"Special\";\n})(SphereTypeId || (SphereTypeId = {}));\nexport var SpCategoryName;\n(function (SpCategoryName) {\n    SpCategoryName[\"Parameter Boost\"] = \"Parameter Boost\";\n    SpCategoryName[\"Spark\"] = \"Spark\";\n    SpCategoryName[\"Critical Hits\"] = \"Critical Hits\";\n    SpCategoryName[\"Attack Boost\"] = \"Attack Boost\";\n    SpCategoryName[\"BB Gauge\"] = \"BB Gauge\";\n    SpCategoryName[\"HP Recovery\"] = \"HP Recovery\";\n    SpCategoryName[\"Drops\"] = \"Drops\";\n    SpCategoryName[\"Ailment Resistance\"] = \"Ailment Resistance\";\n    SpCategoryName[\"Ailment Infliction\"] = \"Ailment Infliction\";\n    SpCategoryName[\"Damage Reduction\"] = \"Damage Reduction\";\n    SpCategoryName[\"Special\"] = \"Special\";\n    SpCategoryName[\"Unknown\"] = \"Unknown\";\n})(SpCategoryName || (SpCategoryName = {}));\nexport var SpCategoryId;\n(function (SpCategoryId) {\n    SpCategoryId[\"Parameter Boost\"] = \"1\";\n    SpCategoryId[\"Spark\"] = \"2\";\n    SpCategoryId[\"Critical Hits\"] = \"3\";\n    SpCategoryId[\"Attack Boost\"] = \"4\";\n    SpCategoryId[\"BB Gauge\"] = \"5\";\n    SpCategoryId[\"HP Recovery\"] = \"6\";\n    SpCategoryId[\"Drops\"] = \"7\";\n    SpCategoryId[\"Ailment Resistance\"] = \"8\";\n    SpCategoryId[\"Ailment Infliction\"] = \"9\";\n    SpCategoryId[\"Damage Reduction\"] = \"10\";\n    SpCategoryId[\"Special\"] = \"11\";\n})(SpCategoryId || (SpCategoryId = {}));\nexport var UnitAnimationKey;\n(function (UnitAnimationKey) {\n    UnitAnimationKey[\"Attack\"] = \"attack\";\n    UnitAnimationKey[\"Idle\"] = \"idle\";\n    UnitAnimationKey[\"Move\"] = \"move\";\n})(UnitAnimationKey || (UnitAnimationKey = {}));\nexport var UnitElement;\n(function (UnitElement) {\n    UnitElement[\"Fire\"] = \"fire\";\n    UnitElement[\"Water\"] = \"water\";\n    UnitElement[\"Earth\"] = \"earth\";\n    UnitElement[\"Thunder\"] = \"thunder\";\n    UnitElement[\"Light\"] = \"light\";\n    UnitElement[\"Dark\"] = \"dark\";\n})(UnitElement || (UnitElement = {}));\nexport var UnitGender;\n(function (UnitGender) {\n    UnitGender[\"Male\"] = \"male\";\n    UnitGender[\"Female\"] = \"female\";\n    UnitGender[\"Other\"] = \"other\";\n})(UnitGender || (UnitGender = {}));\nexport var UnitGettingType;\n(function (UnitGettingType) {\n    UnitGettingType[\"Ineligible\"] = \"not eligible for achievement\";\n    UnitGettingType[\"Farmable\"] = \"farmable\";\n    UnitGettingType[\"RareSummon\"] = \"rare summon\";\n    UnitGettingType[\"ExtraSkillElgif\"] = \"extra skill elgif\";\n})(UnitGettingType || (UnitGettingType = {}));\nexport var UnitKind;\n(function (UnitKind) {\n    UnitKind[\"Normal\"] = \"normal\";\n    UnitKind[\"Evolution\"] = \"evo\";\n    UnitKind[\"Enhancing\"] = \"enhancing\";\n    UnitKind[\"Sale\"] = \"sale\";\n})(UnitKind || (UnitKind = {}));\nexport var UnitType;\n(function (UnitType) {\n    UnitType[\"Lord\"] = \"lord\";\n    UnitType[\"Anima\"] = \"anima\";\n    UnitType[\"Breaker\"] = \"breaker\";\n    UnitType[\"Guardian\"] = \"guardian\";\n    UnitType[\"Oracle\"] = \"oracle\";\n    UnitType[\"Rex\"] = \"rex\";\n})(UnitType || (UnitType = {}));\nexport var ItemType;\n(function (ItemType) {\n    ItemType[\"Consumable\"] = \"consumable\";\n    ItemType[\"Material\"] = \"material\";\n    ItemType[\"Sphere\"] = \"sphere\";\n    ItemType[\"EvolutionMaterial\"] = \"evomat\";\n    ItemType[\"SummonerConsumable\"] = \"summoner_consumable\";\n    ItemType[\"LeaderSkillSphere\"] = \"ls_sphere\";\n})(ItemType || (ItemType = {}));\nexport var MimicUnitIds;\n(function (MimicUnitIds) {\n    MimicUnitIds[\"Mimic\"] = \"60142\";\n    MimicUnitIds[\"BatMimic\"] = \"60143\";\n    MimicUnitIds[\"DragonMimic\"] = \"60144\";\n    MimicUnitIds[\"MetalMimic\"] = \"60224\";\n})(MimicUnitIds || (MimicUnitIds = {}));\n/**\n * @description Known values for the monster groups used in {@link IMimicInfo}.\n */\nexport const MimicMonsterGroupMapping = {\n    '1000': MimicUnitIds.Mimic,\n    '1100': MimicUnitIds.BatMimic,\n    '1101': MimicUnitIds.BatMimic,\n    '1200': MimicUnitIds.DragonMimic,\n    '1300': MimicUnitIds.MetalMimic,\n};\n","import getLevelEntryForBurst from './getLevelEntryForBurst';\n/**\n * @description Get the effects at the level entry of a burst at a given level (or the last level if no level is given).\n * @param burst Burst to get effects from.\n * @param level Optional 1-indexed level to get entries from; if not specified, the last level of the burst is used.\n * @returns Effects at the level entry of a burst at a given level (or last level if no level is given) if it exists, an empty array otherwise.\n */\nexport default function getEffectsForBurst(burst, level) {\n    const levelEntry = getLevelEntryForBurst(burst, level);\n    return (levelEntry && Array.isArray(levelEntry.effects)) ? levelEntry.effects : [];\n}\n","import getEffectId from '../buffs/getEffectId';\nimport { KNOWN_PROC_ID } from '../buffs/constants';\nimport isAttackingProcId from '../buffs/isAttackingProcId';\n/**\n * @description Get the extra attack damage frames entry based on the damage frames of a burst. Also apply the given effect delay to the resulting damage frames entry.\n * @param damageFrames Damage frames that each have their own proc ID.\n * @param effectDelay Optional effect delay to apply to the resulting damage frames entry.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Damage frames entry whose frames are based on the input damage frames.\n */\nexport default function getExtraAttackDamageFramesEntry(damageFrames, effectDelay = '0.0/0', metadata) {\n    // relevant frames are all effects for healing or attacking\n    const inputFrames = Array.isArray(damageFrames) ? damageFrames : [];\n    const relevantFrames = inputFrames.filter(frame => {\n        const procId = getEffectId(frame);\n        return procId === KNOWN_PROC_ID.BurstHeal || isAttackingProcId(procId, metadata);\n    });\n    const unifiedFrames = relevantFrames.reduce((acc, frameEntry, index) => {\n        const keepFirstFrame = index === 0;\n        const numFrames = frameEntry['frame times'].length;\n        const damageDistribution = frameEntry['hit dmg% distribution'];\n        const frameTimes = frameEntry['frame times'];\n        for (let frameIndex = keepFirstFrame ? 0 : 1; frameIndex < numFrames; ++frameIndex) {\n            acc.push({\n                damage: damageDistribution[frameIndex],\n                time: frameTimes[frameIndex],\n            });\n        }\n        return acc;\n    }, []);\n    const resultDamageFramesEntry = {\n        'effect delay time(ms)/frame': effectDelay,\n        'frame times': [],\n        'hit dmg% distribution': [],\n        'hit dmg% distribution (total)': 0,\n        hits: 0,\n    };\n    unifiedFrames.sort((a, b) => a.time - b.time)\n        .forEach(({ time, damage }) => {\n        resultDamageFramesEntry['frame times'].push(time);\n        resultDamageFramesEntry['hit dmg% distribution'].push(damage);\n        resultDamageFramesEntry['hit dmg% distribution (total)'] += damage;\n    });\n    resultDamageFramesEntry.hits = resultDamageFramesEntry['frame times'].length;\n    return resultDamageFramesEntry;\n}\n","import { PASSIVE_METADATA } from './effect-metadata';\n/**\n * @description Get the associated metadata entry for a given passive ID.\n * @param id Passive ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Corresponding passive metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForPassive(id, metadata = PASSIVE_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import getMetadataForProc from './getMetadataForProc';\n/**\n * @description Get the associated name for a given proc ID.\n * @param id Proc ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal proc metadata.\n * @returns Name of the proc ID if it exists, empty string otherwise.\n */\nexport default function getNameForProc(id, metadata) {\n    const metadataEntry = getMetadataForProc(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","import getMetadataForPassive from './getMetadataForPassive';\n/**\n * @description Get the associated name for a given passive ID.\n * @param id Passive ID to get the name of.\n * @param metadata Optional source to use as metadata; defaults to internal passive metadata.\n * @returns Name of the passive ID if it exists, empty string otherwise.\n */\nexport default function getNameForPassive(id, metadata) {\n    const metadataEntry = getMetadataForPassive(id, metadata);\n    return (!!metadataEntry && metadataEntry.Name) || '';\n}\n","/**\n * @description Determine if a given effect object is a proc effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a proc effect based on its properties.\n */\nexport default function isProcEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'proc id') || Object.hasOwnProperty.call(effect, 'unknown proc id'));\n}\n","/**\n * @description Determine if a given effect object is a passive effect based on existing properties.\n * Do note that it does not check the validity of each property, only the existence.\n * @param effect Object to check.\n * @returns Whether the given effect object is considered a passive effect based on its properties.\n */\nexport default function isPassiveEffect(effect) {\n    return !!effect &&\n        typeof effect === 'object' &&\n        (Object.hasOwnProperty.call(effect, 'passive id') || Object.hasOwnProperty.call(effect, 'unknown passive id'));\n}\n","/**\n * @description Provides info at a glance regarding a buff's source and how it stacks.\n */\nexport var BuffStackType;\n(function (BuffStackType) {\n    /**\n     * @description The buff is activated via some skill and lasts for a number of turns.\n     * Sometimes referred to as procs. Buffs of the same type do not stack unless if they're\n     * from different levels. Two possible levels of sources are:\n     * 1. Brave Burst or Super Brave Burst (also includes enemy skills)\n     * 2. Ultimate Brave Burst or Dual Brave Burst\n     */\n    BuffStackType[\"Active\"] = \"active\";\n    /**\n     * @description The buff is always active provided that the source is not nullified.\n     * Most passive buffs can stack with themselves.\n     */\n    BuffStackType[\"Passive\"] = \"passive\";\n    /**\n     * @description The buff is applied for a number of turns once a certain condition is met.\n     * Buffs of the same type are not able to stack.\n     */\n    BuffStackType[\"ConditionalTimed\"] = \"conditionalTimed\";\n    /**\n     * @description Only one instance of the buff can be active at a time and can last indefinitely.\n     * A couple examples of this are Barrier and Max HP Boost.\n     */\n    BuffStackType[\"Singleton\"] = \"singleton\";\n    /**\n     * @description The buff's effects immediately apply to the target(s). This differs from singleton\n     * in that these values aren't permanent and some effects can \"stack\" (e.g. using two burst heals results\n     * in the HP bar filling by the sum of those burst heals).\n     */\n    BuffStackType[\"Burst\"] = \"burst\";\n    /**\n     * @description A specific subset of `Burst` type buffs that deal damage to the target.\n     */\n    BuffStackType[\"Attack\"] = \"attack\";\n    /**\n     * @description Only for buffs that cannot be processed by the library yet.\n     */\n    BuffStackType[\"Unknown\"] = \"unknown\";\n})(BuffStackType || (BuffStackType = {}));\nexport var BuffSource;\n(function (BuffSource) {\n    BuffSource[\"BraveBurst\"] = \"bb\";\n    BuffSource[\"SuperBraveBurst\"] = \"sbb\";\n    BuffSource[\"UltimateBraveBurst\"] = \"ubb\";\n    BuffSource[\"DualBraveBurst\"] = \"dbb\";\n    BuffSource[\"BondedBraveBurst\"] = \"bbb\";\n    BuffSource[\"BondedSuperBraveBurst\"] = \"dsbb\";\n    BuffSource[\"SpEnhancement\"] = \"sp\";\n    BuffSource[\"Item\"] = \"item\";\n    BuffSource[\"LeaderSkill\"] = \"ls\";\n    BuffSource[\"ExtraSkill\"] = \"es\";\n    /**\n     * @description Buffs that result of having a number of OE+ units in the squad.\n     */\n    BuffSource[\"OmniParadigm\"] = \"omniParadigm\";\n    /**\n     * @description Buffs based on a units type. See {@link UnitType}.\n     */\n    BuffSource[\"UnitTypeBonus\"] = \"unitTypeBonus\";\n    /**\n     * @description Examples include the passive bonuses available in Frontier Gates and Frontier Rifts\n     * as well as ambient turn reductions present in some late-game quests.\n     */\n    BuffSource[\"Quest\"] = \"quest\";\n})(BuffSource || (BuffSource = {}));\n/**\n * @description Extra element values that can be used in addition to {@link UnitElement}.\n */\nexport var BuffConditionElement;\n(function (BuffConditionElement) {\n    BuffConditionElement[\"Unknown\"] = \"unknown\";\n    BuffConditionElement[\"OmniParadigm\"] = \"omniParadigm\";\n    BuffConditionElement[\"All\"] = \"all\";\n})(BuffConditionElement || (BuffConditionElement = {}));\n/**\n * @description Stats on a unit that a buff can affect.\n */\nexport var UnitStat;\n(function (UnitStat) {\n    UnitStat[\"hp\"] = \"hp\";\n    UnitStat[\"atk\"] = \"atk\";\n    UnitStat[\"def\"] = \"def\";\n    UnitStat[\"rec\"] = \"rec\";\n    UnitStat[\"crit\"] = \"crit\";\n    UnitStat[\"hpRecovery\"] = \"hpRecovery\";\n    UnitStat[\"bbGauge\"] = \"bbGauge\";\n    UnitStat[\"odGauge\"] = \"odGauge\";\n    UnitStat[\"bcDropRate\"] = \"bcDropRate\";\n    UnitStat[\"hcDropRate\"] = \"hcDropRate\";\n    UnitStat[\"itemDropRate\"] = \"itemDropRate\";\n    UnitStat[\"zelDropRate\"] = \"zelDropRate\";\n    UnitStat[\"karmaDropRate\"] = \"karmaDropRate\";\n    UnitStat[\"bcEfficacy\"] = \"bcEfficacy\";\n    UnitStat[\"hcEfficacy\"] = \"hcEfficacy\";\n    UnitStat[\"bcCostReduction\"] = \"bcCostReduction\";\n    UnitStat[\"bbGaugeConsumptionReduction\"] = \"bbGaugeConsumptionReduction\";\n    UnitStat[\"ailmentAttackBoost\"] = \"ailmentAttackBoost\";\n    UnitStat[\"poisonResist\"] = \"poisonResist\";\n    UnitStat[\"weakResist\"] = \"weakResist\";\n    UnitStat[\"sickResist\"] = \"sickResist\";\n    UnitStat[\"injuryResist\"] = \"injuryResist\";\n    UnitStat[\"curseResist\"] = \"curseResist\";\n    UnitStat[\"paralysisResist\"] = \"paralysisResist\";\n    UnitStat[\"poisonInflict\"] = \"poisonInflict\";\n    UnitStat[\"weakInflict\"] = \"weakInflict\";\n    UnitStat[\"sickInflict\"] = \"sickInflict\";\n    UnitStat[\"injuryInflict\"] = \"injuryInflict\";\n    UnitStat[\"curseInflict\"] = \"curseInflict\";\n    UnitStat[\"paralysisInflict\"] = \"paralysisInflict\";\n    UnitStat[\"poisonCounter\"] = \"poisonCounter\";\n    UnitStat[\"weakCounter\"] = \"weakCounter\";\n    UnitStat[\"sickCounter\"] = \"sickCounter\";\n    UnitStat[\"injuryCounter\"] = \"injuryCounter\";\n    UnitStat[\"curseCounter\"] = \"curseCounter\";\n    UnitStat[\"paralysisCounter\"] = \"paralysisCounter\";\n    UnitStat[\"atkDownResist\"] = \"atkDownResist\";\n    UnitStat[\"defDownResist\"] = \"defDownResist\";\n    UnitStat[\"recDownResist\"] = \"recDownResist\";\n    UnitStat[\"atkDownInflict\"] = \"atkDownInflict\";\n    UnitStat[\"defDownInflict\"] = \"defDownInflict\";\n    UnitStat[\"recDownInflict\"] = \"recDownInflict\";\n    UnitStat[\"atkDownCounter\"] = \"atkDownCounter\";\n    UnitStat[\"defDownCounter\"] = \"defDownCounter\";\n    UnitStat[\"recDownCounter\"] = \"recDownCounter\";\n    UnitStat[\"mitigation\"] = \"mitigation\";\n    UnitStat[\"fireMitigation\"] = \"fireMitigation\";\n    UnitStat[\"waterMitigation\"] = \"waterMitigation\";\n    UnitStat[\"earthMitigation\"] = \"earthMitigation\";\n    UnitStat[\"thunderMitigation\"] = \"thunderMitigation\";\n    UnitStat[\"lightMitigation\"] = \"lightMitigation\";\n    UnitStat[\"darkMitigation\"] = \"darkMitigation\";\n    UnitStat[\"reduceDamageToOne\"] = \"reduceDamageToOne\";\n    UnitStat[\"guardMitigation\"] = \"guardMitigation\";\n    UnitStat[\"barrier\"] = \"barrier\";\n    UnitStat[\"fireElementalDamage\"] = \"fireElementalDamage\";\n    UnitStat[\"waterElementalDamage\"] = \"waterElementalDamage\";\n    UnitStat[\"earthElementalDamage\"] = \"earthElementalDamage\";\n    UnitStat[\"thunderElementalDamage\"] = \"thunderElementalDamage\";\n    UnitStat[\"lightElementalDamage\"] = \"lightElementalDamage\";\n    UnitStat[\"darkElementalDamage\"] = \"darkElementalDamage\";\n    UnitStat[\"elementalWeaknessDamageMitigation\"] = \"elementalWeaknessDamageMitigation\";\n    UnitStat[\"turnDurationModification\"] = \"turnDurationModification\";\n    UnitStat[\"koResistance\"] = \"koResistance\";\n    UnitStat[\"revive\"] = \"revive\";\n    UnitStat[\"defenseIgnore\"] = \"defenseIgnore\";\n    UnitStat[\"criticalDamage\"] = \"criticalDamage\";\n    UnitStat[\"criticalDamageMitigation\"] = \"criticalDamageMitigation\";\n    UnitStat[\"sparkDamage\"] = \"sparkDamage\";\n    UnitStat[\"sparkDamageMitigation\"] = \"sparkDamageMitigation\";\n    UnitStat[\"bbAtk\"] = \"bbAtk\";\n    UnitStat[\"hitCountModification\"] = \"hitCountModification\";\n    UnitStat[\"damageReflect\"] = \"damageReflect\";\n    UnitStat[\"targetingModification\"] = \"targetingModification\";\n    UnitStat[\"elementModification\"] = \"elementModification\";\n    UnitStat[\"buffStabilityModification\"] = \"buffStabilityModification\";\n    UnitStat[\"extraAction\"] = \"extraAction\";\n    UnitStat[\"damageOverTime\"] = \"damageOverTime\";\n    UnitStat[\"effectOccurrenceShift\"] = \"effectOccurrenceShift\";\n    UnitStat[\"expModification\"] = \"expModification\";\n})(UnitStat || (UnitStat = {}));\nexport var IconId;\n(function (IconId) {\n    IconId[\"UNKNOWN\"] = \"UNKNOWN\";\n    IconId[\"TURN_DURATION_UP\"] = \"TURN_DURATION_UP\";\n    IconId[\"TURN_DURATION_DOWN\"] = \"TURN_DURATION_DOWN\";\n    IconId[\"CONDITIONALBUFF_HPTHRESH\"] = \"CONDITIONALBUFF_HPTHRESH\";\n    IconId[\"CONDITIONALBUFF_DAMAGETAKENTHRESH\"] = \"CONDITIONALBUFF_DAMAGETAKENTHRESH\";\n    IconId[\"CONDITIONALBUFF_DAMAGEDEALTTHRESH\"] = \"CONDITIONALBUFF_DAMAGEDEALTTHRESH\";\n    IconId[\"CONDITIONALBUFF_BCRECEIVEDTHRESH\"] = \"CONDITIONALBUFF_BCRECEIVEDTHRESH\";\n    IconId[\"BUFF_ADDTO_BB\"] = \"BUFF_ADDTO_BB\";\n    IconId[\"BUFF_ADDTO_SBB\"] = \"BUFF_ADDTO_SBB\";\n    IconId[\"BUFF_ADDTO_UBB\"] = \"BUFF_ADDTO_UBB\";\n    IconId[\"BUFF_HPUP\"] = \"BUFF_HPUP\";\n    IconId[\"BUFF_HPDOWN\"] = \"BUFF_HPDOWN\";\n    IconId[\"BUFF_ATKUP\"] = \"BUFF_ATKUP\";\n    IconId[\"BUFF_ATKDOWN\"] = \"BUFF_ATKDOWN\";\n    IconId[\"BUFF_DEFUP\"] = \"BUFF_DEFUP\";\n    IconId[\"BUFF_DEFDOWN\"] = \"BUFF_DEFDOWN\";\n    IconId[\"BUFF_RECUP\"] = \"BUFF_RECUP\";\n    IconId[\"BUFF_RECDOWN\"] = \"BUFF_RECDOWN\";\n    IconId[\"BUFF_CRTRATEUP\"] = \"BUFF_CRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWN\"] = \"BUFF_CRTRATEDOWN\";\n    IconId[\"BUFF_HPTHRESHATKUP\"] = \"BUFF_HPTHRESHATKUP\";\n    IconId[\"BUFF_HPTHRESHATKDOWN\"] = \"BUFF_HPTHRESHATKDOWN\";\n    IconId[\"BUFF_HPTHRESHDEFUP\"] = \"BUFF_HPTHRESHDEFUP\";\n    IconId[\"BUFF_HPTHRESHDEFDOWN\"] = \"BUFF_HPTHRESHDEFDOWN\";\n    IconId[\"BUFF_HPTHRESHRECUP\"] = \"BUFF_HPTHRESHRECUP\";\n    IconId[\"BUFF_HPTHRESHRECDOWN\"] = \"BUFF_HPTHRESHRECDOWN\";\n    IconId[\"BUFF_HPTHRESHCRTRATEUP\"] = \"BUFF_HPTHRESHCRTRATEUP\";\n    IconId[\"BUFF_HPTHRESHCRTRATEDOWN\"] = \"BUFF_HPTHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHATKUP\"] = \"BUFF_BBGAUGETHRESHATKUP\";\n    IconId[\"BUFF_BBGAUGETHRESHATKDOWN\"] = \"BUFF_BBGAUGETHRESHATKDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFUP\"] = \"BUFF_BBGAUGETHRESHDEFUP\";\n    IconId[\"BUFF_BBGAUGETHRESHDEFDOWN\"] = \"BUFF_BBGAUGETHRESHDEFDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHRECUP\"] = \"BUFF_BBGAUGETHRESHRECUP\";\n    IconId[\"BUFF_BBGAUGETHRESHRECDOWN\"] = \"BUFF_BBGAUGETHRESHRECDOWN\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEUP\"] = \"BUFF_BBGAUGETHRESHCRTRATEUP\";\n    IconId[\"BUFF_BBGAUGETHRESHCRTRATEDOWN\"] = \"BUFF_BBGAUGETHRESHCRTRATEDOWN\";\n    IconId[\"BUFF_HPREC\"] = \"BUFF_HPREC\";\n    IconId[\"BUFF_BBREC\"] = \"BUFF_BBREC\";\n    IconId[\"BUFF_DAMAGEBB\"] = \"BUFF_DAMAGEBB\";\n    IconId[\"BUFF_BEENATK_HPREC\"] = \"BUFF_BEENATK_HPREC\";\n    IconId[\"BUFF_FIREHPUP\"] = \"BUFF_FIREHPUP\";\n    IconId[\"BUFF_FIREHPDOWN\"] = \"BUFF_FIREHPDOWN\";\n    IconId[\"BUFF_FIREATKUP\"] = \"BUFF_FIREATKUP\";\n    IconId[\"BUFF_FIREATKDOWN\"] = \"BUFF_FIREATKDOWN\";\n    IconId[\"BUFF_FIREDEFUP\"] = \"BUFF_FIREDEFUP\";\n    IconId[\"BUFF_FIREDEFDOWN\"] = \"BUFF_FIREDEFDOWN\";\n    IconId[\"BUFF_FIRERECUP\"] = \"BUFF_FIRERECUP\";\n    IconId[\"BUFF_FIRERECDOWN\"] = \"BUFF_FIRERECDOWN\";\n    IconId[\"BUFF_FIRECRTRATEUP\"] = \"BUFF_FIRECRTRATEUP\";\n    IconId[\"BUFF_FIRECRTRATEDOWN\"] = \"BUFF_FIRECRTRATEDOWN\";\n    IconId[\"BUFF_WATERHPUP\"] = \"BUFF_WATERHPUP\";\n    IconId[\"BUFF_WATERHPDOWN\"] = \"BUFF_WATERHPDOWN\";\n    IconId[\"BUFF_WATERATKUP\"] = \"BUFF_WATERATKUP\";\n    IconId[\"BUFF_WATERATKDOWN\"] = \"BUFF_WATERATKDOWN\";\n    IconId[\"BUFF_WATERDEFUP\"] = \"BUFF_WATERDEFUP\";\n    IconId[\"BUFF_WATERDEFDOWN\"] = \"BUFF_WATERDEFDOWN\";\n    IconId[\"BUFF_WATERRECUP\"] = \"BUFF_WATERRECUP\";\n    IconId[\"BUFF_WATERRECDOWN\"] = \"BUFF_WATERRECDOWN\";\n    IconId[\"BUFF_WATERCRTRATEUP\"] = \"BUFF_WATERCRTRATEUP\";\n    IconId[\"BUFF_WATERCRTRATEDOWN\"] = \"BUFF_WATERCRTRATEDOWN\";\n    IconId[\"BUFF_EARTHHPUP\"] = \"BUFF_EARTHHPUP\";\n    IconId[\"BUFF_EARTHHPDOWN\"] = \"BUFF_EARTHHPDOWN\";\n    IconId[\"BUFF_EARTHATKUP\"] = \"BUFF_EARTHATKUP\";\n    IconId[\"BUFF_EARTHATKDOWN\"] = \"BUFF_EARTHATKDOWN\";\n    IconId[\"BUFF_EARTHDEFUP\"] = \"BUFF_EARTHDEFUP\";\n    IconId[\"BUFF_EARTHDEFDOWN\"] = \"BUFF_EARTHDEFDOWN\";\n    IconId[\"BUFF_EARTHRECUP\"] = \"BUFF_EARTHRECUP\";\n    IconId[\"BUFF_EARTHRECDOWN\"] = \"BUFF_EARTHRECDOWN\";\n    IconId[\"BUFF_EARTHCRTRATEUP\"] = \"BUFF_EARTHCRTRATEUP\";\n    IconId[\"BUFF_EARTHCRTRATEDOWN\"] = \"BUFF_EARTHCRTRATEDOWN\";\n    IconId[\"BUFF_THUNDERHPUP\"] = \"BUFF_THUNDERHPUP\";\n    IconId[\"BUFF_THUNDERHPDOWN\"] = \"BUFF_THUNDERHPDOWN\";\n    IconId[\"BUFF_THUNDERATKUP\"] = \"BUFF_THUNDERATKUP\";\n    IconId[\"BUFF_THUNDERATKDOWN\"] = \"BUFF_THUNDERATKDOWN\";\n    IconId[\"BUFF_THUNDERDEFUP\"] = \"BUFF_THUNDERDEFUP\";\n    IconId[\"BUFF_THUNDERDEFDOWN\"] = \"BUFF_THUNDERDEFDOWN\";\n    IconId[\"BUFF_THUNDERRECUP\"] = \"BUFF_THUNDERRECUP\";\n    IconId[\"BUFF_THUNDERRECDOWN\"] = \"BUFF_THUNDERRECDOWN\";\n    IconId[\"BUFF_THUNDERCRTRATEUP\"] = \"BUFF_THUNDERCRTRATEUP\";\n    IconId[\"BUFF_THUNDERCRTRATEDOWN\"] = \"BUFF_THUNDERCRTRATEDOWN\";\n    IconId[\"BUFF_LIGHTHPUP\"] = \"BUFF_LIGHTHPUP\";\n    IconId[\"BUFF_LIGHTHPDOWN\"] = \"BUFF_LIGHTHPDOWN\";\n    IconId[\"BUFF_LIGHTATKUP\"] = \"BUFF_LIGHTATKUP\";\n    IconId[\"BUFF_LIGHTATKDOWN\"] = \"BUFF_LIGHTATKDOWN\";\n    IconId[\"BUFF_LIGHTDEFUP\"] = \"BUFF_LIGHTDEFUP\";\n    IconId[\"BUFF_LIGHTDEFDOWN\"] = \"BUFF_LIGHTDEFDOWN\";\n    IconId[\"BUFF_LIGHTRECUP\"] = \"BUFF_LIGHTRECUP\";\n    IconId[\"BUFF_LIGHTRECDOWN\"] = \"BUFF_LIGHTRECDOWN\";\n    IconId[\"BUFF_LIGHTCRTRATEUP\"] = \"BUFF_LIGHTCRTRATEUP\";\n    IconId[\"BUFF_LIGHTCRTRATEDOWN\"] = \"BUFF_LIGHTCRTRATEDOWN\";\n    IconId[\"BUFF_DARKHPUP\"] = \"BUFF_DARKHPUP\";\n    IconId[\"BUFF_DARKHPDOWN\"] = \"BUFF_DARKHPDOWN\";\n    IconId[\"BUFF_DARKATKUP\"] = \"BUFF_DARKATKUP\";\n    IconId[\"BUFF_DARKATKDOWN\"] = \"BUFF_DARKATKDOWN\";\n    IconId[\"BUFF_DARKDEFUP\"] = \"BUFF_DARKDEFUP\";\n    IconId[\"BUFF_DARKDEFDOWN\"] = \"BUFF_DARKDEFDOWN\";\n    IconId[\"BUFF_DARKRECUP\"] = \"BUFF_DARKRECUP\";\n    IconId[\"BUFF_DARKRECDOWN\"] = \"BUFF_DARKRECDOWN\";\n    IconId[\"BUFF_DARKCRTRATEUP\"] = \"BUFF_DARKCRTRATEUP\";\n    IconId[\"BUFF_DARKCRTRATEDOWN\"] = \"BUFF_DARKCRTRATEDOWN\";\n    IconId[\"BUFF_ELEMENTHPUP\"] = \"BUFF_ELEMENTHPUP\";\n    IconId[\"BUFF_ELEMENTHPDOWN\"] = \"BUFF_ELEMENTHPDOWN\";\n    IconId[\"BUFF_ELEMENTATKUP\"] = \"BUFF_ELEMENTATKUP\";\n    IconId[\"BUFF_ELEMENTATKDOWN\"] = \"BUFF_ELEMENTATKDOWN\";\n    IconId[\"BUFF_ELEMENTDEFUP\"] = \"BUFF_ELEMENTDEFUP\";\n    IconId[\"BUFF_ELEMENTDEFDOWN\"] = \"BUFF_ELEMENTDEFDOWN\";\n    IconId[\"BUFF_ELEMENTRECUP\"] = \"BUFF_ELEMENTRECUP\";\n    IconId[\"BUFF_ELEMENTRECDOWN\"] = \"BUFF_ELEMENTRECDOWN\";\n    IconId[\"BUFF_ELEMENTCRTRATEUP\"] = \"BUFF_ELEMENTCRTRATEUP\";\n    IconId[\"BUFF_ELEMENTCRTRATEDOWN\"] = \"BUFF_ELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_LORDHPUP\"] = \"BUFF_LORDHPUP\";\n    IconId[\"BUFF_LORDHPDOWN\"] = \"BUFF_LORDHPDOWN\";\n    IconId[\"BUFF_LORDATKUP\"] = \"BUFF_LORDATKUP\";\n    IconId[\"BUFF_LORDATKDOWN\"] = \"BUFF_LORDATKDOWN\";\n    IconId[\"BUFF_LORDDEFUP\"] = \"BUFF_LORDDEFUP\";\n    IconId[\"BUFF_LORDDEFDOWN\"] = \"BUFF_LORDDEFDOWN\";\n    IconId[\"BUFF_LORDRECUP\"] = \"BUFF_LORDRECUP\";\n    IconId[\"BUFF_LORDRECDOWN\"] = \"BUFF_LORDRECDOWN\";\n    IconId[\"BUFF_LORDCRTRATEUP\"] = \"BUFF_LORDCRTRATEUP\";\n    IconId[\"BUFF_LORDCRTRATEDOWN\"] = \"BUFF_LORDCRTRATEDOWN\";\n    IconId[\"BUFF_ANIMAHPUP\"] = \"BUFF_ANIMAHPUP\";\n    IconId[\"BUFF_ANIMAHPDOWN\"] = \"BUFF_ANIMAHPDOWN\";\n    IconId[\"BUFF_ANIMAATKUP\"] = \"BUFF_ANIMAATKUP\";\n    IconId[\"BUFF_ANIMAATKDOWN\"] = \"BUFF_ANIMAATKDOWN\";\n    IconId[\"BUFF_ANIMADEFUP\"] = \"BUFF_ANIMADEFUP\";\n    IconId[\"BUFF_ANIMADEFDOWN\"] = \"BUFF_ANIMADEFDOWN\";\n    IconId[\"BUFF_ANIMARECUP\"] = \"BUFF_ANIMARECUP\";\n    IconId[\"BUFF_ANIMARECDOWN\"] = \"BUFF_ANIMARECDOWN\";\n    IconId[\"BUFF_ANIMACRTRATEUP\"] = \"BUFF_ANIMACRTRATEUP\";\n    IconId[\"BUFF_ANIMACRTRATEDOWN\"] = \"BUFF_ANIMACRTRATEDOWN\";\n    IconId[\"BUFF_BREAKERHPUP\"] = \"BUFF_BREAKERHPUP\";\n    IconId[\"BUFF_BREAKERHPDOWN\"] = \"BUFF_BREAKERHPDOWN\";\n    IconId[\"BUFF_BREAKERATKUP\"] = \"BUFF_BREAKERATKUP\";\n    IconId[\"BUFF_BREAKERATKDOWN\"] = \"BUFF_BREAKERATKDOWN\";\n    IconId[\"BUFF_BREAKERDEFUP\"] = \"BUFF_BREAKERDEFUP\";\n    IconId[\"BUFF_BREAKERDEFDOWN\"] = \"BUFF_BREAKERDEFDOWN\";\n    IconId[\"BUFF_BREAKERRECUP\"] = \"BUFF_BREAKERRECUP\";\n    IconId[\"BUFF_BREAKERRECDOWN\"] = \"BUFF_BREAKERRECDOWN\";\n    IconId[\"BUFF_BREAKERCRTRATEUP\"] = \"BUFF_BREAKERCRTRATEUP\";\n    IconId[\"BUFF_BREAKERCRTRATEDOWN\"] = \"BUFF_BREAKERCRTRATEDOWN\";\n    IconId[\"BUFF_GUARDIANHPUP\"] = \"BUFF_GUARDIANHPUP\";\n    IconId[\"BUFF_GUARDIANHPDOWN\"] = \"BUFF_GUARDIANHPDOWN\";\n    IconId[\"BUFF_GUARDIANATKUP\"] = \"BUFF_GUARDIANATKUP\";\n    IconId[\"BUFF_GUARDIANATKDOWN\"] = \"BUFF_GUARDIANATKDOWN\";\n    IconId[\"BUFF_GUARDIANDEFUP\"] = \"BUFF_GUARDIANDEFUP\";\n    IconId[\"BUFF_GUARDIANDEFDOWN\"] = \"BUFF_GUARDIANDEFDOWN\";\n    IconId[\"BUFF_GUARDIANRECUP\"] = \"BUFF_GUARDIANRECUP\";\n    IconId[\"BUFF_GUARDIANRECDOWN\"] = \"BUFF_GUARDIANRECDOWN\";\n    IconId[\"BUFF_GUARDIANCRTRATEUP\"] = \"BUFF_GUARDIANCRTRATEUP\";\n    IconId[\"BUFF_GUARDIANCRTRATEDOWN\"] = \"BUFF_GUARDIANCRTRATEDOWN\";\n    IconId[\"BUFF_ORACLEHPUP\"] = \"BUFF_ORACLEHPUP\";\n    IconId[\"BUFF_ORACLEHPDOWN\"] = \"BUFF_ORACLEHPDOWN\";\n    IconId[\"BUFF_ORACLEATKUP\"] = \"BUFF_ORACLEATKUP\";\n    IconId[\"BUFF_ORACLEATKDOWN\"] = \"BUFF_ORACLEATKDOWN\";\n    IconId[\"BUFF_ORACLEDEFUP\"] = \"BUFF_ORACLEDEFUP\";\n    IconId[\"BUFF_ORACLEDEFDOWN\"] = \"BUFF_ORACLEDEFDOWN\";\n    IconId[\"BUFF_ORACLERECUP\"] = \"BUFF_ORACLERECUP\";\n    IconId[\"BUFF_ORACLERECDOWN\"] = \"BUFF_ORACLERECDOWN\";\n    IconId[\"BUFF_ORACLECRTRATEUP\"] = \"BUFF_ORACLECRTRATEUP\";\n    IconId[\"BUFF_ORACLECRTRATEDOWN\"] = \"BUFF_ORACLECRTRATEDOWN\";\n    IconId[\"BUFF_REXHPUP\"] = \"BUFF_REXHPUP\";\n    IconId[\"BUFF_REXHPDOWN\"] = \"BUFF_REXHPDOWN\";\n    IconId[\"BUFF_REXATKUP\"] = \"BUFF_REXATKUP\";\n    IconId[\"BUFF_REXATKDOWN\"] = \"BUFF_REXATKDOWN\";\n    IconId[\"BUFF_REXDEFUP\"] = \"BUFF_REXDEFUP\";\n    IconId[\"BUFF_REXDEFDOWN\"] = \"BUFF_REXDEFDOWN\";\n    IconId[\"BUFF_REXRECUP\"] = \"BUFF_REXRECUP\";\n    IconId[\"BUFF_REXRECDOWN\"] = \"BUFF_REXRECDOWN\";\n    IconId[\"BUFF_REXCRTRATEUP\"] = \"BUFF_REXCRTRATEUP\";\n    IconId[\"BUFF_REXCRTRATEDOWN\"] = \"BUFF_REXCRTRATEDOWN\";\n    IconId[\"BUFF_UNITTYPEHPUP\"] = \"BUFF_UNITTYPEHPUP\";\n    IconId[\"BUFF_UNITTYPEHPDOWN\"] = \"BUFF_UNITTYPEHPDOWN\";\n    IconId[\"BUFF_UNITTYPEATKUP\"] = \"BUFF_UNITTYPEATKUP\";\n    IconId[\"BUFF_UNITTYPEATKDOWN\"] = \"BUFF_UNITTYPEATKDOWN\";\n    IconId[\"BUFF_UNITTYPEDEFUP\"] = \"BUFF_UNITTYPEDEFUP\";\n    IconId[\"BUFF_UNITTYPEDEFDOWN\"] = \"BUFF_UNITTYPEDEFDOWN\";\n    IconId[\"BUFF_UNITTYPERECUP\"] = \"BUFF_UNITTYPERECUP\";\n    IconId[\"BUFF_UNITTYPERECDOWN\"] = \"BUFF_UNITTYPERECDOWN\";\n    IconId[\"BUFF_UNITTYPECRTRATEUP\"] = \"BUFF_UNITTYPECRTRATEUP\";\n    IconId[\"BUFF_UNITTYPECRTRATEDOWN\"] = \"BUFF_UNITTYPECRTRATEDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTHPUP\"] = \"BUFF_UNIQUEELEMENTHPUP\";\n    IconId[\"BUFF_UNIQUEELEMENTHPDOWN\"] = \"BUFF_UNIQUEELEMENTHPDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTATKUP\"] = \"BUFF_UNIQUEELEMENTATKUP\";\n    IconId[\"BUFF_UNIQUEELEMENTATKDOWN\"] = \"BUFF_UNIQUEELEMENTATKDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFUP\"] = \"BUFF_UNIQUEELEMENTDEFUP\";\n    IconId[\"BUFF_UNIQUEELEMENTDEFDOWN\"] = \"BUFF_UNIQUEELEMENTDEFDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTRECUP\"] = \"BUFF_UNIQUEELEMENTRECUP\";\n    IconId[\"BUFF_UNIQUEELEMENTRECDOWN\"] = \"BUFF_UNIQUEELEMENTRECDOWN\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEUP\"] = \"BUFF_UNIQUEELEMENTCRTRATEUP\";\n    IconId[\"BUFF_UNIQUEELEMENTCRTRATEDOWN\"] = \"BUFF_UNIQUEELEMENTCRTRATEDOWN\";\n    IconId[\"BUFF_MALEHPUP\"] = \"BUFF_MALEHPUP\";\n    IconId[\"BUFF_MALEHPDOWN\"] = \"BUFF_MALEHPDOWN\";\n    IconId[\"BUFF_MALEATKUP\"] = \"BUFF_MALEATKUP\";\n    IconId[\"BUFF_MALEATKDOWN\"] = \"BUFF_MALEATKDOWN\";\n    IconId[\"BUFF_MALEDEFUP\"] = \"BUFF_MALEDEFUP\";\n    IconId[\"BUFF_MALEDEFDOWN\"] = \"BUFF_MALEDEFDOWN\";\n    IconId[\"BUFF_MALERECUP\"] = \"BUFF_MALERECUP\";\n    IconId[\"BUFF_MALERECDOWN\"] = \"BUFF_MALERECDOWN\";\n    IconId[\"BUFF_MALECRTRATEUP\"] = \"BUFF_MALECRTRATEUP\";\n    IconId[\"BUFF_MALECRTRATEDOWN\"] = \"BUFF_MALECRTRATEDOWN\";\n    IconId[\"BUFF_FEMALEHPUP\"] = \"BUFF_FEMALEHPUP\";\n    IconId[\"BUFF_FEMALEHPDOWN\"] = \"BUFF_FEMALEHPDOWN\";\n    IconId[\"BUFF_FEMALEATKUP\"] = \"BUFF_FEMALEATKUP\";\n    IconId[\"BUFF_FEMALEATKDOWN\"] = \"BUFF_FEMALEATKDOWN\";\n    IconId[\"BUFF_FEMALEDEFUP\"] = \"BUFF_FEMALEDEFUP\";\n    IconId[\"BUFF_FEMALEDEFDOWN\"] = \"BUFF_FEMALEDEFDOWN\";\n    IconId[\"BUFF_FEMALERECUP\"] = \"BUFF_FEMALERECUP\";\n    IconId[\"BUFF_FEMALERECDOWN\"] = \"BUFF_FEMALERECDOWN\";\n    IconId[\"BUFF_FEMALECRTRATEUP\"] = \"BUFF_FEMALECRTRATEUP\";\n    IconId[\"BUFF_FEMALECRTRATEDOWN\"] = \"BUFF_FEMALECRTRATEDOWN\";\n    IconId[\"BUFF_OTHERHPUP\"] = \"BUFF_OTHERHPUP\";\n    IconId[\"BUFF_OTHERHPDOWN\"] = \"BUFF_OTHERHPDOWN\";\n    IconId[\"BUFF_OTHERATKUP\"] = \"BUFF_OTHERATKUP\";\n    IconId[\"BUFF_OTHERATKDOWN\"] = \"BUFF_OTHERATKDOWN\";\n    IconId[\"BUFF_OTHERDEFUP\"] = \"BUFF_OTHERDEFUP\";\n    IconId[\"BUFF_OTHERDEFDOWN\"] = \"BUFF_OTHERDEFDOWN\";\n    IconId[\"BUFF_OTHERRECUP\"] = \"BUFF_OTHERRECUP\";\n    IconId[\"BUFF_OTHERRECDOWN\"] = \"BUFF_OTHERRECDOWN\";\n    IconId[\"BUFF_OTHERCRTRATEUP\"] = \"BUFF_OTHERCRTRATEUP\";\n    IconId[\"BUFF_OTHERCRTRATEDOWN\"] = \"BUFF_OTHERCRTRATEDOWN\";\n    IconId[\"BUFF_GENDERHPUP\"] = \"BUFF_GENDERHPUP\";\n    IconId[\"BUFF_GENDERHPDOWN\"] = \"BUFF_GENDERHPDOWN\";\n    IconId[\"BUFF_GENDERATKUP\"] = \"BUFF_GENDERATKUP\";\n    IconId[\"BUFF_GENDERATKDOWN\"] = \"BUFF_GENDERATKDOWN\";\n    IconId[\"BUFF_GENDERDEFUP\"] = \"BUFF_GENDERDEFUP\";\n    IconId[\"BUFF_GENDERDEFDOWN\"] = \"BUFF_GENDERDEFDOWN\";\n    IconId[\"BUFF_GENDERRECUP\"] = \"BUFF_GENDERRECUP\";\n    IconId[\"BUFF_GENDERRECDOWN\"] = \"BUFF_GENDERRECDOWN\";\n    IconId[\"BUFF_GENDERCRTRATEUP\"] = \"BUFF_GENDERCRTRATEUP\";\n    IconId[\"BUFF_GENDERCRTRATEDOWN\"] = \"BUFF_GENDERCRTRATEDOWN\";\n    IconId[\"BUFF_CONVERTATKUP\"] = \"BUFF_CONVERTATKUP\";\n    IconId[\"BUFF_CONVERTATKDOWN\"] = \"BUFF_CONVERTATKDOWN\";\n    IconId[\"BUFF_CONVERTDEFUP\"] = \"BUFF_CONVERTDEFUP\";\n    IconId[\"BUFF_CONVERTDEFDOWN\"] = \"BUFF_CONVERTDEFDOWN\";\n    IconId[\"BUFF_CONVERTRECUP\"] = \"BUFF_CONVERTRECUP\";\n    IconId[\"BUFF_CONVERTRECDOWN\"] = \"BUFF_CONVERTRECDOWN\";\n    IconId[\"BUFF_HPSCALEDATKUP\"] = \"BUFF_HPSCALEDATKUP\";\n    IconId[\"BUFF_HPSCALEDATKDOWN\"] = \"BUFF_HPSCALEDATKDOWN\";\n    IconId[\"BUFF_HPSCALEDDEFUP\"] = \"BUFF_HPSCALEDDEFUP\";\n    IconId[\"BUFF_HPSCALEDDEFDOWN\"] = \"BUFF_HPSCALEDDEFDOWN\";\n    IconId[\"BUFF_HPSCALEDRECUP\"] = \"BUFF_HPSCALEDRECUP\";\n    IconId[\"BUFF_HPSCALEDRECDOWN\"] = \"BUFF_HPSCALEDRECDOWN\";\n    IconId[\"BUFF_SELFATKUP\"] = \"BUFF_SELFATKUP\";\n    IconId[\"BUFF_ATKDOWNLOCK\"] = \"BUFF_ATKDOWNLOCK\";\n    IconId[\"BUFF_SELFDEFUP\"] = \"BUFF_SELFDEFUP\";\n    IconId[\"BUFF_DEFDOWNLOCK\"] = \"BUFF_DEFDOWNLOCK\";\n    IconId[\"BUFF_SELFRECUP\"] = \"BUFF_SELFRECUP\";\n    IconId[\"BUFF_RECDOWNLOCK\"] = \"BUFF_RECDOWNLOCK\";\n    IconId[\"BUFF_SELFCRTRATEUP\"] = \"BUFF_SELFCRTRATEUP\";\n    IconId[\"BUFF_CRTRATEDOWNLOCK\"] = \"BUFF_CRTRATEDOWNLOCK\";\n    IconId[\"BUFF_POISONBLK\"] = \"BUFF_POISONBLK\";\n    IconId[\"BUFF_WEAKBLK\"] = \"BUFF_WEAKBLK\";\n    IconId[\"BUFF_SICKBLK\"] = \"BUFF_SICKBLK\";\n    IconId[\"BUFF_INJURYBLK\"] = \"BUFF_INJURYBLK\";\n    IconId[\"BUFF_CURSEBLK\"] = \"BUFF_CURSEBLK\";\n    IconId[\"BUFF_PARALYSISBLK\"] = \"BUFF_PARALYSISBLK\";\n    IconId[\"BUFF_RESISTATKDOWN\"] = \"BUFF_RESISTATKDOWN\";\n    IconId[\"BUFF_RESISTDEFDOWN\"] = \"BUFF_RESISTDEFDOWN\";\n    IconId[\"BUFF_RESISTRECDOWN\"] = \"BUFF_RESISTRECDOWN\";\n    IconId[\"BUFF_AILMENTBLK\"] = \"BUFF_AILMENTBLK\";\n    IconId[\"DEBUFF_POISON\"] = \"DEBUFF_POISON\";\n    IconId[\"DEBUFF_WEAK\"] = \"DEBUFF_WEAK\";\n    IconId[\"DEBUFF_SICK\"] = \"DEBUFF_SICK\";\n    IconId[\"DEBUFF_INJURY\"] = \"DEBUFF_INJURY\";\n    IconId[\"DEBUFF_CURSE\"] = \"DEBUFF_CURSE\";\n    IconId[\"DEBUFF_PARALYSIS\"] = \"DEBUFF_PARALYSIS\";\n    IconId[\"DEBUFF_AILMENT\"] = \"DEBUFF_AILMENT\";\n    IconId[\"BUFF_ADDPOISON\"] = \"BUFF_ADDPOISON\";\n    IconId[\"BUFF_ADDWEAK\"] = \"BUFF_ADDWEAK\";\n    IconId[\"BUFF_ADDSICK\"] = \"BUFF_ADDSICK\";\n    IconId[\"BUFF_ADDINJURY\"] = \"BUFF_ADDINJURY\";\n    IconId[\"BUFF_ADDCURSE\"] = \"BUFF_ADDCURSE\";\n    IconId[\"BUFF_ADDPARA\"] = \"BUFF_ADDPARA\";\n    IconId[\"BUFF_ADDAILMENT\"] = \"BUFF_ADDAILMENT\";\n    IconId[\"BUFF_ADDATKDOWN\"] = \"BUFF_ADDATKDOWN\";\n    IconId[\"BUFF_ADDDEFDOWN\"] = \"BUFF_ADDDEFDOWN\";\n    IconId[\"BUFF_ADDRECDOWN\"] = \"BUFF_ADDRECDOWN\";\n    IconId[\"BUFF_POISONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n    IconId[\"BUFF_POISIONCOUNTER\"] = \"BUFF_POISONCOUNTER\";\n    IconId[\"BUFF_WEAKCOUNTER\"] = \"BUFF_WEAKCOUNTER\";\n    IconId[\"BUFF_SICKCOUNTER\"] = \"BUFF_SICKCOUNTER\";\n    IconId[\"BUFF_INJCONTER\"] = \"BUFF_INJCONTER\";\n    IconId[\"BUFF_CURSECOUNTER\"] = \"BUFF_CURSECOUNTER\";\n    IconId[\"BUFF_PARALYCOUNTER\"] = \"BUFF_PARALYCOUNTER\";\n    IconId[\"BUFF_PROB_ATKREDUC\"] = \"BUFF_PROB_ATKREDUC\";\n    IconId[\"BUFF_PROB_DEFREDUC\"] = \"BUFF_PROB_DEFREDUC\";\n    IconId[\"BUFF_PROB_RECREDUC\"] = \"BUFF_PROB_RECREDUC\";\n    IconId[\"BUFF_DAMAGECUT\"] = \"BUFF_DAMAGECUT\";\n    IconId[\"BUFF_DAMAGECUTTOONE\"] = \"BUFF_DAMAGECUTTOONE\";\n    // elemental damage reduction buffs\n    IconId[\"BUFF_FIREDMGDOWN\"] = \"BUFF_FIREDMGDOWN\";\n    IconId[\"BUFF_WATERDMGDOWN\"] = \"BUFF_WATERDMGDOWN\";\n    IconId[\"BUFF_EARTHDMGDOWN\"] = \"BUFF_EARTHDMGDOWN\";\n    IconId[\"BUFF_THUNDERDMGDOWN\"] = \"BUFF_THUNDERDMGDOWN\";\n    IconId[\"BUFF_LIGHTDMGDOWN\"] = \"BUFF_LIGHTDMGDOWN\";\n    IconId[\"BUFF_DARKDMGDOWN\"] = \"BUFF_DARKDMGDOWN\";\n    IconId[\"BUFF_ELEMENTDMGDOWN\"] = \"BUFF_ELEMENTDMGDOWN\";\n    // elemental weakness buffs\n    IconId[\"BUFF_FIREDMGUP\"] = \"BUFF_FIREDMGUP\";\n    IconId[\"BUFF_WATERDMGUP\"] = \"BUFF_WATERDMGUP\";\n    IconId[\"BUFF_WATERMDGUP\"] = \"BUFF_WATERDMGUP\";\n    IconId[\"BUFF_EARTHDMGUP\"] = \"BUFF_EARTHDMGUP\";\n    IconId[\"BUFF_THUNDERDMGUP\"] = \"BUFF_THUNDERDMGUP\";\n    IconId[\"BUFF_LIGHTDMGUP\"] = \"BUFF_LIGHTDMGUP\";\n    IconId[\"BUFF_DARKDMGUP\"] = \"BUFF_DARKDMGUP\";\n    IconId[\"BUFF_ELEMENTDMGUP\"] = \"BUFF_ELEMENTDMGUP\";\n    IconId[\"BUFF_HCDROP\"] = \"BUFF_HCDROP\";\n    IconId[\"BUFF_HCDOWN\"] = \"BUFF_HCDOWN\";\n    IconId[\"BUFF_BCDROP\"] = \"BUFF_BCDROP\";\n    IconId[\"BUFF_BCDOWN\"] = \"BUFF_BCDOWN\";\n    IconId[\"BUFF_ITEMDROP\"] = \"BUFF_ITEMDROP\";\n    IconId[\"BUFF_ITEMDOWN\"] = \"BUFF_ITEMDOWN\";\n    IconId[\"BUFF_ZELDROP\"] = \"BUFF_ZELDROP\";\n    IconId[\"BUFF_ZELDOWN\"] = \"BUFF_ZELDOWN\";\n    IconId[\"BUFF_KARMADROP\"] = \"BUFF_KARMADROP\";\n    IconId[\"BUFF_KARMADOWN\"] = \"BUFF_KARMADOWN\";\n    IconId[\"BUFF_HPTHRESHHCDROP\"] = \"BUFF_HPTHRESHHCDROP\";\n    IconId[\"BUFF_HPTHRESHHCDOWN\"] = \"BUFF_HPTHRESHHCDOWN\";\n    IconId[\"BUFF_HPTHRESHBCDROP\"] = \"BUFF_HPTHRESHBCDROP\";\n    IconId[\"BUFF_HPTHRESHBCDOWN\"] = \"BUFF_HPTHRESHBCDOWN\";\n    IconId[\"BUFF_HPTHRESHITEMDROP\"] = \"BUFF_HPTHRESHITEMDROP\";\n    IconId[\"BUFF_HPTHRESHITEMDOWN\"] = \"BUFF_HPTHRESHITEMDOWN\";\n    IconId[\"BUFF_HPTHRESHZELDROP\"] = \"BUFF_HPTHRESHZELDROP\";\n    IconId[\"BUFF_HPTHRESHZELDOWN\"] = \"BUFF_HPTHRESHZELDOWN\";\n    IconId[\"BUFF_HPTHRESHKARMADROP\"] = \"BUFF_HPTHRESHKARMADROP\";\n    IconId[\"BUFF_HPTHRESHKARMADOWN\"] = \"BUFF_HPTHRESHKARMADOWN\";\n    IconId[\"BUFF_BBFILL\"] = \"BUFF_BBFILL\";\n    IconId[\"BUFF_BBFILLDOWN\"] = \"BUFF_BBFILLDOWN\";\n    IconId[\"BUFF_HCREC\"] = \"BUFF_HCREC\";\n    IconId[\"BUFF_KOBLK\"] = \"BUFF_KOBLK\";\n    IconId[\"BUFF_KO\"] = \"BUFF_KO\";\n    IconId[\"BUFF_KOBLOCK\"] = \"BUFF_KOBLOCK\";\n    IconId[\"BUFF_HPABS\"] = \"BUFF_HPABS\";\n    IconId[\"BUFF_IGNOREDEF\"] = \"BUFF_IGNOREDEF\";\n    IconId[\"BUFF_CRTUP\"] = \"BUFF_CRTUP\";\n    IconId[\"BUFF_CRTDOWN\"] = \"BUFF_CRTDOWN\";\n    IconId[\"BUFF_ELEMENTDOWN\"] = \"BUFF_ELEMENTDOWN\";\n    IconId[\"BUFF_SPARKUP\"] = \"BUFF_SPARKUP\";\n    IconId[\"BUFF_SPARKDOWN\"] = \"BUFF_SPARKDOWN\";\n    IconId[\"BUFF_SPARKDMGUP\"] = \"BUFF_SPARKDMGUP\";\n    IconId[\"BUFF_SPARKDMGDOWN\"] = \"BUFF_SPARKDMGDOWN\";\n    IconId[\"BUFF_SPARKHC\"] = \"BUFF_SPARKHC\";\n    IconId[\"BUFF_SPARKBC\"] = \"BUFF_SPARKBC\";\n    IconId[\"BUFF_SPARKITEM\"] = \"BUFF_SPARKITEM\";\n    IconId[\"BUFF_SPARKZEL\"] = \"BUFF_SPARKZEL\";\n    IconId[\"BUFF_SPARKKARMA\"] = \"BUFF_SPARKKARMA\";\n    IconId[\"BUFF_SPARKBBUP\"] = \"BUFF_SPARKBBUP\";\n    IconId[\"BUFF_HITUP\"] = \"BUFF_HITUP\";\n    IconId[\"BUFF_COUNTERDAMAGE\"] = \"BUFF_COUNTERDAMAGE\";\n    IconId[\"BUFF_GETENEATT\"] = \"BUFF_GETENEATT\";\n    IconId[\"BUFF_REPENEATT\"] = \"BUFF_REPENEATT\";\n    IconId[\"BUFF_HPTHRESHGETENEATT\"] = \"BUFF_HPTHRESHGETENEATT\";\n    IconId[\"BUFF_HPTHRESHREPENEATT\"] = \"BUFF_HPTHRESHREPENEATT\";\n    IconId[\"BUFF_ADDFIRE\"] = \"BUFF_ADDFIRE\";\n    IconId[\"BUFF_ADDWATER\"] = \"BUFF_ADDWATER\";\n    IconId[\"BUFF_ADDEARTH\"] = \"BUFF_ADDEARTH\";\n    IconId[\"BUFF_ADDTHUNDER\"] = \"BUFF_ADDTHUNDER\";\n    IconId[\"BUFF_ADDLIGHT\"] = \"BUFF_ADDLIGHT\";\n    IconId[\"BUFF_ADDDARK\"] = \"BUFF_ADDDARK\";\n    IconId[\"BUFF_ADDELEMENT\"] = \"BUFF_ADDELEMENT\";\n    IconId[\"BUFF_SHIFTFIRE\"] = \"BUFF_SHIFTFIRE\";\n    IconId[\"BUFF_SHIFTWATER\"] = \"BUFF_SHIFTWATER\";\n    IconId[\"BUFF_SHIFTEARTH\"] = \"BUFF_SHIFTEARTH\";\n    IconId[\"BUFF_SHIFTTHUNDER\"] = \"BUFF_SHIFTTHUNDER\";\n    IconId[\"BUFF_SHIFTLIGHT\"] = \"BUFF_SHIFTLIGHT\";\n    IconId[\"BUFF_SHIFTDARK\"] = \"BUFF_SHIFTDARK\";\n    IconId[\"BUFF_SHIFTELEMENT\"] = \"BUFF_SHIFTELEMENT\";\n    IconId[\"BUFF_REMOVEBUFF\"] = \"BUFF_REMOVEBUFF\";\n    IconId[\"BUFF_DISABLELS\"] = \"BUFF_DISABLELS\";\n    IconId[\"BUFF_SUMMONUNIT\"] = \"BUFF_SUMMONUNIT\";\n    IconId[\"BUFF_DBLSTRIKE\"] = \"BUFF_DBLSTRIKE\";\n    IconId[\"BUFF_OVERDRIVEUP\"] = \"BUFF_OVERDRIVEUP\";\n    IconId[\"BUFF_ODFILLBOOST\"] = \"BUFF_ODFILLBOOST\";\n    IconId[\"BUFF_TURNDMG\"] = \"BUFF_TURNDMG\";\n    IconId[\"BUFF_BBATKUP\"] = \"BUFF_BBATKUP\";\n    IconId[\"BUFF_SBBATKUP\"] = \"BUFF_SBBATKUP\";\n    IconId[\"BUFF_UBBATKUP\"] = \"BUFF_UBBATKUP\";\n    IconId[\"BUFF_BBATKDOWN\"] = \"BUFF_BBATKDOWN\";\n    IconId[\"BUFF_SBBATKDOWN\"] = \"BUFF_SBBATKDOWN\";\n    IconId[\"BUFF_UBBATKDOWN\"] = \"BUFF_UBBATKDOWN\";\n    IconId[\"BUFF_BBCOST_REDUCTION\"] = \"BUFF_BBCOST_REDUCTION\";\n    IconId[\"BUFF_GUARDCUT\"] = \"BUFF_GUARDCUT\";\n    IconId[\"BUFF_GUARDBBUP\"] = \"BUFF_GUARDBBUP\";\n    IconId[\"BUFF_FIRESHIELD\"] = \"BUFF_FIRESHIELD\";\n    IconId[\"BUFF_WATERSHIELD\"] = \"BUFF_WATERSHIELD\";\n    IconId[\"BUFF_EARTHSHIELD\"] = \"BUFF_EARTHSHIELD\";\n    IconId[\"BUFF_THUNDERSHIELD\"] = \"BUFF_THUNDERSHIELD\";\n    IconId[\"BUFF_LIGHTSHIELD\"] = \"BUFF_LIGHTSHIELD\";\n    IconId[\"BUFF_DARKSHIELD\"] = \"BUFF_DARKSHIELD\";\n    IconId[\"BUFF_ELEMENTSHIELD\"] = \"BUFF_ELEMENTSHIELD\";\n    IconId[\"BUFF_AILDMGUP\"] = \"BUFF_AILDMGUP\";\n    IconId[\"BUFF_HPTURNSTART\"] = \"BUFF_HPTURNSTART\";\n    IconId[\"BUFF_BCTURNSTART\"] = \"BUFF_BCTURNSTART\";\n    IconId[\"BUFF_PLAYEREXP\"] = \"BUFF_PLAYEREXP\";\n    IconId[\"ATK_ST\"] = \"ATK_ST\";\n    IconId[\"ATK_AOE\"] = \"ATK_AOE\";\n    IconId[\"ATK_RT\"] = \"ATK_RT\";\n    IconId[\"ATK_ST_HPREC\"] = \"ATK_ST_HPREC\";\n    IconId[\"ATK_AOE_HPREC\"] = \"ATK_AOE_HPREC\";\n    IconId[\"ATK_ST_PROPORTIONAL\"] = \"ATK_ST_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PROPORTIONAL\"] = \"ATK_AOE_PROPORTIONAL\";\n    IconId[\"ATK_ST_PIERCING_PROPORTIONAL\"] = \"ATK_ST_PIERCING_PROPORTIONAL\";\n    IconId[\"ATK_AOE_PIERCING_PROPORTIONAL\"] = \"ATK_AOE_PIERCING_PROPORTIONAL\";\n    IconId[\"ATK_ST_FIXED\"] = \"ATK_ST_FIXED\";\n    IconId[\"ATK_AOE_FIXED\"] = \"ATK_AOE_FIXED\";\n    IconId[\"ATK_ST_PIERCING_FIXED\"] = \"ATK_ST_PIERCING_FIXED\";\n    IconId[\"ATK_AOE_PIERCING_FIXED\"] = \"ATK_AOE_PIERCING_FIXED\";\n    IconId[\"ATK_ST_MULTIELEMENT\"] = \"ATK_ST_MULTIELEMENT\";\n    IconId[\"ATK_AOE_MULTIELEMENT\"] = \"ATK_AOE_MULTIELEMENT\";\n    IconId[\"ATK_ST_SACRIFICIAL\"] = \"ATK_ST_SACRIFICIAL\";\n    IconId[\"ATK_AOE_SACRIFICIAL\"] = \"ATK_AOE_SACRIFICIAL\";\n    IconId[\"ATK_ST_HPSCALED\"] = \"ATK_ST_HPSCALED\";\n    IconId[\"ATK_AOE_HPSCALED\"] = \"ATK_AOE_HPSCALED\";\n    IconId[\"ATK_ST_BBGAUGESCALED\"] = \"ATK_ST_BBGAUGESCALED\";\n    IconId[\"ATK_AOE_BBGAUGESCALED\"] = \"ATK_AOE_BBGAUGESCALED\";\n    IconId[\"ATK_ST_USAGESCALED\"] = \"ATK_ST_USAGESCALED\";\n    IconId[\"ATK_AOE_USAGESCALED\"] = \"ATK_AOE_USAGESCALED\";\n    IconId[\"ATK_ST_ELEMENTSCALED\"] = \"ATK_ST_ELEMENTSCALED\";\n    IconId[\"ATK_AOE_ELEMENTSCALED\"] = \"ATK_AOE_ELEMENTSCALED\";\n})(IconId || (IconId = {}));\n/**\n * @description Format of these IDs are `<passive|proc|conditional>:<original effect ID>:<stat>`.\n * Usage of passive/proc and original effect ID are for easy tracking of the original effect\n * source of a given buff.\n */\nexport var BuffId;\n(function (BuffId) {\n    BuffId[\"TURN_DURATION_MODIFICATION\"] = \"TURN_DURATION_MODIFICATION\";\n    BuffId[\"NO_PARAMS_SPECIFIED\"] = \"NO_PARAMS_SPECIFIED\";\n    BuffId[\"UNKNOWN_PASSIVE_EFFECT_ID\"] = \"UNKNOWN_PASSIVE_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PASSIVE_BUFF_PARAMS\"] = \"UNKNOWN_PASSIVE_BUFF_PARAMS\";\n    BuffId[\"passive:1:hp\"] = \"passive:1:hp\";\n    BuffId[\"passive:1:atk\"] = \"passive:1:atk\";\n    BuffId[\"passive:1:def\"] = \"passive:1:def\";\n    BuffId[\"passive:1:rec\"] = \"passive:1:rec\";\n    BuffId[\"passive:1:crit\"] = \"passive:1:crit\";\n    BuffId[\"passive:2:elemental-hp\"] = \"passive:2:elemental-hp\";\n    BuffId[\"passive:2:elemental-atk\"] = \"passive:2:elemental-atk\";\n    BuffId[\"passive:2:elemental-def\"] = \"passive:2:elemental-def\";\n    BuffId[\"passive:2:elemental-rec\"] = \"passive:2:elemental-rec\";\n    BuffId[\"passive:2:elemental-crit\"] = \"passive:2:elemental-crit\";\n    BuffId[\"passive:3:type based-hp\"] = \"passive:3:type based-hp\";\n    BuffId[\"passive:3:type based-atk\"] = \"passive:3:type based-atk\";\n    BuffId[\"passive:3:type based-def\"] = \"passive:3:type based-def\";\n    BuffId[\"passive:3:type based-rec\"] = \"passive:3:type based-rec\";\n    BuffId[\"passive:3:type based-crit\"] = \"passive:3:type based-crit\";\n    BuffId[\"passive:4:resist-poison\"] = \"passive:4:resist-poison\";\n    BuffId[\"passive:4:resist-weak\"] = \"passive:4:resist-weak\";\n    BuffId[\"passive:4:resist-sick\"] = \"passive:4:resist-sick\";\n    BuffId[\"passive:4:resist-injury\"] = \"passive:4:resist-injury\";\n    BuffId[\"passive:4:resist-curse\"] = \"passive:4:resist-curse\";\n    BuffId[\"passive:4:resist-paralysis\"] = \"passive:4:resist-paralysis\";\n    BuffId[\"passive:5:mitigate-fire\"] = \"passive:5:mitigate-fire\";\n    BuffId[\"passive:5:mitigate-water\"] = \"passive:5:mitigate-water\";\n    BuffId[\"passive:5:mitigate-earth\"] = \"passive:5:mitigate-earth\";\n    BuffId[\"passive:5:mitigate-thunder\"] = \"passive:5:mitigate-thunder\";\n    BuffId[\"passive:5:mitigate-light\"] = \"passive:5:mitigate-light\";\n    BuffId[\"passive:5:mitigate-dark\"] = \"passive:5:mitigate-dark\";\n    BuffId[\"passive:5:mitigate-unknown\"] = \"passive:5:mitigate-unknown\";\n    BuffId[\"passive:8:mitigation\"] = \"passive:8:mitigation\";\n    BuffId[\"passive:9:gradual bc fill\"] = \"passive:9:gradual bc fill\";\n    BuffId[\"passive:10:hc efficacy\"] = \"passive:10:hc efficacy\";\n    BuffId[\"passive:11:hp conditional-atk\"] = \"passive:11:hp conditional-atk\";\n    BuffId[\"passive:11:hp conditional-def\"] = \"passive:11:hp conditional-def\";\n    BuffId[\"passive:11:hp conditional-rec\"] = \"passive:11:hp conditional-rec\";\n    BuffId[\"passive:11:hp conditional-crit\"] = \"passive:11:hp conditional-crit\";\n    BuffId[\"passive:12:hp conditional drop boost-bc\"] = \"passive:12:hp conditional drop boost-bc\";\n    BuffId[\"passive:12:hp conditional drop boost-hc\"] = \"passive:12:hp conditional drop boost-hc\";\n    BuffId[\"passive:12:hp conditional drop boost-item\"] = \"passive:12:hp conditional drop boost-item\";\n    BuffId[\"passive:12:hp conditional drop boost-zel\"] = \"passive:12:hp conditional drop boost-zel\";\n    BuffId[\"passive:12:hp conditional drop boost-karma\"] = \"passive:12:hp conditional drop boost-karma\";\n    BuffId[\"passive:13:bc fill on enemy defeat\"] = \"passive:13:bc fill on enemy defeat\";\n    BuffId[\"passive:14:chance mitigation\"] = \"passive:14:chance mitigation\";\n    BuffId[\"passive:15:heal on enemy defeat\"] = \"passive:15:heal on enemy defeat\";\n    BuffId[\"passive:16:heal on win\"] = \"passive:16:heal on win\";\n    BuffId[\"passive:17:hp absorb\"] = \"passive:17:hp absorb\";\n    BuffId[\"passive:19:drop boost-bc\"] = \"passive:19:drop boost-bc\";\n    BuffId[\"passive:19:drop boost-hc\"] = \"passive:19:drop boost-hc\";\n    BuffId[\"passive:19:drop boost-item\"] = \"passive:19:drop boost-item\";\n    BuffId[\"passive:19:drop boost-zel\"] = \"passive:19:drop boost-zel\";\n    BuffId[\"passive:19:drop boost-karma\"] = \"passive:19:drop boost-karma\";\n    BuffId[\"passive:20:chance inflict-poison\"] = \"passive:20:chance inflict-poison\";\n    BuffId[\"passive:20:chance inflict-weak\"] = \"passive:20:chance inflict-weak\";\n    BuffId[\"passive:20:chance inflict-sick\"] = \"passive:20:chance inflict-sick\";\n    BuffId[\"passive:20:chance inflict-injury\"] = \"passive:20:chance inflict-injury\";\n    BuffId[\"passive:20:chance inflict-curse\"] = \"passive:20:chance inflict-curse\";\n    BuffId[\"passive:20:chance inflict-paralysis\"] = \"passive:20:chance inflict-paralysis\";\n    BuffId[\"passive:20:chance inflict-atk down\"] = \"passive:20:chance inflict-atk down\";\n    BuffId[\"passive:20:chance inflict-def down\"] = \"passive:20:chance inflict-def down\";\n    BuffId[\"passive:20:chance inflict-rec down\"] = \"passive:20:chance inflict-rec down\";\n    BuffId[\"passive:20:chance inflict-unknown\"] = \"passive:20:chance inflict-unknown\";\n    BuffId[\"passive:21:first turn-atk\"] = \"passive:21:first turn-atk\";\n    BuffId[\"passive:21:first turn-def\"] = \"passive:21:first turn-def\";\n    BuffId[\"passive:21:first turn-rec\"] = \"passive:21:first turn-rec\";\n    BuffId[\"passive:21:first turn-crit\"] = \"passive:21:first turn-crit\";\n    BuffId[\"passive:23:bc fill on win\"] = \"passive:23:bc fill on win\";\n    BuffId[\"passive:24:heal on hit\"] = \"passive:24:heal on hit\";\n    BuffId[\"passive:25:bc fill on hit\"] = \"passive:25:bc fill on hit\";\n    BuffId[\"passive:26:chance damage reflect\"] = \"passive:26:chance damage reflect\";\n    BuffId[\"passive:27:target chance change\"] = \"passive:27:target chance change\";\n    BuffId[\"passive:28:hp conditional target chance change\"] = \"passive:28:hp conditional target chance change\";\n    BuffId[\"passive:29:chance def ignore\"] = \"passive:29:chance def ignore\";\n    BuffId[\"passive:30:bb gauge conditional-atk\"] = \"passive:30:bb gauge conditional-atk\";\n    BuffId[\"passive:30:bb gauge conditional-def\"] = \"passive:30:bb gauge conditional-def\";\n    BuffId[\"passive:30:bb gauge conditional-rec\"] = \"passive:30:bb gauge conditional-rec\";\n    BuffId[\"passive:30:bb gauge conditional-crit\"] = \"passive:30:bb gauge conditional-crit\";\n    BuffId[\"passive:31:spark-damage\"] = \"passive:31:spark-damage\";\n    BuffId[\"passive:31:spark-bc\"] = \"passive:31:spark-bc\";\n    BuffId[\"passive:31:spark-hc\"] = \"passive:31:spark-hc\";\n    BuffId[\"passive:31:spark-item\"] = \"passive:31:spark-item\";\n    BuffId[\"passive:31:spark-zel\"] = \"passive:31:spark-zel\";\n    BuffId[\"passive:31:spark-karma\"] = \"passive:31:spark-karma\";\n    BuffId[\"passive:32:bc efficacy\"] = \"passive:32:bc efficacy\";\n    BuffId[\"passive:33:gradual heal\"] = \"passive:33:gradual heal\";\n    BuffId[\"passive:34:critical damage\"] = \"passive:34:critical damage\";\n    BuffId[\"passive:35:bc fill on normal attack\"] = \"passive:35:bc fill on normal attack\";\n    BuffId[\"passive:36:extra action\"] = \"passive:36:extra action\";\n    BuffId[\"passive:37:hit count boost\"] = \"passive:37:hit count boost\";\n    BuffId[\"passive:40:converted-atk\"] = \"passive:40:converted-atk\";\n    BuffId[\"passive:40:converted-def\"] = \"passive:40:converted-def\";\n    BuffId[\"passive:40:converted-rec\"] = \"passive:40:converted-rec\";\n    BuffId[\"passive:41:unique element count-hp\"] = \"passive:41:unique element count-hp\";\n    BuffId[\"passive:41:unique element count-atk\"] = \"passive:41:unique element count-atk\";\n    BuffId[\"passive:41:unique element count-def\"] = \"passive:41:unique element count-def\";\n    BuffId[\"passive:41:unique element count-rec\"] = \"passive:41:unique element count-rec\";\n    BuffId[\"passive:41:unique element count-crit\"] = \"passive:41:unique element count-crit\";\n    BuffId[\"passive:42:gender-hp\"] = \"passive:42:gender-hp\";\n    BuffId[\"passive:42:gender-atk\"] = \"passive:42:gender-atk\";\n    BuffId[\"passive:42:gender-def\"] = \"passive:42:gender-def\";\n    BuffId[\"passive:42:gender-rec\"] = \"passive:42:gender-rec\";\n    BuffId[\"passive:42:gender-crit\"] = \"passive:42:gender-crit\";\n    BuffId[\"passive:43:chance damage to one\"] = \"passive:43:chance damage to one\";\n    BuffId[\"passive:44:flat-hp\"] = \"passive:44:flat-hp\";\n    BuffId[\"passive:44:flat-atk\"] = \"passive:44:flat-atk\";\n    BuffId[\"passive:44:flat-def\"] = \"passive:44:flat-def\";\n    BuffId[\"passive:44:flat-rec\"] = \"passive:44:flat-rec\";\n    BuffId[\"passive:44:flat-crit\"] = \"passive:44:flat-crit\";\n    BuffId[\"passive:45:critical damage reduction-base\"] = \"passive:45:critical damage reduction-base\";\n    BuffId[\"passive:45:critical damage reduction-buff\"] = \"passive:45:critical damage reduction-buff\";\n    BuffId[\"passive:46:hp scaled-atk\"] = \"passive:46:hp scaled-atk\";\n    BuffId[\"passive:46:hp scaled-def\"] = \"passive:46:hp scaled-def\";\n    BuffId[\"passive:46:hp scaled-rec\"] = \"passive:46:hp scaled-rec\";\n    BuffId[\"passive:47:bc fill on spark\"] = \"passive:47:bc fill on spark\";\n    BuffId[\"passive:48:bc cost reduction\"] = \"passive:48:bc cost reduction\";\n    BuffId[\"passive:49:bb gauge consumption reduction\"] = \"passive:49:bb gauge consumption reduction\";\n    BuffId[\"passive:50:elemental weakness damage-fire\"] = \"passive:50:elemental weakness damage-fire\";\n    BuffId[\"passive:50:elemental weakness damage-water\"] = \"passive:50:elemental weakness damage-water\";\n    BuffId[\"passive:50:elemental weakness damage-earth\"] = \"passive:50:elemental weakness damage-earth\";\n    BuffId[\"passive:50:elemental weakness damage-thunder\"] = \"passive:50:elemental weakness damage-thunder\";\n    BuffId[\"passive:50:elemental weakness damage-light\"] = \"passive:50:elemental weakness damage-light\";\n    BuffId[\"passive:50:elemental weakness damage-dark\"] = \"passive:50:elemental weakness damage-dark\";\n    BuffId[\"passive:50:elemental weakness damage-unknown\"] = \"passive:50:elemental weakness damage-unknown\";\n    BuffId[\"passive:53:critical damage-base\"] = \"passive:53:critical damage-base\";\n    BuffId[\"passive:53:critical damage-buff\"] = \"passive:53:critical damage-buff\";\n    BuffId[\"passive:53:element damage-base\"] = \"passive:53:element damage-base\";\n    BuffId[\"passive:53:element damage-buff\"] = \"passive:53:element damage-buff\";\n    BuffId[\"passive:53:critical rate-base\"] = \"passive:53:critical rate-base\";\n    BuffId[\"passive:53:critical rate-buff\"] = \"passive:53:critical rate-buff\";\n    BuffId[\"passive:55:hp conditional\"] = \"passive:55:hp conditional\";\n    BuffId[\"passive:58:guard mitigation\"] = \"passive:58:guard mitigation\";\n    BuffId[\"passive:59:bc fill when attacked on guard-percent\"] = \"passive:59:bc fill when attacked on guard-percent\";\n    BuffId[\"passive:59:bc fill when attacked on guard-flat\"] = \"passive:59:bc fill when attacked on guard-flat\";\n    BuffId[\"passive:61:bc fill on guard-percent\"] = \"passive:61:bc fill on guard-percent\";\n    BuffId[\"passive:61:bc fill on guard-flat\"] = \"passive:61:bc fill on guard-flat\";\n    BuffId[\"passive:62:mitigate-fire\"] = \"passive:62:mitigate-fire\";\n    BuffId[\"passive:62:mitigate-water\"] = \"passive:62:mitigate-water\";\n    BuffId[\"passive:62:mitigate-earth\"] = \"passive:62:mitigate-earth\";\n    BuffId[\"passive:62:mitigate-thunder\"] = \"passive:62:mitigate-thunder\";\n    BuffId[\"passive:62:mitigate-light\"] = \"passive:62:mitigate-light\";\n    BuffId[\"passive:62:mitigate-dark\"] = \"passive:62:mitigate-dark\";\n    BuffId[\"passive:62:mitigate-unknown\"] = \"passive:62:mitigate-unknown\";\n    BuffId[\"passive:63:first turn mitigate-fire\"] = \"passive:63:first turn mitigate-fire\";\n    BuffId[\"passive:63:first turn mitigate-water\"] = \"passive:63:first turn mitigate-water\";\n    BuffId[\"passive:63:first turn mitigate-earth\"] = \"passive:63:first turn mitigate-earth\";\n    BuffId[\"passive:63:first turn mitigate-thunder\"] = \"passive:63:first turn mitigate-thunder\";\n    BuffId[\"passive:63:first turn mitigate-light\"] = \"passive:63:first turn mitigate-light\";\n    BuffId[\"passive:63:first turn mitigate-dark\"] = \"passive:63:first turn mitigate-dark\";\n    BuffId[\"passive:63:first turn mitigate-unknown\"] = \"passive:63:first turn mitigate-unknown\";\n    BuffId[\"passive:64:attack boost-bb\"] = \"passive:64:attack boost-bb\";\n    BuffId[\"passive:64:attack boost-sbb\"] = \"passive:64:attack boost-sbb\";\n    BuffId[\"passive:64:attack boost-ubb\"] = \"passive:64:attack boost-ubb\";\n    BuffId[\"passive:65:bc fill on crit\"] = \"passive:65:bc fill on crit\";\n    BuffId[\"passive:66:add effect to skill-bb\"] = \"passive:66:add effect to skill-bb\";\n    BuffId[\"passive:66:add effect to skill-sbb\"] = \"passive:66:add effect to skill-sbb\";\n    BuffId[\"passive:66:add effect to skill-ubb\"] = \"passive:66:add effect to skill-ubb\";\n    BuffId[\"passive:69:chance ko resistance\"] = \"passive:69:chance ko resistance\";\n    BuffId[\"passive:70:od fill rate\"] = \"passive:70:od fill rate\";\n    BuffId[\"passive:71:inflict on hit-poison\"] = \"passive:71:inflict on hit-poison\";\n    BuffId[\"passive:71:inflict on hit-weak\"] = \"passive:71:inflict on hit-weak\";\n    BuffId[\"passive:71:inflict on hit-sick\"] = \"passive:71:inflict on hit-sick\";\n    BuffId[\"passive:71:inflict on hit-injury\"] = \"passive:71:inflict on hit-injury\";\n    BuffId[\"passive:71:inflict on hit-curse\"] = \"passive:71:inflict on hit-curse\";\n    BuffId[\"passive:71:inflict on hit-paralysis\"] = \"passive:71:inflict on hit-paralysis\";\n    BuffId[\"passive:72:effect at turn start-hp\"] = \"passive:72:effect at turn start-hp\";\n    BuffId[\"passive:72:effect at turn start-bc\"] = \"passive:72:effect at turn start-bc\";\n    BuffId[\"passive:73:resist-poison\"] = \"passive:73:resist-poison\";\n    BuffId[\"passive:73:resist-weak\"] = \"passive:73:resist-weak\";\n    BuffId[\"passive:73:resist-sick\"] = \"passive:73:resist-sick\";\n    BuffId[\"passive:73:resist-injury\"] = \"passive:73:resist-injury\";\n    BuffId[\"passive:73:resist-curse\"] = \"passive:73:resist-curse\";\n    BuffId[\"passive:73:resist-paralysis\"] = \"passive:73:resist-paralysis\";\n    BuffId[\"passive:73:resist-atk down\"] = \"passive:73:resist-atk down\";\n    BuffId[\"passive:73:resist-def down\"] = \"passive:73:resist-def down\";\n    BuffId[\"passive:73:resist-rec down\"] = \"passive:73:resist-rec down\";\n    BuffId[\"passive:74:ailment attack boost\"] = \"passive:74:ailment attack boost\";\n    BuffId[\"passive:75:spark vulnerability\"] = \"passive:75:spark vulnerability\";\n    BuffId[\"passive:77:spark damage reduction-base\"] = \"passive:77:spark damage reduction-base\";\n    BuffId[\"passive:77:spark damage reduction-buff\"] = \"passive:77:spark damage reduction-buff\";\n    BuffId[\"passive:78:damage taken conditional\"] = \"passive:78:damage taken conditional\";\n    BuffId[\"passive:79:bc fill after damage taken conditional-flat\"] = \"passive:79:bc fill after damage taken conditional-flat\";\n    BuffId[\"passive:79:bc fill after damage taken conditional-percent\"] = \"passive:79:bc fill after damage taken conditional-percent\";\n    BuffId[\"passive:80:damage dealt conditional\"] = \"passive:80:damage dealt conditional\";\n    BuffId[\"passive:81:bc fill after damage dealt conditional-flat\"] = \"passive:81:bc fill after damage dealt conditional-flat\";\n    BuffId[\"passive:81:bc fill after damage dealt conditional-percent\"] = \"passive:81:bc fill after damage dealt conditional-percent\";\n    BuffId[\"passive:82:bc received conditional\"] = \"passive:82:bc received conditional\";\n    BuffId[\"UNKNOWN_PROC_EFFECT_ID\"] = \"UNKNOWN_PROC_EFFECT_ID\";\n    BuffId[\"UNKNOWN_PROC_BUFF_PARAMS\"] = \"UNKNOWN_PROC_BUFF_PARAMS\";\n    BuffId[\"proc:1:attack\"] = \"proc:1:attack\";\n    BuffId[\"proc:2:burst heal\"] = \"proc:2:burst heal\";\n    BuffId[\"proc:3:gradual heal\"] = \"proc:3:gradual heal\";\n    BuffId[\"proc:4:bc fill-flat\"] = \"proc:4:bc fill-flat\";\n    BuffId[\"proc:4:bc fill-percent\"] = \"proc:4:bc fill-percent\";\n    BuffId[\"proc:5:regular or elemental-atk\"] = \"proc:5:regular or elemental-atk\";\n    BuffId[\"proc:5:regular or elemental-def\"] = \"proc:5:regular or elemental-def\";\n    BuffId[\"proc:5:regular or elemental-rec\"] = \"proc:5:regular or elemental-rec\";\n    BuffId[\"proc:5:regular or elemental-crit\"] = \"proc:5:regular or elemental-crit\";\n    BuffId[\"proc:6:drop boost-bc\"] = \"proc:6:drop boost-bc\";\n    BuffId[\"proc:6:drop boost-hc\"] = \"proc:6:drop boost-hc\";\n    BuffId[\"proc:6:drop boost-item\"] = \"proc:6:drop boost-item\";\n    BuffId[\"proc:7:guaranteed ko resistance\"] = \"proc:7:guaranteed ko resistance\";\n    BuffId[\"proc:8:max hp boost-flat\"] = \"proc:8:max hp boost-flat\";\n    BuffId[\"proc:8:max hp boost-percent\"] = \"proc:8:max hp boost-percent\";\n    BuffId[\"proc:9:regular or elemental reduction-atk\"] = \"proc:9:regular or elemental reduction-atk\";\n    BuffId[\"proc:9:regular or elemental reduction-def\"] = \"proc:9:regular or elemental reduction-def\";\n    BuffId[\"proc:9:regular or elemental reduction-rec\"] = \"proc:9:regular or elemental reduction-rec\";\n    BuffId[\"proc:9:regular or elemental reduction-unknown\"] = \"proc:9:regular or elemental reduction-unknown\";\n    BuffId[\"proc:10:cleanse-poison\"] = \"proc:10:cleanse-poison\";\n    BuffId[\"proc:10:cleanse-weak\"] = \"proc:10:cleanse-weak\";\n    BuffId[\"proc:10:cleanse-sick\"] = \"proc:10:cleanse-sick\";\n    BuffId[\"proc:10:cleanse-injury\"] = \"proc:10:cleanse-injury\";\n    BuffId[\"proc:10:cleanse-curse\"] = \"proc:10:cleanse-curse\";\n    BuffId[\"proc:10:cleanse-paralysis\"] = \"proc:10:cleanse-paralysis\";\n    BuffId[\"proc:10:cleanse-atk down\"] = \"proc:10:cleanse-atk down\";\n    BuffId[\"proc:10:cleanse-def down\"] = \"proc:10:cleanse-def down\";\n    BuffId[\"proc:10:cleanse-rec down\"] = \"proc:10:cleanse-rec down\";\n    BuffId[\"proc:10:cleanse-unknown\"] = \"proc:10:cleanse-unknown\";\n    BuffId[\"proc:11:chance inflict-poison\"] = \"proc:11:chance inflict-poison\";\n    BuffId[\"proc:11:chance inflict-weak\"] = \"proc:11:chance inflict-weak\";\n    BuffId[\"proc:11:chance inflict-sick\"] = \"proc:11:chance inflict-sick\";\n    BuffId[\"proc:11:chance inflict-injury\"] = \"proc:11:chance inflict-injury\";\n    BuffId[\"proc:11:chance inflict-curse\"] = \"proc:11:chance inflict-curse\";\n    BuffId[\"proc:11:chance inflict-paralysis\"] = \"proc:11:chance inflict-paralysis\";\n    BuffId[\"proc:11:chance inflict-atk down\"] = \"proc:11:chance inflict-atk down\";\n    BuffId[\"proc:11:chance inflict-def down\"] = \"proc:11:chance inflict-def down\";\n    BuffId[\"proc:11:chance inflict-rec down\"] = \"proc:11:chance inflict-rec down\";\n    BuffId[\"proc:11:chance inflict-unknown\"] = \"proc:11:chance inflict-unknown\";\n    BuffId[\"proc:12:guaranteed revive\"] = \"proc:12:guaranteed revive\";\n    BuffId[\"proc:13:random attack\"] = \"proc:13:random attack\";\n    BuffId[\"proc:14:hp absorb attack\"] = \"proc:14:hp absorb attack\";\n    BuffId[\"proc:16:mitigate-fire\"] = \"proc:16:mitigate-fire\";\n    BuffId[\"proc:16:mitigate-water\"] = \"proc:16:mitigate-water\";\n    BuffId[\"proc:16:mitigate-earth\"] = \"proc:16:mitigate-earth\";\n    BuffId[\"proc:16:mitigate-thunder\"] = \"proc:16:mitigate-thunder\";\n    BuffId[\"proc:16:mitigate-light\"] = \"proc:16:mitigate-light\";\n    BuffId[\"proc:16:mitigate-dark\"] = \"proc:16:mitigate-dark\";\n    BuffId[\"proc:16:mitigate-all\"] = \"proc:16:mitigate-all\";\n    BuffId[\"proc:16:mitigate-unknown\"] = \"proc:16:mitigate-unknown\";\n    BuffId[\"proc:17:resist-poison\"] = \"proc:17:resist-poison\";\n    BuffId[\"proc:17:resist-weak\"] = \"proc:17:resist-weak\";\n    BuffId[\"proc:17:resist-sick\"] = \"proc:17:resist-sick\";\n    BuffId[\"proc:17:resist-injury\"] = \"proc:17:resist-injury\";\n    BuffId[\"proc:17:resist-curse\"] = \"proc:17:resist-curse\";\n    BuffId[\"proc:17:resist-paralysis\"] = \"proc:17:resist-paralysis\";\n    BuffId[\"proc:18:mitigation\"] = \"proc:18:mitigation\";\n    BuffId[\"proc:19:gradual bc fill\"] = \"proc:19:gradual bc fill\";\n    BuffId[\"proc:20:bc fill on hit\"] = \"proc:20:bc fill on hit\";\n    BuffId[\"proc:22:defense ignore\"] = \"proc:22:defense ignore\";\n    BuffId[\"proc:23:spark damage\"] = \"proc:23:spark damage\";\n    BuffId[\"proc:24:converted-atk\"] = \"proc:24:converted-atk\";\n    BuffId[\"proc:24:converted-def\"] = \"proc:24:converted-def\";\n    BuffId[\"proc:24:converted-rec\"] = \"proc:24:converted-rec\";\n    BuffId[\"proc:26:hit count boost\"] = \"proc:26:hit count boost\";\n    BuffId[\"proc:27:proportional attack\"] = \"proc:27:proportional attack\";\n    BuffId[\"proc:28:fixed attack\"] = \"proc:28:fixed attack\";\n    BuffId[\"proc:29:multi-element attack\"] = \"proc:29:multi-element attack\";\n    BuffId[\"proc:30:add element-fire\"] = \"proc:30:add element-fire\";\n    BuffId[\"proc:30:add element-water\"] = \"proc:30:add element-water\";\n    BuffId[\"proc:30:add element-earth\"] = \"proc:30:add element-earth\";\n    BuffId[\"proc:30:add element-thunder\"] = \"proc:30:add element-thunder\";\n    BuffId[\"proc:30:add element-light\"] = \"proc:30:add element-light\";\n    BuffId[\"proc:30:add element-dark\"] = \"proc:30:add element-dark\";\n    BuffId[\"proc:30:add element-unknown\"] = \"proc:30:add element-unknown\";\n    BuffId[\"proc:31:bc fill-flat\"] = \"proc:31:bc fill-flat\";\n    BuffId[\"proc:31:bc fill-percent\"] = \"proc:31:bc fill-percent\";\n    BuffId[\"proc:32:element shift-fire\"] = \"proc:32:element shift-fire\";\n    BuffId[\"proc:32:element shift-water\"] = \"proc:32:element shift-water\";\n    BuffId[\"proc:32:element shift-earth\"] = \"proc:32:element shift-earth\";\n    BuffId[\"proc:32:element shift-thunder\"] = \"proc:32:element shift-thunder\";\n    BuffId[\"proc:32:element shift-light\"] = \"proc:32:element shift-light\";\n    BuffId[\"proc:32:element shift-dark\"] = \"proc:32:element shift-dark\";\n    BuffId[\"proc:32:element shift-unknown\"] = \"proc:32:element shift-unknown\";\n    BuffId[\"proc:33:buff wipe\"] = \"proc:33:buff wipe\";\n    BuffId[\"proc:34:bc drain-flat\"] = \"proc:34:bc drain-flat\";\n    BuffId[\"proc:34:bc drain-percent\"] = \"proc:34:bc drain-percent\";\n    BuffId[\"proc:36:ls lock\"] = \"proc:36:ls lock\";\n    BuffId[\"proc:37:summon\"] = \"proc:37:summon\";\n    BuffId[\"proc:38:cleanse-poison\"] = \"proc:38:cleanse-poison\";\n    BuffId[\"proc:38:cleanse-weak\"] = \"proc:38:cleanse-weak\";\n    BuffId[\"proc:38:cleanse-sick\"] = \"proc:38:cleanse-sick\";\n    BuffId[\"proc:38:cleanse-injury\"] = \"proc:38:cleanse-injury\";\n    BuffId[\"proc:38:cleanse-curse\"] = \"proc:38:cleanse-curse\";\n    BuffId[\"proc:38:cleanse-paralysis\"] = \"proc:38:cleanse-paralysis\";\n    BuffId[\"proc:38:cleanse-atk down\"] = \"proc:38:cleanse-atk down\";\n    BuffId[\"proc:38:cleanse-def down\"] = \"proc:38:cleanse-def down\";\n    BuffId[\"proc:38:cleanse-rec down\"] = \"proc:38:cleanse-rec down\";\n    BuffId[\"proc:38:cleanse-unknown\"] = \"proc:38:cleanse-unknown\";\n    BuffId[\"proc:39:mitigate-fire\"] = \"proc:39:mitigate-fire\";\n    BuffId[\"proc:39:mitigate-water\"] = \"proc:39:mitigate-water\";\n    BuffId[\"proc:39:mitigate-earth\"] = \"proc:39:mitigate-earth\";\n    BuffId[\"proc:39:mitigate-thunder\"] = \"proc:39:mitigate-thunder\";\n    BuffId[\"proc:39:mitigate-light\"] = \"proc:39:mitigate-light\";\n    BuffId[\"proc:39:mitigate-dark\"] = \"proc:39:mitigate-dark\";\n    BuffId[\"proc:39:mitigate-unknown\"] = \"proc:39:mitigate-unknown\";\n    BuffId[\"proc:40:add ailment-poison\"] = \"proc:40:add ailment-poison\";\n    BuffId[\"proc:40:add ailment-weak\"] = \"proc:40:add ailment-weak\";\n    BuffId[\"proc:40:add ailment-sick\"] = \"proc:40:add ailment-sick\";\n    BuffId[\"proc:40:add ailment-injury\"] = \"proc:40:add ailment-injury\";\n    BuffId[\"proc:40:add ailment-curse\"] = \"proc:40:add ailment-curse\";\n    BuffId[\"proc:40:add ailment-paralysis\"] = \"proc:40:add ailment-paralysis\";\n    BuffId[\"proc:40:add ailment-atk down\"] = \"proc:40:add ailment-atk down\";\n    BuffId[\"proc:40:add ailment-def down\"] = \"proc:40:add ailment-def down\";\n    BuffId[\"proc:40:add ailment-rec down\"] = \"proc:40:add ailment-rec down\";\n    BuffId[\"proc:40:add ailment-unknown\"] = \"proc:40:add ailment-unknown\";\n    BuffId[\"proc:42:sacrificial attack\"] = \"proc:42:sacrificial attack\";\n    BuffId[\"proc:42:instant death\"] = \"proc:42:instant death\";\n    BuffId[\"proc:43:burst od fill\"] = \"proc:43:burst od fill\";\n    BuffId[\"proc:44:damage over time\"] = \"proc:44:damage over time\";\n    BuffId[\"proc:45:attack boost-bb\"] = \"proc:45:attack boost-bb\";\n    BuffId[\"proc:45:attack boost-sbb\"] = \"proc:45:attack boost-sbb\";\n    BuffId[\"proc:45:attack boost-ubb\"] = \"proc:45:attack boost-ubb\";\n    BuffId[\"proc:46:non-lethal proportional attack\"] = \"proc:46:non-lethal proportional attack\";\n    BuffId[\"proc:47:hp scaled attack\"] = \"proc:47:hp scaled attack\";\n    BuffId[\"proc:48:piercing attack-base\"] = \"proc:48:piercing attack-base\";\n    BuffId[\"proc:48:piercing attack-current\"] = \"proc:48:piercing attack-current\";\n    BuffId[\"proc:48:piercing attack-fixed\"] = \"proc:48:piercing attack-fixed\";\n    BuffId[\"proc:48:piercing attack-unknown\"] = \"proc:48:piercing attack-unknown\";\n    BuffId[\"proc:49:chance instant death\"] = \"proc:49:chance instant death\";\n    BuffId[\"proc:50:chance damage reflect\"] = \"proc:50:chance damage reflect\";\n    BuffId[\"proc:51:add to attack-atk down\"] = \"proc:51:add to attack-atk down\";\n    BuffId[\"proc:51:add to attack-def down\"] = \"proc:51:add to attack-def down\";\n    BuffId[\"proc:51:add to attack-rec down\"] = \"proc:51:add to attack-rec down\";\n    BuffId[\"proc:52:bc efficacy\"] = \"proc:52:bc efficacy\";\n    BuffId[\"proc:53:inflict on hit-poison\"] = \"proc:53:inflict on hit-poison\";\n    BuffId[\"proc:53:inflict on hit-weak\"] = \"proc:53:inflict on hit-weak\";\n    BuffId[\"proc:53:inflict on hit-sick\"] = \"proc:53:inflict on hit-sick\";\n    BuffId[\"proc:53:inflict on hit-injury\"] = \"proc:53:inflict on hit-injury\";\n    BuffId[\"proc:53:inflict on hit-curse\"] = \"proc:53:inflict on hit-curse\";\n    BuffId[\"proc:53:inflict on hit-paralysis\"] = \"proc:53:inflict on hit-paralysis\";\n    BuffId[\"proc:54:critical damage boost\"] = \"proc:54:critical damage boost\";\n    BuffId[\"proc:55:elemental weakness damage-fire\"] = \"proc:55:elemental weakness damage-fire\";\n    BuffId[\"proc:55:elemental weakness damage-water\"] = \"proc:55:elemental weakness damage-water\";\n    BuffId[\"proc:55:elemental weakness damage-earth\"] = \"proc:55:elemental weakness damage-earth\";\n    BuffId[\"proc:55:elemental weakness damage-thunder\"] = \"proc:55:elemental weakness damage-thunder\";\n    BuffId[\"proc:55:elemental weakness damage-light\"] = \"proc:55:elemental weakness damage-light\";\n    BuffId[\"proc:55:elemental weakness damage-dark\"] = \"proc:55:elemental weakness damage-dark\";\n    BuffId[\"proc:55:elemental weakness damage-unknown\"] = \"proc:55:elemental weakness damage-unknown\";\n    BuffId[\"proc:56:chance ko resistance\"] = \"proc:56:chance ko resistance\";\n    BuffId[\"proc:57:bc drop resistance-base\"] = \"proc:57:bc drop resistance-base\";\n    BuffId[\"proc:57:bc drop resistance-buff\"] = \"proc:57:bc drop resistance-buff\";\n    BuffId[\"proc:57:hc drop resistance-base\"] = \"proc:57:hc drop resistance-base\";\n    BuffId[\"proc:57:hc drop resistance-buff\"] = \"proc:57:hc drop resistance-buff\";\n    BuffId[\"proc:58:spark vulnerability\"] = \"proc:58:spark vulnerability\";\n    BuffId[\"proc:59:attack reduction-bb\"] = \"proc:59:attack reduction-bb\";\n    BuffId[\"proc:59:attack reduction-sbb\"] = \"proc:59:attack reduction-sbb\";\n    BuffId[\"proc:59:attack reduction-ubb\"] = \"proc:59:attack reduction-ubb\";\n    BuffId[\"proc:61:party bb gauge-scaled attack\"] = \"proc:61:party bb gauge-scaled attack\";\n    BuffId[\"proc:61:party bc drain\"] = \"proc:61:party bc drain\";\n    BuffId[\"proc:62:barrier-all\"] = \"proc:62:barrier-all\";\n    BuffId[\"proc:62:barrier-fire\"] = \"proc:62:barrier-fire\";\n    BuffId[\"proc:62:barrier-water\"] = \"proc:62:barrier-water\";\n    BuffId[\"proc:62:barrier-earth\"] = \"proc:62:barrier-earth\";\n    BuffId[\"proc:62:barrier-thunder\"] = \"proc:62:barrier-thunder\";\n    BuffId[\"proc:62:barrier-light\"] = \"proc:62:barrier-light\";\n    BuffId[\"proc:62:barrier-dark\"] = \"proc:62:barrier-dark\";\n    BuffId[\"proc:62:barrier-unknown\"] = \"proc:62:barrier-unknown\";\n    BuffId[\"proc:64:consecutive usage attack\"] = \"proc:64:consecutive usage attack\";\n    BuffId[\"proc:65:ailment attack boost\"] = \"proc:65:ailment attack boost\";\n    BuffId[\"proc:66:chance revive\"] = \"proc:66:chance revive\";\n    BuffId[\"proc:67:bc fill on spark\"] = \"proc:67:bc fill on spark\";\n    BuffId[\"proc:68:guard mitigation\"] = \"proc:68:guard mitigation\";\n    BuffId[\"proc:69:bc fill on guard-flat\"] = \"proc:69:bc fill on guard-flat\";\n    BuffId[\"proc:69:bc fill on guard-percent\"] = \"proc:69:bc fill on guard-percent\";\n    BuffId[\"proc:71:bc efficacy reduction\"] = \"proc:71:bc efficacy reduction\";\n    BuffId[\"proc:73:resist-atk down\"] = \"proc:73:resist-atk down\";\n    BuffId[\"proc:73:resist-def down\"] = \"proc:73:resist-def down\";\n    BuffId[\"proc:73:resist-rec down\"] = \"proc:73:resist-rec down\";\n    BuffId[\"proc:75:element squad-scaled attack\"] = \"proc:75:element squad-scaled attack\";\n    BuffId[\"proc:76:extra action\"] = \"proc:76:extra action\";\n    BuffId[\"proc:78:self stat boost-atk\"] = \"proc:78:self stat boost-atk\";\n    BuffId[\"proc:78:self stat boost-def\"] = \"proc:78:self stat boost-def\";\n    BuffId[\"proc:78:self stat boost-rec\"] = \"proc:78:self stat boost-rec\";\n    BuffId[\"proc:78:self stat boost-crit\"] = \"proc:78:self stat boost-crit\";\n    BuffId[\"proc:79:player exp boost\"] = \"proc:79:player exp boost\";\n    BuffId[\"proc:82:resummon\"] = \"proc:82:resummon\";\n    BuffId[\"UNKNOWN_CONDITIONAL_EFFECT_ID\"] = \"UNKNOWN_CONDITIONAL_EFFECT_ID\";\n    BuffId[\"UNKNOWN_CONDITIONAL_BUFF_PARAMS\"] = \"UNKNOWN_CONDITIONAL_BUFF_PARAMS\";\n    BuffId[\"conditional:1:attack buff\"] = \"conditional:1:attack buff\";\n    BuffId[\"conditional:3:defense buff\"] = \"conditional:3:defense buff\";\n    BuffId[\"conditional:5:recovery buff\"] = \"conditional:5:recovery buff\";\n    BuffId[\"conditional:8:gradual heal\"] = \"conditional:8:gradual heal\";\n    BuffId[\"conditional:12:guaranteed ko resistance\"] = \"conditional:12:guaranteed ko resistance\";\n    BuffId[\"conditional:13:elemental attack buff\"] = \"conditional:13:elemental attack buff\";\n    BuffId[\"conditional:14:elemental defense buff\"] = \"conditional:14:elemental defense buff\";\n    BuffId[\"conditional:21:fire mitigation\"] = \"conditional:21:fire mitigation\";\n    BuffId[\"conditional:22:water mitigation\"] = \"conditional:22:water mitigation\";\n    BuffId[\"conditional:23:earth mitigation\"] = \"conditional:23:earth mitigation\";\n    BuffId[\"conditional:24:thunder mitigation\"] = \"conditional:24:thunder mitigation\";\n    BuffId[\"conditional:25:light mitigation\"] = \"conditional:25:light mitigation\";\n    BuffId[\"conditional:26:dark mitigation\"] = \"conditional:26:dark mitigation\";\n    BuffId[\"conditional:36:mitigation\"] = \"conditional:36:mitigation\";\n    BuffId[\"conditional:37:gradual bc fill\"] = \"conditional:37:gradual bc fill\";\n    BuffId[\"conditional:40:spark damage\"] = \"conditional:40:spark damage\";\n    BuffId[\"conditional:72:attack boost-bb\"] = \"conditional:72:attack boost-bb\";\n    BuffId[\"conditional:72:attack boost-sbb\"] = \"conditional:72:attack boost-sbb\";\n    BuffId[\"conditional:72:attack boost-ubb\"] = \"conditional:72:attack boost-ubb\";\n    BuffId[\"conditional:74:add atk down to attack\"] = \"conditional:74:add atk down to attack\";\n    BuffId[\"conditional:75:add def down to attack\"] = \"conditional:75:add def down to attack\";\n    BuffId[\"conditional:84:critical damage\"] = \"conditional:84:critical damage\";\n    BuffId[\"conditional:91:chance ko resistance\"] = \"conditional:91:chance ko resistance\";\n    BuffId[\"conditional:98:thunder barrier\"] = \"conditional:98:thunder barrier\";\n    BuffId[\"conditional:99:light barrier\"] = \"conditional:99:light barrier\";\n    BuffId[\"conditional:132:od fill rate\"] = \"conditional:132:od fill rate\";\n    BuffId[\"conditional:133:heal on hit\"] = \"conditional:133:heal on hit\";\n    BuffId[\"conditional:143:critical damage reduction-base\"] = \"conditional:143:critical damage reduction-base\";\n    BuffId[\"conditional:143:critical damage reduction-buff\"] = \"conditional:143:critical damage reduction-buff\";\n    BuffId[\"conditional:145:elemental weakness damage reduction-base\"] = \"conditional:145:elemental weakness damage reduction-base\";\n    BuffId[\"conditional:145:elemental weakness damage reduction-buff\"] = \"conditional:145:elemental weakness damage reduction-buff\";\n    BuffId[\"conditional:153:chance inflict atk down on hit\"] = \"conditional:153:chance inflict atk down on hit\";\n})(BuffId || (BuffId = {}));\n","import { BuffSource, BuffId, } from './buff-types';\nimport { SpPassiveType, TargetType, TargetArea, } from '../../datamine-types';\n/**\n * @description Helper function for creating an entry to be used in the `sources`\n * property of {@link IBuff}.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Entry in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourceEntryFromContext(context) {\n    return `${context.source}-${context.sourceId}`;\n}\n/**\n * @description Helper function for creating an entries array to be used in the `sources`\n * property of {@link IBuff}. It handles setting the order of the sources.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns List of entries in the format of `<BuffSource>-<ID of Buff Source>`.\n */\nexport function createSourcesFromContext(context) {\n    const resultArray = Array.isArray(context.previousSources)\n        ? context.previousSources.slice()\n        : [];\n    // Ensure that the current source is at the beginning of the array\n    resultArray.unshift(createSourceEntryFromContext(context));\n    return resultArray;\n}\n/**\n * @description Given the conditions in an extra skill effect, normalize them into\n * a simpler object containing the IDs of each condition type.\n * @param effect Extra skill effect to process conditions from.\n * @returns Conditions based on type, otherwise an empty object if no conditions are found.\n */\nexport function processExtraSkillConditions(effect) {\n    const conditions = (effect && Array.isArray(effect.conditions) && effect.conditions) || [];\n    const aggregate = {\n        units: new Set(),\n        items: new Set(),\n        sphereTypes: new Set(),\n        unknowns: new Set(),\n    };\n    conditions.forEach((condition, index) => {\n        if ('sphere category required (raw)' in condition) {\n            aggregate.sphereTypes.add(condition['sphere category required (raw)']);\n        }\n        else if ('item required' in condition) {\n            condition['item required'].forEach((item) => {\n                aggregate.items.add(item);\n            });\n        }\n        else if ('unit required' in condition) {\n            condition['unit required'].forEach((unit) => {\n                aggregate.units.add(`${unit.id}`);\n            });\n        }\n        else {\n            aggregate.unknowns.add(`type:${condition.type_id || index},condition:${condition.condition_id || index}`);\n        }\n    });\n    // filter out properties that have no entries\n    const result = Object.entries(aggregate)\n        .filter((entry) => entry[1].size > 0)\n        .reduce((acc, entry) => {\n        acc[entry[0]] = Array.from(entry[1]);\n        return acc;\n    }, {});\n    return result;\n}\n/**\n * @description Extract the target type and target area of a given passive effect.\n * @param effect Passive effect to extract target data from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns The target data for the given effect and context. There are only two possible values:\n * party (`targetType` is party and `targetArea` is aoe ) and single (`targetType` is self and `targetArea` is single)\n */\nexport function getPassiveTargetData(effect, context) {\n    const isLeaderSkillEffect = context.source === BuffSource.LeaderSkill ||\n        (effect.sp_type === SpPassiveType.EnhancePassive);\n    const isPartyEffect = isLeaderSkillEffect || effect['passive target'] === TargetType.Party;\n    return {\n        targetType: isPartyEffect ? TargetType.Party : TargetType.Self,\n        targetArea: isPartyEffect ? TargetArea.Aoe : TargetArea.Single,\n    };\n}\n/**\n * @description Extract the target type and target area of a given proc effect.\n * @param effect Proc effect to extract target data from.\n * @returns The target data for the given effect and context.\n */\nexport function getProcTargetData(effect) {\n    return {\n        targetArea: effect['target area'],\n        targetType: effect['target type'],\n    };\n}\n/**\n * @description Try to parse the given value into a number or return a value if it is not a number.\n * @param value Value to parse into a number.\n * @param defaultValue Value to return if `value` is not a number; defaults to 0.\n * @returns Parsed value as a number or the `defaultValue` if the value is not a number.\n */\nexport function parseNumberOrDefault(value, defaultValue = 0) {\n    return (value !== null && !isNaN(value)) ? +value : defaultValue;\n}\n/**\n * @description Create an object denoting values that cannot be processed yet. To be used\n * in the `value` property of `IBuff` as needed.\n * @param params Array of values that cannot be processed yet.\n * @param startIndex The first index before which we know how to process an effect's values.\n * @returns Dictionary object where every parameter is keyed by its index in the format of `param_${startIndex + indexInParams}`\n */\nexport function createUnknownParamsValue(params = [], startIndex = 0) {\n    let hasValue = false;\n    const result = params\n        .reduce((acc, value, index) => {\n        if (value && value !== '0') {\n            acc[`param_${startIndex + index}`] = value;\n            hasValue = true;\n        }\n        return acc;\n    }, {});\n    return hasValue ? result : (void 0);\n}\n/**\n * @description Decide whether a given source value is one of the burst types in {@link BuffSource}.\n * @param source Source value to check.\n * @returns Whether the given source value is a burst type. Returns true when the source is determined to\n * be any one of the following: brave burst, super brave burst, ultimate brave burst, bonded brave burst,\n * bonded super brave burst, or bonded dual brave burst.\n */\nexport function buffSourceIsBurstType(source) {\n    return !!source && [\n        BuffSource.BraveBurst, BuffSource.SuperBraveBurst, BuffSource.UltimateBraveBurst,\n        BuffSource.BondedBraveBurst, BuffSource.BondedSuperBraveBurst, BuffSource.DualBraveBurst,\n    ].includes(source);\n}\n/**\n * @description Given an array of parameters, conditionally creata an unknown params value entry.\n * @param extraParams Array of string parameters from an effect.\n * @param startIndex Index to use when generating entries for the unknown params value entry.\n * @param injectionContext Object whose main use is for injecting methods in testing.\n * @returns An unknown params entry if there are extra parameters, undefined otherwise.\n */\nexport function createUnknownParamsEntryFromExtraParams(extraParams, startIndex, injectionContext) {\n    let unknownParams;\n    if (extraParams && extraParams.length > 0) {\n        unknownParams = ((injectionContext && injectionContext.createUnknownParamsValue) || createUnknownParamsValue)(extraParams, startIndex);\n    }\n    return unknownParams;\n}\n/**\n * @description Helper function for creating a `NO_PARAMS_SPECIFIED` entry from a given context.\n * @param context An effect processing context containing information created while parsing an effect.\n * @returns A single buff denoting a `NO_PARAMS_SPECIFIED` entry.\n */\nexport function createNoParamsEntry({ originalId, sources }) {\n    return {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        originalId,\n        sources,\n    };\n}\n","import { UnitElement, Ailment, TargetArea, TargetType } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { getProcTargetData, createSourcesFromContext, parseNumberOrDefault, buffSourceIsBurstType, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from './_helpers';\nlet mapping;\n/**\n * @description Retrieve the proc-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of proc IDs to functions.\n */\nexport function getProcEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of proc effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const UNKNOWN_PROC_PARAM_EFFECT_KEY = 'unknown proc param';\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const NON_ZERO_ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const targetData = ((injectionContext && injectionContext.getProcTargetData) || getProcTargetData)(effect);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const effectDelay = effect['effect delay time(ms)/frame'];\n        return { targetData, sources, effectDelay };\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const splitEffectWithUnknownProcParamsProperty = (effect) => {\n        const rawParams = effect.params || effect[UNKNOWN_PROC_PARAM_EFFECT_KEY] || '';\n        return splitEffectParams({ params: rawParams });\n    };\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, effectDelay, }) => (Object.assign({ id: BuffId.UNKNOWN_PROC_BUFF_PARAMS, originalId,\n        effectDelay,\n        sources, value: unknownParams }, targetData));\n    const createTurnDurationEntry = ({ originalId, sources, buffs, duration, targetData, }) => (Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n        sources, value: {\n            buffs,\n            duration,\n        } }, targetData));\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, effectDelay, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                effectDelay,\n            }));\n        }\n    };\n    /**\n     * @description Decide whether the effect being parsed is a turn duration buff. This should only be\n     * checked if all other known values in the effect are 0.\n     * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n     * @param turnDuration Parsed turn duration value to check.\n     * @param injectionContext Object whose main use is for injecting methods in testing.\n     * @returns True if the turn duration value is non-zero and the source type is not a burst type.\n     */\n    const isTurnDurationBuff = (context, turnDuration, injectionContext) => {\n        let result = turnDuration !== 0;\n        if (result) {\n            result = !((injectionContext && injectionContext.buffSourceIsBurstType) || buffSourceIsBurstType)(context.source);\n        }\n        return result;\n    };\n    /**\n     * @description Helper function to get attack information common across most attacks from the conversion context.\n     * @param context Given context that may contain attack information like damage frames.\n     * @returns Extracted attack information from the context (with defaults where applicable).\n     */\n    const getAttackInformationFromContext = (context) => {\n        const hits = parseNumberOrDefault(context.damageFrames && context.damageFrames.hits || 0);\n        const distribution = parseNumberOrDefault(context.damageFrames && context.damageFrames['hit dmg% distribution (total)']);\n        return {\n            hits,\n            distribution,\n        };\n    };\n    const parseProcWithSingleNumericalParameterAndTurnDuration = ({ effect, context, injectionContext, effectValueKey, effectTurnDurationKey, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), buffId, originalId, }) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            value = parseParamValue(rawValue);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect[effectValueKey]);\n            turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [buffId],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    };\n    const parseProcWithNumericalValueRangeAndChanceAndTurnDuration = ({ effect, context, injectionContext, originalId, buffId, effectKeyLow, effectKeyHigh, effectKeyChance, effectTurnDurationKey, buffKeyLow, buffKeyHigh, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateConditions, }) => {\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let valueLow = 0;\n        let valueHigh = 0;\n        let chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValueLow, rawValueHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            valueLow = parseParamValue(rawValueLow);\n            valueHigh = parseParamValue(rawValueHigh);\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            valueLow = parseNumberOrDefault(effect[effectKeyLow]);\n            valueHigh = parseNumberOrDefault(effect[effectKeyHigh]);\n            chance = parseNumberOrDefault(effect[effectKeyChance]);\n            turnDuration = parseNumberOrDefault(effect[effectTurnDurationKey]);\n        }\n        const hasAnyValues = valueLow !== 0 || valueHigh !== 0 || chance !== 0;\n        const results = [];\n        if (hasAnyValues) {\n            const entry = Object.assign({ id: buffId, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    [buffKeyLow]: valueLow,\n                    [buffKeyHigh]: valueHigh,\n                    chance,\n                } }, targetData);\n            if (generateConditions) {\n                entry.conditions = generateConditions();\n            }\n            results.push(entry);\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [buffId],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:1:attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'healerRec%': 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            let recX, recY;\n            let extraParams;\n            [params.healLow, params.healHigh, recX, recY, ...extraParams] = splitEffectParams(effect);\n            params['healerRec%'] = ((100 + parseNumberOrDefault(recX)) * (1 + parseNumberOrDefault(recY) / 100)) / 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['heal low'];\n            params.healHigh = effect['heal high'];\n            params['healerRec%'] = effect['rec added% (from healer)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const results = [];\n        if (params.healHigh !== 0 || params.healLow !== 0) {\n            results.push(Object.assign({ id: 'proc:2:burst heal', originalId,\n                sources,\n                effectDelay, value: params }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            healLow: '0',\n            healHigh: '0',\n            'targetRec%': 0,\n            turnDuration: '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let rec;\n            let extraParams;\n            [params.healLow, params.healHigh, rec, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params['targetRec%'] = (1 + parseNumberOrDefault(rec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.healLow = effect['gradual heal low'];\n            params.healHigh = effect['gradual heal high'];\n            params['targetRec%'] = effect['rec added% (from target)'];\n            params.turnDuration = effect['gradual heal turns (8)'];\n        }\n        // ensure every property is a number\n        Object.keys(params).forEach((key) => {\n            params[key] = parseNumberOrDefault(params[key]);\n        });\n        const hasAnyHealValues = params.healLow !== 0 || params.healHigh !== 0;\n        const results = [];\n        if (hasAnyHealValues) {\n            results.push(Object.assign({ id: 'proc:3:gradual heal', originalId,\n                sources,\n                effectDelay, duration: params.turnDuration, value: {\n                    healLow: params.healLow,\n                    healHigh: params.healHigh,\n                    'targetRec%': params['targetRec%'],\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:3:gradual heal'],\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('bb bc fill' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill']);\n            }\n            if ('bb bc fill%' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill%']);\n            }\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:bc fill-flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:4:bc fill-percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            element: BuffConditionElement.All,\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    params[statType] = effect[effectKey];\n                }\n            });\n            params.turnDuration = effect['buff turns'];\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    const buffEntry = Object.assign({ id: `proc:5:regular or elemental-${statKey}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData);\n                    if (params.element !== BuffConditionElement.All) {\n                        buffEntry.conditions = {\n                            targetElements: [params.element],\n                        };\n                    }\n                    results.push(buffEntry);\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:5:regular or elemental-${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('6', (effect, context, injectionContext) => {\n        const originalId = '6';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            turnDuration: '0',\n        };\n        const dropRateProperties = ['bc', 'hc', 'item'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.bc, params.hc, params.item, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            params.bc = effect['bc drop rate% buff (10)'];\n            params.hc = effect['hc drop rate% buff (9)'];\n            params.item = effect['item drop rate% buff (11)'];\n            params.turnDuration = effect['drop buff rate turns'];\n        }\n        dropRateProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyRates = dropRateProperties.some((key) => params[key] !== 0);\n        const results = [];\n        if (hasAnyRates) {\n            dropRateProperties.forEach((key) => {\n                const value = params[key];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:6:drop boost-${key}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: dropRateProperties.map((key) => `proc:6:drop boost-${key}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('7', (effect, context, injectionContext) => {\n        const originalId = '7';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHpPercent = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, ...extraParams] = splitEffectParams(effect);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoveredHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:7:guaranteed ko resistance', originalId,\n                sources,\n                effectDelay, value: recoveredHpPercent }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const originalId = '8';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatHpBoost = 0;\n        let percentHpBoost = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatBoost, rawPercentBoost, ...extraParams] = splitEffectParams(effect);\n            flatHpBoost = parseNumberOrDefault(rawFlatBoost);\n            percentHpBoost = parseNumberOrDefault(rawPercentBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('max hp increase' in effect) {\n                flatHpBoost = parseNumberOrDefault(effect['max hp increase']);\n            }\n            if ('max hp% increase' in effect) {\n                percentHpBoost = parseNumberOrDefault(effect['max hp% increase']);\n            }\n        }\n        const results = [];\n        if (flatHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:max hp boost-flat', originalId,\n                sources,\n                effectDelay, value: flatHpBoost }, targetData));\n        }\n        if (percentHpBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:8:max hp boost-percent', originalId,\n                sources,\n                effectDelay, value: percentHpBoost }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        const originalId = '9';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const STAT_TYPE_MAPPING = {\n            0: 'atk',\n            1: 'def',\n            2: 'rec',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const params = {\n            element: BuffConditionElement.All,\n            statReductionEntries: [],\n            turnDuration: 0,\n        };\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, statType1, value1, procChance1, statType2, value2, procChance2, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            params.element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            params.turnDuration = parseNumberOrDefault(rawTurnDuration);\n            [\n                [statType1, value1, procChance1],\n                [statType2, value2, procChance2],\n            ].forEach(([rawStatType, rawValue, rawProcChance]) => {\n                const statType = parseNumberOrDefault(rawStatType) - 1;\n                const value = parseNumberOrDefault(rawValue);\n                const chance = parseNumberOrDefault(rawProcChance);\n                if (statType === 3) { // all stats\n                    params.statReductionEntries.push(...coreStatProperties.map((stat) => ({\n                        stat,\n                        value,\n                        chance,\n                    })));\n                }\n                else {\n                    params.statReductionEntries.push({\n                        stat: STAT_TYPE_MAPPING[statType] || 'unknown',\n                        value,\n                        chance,\n                    });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const effectElement = effect['element buffed'];\n            if (effectElement === 'all') {\n                params.element = BuffConditionElement.All;\n            }\n            else if (!effectElement) {\n                params.element = BuffConditionElement.Unknown;\n            }\n            else {\n                params.element = effectElement;\n            }\n            ['buff #1', 'buff #2'].forEach((buffKey) => {\n                const entry = effect[buffKey];\n                if (entry) {\n                    const chance = parseNumberOrDefault(entry['proc chance%']);\n                    const keys = Object.keys(entry);\n                    coreStatProperties.forEach((statType) => {\n                        const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                        if (effectKey) {\n                            params.statReductionEntries.push({\n                                stat: statType,\n                                value: parseNumberOrDefault(entry[effectKey]),\n                                chance,\n                            });\n                        }\n                    });\n                }\n            });\n            params.turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        let hasAnyValues = false;\n        params.statReductionEntries.forEach(({ stat, value, chance }) => {\n            if (value !== 0 || chance !== 0) {\n                hasAnyValues = true;\n                const buffEntry = Object.assign({ id: `proc:9:regular or elemental reduction-${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: params.turnDuration, value: { value, chance } }, targetData);\n                if (params.element !== BuffConditionElement.All) {\n                    buffEntry.conditions = {\n                        targetElements: [params.element],\n                    };\n                }\n                results.push(buffEntry);\n            }\n        });\n        if (!hasAnyValues && isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:9:regular or elemental reduction-${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        const originalId = '10';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 8);\n            const extraParams = splitParams.slice(8);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                if (`remove ${ailment}` in effect) { // mainly for items\n                    curedAilments.push(ailment);\n                }\n            });\n            if ('remove all status ailments' in effect) {\n                curedAilments.push(Ailment.Unknown); // generic value for skills; unknown at a glance which ailments are cured\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:10:cleanse-${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            let params = splitEffectParams(effect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:11:chance inflict-${ailment}`, originalId,\n            sources,\n            effectDelay, value: chance }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let reviveToHp = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawReviveToHp, ...extraParams] = splitEffectParams(effect);\n            reviveToHp = parseNumberOrDefault(rawReviveToHp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            reviveToHp = parseNumberOrDefault(effect['revive to hp%']);\n        }\n        const results = [Object.assign({ id: 'proc:12:guaranteed revive', originalId,\n                sources,\n                effectDelay, value: reviveToHp }, targetData)];\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const originalId = '13';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hits = 0;\n        const { distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawHits;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], rawHits, ...extraParams] = splitEffectParams(effect);\n            hits = parseNumberOrDefault(rawHits);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            hits = parseNumberOrDefault(effect.hits);\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push({\n                id: 'proc:13:random attack',\n                originalId,\n                sources,\n                effectDelay,\n                value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }),\n                targetType: targetData.targetType,\n                targetArea: TargetArea.Random,\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n            'drainLow%': '0',\n            'drainHigh%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], params['drainLow%'], params['drainHigh%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n            params['drainLow%'] = effect['hp drain% low'];\n            params['drainHigh%'] = effect['hp drain% high'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:14:hp absorb attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let mitigation = 0;\n        let element;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawMitigation, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            mitigation = parseNumberOrDefault(rawMitigation);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            const mitigationKey = Object.keys(effect).find((k) => k.startsWith('mitigate'));\n            element = (mitigationKey && Object.values(ELEMENT_MAPPING).find((e) => mitigationKey.includes(e))) || BuffConditionElement.Unknown;\n            if (mitigationKey) {\n                mitigation = parseNumberOrDefault(effect[mitigationKey]);\n            }\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (mitigation !== 0) {\n            results.push(Object.assign({ id: `proc:16:mitigate-${element}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:16:mitigate-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        const originalId = '17';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('resist'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    resistances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['resist status ails turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:17:resist-${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:17:resist-${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('18', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'dmg% reduction',\n            effectTurnDurationKey: 'dmg% reduction turns (36)',\n            buffId: 'proc:18:mitigation',\n            originalId: '18',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'increase bb gauge gradual',\n            effectTurnDurationKey: 'increase bb gauge gradual turns (37)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'proc:19:gradual bc fill',\n            originalId: '19',\n        });\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            originalId: '20',\n            buffId: 'proc:20:bc fill on hit',\n            effectKeyLow: 'bc fill when attacked low',\n            effectKeyHigh: 'bc fill when attacked high',\n            effectKeyChance: 'bc fill when attacked%',\n            effectTurnDurationKey: 'bc fill when attacked turns (38)',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateConditions: () => ({ whenAttacked: true }),\n        });\n    });\n    map.set('22', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'defense% ignore',\n            effectTurnDurationKey: 'defense% ignore turns (39)',\n            buffId: 'proc:22:defense ignore',\n            originalId: '22',\n        });\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let value = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            value = parseNumberOrDefault(params[0]);\n            turnDuration = parseNumberOrDefault(params[6]);\n            const extraParams = ['0', ...params.slice(1, 6), '0', ...params.slice(7)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['spark dmg% buff (40)']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'proc:23:spark damage', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:23:spark damage'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        const originalId = '24';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let turnDuration = 0;\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawConvertedStat, rawTurnDuration;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            const rawConvertedStat = effect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            const keys = Object.keys(effect);\n            coreStatProperties.forEach((statType) => {\n                const effectKey = keys.find((k) => k.startsWith(`${statType}% buff`));\n                if (effectKey) {\n                    stats[statType] = effect[effectKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['% converted turns']);\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:24:converted-${stat}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: {\n                        convertedStat,\n                        value,\n                    } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:24:converted-${statKey}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        const originalId = '26';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let hitIncreasePerHit = 0, extraHitDamage = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3, 7), '0', ...params.slice(8)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(effect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(effect['extra hits dmg%']);\n            turnDuration = parseNumberOrDefault(effect['hit increase buff turns (50)']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'proc:26:hit count boost', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:26:hit count boost'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        const originalId = '27';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'hpDamageLow%': '0',\n            'hpDamageHigh%': '0',\n            'hpDamageChance%': '0',\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['hpDamageLow%'], params['hpDamageHigh%'], params['hpDamageChance%'], params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else {\n            params['hpDamageLow%'] = effect['hp% damage low'];\n            params['hpDamageHigh%'] = effect['hp% damage high'];\n            params['hpDamageChance%'] = effect['hp% damage chance%'];\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:27:proportional attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        let value = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            value = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(effect['fixed damage']);\n        }\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || value !== 0) {\n            const entry = Object.assign({ id: 'proc:28:fixed attack', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (value !== 0) {\n                entry.value.value = value;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        const originalId = '29';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let attackElements = [];\n        let unknownParams;\n        if (effect.params) {\n            let element1, element2, element3;\n            let extraParams;\n            [element1, element2, element3, params['atk%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            [element1, element2, element3].forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    attackElements.push(ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n                unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n            });\n        }\n        else {\n            if (Array.isArray(effect['bb elements'])) {\n                attackElements = effect['bb elements'].slice();\n            }\n            params['atk%'] = effect['bb atk%'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || attackElements.length > 0 || Object.keys(filteredValue).length > 0) {\n            const entry = Object.assign({ id: 'proc:29:multi-element attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData);\n            if (attackElements.length > 0) {\n                entry.value.elements = attackElements;\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let elements = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            elements = params\n                .slice(0, 6)\n                .filter((p) => p !== '0')\n                .map((p) => ELEMENT_MAPPING[p] || BuffConditionElement.Unknown);\n            turnDuration = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            if ('elements added' in effect) {\n                if (Array.isArray(effect['elements added'])) {\n                    elements = effect['elements added'];\n                }\n                else {\n                    elements = [BuffConditionElement.Unknown];\n                }\n            }\n            turnDuration = parseNumberOrDefault(effect['elements added turns']);\n        }\n        const results = [];\n        const validElements = Object.values(ELEMENT_MAPPING).filter((e) => e !== BuffConditionElement.All);\n        if (elements.length > 0) {\n            elements.forEach((inputElement) => {\n                const sanitizedElement = validElements.includes(inputElement) ? inputElement : BuffConditionElement.Unknown;\n                results.push(Object.assign({ id: `proc:30:add element-${sanitizedElement}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration }, targetData));\n            });\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: validElements.concat([BuffConditionElement.Unknown]).map((e) => `proc:30:add element-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            if ('increase bb gauge' in effect) {\n                flatFill = parseNumberOrDefault(effect['increase bb gauge']);\n            }\n            // NOTE: Deathmax's datamine only recognizes one value. We think the second parameter is percent fill\n            // due to it being tied to a Tilith skill (a unit who's known for BC filling skillsets)\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:bc fill-flat', originalId,\n                sources,\n                effectDelay, value: flatFill }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:31:bc fill-percent', originalId,\n                sources,\n                effectDelay, value: percentFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        const originalId = '32';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let element;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, ...extraParams] = splitEffectParams(effect);\n            if (rawElement && rawElement !== '0') {\n                element = NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            const effectElement = effect['set attack element attribute'];\n            if (effectElement) {\n                const sanitizedElement = Object.values(NON_ZERO_ELEMENT_MAPPING).find((e) => effectElement === e);\n                if (sanitizedElement && sanitizedElement !== BuffConditionElement.All) {\n                    element = sanitizedElement;\n                }\n                else {\n                    element = BuffConditionElement.Unknown;\n                }\n            }\n        }\n        const results = [];\n        if (element) {\n            results.push(Object.assign({ id: `proc:32:element shift-${element}`, originalId,\n                sources,\n                effectDelay, value: true }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(effect);\n            chance = parseNumberOrDefault(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(effect['clear buff chance%']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:33:buff wipe', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        const originalId = '34';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatDrainLow = 0, flatDrainHigh = 0;\n        let percentDrainLow = 0, percentDrainHigh = 0;\n        let chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatLow, rawFlatHigh, rawPercentLow, rawPercentHigh, rawChance, ...extraParams] = splitEffectParams(effect);\n            flatDrainLow = parseNumberOrDefault(rawFlatLow) / 100;\n            flatDrainHigh = parseNumberOrDefault(rawFlatHigh) / 100;\n            percentDrainLow = parseNumberOrDefault(rawPercentLow);\n            percentDrainHigh = parseNumberOrDefault(rawPercentHigh);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            flatDrainLow = parseNumberOrDefault(effect['base bb gauge reduction low']);\n            flatDrainHigh = parseNumberOrDefault(effect['base bb gauge reduction high']);\n            percentDrainLow = parseNumberOrDefault(effect['bb gauge% reduction low']);\n            percentDrainHigh = parseNumberOrDefault(effect['bb gauge% reduction high']);\n            chance = parseNumberOrDefault(effect['bb gauge reduction chance%']);\n        }\n        const results = [];\n        if (flatDrainLow !== 0 || flatDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:bc drain-flat', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: flatDrainLow,\n                    drainHigh: flatDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        if (percentDrainLow !== 0 || percentDrainHigh !== 0) {\n            results.push(Object.assign({ id: 'proc:34:bc drain-percent', originalId,\n                sources,\n                effectDelay, value: {\n                    drainLow: percentDrainLow,\n                    drainHigh: percentDrainHigh,\n                    chance,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'invalidate LS chance%',\n            effectTurnDurationKey: 'invalidate LS turns (60)',\n            buffId: 'proc:36:ls lock',\n            originalId: '36',\n        });\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [summonGroup, summonId = '', rawPositionX, rawPositionY, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const positionX = parseNumberOrDefault(rawPositionX);\n        const positionY = parseNumberOrDefault(rawPositionY);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const results = [];\n        if (summonGroup || summonId) {\n            results.push(Object.assign({ id: 'proc:37:summon', originalId,\n                sources,\n                effectDelay, value: {\n                    summonGroup,\n                    summonId,\n                    positionX,\n                    positionY,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('38', (effect, context, injectionContext) => {\n        const originalId = '38';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const curedAilments = [];\n        let unknownParams;\n        if (effect.params) {\n            const splitParams = splitEffectParams(effect);\n            const knownParams = splitParams.slice(0, 9);\n            const extraParams = splitParams.slice(9);\n            knownParams\n                .filter((p) => p !== '0')\n                .forEach((param) => {\n                curedAilments.push(AILMENT_MAPPING[param] || Ailment.Unknown);\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else if (Array.isArray(effect['ailments cured'])) {\n            const effectAilmentsCured = effect['ailments cured'];\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                const effectKey = ailment !== Ailment.Weak ? ailment : 'weaken';\n                if (effectAilmentsCured.includes(effectKey)) {\n                    curedAilments.push(ailment);\n                }\n            });\n            if (effectAilmentsCured.length > curedAilments.length) {\n                const unknownAilmentCount = effectAilmentsCured.length - curedAilments.length;\n                for (let i = 0; i < unknownAilmentCount; ++i) {\n                    curedAilments.push(Ailment.Unknown);\n                }\n            }\n        }\n        const results = curedAilments.map((ailment) => (Object.assign({ id: `proc:38:cleanse-${ailment}`, originalId,\n            sources,\n            effectDelay, value: true }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('39', (effect, context, injectionContext) => {\n        const originalId = '39';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const elements = [];\n        let mitigation = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            const rawElementsMitigated = params.slice(0, 6);\n            mitigation = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            rawElementsMitigated.forEach((rawElement) => {\n                if (rawElement !== '0') {\n                    elements.push(NON_ZERO_ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            Object.values(NON_ZERO_ELEMENT_MAPPING).forEach((element) => {\n                if (effect[`mitigate ${element} attacks`]) {\n                    elements.push(element);\n                }\n            });\n            mitigation = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks']);\n            turnDuration = parseNumberOrDefault(effect['dmg% mitigation for elemental attacks buff turns']);\n        }\n        const results = [];\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                results.push(Object.assign({ id: `proc:39:mitigate-${element}`, originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: mitigation }, targetData));\n            });\n        }\n        else if (mitigation !== 0) {\n            results.push(Object.assign({ id: 'proc:39:mitigate-unknown', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: mitigation }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:39:mitigate-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            for (let index = 0; index < 8; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n            turnDuration = parseNumberOrDefault(params[8]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(9), 9, injectionContext);\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken% buff';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = `${ailment} buff`;\n                }\n                else {\n                    effectKey = `${ailment}% buff`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(effect[effectKey]),\n                    });\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedAilments.map(({ ailment, chance }) => (Object.assign({ id: `proc:40:add ailment-${ailment}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: chance }, targetData)));\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                duration: turnDuration,\n                buffs: Object.values(AILMENT_MAPPING).concat([Ailment.Unknown]).map((a) => `proc:40:add ailment-${a}`),\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawModLow, rawModHigh, rawFlatAtk, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const params = {\n            'atkLow%': rawModLow,\n            'atkHigh%': rawModHigh,\n            flatAtk: rawFlatAtk,\n        };\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        let results;\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results = [\n                Object.assign({ id: 'proc:42:sacrificial attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData),\n                {\n                    id: 'proc:42:instant death',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: true,\n                    targetArea: TargetArea.Single,\n                    targetType: TargetType.Self,\n                },\n            ];\n        }\n        else {\n            results = [];\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        const originalId = '43';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let overdriveFill = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawOverdriveFill, ...extraParams] = splitEffectParams(effect);\n            overdriveFill = parseNumberOrDefault(rawOverdriveFill);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            overdriveFill = parseNumberOrDefault(effect['increase od gauge%']);\n        }\n        const results = [];\n        if (overdriveFill !== 0) {\n            results.push(Object.assign({ id: 'proc:43:burst od fill', originalId,\n                sources,\n                effectDelay, value: overdriveFill }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const damageParams = {\n            'atk%': '0',\n            flatAtk: '0',\n            'dmg%': '0',\n        };\n        let affectsElement = false, unitIndex = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawAffectsElement, rawUnitIndex, rawTurnDuration;\n            [damageParams['atk%'], damageParams.flatAtk, damageParams['dmg%'], rawAffectsElement, rawUnitIndex, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            affectsElement = rawAffectsElement !== '1'; // NOTE: not sure about this value\n            unitIndex = parseNumberOrDefault(rawUnitIndex);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            damageParams['atk%'] = effect['dot atk%'];\n            damageParams.flatAtk = effect['dot flat atk'];\n            damageParams['dmg%'] = effect['dot dmg%'];\n            affectsElement = !!(effect['dot element affected']);\n            unitIndex = parseNumberOrDefault(effect['dot unit index']);\n            turnDuration = parseNumberOrDefault(effect['dot turns (71)']);\n        }\n        const filteredDamageParams = Object.entries(damageParams)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (Object.keys(filteredDamageParams).length > 0) {\n            results.push(Object.assign({ id: 'proc:44:damage over time', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: Object.assign(Object.assign({}, filteredDamageParams), { affectsElement,\n                    unitIndex }) }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:44:damage over time'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('45', (effect, context, injectionContext) => {\n        const originalId = '45';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let bb = 0, sbb = 0, ubb = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            bb = parseNumberOrDefault(rawBb);\n            sbb = parseNumberOrDefault(rawSbb);\n            ubb = parseNumberOrDefault(rawUbb);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            bb = parseNumberOrDefault(effect['bb atk% buff']);\n            sbb = parseNumberOrDefault(effect['sbb atk% buff']);\n            ubb = parseNumberOrDefault(effect['ubb atk% buff']);\n            turnDuration = parseNumberOrDefault(effect['buff turns (72)']);\n        }\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:attack boost-bb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:attack boost-sbb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'proc:45:attack boost-ubb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: ubb }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:45:attack boost-${type}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('46', (effect, context, injectionContext) => {\n        const originalId = '46';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawHpLow, rawHpHigh, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const hpLow = parseNumberOrDefault(rawHpLow);\n        const hpHigh = parseNumberOrDefault(rawHpHigh);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (hpLow !== 0 || hpHigh !== 0 || hits !== 0 || distribution !== 0) {\n            const entry = Object.assign({ id: 'proc:46:non-lethal proportional attack', originalId,\n                sources,\n                effectDelay, value: {\n                    hits,\n                    distribution,\n                } }, targetData);\n            if (hpLow !== 0 || hpHigh !== 0) {\n                entry.value = {\n                    'hpDamageLow%': hpLow,\n                    'hpDamageHigh%': hpHigh,\n                    hits,\n                    distribution,\n                };\n            }\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('47', (effect, context, injectionContext) => {\n        const originalId = '47';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'baseAtk%': '0',\n            'maxAddedAtk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let proportionalMode = 'unknown';\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawMaxAttackValue, rawProportionalMode;\n            [params['baseAtk%'], rawMaxAttackValue, rawProportionalMode, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue) - parseNumberOrDefault(params['baseAtk%']);\n            proportionalMode = rawProportionalMode === '1' ? 'lost' : 'remaining';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['baseAtk%'] = effect['bb base atk%'];\n            params['maxAddedAtk%'] = effect['bb added atk% based on hp'];\n            proportionalMode = effect['bb added atk% proportional to hp'] || 'unknown';\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:47:hp scaled attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { proportionalMode,\n                    hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('48', (effect, context, injectionContext) => {\n        const originalId = '48';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const [rawBasePercentHpLow, rawBasePercentHpHigh, rawCurrentPercentHpLow, rawCurrentPercentHpHigh, rawFixedDamage, rawChance, rawIsLethal, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const basePercentHpLow = parseNumberOrDefault(rawBasePercentHpLow);\n        const basePercentHpHigh = parseNumberOrDefault(rawBasePercentHpHigh);\n        const currentPercentHpLow = parseNumberOrDefault(rawCurrentPercentHpLow);\n        const currentPercentHpHigh = parseNumberOrDefault(rawCurrentPercentHpHigh);\n        const fixedDamage = parseNumberOrDefault(rawFixedDamage);\n        const chance = parseNumberOrDefault(rawChance);\n        const isLethal = rawIsLethal === '1';\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        /**\n         * Current assumption is that each set of parameters results in a separate attack\n         * due to no known skills having more than one of each variant.\n         */\n        const results = [];\n        const createAttackOfType = (type, valueProperties) => (Object.assign({ id: `proc:48:piercing attack-${type}`, originalId,\n            sources,\n            effectDelay, value: Object.assign(Object.assign({}, valueProperties), { isLethal,\n                chance,\n                hits,\n                distribution }) }, targetData));\n        if (basePercentHpLow !== 0 || basePercentHpHigh !== 0) {\n            results.push(createAttackOfType('base', {\n                'hpDamageLow%': basePercentHpLow,\n                'hpDamageHigh%': basePercentHpHigh,\n            }));\n        }\n        if (currentPercentHpLow !== 0 || currentPercentHpHigh !== 0) {\n            results.push(createAttackOfType('current', {\n                'hpDamageLow%': currentPercentHpLow,\n                'hpDamageHigh%': currentPercentHpHigh,\n            }));\n        }\n        if (fixedDamage !== 0) {\n            results.push(createAttackOfType('fixed', {\n                value: fixedDamage,\n            }));\n        }\n        if (results.length === 0 && (hits !== 0 || distribution !== 0)) {\n            results.push(createAttackOfType('unknown', {}));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('49', (effect, context, injectionContext) => {\n        const originalId = '49';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawChance, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const chance = parseNumberOrDefault(rawChance);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:49:chance instant death', originalId,\n                sources,\n                effectDelay, value: chance }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('50', (effect, context, injectionContext) => {\n        const originalId = '50';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawDamageLow, rawDamageHigh, rawChance, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const reflectedDamageLow = parseNumberOrDefault(rawDamageLow);\n        const reflectedDamageHigh = parseNumberOrDefault(rawDamageHigh);\n        const chance = parseNumberOrDefault(rawChance);\n        const turnDuration = parseNumberOrDefault(rawTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const hasAnyRangeValues = reflectedDamageLow !== 0 || reflectedDamageHigh !== 0;\n        const results = [];\n        if (hasAnyRangeValues) {\n            results.push(Object.assign({ id: 'proc:50:chance damage reflect', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: {\n                    'reflectedDamageLow%': reflectedDamageLow,\n                    'reflectedDamageHigh%': reflectedDamageHigh,\n                    chance,\n                } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:50:chance damage reflect'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('51', (effect, context, injectionContext) => {\n        const originalId = '51';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedReductions = [];\n        let debuffTurnDuration = 0, turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            [\n                { type: Ailment.AttackReduction, reductionValue: parseNumberOrDefault(params[0]), chance: parseNumberOrDefault(params[3]) },\n                { type: Ailment.DefenseReduction, reductionValue: parseNumberOrDefault(params[1]), chance: parseNumberOrDefault(params[4]) },\n                { type: Ailment.RecoveryReduction, reductionValue: parseNumberOrDefault(params[2]), chance: parseNumberOrDefault(params[5]) },\n            ].forEach(({ type, reductionValue, chance }) => {\n                if (reductionValue !== 0 || chance !== 0) {\n                    inflictedReductions.push({ type, reductionValue, chance });\n                }\n            });\n            debuffTurnDuration = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            [\n                { type: Ailment.AttackReduction, reductionValueKey: 'inflict atk% debuff (2)', chanceKey: 'inflict atk% debuff chance% (74)' },\n                { type: Ailment.DefenseReduction, reductionValueKey: 'inflict def% debuff (4)', chanceKey: 'inflict def% debuff chance% (75)' },\n                { type: Ailment.RecoveryReduction, reductionValueKey: 'inflict rec% debuff (6)', chanceKey: 'inflict rec% debuff chance% (76)' },\n            ].forEach(({ type, reductionValueKey, chanceKey }) => {\n                const reductionValue = parseNumberOrDefault(effect[reductionValueKey]);\n                const chance = parseNumberOrDefault(effect[chanceKey]);\n                if (reductionValue !== 0 || chance !== 0) {\n                    inflictedReductions.push({ type, reductionValue, chance });\n                }\n            });\n            debuffTurnDuration = parseNumberOrDefault(effect['stat% debuff turns']);\n            turnDuration = parseNumberOrDefault(effect['buff turns']);\n        }\n        const results = inflictedReductions.map(({ type, reductionValue, chance }) => (Object.assign({ id: `proc:51:add to attack-${type}`, originalId,\n            sources,\n            effectDelay, duration: turnDuration, value: {\n                reductionValue,\n                chance,\n                debuffTurnDuration,\n            } }, targetData)));\n        if (results.length === 0 && (isTurnDurationBuff(context, turnDuration, injectionContext) || isTurnDurationBuff(context, debuffTurnDuration, injectionContext))) {\n            // manually create turn duration buff to account for debuff turn duration\n            results.push(Object.assign({ id: BuffId.TURN_DURATION_MODIFICATION, originalId,\n                sources, value: {\n                    buffs: [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction].map((a) => `proc:51:add to attack-${a}`),\n                    duration: turnDuration,\n                    debuffTurnDuration: debuffTurnDuration,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('52', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'bb gauge fill rate% buff',\n            effectTurnDurationKey: 'buff turns (77)',\n            buffId: 'proc:52:bc efficacy',\n            originalId: '52',\n        });\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        const originalId = '53';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n        const inflictionChances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    inflictionChances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['counter inflict ailment turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(inflictionChances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:53:inflict on hit-${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration, conditions: { whenAttacked: true } }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:53:inflict on hit-${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('54', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'crit multiplier%',\n            effectTurnDurationKey: 'buff turns (84)',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n            buffId: 'proc:54:critical damage boost',\n            originalId: '54',\n        });\n    });\n    map.set('55', (effect, context, injectionContext) => {\n        const originalId = '55';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let elements;\n        let damageBoost = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const params = splitEffectParams(effect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => NON_ZERO_ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            damageBoost = parseNumberOrDefault(params[6]) * 100;\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            elements = Object.values(NON_ZERO_ELEMENT_MAPPING).filter((element) => !!effect[`${element} units do extra elemental weakness dmg`]);\n            damageBoost = parseNumberOrDefault(effect['elemental weakness multiplier%']);\n            turnDuration = parseNumberOrDefault(effect['elemental weakness buff turns']);\n        }\n        let results = [];\n        if (damageBoost !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `proc:55:elemental weakness damage-${element}`, originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: damageBoost }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'proc:55:elemental weakness damage-unknown', originalId,\n                    sources,\n                    effectDelay, duration: turnDuration, value: damageBoost }, targetData));\n            }\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: Object.values(NON_ZERO_ELEMENT_MAPPING).concat([BuffConditionElement.Unknown]).map((e) => `proc:55:elemental weakness damage-${e}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('56', (effect, context, injectionContext) => {\n        const originalId = '56';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let chance = 0, recoveredHpPercent = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawChance, rawRecoverHp, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            chance = parseNumberOrDefault(rawChance);\n            recoveredHpPercent = parseNumberOrDefault(rawRecoverHp);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            chance = parseNumberOrDefault(effect['angel idol recover chance%']);\n            recoveredHpPercent = parseNumberOrDefault(effect['angel idol recover hp%']);\n            turnDuration = parseNumberOrDefault(effect['angel idol buff turns (91)']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:56:chance ko resistance', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: { 'recoveredHp%': recoveredHpPercent, chance } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:56:chance ko resistance'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('57', (effect, context, injectionContext) => {\n        const originalId = '57';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let bcBaseResist = 0, bcBuffResist = 0;\n        let hcBaseResist = 0, hcBuffResist = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawBcBaseResist, rawBcBuffResist, rawHcBaseResist, rawHcBuffResist, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            bcBaseResist = parseNumberOrDefault(rawBcBaseResist);\n            bcBuffResist = parseNumberOrDefault(rawBcBuffResist);\n            hcBaseResist = parseNumberOrDefault(rawHcBaseResist);\n            hcBuffResist = parseNumberOrDefault(rawHcBuffResist);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            // Deathmax's datamine doesn't parse HC drop resistance\n            bcBaseResist = parseNumberOrDefault(effect['base bc drop% resist buff']);\n            bcBuffResist = parseNumberOrDefault(effect['buffed bc drop% resist buff']);\n            turnDuration = parseNumberOrDefault(effect['bc drop% resist buff turns (92)']);\n        }\n        const results = [];\n        if (bcBaseResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:bc drop resistance-base', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bcBaseResist }, targetData));\n        }\n        if (bcBuffResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:bc drop resistance-buff', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bcBuffResist }, targetData));\n        }\n        if (hcBaseResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:hc drop resistance-base', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: hcBaseResist }, targetData));\n        }\n        if (hcBuffResist !== 0) {\n            results.push(Object.assign({ id: 'proc:57:hc drop resistance-buff', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: hcBuffResist }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: [\n                    'proc:57:bc drop resistance-base',\n                    'proc:57:bc drop resistance-buff',\n                    'proc:57:hc drop resistance-base',\n                    'proc:57:hc drop resistance-buff',\n                ],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('58', (effect, context, injectionContext) => {\n        const originalId = '58';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let damageIncrease = 0, chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            damageIncrease = parseNumberOrDefault(effect['spark dmg% received']);\n            chance = parseNumberOrDefault(effect['spark dmg received apply%']);\n            turnDuration = parseNumberOrDefault(effect['spark dmg received debuff turns (94)']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:58:spark vulnerability', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: { 'sparkDamage%': damageIncrease, chance } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:58:spark vulnerability'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('59', (effect, context, injectionContext) => {\n        const originalId = '59';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawBb, rawSbb, rawUbb, rawTurnDuration, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const bb = parseNumberOrDefault(rawBb);\n        const sbb = parseNumberOrDefault(rawSbb);\n        const ubb = parseNumberOrDefault(rawUbb);\n        const turnDuration = parseNumberOrDefault(rawTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'proc:59:attack reduction-bb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'proc:59:attack reduction-sbb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'proc:59:attack reduction-ubb', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: ubb }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['bb', 'sbb', 'ubb'].map((type) => `proc:59:attack reduction-${type}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('61', (effect, context, injectionContext) => {\n        const originalId = '61';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'baseAtk%': '0',\n            'maxAddedAtk%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            let rawMaxAttackValue;\n            [params['baseAtk%'], rawMaxAttackValue, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            params['maxAddedAtk%'] = parseNumberOrDefault(rawMaxAttackValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            params['baseAtk%'] = effect['bb base atk%'];\n            params['maxAddedAtk%'] = effect['bb max atk% based on ally bb gauge and clear bb gauges'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        let results;\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results = [\n                Object.assign({ id: 'proc:61:party bb gauge-scaled attack', originalId,\n                    sources,\n                    effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                        distribution }) }, targetData),\n                {\n                    id: 'proc:61:party bc drain',\n                    originalId,\n                    sources,\n                    effectDelay,\n                    value: true,\n                    targetArea: TargetArea.Aoe,\n                    targetType: TargetType.Party,\n                },\n            ];\n        }\n        else {\n            results = [];\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('62', (effect, context, injectionContext) => {\n        const originalId = '62';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let element;\n        let hp = 0, defense = 0, damageAbsorption = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawElement, rawHp, rawDefense, rawDamageAbsorption, ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            hp = parseNumberOrDefault(rawHp);\n            defense = parseNumberOrDefault(rawDefense);\n            damageAbsorption = parseNumberOrDefault(rawDamageAbsorption);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const effectElement = effect['elemental barrier element'];\n            element = (effectElement && Object.values(ELEMENT_MAPPING).find((e) => e === effectElement)) || BuffConditionElement.Unknown;\n            hp = parseNumberOrDefault(effect['elemental barrier hp']);\n            defense = parseNumberOrDefault(effect['elemental barrier def']);\n            damageAbsorption = parseNumberOrDefault(effect['elemental barrier absorb dmg%']);\n        }\n        const results = [];\n        if (hp !== 0 || defense !== 0 || damageAbsorption !== 0) {\n            results.push(Object.assign({ id: `proc:62:barrier-${element}`, originalId,\n                sources,\n                effectDelay, value: {\n                    hp,\n                    defense,\n                    'damageAbsorption%': damageAbsorption,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('64', (effect, context, injectionContext) => {\n        const originalId = '64';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'atk%': '0',\n            'addedAtkPerUse%': '0',\n            maxIncreases: '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params['atk%'], params['addedAtkPerUse%'], params.maxIncreases, params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            params['atk%'] = effect['bb atk%'];\n            params['addedAtkPerUse%'] = effect['bb atk% inc per use'];\n            params.maxIncreases = effect['bb atk% max number of inc'];\n            params.flatAtk = effect['bb flat atk'];\n            params['crit%'] = effect['bb crit%'];\n            params['bc%'] = effect['bb bc%'];\n            params['hc%'] = effect['bb hc%'];\n            params['dmg%'] = effect['bb dmg%'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:64:consecutive usage attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('65', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'atk% buff when enemy has ailment',\n            effectTurnDurationKey: 'atk% buff turns (110)',\n            buffId: 'proc:65:ailment attack boost',\n            originalId: '65',\n        });\n    });\n    map.set('66', (effect, context, injectionContext) => {\n        const originalId = '66';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let recoveredHp = 0, chance = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawRecoveredHp, rawChance, ...extraParams] = splitEffectParams(effect);\n            recoveredHp = parseNumberOrDefault(rawRecoveredHp);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            recoveredHp = parseNumberOrDefault(effect['revive unit hp%']);\n            chance = parseNumberOrDefault(effect['revive unit chance%']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:66:chance revive', originalId,\n                sources,\n                effectDelay, value: { 'reviveToHp%': recoveredHp, chance } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('67', (effect, context, injectionContext) => {\n        return parseProcWithNumericalValueRangeAndChanceAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            originalId: '67',\n            buffId: 'proc:67:bc fill on spark',\n            effectKeyLow: 'bc fill on spark low',\n            effectKeyHigh: 'bc fill on spark high',\n            effectKeyChance: 'bc fill on spark%',\n            effectTurnDurationKey: 'bc fill on spark buff turns (111)',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n        });\n    });\n    map.set('68', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'guard increase mitigation%',\n            effectTurnDurationKey: 'guard increase mitigation buff turns (113)',\n            buffId: 'proc:68:guard mitigation',\n            originalId: '68',\n        });\n    });\n    map.set('69', (effect, context, injectionContext) => {\n        const originalId = '69';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let flatFill = 0;\n        let percentFill = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawFlatFill, rawPercentFill, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            if ('bb bc fill on guard' in effect) {\n                flatFill = parseNumberOrDefault(effect['bb bc fill on guard']);\n            }\n            if ('bb bc fill% on guard' in effect) {\n                percentFill = parseNumberOrDefault(effect['bb bc fill% on guard']);\n            }\n            turnDuration = parseNumberOrDefault(effect['bb bc fill on guard buff turns (114)']);\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'proc:69:bc fill on guard-flat', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: flatFill, conditions: {\n                    onGuard: true,\n                } }, targetData));\n        }\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'proc:69:bc fill on guard-percent', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: percentFill, conditions: {\n                    onGuard: true,\n                } }, targetData));\n        }\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:69:bc fill on guard-flat', 'proc:69:bc fill on guard-percent'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('71', (effect, context, injectionContext) => {\n        return parseProcWithSingleNumericalParameterAndTurnDuration({\n            effect,\n            context,\n            injectionContext,\n            effectValueKey: 'bb fill inc%',\n            effectTurnDurationKey: 'bb fill inc buff turns (112)',\n            buffId: 'proc:71:bc efficacy reduction',\n            originalId: '71',\n        });\n    });\n    map.set('73', (effect, context, injectionContext) => {\n        const originalId = '73';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const AILMENTS_ORDER = [Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction];\n        const resistances = {\n            [Ailment.AttackReduction]: '0',\n            [Ailment.DefenseReduction]: '0',\n            [Ailment.RecoveryReduction]: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            let rawDuration, extraParams;\n            [resistances[Ailment.AttackReduction], resistances[Ailment.DefenseReduction], resistances[Ailment.RecoveryReduction], rawDuration, ...extraParams] = splitEffectParams(effect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.includes('resist%'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    resistances[ailment] = effect[correspondingKey];\n                }\n            });\n            turnDuration = parseNumberOrDefault(effect['stat down immunity buff turns']);\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `proc:73:resist-${ailment}`, originalId,\n                    sources,\n                    effectDelay,\n                    value, duration: turnDuration }, targetData));\n            }\n        });\n        if (results.length === 0 && isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: AILMENTS_ORDER.map((a) => `proc:73:resist-${a}`),\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('75', (effect, context, injectionContext) => {\n        const originalId = '75';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const { hits, distribution } = getAttackInformationFromContext(context);\n        const params = {\n            'baseAtk%': '0',\n            'addedAttackPerUnitWithMatchingElement%': '0',\n            flatAtk: '0',\n            'crit%': '0',\n            'bc%': '0',\n            'hc%': '0',\n            'dmg%': '0',\n        };\n        let element;\n        let unknownParams;\n        if (effect.params) {\n            let extraParams, rawElement;\n            [rawElement, params['baseAtk%'], params['addedAttackPerUnitWithMatchingElement%'], params.flatAtk, params['crit%'], params['bc%'], params['hc%'], params['dmg%'], ...extraParams] = splitEffectParams(effect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            // in Deathmax's datamine, this proc is incorrectly parsed as a tri-stat buff\n            const effectElement = effect['counted element for buff multiplier'];\n            if (!effectElement) {\n                element = BuffConditionElement.Unknown;\n            }\n            else {\n                element = effectElement;\n            }\n            params['baseAtk%'] = effect['atk% buff (1)'];\n            params['addedAttackPerUnitWithMatchingElement%'] = effect['def% buff (3)'];\n            params.flatAtk = effect['rec% buff (5)'];\n            params['crit%'] = effect['crit% buff (7)'];\n            params['bc%'] = effect['buff turns'];\n        }\n        const filteredValue = Object.entries(params)\n            .filter(([, value]) => value && +value)\n            .reduce((acc, [key, value]) => {\n            acc[key] = parseNumberOrDefault(value);\n            return acc;\n        }, {});\n        const results = [];\n        if (hits !== 0 || distribution !== 0 || Object.keys(filteredValue).length > 0) {\n            results.push(Object.assign({ id: 'proc:75:element squad-scaled attack', originalId,\n                sources,\n                effectDelay, value: Object.assign(Object.assign({}, filteredValue), { elementToMatch: element, hits,\n                    distribution }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('76', (effect, context, injectionContext) => {\n        const originalId = '76';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        let maxExtraActions = 0, chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (effect.params) {\n            const [rawMaxExtraActions, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(effect);\n            maxExtraActions = parseNumberOrDefault(rawMaxExtraActions);\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            maxExtraActions = parseNumberOrDefault(effect['max number of extra actions']);\n            chance = parseNumberOrDefault(effect['chance% for extra action']);\n            turnDuration = parseNumberOrDefault(effect['extra action buff turns (123)']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'proc:76:extra action', originalId,\n                sources,\n                effectDelay, duration: turnDuration, value: { maxExtraActions, chance } }, targetData));\n        }\n        else if (isTurnDurationBuff(context, turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: ['proc:76:extra action'],\n                duration: turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('78', (effect, context, injectionContext) => {\n        const originalId = '78';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const params = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            turnDuration: '0',\n        };\n        const coreStatProperties = ['atk', 'def', 'rec', 'crit'];\n        let unknownParams;\n        if (effect.params) {\n            let extraParams;\n            [params.atk, params.def, params.rec, params.crit, params.turnDuration, ...extraParams] = splitEffectParams(effect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            coreStatProperties.forEach((statType) => {\n                const effectKey = `self ${statType}% buff`;\n                if (effectKey in effect) {\n                    params[statType] = effect[effectKey];\n                }\n            });\n            params.turnDuration = effect['self stat buff turns'];\n        }\n        // ensure numerical properties are actually numbers\n        coreStatProperties.concat(['turnDuration']).forEach((prop) => {\n            params[prop] = parseNumberOrDefault(params[prop]);\n        });\n        const hasAnyStats = coreStatProperties.some((statKey) => params[statKey] !== 0);\n        const results = [];\n        if (hasAnyStats) {\n            coreStatProperties.forEach((statKey) => {\n                const value = params[statKey];\n                if (value !== 0) {\n                    results.push(Object.assign({ id: `proc:78:self stat boost-${statKey}`, originalId,\n                        sources,\n                        effectDelay, duration: params.turnDuration, value }, targetData));\n                }\n            });\n        }\n        else if (isTurnDurationBuff(context, params.turnDuration, injectionContext)) {\n            results.push(createTurnDurationEntry({\n                originalId,\n                sources,\n                buffs: coreStatProperties.map((statKey) => `proc:78:self stat boost-${statKey}`),\n                duration: params.turnDuration,\n                targetData,\n            }));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('79', (effect, context, injectionContext) => {\n        const originalId = '79';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawExpBoost, rawDurationInMinutes = '', ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const expBoost = parseNumberOrDefault(rawExpBoost);\n        const durationInMinutes = parseNumberOrDefault(rawDurationInMinutes);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (expBoost !== 0) {\n            results.push(Object.assign({ id: 'proc:79:player exp boost', originalId,\n                sources,\n                effectDelay, value: { 'expBoost%': expBoost, durationInMinutes } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n    map.set('82', (effect, context, injectionContext) => {\n        const originalId = '82';\n        const { targetData, sources, effectDelay } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [summonGroup, rawPercentHp, ...extraParams] = splitEffectWithUnknownProcParamsProperty(effect);\n        const percentHp = parseNumberOrDefault(rawPercentHp);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (summonGroup) {\n            results.push(Object.assign({ id: 'proc:82:resummon', originalId,\n                sources,\n                effectDelay, value: {\n                    summonGroup,\n                    'startingHp%': percentHp,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            effectDelay,\n        });\n        return results;\n    });\n}\n","import { BuffId, BuffConditionElement } from './buff-types';\nimport { createSourcesFromContext, parseNumberOrDefault, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from './_helpers';\nimport { TargetType, TargetArea, UnitElement } from '../../datamine-types';\nlet mapping;\n/**\n * @description Retrieve the conditional-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of conditional IDs to functions.\n */\nexport function getConditionalEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of conditional effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const ELEMENT_MAPPING = {\n        0: BuffConditionElement.All,\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n    };\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, }) => (Object.assign({ id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS, originalId,\n        sources, value: unknownParams }, targetData));\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n            }));\n        }\n    };\n    const getDefaultTargetData = () => ({ targetType: TargetType.Self, targetArea: TargetArea.Single });\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        const splitParams = typeof effect.params === 'string' ? effect.params.split('&') : [];\n        const targetData = getDefaultTargetData();\n        const turnDuration = parseNumberOrDefault(effect.turnDuration);\n        return { targetData, sources, splitParams, turnDuration };\n    };\n    const parseConditionalWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, buffId, returnBuffWithValueOfZero = false, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawValue, ...extraParams] = splitParams;\n        const value = parseParamValue(rawValue);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        const results = [];\n        if (returnBuffWithValueOfZero || value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources, duration: turnDuration, value }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    };\n    const parseConditionalWithOnlyBaseAndBuffResistanceParameters = ({ effect, context, injectionContext, originalId, baseResistanceBuffId, buffResistanceBuffId, }) => {\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawBaseResist, rawBuffResist, ...extraParams] = splitParams;\n        const baseResist = parseNumberOrDefault(rawBaseResist);\n        const buffResist = parseNumberOrDefault(rawBuffResist);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (baseResist !== 0) {\n            results.push(Object.assign({ id: baseResistanceBuffId, originalId,\n                sources, duration: turnDuration, value: baseResist }, targetData));\n        }\n        if (buffResist !== 0) {\n            results.push(Object.assign({ id: buffResistanceBuffId, originalId,\n                sources, duration: turnDuration, value: buffResist }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '1',\n            buffId: 'conditional:1:attack buff',\n        });\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '3',\n            buffId: 'conditional:3:defense buff',\n        });\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '5',\n            buffId: 'conditional:5:recovery buff',\n        });\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        const originalId = '8';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitParams;\n        const healLow = parseNumberOrDefault(rawHealLow);\n        const healHigh = parseNumberOrDefault(rawHealHigh);\n        const addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'conditional:8:gradual heal', originalId,\n                sources, duration: turnDuration, value: {\n                    healLow,\n                    healHigh,\n                    'addedRec%': addedRec,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '12',\n            buffId: 'conditional:12:guaranteed ko resistance',\n            returnBuffWithValueOfZero: true,\n        });\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        const originalId = '13';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawElement, rawValue, ...extraParams] = splitParams;\n        const element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n        const value = parseNumberOrDefault(rawValue);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'conditional:13:elemental attack buff', originalId,\n                sources, duration: turnDuration, value, conditions: {\n                    targetElements: [element],\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawElement, rawValue, ...extraParams] = splitParams;\n        const element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n        const value = parseNumberOrDefault(rawValue);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (value !== 0) {\n            results.push(Object.assign({ id: 'conditional:14:elemental defense buff', originalId,\n                sources, duration: turnDuration, value, conditions: {\n                    targetElements: [element],\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('21', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '21',\n            buffId: 'conditional:21:fire mitigation',\n        });\n    });\n    map.set('22', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '22',\n            buffId: 'conditional:22:water mitigation',\n        });\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '23',\n            buffId: 'conditional:23:earth mitigation',\n        });\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '24',\n            buffId: 'conditional:24:thunder mitigation',\n        });\n    });\n    map.set('25', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '25',\n            buffId: 'conditional:25:light mitigation',\n        });\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '26',\n            buffId: 'conditional:26:dark mitigation',\n        });\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '36',\n            buffId: 'conditional:36:mitigation',\n        });\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '37',\n            buffId: 'conditional:37:gradual bc fill',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n        });\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '40',\n            buffId: 'conditional:40:spark damage',\n        });\n    });\n    map.set('72', (effect, context, injectionContext) => {\n        const originalId = '72';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawBb, rawSbb, rawUbb, ...extraParams] = splitParams;\n        const bb = parseNumberOrDefault(rawBb);\n        const sbb = parseNumberOrDefault(rawSbb);\n        const ubb = parseNumberOrDefault(rawUbb);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'conditional:72:attack boost-bb', originalId,\n                sources, duration: turnDuration, value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'conditional:72:attack boost-sbb', originalId,\n                sources, duration: turnDuration, value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'conditional:72:attack boost-ubb', originalId,\n                sources, duration: turnDuration, value: ubb }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('74', (effect, context, injectionContext) => {\n        const originalId = '74';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawReductionValue, rawChance, rawDebuffTurns, ...extraParams] = splitParams;\n        const reductionValue = parseNumberOrDefault(rawReductionValue);\n        const chance = parseNumberOrDefault(rawChance);\n        const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurns);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (reductionValue !== 0 || chance !== 0 || debuffTurnDuration !== 0) {\n            results.push(Object.assign({ id: 'conditional:74:add atk down to attack', originalId,\n                sources, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('75', (effect, context, injectionContext) => {\n        const originalId = '75';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawReductionValue, rawChance, rawDebuffTurns, ...extraParams] = splitParams;\n        const reductionValue = parseNumberOrDefault(rawReductionValue);\n        const chance = parseNumberOrDefault(rawChance);\n        const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurns);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (reductionValue !== 0 || chance !== 0 || debuffTurnDuration !== 0) {\n            results.push(Object.assign({ id: 'conditional:75:add def down to attack', originalId,\n                sources, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('84', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '84',\n            buffId: 'conditional:84:critical damage',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n        });\n    });\n    map.set('91', (effect, context, injectionContext) => {\n        const originalId = '91';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawChance, rawHpRecover, ...extraParams] = splitParams;\n        const chance = parseNumberOrDefault(rawChance);\n        const hpRecover = parseNumberOrDefault(rawHpRecover);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'conditional:91:chance ko resistance', originalId,\n                sources, duration: turnDuration, value: {\n                    'hpRecover%': hpRecover,\n                    chance,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('99', (effect, context, injectionContext) => {\n        const originalId = '99';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawElement, rawHp, ...extraParams] = splitParams;\n        const element = ELEMENT_MAPPING[rawElement] || rawElement || BuffConditionElement.Unknown;\n        const hp = parseNumberOrDefault(rawHp);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (hp !== 0) {\n            results.push(Object.assign({ id: 'conditional:99:light barrier', originalId,\n                sources, duration: turnDuration, value: {\n                    hp,\n                    parsedElement: element,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('98', (effect, context, injectionContext) => {\n        const originalId = '98';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawElement, rawHp, ...extraParams] = splitParams;\n        const element = ELEMENT_MAPPING[rawElement] || rawElement || BuffConditionElement.Unknown;\n        const hp = parseNumberOrDefault(rawHp);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (hp !== 0) {\n            results.push(Object.assign({ id: 'conditional:98:thunder barrier', originalId,\n                sources, duration: turnDuration, value: {\n                    hp,\n                    parsedElement: element,\n                } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('132', (effect, context, injectionContext) => {\n        return parseConditionalWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            originalId: '132',\n            buffId: 'conditional:132:od fill rate',\n        });\n    });\n    map.set('133', (effect, context, injectionContext) => {\n        const originalId = '133';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawHealLow, rawHealHigh, rawChance, ...extraParams] = splitParams;\n        const healLow = parseNumberOrDefault(rawHealLow);\n        const healHigh = parseNumberOrDefault(rawHealHigh);\n        const chance = parseNumberOrDefault(rawChance);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'conditional:133:heal on hit', originalId,\n                sources, duration: turnDuration, value: {\n                    healLow,\n                    healHigh,\n                    chance,\n                }, conditions: { whenAttacked: true } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n    map.set('143', (effect, context, injectionContext) => {\n        return parseConditionalWithOnlyBaseAndBuffResistanceParameters({\n            effect,\n            context,\n            injectionContext,\n            originalId: '143',\n            baseResistanceBuffId: 'conditional:143:critical damage reduction-base',\n            buffResistanceBuffId: 'conditional:143:critical damage reduction-buff',\n        });\n    });\n    map.set('145', (effect, context, injectionContext) => {\n        return parseConditionalWithOnlyBaseAndBuffResistanceParameters({\n            effect,\n            context,\n            injectionContext,\n            originalId: '145',\n            baseResistanceBuffId: 'conditional:145:elemental weakness damage reduction-base',\n            buffResistanceBuffId: 'conditional:145:elemental weakness damage reduction-buff',\n        });\n    });\n    map.set('153', (effect, context, injectionContext) => {\n        const originalId = '153';\n        const { targetData, sources, splitParams, turnDuration } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawReductionValue, rawChance, rawDebuffTurnDuration, ...extraParams] = splitParams;\n        const reductionValue = parseNumberOrDefault(rawReductionValue);\n        const chance = parseNumberOrDefault(rawChance);\n        const debuffTurnDuration = parseNumberOrDefault(rawDebuffTurnDuration);\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        const results = [];\n        if (reductionValue !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'conditional:153:chance inflict atk down on hit', originalId,\n                sources, duration: turnDuration, value: {\n                    reductionValue,\n                    chance,\n                    debuffTurnDuration,\n                }, conditions: { whenAttacked: true } }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n        });\n        return results;\n    });\n}\n","import { UnitElement, UnitType, Ailment, UnitGender, TargetType, TargetArea } from '../../datamine-types';\nimport { BuffId, BuffConditionElement } from './buff-types';\nimport { createSourcesFromContext, processExtraSkillConditions, getPassiveTargetData, parseNumberOrDefault, createUnknownParamsEntryFromExtraParams, createNoParamsEntry } from './_helpers';\nimport convertConditionalEffectToBuffs from './convertConditionalEffectToBuffs';\nimport convertProcEffectToBuffs from './convertProcEffectToBuffs';\nlet mapping;\n/**\n * @description Retrieve the passive-to-buff conversion function mapping for the library. Internally, this is a\n * lazy-loaded singleton to not impact first-load performance.\n * @param reload Optionally re-create the mapping.\n * @returns Mapping of passive IDs to functions.\n */\nexport function getPassiveEffectToBuffMapping(reload) {\n    if (!mapping || reload) {\n        mapping = new Map();\n        setMapping(mapping);\n    }\n    return mapping;\n}\n/**\n * @description Apply the mapping of passive effect IDs to conversion functions to the given Map object.\n * @param map Map to add conversion mapping onto.\n * @returns Does not return anything.\n * @internal\n */\nfunction setMapping(map) {\n    const UNKNOWN_PASSIVE_PARAM_EFFECT_KEY = 'unknown passive params';\n    const ELEMENT_MAPPING = {\n        1: UnitElement.Fire,\n        2: UnitElement.Water,\n        3: UnitElement.Earth,\n        4: UnitElement.Thunder,\n        5: UnitElement.Light,\n        6: UnitElement.Dark,\n        X: BuffConditionElement.OmniParadigm,\n    };\n    const TYPE_MAPPING = {\n        1: UnitType.Lord,\n        2: UnitType.Anima,\n        3: UnitType.Breaker,\n        4: UnitType.Guardian,\n        5: UnitType.Oracle,\n        6: UnitType.Rex,\n    };\n    const AILMENT_MAPPING = {\n        1: Ailment.Poison,\n        2: Ailment.Weak,\n        3: Ailment.Sick,\n        4: Ailment.Injury,\n        5: Ailment.Curse,\n        6: Ailment.Paralysis,\n        7: Ailment.AttackReduction,\n        8: Ailment.DefenseReduction,\n        9: Ailment.RecoveryReduction,\n    };\n    const TARGET_TYPE_MAPPING = {\n        1: TargetType.Party,\n        2: TargetType.Enemy,\n        3: TargetType.Self,\n    };\n    const TARGET_AREA_MAPPING = {\n        1: TargetArea.Single,\n        2: TargetArea.Aoe,\n    };\n    const STATS_ORDER = ['atk', 'def', 'rec', 'crit', 'hp'];\n    const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis];\n    const DROP_TYPES_ORDER = ['bc', 'hc', 'item', 'zel', 'karma'];\n    const retrieveCommonInfoForEffects = (effect, context, injectionContext) => {\n        const conditionInfo = ((injectionContext && injectionContext.processExtraSkillConditions) || processExtraSkillConditions)(effect);\n        const targetData = ((injectionContext && injectionContext.getPassiveTargetData) || getPassiveTargetData)(effect, context);\n        const sources = ((injectionContext && injectionContext.createSourcesFromContext) || createSourcesFromContext)(context);\n        return { conditionInfo, targetData, sources };\n    };\n    const convertConditionalEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n        const conversionFunction = (injectionContext && injectionContext.convertConditionalEffectToBuffs) || convertConditionalEffectToBuffs;\n        return conversionFunction(effect, context);\n    };\n    const convertProcEffectToBuffsWithInjectionContext = (effect, context, injectionContext) => {\n        const conversionFunction = (injectionContext && injectionContext.convertProcEffectToBuffs) || convertProcEffectToBuffs;\n        return conversionFunction(effect, context);\n    };\n    // Disable rule as this function is only called once it's confirmed that `effect.params` exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const splitEffectParams = (effect) => effect.params.split(',');\n    const splitEffectWithUnknownPassiveParamsProperty = (effect) => {\n        const rawParams = effect.params || effect[UNKNOWN_PASSIVE_PARAM_EFFECT_KEY] || '';\n        return splitEffectParams({ params: rawParams });\n    };\n    const createUnknownParamsEntry = (unknownParams, { originalId, sources, targetData, conditionInfo, }) => (Object.assign({ id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS, originalId,\n        sources, value: unknownParams, conditions: Object.assign({}, conditionInfo) }, targetData));\n    /**\n     * @description Common checks that are run for most effects after the params have been parsed\n     * into an array of {@link IBuff} but before said array is returned.\n     * @param results List of buffs from the given effect.\n     * @param unknownParams Any unknown parameters from the given effect.\n     * @param parsingContext Extra metadata extracted from the given effect.\n     * @returns {undefined} No value is returned, but it does update the `results` array.\n     */\n    const handlePostParse = (results, unknownParams, { originalId, sources, targetData, conditionInfo, }) => {\n        if (results.length === 0) {\n            results.push(createNoParamsEntry({ originalId, sources }));\n        }\n        if (unknownParams) {\n            results.push(createUnknownParamsEntry(unknownParams, {\n                originalId,\n                sources,\n                targetData,\n                conditionInfo,\n            }));\n        }\n    };\n    let ThresholdType;\n    (function (ThresholdType) {\n        ThresholdType[\"Hp\"] = \"hp\";\n        ThresholdType[\"Bb\"] = \"bb gauge\";\n        ThresholdType[\"DamageTaken\"] = \"damage taken\";\n        ThresholdType[\"DamageDealt\"] = \"damage dealt\";\n        ThresholdType[\"BcReceived\"] = \"bc receive count\";\n    })(ThresholdType || (ThresholdType = {}));\n    const parseThresholdValuesFromParamsProperty = (rawThreshold, rawRequireAboveFlag, thresholdType) => {\n        return {\n            threshold: parseNumberOrDefault(rawThreshold),\n            requireAbove: rawRequireAboveFlag === '1',\n            type: thresholdType,\n        };\n    };\n    const parseThresholdValuesFromEffect = (effect, thresholdType, suffix = 'buff requirement') => {\n        let effectKey, requireAbove = true;\n        if (thresholdType === ThresholdType.DamageTaken) {\n            effectKey = 'damage threshold activation';\n        }\n        else if (thresholdType === ThresholdType.DamageDealt) {\n            effectKey = 'damage dealt threshold activation';\n        }\n        else if (thresholdType === ThresholdType.BcReceived) {\n            effectKey = 'bc receive count buff activation';\n        }\n        else if (`${thresholdType} above % ${suffix}` in effect) {\n            effectKey = `${thresholdType} above % ${suffix}`;\n        }\n        else {\n            effectKey = `${thresholdType} below % ${suffix}`;\n            requireAbove = false;\n        }\n        return {\n            threshold: parseNumberOrDefault(effect[effectKey]),\n            requireAbove,\n            type: thresholdType,\n        };\n    };\n    const getThresholdConditions = ({ threshold, requireAbove, type }) => {\n        let conditions;\n        if (type === ThresholdType.Hp) {\n            if (requireAbove) {\n                conditions = { hpGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { hpLessThanOrEqualTo: threshold };\n            }\n        }\n        else if (type === ThresholdType.Bb) {\n            if (requireAbove) {\n                conditions = { bbGaugeGreaterThanOrEqualTo: threshold };\n            }\n            else {\n                conditions = { bbGaugeLessThanOrEqualTo: threshold };\n            }\n        }\n        else if (type === ThresholdType.DamageTaken) {\n            conditions = { damageTakenExceeds: threshold };\n        }\n        else if (type === ThresholdType.DamageDealt) {\n            conditions = { damageDealtExceeds: threshold };\n        }\n        else if (type === ThresholdType.BcReceived) {\n            conditions = { bcReceivedExceeds: threshold };\n        }\n        return conditions;\n    };\n    const parsePassiveWithSingleNumericalParameter = ({ effect, context, injectionContext, originalId, effectKey, buffId, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let value = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseParamValue(rawValue);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 1, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect[effectKey]);\n        }\n        if (value !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    const parsePassiveWithNumericalValueRangeAndChance = ({ effect, context, injectionContext, originalId, effectKeyLow, effectKeyHigh, effectKeyChance, buffKeyLow, buffKeyHigh, defaultEffectChance = 0, parseParamValue = (rawValue) => parseNumberOrDefault(rawValue), generateBaseConditions = () => ({}), buffId, }) => {\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let valueLow, valueHigh, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawLowValue, rawHighValue, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            valueLow = parseParamValue(rawLowValue);\n            valueHigh = parseParamValue(rawHighValue);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            valueLow = parseNumberOrDefault(typedEffect[effectKeyLow]);\n            valueHigh = parseNumberOrDefault(typedEffect[effectKeyHigh]);\n            chance = parseNumberOrDefault(typedEffect[effectKeyChance], defaultEffectChance);\n        }\n        const results = [];\n        if (valueLow !== 0 || valueHigh !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: buffId, originalId,\n                sources, value: {\n                    [buffKeyLow]: valueLow,\n                    [buffKeyHigh]: valueHigh,\n                    chance,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), generateBaseConditions()) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    };\n    map.set('1', (effect, context, injectionContext) => {\n        const originalId = '1';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:1:${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('2', (effect, context, injectionContext) => {\n        const originalId = '2';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            elements: [],\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let element1, element2;\n            [element1, element2, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            [element1, element2].forEach((elementValue) => {\n                if (elementValue && elementValue !== '0') {\n                    stats.elements.push(ELEMENT_MAPPING[elementValue] || BuffConditionElement.Unknown);\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            if (Array.isArray(typedEffect['elements buffed'])) {\n                stats.elements = typedEffect['elements buffed'];\n            }\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const createBaseStatObject = (stat) => (Object.assign({ id: `passive:2:elemental-${stat}`, originalId,\n            sources, value: parseNumberOrDefault(stats[stat]) }, targetData));\n        if (stats.elements.length > 0) {\n            stats.elements.forEach((element) => {\n                STATS_ORDER.forEach((stat) => {\n                    const value = parseNumberOrDefault(stats[stat]);\n                    if (value !== 0) {\n                        results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [element] }) }));\n                    }\n                });\n            });\n        }\n        else {\n            STATS_ORDER.forEach((stat) => {\n                const value = parseNumberOrDefault(stats[stat]);\n                if (value !== 0) {\n                    results.push(Object.assign(Object.assign({}, createBaseStatObject(stat)), { conditions: Object.assign(Object.assign({}, conditionInfo), { targetElements: [BuffConditionElement.Unknown] }) }));\n                }\n            });\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('3', (effect, context, injectionContext) => {\n        const originalId = '3';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            unitType: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let unitType;\n            [unitType, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            if (unitType && unitType !== '0') {\n                stats.unitType = TYPE_MAPPING[unitType] || 'unknown';\n            }\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.unitType = typedEffect['unit type buffed'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetUnitType = stats.unitType || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:3:type based-${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetUnitType }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('4', (effect, context, injectionContext) => {\n        const originalId = '4';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:4:resist-${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('5', (effect, context, injectionContext) => {\n        const originalId = '5';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let element;\n        let mitigation = '0';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawElement;\n            [rawElement, mitigation, ...extraParams] = splitEffectParams(typedEffect);\n            element = ELEMENT_MAPPING[rawElement] || BuffConditionElement.Unknown;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            element = Object.values(ELEMENT_MAPPING).find((elem) => `${elem} resist%` in effect) || BuffConditionElement.Unknown;\n            if (element !== BuffConditionElement.Unknown) {\n                mitigation = typedEffect[`${element} resist%`];\n            }\n        }\n        const value = parseNumberOrDefault(mitigation);\n        if (value !== 0) {\n            results.push(Object.assign({ id: `passive:5:mitigate-${element}`, originalId,\n                sources,\n                value, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('8', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'dmg% mitigation',\n            buffId: 'passive:8:mitigation',\n            originalId: '8',\n        });\n    });\n    map.set('9', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bc fill per turn',\n            buffId: 'passive:9:gradual bc fill',\n            originalId: '9',\n        });\n    });\n    map.set('10', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'hc effectiveness%',\n            buffId: 'passive:10:hc efficacy',\n            originalId: '10',\n        });\n    });\n    map.set('11', (effect, context, injectionContext) => {\n        const originalId = '11';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:11:hp conditional-${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('12', (effect, context, injectionContext) => {\n        const originalId = '12';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 7, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                const entry = Object.assign({ id: `passive:12:hp conditional drop boost-${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('13', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '13',\n            effectKeyLow: 'bc fill on enemy defeat low',\n            effectKeyHigh: 'bc fill on enemy defeat high',\n            effectKeyChance: 'bc fill on enemy defeat%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            buffId: 'passive:13:bc fill on enemy defeat',\n        });\n    });\n    map.set('14', (effect, context, injectionContext) => {\n        const originalId = '14';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageReduction, chance;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawReduction, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            damageReduction = parseNumberOrDefault(rawReduction);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            damageReduction = parseNumberOrDefault(typedEffect['dmg reduction%']);\n            chance = parseNumberOrDefault(typedEffect['dmg reduction chance%']);\n        }\n        const results = [];\n        if (damageReduction !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:14:chance mitigation', originalId,\n                sources, value: {\n                    value: damageReduction,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('15', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '15',\n            effectKeyLow: 'hp% recover on enemy defeat low',\n            effectKeyHigh: 'hp% recover on enemy defeat high',\n            effectKeyChance: 'hp% recover on enemy defeat chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ onEnemyDefeat: true }),\n            defaultEffectChance: 100,\n            buffId: 'passive:15:heal on enemy defeat',\n        });\n    });\n    map.set('16', (effect, context, injectionContext) => {\n        const originalId = '16';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['hp% recover on battle win low']);\n            healHigh = parseNumberOrDefault(typedEffect['hp% recover on battle win high']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:16:heal on win', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('17', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '17',\n            effectKeyLow: 'hp drain% low',\n            effectKeyHigh: 'hp drain% high',\n            effectKeyChance: 'hp drain chance%',\n            buffKeyLow: 'drainHealLow',\n            buffKeyHigh: 'drainHealHigh',\n            buffId: 'passive:17:hp absorb',\n        });\n    });\n    map.set('19', (effect, context, injectionContext) => {\n        const originalId = '19';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop rate% buff`];\n            });\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:19:drop boost-${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('20', (effect, context, injectionContext) => {\n        const originalId = '20';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const inflictedAilments = [];\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            let params = splitEffectParams(typedEffect);\n            if (params.length % 2 !== 0 && params[params.length - 1] !== '0') {\n                unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(-1), params.length - 1, injectionContext);\n                params = params.slice(0, params.length - 1);\n            }\n            const numParams = params.length;\n            for (let index = 0; index < numParams; index += 2) {\n                const ailmentValue = params[index];\n                const chance = parseNumberOrDefault(params[index + 1]);\n                if (ailmentValue !== '0' || chance !== 0) {\n                    const ailmentType = AILMENT_MAPPING[ailmentValue] || Ailment.Unknown;\n                    inflictedAilments.push({\n                        ailment: ailmentType,\n                        chance,\n                    });\n                }\n            }\n        }\n        else {\n            Object.values(AILMENT_MAPPING).forEach((ailment) => {\n                let effectKey;\n                if (ailment === Ailment.Weak) {\n                    effectKey = 'weaken%';\n                }\n                else if (ailment === Ailment.AttackReduction || ailment === Ailment.DefenseReduction || ailment === Ailment.RecoveryReduction) {\n                    effectKey = ailment;\n                }\n                else {\n                    effectKey = `${ailment}%`;\n                }\n                if (effectKey in effect) {\n                    inflictedAilments.push({\n                        ailment,\n                        chance: parseNumberOrDefault(typedEffect[effectKey]),\n                    });\n                }\n            });\n        }\n        const results = [];\n        inflictedAilments.forEach(({ ailment, chance }) => {\n            if (chance !== 0) {\n                results.push(Object.assign({ id: `passive:20:chance inflict-${ailment}`, originalId,\n                    sources, value: chance, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('21', (effect, context, injectionContext) => {\n        const originalId = '21';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let rawDuration, extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawDuration, ...extraParams] = splitEffectParams(typedEffect);\n            turnDuration = parseNumberOrDefault(rawDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['first x turns atk% (1)'];\n            stats.def = typedEffect['first x turns def% (3)'];\n            stats.rec = typedEffect['first x turns rec% (5)'];\n            stats.crit = typedEffect['first x turns crit% (7)'];\n            turnDuration = parseNumberOrDefault(typedEffect['first x turns']);\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:21:first turn-${stat}`, originalId,\n                    sources,\n                    value, duration: turnDuration, conditions: Object.assign({}, conditionInfo) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('23', (effect, context, injectionContext) => {\n        const originalId = '23';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let fillLow, fillHigh;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawFillLow, rawFillHigh, ...extraParams] = splitEffectParams(typedEffect);\n            fillLow = parseNumberOrDefault(rawFillLow) / 100;\n            fillHigh = parseNumberOrDefault(rawFillHigh) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            fillLow = parseNumberOrDefault(typedEffect['battle end bc fill low']);\n            fillHigh = parseNumberOrDefault(typedEffect['battle end bc fill high']);\n        }\n        const results = [];\n        if (fillLow !== 0 || fillHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:23:bc fill on win', originalId,\n                sources, value: {\n                    fillLow,\n                    fillHigh,\n                }, conditions: Object.assign(Object.assign({}, conditionInfo), { onBattleWin: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('24', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '24',\n            effectKeyLow: 'dmg% to hp when attacked low',\n            effectKeyHigh: 'dmg% to hp when attacked high',\n            effectKeyChance: 'dmg% to hp when attacked chance%',\n            buffKeyLow: 'healLow',\n            buffKeyHigh: 'healHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:24:heal on hit',\n        });\n    });\n    map.set('25', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '25',\n            effectKeyLow: 'bc fill when attacked low',\n            effectKeyHigh: 'bc fill when attacked high',\n            effectKeyChance: 'bc fill when attacked%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:25:bc fill on hit',\n        });\n    });\n    map.set('26', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '26',\n            effectKeyLow: 'dmg% reflect low',\n            effectKeyHigh: 'dmg% reflect high',\n            effectKeyChance: 'dmg% reflect chance%',\n            buffKeyLow: 'damageReflectLow',\n            buffKeyHigh: 'damageReflectHigh',\n            generateBaseConditions: () => ({ whenAttacked: true }),\n            buffId: 'passive:26:chance damage reflect',\n        });\n    });\n    map.set('27', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'target% chance',\n            buffId: 'passive:27:target chance change',\n            originalId: '27',\n        });\n    });\n    map.set('28', (effect, context, injectionContext) => {\n        const originalId = '28';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let value = 0;\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawValue, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            value = parseNumberOrDefault(rawValue);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            value = parseNumberOrDefault(typedEffect['target% chance']);\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Hp, 'passive requirement');\n        }\n        const results = [];\n        if (value !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            const entry = Object.assign({ id: 'passive:28:hp conditional target chance change', originalId,\n                sources,\n                value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n            results.push(entry);\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('29', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'ignore def%',\n            buffId: 'passive:29:chance def ignore',\n            originalId: '29',\n        });\n    });\n    map.set('30', (effect, context, injectionContext) => {\n        const originalId = '30';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n        };\n        let thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawRequireAboveFlag;\n            let rawThreshold;\n            [stats.atk, stats.def, stats.rec, stats.crit, rawThreshold, rawRequireAboveFlag, ...extraParams] = splitEffectParams(typedEffect);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(rawThreshold, rawRequireAboveFlag, ThresholdType.Bb);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.Bb);\n        }\n        const thresholdConditions = getThresholdConditions(thresholdInfo);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (stat !== 'hp' && value !== 0) {\n                const entry = Object.assign({ id: `passive:30:bb gauge conditional-${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData);\n                results.push(entry);\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('31', (effect, context, injectionContext) => {\n        const originalId = '31';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const dropRates = {\n            bc: '0',\n            hc: '0',\n            item: '0',\n            zel: '0',\n            karma: '0',\n        };\n        let sparkDamageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawSparkDamageBoost;\n            [rawSparkDamageBoost, dropRates.bc, dropRates.hc, dropRates.item, dropRates.zel, dropRates.karma, ...extraParams] = splitEffectParams(typedEffect);\n            sparkDamageBoost = parseNumberOrDefault(rawSparkDamageBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            sparkDamageBoost = parseNumberOrDefault(typedEffect['damage% for spark']);\n            DROP_TYPES_ORDER.forEach((dropType) => {\n                dropRates[dropType] = typedEffect[`${dropType} drop% for spark`];\n            });\n        }\n        const results = [];\n        if (sparkDamageBoost !== 0) {\n            results.push(Object.assign({ id: 'passive:31:spark-damage', originalId,\n                sources, value: sparkDamageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        DROP_TYPES_ORDER.forEach((dropType) => {\n            const value = parseNumberOrDefault(dropRates[dropType]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:31:spark-${dropType}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('32', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'bb gauge fill rate%',\n            buffId: 'passive:32:bc efficacy',\n            originalId: '32',\n        });\n    });\n    map.set('33', (effect, context, injectionContext) => {\n        const originalId = '33';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let healLow, healHigh, addedRec;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawHealLow, rawHealHigh, rawAddedRec, ...extraParams] = splitEffectParams(typedEffect);\n            healLow = parseNumberOrDefault(rawHealLow);\n            healHigh = parseNumberOrDefault(rawHealHigh);\n            addedRec = (1 + parseNumberOrDefault(rawAddedRec) / 100) * 10;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            healLow = parseNumberOrDefault(typedEffect['turn heal low']);\n            healHigh = parseNumberOrDefault(typedEffect['turn heal high']);\n            addedRec = parseNumberOrDefault(typedEffect['rec% added (turn heal)']);\n        }\n        const results = [];\n        if (healLow !== 0 || healHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:33:gradual heal', originalId,\n                sources, value: {\n                    healLow,\n                    healHigh,\n                    'addedRec%': addedRec,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('34', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'crit multiplier%',\n            buffId: 'passive:34:critical damage',\n            originalId: '34',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) * 100,\n        });\n    });\n    map.set('35', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '35',\n            effectKeyLow: 'bc fill when attacking low',\n            effectKeyHigh: 'bc fill when attacking high',\n            effectKeyChance: 'bc fill when attacking%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onNormalAttack: true }),\n            buffId: 'passive:35:bc fill on normal attack',\n        });\n    });\n    map.set('36', (effect, context, injectionContext) => {\n        const originalId = '36';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let additionalActions = 0, damageModifier = 0, chance = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawAdditionalActions, rawDamageModifier, rawChance, ...extraParams] = splitEffectParams(typedEffect);\n            additionalActions = parseNumberOrDefault(rawAdditionalActions);\n            damageModifier = parseNumberOrDefault(rawDamageModifier);\n            chance = parseNumberOrDefault(rawChance);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            additionalActions = parseNumberOrDefault(typedEffect['additional actions']);\n        }\n        const results = [];\n        if (additionalActions !== 0 || damageModifier !== 0 || chance !== 0) {\n            results.push(Object.assign({ id: 'passive:36:extra action', originalId,\n                sources, value: {\n                    additionalActions,\n                    damageModifier,\n                    chance,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('37', (effect, context, injectionContext) => {\n        const originalId = '37';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let hitIncreasePerHit = 0, extraHitDamage = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            hitIncreasePerHit = parseNumberOrDefault(params[0]);\n            extraHitDamage = parseNumberOrDefault(params[2]);\n            const extraParams = ['0', params[1], '0', ...params.slice(3)];\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 0, injectionContext);\n        }\n        else {\n            hitIncreasePerHit = parseNumberOrDefault(typedEffect['hit increase/hit']);\n            extraHitDamage = parseNumberOrDefault(typedEffect['extra hits dmg%']);\n        }\n        const results = [];\n        if (hitIncreasePerHit !== 0 || extraHitDamage !== 0) {\n            results.push(Object.assign({ id: 'passive:37:hit count boost', originalId,\n                sources, value: {\n                    hitIncreasePerHit,\n                    extraHitDamage,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('40', (effect, context, injectionContext) => {\n        const originalId = '40';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const coreStatProperties = ['atk', 'def', 'rec'];\n        const coreStatPropertyMapping = {\n            1: 'atk',\n            2: 'def',\n            3: 'rec',\n            4: 'hp',\n        };\n        const effectToCoreStatMapping = {\n            attack: 'atk',\n            defense: 'def',\n            recovery: 'rec',\n            hp: 'hp',\n        };\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n        };\n        let convertedStat = 'unknown';\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawConvertedStat;\n            [rawConvertedStat, stats.atk, stats.def, stats.rec, ...extraParams] = splitEffectParams(typedEffect);\n            convertedStat = coreStatPropertyMapping[rawConvertedStat] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            const rawConvertedStat = typedEffect['converted attribute'];\n            if (rawConvertedStat in effectToCoreStatMapping) {\n                convertedStat = effectToCoreStatMapping[rawConvertedStat];\n            }\n            else {\n                convertedStat = 'unknown';\n            }\n            coreStatProperties.forEach((statType) => {\n                const effectKey = `${statType}% buff`;\n                if (effectKey in typedEffect) {\n                    stats[statType] = typedEffect[effectKey];\n                }\n            });\n        }\n        const results = [];\n        coreStatProperties.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:40:converted-${stat}`, originalId,\n                    sources, value: {\n                        convertedStat,\n                        value,\n                    }, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('41', (effect, context, injectionContext) => {\n        const originalId = '41';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            minimumElements: '0',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.minimumElements, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.minimumElements = typedEffect['unique elements required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const minimumElements = parseNumberOrDefault(stats.minimumElements);\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:41:unique element count-${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { minimumUniqueElements: minimumElements }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('42', (effect, context, injectionContext) => {\n        const originalId = '42';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const GENDER_MAPPING = {\n            0: UnitGender.Other,\n            1: UnitGender.Male,\n            2: UnitGender.Female,\n        };\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            gender: '',\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            let rawGender;\n            [rawGender, stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            stats.gender = GENDER_MAPPING[rawGender] || 'unknown';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            stats.gender = typedEffect['gender required'];\n            stats.hp = typedEffect['hp% buff'];\n            stats.atk = typedEffect['atk% buff'];\n            stats.def = typedEffect['def% buff'];\n            stats.rec = typedEffect['rec% buff'];\n            stats.crit = typedEffect['crit% buff'];\n        }\n        const targetGender = stats.gender || 'unknown';\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:42:gender-${stat}`, originalId,\n                    sources, value: +value, conditions: Object.assign(Object.assign({}, conditionInfo), { targetGender }) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('43', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'take 1 dmg%',\n            buffId: 'passive:43:chance damage to one',\n            originalId: '43',\n        });\n    });\n    map.set('44', (effect, context, injectionContext) => {\n        const originalId = '44';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        const stats = {\n            atk: '0',\n            def: '0',\n            rec: '0',\n            crit: '0',\n            hp: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [stats.atk, stats.def, stats.rec, stats.crit, stats.hp, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 5, injectionContext);\n        }\n        else {\n            stats.hp = typedEffect['hp buff'];\n            stats.atk = typedEffect['atk buff'];\n            stats.def = typedEffect['def buff'];\n            stats.rec = typedEffect['rec buff'];\n            stats.crit = typedEffect['crit buff'];\n        }\n        STATS_ORDER.forEach((stat) => {\n            const value = parseNumberOrDefault(stats[stat]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:44:flat-${stat}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('45', (effect, context, injectionContext) => {\n        const originalId = '45';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let baseResist = 0, buffResist = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n            baseResist = parseNumberOrDefault(rawBaseResist);\n            buffResist = parseNumberOrDefault(rawBuffResist);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            baseResist = parseNumberOrDefault(typedEffect['base crit% resist']);\n            buffResist = parseNumberOrDefault(typedEffect['buff crit% resist']);\n        }\n        const results = [];\n        if (baseResist !== 0) {\n            results.push(Object.assign({ id: 'passive:45:critical damage reduction-base', originalId,\n                sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (buffResist !== 0) {\n            results.push(Object.assign({ id: 'passive:45:critical damage reduction-buff', originalId,\n                sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('46', (effect, context, injectionContext) => {\n        const originalId = '46';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const availableStats = ['atk', 'def', 'rec'];\n        const stats = [];\n        let proportionalMode = 'unknown';\n        const typedEffect = effect;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            availableStats.forEach((stat, index) => {\n                const baseValue = parseNumberOrDefault(params[index * 2]);\n                const addedValue = parseNumberOrDefault(params[(index * 2) + 1]);\n                if (baseValue !== 0 || addedValue !== 0) {\n                    stats.push({\n                        stat,\n                        baseValue,\n                        addedValue,\n                    });\n                }\n            });\n            proportionalMode = params[6] === '1' ? 'lost' : 'remaining';\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            availableStats.forEach((stat) => {\n                const baseValue = parseNumberOrDefault(typedEffect[`${stat}% base buff`]);\n                const addedValue = parseNumberOrDefault(typedEffect[`${stat}% extra buff based on hp`]);\n                if (baseValue !== 0 || addedValue !== 0) {\n                    stats.push({\n                        stat,\n                        baseValue,\n                        addedValue,\n                    });\n                }\n            });\n            proportionalMode = typedEffect['buff proportional to hp'] || 'unknown';\n        }\n        const results = stats.map(({ stat, baseValue, addedValue }) => (Object.assign({ id: `passive:46:hp scaled-${stat}`, originalId,\n            sources, value: {\n                baseValue,\n                addedValue,\n                proportionalMode,\n            }, conditions: Object.assign({}, conditionInfo) }, targetData)));\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('47', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '47',\n            effectKeyLow: 'bc fill on spark low',\n            effectKeyHigh: 'bc fill on spark high',\n            effectKeyChance: 'bc fill on spark%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            buffId: 'passive:47:bc fill on spark',\n        });\n    });\n    map.set('48', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'reduced bb bc cost%',\n            buffId: 'passive:48:bc cost reduction',\n            originalId: '48',\n        });\n    });\n    map.set('49', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '49',\n            effectKeyLow: 'reduced bb bc use% low',\n            effectKeyHigh: 'reduced bb bc use% high',\n            effectKeyChance: 'reduced bb bc use chance%',\n            buffKeyLow: 'reducedUseLow%',\n            buffKeyHigh: 'reducedUseHigh%',\n            buffId: 'passive:49:bb gauge consumption reduction',\n        });\n    });\n    map.set('50', (effect, context, injectionContext) => {\n        const originalId = '50';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let damageBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            damageBoost = parseNumberOrDefault(params[6]) * 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`${element} units do extra elemental weakness dmg`]);\n            damageBoost = parseNumberOrDefault(typedEffect['elemental weakness multiplier%']);\n        }\n        let results = [];\n        if (damageBoost !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:50:elemental weakness damage-${element}`, originalId,\n                sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:50:elemental weakness damage-unknown', originalId,\n                    sources, value: damageBoost, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('53', (effect, context, injectionContext) => {\n        const originalId = '53';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let ResistType;\n        (function (ResistType) {\n            ResistType[\"CriticalDamage\"] = \"critical damage\";\n            ResistType[\"ElementDamage\"] = \"element damage\";\n            ResistType[\"CriticalHitRate\"] = \"critical rate\";\n        })(ResistType || (ResistType = {}));\n        const resistances = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseCritDamageResist, rawBuffCritDamageResist, rawBaseElementDamageResist, rawBuffElementDamageResist, rawBaseCritChanceResist, rawBuffCritChanceResist, ...extraParams] = splitEffectParams(typedEffect);\n            [\n                { resistType: ResistType.CriticalDamage, base: parseNumberOrDefault(rawBaseCritDamageResist), buff: parseNumberOrDefault(rawBuffCritDamageResist) },\n                { resistType: ResistType.ElementDamage, base: parseNumberOrDefault(rawBaseElementDamageResist), buff: parseNumberOrDefault(rawBuffElementDamageResist) },\n                { resistType: ResistType.CriticalHitRate, base: parseNumberOrDefault(rawBaseCritChanceResist), buff: parseNumberOrDefault(rawBuffCritChanceResist) },\n            ].forEach(({ resistType, base, buff }) => {\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            [\n                { resistType: ResistType.CriticalDamage, baseKey: 'crit dmg base damage resist%', buffKey: 'crit dmg buffed damage resist%' },\n                { resistType: ResistType.ElementDamage, baseKey: 'strong base element damage resist%', buffKey: 'strong buffed element damage resist%' },\n                { resistType: ResistType.CriticalHitRate, baseKey: 'crit chance base resist%', buffKey: 'crit chance buffed resist%' },\n            ].forEach(({ resistType, baseKey, buffKey }) => {\n                const base = parseNumberOrDefault(typedEffect[baseKey]);\n                const buff = parseNumberOrDefault(typedEffect[buffKey]);\n                if (base !== 0 || buff !== 0) {\n                    resistances.push({ resistType, base, buff });\n                }\n            });\n        }\n        const results = [];\n        resistances.forEach(({ resistType, base, buff }) => {\n            if (base !== 0) {\n                results.push(Object.assign({ id: `passive:53:${resistType}-base`, originalId,\n                    sources, value: base, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n            if (buff !== 0) {\n                results.push(Object.assign({ id: `passive:53:${resistType}-buff`, originalId,\n                    sources, value: buff, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('55', (effect, context, injectionContext) => {\n        const originalId = '55';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                id: params[0],\n                params: params[1],\n                turnDuration: parseNumberOrDefault(params[5]),\n            }, context, injectionContext);\n            const maxTriggerCount = parseNumberOrDefault(params[2]);\n            const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], params[4], ThresholdType.Hp);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(6), 6, injectionContext);\n            if (triggeredBuffs.length > 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: 'passive:55:hp conditional', originalId,\n                    sources, value: {\n                        triggeredBuffs,\n                        maxTriggerCount,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('58', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'guard increase mitigation%',\n            buffId: 'passive:58:guard mitigation',\n            originalId: '58',\n        });\n    });\n    map.set('59', (effect, context, injectionContext) => {\n        const originalId = '59';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let percentFill, flatFill;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled when attacked while guarded']);\n            flatFill = parseNumberOrDefault(typedEffect['bc filled when attacked while guarded']);\n        }\n        const results = [];\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-percent', originalId,\n                sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n        }\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'passive:59:bc fill when attacked on guard-flat', originalId,\n                sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { whenAttacked: true, onGuard: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('61', (effect, context, injectionContext) => {\n        const originalId = '61';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let percentFill, flatFill;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawPercentFill, rawFlatFill, ...extraParams] = splitEffectParams(typedEffect);\n            percentFill = parseNumberOrDefault(rawPercentFill);\n            flatFill = parseNumberOrDefault(rawFlatFill) / 100;\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            percentFill = parseNumberOrDefault(typedEffect['bb gauge% filled on guard']);\n            flatFill = parseNumberOrDefault(typedEffect['bc filled on guard']);\n        }\n        const results = [];\n        if (percentFill !== 0) {\n            results.push(Object.assign({ id: 'passive:61:bc fill on guard-percent', originalId,\n                sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n        }\n        if (flatFill !== 0) {\n            results.push(Object.assign({ id: 'passive:61:bc fill on guard-flat', originalId,\n                sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), { onGuard: true }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('62', (effect, context, injectionContext) => {\n        const originalId = '62';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let mitigation = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            mitigation = parseNumberOrDefault(params[6]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(7), 7, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n            mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n        }\n        let results = [];\n        if (mitigation !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:62:mitigate-${element}`, originalId,\n                sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:62:mitigate-unknown', originalId,\n                    sources, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('63', (effect, context, injectionContext) => {\n        const originalId = '63';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let elements;\n        let mitigation = 0, turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            elements = params.filter((value, index) => value !== '0' && index < 6)\n                .map((e) => ELEMENT_MAPPING[e] || BuffConditionElement.Unknown);\n            mitigation = parseNumberOrDefault(params[6]);\n            turnDuration = parseNumberOrDefault(params[7]);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(8), 8, injectionContext);\n        }\n        else {\n            elements = Object.values(ELEMENT_MAPPING).filter((element) => !!typedEffect[`mitigate ${element} attacks`]);\n            mitigation = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks']);\n            turnDuration = parseNumberOrDefault(typedEffect['dmg% mitigation for elemental attacks buff for first x turns']);\n        }\n        let results = [];\n        if (mitigation !== 0) {\n            results = elements.map((element) => (Object.assign({ id: `passive:63:first turn mitigate-${element}`, originalId,\n                sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData)));\n            if (results.length === 0) {\n                results.push(Object.assign({ id: 'passive:63:first turn mitigate-unknown', originalId,\n                    sources, duration: turnDuration, value: mitigation, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('64', (effect, context, injectionContext) => {\n        const originalId = '64';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let bb = 0, sbb = 0, ubb = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBb, rawSbb, rawUbb, ...extraParams] = splitEffectParams(typedEffect);\n            bb = parseNumberOrDefault(rawBb);\n            sbb = parseNumberOrDefault(rawSbb);\n            ubb = parseNumberOrDefault(rawUbb);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            bb = parseNumberOrDefault(typedEffect['bb atk% buff']);\n            sbb = parseNumberOrDefault(typedEffect['sbb atk% buff']);\n            ubb = parseNumberOrDefault(typedEffect['ubb atk% buff']);\n        }\n        const results = [];\n        if (bb !== 0) {\n            results.push(Object.assign({ id: 'passive:64:attack boost-bb', originalId,\n                sources, conditions: Object.assign({}, conditionInfo), value: bb }, targetData));\n        }\n        if (sbb !== 0) {\n            results.push(Object.assign({ id: 'passive:64:attack boost-sbb', originalId,\n                sources, conditions: Object.assign({}, conditionInfo), value: sbb }, targetData));\n        }\n        if (ubb !== 0) {\n            results.push(Object.assign({ id: 'passive:64:attack boost-ubb', originalId,\n                sources, conditions: Object.assign({}, conditionInfo), value: ubb }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('65', (effect, context, injectionContext) => {\n        return parsePassiveWithNumericalValueRangeAndChance({\n            effect,\n            context,\n            injectionContext,\n            originalId: '65',\n            effectKeyLow: 'bc fill on crit min',\n            effectKeyHigh: 'bc fill on crit max',\n            effectKeyChance: 'bc fill on crit%',\n            buffKeyLow: 'fillLow',\n            buffKeyHigh: 'fillHigh',\n            parseParamValue: (rawValue) => parseNumberOrDefault(rawValue) / 100,\n            generateBaseConditions: () => ({ onCriticalHit: true }),\n            buffId: 'passive:65:bc fill on crit',\n        });\n    });\n    map.set('66', (effect, context, injectionContext) => {\n        const originalId = '66';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let triggeredBuffs = [];\n        let triggerOnBb = false, triggerOnSbb = false, triggerOnUbb = false;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawProcIds, rawParams = '', rawTargetTypes = '', rawTargetAreas = '', rawStartFrames = '', rawTriggerOnBb, rawTriggerOnSbb, rawTriggerOnUbb, ...extraParams] = splitEffectParams(typedEffect);\n            const allProcIds = rawProcIds.split('~');\n            const allProcParams = rawParams.split('~');\n            const allTargetTypes = rawTargetTypes.split('~');\n            const allTargetAreas = rawTargetAreas.split('~');\n            const allStartFrames = rawStartFrames.split('~');\n            const FRAME_IN_MS = (16 + (2 / 3));\n            allProcIds.forEach((procId, index) => {\n                const params = (allProcParams[index] || '').replace(/&/g, ',');\n                const targetType = allTargetTypes[index];\n                const targetArea = allTargetAreas[index];\n                const startFrame = parseNumberOrDefault(allStartFrames[index]);\n                const effectDelayInMs = (startFrame * FRAME_IN_MS).toFixed(1);\n                const procEffect = {\n                    'proc id': procId,\n                    params,\n                    'effect delay time(ms)/frame': `${effectDelayInMs}/${startFrame}`,\n                    'target area': TARGET_AREA_MAPPING[targetArea] || targetArea || 'unknown target area',\n                    'target type': TARGET_TYPE_MAPPING[targetType] || targetType || 'unknown target type',\n                };\n                const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                triggeredBuffs = triggeredBuffs.concat(procBuffs);\n            });\n            triggerOnBb = rawTriggerOnBb === '1';\n            triggerOnSbb = rawTriggerOnSbb === '1';\n            triggerOnUbb = rawTriggerOnUbb === '1';\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 8, injectionContext);\n        }\n        else {\n            const triggeredEffects = typedEffect['triggered effect'];\n            if (Array.isArray(triggeredEffects)) {\n                triggeredEffects.forEach((procEffect) => {\n                    const procBuffs = convertProcEffectToBuffsWithInjectionContext(procEffect, context, injectionContext);\n                    triggeredBuffs = triggeredBuffs.concat(procBuffs);\n                });\n            }\n            triggerOnBb = !!typedEffect['trigger on bb'];\n            triggerOnSbb = !!typedEffect['trigger on sbb'];\n            triggerOnUbb = !!typedEffect['trigger on ubb'];\n        }\n        const results = [];\n        if ((triggerOnBb || triggerOnSbb || triggerOnUbb) && triggeredBuffs.length > 0) {\n            const addBuffOfBurstType = (burstType) => {\n                results.push(Object.assign({ id: `passive:66:add effect to skill-${burstType}`, originalId,\n                    sources, value: triggeredBuffs, conditions: Object.assign({}, conditionInfo) }, targetData));\n            };\n            if (triggerOnBb) {\n                addBuffOfBurstType('bb');\n            }\n            if (triggerOnSbb) {\n                addBuffOfBurstType('sbb');\n            }\n            if (triggerOnUbb) {\n                addBuffOfBurstType('ubb');\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('69', (effect, context, injectionContext) => {\n        const originalId = '69';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let recoveredHp = 0, maxCount = 0;\n        let chanceLow = 0, chanceHigh = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawRecoveredHp, rawMaxCount, rawChanceLow, rawChanceHigh, ...extraParams] = splitEffectParams(typedEffect);\n            recoveredHp = parseNumberOrDefault(rawRecoveredHp);\n            maxCount = parseNumberOrDefault(rawMaxCount);\n            chanceLow = parseNumberOrDefault(rawChanceLow);\n            chanceHigh = parseNumberOrDefault(rawChanceHigh);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 4, injectionContext);\n        }\n        else {\n            recoveredHp = parseNumberOrDefault(typedEffect['angel idol recover hp%']);\n            maxCount = parseNumberOrDefault(typedEffect['angel idol recover counts']);\n            chanceLow = parseNumberOrDefault(typedEffect['angel idol recover chance% low']);\n            chanceHigh = parseNumberOrDefault(typedEffect['angel idol recover chance% high']);\n        }\n        const results = [];\n        if (chanceLow !== 0 || chanceHigh !== 0) {\n            results.push(Object.assign({ id: 'passive:69:chance ko resistance', originalId,\n                sources, value: {\n                    'recoveredHp%': recoveredHp,\n                    maxCount,\n                    chanceLow,\n                    chanceHigh,\n                }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('70', (effect, context, injectionContext) => {\n        return parsePassiveWithSingleNumericalParameter({\n            effect,\n            context,\n            injectionContext,\n            effectKey: 'od fill rate%',\n            buffId: 'passive:70:od fill rate',\n            originalId: '70',\n        });\n    });\n    map.set('71', (effect, context, injectionContext) => {\n        const originalId = '71';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const inflictionChances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [inflictionChances.poison, inflictionChances.weak, inflictionChances.sick, inflictionChances.injury, inflictionChances.curse, inflictionChances.paralysis, ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 6, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(effect).filter((k) => k.startsWith('counter inflict'));\n            AILMENTS_ORDER.forEach((ailment) => {\n                const correspondingKey = ailmentKeysInEffect.find((k) => k.includes(ailment));\n                if (correspondingKey) {\n                    inflictionChances[ailment] = typedEffect[correspondingKey];\n                }\n            });\n        }\n        const results = [];\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(inflictionChances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:71:inflict on hit-${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('72', (effect, context, injectionContext) => {\n        const originalId = '72';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const [rawHpAtTurnStart, rawBcAtTurnStart, ...extraParams] = splitEffectWithUnknownPassiveParamsProperty(effect);\n        const hpAtTurnStart = rawHpAtTurnStart === '1';\n        const bcAtTurnStart = rawBcAtTurnStart === '1';\n        const unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        const results = [];\n        if (hpAtTurnStart) {\n            results.push(Object.assign({ id: 'passive:72:effect at turn start-hp', originalId,\n                sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (bcAtTurnStart) {\n            results.push(Object.assign({ id: 'passive:72:effect at turn start-bc', originalId,\n                sources, value: true, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('73', (effect, context, injectionContext) => {\n        const originalId = '73';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const AILMENTS_ORDER = [Ailment.Poison, Ailment.Weak, Ailment.Sick, Ailment.Injury, Ailment.Curse, Ailment.Paralysis, Ailment.AttackReduction, Ailment.DefenseReduction, Ailment.RecoveryReduction];\n        const results = [];\n        const resistances = {\n            poison: '0',\n            weak: '0',\n            sick: '0',\n            injury: '0',\n            curse: '0',\n            paralysis: '0',\n            'atk down': '0',\n            'def down': '0',\n            'rec down': '0',\n        };\n        let unknownParams;\n        if (typedEffect.params) {\n            let extraParams;\n            [resistances.poison, resistances.weak, resistances.sick, resistances.injury, resistances.curse, resistances.paralysis, resistances['atk down'], resistances['def down'], resistances['rec down'], ...extraParams] = splitEffectParams(typedEffect);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 9, injectionContext);\n        }\n        else {\n            AILMENTS_ORDER.forEach((ailment) => {\n                const effectKey = ailment !== 'weak' ? ailment : 'weaken';\n                resistances[ailment] = typedEffect[`${effectKey} resist%`];\n            });\n        }\n        AILMENTS_ORDER.forEach((ailment) => {\n            const value = parseNumberOrDefault(resistances[ailment]);\n            if (value !== 0) {\n                results.push(Object.assign({ id: `passive:73:resist-${ailment}`, originalId,\n                    sources,\n                    value, conditions: Object.assign({}, conditionInfo) }, targetData));\n            }\n        });\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('74', (effect, context, injectionContext) => {\n        const originalId = '74';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let requiredAilments, attackBoost = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawRequiredAilments, rawBoost, ...extraParams] = splitEffectParams(typedEffect);\n            requiredAilments = rawRequiredAilments.split('&')\n                .filter((p) => p !== '0')\n                .map((p) => AILMENT_MAPPING[p] || Ailment.Unknown);\n            attackBoost = parseNumberOrDefault(rawBoost);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            const ailmentKeysInEffect = Object.keys(typedEffect).filter((k) => (typedEffect[k] === true) && k.startsWith('atk% buff when enemy has'));\n            requiredAilments = AILMENTS_ORDER.filter((ailment) => ailmentKeysInEffect.find((k) => k.includes(ailment)));\n            attackBoost = parseNumberOrDefault(typedEffect['atk% buff when enemy has ailment']);\n        }\n        const results = [];\n        if (attackBoost !== 0) {\n            results.push(Object.assign({ id: 'passive:74:ailment attack boost', originalId,\n                sources, value: attackBoost, conditions: Object.assign(Object.assign({}, conditionInfo), { targetHasAnyOfGivenAilments: requiredAilments }) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('75', (effect, context, injectionContext) => {\n        const originalId = '75';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let damageIncrease = 0, chance = 0;\n        let turnDuration = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawDamageIncrease, rawChance, rawTurnDuration, ...extraParams] = splitEffectParams(typedEffect);\n            damageIncrease = parseNumberOrDefault(rawDamageIncrease);\n            chance = parseNumberOrDefault(rawChance);\n            turnDuration = parseNumberOrDefault(rawTurnDuration);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 3, injectionContext);\n        }\n        else {\n            damageIncrease = parseNumberOrDefault(typedEffect['spark debuff%']);\n            chance = parseNumberOrDefault(typedEffect['spark debuff chance%']);\n            turnDuration = parseNumberOrDefault(typedEffect['spark debuff turns']);\n        }\n        const results = [];\n        if (chance !== 0) {\n            results.push(Object.assign({ id: 'passive:75:spark vulnerability', originalId,\n                sources, duration: turnDuration, value: { 'sparkDamage%': damageIncrease, chance }, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('77', (effect, context, injectionContext) => {\n        const originalId = '77';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let baseResist = 0, buffResist = 0;\n        let unknownParams;\n        if (typedEffect.params) {\n            const [rawBaseResist, rawBuffResist, ...extraParams] = splitEffectParams(typedEffect);\n            baseResist = parseNumberOrDefault(rawBaseResist);\n            buffResist = parseNumberOrDefault(rawBuffResist);\n            unknownParams = createUnknownParamsEntryFromExtraParams(extraParams, 2, injectionContext);\n        }\n        else {\n            baseResist = parseNumberOrDefault(typedEffect['base spark dmg% resist']);\n            buffResist = parseNumberOrDefault(typedEffect['buff spark dmg% resist']);\n        }\n        const results = [];\n        if (baseResist !== 0) {\n            results.push(Object.assign({ id: 'passive:77:spark damage reduction-base', originalId,\n                sources, value: baseResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        if (buffResist !== 0) {\n            results.push(Object.assign({ id: 'passive:77:spark damage reduction-buff', originalId,\n                sources, value: buffResist, conditions: Object.assign({}, conditionInfo) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('78', (effect, context, injectionContext) => {\n        const originalId = '78';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                id: params[0],\n                params: params[1],\n                turnDuration: parseNumberOrDefault(params[4]),\n            }, context, injectionContext);\n            const maxTriggerCount = parseNumberOrDefault(params[2]);\n            const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], '1', ThresholdType.DamageTaken);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(5), 5, injectionContext);\n            if (triggeredBuffs.length > 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: 'passive:78:damage taken conditional', originalId,\n                    sources, value: {\n                        triggeredBuffs,\n                        maxTriggerCount,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('79', (effect, context, injectionContext) => {\n        const originalId = '79';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let flatFill, percentFill, thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            flatFill = parseNumberOrDefault(params[0]) / 100;\n            percentFill = parseNumberOrDefault(params[1]);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(params[2], '1', ThresholdType.DamageTaken);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(3), 3, injectionContext);\n        }\n        else {\n            flatFill = parseNumberOrDefault(typedEffect['increase bb gauge']);\n            percentFill = 0; // NOTE: deathmax datamine does not parse this property\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.DamageTaken);\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            results.push(Object.assign({ id: 'passive:79:bc fill after damage taken conditional-flat', originalId,\n                sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n        }\n        if (percentFill !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            results.push(Object.assign({ id: 'passive:79:bc fill after damage taken conditional-percent', originalId,\n                sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('80', (effect, context, injectionContext) => {\n        const originalId = '80';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                id: params[0],\n                params: params[1],\n                turnDuration: parseNumberOrDefault(params[4]),\n            }, context, injectionContext);\n            const maxTriggerCount = parseNumberOrDefault(params[2]);\n            const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], '1', ThresholdType.DamageDealt);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(5), 5, injectionContext);\n            if (triggeredBuffs.length > 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: 'passive:80:damage dealt conditional', originalId,\n                    sources, value: {\n                        triggeredBuffs,\n                        maxTriggerCount,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('81', (effect, context, injectionContext) => {\n        const originalId = '81';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        let flatFill, percentFill, thresholdInfo;\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            flatFill = parseNumberOrDefault(params[0]) / 100;\n            percentFill = parseNumberOrDefault(params[1]);\n            thresholdInfo = parseThresholdValuesFromParamsProperty(params[2], '1', ThresholdType.DamageDealt);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(3), 3, injectionContext);\n        }\n        else {\n            flatFill = parseNumberOrDefault(typedEffect['increase bb gauge']);\n            percentFill = 0; // NOTE: deathmax datamine does not parse this property\n            thresholdInfo = parseThresholdValuesFromEffect(typedEffect, ThresholdType.DamageDealt);\n        }\n        const results = [];\n        if (flatFill !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            results.push(Object.assign({ id: 'passive:81:bc fill after damage dealt conditional-flat', originalId,\n                sources, value: flatFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n        }\n        if (percentFill !== 0) {\n            const thresholdConditions = getThresholdConditions(thresholdInfo);\n            results.push(Object.assign({ id: 'passive:81:bc fill after damage dealt conditional-percent', originalId,\n                sources, value: percentFill, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n    map.set('82', (effect, context, injectionContext) => {\n        const originalId = '82';\n        const { conditionInfo, targetData, sources } = retrieveCommonInfoForEffects(effect, context, injectionContext);\n        const typedEffect = effect;\n        const results = [];\n        let unknownParams;\n        if (typedEffect.params) {\n            const params = splitEffectParams(typedEffect);\n            const triggeredBuffs = convertConditionalEffectToBuffsWithInjectionContext({\n                id: params[0],\n                params: params[1],\n                turnDuration: parseNumberOrDefault(params[4]),\n            }, context, injectionContext);\n            const maxTriggerCount = parseNumberOrDefault(params[2]);\n            const thresholdInfo = parseThresholdValuesFromParamsProperty(params[3], '1', ThresholdType.BcReceived);\n            unknownParams = createUnknownParamsEntryFromExtraParams(params.slice(5), 5, injectionContext);\n            if (triggeredBuffs.length > 0) {\n                const thresholdConditions = getThresholdConditions(thresholdInfo);\n                results.push(Object.assign({ id: 'passive:82:bc received conditional', originalId,\n                    sources, value: {\n                        triggeredBuffs,\n                        maxTriggerCount,\n                    }, conditions: Object.assign(Object.assign({}, conditionInfo), thresholdConditions) }, targetData));\n            }\n        }\n        handlePostParse(results, unknownParams, {\n            originalId,\n            sources,\n            targetData,\n            conditionInfo,\n        });\n        return results;\n    });\n}\n","import { BuffId } from './buff-types';\nimport { getProcEffectToBuffMapping } from './proc-effect-mapping';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PROC_ID } from '../constants';\nimport isProcEffect from '../isProcEffect';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to {@link IBuff} format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given proc effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isProcEffect(effect) && getEffectId(effect)) || KNOWN_PROC_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n            originalId: id,\n            effectDelay: effect['effect delay time(ms)/frame'],\n            targetType: effect['target type'],\n            targetArea: effect['target area'],\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given proc effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Proc effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given proc effect object.\n */\nexport default function convertProcEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isProcEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getProcEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId } from './buff-types';\nimport { getConditionalEffectToBuffMapping } from './conditional-effect-mapping';\nimport { KNOWN_CONDITIONAL_ID } from '../constants';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to {@link IBuff} format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given conditional effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = effect.id || KNOWN_CONDITIONAL_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given conditional effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Conditional effect to extract buffs from\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertConditionalEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const conversionFunction = getConditionalEffectToBuffMapping(context.reloadMapping).get(effect.id);\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BuffId, UnitStat, BuffStackType, IconId, } from './buff-types';\nimport { TargetArea } from '../../datamine-types';\nexport const BUFF_METADATA = Object.freeze(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ TURN_DURATION_MODIFICATION: {\n        id: BuffId.TURN_DURATION_MODIFICATION,\n        name: 'Passive Turn Duration Modification',\n        stat: UnitStat.turnDurationModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [\n            (buff && buff.value &&\n                buff.value.duration &&\n                buff.value.duration < 0) ?\n                IconId.TURN_DURATION_DOWN : IconId.TURN_DURATION_UP\n        ],\n    }, NO_PARAMS_SPECIFIED: {\n        id: BuffId.NO_PARAMS_SPECIFIED,\n        name: 'No Parameters Specified',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_PASSIVE_EFFECT_ID: {\n        id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n        name: 'Unknown Passive Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_PASSIVE_BUFF_PARAMS: {\n        id: BuffId.UNKNOWN_PASSIVE_BUFF_PARAMS,\n        name: 'Unknown Passive Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'passive:1:hp': {\n        id: BuffId['passive:1:hp'],\n        name: 'Passive HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:1:atk': {\n        id: BuffId['passive:1:atk'],\n        name: 'Passive Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:1:def': {\n        id: BuffId['passive:1:def'],\n        name: 'Passive Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:1:rec': {\n        id: BuffId['passive:1:rec'],\n        name: 'Passive Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:1:crit': {\n        id: BuffId['passive:1:crit'],\n        name: 'Passive Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    } }, (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:2:elemental-hp': {\n            id: BuffId['passive:2:elemental-hp'],\n            name: 'Passive Elemental HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:2:elemental-atk': {\n            id: BuffId['passive:2:elemental-atk'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:2:elemental-def': {\n            id: BuffId['passive:2:elemental-def'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:2:elemental-rec': {\n            id: BuffId['passive:2:elemental-rec'],\n            name: 'Passive Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:2:elemental-crit': {\n            id: BuffId['passive:2:elemental-crit'],\n            name: 'Passive Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let unitType = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    unitType = buff.conditions.targetUnitType || '';\n                }\n            }\n            if (typeof unitType !== 'string' || !unitType) {\n                unitType = 'unknown';\n            }\n            let iconKey = `BUFF_${unitType.toUpperCase()}${stat}${polarity}`;\n            if (!unitType || !(iconKey in IconId)) {\n                iconKey = `BUFF_UNITTYPE${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:3:type based-hp': {\n            id: BuffId['passive:3:type based-hp'],\n            name: 'Passive Type-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:3:type based-atk': {\n            id: BuffId['passive:3:type based-atk'],\n            name: 'Passive Type-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:3:type based-def': {\n            id: BuffId['passive:3:type based-def'],\n            name: 'Passive Type-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:3:type based-rec': {\n            id: BuffId['passive:3:type based-rec'],\n            name: 'Passive Type-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:3:type based-crit': {\n            id: BuffId['passive:3:type based-crit'],\n            name: 'Passive Type-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:4:resist-poison': {\n        id: BuffId['passive:4:resist-poison'],\n        name: 'Passive Poison Resistance',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:4:resist-weak': {\n        id: BuffId['passive:4:resist-weak'],\n        name: 'Passive Weak Resistance',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:4:resist-sick': {\n        id: BuffId['passive:4:resist-sick'],\n        name: 'Passive Sick Resistance',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:4:resist-injury': {\n        id: BuffId['passive:4:resist-injury'],\n        name: 'Passive Injury Resistance',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:4:resist-curse': {\n        id: BuffId['passive:4:resist-curse'],\n        name: 'Passive Curse Resistance',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:4:resist-paralysis': {\n        id: BuffId['passive:4:resist-paralysis'],\n        name: 'Passive Paralysis Resistance',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:5:mitigate-fire': {\n        id: BuffId['passive:5:mitigate-fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:5:mitigate-water': {\n        id: BuffId['passive:5:mitigate-water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:5:mitigate-earth': {\n        id: BuffId['passive:5:mitigate-earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:5:mitigate-thunder': {\n        id: BuffId['passive:5:mitigate-thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:5:mitigate-light': {\n        id: BuffId['passive:5:mitigate-light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:5:mitigate-dark': {\n        id: BuffId['passive:5:mitigate-dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:5:mitigate-unknown': {\n        id: BuffId['passive:5:mitigate-unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:8:mitigation': {\n        id: BuffId['passive:8:mitigation'],\n        name: 'Passive Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:9:gradual bc fill': {\n        id: BuffId['passive:9:gradual bc fill'],\n        name: 'Passive Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:10:hc efficacy': {\n        id: BuffId['passive:10:hc efficacy'],\n        name: 'Passive HC Efficacy',\n        stat: UnitStat.hcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HCREC],\n    }, 'passive:11:hp conditional-atk': {\n        id: BuffId['passive:11:hp conditional-atk'],\n        name: 'Passive HP-Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHATKDOWN : IconId.BUFF_HPTHRESHATKUP],\n    }, 'passive:11:hp conditional-def': {\n        id: BuffId['passive:11:hp conditional-def'],\n        name: 'Passive HP-Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHDEFDOWN : IconId.BUFF_HPTHRESHDEFUP],\n    }, 'passive:11:hp conditional-rec': {\n        id: BuffId['passive:11:hp conditional-rec'],\n        name: 'Passive HP-Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHRECDOWN : IconId.BUFF_HPTHRESHRECUP],\n    }, 'passive:11:hp conditional-crit': {\n        id: BuffId['passive:11:hp conditional-crit'],\n        name: 'Passive HP-Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHCRTRATEDOWN : IconId.BUFF_HPTHRESHCRTRATEUP],\n    }, 'passive:12:hp conditional drop boost-bc': {\n        id: BuffId['passive:12:hp conditional drop boost-bc'],\n        name: 'Passive HP-Conditional Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHBCDOWN : IconId.BUFF_HPTHRESHBCDROP],\n    }, 'passive:12:hp conditional drop boost-hc': {\n        id: BuffId['passive:12:hp conditional drop boost-hc'],\n        name: 'Passive HP-Conditional Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHHCDOWN : IconId.BUFF_HPTHRESHHCDROP],\n    }, 'passive:12:hp conditional drop boost-item': {\n        id: BuffId['passive:12:hp conditional drop boost-item'],\n        name: 'Passive HP-Conditional Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHITEMDOWN : IconId.BUFF_HPTHRESHITEMDROP],\n    }, 'passive:12:hp conditional drop boost-zel': {\n        id: BuffId['passive:12:hp conditional drop boost-zel'],\n        name: 'Passive HP-Conditional Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHZELDOWN : IconId.BUFF_HPTHRESHZELDROP],\n    }, 'passive:12:hp conditional drop boost-karma': {\n        id: BuffId['passive:12:hp conditional drop boost-karma'],\n        name: 'Passive HP-Conditional Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HPTHRESHKARMADOWN : IconId.BUFF_HPTHRESHKARMADROP],\n    }, 'passive:13:bc fill on enemy defeat': {\n        id: BuffId['passive:13:bc fill on enemy defeat'],\n        name: 'Passive BC Fill on Enemy Defeat',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:14:chance mitigation': {\n        id: BuffId['passive:14:chance mitigation'],\n        name: 'Passive Damage Reduction (Chance)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'passive:15:heal on enemy defeat': {\n        id: BuffId['passive:15:heal on enemy defeat'],\n        name: 'Passive Heal on Enemy Defeat',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:16:heal on win': {\n        id: BuffId['passive:16:heal on win'],\n        name: 'Passive Heal on Battle Win',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:17:hp absorb': {\n        id: BuffId['passive:17:hp absorb'],\n        name: 'HP Absorption',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPABS],\n    }, 'passive:19:drop boost-bc': {\n        id: BuffId['passive:19:drop boost-bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'passive:19:drop boost-hc': {\n        id: BuffId['passive:19:drop boost-hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'passive:19:drop boost-item': {\n        id: BuffId['passive:19:drop boost-item'],\n        name: 'Passive Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'passive:19:drop boost-zel': {\n        id: BuffId['passive:19:drop boost-zel'],\n        name: 'Passive Zel Drop Rate Boost',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_ZELDROP],\n    }, 'passive:19:drop boost-karma': {\n        id: BuffId['passive:19:drop boost-karma'],\n        name: 'Passive Karma Drop Rate Boost',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_KARMADROP],\n    }, 'passive:20:chance inflict-poison': {\n        id: BuffId['passive:20:chance inflict-poison'],\n        name: 'Passive Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'passive:20:chance inflict-weak': {\n        id: BuffId['passive:20:chance inflict-weak'],\n        name: 'Passive Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'passive:20:chance inflict-sick': {\n        id: BuffId['passive:20:chance inflict-sick'],\n        name: 'Passive Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'passive:20:chance inflict-injury': {\n        id: BuffId['passive:20:chance inflict-injury'],\n        name: 'Passive Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'passive:20:chance inflict-curse': {\n        id: BuffId['passive:20:chance inflict-curse'],\n        name: 'Passive Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'passive:20:chance inflict-paralysis': {\n        id: BuffId['passive:20:chance inflict-paralysis'],\n        name: 'Passive Paralysis Infliction',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'passive:20:chance inflict-atk down': {\n        id: BuffId['passive:20:chance inflict-atk down'],\n        name: 'Passive Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'passive:20:chance inflict-def down': {\n        id: BuffId['passive:20:chance inflict-def down'],\n        name: 'Passive Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'passive:20:chance inflict-rec down': {\n        id: BuffId['passive:20:chance inflict-rec down'],\n        name: 'Passive Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'passive:20:chance inflict-unknown': {\n        id: BuffId['passive:20:chance inflict-unknown'],\n        name: 'Passive Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'passive:21:first turn-atk': {\n        id: BuffId['passive:21:first turn-atk'],\n        name: 'Attack Boost for X Turns',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:21:first turn-def': {\n        id: BuffId['passive:21:first turn-def'],\n        name: 'Defense Boost for X Turns',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:21:first turn-rec': {\n        id: BuffId['passive:21:first turn-rec'],\n        name: 'Recovery Boost for X Turns',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:21:first turn-crit': {\n        id: BuffId['passive:21:first turn-crit'],\n        name: 'Critical Hit Rate Boost for X Turns',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:23:bc fill on win': {\n        id: BuffId['passive:23:bc fill on win'],\n        name: 'Passive BC Fill on Battle Win',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:24:heal on hit': {\n        id: BuffId['passive:24:heal on hit'],\n        name: 'Passive Heal when Attacked (Chance)',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'passive:25:bc fill on hit': {\n        id: BuffId['passive:25:bc fill on hit'],\n        name: 'Passive BC Fill when Attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:26:chance damage reflect': {\n        id: BuffId['passive:26:chance damage reflect'],\n        name: 'Passive Damage Counter (Chance)',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'passive:27:target chance change': {\n        id: BuffId['passive:27:target chance change'],\n        name: 'Passive Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_REPENEATT : IconId.BUFF_GETENEATT],\n    }, 'passive:28:hp conditional target chance change': {\n        id: BuffId['passive:28:hp conditional target chance change'],\n        name: 'Passive HP-Conditional Target Chance Modification',\n        stat: UnitStat.targetingModification,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPTHRESHREPENEATT : IconId.BUFF_HPTHRESHGETENEATT],\n    }, 'passive:29:chance def ignore': {\n        id: BuffId['passive:29:chance def ignore'],\n        name: 'Passive Defense Ignore (Chance)',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'passive:30:bb gauge conditional-atk': {\n        id: BuffId['passive:30:bb gauge conditional-atk'],\n        name: 'Passive BB Gauge Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHATKDOWN : IconId.BUFF_BBGAUGETHRESHATKUP],\n    }, 'passive:30:bb gauge conditional-def': {\n        id: BuffId['passive:30:bb gauge conditional-def'],\n        name: 'Passive BB Gauge Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHDEFDOWN : IconId.BUFF_BBGAUGETHRESHDEFUP],\n    }, 'passive:30:bb gauge conditional-rec': {\n        id: BuffId['passive:30:bb gauge conditional-rec'],\n        name: 'Passive BB Gauge Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHRECDOWN : IconId.BUFF_BBGAUGETHRESHRECUP],\n    }, 'passive:30:bb gauge conditional-crit': {\n        id: BuffId['passive:30:bb gauge conditional-crit'],\n        name: 'Passive BB Gauge Conditional Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_BBGAUGETHRESHCRTRATEDOWN : IconId.BUFF_BBGAUGETHRESHCRTRATEUP],\n    }, 'passive:31:spark-damage': {\n        id: BuffId['passive:31:spark-damage'],\n        name: 'Passive Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'passive:31:spark-bc': {\n        id: BuffId['passive:31:spark-bc'],\n        name: 'Passive Battle Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_SPARKBC],\n    }, 'passive:31:spark-hc': {\n        id: BuffId['passive:31:spark-hc'],\n        name: 'Passive Heart Crystal Drop Rate Boost during Spark',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_SPARKHC],\n    }, 'passive:31:spark-item': {\n        id: BuffId['passive:31:spark-item'],\n        name: 'Passive Item Drop Rate Boost during Spark',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_SPARKITEM],\n    }, 'passive:31:spark-zel': {\n        id: BuffId['passive:31:spark-zel'],\n        name: 'Passive Zel Drop Rate Boost during Spark',\n        stat: UnitStat.zelDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ZELDOWN : IconId.BUFF_SPARKZEL],\n    }, 'passive:31:spark-karma': {\n        id: BuffId['passive:31:spark-karma'],\n        name: 'Passive Karma Drop Rate Boost during Spark',\n        stat: UnitStat.karmaDropRate,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_KARMADOWN : IconId.BUFF_SPARKKARMA],\n    }, 'passive:32:bc efficacy': {\n        id: BuffId['passive:32:bc efficacy'],\n        name: 'Passive BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'passive:33:gradual heal': {\n        id: BuffId['passive:33:gradual heal'],\n        name: 'Passive Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'passive:34:critical damage': {\n        id: BuffId['passive:34:critical damage'],\n        name: 'Passive Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'passive:35:bc fill on normal attack': {\n        id: BuffId['passive:35:bc fill on normal attack'],\n        name: 'Passive BC Fill when Normal Attacking',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:36:extra action': {\n        id: BuffId['passive:36:extra action'],\n        name: 'Passive Extra Action',\n        stat: UnitStat.extraAction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DBLSTRIKE],\n    }, 'passive:37:hit count boost': {\n        id: BuffId['passive:37:hit count boost'],\n        name: 'Passive Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'passive:40:converted-atk': {\n        id: BuffId['passive:40:converted-atk'],\n        name: 'Passive Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'passive:40:converted-def': {\n        id: BuffId['passive:40:converted-def'],\n        name: 'Passive Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'passive:40:converted-rec': {\n        id: BuffId['passive:40:converted-rec'],\n        name: 'Passive Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'passive:41:unique element count-hp': {\n        id: BuffId['passive:41:unique element count-hp'],\n        name: 'Passive Element Squad-based HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTHPDOWN : IconId.BUFF_UNIQUEELEMENTHPUP],\n    }, 'passive:41:unique element count-atk': {\n        id: BuffId['passive:41:unique element count-atk'],\n        name: 'Passive Element Squad-based Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTATKDOWN : IconId.BUFF_UNIQUEELEMENTATKUP],\n    }, 'passive:41:unique element count-def': {\n        id: BuffId['passive:41:unique element count-def'],\n        name: 'Passive Element Squad-based Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTDEFDOWN : IconId.BUFF_UNIQUEELEMENTDEFUP],\n    }, 'passive:41:unique element count-rec': {\n        id: BuffId['passive:41:unique element count-rec'],\n        name: 'Passive Element Squad-based Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTRECDOWN : IconId.BUFF_UNIQUEELEMENTRECUP],\n    }, 'passive:41:unique element count-crit': {\n        id: BuffId['passive:41:unique element count-crit'],\n        name: 'Passive Element Squad-based Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_UNIQUEELEMENTCRTRATEDOWN : IconId.BUFF_UNIQUEELEMENTCRTRATEUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let gender = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions) {\n                    gender = buff.conditions.targetGender || '';\n                }\n            }\n            if (typeof gender !== 'string' || !gender) {\n                gender = 'unknown';\n            }\n            let iconKey = `BUFF_${gender.toUpperCase()}${stat}${polarity}`;\n            if (!gender || !(iconKey in IconId)) {\n                iconKey = `BUFF_GENDER${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'passive:42:gender-hp': {\n            id: BuffId['passive:42:gender-hp'],\n            name: 'Passive Gender-Based HP Boost',\n            stat: UnitStat.hp,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('HP'),\n        },\n        'passive:42:gender-atk': {\n            id: BuffId['passive:42:gender-atk'],\n            name: 'Passive Gender-Based Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'passive:42:gender-def': {\n            id: BuffId['passive:42:gender-def'],\n            name: 'Passive Gender-Based Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'passive:42:gender-rec': {\n            id: BuffId['passive:42:gender-rec'],\n            name: 'Passive Gender-Based Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('REC'),\n        },\n        'passive:42:gender-crit': {\n            id: BuffId['passive:42:gender-crit'],\n            name: 'Passive Gender-Based Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Passive,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'passive:43:chance damage to one': {\n        id: BuffId['passive:43:chance damage to one'],\n        name: 'Passive Damage Reduction To One (Chance)',\n        stat: UnitStat.reduceDamageToOne,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGECUTTOONE],\n    }, 'passive:44:flat-hp': {\n        id: BuffId['passive:44:flat-hp'],\n        name: 'Passive Flat HP Boost',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_HPDOWN : IconId.BUFF_HPUP],\n    }, 'passive:44:flat-atk': {\n        id: BuffId['passive:44:flat-atk'],\n        name: 'Passive Flat Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'passive:44:flat-def': {\n        id: BuffId['passive:44:flat-def'],\n        name: 'Passive Flat Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'passive:44:flat-rec': {\n        id: BuffId['passive:44:flat-rec'],\n        name: 'Passive Flat Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'passive:44:flat-crit': {\n        id: BuffId['passive:44:flat-crit'],\n        name: 'Passive Flat Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWN : IconId.BUFF_CRTRATEUP],\n    }, 'passive:45:critical damage reduction-base': {\n        id: BuffId['passive:45:critical damage reduction-base'],\n        name: 'Passive Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:45:critical damage reduction-buff': {\n        id: BuffId['passive:45:critical damage reduction-buff'],\n        name: 'Passive Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:46:hp scaled-atk': {\n        id: BuffId['passive:46:hp scaled-atk'],\n        name: 'Passive Attack Boost Relative to HP',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDATKDOWN : IconId.BUFF_HPSCALEDATKUP],\n    }, 'passive:46:hp scaled-def': {\n        id: BuffId['passive:46:hp scaled-def'],\n        name: 'Passive Defense Boost Relative to HP',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDDEFDOWN : IconId.BUFF_HPSCALEDDEFUP],\n    }, 'passive:46:hp scaled-rec': {\n        id: BuffId['passive:46:hp scaled-rec'],\n        name: 'Passive Recovery Boost Relative to HP',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Passive,\n        icons: (buff) => [(buff && buff.value && buff.value.addedValue && buff.value.addedValue < 0) ? IconId.BUFF_HPSCALEDRECDOWN : IconId.BUFF_HPSCALEDRECUP],\n    }, 'passive:47:bc fill on spark': {\n        id: BuffId['passive:47:bc fill on spark'],\n        name: 'Passive BC Fill on Spark',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKBBUP],\n    }, 'passive:48:bc cost reduction': {\n        id: BuffId['passive:48:bc cost reduction'],\n        name: 'Passive BC Cost Reduction',\n        stat: UnitStat.bcCostReduction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBCOST_REDUCTION],\n    }, 'passive:49:bb gauge consumption reduction': {\n        id: BuffId['passive:49:bb gauge consumption reduction'],\n        name: 'Passive BB Gauge Consumption Reduction',\n        stat: UnitStat.bbGaugeConsumptionReduction,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:50:elemental weakness damage-fire': {\n        id: BuffId['passive:50:elemental weakness damage-fire'],\n        name: 'Passive Fire Elemental Damage Boost',\n        stat: UnitStat.fireElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGUP],\n    }, 'passive:50:elemental weakness damage-water': {\n        id: BuffId['passive:50:elemental weakness damage-water'],\n        name: 'Passive Water Elemental Damage Boost',\n        stat: UnitStat.waterElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGUP],\n    }, 'passive:50:elemental weakness damage-earth': {\n        id: BuffId['passive:50:elemental weakness damage-earth'],\n        name: 'Passive Earth Elemental Damage Boost',\n        stat: UnitStat.earthElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGUP],\n    }, 'passive:50:elemental weakness damage-thunder': {\n        id: BuffId['passive:50:elemental weakness damage-thunder'],\n        name: 'Passive Thunder Elemental Damage Boost',\n        stat: UnitStat.thunderElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGUP],\n    }, 'passive:50:elemental weakness damage-light': {\n        id: BuffId['passive:50:elemental weakness damage-light'],\n        name: 'Passive Light Elemental Damage Boost',\n        stat: UnitStat.lightElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGUP],\n    }, 'passive:50:elemental weakness damage-dark': {\n        id: BuffId['passive:50:elemental weakness damage-dark'],\n        name: 'Passive Dark Elemental Damage Boost',\n        stat: UnitStat.darkElementalDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGUP],\n    }, 'passive:50:elemental weakness damage-unknown': {\n        id: BuffId['passive:50:elemental weakness damage-unknown'],\n        name: 'Passive Elemental Damage Boost (Unspecified Element)',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGUP],\n    }, 'passive:53:critical damage-base': {\n        id: BuffId['passive:53:critical damage-base'],\n        name: 'Passive Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:critical damage-buff': {\n        id: BuffId['passive:53:critical damage-buff'],\n        name: 'Passive Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:element damage-base': {\n        id: BuffId['passive:53:element damage-base'],\n        name: 'Passive Base Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'passive:53:element damage-buff': {\n        id: BuffId['passive:53:element damage-buff'],\n        name: 'Passive Buffed Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'passive:53:critical rate-base': {\n        id: BuffId['passive:53:critical rate-base'],\n        name: 'Passive Base Critical Hit Rate Reduction',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:53:critical rate-buff': {\n        id: BuffId['passive:53:critical rate-buff'],\n        name: 'Passive Buffed Critical Hit Rate Reduction',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'passive:55:hp conditional': {\n        id: BuffId['passive:55:hp conditional'],\n        name: 'Passive Conditional Effect based on HP Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_HPTHRESH],\n    }, 'passive:58:guard mitigation': {\n        id: BuffId['passive:58:guard mitigation'],\n        name: 'Passive Guard Damage Reduction',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDCUT],\n    }, 'passive:59:bc fill when attacked on guard-percent': {\n        id: BuffId['passive:59:bc fill when attacked on guard-percent'],\n        name: 'Passive BC Fill when Attacked and Guarding (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:59:bc fill when attacked on guard-flat': {\n        id: BuffId['passive:59:bc fill when attacked on guard-flat'],\n        name: 'Passive BC Fill when Attacked and Guarding (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:61:bc fill on guard-percent': {\n        id: BuffId['passive:61:bc fill on guard-percent'],\n        name: 'Passive BC Fill on Guard (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:61:bc fill on guard-flat': {\n        id: BuffId['passive:61:bc fill on guard-flat'],\n        name: 'Passive BC Fill on Guard (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'passive:62:mitigate-fire': {\n        id: BuffId['passive:62:mitigate-fire'],\n        name: 'Passive Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:62:mitigate-water': {\n        id: BuffId['passive:62:mitigate-water'],\n        name: 'Passive Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:62:mitigate-earth': {\n        id: BuffId['passive:62:mitigate-earth'],\n        name: 'Passive Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:62:mitigate-thunder': {\n        id: BuffId['passive:62:mitigate-thunder'],\n        name: 'Passive Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:62:mitigate-light': {\n        id: BuffId['passive:62:mitigate-light'],\n        name: 'Passive Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:62:mitigate-dark': {\n        id: BuffId['passive:62:mitigate-dark'],\n        name: 'Passive Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:62:mitigate-unknown': {\n        id: BuffId['passive:62:mitigate-unknown'],\n        name: 'Passive Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:63:first turn mitigate-fire': {\n        id: BuffId['passive:63:first turn mitigate-fire'],\n        name: 'Fire Damage Reduction for First X Turns',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'passive:63:first turn mitigate-water': {\n        id: BuffId['passive:63:first turn mitigate-water'],\n        name: 'Water Damage Reduction for First X Turns',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'passive:63:first turn mitigate-earth': {\n        id: BuffId['passive:63:first turn mitigate-earth'],\n        name: 'Earth Damage Reduction for First X Turns',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'passive:63:first turn mitigate-thunder': {\n        id: BuffId['passive:63:first turn mitigate-thunder'],\n        name: 'Thunder Damage Reduction for First X Turns',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'passive:63:first turn mitigate-light': {\n        id: BuffId['passive:63:first turn mitigate-light'],\n        name: 'Light Damage Reduction for First X Turns',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'passive:63:first turn mitigate-dark': {\n        id: BuffId['passive:63:first turn mitigate-dark'],\n        name: 'Dark Damage Reduction for First X Turns',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'passive:63:first turn mitigate-unknown': {\n        id: BuffId['passive:63:first turn mitigate-unknown'],\n        name: 'Elemental Damage Reduction (Unspecified Element) for First X Turns',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'passive:64:attack boost-bb': {\n        id: BuffId['passive:64:attack boost-bb'],\n        name: 'Passive BB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'passive:64:attack boost-sbb': {\n        id: BuffId['passive:64:attack boost-sbb'],\n        name: 'Passive SBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'passive:64:attack boost-ubb': {\n        id: BuffId['passive:64:attack boost-ubb'],\n        name: 'Passive UBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'passive:65:bc fill on crit': {\n        id: BuffId['passive:65:bc fill on crit'],\n        name: 'Passive BC Fill on Critical Hit',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'passive:66:add effect to skill-bb': {\n        id: BuffId['passive:66:add effect to skill-bb'],\n        name: 'Passive Added Effect to Brave Burst',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTO_BB],\n    }, 'passive:66:add effect to skill-sbb': {\n        id: BuffId['passive:66:add effect to skill-sbb'],\n        name: 'Passive Added Effect to Super Brave Burst',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTO_SBB],\n    }, 'passive:66:add effect to skill-ubb': {\n        id: BuffId['passive:66:add effect to skill-ubb'],\n        name: 'Passive Added Effect to Ultimate Brave Burst',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ADDTO_UBB],\n    }, 'passive:69:chance ko resistance': {\n        id: BuffId['passive:69:chance ko resistance'],\n        name: 'Passive KO Resistance (Chance)',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, 'passive:70:od fill rate': {\n        id: BuffId['passive:70:od fill rate'],\n        name: 'Passive OD Gauge Fill Rate',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_ODFILLBOOST],\n    }, 'passive:71:inflict on hit-poison': {\n        id: BuffId['passive:71:inflict on hit-poison'],\n        name: 'Passive Poison Counter',\n        stat: UnitStat.poisonCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONCOUNTER],\n    }, 'passive:71:inflict on hit-weak': {\n        id: BuffId['passive:71:inflict on hit-weak'],\n        name: 'Passive Weak Counter',\n        stat: UnitStat.weakCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKCOUNTER],\n    }, 'passive:71:inflict on hit-sick': {\n        id: BuffId['passive:71:inflict on hit-sick'],\n        name: 'Passive Sick Counter',\n        stat: UnitStat.sickCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKCOUNTER],\n    }, 'passive:71:inflict on hit-injury': {\n        id: BuffId['passive:71:inflict on hit-injury'],\n        name: 'Passive Injury Counter',\n        stat: UnitStat.injuryCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJCONTER],\n    }, 'passive:71:inflict on hit-curse': {\n        id: BuffId['passive:71:inflict on hit-curse'],\n        name: 'Passive Curse Counter',\n        stat: UnitStat.curseCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSECOUNTER],\n    }, 'passive:71:inflict on hit-paralysis': {\n        id: BuffId['passive:71:inflict on hit-paralysis'],\n        name: 'Passive Paralysis Counter',\n        stat: UnitStat.paralysisCounter,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYCOUNTER],\n    }, 'passive:72:effect at turn start-hp': {\n        id: BuffId['passive:72:effect at turn start-hp'],\n        name: 'Gradual HP Effects Occur at Turn Start',\n        stat: UnitStat.effectOccurrenceShift,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPTURNSTART],\n    }, 'passive:72:effect at turn start-bc': {\n        id: BuffId['passive:72:effect at turn start-bc'],\n        name: 'Gradual Battle Crystal Effects Occur at Turn Start',\n        stat: UnitStat.effectOccurrenceShift,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_BCTURNSTART],\n    }, 'passive:73:resist-poison': {\n        id: BuffId['passive:73:resist-poison'],\n        name: 'Passive Poison Resistance',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'passive:73:resist-weak': {\n        id: BuffId['passive:73:resist-weak'],\n        name: 'Passive Weak Resistance',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'passive:73:resist-sick': {\n        id: BuffId['passive:73:resist-sick'],\n        name: 'Passive Sick Resistance',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'passive:73:resist-injury': {\n        id: BuffId['passive:73:resist-injury'],\n        name: 'Passive Injury Resistance',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'passive:73:resist-curse': {\n        id: BuffId['passive:73:resist-curse'],\n        name: 'Passive Curse Resistance',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'passive:73:resist-paralysis': {\n        id: BuffId['passive:73:resist-paralysis'],\n        name: 'Passive Paralysis Resistance',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'passive:73:resist-atk down': {\n        id: BuffId['passive:73:resist-atk down'],\n        name: 'Passive Attack Reduction Resistance',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_RESISTATKDOWN],\n    }, 'passive:73:resist-def down': {\n        id: BuffId['passive:73:resist-def down'],\n        name: 'Passive Defense Reduction Resistance',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_RESISTDEFDOWN],\n    }, 'passive:73:resist-rec down': {\n        id: BuffId['passive:73:resist-rec down'],\n        name: 'Passive Recovery Reduction Resistance',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_RESISTRECDOWN],\n    }, 'passive:74:ailment attack boost': {\n        id: BuffId['passive:74:ailment attack boost'],\n        name: 'Passive Attack Boost on Status Afflicted Foes',\n        stat: UnitStat.ailmentAttackBoost,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_AILDMGUP],\n    }, 'passive:75:spark vulnerability': {\n        id: BuffId['passive:75:spark vulnerability'],\n        name: 'Passive Spark Vulnerability',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKDMGUP],\n    }, 'passive:77:spark damage reduction-base': {\n        id: BuffId['passive:77:spark damage reduction-base'],\n        name: 'Passive Base Spark Damage Reduction',\n        stat: UnitStat.sparkDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKDMGDOWN],\n    }, 'passive:77:spark damage reduction-buff': {\n        id: BuffId['passive:77:spark damage reduction-buff'],\n        name: 'Passive Buffed Spark Damage Reduction',\n        stat: UnitStat.sparkDamageMitigation,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_SPARKDMGDOWN],\n    }, 'passive:78:damage taken conditional': {\n        id: BuffId['passive:78:damage taken conditional'],\n        name: 'Passive Conditional Effect after Damage Received Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_DAMAGETAKENTHRESH],\n    }, 'passive:79:bc fill after damage taken conditional-flat': {\n        id: BuffId['passive:79:bc fill after damage taken conditional-flat'],\n        name: 'Passive Flat BC Fill after Damage Taken Received Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:79:bc fill after damage taken conditional-percent': {\n        id: BuffId['passive:79:bc fill after damage taken conditional-percent'],\n        name: 'Passive Percent BC Fill after Damage Taken Received Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:80:damage dealt conditional': {\n        id: BuffId['passive:80:damage dealt conditional'],\n        name: 'Passive Conditional Effect after Damage Dealt Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_DAMAGEDEALTTHRESH],\n    }, 'passive:81:bc fill after damage dealt conditional-flat': {\n        id: BuffId['passive:81:bc fill after damage dealt conditional-flat'],\n        name: 'Passive Flat BC Fill after Damage Dealt Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:81:bc fill after damage dealt conditional-percent': {\n        id: BuffId['passive:81:bc fill after damage dealt conditional-percent'],\n        name: 'Passive Percent BC Fill after Damage Dealt Threshold',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'passive:82:bc received conditional': {\n        id: BuffId['passive:82:bc received conditional'],\n        name: 'Passive Conditional Effect after BC Received Threshold',\n        stackType: BuffStackType.Passive,\n        icons: () => [IconId.CONDITIONALBUFF_BCRECEIVEDTHRESH],\n    }, UNKNOWN_PROC_EFFECT_ID: {\n        id: BuffId.UNKNOWN_PROC_EFFECT_ID,\n        name: 'Unknown Proc Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_PROC_BUFF_PARAMS: {\n        id: BuffId.UNKNOWN_PROC_BUFF_PARAMS,\n        name: 'Unknown Proc Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'proc:1:attack': {\n        id: BuffId['proc:1:attack'],\n        name: 'Regular Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:2:burst heal': {\n        id: BuffId['proc:2:burst heal'],\n        name: 'Burst Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:3:gradual heal': {\n        id: BuffId['proc:3:gradual heal'],\n        name: 'Active Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'proc:4:bc fill-flat': {\n        id: BuffId['proc:4:bc fill-flat'],\n        name: 'Burst BC Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:4:bc fill-percent': {\n        id: BuffId['proc:4:bc fill-percent'],\n        name: 'Burst BC Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:5:regular or elemental-atk': {\n            id: BuffId['proc:5:regular or elemental-atk'],\n            name: 'Active Regular/Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:5:regular or elemental-def': {\n            id: BuffId['proc:5:regular or elemental-def'],\n            name: 'Active Regular/Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:5:regular or elemental-rec': {\n            id: BuffId['proc:5:regular or elemental-rec'],\n            name: 'Active Regular/Elemental Recovery Boost',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:5:regular or elemental-crit': {\n            id: BuffId['proc:5:regular or elemental-crit'],\n            name: 'Active Regular/Elemental Critical Hit Rate Boost',\n            stat: UnitStat.crit,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('CRTRATE'),\n        },\n    };\n})()), { 'proc:6:drop boost-bc': {\n        id: BuffId['proc:6:drop boost-bc'],\n        name: 'Active Battle Crystal Drop Rate Boost',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_BCDOWN : IconId.BUFF_BCDROP],\n    }, 'proc:6:drop boost-hc': {\n        id: BuffId['proc:6:drop boost-hc'],\n        name: 'Active Heart Crystal Drop Rate Boost',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_HCDOWN : IconId.BUFF_HCDROP],\n    }, 'proc:6:drop boost-item': {\n        id: BuffId['proc:6:drop boost-item'],\n        name: 'Active Item Drop Rate Boost',\n        stat: UnitStat.itemDropRate,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_ITEMDOWN : IconId.BUFF_ITEMDROP],\n    }, 'proc:7:guaranteed ko resistance': {\n        id: BuffId['proc:7:guaranteed ko resistance'],\n        name: 'Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:8:max hp boost-flat': {\n        id: BuffId['proc:8:max hp boost-flat'],\n        name: 'Max HP Boost (Flat Amount)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    }, 'proc:8:max hp boost-percent': {\n        id: BuffId['proc:8:max hp boost-percent'],\n        name: 'Max HP Boost (Percentage)',\n        stat: UnitStat.hp,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_HPUP],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let hasElement = false;\n            let polarity = 'DOWN'; // default to down since these are reduction buffs\n            if (buff) {\n                if (buff.value && buff.value > 0) {\n                    polarity = 'UP';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                    hasElement = true;\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_${hasElement ? 'ELEMENT' : ''}${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'proc:9:regular or elemental reduction-atk': {\n            id: BuffId['proc:9:regular or elemental reduction-atk'],\n            name: 'Active Regular/Elemental Attack Reduction',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'proc:9:regular or elemental reduction-def': {\n            id: BuffId['proc:9:regular or elemental reduction-def'],\n            name: 'Active Regular/Elemental Defense Reduction',\n            stat: UnitStat.def,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('DEF'),\n        },\n        'proc:9:regular or elemental reduction-rec': {\n            id: BuffId['proc:9:regular or elemental reduction-rec'],\n            name: 'Active Regular/Elemental Recovery Reduction',\n            stat: UnitStat.rec,\n            stackType: BuffStackType.Active,\n            icons: createIconGetterForStat('REC'),\n        },\n        'proc:9:regular or elemental reduction-unknown': {\n            id: BuffId['proc:9:regular or elemental reduction-unknown'],\n            name: 'Active Regular/Elemental Unknown Stat Reduction',\n            stackType: BuffStackType.Active,\n            icons: () => [IconId.UNKNOWN],\n        },\n    };\n})()), { 'proc:10:cleanse-poison': {\n        id: BuffId['proc:10:cleanse-poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:10:cleanse-weak': {\n        id: BuffId['proc:10:cleanse-weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:10:cleanse-sick': {\n        id: BuffId['proc:10:cleanse-sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:10:cleanse-injury': {\n        id: BuffId['proc:10:cleanse-injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:10:cleanse-curse': {\n        id: BuffId['proc:10:cleanse-curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:10:cleanse-paralysis': {\n        id: BuffId['proc:10:cleanse-paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:10:cleanse-atk down': {\n        id: BuffId['proc:10:cleanse-atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTATKDOWN],\n    }, 'proc:10:cleanse-def down': {\n        id: BuffId['proc:10:cleanse-def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTDEFDOWN],\n    }, 'proc:10:cleanse-rec down': {\n        id: BuffId['proc:10:cleanse-rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTRECDOWN],\n    }, 'proc:10:cleanse-unknown': {\n        id: BuffId['proc:10:cleanse-unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:11:chance inflict-poison': {\n        id: BuffId['proc:11:chance inflict-poison'],\n        name: 'Poison Infliction',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_POISON],\n    }, 'proc:11:chance inflict-weak': {\n        id: BuffId['proc:11:chance inflict-weak'],\n        name: 'Weak Infliction',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_WEAK],\n    }, 'proc:11:chance inflict-sick': {\n        id: BuffId['proc:11:chance inflict-sick'],\n        name: 'Sick Infliction',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_SICK],\n    }, 'proc:11:chance inflict-injury': {\n        id: BuffId['proc:11:chance inflict-injury'],\n        name: 'Injury Infliction',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_INJURY],\n    }, 'proc:11:chance inflict-curse': {\n        id: BuffId['proc:11:chance inflict-curse'],\n        name: 'Curse Infliction',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_CURSE],\n    }, 'proc:11:chance inflict-paralysis': {\n        id: BuffId['proc:11:chance inflict-paralysis'],\n        name: 'Paralysis Infliction',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.DEBUFF_PARALYSIS],\n    }, 'proc:11:chance inflict-atk down': {\n        id: BuffId['proc:11:chance inflict-atk down'],\n        name: 'Attack Reduction Infliction',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_ATKDOWN],\n    }, 'proc:11:chance inflict-def down': {\n        id: BuffId['proc:11:chance inflict-def down'],\n        name: 'Defense Reduction Infliction',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_DEFDOWN],\n    }, 'proc:11:chance inflict-rec down': {\n        id: BuffId['proc:11:chance inflict-rec down'],\n        name: 'Recovery Reduction Infliction',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RECDOWN],\n    }, 'proc:11:chance inflict-unknown': {\n        id: BuffId['proc:11:chance inflict-unknown'],\n        name: 'Unknown Ailment Infliction',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.DEBUFF_AILMENT],\n    }, 'proc:12:guaranteed revive': {\n        id: BuffId['proc:12:guaranteed revive'],\n        name: 'Instant Revive (Guaranteed)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLK],\n    }, 'proc:13:random attack': {\n        id: BuffId['proc:13:random attack'],\n        name: 'Random Target Damage',\n        stackType: BuffStackType.Attack,\n        icons: () => [IconId.ATK_RT],\n    }, 'proc:14:hp absorb attack': {\n        id: BuffId['proc:14:hp absorb attack'],\n        name: 'Lifesteal Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPREC : IconId.ATK_AOE_HPREC],\n    }, 'proc:16:mitigate-fire': {\n        id: BuffId['proc:16:mitigate-fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:16:mitigate-water': {\n        id: BuffId['proc:16:mitigate-water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:16:mitigate-earth': {\n        id: BuffId['proc:16:mitigate-earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:16:mitigate-thunder': {\n        id: BuffId['proc:16:mitigate-thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:16:mitigate-light': {\n        id: BuffId['proc:16:mitigate-light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:16:mitigate-dark': {\n        id: BuffId['proc:16:mitigate-dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:16:mitigate-all': {\n        id: BuffId['proc:16:mitigate-all'],\n        name: 'Active Elemental Damage Reduction (All Elements)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:16:mitigate-unknown': {\n        id: BuffId['proc:16:mitigate-unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:17:resist-poison': {\n        id: BuffId['proc:17:resist-poison'],\n        name: 'Active Poison Resistance',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:17:resist-weak': {\n        id: BuffId['proc:17:resist-weak'],\n        name: 'Active Weak Resistance',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:17:resist-sick': {\n        id: BuffId['proc:17:resist-sick'],\n        name: 'Active Sick Resistance',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:17:resist-injury': {\n        id: BuffId['proc:17:resist-injury'],\n        name: 'Active Injury Resistance',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:17:resist-curse': {\n        id: BuffId['proc:17:resist-curse'],\n        name: 'Active Curse Resistance',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:17:resist-paralysis': {\n        id: BuffId['proc:17:resist-paralysis'],\n        name: 'Active Paralysis Resistance',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:18:mitigation': {\n        id: BuffId['proc:18:mitigation'],\n        name: 'Active Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'proc:19:gradual bc fill': {\n        id: BuffId['proc:19:gradual bc fill'],\n        name: 'Active Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:20:bc fill on hit': {\n        id: BuffId['proc:20:bc fill on hit'],\n        name: 'Active BC Fill when attacked',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DAMAGEBB],\n    }, 'proc:22:defense ignore': {\n        id: BuffId['proc:22:defense ignore'],\n        name: 'Active Defense Ignore',\n        stat: UnitStat.defenseIgnore,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_IGNOREDEF],\n    }, 'proc:23:spark damage': {\n        id: BuffId['proc:23:spark damage'],\n        name: 'Active Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'proc:24:converted-atk': {\n        id: BuffId['proc:24:converted-atk'],\n        name: 'Active Converted Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTATKDOWN : IconId.BUFF_CONVERTATKUP],\n    }, 'proc:24:converted-def': {\n        id: BuffId['proc:24:converted-def'],\n        name: 'Active Converted Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTDEFDOWN : IconId.BUFF_CONVERTDEFUP],\n    }, 'proc:24:converted-rec': {\n        id: BuffId['proc:24:converted-rec'],\n        name: 'Active Converted Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value.value && buff.value.value < 0) ? IconId.BUFF_CONVERTRECDOWN : IconId.BUFF_CONVERTRECUP],\n    }, 'proc:26:hit count boost': {\n        id: BuffId['proc:26:hit count boost'],\n        name: 'Active Hit Count Boost',\n        stat: UnitStat.hitCountModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HITUP],\n    }, 'proc:27:proportional attack': {\n        id: BuffId['proc:27:proportional attack'],\n        name: 'Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:28:fixed attack': {\n        id: BuffId['proc:28:fixed attack'],\n        name: 'Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_FIXED : IconId.ATK_AOE_FIXED],\n    }, 'proc:29:multi-element attack': {\n        id: BuffId['proc:29:multi-element attack'],\n        name: 'Multi-Element Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_MULTIELEMENT : IconId.ATK_AOE_MULTIELEMENT],\n    }, 'proc:30:add element-fire': {\n        id: BuffId['proc:30:add element-fire'],\n        name: 'Active Added Element to Attack (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDFIRE],\n    }, 'proc:30:add element-water': {\n        id: BuffId['proc:30:add element-water'],\n        name: 'Active Added Element to Attack (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWATER],\n    }, 'proc:30:add element-earth': {\n        id: BuffId['proc:30:add element-earth'],\n        name: 'Active Added Element to Attack (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDEARTH],\n    }, 'proc:30:add element-thunder': {\n        id: BuffId['proc:30:add element-thunder'],\n        name: 'Active Added Element to Attack (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDTHUNDER],\n    }, 'proc:30:add element-light': {\n        id: BuffId['proc:30:add element-light'],\n        name: 'Active Added Element to Attack (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDLIGHT],\n    }, 'proc:30:add element-dark': {\n        id: BuffId['proc:30:add element-dark'],\n        name: 'Active Added Element to Attack (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDARK],\n    }, 'proc:30:add element-unknown': {\n        id: BuffId['proc:30:add element-unknown'],\n        name: 'Active Added Element to Attack (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDELEMENT],\n    }, 'proc:31:bc fill-flat': {\n        id: BuffId['proc:31:bc fill-flat'],\n        name: 'Burst BC Fill (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:31:bc fill-percent': {\n        id: BuffId['proc:31:bc fill-percent'],\n        name: 'Burst BC Fill (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'proc:32:element shift-fire': {\n        id: BuffId['proc:32:element shift-fire'],\n        name: 'Element Shift (Fire)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTFIRE],\n    }, 'proc:32:element shift-water': {\n        id: BuffId['proc:32:element shift-water'],\n        name: 'Element Shift (Water)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTWATER],\n    }, 'proc:32:element shift-earth': {\n        id: BuffId['proc:32:element shift-earth'],\n        name: 'Element Shift (Earth)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTEARTH],\n    }, 'proc:32:element shift-thunder': {\n        id: BuffId['proc:32:element shift-thunder'],\n        name: 'Element Shift (Thunder)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTTHUNDER],\n    }, 'proc:32:element shift-light': {\n        id: BuffId['proc:32:element shift-light'],\n        name: 'Element Shift (Light)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTLIGHT],\n    }, 'proc:32:element shift-dark': {\n        id: BuffId['proc:32:element shift-dark'],\n        name: 'Element Shift (Dark)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTDARK],\n    }, 'proc:32:element shift-unknown': {\n        id: BuffId['proc:32:element shift-unknown'],\n        name: 'Element Shift (Unspecified Element)',\n        stat: UnitStat.elementModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_SHIFTELEMENT],\n    }, 'proc:33:buff wipe': {\n        id: BuffId['proc:33:buff wipe'],\n        name: 'Buff Removal',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_REMOVEBUFF],\n    }, 'proc:34:bc drain-flat': {\n        id: BuffId['proc:34:bc drain-flat'],\n        name: 'Burst BB Gauge Drain (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:34:bc drain-percent': {\n        id: BuffId['proc:34:bc drain-percent'],\n        name: 'Burst BB Gauge Drain (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:36:ls lock': {\n        id: BuffId['proc:36:ls lock'],\n        name: 'Active Leader Skill Lock',\n        stat: UnitStat.buffStabilityModification,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DISABLELS],\n    }, 'proc:37:summon': {\n        id: BuffId['proc:37:summon'],\n        name: 'Summon Unit',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SUMMONUNIT],\n    }, 'proc:38:cleanse-poison': {\n        id: BuffId['proc:38:cleanse-poison'],\n        name: 'Poison Cleanse',\n        stat: UnitStat.poisonResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_POISONBLK],\n    }, 'proc:38:cleanse-weak': {\n        id: BuffId['proc:38:cleanse-weak'],\n        name: 'Weak Cleanse',\n        stat: UnitStat.weakResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_WEAKBLK],\n    }, 'proc:38:cleanse-sick': {\n        id: BuffId['proc:38:cleanse-sick'],\n        name: 'Sick Cleanse',\n        stat: UnitStat.sickResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SICKBLK],\n    }, 'proc:38:cleanse-injury': {\n        id: BuffId['proc:38:cleanse-injury'],\n        name: 'Injury Cleanse',\n        stat: UnitStat.injuryResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_INJURYBLK],\n    }, 'proc:38:cleanse-curse': {\n        id: BuffId['proc:38:cleanse-curse'],\n        name: 'Curse Cleanse',\n        stat: UnitStat.curseResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_CURSEBLK],\n    }, 'proc:38:cleanse-paralysis': {\n        id: BuffId['proc:38:cleanse-paralysis'],\n        name: 'Paralysis Cleanse',\n        stat: UnitStat.paralysisResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_PARALYSISBLK],\n    }, 'proc:38:cleanse-atk down': {\n        id: BuffId['proc:38:cleanse-atk down'],\n        name: 'Attack Reduction Cleanse',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTATKDOWN],\n    }, 'proc:38:cleanse-def down': {\n        id: BuffId['proc:38:cleanse-def down'],\n        name: 'Defense Reduction Cleanse',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTDEFDOWN],\n    }, 'proc:38:cleanse-rec down': {\n        id: BuffId['proc:38:cleanse-rec down'],\n        name: 'Recovery Reduction Cleanse',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTRECDOWN],\n    }, 'proc:38:cleanse-unknown': {\n        id: BuffId['proc:38:cleanse-unknown'],\n        name: 'Unknown Ailment Cleanse',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_AILMENTBLK],\n    }, 'proc:39:mitigate-fire': {\n        id: BuffId['proc:39:mitigate-fire'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'proc:39:mitigate-water': {\n        id: BuffId['proc:39:mitigate-water'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'proc:39:mitigate-earth': {\n        id: BuffId['proc:39:mitigate-earth'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'proc:39:mitigate-thunder': {\n        id: BuffId['proc:39:mitigate-thunder'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'proc:39:mitigate-light': {\n        id: BuffId['proc:39:mitigate-light'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'proc:39:mitigate-dark': {\n        id: BuffId['proc:39:mitigate-dark'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'proc:39:mitigate-unknown': {\n        id: BuffId['proc:39:mitigate-unknown'],\n        name: 'Active Elemental Damage Reduction (Unspecified Element)',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGDOWN],\n    }, 'proc:40:add ailment-poison': {\n        id: BuffId['proc:40:add ailment-poison'],\n        name: 'Active Poison Infliction Added to Attack',\n        stat: UnitStat.poisonInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPOISON],\n    }, 'proc:40:add ailment-weak': {\n        id: BuffId['proc:40:add ailment-weak'],\n        name: 'Active Weak Infliction Added to Attack',\n        stat: UnitStat.weakInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDWEAK],\n    }, 'proc:40:add ailment-sick': {\n        id: BuffId['proc:40:add ailment-sick'],\n        name: 'Active Sick Infliction Added to Attack',\n        stat: UnitStat.sickInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDSICK],\n    }, 'proc:40:add ailment-injury': {\n        id: BuffId['proc:40:add ailment-injury'],\n        name: 'Active Injury Infliction Added to Attack',\n        stat: UnitStat.injuryInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDINJURY],\n    }, 'proc:40:add ailment-curse': {\n        id: BuffId['proc:40:add ailment-curse'],\n        name: 'Active Curse Infliction Added to Attack',\n        stat: UnitStat.curseInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDCURSE],\n    }, 'proc:40:add ailment-paralysis': {\n        id: BuffId['proc:40:add ailment-paralysis'],\n        name: 'Active Paralysis Infliction Added to Attack',\n        stat: UnitStat.paralysisInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDPARA],\n    }, 'proc:40:add ailment-atk down': {\n        id: BuffId['proc:40:add ailment-atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:40:add ailment-def down': {\n        id: BuffId['proc:40:add ailment-def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:40:add ailment-rec down': {\n        id: BuffId['proc:40:add ailment-rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:40:add ailment-unknown': {\n        id: BuffId['proc:40:add ailment-unknown'],\n        name: 'Active Unknown Ailment Infliction Added to Attack',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.BUFF_ADDAILMENT],\n    }, 'proc:42:sacrificial attack': {\n        id: BuffId['proc:42:sacrificial attack'],\n        name: 'Sacrificial Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL],\n    }, 'proc:42:instant death': {\n        id: BuffId['proc:42:instant death'],\n        name: 'Instant Death to Self (Post-Attack)',\n        stackType: BuffStackType.Burst,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_SACRIFICIAL : IconId.ATK_AOE_SACRIFICIAL, IconId.BUFF_KO],\n    }, 'proc:43:burst od fill': {\n        id: BuffId['proc:43:burst od fill'],\n        name: 'Burst OD Gauge Fill (Percentage)',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_OVERDRIVEUP],\n    }, 'proc:44:damage over time': {\n        id: BuffId['proc:44:damage over time'],\n        name: 'Active Damage over Time',\n        stat: UnitStat.damageOverTime,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_TURNDMG],\n    }, 'proc:45:attack boost-bb': {\n        id: BuffId['proc:45:attack boost-bb'],\n        name: 'Active BB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'proc:45:attack boost-sbb': {\n        id: BuffId['proc:45:attack boost-sbb'],\n        name: 'Active SBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'proc:45:attack boost-ubb': {\n        id: BuffId['proc:45:attack boost-ubb'],\n        name: 'Active UBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'proc:46:non-lethal proportional attack': {\n        id: BuffId['proc:46:non-lethal proportional attack'],\n        name: 'Non-Lethal Proportional Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PROPORTIONAL : IconId.ATK_AOE_PROPORTIONAL],\n    }, 'proc:47:hp scaled attack': {\n        id: BuffId['proc:47:hp scaled attack'],\n        name: 'HP Scaled Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_HPSCALED : IconId.ATK_AOE_HPSCALED],\n    }, 'proc:48:piercing attack-base': {\n        id: BuffId['proc:48:piercing attack-base'],\n        name: 'Piercing Proportional Damage (Base HP)',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n    }, 'proc:48:piercing attack-current': {\n        id: BuffId['proc:48:piercing attack-current'],\n        name: 'Piercing Proportional Damage (Current HP)',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_PROPORTIONAL : IconId.ATK_AOE_PIERCING_PROPORTIONAL],\n    }, 'proc:48:piercing attack-fixed': {\n        id: BuffId['proc:48:piercing attack-fixed'],\n        name: 'Piercing Fixed Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_PIERCING_FIXED : IconId.ATK_AOE_PIERCING_FIXED],\n    }, 'proc:48:piercing attack-unknown': {\n        id: BuffId['proc:48:piercing attack-unknown'],\n        name: 'Unknown Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST : IconId.ATK_AOE],\n    }, 'proc:49:chance instant death': {\n        id: BuffId['proc:49:chance instant death'],\n        name: 'Instant Death (Chance)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KO],\n    }, 'proc:50:chance damage reflect': {\n        id: BuffId['proc:50:chance damage reflect'],\n        name: 'Active Damage Reflect (Chance)',\n        stat: UnitStat.damageReflect,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_COUNTERDAMAGE],\n    }, 'proc:51:add to attack-atk down': {\n        id: BuffId['proc:51:add to attack-atk down'],\n        name: 'Active Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'proc:51:add to attack-def down': {\n        id: BuffId['proc:51:add to attack-def down'],\n        name: 'Active Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'proc:51:add to attack-rec down': {\n        id: BuffId['proc:51:add to attack-rec down'],\n        name: 'Active Recovery Reduction Infliction Added to Attack',\n        stat: UnitStat.recDownInflict,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ADDRECDOWN],\n    }, 'proc:52:bc efficacy': {\n        id: BuffId['proc:52:bc efficacy'],\n        name: 'Active BC Efficacy',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBFILL],\n    }, 'proc:53:inflict on hit-poison': {\n        id: BuffId['proc:53:inflict on hit-poison'],\n        name: 'Active Poison Counter',\n        stat: UnitStat.poisonCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_POISONCOUNTER],\n    }, 'proc:53:inflict on hit-weak': {\n        id: BuffId['proc:53:inflict on hit-weak'],\n        name: 'Active Weak Counter',\n        stat: UnitStat.weakCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WEAKCOUNTER],\n    }, 'proc:53:inflict on hit-sick': {\n        id: BuffId['proc:53:inflict on hit-sick'],\n        name: 'Active Sick Counter',\n        stat: UnitStat.sickCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SICKCOUNTER],\n    }, 'proc:53:inflict on hit-injury': {\n        id: BuffId['proc:53:inflict on hit-injury'],\n        name: 'Active Injury Counter',\n        stat: UnitStat.injuryCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_INJCONTER],\n    }, 'proc:53:inflict on hit-curse': {\n        id: BuffId['proc:53:inflict on hit-curse'],\n        name: 'Active Curse Counter',\n        stat: UnitStat.curseCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CURSECOUNTER],\n    }, 'proc:53:inflict on hit-paralysis': {\n        id: BuffId['proc:53:inflict on hit-paralysis'],\n        name: 'Active Paralysis Counter',\n        stat: UnitStat.paralysisCounter,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_PARALYCOUNTER],\n    }, 'proc:54:critical damage boost': {\n        id: BuffId['proc:54:critical damage boost'],\n        name: 'Active Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'proc:55:elemental weakness damage-fire': {\n        id: BuffId['proc:55:elemental weakness damage-fire'],\n        name: 'Active Fire Elemental Damage Boost',\n        stat: UnitStat.fireElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_FIREDMGUP],\n    }, 'proc:55:elemental weakness damage-water': {\n        id: BuffId['proc:55:elemental weakness damage-water'],\n        name: 'Active Water Elemental Damage Boost',\n        stat: UnitStat.waterElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_WATERDMGUP],\n    }, 'proc:55:elemental weakness damage-earth': {\n        id: BuffId['proc:55:elemental weakness damage-earth'],\n        name: 'Active Earth Elemental Damage Boost',\n        stat: UnitStat.earthElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_EARTHDMGUP],\n    }, 'proc:55:elemental weakness damage-thunder': {\n        id: BuffId['proc:55:elemental weakness damage-thunder'],\n        name: 'Active Thunder Elemental Damage Boost',\n        stat: UnitStat.thunderElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_THUNDERDMGUP],\n    }, 'proc:55:elemental weakness damage-light': {\n        id: BuffId['proc:55:elemental weakness damage-light'],\n        name: 'Active Light Elemental Damage Boost',\n        stat: UnitStat.lightElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_LIGHTDMGUP],\n    }, 'proc:55:elemental weakness damage-dark': {\n        id: BuffId['proc:55:elemental weakness damage-dark'],\n        name: 'Active Dark Elemental Damage Boost',\n        stat: UnitStat.darkElementalDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DARKDMGUP],\n    }, 'proc:55:elemental weakness damage-unknown': {\n        id: BuffId['proc:55:elemental weakness damage-unknown'],\n        name: 'Active Elemental Damage Boost (Unspecified Element)',\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_ELEMENTDMGUP],\n    }, 'proc:56:chance ko resistance': {\n        id: BuffId['proc:56:chance ko resistance'],\n        name: 'KO Resistance (Chance)',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, 'proc:57:bc drop resistance-base': {\n        id: BuffId['proc:57:bc drop resistance-base'],\n        name: 'Active Base Battle Crystal Drop Rate Reduction',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BCDOWN],\n    }, 'proc:57:bc drop resistance-buff': {\n        id: BuffId['proc:57:bc drop resistance-buff'],\n        name: 'Active Buffed Battle Crystal Drop Rate Reduction',\n        stat: UnitStat.bcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BCDOWN],\n    }, 'proc:57:hc drop resistance-base': {\n        id: BuffId['proc:57:hc drop resistance-base'],\n        name: 'Active Base Heart Crystal Drop Rate Reduction',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HCDOWN],\n    }, 'proc:57:hc drop resistance-buff': {\n        id: BuffId['proc:57:hc drop resistance-buff'],\n        name: 'Active Buffed Heart Crystal Drop Rate Reduction',\n        stat: UnitStat.hcDropRate,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_HCDOWN],\n    }, 'proc:58:spark vulnerability': {\n        id: BuffId['proc:58:spark vulnerability'],\n        name: 'Active Spark Vulnerability',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SPARKDMGUP],\n    }, 'proc:59:attack reduction-bb': {\n        id: BuffId['proc:59:attack reduction-bb'],\n        name: 'Active BB ATK Reduction',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBATKDOWN],\n    }, 'proc:59:attack reduction-sbb': {\n        id: BuffId['proc:59:attack reduction-sbb'],\n        name: 'Active SBB ATK Reduction',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SBBATKDOWN],\n    }, 'proc:59:attack reduction-ubb': {\n        id: BuffId['proc:59:attack reduction-ubb'],\n        name: 'Active UBB ATK Reduction',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_UBBATKDOWN],\n    }, 'proc:61:party bb gauge-scaled attack': {\n        id: BuffId['proc:61:party bb gauge-scaled attack'],\n        name: 'Party BB Gauge-Scaled Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED],\n    }, 'proc:61:party bc drain': {\n        id: BuffId['proc:61:party bc drain'],\n        name: 'Party BB Gauge Drain (Post-Attack)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Burst,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_BBGAUGESCALED : IconId.ATK_AOE_BBGAUGESCALED, IconId.BUFF_BBFILLDOWN],\n    }, 'proc:62:barrier-fire': {\n        id: BuffId['proc:62:barrier-fire'],\n        name: 'Fire Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_FIRESHIELD],\n    }, 'proc:62:barrier-water': {\n        id: BuffId['proc:62:barrier-water'],\n        name: 'Water Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_WATERSHIELD],\n    }, 'proc:62:barrier-earth': {\n        id: BuffId['proc:62:barrier-earth'],\n        name: 'Earth Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_EARTHSHIELD],\n    }, 'proc:62:barrier-thunder': {\n        id: BuffId['proc:62:barrier-thunder'],\n        name: 'Thunder Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_THUNDERSHIELD],\n    }, 'proc:62:barrier-light': {\n        id: BuffId['proc:62:barrier-light'],\n        name: 'Light Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_LIGHTSHIELD],\n    }, 'proc:62:barrier-dark': {\n        id: BuffId['proc:62:barrier-dark'],\n        name: 'Dark Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_DARKSHIELD],\n    }, 'proc:62:barrier-all': {\n        id: BuffId['proc:62:barrier-all'],\n        name: 'Barrier (All Elements)',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_ELEMENTSHIELD],\n    }, 'proc:62:barrier-unknown': {\n        id: BuffId['proc:62:barrier-unknown'],\n        name: 'Barrier (Unspecified Element)',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_ELEMENTSHIELD],\n    }, 'proc:64:consecutive usage attack': {\n        id: BuffId['proc:64:consecutive usage attack'],\n        name: 'Consecutive Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_USAGESCALED : IconId.ATK_AOE_USAGESCALED],\n    }, 'proc:65:ailment attack boost': {\n        id: BuffId['proc:65:ailment attack boost'],\n        name: 'Active Attack Boost on Status Afflicted Foes',\n        stat: UnitStat.ailmentAttackBoost,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_AILDMGUP],\n    }, 'proc:66:chance revive': {\n        id: BuffId['proc:66:chance revive'],\n        name: 'Instant Revive (Chance)',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, 'proc:67:bc fill on spark': {\n        id: BuffId['proc:67:bc fill on spark'],\n        name: 'Active BC Fill on Spark',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_SPARKBBUP],\n    }, 'proc:68:guard mitigation': {\n        id: BuffId['proc:68:guard mitigation'],\n        name: 'Active Guard Damage Reduction',\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_GUARDCUT],\n    }, 'proc:69:bc fill on guard-percent': {\n        id: BuffId['proc:69:bc fill on guard-percent'],\n        name: 'Active BC Fill on Guard (Percentage)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'proc:69:bc fill on guard-flat': {\n        id: BuffId['proc:69:bc fill on guard-flat'],\n        name: 'Active BC Fill on Guard (Flat Amount)',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_GUARDBBUP],\n    }, 'proc:71:bc efficacy reduction': {\n        id: BuffId['proc:71:bc efficacy reduction'],\n        name: 'Active BC Efficacy Reduction',\n        stat: UnitStat.bcEfficacy,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_BBFILLDOWN],\n    }, 'proc:73:resist-atk down': {\n        id: BuffId['proc:73:resist-atk down'],\n        name: 'Active Attack Reduction Resistance',\n        stat: UnitStat.atkDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTATKDOWN],\n    }, 'proc:73:resist-def down': {\n        id: BuffId['proc:73:resist-def down'],\n        name: 'Active Defense Reduction Resistance',\n        stat: UnitStat.defDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTDEFDOWN],\n    }, 'proc:73:resist-rec down': {\n        id: BuffId['proc:73:resist-rec down'],\n        name: 'Active Recovery Reduction Resistance',\n        stat: UnitStat.recDownResist,\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_RESISTRECDOWN],\n    }, 'proc:75:element squad-scaled attack': {\n        id: BuffId['proc:75:element squad-scaled attack'],\n        name: 'Element Squad-Scaled Damage',\n        stackType: BuffStackType.Attack,\n        icons: (buff) => [(buff && buff.targetArea === TargetArea.Single) ? IconId.ATK_ST_ELEMENTSCALED : IconId.ATK_AOE_ELEMENTSCALED],\n    }, 'proc:76:extra action': {\n        id: BuffId['proc:76:extra action'],\n        name: 'Active Extra Action',\n        stat: UnitStat.extraAction,\n        stackType: BuffStackType.Active,\n        icons: () => [IconId.BUFF_DBLSTRIKE],\n    }, 'proc:78:self stat boost-atk': {\n        id: BuffId['proc:78:self stat boost-atk'],\n        name: 'Active Self Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWNLOCK : IconId.BUFF_SELFATKUP],\n    }, 'proc:78:self stat boost-def': {\n        id: BuffId['proc:78:self stat boost-def'],\n        name: 'Active Self Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWNLOCK : IconId.BUFF_SELFDEFUP],\n    }, 'proc:78:self stat boost-rec': {\n        id: BuffId['proc:78:self stat boost-rec'],\n        name: 'Active Self Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWNLOCK : IconId.BUFF_SELFRECUP],\n    }, 'proc:78:self stat boost-crit': {\n        id: BuffId['proc:78:self stat boost-crit'],\n        name: 'Active Self Critical Hit Rate Boost',\n        stat: UnitStat.crit,\n        stackType: BuffStackType.Active,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_CRTRATEDOWNLOCK : IconId.BUFF_SELFCRTRATEUP],\n    }, 'proc:79:player exp boost': {\n        id: BuffId['proc:79:player exp boost'],\n        name: 'Active Player EXP Boost',\n        stat: UnitStat.expModification,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_PLAYEREXP],\n    }, 'proc:82:resummon': {\n        id: BuffId['proc:82:resummon'],\n        name: 'Resummon Unit',\n        stackType: BuffStackType.Burst,\n        icons: () => [IconId.BUFF_SUMMONUNIT],\n    }, UNKNOWN_CONDITIONAL_EFFECT_ID: {\n        id: BuffId.UNKNOWN_CONDITIONAL_EFFECT_ID,\n        name: 'Unknown Conditional Effect',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, UNKNOWN_CONDITIONAL_BUFF_PARAMS: {\n        id: BuffId.UNKNOWN_CONDITIONAL_BUFF_PARAMS,\n        name: 'Unknown Conditional Buff Parameters',\n        stackType: BuffStackType.Unknown,\n        icons: () => [IconId.UNKNOWN],\n    }, 'conditional:1:attack buff': {\n        id: BuffId['conditional:1:attack buff'],\n        name: 'Conditional Attack Boost',\n        stat: UnitStat.atk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_ATKDOWN : IconId.BUFF_ATKUP],\n    }, 'conditional:3:defense buff': {\n        id: BuffId['conditional:3:defense buff'],\n        name: 'Conditional Defense Boost',\n        stat: UnitStat.def,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_DEFDOWN : IconId.BUFF_DEFUP],\n    }, 'conditional:5:recovery buff': {\n        id: BuffId['conditional:5:recovery buff'],\n        name: 'Conditional Recovery Boost',\n        stat: UnitStat.rec,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [(buff && buff.value && buff.value < 0) ? IconId.BUFF_RECDOWN : IconId.BUFF_RECUP],\n    }, 'conditional:8:gradual heal': {\n        id: BuffId['conditional:8:gradual heal'],\n        name: 'Conditional Gradual Heal',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_HPREC],\n    }, 'conditional:12:guaranteed ko resistance': {\n        id: BuffId['conditional:12:guaranteed ko resistance'],\n        name: 'Conditional Guaranteed KO Resistance',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_KOBLK],\n    } }), (() => {\n    const createIconGetterForStat = (stat) => {\n        return (buff) => {\n            let element = '';\n            let polarity = 'UP';\n            if (buff) {\n                if (buff.value && buff.value < 0) {\n                    polarity = 'DOWN';\n                }\n                if (buff.conditions && buff.conditions.targetElements) {\n                    element = buff.conditions.targetElements[0];\n                }\n            }\n            if (typeof element !== 'string') {\n                element = '';\n            }\n            let iconKey = `BUFF_${element.toUpperCase()}${stat}${polarity}`;\n            if (!element || !(iconKey in IconId)) {\n                iconKey = `BUFF_ELEMENT${stat}${polarity}`;\n            }\n            return [IconId[iconKey]];\n        };\n    };\n    return {\n        'conditional:13:elemental attack buff': {\n            id: BuffId['conditional:13:elemental attack buff'],\n            name: 'Passive Elemental Attack Boost',\n            stat: UnitStat.atk,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: createIconGetterForStat('ATK'),\n        },\n        'conditional:14:elemental defense buff': {\n            id: BuffId['conditional:14:elemental defense buff'],\n            name: 'Passive Elemental Defense Boost',\n            stat: UnitStat.def,\n            stackType: BuffStackType.ConditionalTimed,\n            icons: createIconGetterForStat('DEF'),\n        },\n    };\n})()), { 'conditional:21:fire mitigation': {\n        id: BuffId['conditional:21:fire mitigation'],\n        name: 'Active Fire Damage Reduction',\n        stat: UnitStat.fireMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_FIREDMGDOWN],\n    }, 'conditional:22:water mitigation': {\n        id: BuffId['conditional:22:water mitigation'],\n        name: 'Active Water Damage Reduction',\n        stat: UnitStat.waterMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_WATERDMGDOWN],\n    }, 'conditional:23:earth mitigation': {\n        id: BuffId['conditional:23:earth mitigation'],\n        name: 'Active Earth Damage Reduction',\n        stat: UnitStat.earthMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_EARTHDMGDOWN],\n    }, 'conditional:24:thunder mitigation': {\n        id: BuffId['conditional:24:thunder mitigation'],\n        name: 'Active Thunder Damage Reduction',\n        stat: UnitStat.thunderMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_THUNDERDMGDOWN],\n    }, 'conditional:25:light mitigation': {\n        id: BuffId['conditional:25:light mitigation'],\n        name: 'Active Light Damage Reduction',\n        stat: UnitStat.lightMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_LIGHTDMGDOWN],\n    }, 'conditional:26:dark mitigation': {\n        id: BuffId['conditional:26:dark mitigation'],\n        name: 'Active Dark Damage Reduction',\n        stat: UnitStat.darkMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_DARKDMGDOWN],\n    }, 'conditional:36:mitigation': {\n        id: BuffId['conditional:36:mitigation'],\n        name: 'Conditional Damage Reduction',\n        stat: UnitStat.mitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_DAMAGECUT],\n    }, 'conditional:37:gradual bc fill': {\n        id: BuffId['conditional:37:gradual bc fill'],\n        name: 'Conditional Gradual BC Fill',\n        stat: UnitStat.bbGauge,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_BBREC],\n    }, 'conditional:40:spark damage': {\n        id: BuffId['conditional:40:spark damage'],\n        name: 'Conditional Spark Damage Boost',\n        stat: UnitStat.sparkDamage,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: (buff) => [buff && buff.value && buff.value < 0 ? IconId.BUFF_SPARKDOWN : IconId.BUFF_SPARKUP],\n    }, 'conditional:72:attack boost-bb': {\n        id: BuffId['conditional:72:attack boost-bb'],\n        name: 'Conditional BB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_BBATKUP],\n    }, 'conditional:72:attack boost-sbb': {\n        id: BuffId['conditional:72:attack boost-sbb'],\n        name: 'Conditional SBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_SBBATKUP],\n    }, 'conditional:72:attack boost-ubb': {\n        id: BuffId['conditional:72:attack boost-ubb'],\n        name: 'Conditional UBB ATK Boost',\n        stat: UnitStat.bbAtk,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_UBBATKUP],\n    }, 'conditional:74:add atk down to attack': {\n        id: BuffId['conditional:74:add atk down to attack'],\n        name: 'Conditional Attack Reduction Infliction Added to Attack',\n        stat: UnitStat.atkDownInflict,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ADDATKDOWN],\n    }, 'conditional:75:add def down to attack': {\n        id: BuffId['conditional:75:add def down to attack'],\n        name: 'Conditional Defense Reduction Infliction Added to Attack',\n        stat: UnitStat.defDownInflict,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ADDDEFDOWN],\n    }, 'conditional:84:critical damage': {\n        id: BuffId['conditional:84:critical damage'],\n        name: 'Conditional Critical Damage Boost',\n        stat: UnitStat.criticalDamage,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_CRTUP],\n    }, 'conditional:91:chance ko resistance': {\n        id: BuffId['conditional:91:chance ko resistance'],\n        name: 'Conditional KO Resistance (Chance)',\n        stat: UnitStat.koResistance,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_KOBLOCK],\n    }, 'conditional:98:thunder barrier': {\n        id: BuffId['conditional:98:thunder barrier'],\n        name: 'Thunder Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_THUNDERSHIELD],\n    }, 'conditional:99:light barrier': {\n        id: BuffId['conditional:99:light barrier'],\n        name: 'Conditional Light Barrier',\n        stat: UnitStat.barrier,\n        stackType: BuffStackType.Singleton,\n        icons: () => [IconId.BUFF_LIGHTSHIELD],\n    }, 'conditional:132:od fill rate': {\n        id: BuffId['conditional:132:od fill rate'],\n        name: 'Conditional OD Gauge Fill Rate',\n        stat: UnitStat.odGauge,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ODFILLBOOST],\n    }, 'conditional:133:heal on hit': {\n        id: BuffId['conditional:133:heal on hit'],\n        name: 'Conditional Heal when Attacked (Chance)',\n        stat: UnitStat.hpRecovery,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_BEENATK_HPREC],\n    }, 'conditional:143:critical damage reduction-base': {\n        id: BuffId['conditional:143:critical damage reduction-base'],\n        name: 'Conditional Base Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'conditional:143:critical damage reduction-buff': {\n        id: BuffId['conditional:143:critical damage reduction-buff'],\n        name: 'Conditional Buffed Critical Damage Reduction',\n        stat: UnitStat.criticalDamageMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_CRTDOWN],\n    }, 'conditional:145:elemental weakness damage reduction-base': {\n        id: BuffId['conditional:145:elemental weakness damage reduction-base'],\n        name: 'Conditional Base Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'conditional:145:elemental weakness damage reduction-buff': {\n        id: BuffId['conditional:145:elemental weakness damage reduction-buff'],\n        name: 'Conditional Buffed Elemental Weakness Damage Reduction',\n        stat: UnitStat.elementalWeaknessDamageMitigation,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_ELEMENTDOWN],\n    }, 'conditional:153:chance inflict atk down on hit': {\n        id: BuffId['conditional:153:chance inflict atk down on hit'],\n        name: 'Conditional Attack Reduction Counter (Chance)',\n        stat: UnitStat.atkDownCounter,\n        stackType: BuffStackType.ConditionalTimed,\n        icons: () => [IconId.BUFF_PROB_ATKREDUC],\n    } }));\n","import { BuffId } from './buff-types';\nimport isPassiveEffect from '../isPassiveEffect';\nimport getEffectId from '../getEffectId';\nimport { KNOWN_PASSIVE_ID } from '../constants';\nimport { getPassiveEffectToBuffMapping } from './passive-effect-mapping';\nimport { createSourcesFromContext } from './_helpers';\n/**\n * @description Default function for all effects that cannot be processed.\n * @param effect Effect to convert to {@link IBuff} format.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns Converted buff(s) from the given passive effect.\n */\nfunction defaultConversionFunction(effect, context) {\n    const id = (isPassiveEffect(effect) && getEffectId(effect)) || KNOWN_PASSIVE_ID.Unknown;\n    return [{\n            id: BuffId.UNKNOWN_PASSIVE_EFFECT_ID,\n            originalId: id,\n            sources: createSourcesFromContext(context),\n        }];\n}\n/**\n * @description Extract the buff(s) from a given passive effect object.\n * If the buff is not supported, the resulting buff type will be `BuffStackType.Unknown` (see {@link BuffStackType} for more info).\n * @param effect Passive effect object to extract buffs from.\n * @param context Aggregate object to encapsulate information not in the effect used in the conversion process.\n * @returns A collection of one or more buffs found in the given passive effect object.\n */\nexport default function convertPassiveEffectToBuffs(effect, context) {\n    if (!effect || typeof effect !== 'object') {\n        throw new TypeError('effect parameter should be an object');\n    }\n    if (!context || typeof context !== 'object') {\n        throw new TypeError('context parameter should be an object');\n    }\n    const id = (isPassiveEffect(effect) && getEffectId(effect));\n    const conversionFunction = (id && getPassiveEffectToBuffMapping(context.reloadMapping).get(id));\n    // TODO: warning if result is empty?\n    return typeof conversionFunction === 'function'\n        ? conversionFunction(effect, context)\n        : defaultConversionFunction(effect, context);\n}\n","import { BUFF_METADATA } from './buff-metadata';\n/**\n * @description Get the associated metadata entry for a given buff ID.\n * @param id Buff ID to get metadata for.\n * @param metadata Optional source to use as metadata; defaults to internal buff metadata.\n * @returns Corresponding buff metadata entry if it exists, undefined otherwise.\n */\nexport default function getMetadataForBuff(id, metadata = BUFF_METADATA) {\n    return (!!metadata && typeof metadata === 'object') && Object.hasOwnProperty.call(metadata, id)\n        ? metadata[id]\n        : (void 0);\n}\n","import { TargetArea, } from '../datamine-types';\n/**\n * @description Create a list of objects that contain both the effect data and its corresponding damage frame.\n * @param effects List of proc effects to combine; must be the same length as the `damageFrames`.\n * @param damageFrames List of damage frames whose index corresponds with the effect in the `effects` list.\n * @returns Collection of composite objects that contain the proc effect and the corresponding frames entry.\n */\nexport default function combineEffectsAndDamageFrames(effects, damageFrames) {\n    let combinedEntries = [];\n    if (Array.isArray(effects) && effects.length > 0 && Array.isArray(damageFrames) && effects.length === damageFrames.length) {\n        combinedEntries = effects.map((effect, i) => {\n            const correspondingFrameEntry = damageFrames[i];\n            return {\n                delay: effect['effect delay time(ms)/frame'],\n                effect,\n                frames: correspondingFrameEntry,\n                id: `${effect['proc id'] || effect['unknown proc id']}`,\n                targetArea: effect['random attack'] ? TargetArea.Random : effect['target area'],\n                targetType: effect['target type'],\n            };\n        });\n    }\n    return combinedEntries;\n}\n","import getEffectId from './getEffectId';\nimport isPassiveEffect from './isPassiveEffect';\nimport getNameForPassive from './getNameForPassive';\nimport isProcEffect from './isProcEffect';\nimport getNameForProc from './getNameForProc';\n/**\n * @description Get the name of a given object.\n * @param effect Object to get the name from.\n * @param metadata Optional sources of metadata for procs and passives; defaults to internal metadata for respective types.\n * @returns Name of the input effect if it exists; empty string otherwise.\n */\nexport default function getEffectName(effect, metadata = {}) {\n    let resultName = '';\n    const effectId = getEffectId(effect);\n    if (isPassiveEffect(effect)) {\n        resultName = getNameForPassive(effectId, metadata && metadata.passive);\n    }\n    else if (isProcEffect(effect)) {\n        resultName = getNameForProc(effectId, metadata && metadata.proc);\n    }\n    return resultName;\n}\n","/**\n * @description Get the effects of a given extra skill.\n * @param skill Extra skill to get the effects of.\n * @returns Effects of the given extra skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForExtraSkill(skill) {\n    return (skill && Array.isArray(skill.effects)) ? skill.effects : [];\n}\n","/**\n * @description Get the effects of a given item.\n * @param item Item to get the effects of, if any are present,\n * @returns Effects of the given item if they exist, an empty array otherwise.\n */\nexport default function getEffectsForItem(item) {\n    let result = [];\n    if (item && item.effect) {\n        if (Array.isArray(item.effect)) {\n            result = item.effect;\n        }\n        else if (Array.isArray(item.effect.effect)) {\n            const { effect, target_area: targetArea, target_type: targetType } = item.effect;\n            result = effect.map(e => {\n                // apply target data to each effect\n                const fullProcEffect = Object.assign({}, e);\n                fullProcEffect['target area'] = targetArea;\n                fullProcEffect['target type'] = targetType;\n                return fullProcEffect;\n            });\n        }\n    }\n    return result;\n}\n","/**\n * @description Generate a URL to display the image with the given item thumbnail filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents the thumbnail image for a given item.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getItemImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/item/${fileName || ''}`;\n}\n","/**\n * @description Get the effects of a given leader skill.\n * @param skill Leader skill to get the effects of.\n * @returns Effects of the given leader skill if they exist, an empty array otherwise.\n */\nexport default function getEffectsForLeaderSkill(skill) {\n    return skill && Array.isArray(skill.effects) ? skill.effects : [];\n}\n","/**\n * @description Generate the file names for each of the image type for a given unit ID.\n * @param id Unit ID to use to generate the file names.\n * @param suffix Optional parameter that's useful for things like alternate art.\n * @returns Set of file names for each image type (spritesheet, battle avatar, guide avatar, full illustration).\n */\nexport default function getUnitImageFileNames(id, suffix = '') {\n    const fileNameSuffix = `${id || ''}${suffix || ''}.png`;\n    return {\n        spritesheet: `unit_anime_${fileNameSuffix}`,\n        battleAvatar: `unit_ills_battle_${fileNameSuffix}`,\n        guideAvatar: `unit_ills_thum_${fileNameSuffix}`,\n        fullIllustration: `unit_ills_full_${fileNameSuffix}`,\n    };\n}\n","/**\n * @description Generate a URL to display the image with the given unit filename.\n * @param baseContentUrl Base URL of the server.\n * @param fileName Name of the file that represents an image for a given unit.\n * @returns Generated URL based on the given content URL and file name.\n */\nexport default function getUnitImageUrl(baseContentUrl, fileName) {\n    return `${baseContentUrl || ''}/unit/img/${fileName || ''}`;\n}\n","/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_UPPERCASE_A = 'A'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_LOWERCASE_A = 'a'.charCodeAt(0);\n/**\n * @ignore\n */\nexport const CHARACTER_CODE_FOR_NUMBER_0 = '0'.charCodeAt(0);\n","/**\n * @description Extract the ID of a string in the format of `number@actualId`. If there\n * is no value after the @ character or if no @ character is present, the original ID is returned.\n * This is particularly useful for extracting the ID of [[ISpEnhancementEntry.dependency|`ISpEnhancementEntry.dependency`]].\n * @param id Original SP Enhancement Entry ID.\n * @returns The ID of a string in the format of `number@actualId`, or the original input if\n * there is no @ character or no value after the @ character.\n */\nexport default function getSpEntryId(id) {\n    return (typeof id === 'string' && id.split('@')[1]) || id;\n}\n","/**\n * @description Get the effects of a given SP Enhancement Entry.\n * @param entry SP Enhancement Entry to get the effects of.\n * @returns Effects of the given SP Enhancement Entry if they exist, an empty array otherwise.\n */\nexport default function getEffectsForSpEnhancement(entry) {\n    const result = [];\n    if (entry && entry.skill && Array.isArray(entry.skill.effects)) {\n        const effectWrappers = entry.skill.effects;\n        effectWrappers.forEach(effectWrapper => {\n            Object.keys(effectWrapper).forEach(spType => {\n                const originalEffect = effectWrapper[spType];\n                const unwrappedEffect = Object.assign(Object.assign({}, originalEffect), { sp_type: spType });\n                result.push(unwrappedEffect);\n            });\n        });\n    }\n    return result;\n}\n","import { SpCategoryName } from '../datamine-types';\n/**\n * @description Get the associated category name with a given category ID.\n * @param categoryId Category ID to get the name of.\n * @returns Name of the given category ID or the string 'Unknown'.\n */\nexport default function getSpCategoryName(categoryId) {\n    let result;\n    const numericalCategoryId = +categoryId;\n    switch (numericalCategoryId) {\n        case 1:\n            result = SpCategoryName['Parameter Boost'];\n            break;\n        case 2:\n            result = SpCategoryName.Spark;\n            break;\n        case 3:\n            result = SpCategoryName['Critical Hits'];\n            break;\n        case 4:\n            result = SpCategoryName['Attack Boost'];\n            break;\n        case 5:\n            result = SpCategoryName['BB Gauge'];\n            break;\n        case 6:\n            result = SpCategoryName['HP Recovery'];\n            break;\n        case 7:\n            result = SpCategoryName.Drops;\n            break;\n        case 8:\n            result = SpCategoryName['Ailment Resistance'];\n            break;\n        case 9:\n            result = SpCategoryName['Ailment Infliction'];\n            break;\n        case 10:\n            result = SpCategoryName['Damage Reduction'];\n            break;\n        case 11:\n            result = SpCategoryName.Special;\n            break;\n        default:\n            result = SpCategoryName.Unknown;\n            break;\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding character code for a given index.\n * It expects an index between 0 and 61 inclusive; will return an empty string if\n * the given value is outside of the range.\n * @param index Index of an SP entry in a given skills array.\n * @returns Corresponding single alphanumeric character to the given index\n * or an empty string if the index is invalid.\n */\nexport default function spIndexToCode(index) {\n    let result = '';\n    let correspondingCharacterCode = -1;\n    if (Number.isInteger(index)) {\n        if (index >= 0 && index <= 25) { // A-Z\n            correspondingCharacterCode = index + CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (index >= 26 && index <= 51) { // a-z\n            correspondingCharacterCode = (index - 26) + CHARACTER_CODE_FOR_LOWERCASE_A;\n        }\n        else if (index >= 52 && index <= 61) { // 0-9\n            correspondingCharacterCode = (index - 52) + CHARACTER_CODE_FOR_NUMBER_0;\n        }\n    }\n    if (correspondingCharacterCode !== -1) {\n        result = String.fromCharCode(correspondingCharacterCode);\n    }\n    return result;\n}\n","import { CHARACTER_CODE_FOR_UPPERCASE_A, CHARACTER_CODE_FOR_NUMBER_0, CHARACTER_CODE_FOR_LOWERCASE_A, } from './_constants';\n/**\n * @description Get the corresponding index for a given character code.\n * It expects an alphanumeric character and will return -1 otherwise.\n * @param code Character code an SP entry in a given skills array.\n * @returns Corresponding index to the given character or -1 if the\n * character is invalid.\n */\nexport default function spCodeToIndex(code) {\n    let result = -1;\n    let characterCodeOffset = -1;\n    if (!!code && typeof code === 'string' && code.length === 1) {\n        if (code >= 'A' && code <= 'Z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_UPPERCASE_A;\n        }\n        else if (code >= 'a' && code <= 'z') {\n            characterCodeOffset = CHARACTER_CODE_FOR_LOWERCASE_A - 26;\n        }\n        else if (code >= '0' && code <= '9') {\n            characterCodeOffset = CHARACTER_CODE_FOR_NUMBER_0 - 52;\n        }\n    }\n    if (characterCodeOffset !== -1) {\n        result = code.charCodeAt(0) - characterCodeOffset;\n    }\n    return result;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get the first SP Enhancement Entry that matches the given SP Entry ID, if it exists.\n * @param id SP Enhancement entry ID.\n * @param entries Collection of SP Enhancement entries to search in.\n * @returns Corresponding SP Enhancement entry with the given SP ID, undefined otherwise.\n */\nexport default function getSpEntryWithId(id, entries) {\n    const spId = getSpEntryId(id);\n    return (id && Array.isArray(entries) && entries.find(e => getSpEntryId(e && e.id) === spId)) || void 0;\n}\n","import getSpEntryId from './getSpEntryId';\n/**\n * @description Get all SP Enhancement entries that one would need to unlock the given SP entry.\n * @param entry SP Entry to get dependencies for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that are required to unlock the given SP entry.\n */\nexport default function getAllDependenciesForSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependencies = [];\n    if (entry && entry.dependency && Array.isArray(allEntries) && allEntries.length > 0) {\n        const dependencyId = getSpEntryId(entry.dependency);\n        const dependencyEntry = allEntries.find(s => getSpEntryId(s && s.id) === dependencyId);\n        if (dependencyEntry && !addedEntries.has(dependencyEntry)) {\n            addedEntries.add(dependencyEntry);\n            const subDependencies = getAllDependenciesForSpEntry(dependencyEntry, allEntries, addedEntries);\n            dependencies = [dependencyEntry].concat(subDependencies);\n        }\n    }\n    return dependencies;\n}\n","/**\n * @description Get all SP Enhancement entries that require the given SP entry in order to be unlockable.\n * @param entry SP Entry to get dependents for.\n * @param allEntries Collection of SP Entries to search in.\n * @param addedEntries Entries that have already been added to the resulting collection; used to handle circular references.\n * @returns Collection of SP Enhancement entries (if any) that require the given SP entry in order to be unlockable.\n */\nexport default function getAllEntriesThatDependOnSpEntry(entry, allEntries, addedEntries = new Set()) {\n    let dependents = [];\n    if (entry && entry.id && Array.isArray(allEntries) && allEntries.length > 0) {\n        const entryId = entry.id;\n        dependents = allEntries\n            .filter(s => {\n            return s.dependency &&\n                s.dependency.includes(entryId) &&\n                !addedEntries.has(s);\n        });\n        dependents.forEach(dependent => {\n            addedEntries.add(dependent);\n            const subDependents = getAllEntriesThatDependOnSpEntry(dependent, allEntries, addedEntries);\n            dependents = dependents.concat(subDependents);\n        });\n    }\n    return dependents;\n}\n","/* NOTE: this file is automatically generated; do not edit this file */\nexport default '0.7.0';\n"]}